# coding: utf-8
#
# Copyright 2024 The Oppia Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for voiecover service methods."""

from __future__ import annotations

from core import feconf
from core.domain import state_domain
from core.domain import voiceover_services
from core.platform import models
from core.tests import test_utils


MYPY = False
if MYPY: # pragma: no cover
    from mypy_imports import voiceover_models


(voiceover_models,) = models.Registry.import_models([
    models.Names.VOICEOVER])


class EntityVoiceoversServicesTests(test_utils.GenericTestBase):
    def test_get_entity_voiceovers_returns_correctly(self) -> None:
        dummy_manual_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': False,
            'duration_secs': 6.1
        }
        dummy_autogenerated_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename2.mp3',
            'file_size_bytes': 3500,
            'needs_update': False,
            'duration_secs': 5.9
        }
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id', 1, 'en-US', {
                'content_0': {
                    feconf.VoiceoverType.MANUAL.value: (
                        dummy_manual_voiceover_dict),
                    feconf.VoiceoverType.AUTO.value: (
                        dummy_autogenerated_voiceover_dict)
                }
            }
        ).put()

        entity_voiceovers_instance = (
            voiceover_services.get_voiceovers_for_given_language_accent_code(
                'exploration', 'exp_id', 1, 'en-US'))

        self.assertEqual(entity_voiceovers_instance.entity_id, 'exp_id')
        self.assertEqual(entity_voiceovers_instance.entity_type, 'exploration')
        self.assertEqual(entity_voiceovers_instance.entity_version, 1)
        self.assertEqual(
            entity_voiceovers_instance.language_accent_code, 'en-US')
        self.assertDictEqual(
            entity_voiceovers_instance.voiceovers['content_0'][
                feconf.VoiceoverType.MANUAL].to_dict(),
            dummy_manual_voiceover_dict)
        self.assertDictEqual(
            entity_voiceovers_instance.voiceovers['content_0'][
                feconf.VoiceoverType.AUTO].to_dict(),
            dummy_autogenerated_voiceover_dict)

    def test_get_entity_voiceovers_creates_new_entity(self) -> None:
        entity_voiceovers_instance = (
            voiceover_services.get_voiceovers_for_given_language_accent_code(
                'exploration', 'exp_id', 1, 'en-US'))

        self.assertEqual(entity_voiceovers_instance.entity_id, 'exp_id')
        self.assertEqual(entity_voiceovers_instance.entity_type, 'exploration')
        self.assertEqual(entity_voiceovers_instance.entity_version, 1)
        self.assertEqual(
            entity_voiceovers_instance.language_accent_code, 'en-US')
        self.assertDictEqual(entity_voiceovers_instance.voiceovers, {})
