# coding: utf-8
#
# Copyright 2020 The Oppia Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Models related to Oppia improvement tasks."""

from __future__ import absolute_import  # pylint: disable=import-only-modules
from __future__ import unicode_literals  # pylint: disable=import-only-modules

import datetime

from core.domain import user_services
from core.platform import models
import utils

(improvements_models,) = (
    models.Registry.import_models([models.NAMES.improvements]))


class TaskEntry(object):
    """Domain object representing a task entry model in storage.

    Attributes:
        entity_type: str. The type of entity a task entry refers to.
        entity_id: str. The ID of the entity a task entry refers to.
        entity_version: int. The version of the entity a task entry refers to.
        task_type: str. The type of task a task entry tracks.
        target_type: str. The type of sub-entity a task entry refers to.
        target_id: str. The ID of the sub-entity a task entry refers to.
        issue_description: str. The sentence generated by Oppia to describe why
            the task was created.
        status: str. Tracks the state/progress of a task entry.
        resolver_id: str. ID of the user who closed the task, if any.
        resolved_on: str. The date and time at which a task was closed or
            deprecated.
    """

    def __init__(
            self, entity_type, entity_id, entity_version, task_type,
            target_type, target_id, issue_description, status, resolver_id,
            resolved_on):
        self.entity_type = entity_type
        self.entity_id = entity_id
        self.entity_version = entity_version
        self.task_type = task_type
        self.target_type = target_type
        self.target_id = target_id
        self.issue_description = issue_description
        self.status = status
        self.resolver_id = resolver_id
        self.resolved_on = resolved_on

    @property
    def task_id(self):
        """Returns the unique identifier of this task.

        Returns:
            str. The ID of this task.
        """
        return improvements_models.TaskEntryModel.generate_task_id(
            self.entity_type, self.entity_id, self.entity_version,
            self.task_type, self.target_type, self.target_id)

    @property
    def composite_entity_id(self):
        """Returns value of helper field for identifying the task's target
        entity.

        Returns:
            str. The value of the helper field.
        """
        return improvements_models.TaskEntryModel.generate_composite_entity_id(
            self.entity_type, self.entity_id, self.entity_version)

    def open(self):
        """Marks this task as open and resets the corresponding fields for
        tracking who is responsible and when the action took place.
        """
        self.status = improvements_models.TASK_STATUS_OPEN
        self.resolver_id = None
        self.resolved_on = None

    def obsolete(self):
        """Marks this task as obsolete and resets the corresponding fields for
        tracking who is responsible and when the action took place.
        """
        self.status = improvements_models.TASK_STATUS_OBSOLETE
        self.resolver_id = None
        self.resolved_on = None

    def resolve(self, user_id):
        """Marks this task as resolved and updates the corresponding fields for
        tracking who is responsible and when the action took place.

        Args:
            user_id: str. The ID of the user who has resolved this issue.
        """
        self.status = improvements_models.TASK_STATUS_RESOLVED
        self.resolver_id = user_id
        self.resolved_on = datetime.datetime.utcnow()

    def apply_changes(self, task_entry_model):
        """Makes changes to the given model if any differences are found.

        Args:
            task_entry_model: improvements_models.TaskEntryModel.

        Returns:
            bool. Whether any change was made to the model.
        """
        if task_entry_model.id != self.task_id:
            raise Exception('Applying changes to wrong model')
        changes_made = False
        if task_entry_model.issue_description != self.issue_description:
            task_entry_model.issue_description = self.issue_description
            changes_made = True
        if task_entry_model.status != self.status:
            task_entry_model.status = self.status
            changes_made = True
        if task_entry_model.resolver_id != self.resolver_id:
            task_entry_model.resolver_id = self.resolver_id
            changes_made = True
        if task_entry_model.resolved_on != self.resolved_on:
            task_entry_model.resolved_on = self.resolved_on
            changes_made = True
        return changes_made

    def to_dict(self):
        """Returns a dict-representation of the task.

        Returns:
            dict. Contains the following keys:
                entity_type: str. The type of entity a task entry refers to.
                entity_id: str. The ID of the entity a task entry refers to.
                entity_version: int. The version of the entity a task entry
                    refers to.
                task_type: str. The type of task a task entry tracks.
                target_type: str. The type of sub-entity a task entry refers to.
                target_id: str. The ID of the sub-entity a task entry refers to.
                issue_description: str. The sentence generated by Oppia to
                    describe why the task was created.
                status: str. Tracks the state/progress of a task entry.
                resolver_username: str. ID of the user who closed the task, if any.
                resolved_on_msecs: float. Time this task was closed on in
                    milliseconds since epoch.
        """
        return {
            'entity_type': self.entity_type,
            'entity_id': self.entity_id,
            'entity_version': self.entity_version,
            'task_type': self.task_type,
            'target_type': self.target_type,
            'target_id': self.target_id,
            'issue_description': self.issue_description,
            'status': self.status,
            'resolver_username': (
                self.resolver_id and
                user_services.get_username(self.resolver_id)),
            'resolved_on_msecs': (
                self.resolved_on and
                utils.get_time_in_millisecs(self.resolved_on)),
        }

    @classmethod
    def from_dict(cls, task_dict):
        """Constructs a new domain instance from given dict of values. Ignores
        fields related to status (resolved_on_msecs, resolver_username), due to
        their vulnerability to becoming out of sync.

        Args:
            task_dict: dict. Contains the following keys:
                entity_type: str. The type of entity a task entry refers to.
                entity_id: str. The ID of the entity a task entry refers to.
                entity_version: int. The version of the entity a task entry
                    refers to.
                task_type: str. The type of task a task entry tracks.
                target_type: str. The type of sub-entity a task entry refers to.
                target_id: str. The ID of the sub-entity a task entry refers to.
                issue_description: str. The sentence generated by Oppia to
                    describe why the task was created.
                status: str. Tracks the state/progress of a task entry.

        Returns:
            TaskEntry.
        """
        return cls(
            task_dict['entity_type'], task_dict['entity_id'],
            task_dict['entity_version'], task_dict['task_type'],
            task_dict['target_type'], task_dict['target_id'],
            task_dict['issue_description'], task_dict['status'], None, None)

    def to_model(self):
        """Constructs a new ndb model instance from the values of self. The
        model is not retrieved from storage or placed into storage by this
        method.

        Returns:
            improvements_models.TaskEntryModel.
        """
        return improvements_models.TaskEntryModel(
            id=self.task_id,
            composite_entity_id=self.composite_entity_id,
            entity_type=self.entity_type,
            entity_id=self.entity_id,
            entity_version=self.entity_version,
            task_type=self.task_type,
            target_type=self.target_type,
            target_id=self.target_id,
            issue_description=self.issue_description,
            status=self.status,
            resolver_id=self.resolver_id,
            resolved_on=self.resolved_on)

    @classmethod
    def from_model(cls, task_entry_model):
        """Returns a new domain object from the values in the given ndb model.

        Args:
            task_entry_model: improvements_models.TaskEntryModel.

        Returns:
            TaskEntry.
        """
        return cls(
            task_entry_model.entity_type, task_entry_model.entity_id,
            task_entry_model.entity_version, task_entry_model.task_type,
            task_entry_model.target_type, task_entry_model.target_id,
            task_entry_model.issue_description, task_entry_model.status,
            task_entry_model.resolver_id, task_entry_model.resolved_on)
