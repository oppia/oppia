# coding: utf-8
#
# Copyright 2020 The Oppia Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Unit tests for core.domain.improvements_validators."""

from __future__ import absolute_import  # pylint: disable=import-only-modules
from __future__ import unicode_literals  # pylint: disable=import-only-modules

import ast
import datetime

from core.domain import exp_domain
from core.domain import exp_services
from core.domain import prod_validation_jobs_one_off
from core.domain import taskqueue_services
from core.platform import models
from core.tests import test_utils
import feconf

USER_EMAIL = 'useremail@example.com'
USER_NAME = 'username'
CURRENT_DATETIME = datetime.datetime.utcnow()

(improvements_models,) = models.Registry.import_models([
    models.NAMES.improvements])


class TaskEntryModelValidatorTests(test_utils.AuditJobsTestBase):

    USER_ID = 'uid_%s' % ('a' * 32)

    def setUp(self):
        super(TaskEntryModelValidatorTests, self).setUp()
        self.signup(USER_EMAIL, USER_NAME)
        self.user_id = self.get_user_id_from_email(USER_EMAIL)
        self.save_new_valid_exploration('exp_id', self.user_id)
        self.job_class = (
            prod_validation_jobs_one_off.TaskEntryModelAuditOneOffJob)

    def run_job_and_get_output(self):
        """Helper method to run job and fetch the output.

        Returns:
            list([str, *]). A list of output messages generated by the job.
        """
        job_id = self.job_class.create_new()
        self.assertEqual(
            self.count_jobs_in_mapreduce_taskqueue(
                taskqueue_services.QUEUE_NAME_ONE_OFF_JOBS), 0)
        self.job_class.enqueue(job_id)
        self.assertEqual(
            self.count_jobs_in_mapreduce_taskqueue(
                taskqueue_services.QUEUE_NAME_ONE_OFF_JOBS), 1)
        self.process_and_flush_pending_mapreduce_tasks()
        return [ast.literal_eval(o) for o in self.job_class.get_output(job_id)]

    def run_job_and_check_output(self, *expected_outputs):
        """Helper method to run job and check for the expected output.

        Args:
            *expected_outputs: list(*). The items expected to be found in the
                job's output.
        """
        self.assertItemsEqual(
            self.run_job_and_get_output(), list(expected_outputs))

    def test_no_models(self):
        self.run_job_and_check_output()

    def test_valid_model_check(self):
        improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            feconf.DEFAULT_INIT_STATE_NAME)
        self.run_job_and_check_output(['fully-validated TaskEntryModel', 1])

    def test_invalid_entity_id(self):
        task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'invalid_exp_id',
            1,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            feconf.DEFAULT_INIT_STATE_NAME)
        self.run_job_and_check_output(
            ['failed validation check for entity_ids field check of '
             'TaskEntryModel',
             ['Entity id %s: based on field entity_ids having value '
              'invalid_exp_id, expected model ExplorationModel with id '
              'invalid_exp_id but it doesn\'t exist' % (task_id,)]],
            ['failed validation check for target_id field check of '
             'TaskEntryModel',
             ['Entity id %s: exploration with id "invalid_exp_id" does not '
              'exist at version 1' % (task_id,)]])

    def test_invalid_entity_version(self):
        task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            2,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            feconf.DEFAULT_INIT_STATE_NAME)
        self.run_job_and_check_output(
            ['failed validation check for target_id field check of '
             'TaskEntryModel',
             ['Entity id %s: exploration with id "exp_id" does not exist at '
              'version 2' % (task_id,)]])

    def test_invalid_resolver_ids(self):
        task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            feconf.DEFAULT_INIT_STATE_NAME,
            issue_description='issue description',
            status=improvements_models.TASK_STATUS_RESOLVED,
            resolver_id=self.USER_ID,
            resolved_on=CURRENT_DATETIME)
        self.run_job_and_check_output(
            ['failed validation check for resolver_ids field check of '
             'TaskEntryModel',
             ['Entity id %s: based on field resolver_ids having value '
              '%s, expected model UserSettingsModel with id '
              '%s but it doesn\'t exist' % (
                  task_id, self.USER_ID, self.USER_ID)]])

    def test_invalid_id(self):
        improvements_models.TaskEntryModel(
            id='bad_id',
            composite_entity_id='exploration.exp_id.1',
            entity_type=improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            entity_id='exp_id',
            entity_version=1,
            task_type=improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            target_type=improvements_models.TASK_TARGET_TYPE_STATE,
            target_id=feconf.DEFAULT_INIT_STATE_NAME,
            status=improvements_models.TASK_STATUS_OPEN).put()
        self.run_job_and_check_output(
            ['failed validation check for model id check of TaskEntryModel',
             ['Entity id bad_id: Entity id does not match regex pattern']])

    def test_invalid_composite_entity_id(self):
        task_id = improvements_models.TaskEntryModel.generate_task_id(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            feconf.DEFAULT_INIT_STATE_NAME)
        improvements_models.TaskEntryModel(
            id=task_id,
            composite_entity_id='bad_composite_id',
            entity_type=improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            entity_id='exp_id',
            entity_version=1,
            task_type=improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            target_type=improvements_models.TASK_TARGET_TYPE_STATE,
            target_id=feconf.DEFAULT_INIT_STATE_NAME,
            status=improvements_models.TASK_STATUS_OPEN).put()
        self.run_job_and_check_output(
            ['failed validation check for composite_entity_id field check of '
             'TaskEntryModel',
             ['Entity id %s: composite_entity_id "bad_composite_id" should be '
              '"exploration.exp_id.1"' % (
                  task_id,)]])

    def test_status_open_but_resolver_id_is_set(self):
        task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            feconf.DEFAULT_INIT_STATE_NAME,
            issue_description='issue description',
            status=improvements_models.TASK_STATUS_OPEN,
            resolver_id=self.user_id)
        self.run_job_and_check_output(
            ['failed validation check for status field check of TaskEntryModel',
             ['Entity id %s: status is open but resolver_id is "%s", should be '
              'empty.' % (task_id, self.user_id)]])

    def test_status_open_but_resolved_on_is_set(self):
        task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            feconf.DEFAULT_INIT_STATE_NAME,
            issue_description='issue description',
            status=improvements_models.TASK_STATUS_OPEN,
            resolved_on=CURRENT_DATETIME)
        self.run_job_and_check_output(
            ['failed validation check for status field check of TaskEntryModel',
             ['Entity id %s: status is open but resolved_on is "%s", should be '
              'empty.' % (task_id, CURRENT_DATETIME)]])

    def test_status_resolved_but_resolver_id_is_not_set(self):
        task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            feconf.DEFAULT_INIT_STATE_NAME,
            issue_description='issue description',
            status=improvements_models.TASK_STATUS_RESOLVED,
            resolver_id=None,
            resolved_on=CURRENT_DATETIME)
        self.run_job_and_check_output(
            ['failed validation check for status field check of TaskEntryModel',
             ['Entity id %s: status is resolved but resolver_id is not set' % (
                 task_id,)]])

    def test_status_resolved_but_resolved_on_is_not_set(self):
        task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            feconf.DEFAULT_INIT_STATE_NAME,
            issue_description='issue description',
            status=improvements_models.TASK_STATUS_RESOLVED,
            resolver_id=self.user_id,
            resolved_on=None)
        self.run_job_and_check_output(
            ['failed validation check for status field check of TaskEntryModel',
             ['Entity id %s: status is resolved but resolved_on is not set' % (
                 task_id,)]])

    def test_missing_state_name_for_exploration_task_types(self):
        hbr_task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'invalid_state_name')
        ifl_task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_INEFFECTIVE_FEEDBACK_LOOP,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'invalid_state_name')
        ngr_task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_NEEDS_GUIDING_RESPONSES,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'invalid_state_name')
        sia_task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'exp_id',
            1,
            improvements_models.TASK_TYPE_SUCCESSIVE_INCORRECT_ANSWERS,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'invalid_state_name')
        output = self.run_job_and_get_output()
        self.assertEqual(len(output), 1)
        error_key, error_messages = output[0]

        self.assertEqual(
            error_key,
            'failed validation check for target_id field check of '
            'TaskEntryModel')
        self.assertItemsEqual(
            error_messages, [
                'Entity id %s: exploration with id "exp_id" does not have a '
                'state named "invalid_state_name" at version 1' % (
                    hbr_task_id,),
                'Entity id %s: exploration with id "exp_id" does not have a '
                'state named "invalid_state_name" at version 1' % (
                    ifl_task_id,),
                'Entity id %s: exploration with id "exp_id" does not have a '
                'state named "invalid_state_name" at version 1' % (
                    ngr_task_id,),
                'Entity id %s: exploration with id "exp_id" does not have a '
                'state named "invalid_state_name" at version 1' % (
                    sia_task_id,)
            ])

    def test_deleted_state_name_for_exploration_task_types(self):
        self.save_new_linear_exp_with_state_names_and_interactions(
            'linear_exp_id', 'owner_id',
            ['State 1', 'State 2', 'State 3'],
            ['TextInput', 'TextInput', 'EndExploration'])
        improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'linear_exp_id',
            1,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'State 2')
        improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'linear_exp_id',
            1,
            improvements_models.TASK_TYPE_INEFFECTIVE_FEEDBACK_LOOP,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'State 2')
        improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'linear_exp_id',
            1,
            improvements_models.TASK_TYPE_NEEDS_GUIDING_RESPONSES,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'State 2')
        improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'linear_exp_id',
            1,
            improvements_models.TASK_TYPE_SUCCESSIVE_INCORRECT_ANSWERS,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'State 2')

        exp_services.update_exploration( # v2
            'owner_id', 'linear_exp_id', [
                exp_domain.ExplorationChange(
                    {'cmd': 'delete_state', 'state_name': 'State 2'})
            ], 'Delete State 2')
        new_hbr_task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'linear_exp_id',
            2,
            improvements_models.TASK_TYPE_HIGH_BOUNCE_RATE,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'State 2')
        new_ifl_task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'linear_exp_id',
            2,
            improvements_models.TASK_TYPE_INEFFECTIVE_FEEDBACK_LOOP,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'State 2')
        new_ngr_task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'linear_exp_id',
            2,
            improvements_models.TASK_TYPE_NEEDS_GUIDING_RESPONSES,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'State 2')
        new_sia_task_id = improvements_models.TaskEntryModel.create(
            improvements_models.TASK_ENTITY_TYPE_EXPLORATION,
            'linear_exp_id',
            2,
            improvements_models.TASK_TYPE_SUCCESSIVE_INCORRECT_ANSWERS,
            improvements_models.TASK_TARGET_TYPE_STATE,
            'State 2')

        output = self.run_job_and_get_output()
        self.assertEqual(len(output), 2)
        self.assertEqual(output[0], ['fully-validated TaskEntryModel', 4])
        error_key, error_messages = output[1]
        self.assertEqual(
            error_key,
            'failed validation check for target_id field check of '
            'TaskEntryModel')
        self.assertItemsEqual(
            error_messages, [
                'Entity id %s: exploration with id "linear_exp_id" does not '
                'have a state named "State 2" at version 2' % (
                    new_ifl_task_id,),
                'Entity id %s: exploration with id "linear_exp_id" does not '
                'have a state named "State 2" at version 2' % (
                    new_hbr_task_id,),
                'Entity id %s: exploration with id "linear_exp_id" does not '
                'have a state named "State 2" at version 2' % (
                    new_ngr_task_id,),
                'Entity id %s: exploration with id "linear_exp_id" does not '
                'have a state named "State 2" at version 2' % (
                    new_sia_task_id,)
            ])
