# coding: utf-8
#
# Copyright 2014 The Oppia Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Models for managing Apache Beam jobs."""

from __future__ import absolute_import  # pylint: disable=import-only-modules
from __future__ import unicode_literals  # pylint: disable=import-only-modules

from core.platform import models

(base_models,) = models.Registry.import_models([models.NAMES.base_model])

datastore_services = models.Registry.import_datastore_services()

# The job is running.
BEAM_JOB_STATE_RUNNING = 'RUNNING'
# The job is created, but the system needs time to prepare before launching it.
BEAM_JOB_STATE_PENDING = 'PENDING'
# The job has been paused or has not yet started running.
BEAM_JOB_STATE_STOPPED = 'STOPPED'
# The job has been explicitly cancelled and is in the process of stopping.
BEAM_JOB_STATE_CANCELLING = 'CANCELLING'
# The job has been explicitly cancelled (terminal state).
BEAM_JOB_STATE_CANCELLED = 'CANCELLED'
# The job is still processing, but no longer reading data.
BEAM_JOB_STATE_DRAINING = 'DRAINING'
# The job is finished draining (terminal state).
BEAM_JOB_STATE_DRAINED = 'DRAINED'
# The job has been replaced by a newer version of the code (terminal state).
BEAM_JOB_STATE_UPDATED = 'UPDATED'
# The job has successfully completed (terminal state).
BEAM_JOB_STATE_DONE = 'DONE'
# The job has failed to complete (terminal state).
BEAM_JOB_STATE_FAILED = 'FAILED'
# The job did not report a state recognized by Google Cloud Dataflow.
BEAM_JOB_STATE_UNKNOWN = 'UNKNOWN'


class BeamJobRunModel(base_models.BaseModel):
    """Represents an individual execution of an Apache Beam job.

    IDs are generated by Google Cloud Dataflow, not Oppia.
    """

    # The name of the job class that implements the job's logic.
    job_name = datastore_services.StringProperty(required=True)
    # The state of the job at the time the model was last updated.
    latest_job_state = datastore_services.StringProperty(choices=[
        BEAM_JOB_STATE_DONE, BEAM_JOB_STATE_FAILED,
        BEAM_JOB_STATE_RUNNING, BEAM_JOB_STATE_PENDING,
        BEAM_JOB_STATE_UPDATED, BEAM_JOB_STATE_STOPPED,
        BEAM_JOB_STATE_CANCELLING, BEAM_JOB_STATE_CANCELLED,
        BEAM_JOB_STATE_DRAINING, BEAM_JOB_STATE_DRAINED,
        BEAM_JOB_STATE_UNKNOWN
    ], required=True)

    @property
    def is_in_terminal_state(self):
        """Returns whether the job run has reached a terminal state and will no
        longer run.

        Returns:
            bool. Whether the job has reached a terminal state.
        """
        return self.latest_job_state in [
            BEAM_JOB_STATE_CANCELLED, BEAM_JOB_STATE_DRAINED,
            BEAM_JOB_STATE_UPDATED, BEAM_JOB_STATE_DONE, BEAM_JOB_STATE_FAILED
        ]

    @staticmethod
    def get_deletion_policy():
        """Model doesn't contain any data directly corresponding to a user."""
        return base_models.DELETION_POLICY.NOT_APPLICABLE

    @staticmethod
    def get_model_association_to_user():
        """Model does not contain user data."""
        return base_models.MODEL_ASSOCIATION_TO_USER.NOT_CORRESPONDING_TO_USER

    @classmethod
    def get_export_policy(cls):
        """Model doesn't contain any data directly corresponding to a user."""
        return dict(super(BeamJobRunModel, cls).get_export_policy(), **{
            'job_name': base_models.EXPORT_POLICY.NOT_APPLICABLE,
            'latest_job_state': base_models.EXPORT_POLICY.NOT_APPLICABLE,
        })


class BeamJobRunResultModel(base_models.BaseModel):
    """Represents the result of an Apache Beam job.

    IDs are generated by Google Cloud Dataflow, not Oppia.
    """

    # The unordered text output generated by the corresponding Apache Beam job.
    stdout = datastore_services.TextProperty(repeated=True)
    # The unordered error output generated by the corresponding Apache Beam job.
    stderr = datastore_services.TextProperty(repeated=True)

    @staticmethod
    def get_deletion_policy():
        """Model doesn't contain any data directly corresponding to a user."""
        return base_models.DELETION_POLICY.NOT_APPLICABLE

    @staticmethod
    def get_model_association_to_user():
        """Model does not contain user data."""
        return base_models.MODEL_ASSOCIATION_TO_USER.NOT_CORRESPONDING_TO_USER

    @classmethod
    def get_export_policy(cls):
        """Model doesn't contain any data directly corresponding to a user."""
        return dict(super(BeamJobRunResultModel, cls).get_export_policy(), **{
            'stdout': base_models.EXPORT_POLICY.NOT_APPLICABLE,
            'stderr': base_models.EXPORT_POLICY.NOT_APPLICABLE,
        })
