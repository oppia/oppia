# coding: utf-8
#
# Copyright 2024 The Oppia Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for EntityVoiceoversModel models."""

from __future__ import annotations

from core import feconf
from core.platform import models
from core.tests import test_utils

from typing import Dict

MYPY = False
if MYPY: # pragma: no cover
    # Here, 'state_domain' is imported only for type checking.
    from core.domain import state_domain
    from mypy_imports import base_models
    from mypy_imports import voiceover_models

(base_models, voiceover_models) = models.Registry.import_models([
    models.Names.BASE_MODEL, models.Names.VOICEOVER
])


class EntityVoiceoversModelTest(test_utils.GenericEmailTestBase):
    """Unit tests for EntityVoiceoversModel class."""

    def test_create_new_model(self) -> None:
        dummy_manual_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': False,
            'duration_secs': 6.1
        }
        dummy_autogenerated_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename2.mp3',
            'file_size_bytes': 3500,
            'needs_update': False,
            'duration_secs': 5.9
        }
        entity_voiceovers_model = (
            voiceover_models.EntityVoiceoversModel.create_new(
                feconf.ENTITY_TYPE_EXPLORATION, 'exp_id', 1, 'en-US', {
                    'content_0': {
                        'manual': dummy_manual_voiceover_dict,
                        'auto': dummy_autogenerated_voiceover_dict
                        }
                    }))

        self.assertEqual(entity_voiceovers_model.entity_type, 'exploration')
        self.assertEqual(entity_voiceovers_model.entity_id, 'exp_id')
        self.assertEqual(entity_voiceovers_model.entity_version, 1)
        self.assertEqual(entity_voiceovers_model.language_accent_code, 'en-US')
        voiceovers_mapping = entity_voiceovers_model.voiceovers_mapping
        self.assertEqual(
            voiceovers_mapping['content_0']['manual'],
            dummy_manual_voiceover_dict)
        self.assertEqual(
            voiceovers_mapping['content_0']['auto'],
            dummy_autogenerated_voiceover_dict)

    def test_get_voiceover_model_returns_correctly(self) -> None:
        dummy_manual_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': False,
            'duration_secs': 6.1
        }
        dummy_autogenerated_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename2.mp3',
            'file_size_bytes': 3500,
            'needs_update': False,
            'duration_secs': 5.9
        }
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id', 1, 'en-US', {
                'content_0': {
                    feconf.VoiceoverType.MANUAL.value: (
                        dummy_manual_voiceover_dict),
                    'auto': dummy_autogenerated_voiceover_dict
                    }
                }
        ).put()

        entity_voiceovers_model = (
            voiceover_models.EntityVoiceoversModel.get_model(
                entity_type=feconf.ENTITY_TYPE_EXPLORATION,
                entity_id='exp_id',
                entity_version=1,
                language_accent_code='en-US'))

        self.assertEqual(entity_voiceovers_model.entity_type, 'exploration')
        self.assertEqual(entity_voiceovers_model.entity_id, 'exp_id')
        self.assertEqual(entity_voiceovers_model.entity_version, 1)
        self.assertEqual(entity_voiceovers_model.language_accent_code, 'en-US')
        voiceovers_mapping = entity_voiceovers_model.voiceovers_mapping
        self.assertEqual(
            voiceovers_mapping['content_0']['manual'],
            dummy_manual_voiceover_dict)
        self.assertEqual(
            voiceovers_mapping['content_0']['auto'],
            dummy_autogenerated_voiceover_dict)

    def test_get_export_policy_not_applicable(self) -> None:
        self.assertEqual(
            voiceover_models.EntityVoiceoversModel.get_export_policy(),
            {
                'created_on': base_models.EXPORT_POLICY.NOT_APPLICABLE,
                'deleted': base_models.EXPORT_POLICY.NOT_APPLICABLE,
                'last_updated': base_models.EXPORT_POLICY.NOT_APPLICABLE,
                'entity_id': base_models.EXPORT_POLICY.NOT_APPLICABLE,
                'entity_type': base_models.EXPORT_POLICY.NOT_APPLICABLE,
                'entity_version': base_models.EXPORT_POLICY.NOT_APPLICABLE,
                'language_accent_code':
                    base_models.EXPORT_POLICY.NOT_APPLICABLE,
                'voiceovers_mapping': base_models.EXPORT_POLICY.NOT_APPLICABLE
            }
        )

    def test_get_deletion_policy_not_applicable(self) -> None:
        self.assertEqual(
            voiceover_models.EntityVoiceoversModel.get_deletion_policy(),
            base_models.DELETION_POLICY.NOT_APPLICABLE)

    def test_get_model_association_to_user_not_corresponding_to_user(
        self
    ) -> None:
        model_cls = voiceover_models.EntityVoiceoversModel
        self.assertEqual(
            model_cls.get_model_association_to_user(),
            base_models.MODEL_ASSOCIATION_TO_USER.NOT_CORRESPONDING_TO_USER)

    def test_should_get_entity_voiceovers_model_by_exploration(self) -> None:
        dummy_manual_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': False,
            'duration_secs': 6.1
        }
        dummy_autogenerated_voiceover_dict: state_domain.VoiceoverDict = {
            'filename': 'filename2.mp3',
            'file_size_bytes': 3500,
            'needs_update': False,
            'duration_secs': 5.9
        }
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id_1', 1, 'en-US', {
                'content_0': {
                    'manual': dummy_manual_voiceover_dict,
                    'auto': dummy_autogenerated_voiceover_dict
                    }
                }).put()
        voiceover_models.EntityVoiceoversModel.create_new(
            feconf.ENTITY_TYPE_EXPLORATION, 'exp_id_2', 1, 'en-US', {
                'content_0': {
                    'manual': dummy_manual_voiceover_dict,
                    'auto': dummy_autogenerated_voiceover_dict
                    }
                }).put()
        retrieved_entity_voiceovers_model = (
            voiceover_models.EntityVoiceoversModel
            .get_entity_voiceovers_for_given_exploration(
                'exp_id_1', 'exploration', 1)
        )

        self.assertEqual(
            len(retrieved_entity_voiceovers_model), 1)


class VoiceoverAutogenerationPolicyModelTests(test_utils.GenericTestBase):
    """Unit tests for VoiceoverAutogenerationPolicyModel class."""

    def test_get_export_policy_not_applicable(self) -> None:
        model_cls = voiceover_models.VoiceoverAutogenerationPolicyModel
        self.assertEqual(
            model_cls.get_export_policy(),
            {
                'created_on': base_models.EXPORT_POLICY.NOT_APPLICABLE,
                'deleted': base_models.EXPORT_POLICY.NOT_APPLICABLE,
                'last_updated': base_models.EXPORT_POLICY.NOT_APPLICABLE,
                'language_codes_mapping': (
                    base_models.EXPORT_POLICY.NOT_APPLICABLE)
            }
        )

    def test_get_deletion_policy_not_applicable(self) -> None:
        model_cls = voiceover_models.VoiceoverAutogenerationPolicyModel
        self.assertEqual(
            model_cls.get_deletion_policy(),
            base_models.DELETION_POLICY.NOT_APPLICABLE)

    def test_get_model_association_to_user_not_corresponding_to_user(
        self
    ) -> None:
        model_cls = voiceover_models.VoiceoverAutogenerationPolicyModel
        self.assertEqual(
            model_cls.get_model_association_to_user(),
            base_models.MODEL_ASSOCIATION_TO_USER.NOT_CORRESPONDING_TO_USER)


class VoiceArtistMetadataModelTests(test_utils.GenericTestBase):
    """Unit tests for VoiceArtistMetadataModel class."""

    def test_get_get_export_policy(self) -> None:
        expected_export_policy_dict = {
            'created_on': base_models.EXPORT_POLICY.NOT_APPLICABLE,
            'deleted': base_models.EXPORT_POLICY.NOT_APPLICABLE,
            'last_updated': base_models.EXPORT_POLICY.NOT_APPLICABLE,
            'language_code_to_accent': base_models.EXPORT_POLICY.EXPORTED
        }
        self.assertDictEqual(
            voiceover_models.VoiceArtistMetadataModel.get_export_policy(),
            expected_export_policy_dict
        )

    def test_has_reference_to_user_id(self) -> None:
        user_id = 'user_id'
        self.assertFalse(
            voiceover_models.VoiceArtistMetadataModel.
            has_reference_to_user_id(user_id))

        voiceover_models.VoiceArtistMetadataModel.create_model(
            voice_artist_id=user_id, language_code_to_accent={})

        self.assertTrue(
            voiceover_models.VoiceArtistMetadataModel.
            has_reference_to_user_id(user_id))

    def test_should_raise_error_if_user_id_already_exists(self) -> None:
        user_id = 'user_id'
        voiceover_models.VoiceArtistMetadataModel.create_model(
            voice_artist_id=user_id, language_code_to_accent={})

        with self.assertRaisesRegex(
            Exception,
            'A voice artist metadata model with a given voice'
            'artist ID already exists'
        ):
            voiceover_models.VoiceArtistMetadataModel.create_model(
            voice_artist_id=user_id, language_code_to_accent={})

    def test_export_data_trivial(self) -> None:
        non_existent_user_id = 'non_existent_user_id'
        user_data = (
            voiceover_models.VoiceArtistMetadataModel.export_data(
                non_existent_user_id)
        )
        test_data: Dict[str, Dict[str, str]] = {}
        self.assertEqual(user_data, test_data)

    def test_export_data_nontrivial(self) -> None:
        language_code_to_accent = {
            'en': 'en-US',
            'hi': 'hi-IN'
        }
        user_id = 'user_id'
        voiceover_models.VoiceArtistMetadataModel.create_model(
            voice_artist_id=user_id,
            language_code_to_accent=language_code_to_accent)
        user_data = (
            voiceover_models.VoiceArtistMetadataModel.export_data(
                user_id))
        test_data: Dict[str, Dict[str, str]] = {
                'language_code_to_accent': language_code_to_accent
            }
        self.assertDictEqual(user_data, test_data)

    def test_get_deletion_policy_is_to_keep(self) -> None:
        self.assertEqual(
            voiceover_models.VoiceArtistMetadataModel.get_deletion_policy(),
            base_models.DELETION_POLICY.DELETE)

    def test_get_model_association_to_user(self) -> None:
        self.assertEqual(
            voiceover_models.VoiceArtistMetadataModel.
                get_model_association_to_user(),
            base_models.MODEL_ASSOCIATION_TO_USER.ONE_INSTANCE_PER_USER)

    def test_should_create_model_successfully(self) -> None:
        user_id = 'user_id'
        language_code_to_accent = {
            'en': 'en-US',
            'hi': 'hi-IN'
        }

        voice_artist_metadata_model = (
            voiceover_models.VoiceArtistMetadataModel.create_model(
                voice_artist_id=user_id,
                language_code_to_accent=language_code_to_accent
            )
        )
        retrieved_model = (
            voiceover_models.VoiceArtistMetadataModel.get(
                user_id, strict=False))
        assert retrieved_model

        self.assertEqual(
            voice_artist_metadata_model.id, retrieved_model.id)
        self.assertDictEqual(
            voice_artist_metadata_model.language_code_to_accent,
            retrieved_model.language_code_to_accent
        )


class ExplorationVoiceArtistsLinkModelTests(test_utils.GenericTestBase):
    """Unit tests for ExplorationVoiceArtistsLinkModel class."""

    def test_get_get_export_policy(self) -> None:
        expected_export_policy_dict = {
            'created_on': base_models.EXPORT_POLICY.NOT_APPLICABLE,
            'deleted': base_models.EXPORT_POLICY.NOT_APPLICABLE,
            'last_updated': base_models.EXPORT_POLICY.NOT_APPLICABLE,
            'content_id_to_voiceovers_mapping': (
                base_models.EXPORT_POLICY.NOT_APPLICABLE)
        }
        self.assertDictEqual(
            voiceover_models.ExplorationVoiceArtistsLinkModel
            .get_export_policy(),
            expected_export_policy_dict
        )

    def test_should_raise_error_if_exp_id_already_exists(self) -> None:
        exploration_id = 'exploration_id'
        voiceover_models.ExplorationVoiceArtistsLinkModel.create_model(
            exploration_id=exploration_id, content_id_to_voiceovers_mapping={})

        with self.assertRaisesRegex(
            Exception,
            'An exploration voice artist link model with a given '
            'exploration ID already exists'
        ):
            voiceover_models.ExplorationVoiceArtistsLinkModel.create_model(
            exploration_id=exploration_id, content_id_to_voiceovers_mapping={})

    def test_get_deletion_policy_is_to_keep(self) -> None:
        self.assertEqual(
            voiceover_models.ExplorationVoiceArtistsLinkModel.
            get_deletion_policy(),
            base_models.DELETION_POLICY.NOT_APPLICABLE
        )

    def test_get_model_association_to_user(self) -> None:
        self.assertEqual(
            voiceover_models.ExplorationVoiceArtistsLinkModel.
                get_model_association_to_user(),
            base_models.MODEL_ASSOCIATION_TO_USER.NOT_CORRESPONDING_TO_USER)

    def test_should_create_model_successfully(self) -> None:
        voiceover1: state_domain.VoiceoverDict = {
            'filename': 'filename1.mp3',
            'file_size_bytes': 3000,
            'needs_update': False,
            'duration_secs': 6.1
        }
        voiceover2: state_domain.VoiceoverDict = {
            'filename': 'filename2.mp3',
            'file_size_bytes': 3500,
            'needs_update': False,
            'duration_secs': 5.9
        }

        exploration_id = 'exploration_id'

        content_id_to_voiceovers_mapping = {
            'content_1': {
                'en': ('voice_artist_id_1', voiceover1)
            },
            'content_2': {
                'hi': ('voice_artist_id_2', voiceover2)
            }
        }

        exploration_voice_artist_link_model = (
            voiceover_models.ExplorationVoiceArtistsLinkModel.create_model(
                exploration_id=exploration_id,
                content_id_to_voiceovers_mapping=(
                    content_id_to_voiceovers_mapping)
            )
        )
        retrieved_model = (
            voiceover_models.ExplorationVoiceArtistsLinkModel.get(
                exploration_id, strict=False))
        assert retrieved_model

        self.assertEqual(
            exploration_voice_artist_link_model.id, retrieved_model.id)
        self.assertDictEqual(
            exploration_voice_artist_link_model.
            content_id_to_voiceovers_mapping,
            retrieved_model.content_id_to_voiceovers_mapping
        )
