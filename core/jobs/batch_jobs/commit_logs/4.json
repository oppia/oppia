[
  { "cmd": "add_state", "state_name": "Origine" },
  {
    "new_value": [
      { "type": "text", "value": "int a;<br>system.outPrintln()a;<br>" }
    ],
    "cmd": "edit_state_property",
    "old_value": [{ "type": "text", "value": "" }],
    "state_name": "Origine",
    "property_name": "content"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "A votre avis, les donn\u00e9es dangereuse proviennent:<br><br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [
      { "type": "text", "value": "int a;<br>system.outPrintln()a;<br>" }
    ],
    "state_name": "Origine",
    "property_name": "content"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "A votre avis, d'o\u00f9 proviennent les donn\u00e9es potenitellement dangereuses<br><br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [
      {
        "type": "text",
        "value": "A votre avis, les donn\u00e9es dangereuse proviennent:<br><br>"
      }
    ],
    "state_name": "Origine",
    "property_name": "content"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "A votre avis, d'o\u00f9 proviennent les donn\u00e9es potentiellement dangereuses ?<br><br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [
      {
        "type": "text",
        "value": "A votre avis, d'o\u00f9 proviennent les donn\u00e9es potenitellement dangereuses<br><br>"
      }
    ],
    "state_name": "Origine",
    "property_name": "content"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Origine",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Origine",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Origine",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Origine",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Origine",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Origine",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Origine",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>",
            ""
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Origine",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "Origine",
    "property_name": "widget_handlers"
  },
  {
    "new_value": "MultipleChoiceInput",
    "cmd": "edit_state_property",
    "old_value": "TextInput",
    "state_name": "Origine",
    "property_name": "widget_id"
  },
  {
    "new_value": {
      "choices": {
        "value": [
          "Seules les donn\u00e9es entr\u00e9es par l'utilisateur sont potentiellement dangereuses<br>",
          "Les donn\u00e9es entr\u00e9es par un utilisateur, mais aussi les donn\u00e9es internes (par exemple provenant d'une base de donn\u00e9es interne \u00e0 l'application) sont potentiellement dangereuses<br>"
        ]
      }
    },
    "cmd": "edit_state_property",
    "old_value": {
      "rows": { "value": 1 },
      "placeholder": { "value": "Type your answer here." },
      "columns": { "value": 60 }
    },
    "state_name": "Origine",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Origine",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Origine",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>",
            ""
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "Origine",
    "property_name": "widget_handlers"
  },
  { "cmd": "add_state", "state_name": "Utilisateur dangereux" },
  {
    "new_state_name": "Donn\u00e9es dangereuses",
    "cmd": "rename_state",
    "old_state_name": "Origine"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "Mais au fait, de quel(s) type(s) d'utilisateur(s) doit-on se m\u00e9fier ?<br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [{ "type": "text", "value": "" }],
    "state_name": "Utilisateur dangereux",
    "property_name": "content"
  },
  {
    "new_value": "MultipleChoiceInput",
    "cmd": "edit_state_property",
    "old_value": "TextInput",
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_id"
  },
  {
    "new_value": {
      "choices": {
        "value": [
          "Seulement des utilisateurs externes \u00e0 l'application<br>",
          "Des utilisateurs externes mais aussi internes \u00e0 l'application<br>",
          "De tous les utilisateurs : internes, externes et m\u00eame de l'administrateur<br>"
        ]
      }
    },
    "cmd": "edit_state_property",
    "old_value": {
      "rows": { "value": 1 },
      "placeholder": { "value": "Type your answer here." },
      "columns": { "value": 60 }
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", "", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", "", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", "", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", "", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", "", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", "", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": ["", ""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": ["", ""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": ["", ""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": ["", ""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": ["", ""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui bravo ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui bravo ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui bravo ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Toute source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 l'application. M\u00eame si votre application valide et \u00e9chappe correctement les donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une autre application moins rigoureuse aliment la base et y laisse entrer des donn\u00e9es dangereuses.<br>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui bravo ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui bravo ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui bravo ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui bravo ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! Les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !<br>"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! Les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! Les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !<br>"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! Les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !<br>"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "Mais au fait, une faille XSS (en anglais: <strong>Cross-Site Scripting</strong> vulnerabilities), c\u2019est quoi exactement ?<br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [
      {
        "type": "text",
        "value": "Mais au fait, une faille XSS, c\u2019est quoi exactement ?<br>"
      }
    ],
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "content"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. G\u00e9n\u00e9ralement ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs, mais il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. G\u00e9n\u00e9ralement ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs, mais il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>",
            ""
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. G\u00e9n\u00e9ralement ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs, mais il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. G\u00e9n\u00e9ralement ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs, mais il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. G\u00e9n\u00e9ralement ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs, mais il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>",
            ""
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  { "cmd": "add_state", "state_name": "Types de faille" },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. G\u00e9n\u00e9ralement ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs, mais il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. G\u00e9n\u00e9ralement ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs, mais il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "A votre avis, combien y a-t-il de sorte ou de type de failles XSS ?<br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [{ "type": "text", "value": "" }],
    "state_name": "Types de faille",
    "property_name": "content"
  },
  {
    "new_value": "MultipleChoiceInput",
    "cmd": "edit_state_property",
    "old_value": "TextInput",
    "state_name": "Types de faille",
    "property_name": "widget_id"
  },
  {
    "new_value": {
      "choices": {
        "value": [
          "Un seul type<br>",
          "Deux types<br>",
          "Plusieurs types, qui varient en fonction des classifications<br>"
        ]
      }
    },
    "cmd": "edit_state_property",
    "old_value": {
      "rows": { "value": 1 },
      "placeholder": { "value": "Type your answer here." },
      "columns": { "value": 60 }
    },
    "state_name": "Types de faille",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "I n'existe pas de classification officielle des failles XSS, mais on distingue couramment <b>3 types</b> de failles XSS:<br><ul><li>les <strong>XSS non-persistants </strong>(<strong>reflected \nXSS</strong>)</li><li>les <strong>XSS persistants </strong>(<strong>stored XSS</strong>)</li><li>les <strong>XSS bas\u00e9s sur le\u00a0DOM\u00a0</strong>(Document Object Model - \n<strong>DOM-based XSS</strong>)</li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "state_name": "Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_state_name": "3 Types de faille",
    "cmd": "rename_state",
    "old_state_name": "Types de faille"
  },
  {
    "new_state_name": "5 Donn\u00e9es dangereuses",
    "cmd": "rename_state",
    "old_state_name": "Donn\u00e9es dangereuses"
  },
  {
    "new_state_name": "6 Utilisateur dangereux",
    "cmd": "rename_state",
    "old_state_name": "Utilisateur dangereux"
  },
  { "cmd": "add_state", "state_name": "Infos sur les types de faille XSS" },
  {
    "new_state_name": "4 D\u00e9tails types de faille XSS",
    "cmd": "rename_state",
    "old_state_name": "Infos sur les types de faille XSS"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "4 D\u00e9tails types de faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "I n'existe pas de classification officielle des failles XSS, mais on distingue couramment <b>3 types</b> de failles XSS:<br><ul><li>les <strong>XSS non-persistants </strong>(<strong>reflected \nXSS</strong>)</li><li>les <strong>XSS persistants </strong>(<strong>stored XSS</strong>)</li><li>les <strong>XSS bas\u00e9s sur le\u00a0DOM\u00a0</strong>(Document Object Model - \n<strong>DOM-based XSS</strong>)</li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "5 Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "I n'existe pas de classification officielle des failles XSS, mais on distingue couramment <b>3 types</b> de failles XSS:<br><ul><li><font size=\"2\">les <strong>XSS non-persistants </strong>(<strong>reflected \nXSS</strong>)</font></li><li><font size=\"2\">les <strong>XSS persistants </strong>(<strong>stored XSS</strong>)</font></li><li><font size=\"2\">les <strong>XSS bas\u00e9s sur le&nbsp;DOM&nbsp;</strong>(Document Object Model - \n<strong>DOM-based XSS</strong>)</font></li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "3 Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "5 Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "4 D\u00e9tails types de faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "4 D\u00e9tails types de faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "Maintenant que vous savez tout \u00e7a, \u00e0 votre avis, d'o\u00f9 proviennent les donn\u00e9es potentiellement dangereuses ?<br><br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [
      {
        "type": "text",
        "value": "A votre avis, d'o\u00f9 proviennent les donn\u00e9es potentiellement dangereuses ?<br><br>"
      }
    ],
    "state_name": "5 Donn\u00e9es dangereuses",
    "property_name": "content"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "Au final, de quel(s) type(s) d'utilisateur(s) doit-on se m\u00e9fier ?<br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [
      {
        "type": "text",
        "value": "Mais au fait, de quel(s) type(s) d'utilisateur(s) doit-on se m\u00e9fier ?<br>"
      }
    ],
    "state_name": "6 Utilisateur dangereux",
    "property_name": "content"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "4 D\u00e9tails types de faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Il n'existe pas de classification officielle des failles XSS, mais on distingue couramment <b>3 types</b> de failles XSS:<br><ul><li>les <strong>XSS non-persistants </strong>(<strong>reflected \nXSS</strong>)</li><li>les <strong>XSS persistants </strong>(<strong>stored XSS</strong>)</li><li>les <strong>XSS bas\u00e9s sur le\u00a0DOM\u00a0</strong>(Document Object Model - \n<strong>DOM-based XSS</strong>)</li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "4 D\u00e9tails types de faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "I n'existe pas de classification officielle des failles XSS, mais on distingue couramment <b>3 types</b> de failles XSS:<br><ul><li><font size=\"2\">les <strong>XSS non-persistants </strong>(<strong>reflected \nXSS</strong>)</font></li><li><font size=\"2\">les <strong>XSS persistants </strong>(<strong>stored XSS</strong>)</font></li><li><font size=\"2\">les <strong>XSS bas\u00e9s sur le&nbsp;DOM&nbsp;</strong>(Document Object Model - \n<strong>DOM-based XSS</strong>)</font></li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "3 Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "Vous allez maintenant voir une br\u00e8ve description de ces trois types de faille XSS<br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [{ "type": "text", "value": "" }],
    "state_name": "4 D\u00e9tails types de faille XSS",
    "property_name": "content"
  },
  {
    "new_value": "Continue",
    "cmd": "edit_state_property",
    "old_value": "TextInput",
    "state_name": "4 D\u00e9tails types de faille XSS",
    "property_name": "widget_id"
  },
  {
    "new_value": { "buttonText": { "value": "Continue" } },
    "cmd": "edit_state_property",
    "old_value": {
      "rows": { "value": 1 },
      "placeholder": { "value": "Type your answer here." },
      "columns": { "value": 60 }
    },
    "state_name": "4 D\u00e9tails types de faille XSS",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "Vous pouvez maintenant acc\u00e9der \u00e0 une br\u00e8ve description de ces trois types de faille XSS<br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [
      {
        "type": "text",
        "value": "Vous allez maintenant voir une br\u00e8ve description de ces trois types de faille XSS<br>"
      }
    ],
    "state_name": "4 D\u00e9tails types de faille XSS",
    "property_name": "content"
  },
  {
    "new_value": "SetInput",
    "cmd": "edit_state_property",
    "old_value": "Continue",
    "state_name": "4 D\u00e9tails types de faille XSS",
    "property_name": "widget_id"
  },
  {
    "new_value": { "element_type": { "value": "UnicodeString" } },
    "cmd": "edit_state_property",
    "old_value": { "buttonText": { "value": "Continue" } },
    "state_name": "4 D\u00e9tails types de faille XSS",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": "Continue",
    "cmd": "edit_state_property",
    "old_value": "SetInput",
    "state_name": "4 D\u00e9tails types de faille XSS",
    "property_name": "widget_id"
  },
  {
    "new_value": { "buttonText": { "value": "Continue" } },
    "cmd": "edit_state_property",
    "old_value": { "element_type": { "value": "UnicodeString" } },
    "state_name": "4 D\u00e9tails types de faille XSS",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "Revenons un peu sur les donn\u00e9es dangereuses. D'apr\u00e8s ce que vous venez de lire, d'o\u00f9 proviennent-elles au final ?<br><br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [
      {
        "type": "text",
        "value": "Maintenant que vous savez tout \u00e7a, \u00e0 votre avis, d'o\u00f9 proviennent les donn\u00e9es potentiellement dangereuses ?<br><br>"
      }
    ],
    "state_name": "5 Donn\u00e9es dangereuses",
    "property_name": "content"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui bravo ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "5 Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "5 Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "5 Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse aliment la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "5 Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. G\u00e9n\u00e9ralement ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs, mais il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "choices": {
        "value": [
          "Une faille dans la structure d'une application<br>",
          "Une faille dans le code d'une application<br>",
          "Je ne sais pas trop<br>"
        ]
      }
    },
    "cmd": "edit_state_property",
    "old_value": {
      "choices": { "value": ["choix 1<br>", "choix 2<br>", "choix 3<br>"] }
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span>Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div>Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)\u00a0sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </div>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span>Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<div><font size=\"2\">Les failles <strong>XSS</strong> (<strong>Cross-Site \nScripting</strong> vulnerabilities)&nbsp;sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></div>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span>Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span>Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "3 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span>d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span>Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span>"
          ]
        },
        {
          "dest": "3 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  { "cmd": "add_state", "state_name": "Lutte" },
  { "cmd": "add_state", "state_name": "2 Cons\u00e9quences" },
  {
    "new_state_name": "3 Qu'est-ce qu'un faille XSS",
    "cmd": "rename_state",
    "old_state_name": "2 Qu'est-ce qu'un faille XSS"
  },
  {
    "new_state_name": "4 Types de faille",
    "cmd": "rename_state",
    "old_state_name": "3 Types de faille"
  },
  {
    "new_state_name": "5 D\u00e9tails types de faille XSS",
    "cmd": "rename_state",
    "old_state_name": "4 D\u00e9tails types de faille XSS"
  },
  {
    "new_state_name": "6 Donn\u00e9es dangereuses",
    "cmd": "rename_state",
    "old_state_name": "5 Donn\u00e9es dangereuses"
  },
  {
    "new_state_name": "7 Utilisateur dangereux",
    "cmd": "rename_state",
    "old_state_name": "6 Utilisateur dangereux"
  },
  {
    "new_state_name": "8 Lutte",
    "cmd": "rename_state",
    "old_state_name": "Lutte"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "7 Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "7 Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "7 Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "Comment qualifierez-vous les cons\u00e9quences potentielles des failles XSS ?<br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [{ "type": "text", "value": "" }],
    "state_name": "2 Cons\u00e9quences",
    "property_name": "content"
  },
  {
    "new_value": "MultipleChoiceInput",
    "cmd": "edit_state_property",
    "old_value": "TextInput",
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_id"
  },
  {
    "new_value": { "choices": { "value": ["Mineures<br>", "Majeures"] } },
    "cmd": "edit_state_property",
    "old_value": {
      "rows": { "value": 1 },
      "placeholder": { "value": "Type your answer here." },
      "columns": { "value": 60 }
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span class=\"\"></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span></span>"
          ]
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span class=\"\"></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span class=\"\"></span>"
          ]
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span class=\"\"></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai.  Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates."
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span class=\"\"></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une <b>faille dans le code d'une application</b>. Il s'agit d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b> comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9 directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). <br><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span>endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span>Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une faille dans le code d'une application. Il s'agit <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "3 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une <b>faille dans le code d'une application</b>. Il s'agit d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b> comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9 directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). <br><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 <b>un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut</b>. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). <br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span>Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code\u00a0\u00e9x\u00e9cutable</strong>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). </span>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une <b>faille dans le code d'une application</b>. Il s'agit d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b> comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9 directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). <br><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 un <span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "3 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une <b>faille dans le code d'une application</b>. Il s'agit d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b> comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9 directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). <br><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 <b>un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut</b>. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). <br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici la r\u00e9ponse : les failles XSS sont des<b>\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut</b>. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). "
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une <b>faille dans le code d'une application</b>. Il s'agit d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b> comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9 directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). <br><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 <b>un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut</b>. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). <br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "<span class=\"ng-isolate-scope ng-scope\"><font size=\"2\">Pas de souci, voici la r\u00e9ponse : les failles <strong>XSS</strong> sont des&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d<strong>'injecter du code&nbsp;\u00e9x\u00e9cutable</strong>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). </font></span>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "3 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une <b>faille dans le code d'une application</b>. Il s'agit d'un endroit du code <b>o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut</b>. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b> comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9 directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). <br><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 <b>un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut</b>. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). <br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici la r\u00e9ponse : les failles XSS sont des<b>\u00a0failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut</b>. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b>\u00a0comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9\u00a0dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9\u00a0directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du\u00a0DOM \n(Document Object Model). "
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Non, une faille XSS est une <b>faille dans le code d'une application</b>. Il s'agit d'un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b> comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9 directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). <br><br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui tout \u00e0 fait. Une faille XSS correspond \u00e0 <b>un endroit du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut</b>. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). <br>"
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici la r\u00e9ponse : les failles XSS sont des<b>&nbsp;failles dans le code, c'est \u00e0 dire \ndes endroits du code o\u00f9 l'utilisateur peut entrer un peu ce qu'il veut</b>. Ces failles vont permettre \u00e0 un \nutilisateur malveillant d'injecter du <b>code ex\u00e9cutable</b>&nbsp;comme par \nexemple du javascript mais aussi VBScript, ActiveX etc.. Lorsque la donn\u00e9e est r\u00e9-affich\u00e9e \u00e0 l'utilisateur, ce code \nmalveillant sera ex\u00e9cut\u00e9&nbsp;dans les interpr\u00e9teurs des navigateurs. Il peut \naussi \u00eatre ex\u00e9cut\u00e9&nbsp;directement c\u00f4t\u00e9 client (sans passer par le serveur) suite \u00e0 une modification du&nbsp;DOM \n(Document Object Model). "
          ]
        },
        {
          "dest": "4 Types de faille",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "3 Qu'est-ce qu'un faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "5 D\u00e9tails types de faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Il n'existe pas de classification officielle des failles XSS, mais on distingue couramment <b>3 types</b> de failles XSS:<br><ul><li>les <b>XSS non-persistants (reflected \nXSS)</b></li><li>les<b> XSS persistants (stored XSS)</b></li><li>les <b>XSS bas\u00e9s sur le\u00a0DOM</b>\u00a0(Document Object Model - \n<b>DOM-based XSS</b>)</li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "5 D\u00e9tails types de faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Il n'existe pas de classification officielle des failles XSS, mais on distingue couramment <b>3 types</b> de failles XSS:<br><ul><li><font size=\"2\">les <strong>XSS non-persistants </strong>(<strong>reflected \nXSS</strong>)</font></li><li><font size=\"2\">les <strong>XSS persistants </strong>(<strong>stored XSS</strong>)</font></li><li><font size=\"2\">les <strong>XSS bas\u00e9s sur le&nbsp;DOM&nbsp;</strong>(Document Object Model - \n<strong>DOM-based XSS</strong>)</font></li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "4 Types de faille",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013 </b><oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;http://www.google.fr/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=4&amp;amp;ved=0CEYQFjAD&amp;amp;url=http%252525252525252525253A%252525252525252525252F%252525252525252525252Fowasptop10.googlecode.com%252525252525252525252Ffiles%252525252525252525252FOWASP%252525252525252525252520Top%25252525252525252525252010%252525252525252525252520-%2525252525252525252525202013%252525252525252525252520-%252525252525252525252520French.pdf&amp;amp;ei=dGtCU-eCHOe47AaSr4HABQ&amp;amp;usg=AFQjCNFoVgxK8PKZUvRQDeXKVJIWRIkaDA&amp;amp;sig2=nBri2LLVNm4pp9Tu2Dh9CQ&amp;amp;bvm=bv.64125504,d.ZGU&amp;quot;\"></oppia-noninteractive-link> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013 </b><oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;http://www.google.fr/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=4&amp;amp;ved=0CEYQFjAD&amp;amp;url=http%252525252525252525253A%252525252525252525252F%252525252525252525252Fowasptop10.googlecode.com%252525252525252525252Ffiles%252525252525252525252FOWASP%252525252525252525252520Top%25252525252525252525252010%252525252525252525252520-%2525252525252525252525202013%252525252525252525252520-%252525252525252525252520French.pdf&amp;amp;ei=dGtCU-eCHOe47AaSr4HABQ&amp;amp;usg=AFQjCNFoVgxK8PKZUvRQDeXKVJIWRIkaDA&amp;amp;sig2=nBri2LLVNm4pp9Tu2Dh9CQ&amp;amp;bvm=bv.64125504,d.ZGU&amp;quot;\"></oppia-noninteractive-link> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille la plus r\u00e9pandue dans les application Web. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le 3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique des applications web selon le classement OWASP 2013 !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013</b> <oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>!"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013 </b>(<oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>)!"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013</b> <oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>!"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013 </b>(<oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>) !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013 </b>(<oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>)!"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013 </b>(<oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>) !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013 </b>(<oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>) !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013 </b>(<oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>) !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013</b> !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "6 Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<ul><li><u>les <b>XSS non-persistants (reflected \nXSS)</b></u>: c'est le type de faille XSS<b> le plus connu et le plus courant</b>. Ces \nattaques se produisent lorsque les donn\u00e9es entr\u00e9es par l'utilisateur sont <b>\nimm\u00e9diatement exploit\u00e9es</b> par des scripts c\u00f4t\u00e9 serveur pour g\u00e9n\u00e9rer une page de \nr\u00e9sultat\u00a0\u00e0 l'utilisateur. Si les donn\u00e9es utilisateurs ne sont pas correctement \n\u00e9chapp\u00e9es et valid\u00e9es avant leur affichage, alors le navigateur du client peut \npotentiellement les consid\u00e9rer comme un script qu'il va ex\u00e9cuter. \n</li><li><u>les <b>XSS persistants (stored \nXSS)</b></u>: ces failles conduisent aux attaques XSS <b>les plus puissantes et les plus \ndangereuses</b>. Ce type d'attaque se produit lorsque les donn\u00e9es\u00a0entr\u00e9es par \nl'utilisateur sont <b>stock\u00e9es de mani\u00e8re permanente</b> sur le serveur, puis affich\u00e9es \nult\u00e9rieurement \u00e0 un ou des utilisateurs sans \u00e9chappement ni une \nvalidation\u00a0suffisante pr\u00e9alable. Une seule injection de code XSS peut ainsi \nimpacter de nombreux clients. Dans le cas o\u00f9 une base de donn\u00e9es est partag\u00e9e \npar plusieurs applications, une application peut \u00eatre impact\u00e9e par des donn\u00e9es \nayant transit\u00e9 vers la base de donn\u00e9es via une autre application. \n</li><li><u>les<b> XSS bas\u00e9s sur le\u00a0DOM</b>\u00a0(Document Object \nModel - <b>DOM-based XSS</b>)</u>: ce type de faille est moins connu mais il s'agit n\u00e9anmoins d'une faille dangereuse et difficile \u00e0 d\u00e9tecter (pour le hacker comme pour le programmeur). Ici le code malicieux ne transite pas \npar le serveur. Il <b>s'ex\u00e9cute directement c\u00f4t\u00e9 client via une modification du DOM</b>. </li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "6 Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<ul><li><font size=\"2\">les <strong>XSS non-persistants </strong>(<strong>reflected \nXSS</strong>): c'est le type de faille XSS<b> le plus connu et le plus courant</b>. Ces \nattaques se produisent lorsque les donn\u00e9es entr\u00e9es par l'utilisateur sont \nimm\u00e9diatement exploit\u00e9es par des scripts c\u00f4t\u00e9 serveur pour g\u00e9n\u00e9rer une page de \nr\u00e9sultat&nbsp;\u00e0 l'utilisateur. Si les donn\u00e9es utilisateurs ne sont pas correctement \n\u00e9chapp\u00e9es et valid\u00e9es avant leur affichage, alors le navigateur du client peut \npotentiellement les consid\u00e9rer comme un script qu'il va ex\u00e9cuter.</font> \n</li><li><font size=\"2\">les <strong>XSS persistants </strong>(<strong>stored \nXSS</strong>): ce sont les attaques XSS les <b>plus puissantes et les plus \ndangereuses</b>. Ce type d'attaque se produit lorsque les donn\u00e9es&nbsp;entr\u00e9es par \nl'utilisateur sont stock\u00e9es de mani\u00e8re permanente sur le serveur, puis affich\u00e9es \nult\u00e9rieurement \u00e0 un ou des utilisateurs sans \u00e9chappement ni une \nvalidation&nbsp;suffisante pr\u00e9alable. Une seule injection de code XSS peut ainsi \nimpacter de nombreux clients. Dans le cas o\u00f9 une base de donn\u00e9es est partag\u00e9e \npar plusieurs applications, une application peut \u00eatre impact\u00e9e par des donn\u00e9es \nayant transit\u00e9 vers la base de donn\u00e9es via une autre application. </font>\n</li><li><font size=\"2\">les <strong>XSS bas\u00e9s sur le&nbsp;DOM&nbsp;</strong>(Document Object \nModel - <strong>DOM-based XSS</strong>): ici le code malicieux ne transite pas \npar le serveur. Il s'ex\u00e9cute directement c\u00f4t\u00e9 client. </font></li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "5 D\u00e9tails types de faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "6 Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<ul><li><u>les <b>XSS non-persistants (reflected \nXSS)</b></u>: c'est le type de faille XSS<b> le plus connu et le plus courant</b>. Ces \nattaques se produisent lorsque les donn\u00e9es entr\u00e9es par l'utilisateur sont <b>\nimm\u00e9diatement exploit\u00e9es</b> par des scripts c\u00f4t\u00e9 serveur pour g\u00e9n\u00e9rer une page de \nr\u00e9sultat\u00a0\u00e0 l'utilisateur. Si les donn\u00e9es utilisateurs ne sont pas correctement \n\u00e9chapp\u00e9es et valid\u00e9es avant leur affichage, alors le navigateur du client peut \npotentiellement les consid\u00e9rer comme un script qu'il va ex\u00e9cuter. \n</li><li><u>les <b>XSS persistants (stored \nXSS)</b></u>: ces failles conduisent aux attaques XSS <b>les plus puissantes et les plus \ndangereuses</b>. Ce type d'attaque se produit lorsque les donn\u00e9es\u00a0entr\u00e9es par \nl'utilisateur sont <b>stock\u00e9es de mani\u00e8re permanente</b> sur le serveur, puis affich\u00e9es \nult\u00e9rieurement \u00e0 un ou des utilisateurs sans \u00e9chappement ni une \nvalidation\u00a0suffisante pr\u00e9alable. Une seule injection de code XSS peut ainsi \nimpacter de nombreux clients. Dans le cas o\u00f9 une base de donn\u00e9es est partag\u00e9e \npar plusieurs applications, une application peut \u00eatre impact\u00e9e par des donn\u00e9es \nayant transit\u00e9 vers la base de donn\u00e9es via une autre application. \n</li><li><u>les<b> XSS bas\u00e9s sur le\u00a0DOM</b>\u00a0(Document Object \nModel - <b>DOM-based XSS</b>)</u>: ce type de faille est <b>moins connu</b> mais il s'agit n\u00e9anmoins d'une faille<b> dangereuse et difficile \u00e0 d\u00e9tecter</b> (pour le hacker comme pour le programmeur). Ici le code malicieux ne transite pas \npar le serveur. Il <b>s'ex\u00e9cute directement c\u00f4t\u00e9 client via une modification du DOM</b>. </li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "6 Donn\u00e9es dangereuses",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "<ul><li><u>les <b>XSS non-persistants (reflected \nXSS)</b></u>: c'est le type de faille XSS<b> le plus connu et le plus courant</b>. Ces \nattaques se produisent lorsque les donn\u00e9es entr\u00e9es par l'utilisateur sont <b>\nimm\u00e9diatement exploit\u00e9es</b> par des scripts c\u00f4t\u00e9 serveur pour g\u00e9n\u00e9rer une page de \nr\u00e9sultat&nbsp;\u00e0 l'utilisateur. Si les donn\u00e9es utilisateurs ne sont pas correctement \n\u00e9chapp\u00e9es et valid\u00e9es avant leur affichage, alors le navigateur du client peut \npotentiellement les consid\u00e9rer comme un script qu'il va ex\u00e9cuter. \n</li><li><u>les <b>XSS persistants (stored \nXSS)</b></u>: ces failles conduisent aux attaques XSS <b>les plus puissantes et les plus \ndangereuses</b>. Ce type d'attaque se produit lorsque les donn\u00e9es&nbsp;entr\u00e9es par \nl'utilisateur sont <b>stock\u00e9es de mani\u00e8re permanente</b> sur le serveur, puis affich\u00e9es \nult\u00e9rieurement \u00e0 un ou des utilisateurs sans \u00e9chappement ni une \nvalidation&nbsp;suffisante pr\u00e9alable. Une seule injection de code XSS peut ainsi \nimpacter de nombreux clients. Dans le cas o\u00f9 une base de donn\u00e9es est partag\u00e9e \npar plusieurs applications, une application peut \u00eatre impact\u00e9e par des donn\u00e9es \nayant transit\u00e9 vers la base de donn\u00e9es via une autre application. \n</li><li><u>les<b> XSS bas\u00e9s sur le&nbsp;DOM</b>&nbsp;(Document Object \nModel - <b>DOM-based XSS</b>)</u>: ce type de faille est moins connu mais il s'agit n\u00e9anmoins d'une faille dangereuse et difficile \u00e0 d\u00e9tecter (pour le hacker comme pour le programmeur). Ici le code malicieux ne transite pas \npar le serveur. Il <b>s'ex\u00e9cute directement c\u00f4t\u00e9 client via une modification du DOM</b>. </li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "5 D\u00e9tails types de faille XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "6 Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "6 Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "6 Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "6 Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "7 Utilisateur dangereux",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est bien \u00e7a ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "6 Donn\u00e9es dangereuses",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention ! \n\n    \n      \n  \n    Toute\n source de donn\u00e9es peut-\u00eatre un vecteur d'attaque, y compris des sources\n internes telles que les donn\u00e9es issues d'une base de donn\u00e9es interne \u00e0 \nl'application. M\u00eame si votre application valide et \u00e9chappe correctement \nles donn\u00e9es avant de les int\u00e9grer dans la base, il est possible qu'une \nautre application moins rigoureuse alimente la base et y laisse entrer \ndes donn\u00e9es dangereuses."
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "6 Donn\u00e9es dangereuses",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013 </b>(<oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>) !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013 </b>(<oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>) !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Bravo ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur d\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif le plus critique</b> des applications web selon le <b>classement OWASP 2013 </b>(<oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>) !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "2 Cons\u00e9quences",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "feedback": [
            "Attention ! XSS est la faille <b>la plus r\u00e9pandue dans les application Web</b>. Si on prend\n en compte, en plus de leur fr\u00e9quence, leur exploitabilit\u00e9, leur \nd\u00e9tectabilit\u00e9 et leurs impacts \npotentiels, les failles XSS sont le <b>3\u00e8me risque de s\u00e9curit\u00e9 applicatif \nle plus critique</b> des applications web selon le <b>classement OWASP 2013 </b>(<oppia-noninteractive-link open_link_in_same_window-with-value=\"\" url-with-value=\"&amp;quot;https://www.owasp.org&amp;quot;\"></oppia-noninteractive-link>) !"
          ],
          "description": "is equal to {{x|NonnegativeInt}}"
        },
        {
          "dest": "1 Importance des failles XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "1 Importance des failles XSS",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Tout \u00e0 fait ! Pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Attention, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \n\u00eatre consid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui, presque ! En effet, pour une s\u00e9curit\u00e9 optimale, tous les utilisateurs doivent \u00eatre \nconsid\u00e9r\u00e9s comme des agents d\u2019attaque potentiels. Ceci inclut bien \nentendu les utilisateurs externes, mais aussi les utilisateurs internes \net le ou les administrateur(s) !"
          ]
        },
        {
          "dest": "7 Utilisateur dangereux",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "7 Utilisateur dangereux",
    "property_name": "widget_handlers"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "OK donc maintenant vous savez que les failles XSS sont tr\u00e8s courantes et potentiellement tr\u00e8s dangereuses. Alors, que faire pour les \u00e9viter ?<br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [{ "type": "text", "value": "" }],
    "state_name": "8 Lutte",
    "property_name": "content"
  },
  {
    "new_value": "MultipleChoiceInput",
    "cmd": "edit_state_property",
    "old_value": "TextInput",
    "state_name": "8 Lutte",
    "property_name": "widget_id"
  },
  {
    "new_value": {
      "choices": {
        "value": [
          "\u00c9chapper, \u00e9chapper, \u00e9chapper<br>",
          "Valider et \u00e9chapper<br>",
          "Je ne sais pas trop. Ca veut dire quoi \u00e9chapper ?<br>"
        ]
      }
    },
    "cmd": "edit_state_property",
    "old_value": {
      "rows": { "value": 1 },
      "placeholder": { "value": "Type your answer here." },
      "columns": { "value": 60 }
    },
    "state_name": "8 Lutte",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone ne lettres). En fait il faut \u00e9chapper un maximum de champs car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'acc\u00e9der \u00e0 ces champs depuis l'ext\u00e9rieur de l'application. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut \u00e9chapper un maximum de champs car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'acc\u00e9der \u00e0 ces champs depuis l'ext\u00e9rieur de l'application. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone ne lettres). En fait il faut \u00e9chapper un maximum de champs car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'acc\u00e9der \u00e0 ces champs depuis l'ext\u00e9rieur de l'application. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut \u00e9chapper un maximum de champs car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'acc\u00e9der \u00e0 ces champs depuis l'ext\u00e9rieur de l'application. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut \u00e9chapper un maximum de champs car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'acc\u00e9der \u00e0 ces champs depuis l'ext\u00e9rieur de l'application. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut \u00e9chapper un maximum de champs car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'acc\u00e9der \u00e0 ces champs depuis l'ext\u00e9rieur de l'application. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut \u00e9chapper un maximum de champs car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'acc\u00e9der \u00e0 ces champs depuis l'ext\u00e9rieur de l'application. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut \u00e9chapper un maximum de champs car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'acc\u00e9der \u00e0 ces champs depuis l'ext\u00e9rieur de l'application. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut \u00e9chapper un maximum de champs car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'acc\u00e9der \u00e0 ces champs depuis l'ext\u00e9rieur de l'application. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut \u00e9chapper un maximum de champs car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'acc\u00e9der \u00e0 ces champs depuis l'ext\u00e9rieur de l'application. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": []
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br><code>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si\u00a0 est envoy\u00e9 \u00e0 un navigateur tel quel, le navigateur va interpr\u00e9ter cette suite de caract\u00e8re comme un bout de code javascript et afficher une fen\u00eatre d'aletr avec \u00e9crit 'faille!' dedans au client. L'\u00e9chappement permet </code><br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [""]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si\u00a0<code></code>&lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8re comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement <code></code>&lt;script&gt; alert('faille!');&lt;/script&gt;. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br><code>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si&nbsp; est envoy\u00e9 \u00e0 un navigateur tel quel, le navigateur va interpr\u00e9ter cette suite de caract\u00e8re comme un bout de code javascript et afficher une fen\u00eatre d'aletr avec \u00e9crit 'faille!' dedans au client. L'\u00e9chappement permet </code><br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si <code></code>&lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8re comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si&nbsp;<code></code>&lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8re comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement <code></code>&lt;script&gt; alert('faille!');&lt;/script&gt;. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8re comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si <code></code>&lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8re comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8re comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  { "cmd": "add_state", "state_name": "9 Lutte (2)" },
  {
    "new_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "8 Lutte",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai,<b> la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi <b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml </b>car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai, la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi valider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai,<b> la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi <b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml </b>car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur </b>(y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai,<b> la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi <b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml </b>car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai,<b> la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi <b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml </b>car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur </b>(y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages HTML ou XHTML</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai,<b> la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi <b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml </b>car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur </b>(y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \nvalider les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut tout \u00e9chapper dans les pages html ou xhtml car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai,<b> la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi <b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml </b>car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur </b>(y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages HTML ou XHTML</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages HTML ou XHTML</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai,<b> la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi <b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml </b>car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur </b>(y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages HTML ou XHTML</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai,<b> la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi <b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages HTML ou XHTML </b>car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur </b>(y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages HTML ou XHTML</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages HTML ou XHTML</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai,<b> la plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant correctement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles transitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi <b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que l'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro de t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages html ou xhtml </b>car m\u00eame un lien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une faille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de l'application (\u00e0 travers un param\u00e8tre d'url par exemple).<br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Bravo, c'est la meilleure r\u00e9ponse. <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur </b>(y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages HTML ou XHTML</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). "
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 2 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas de souci, voici quelques explications :<br>L'\u00e9chappement consiste \u00e0 encoder les caract\u00e8res sp\u00e9ciaux pour qu'il soient affich\u00e9s en tant que tel et non interpr\u00e9t\u00e9s par les navigateurs lors de l'affichage d'une page html ou xhtml. Par exemple, si &lt;script&gt; alert('faille!');&lt;/script&gt; est envoy\u00e9 \u00e0 un navigateur, l'interpr\u00e9teur du navigateur va interpr\u00e9ter cette suite de caract\u00e8res comme un bout de code javascript et afficher une fen\u00eatre popup d'alerte contenant le texte 'faille !' au client. Gr\u00e2ce \u00e0 l'\u00e9chappement, l'interpr\u00e9teur du navigateur ne va rien interpr\u00e9ter du tout et le navigateur affichera simplement &lt;script&gt; alert('faille!');&lt;/script&gt;. <br> <b>La plupart des failles XSS peuvent \u00eatre \u00e9vit\u00e9es en \u00e9chappant \ncorrectement les donn\u00e9es entr\u00e9es par l'utilisateur</b> (y compris celles \ntransitant par une base de donn\u00e9es). G\u00e9n\u00e9ralement on pr\u00e9f\u00e8re aussi \n<b>valider</b> les donn\u00e9es avant de les \u00e9chapper, afin de s'assurer que \nl'utilisateur ne rentre pas n'importe quoi (comme par exemple un num\u00e9ro \nde t\u00e9l\u00e9phone en lettres). En fait il faut <b>tout \u00e9chapper dans les pages HTML ou XHTML</b> car m\u00eame un \nlien http ou l'attribut \"head\" d'une balise peuvent conduire \u00e0 une \nfaille XSS s'il est possible d'y acc\u00e9der depuis l'ext\u00e9rieur de \nl'application (\u00e0 travers un param\u00e8tre d'url par exemple). <br><br>"
          ]
        },
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "8 Lutte",
    "property_name": "widget_handlers"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "Ok, donc on \u00e9chappe et on valide les donn\u00e9es. C\u2019est tout ?<br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [{ "type": "text", "value": "" }],
    "state_name": "9 Lutte (2)",
    "property_name": "content"
  },
  {
    "new_value": "Continue",
    "cmd": "edit_state_property",
    "old_value": "TextInput",
    "state_name": "9 Lutte (2)",
    "property_name": "widget_id"
  },
  {
    "new_value": {
      "buttonText": {
        "parse_with_jinja": true,
        "value": "Mettre un terme au suspens"
      }
    },
    "cmd": "edit_state_property",
    "old_value": {
      "rows": { "value": 1 },
      "placeholder": { "value": "Type your answer here." },
      "columns": { "value": 60 }
    },
    "state_name": "9 Lutte (2)",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": {
      "buttonText": {
        "parse_with_jinja": true,
        "value": "Mettre un terme au suspens..."
      }
    },
    "cmd": "edit_state_property",
    "old_value": {
      "buttonText": {
        "parse_with_jinja": true,
        "value": "Mettre un terme au suspens"
      }
    },
    "state_name": "9 Lutte (2)",
    "property_name": "widget_customization_args"
  },
  { "cmd": "add_state", "state_name": "10 Outils de d\u00e9tection" },
  {
    "new_value": {
      "submit": [
        {
          "dest": "10 Outils de d\u00e9tection",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Non, \u00e7a n'est pas tout.<br><ul><li>Pour \u00e9viter le vol de cookie il est utile de param\u00e9trer l'objet <b>session</b> en for\u00e7ant l'attribut <b>&lt;http-only&gt;</b> \u00e0 la valeur <b>true</b>.</li><li>Il faut aussi \u00eatre<b> vigilant</b> sur les <b>biblioth\u00e8ques et les composants</b> que l'on utilise pour programmer. Par d\u00e9faut, la JSF Java \u00e9chappe tout ce qu'elle contient, m\u00eame le texte qui n'est pas inclu dans une balise. Par contre, les premi\u00e8res versions de la biblioth\u00e8que Primefaces contenaient de nombreuses failles XSS. Ces failles ont \u00e9t\u00e9 corrig\u00e9es au fur et \u00e0 mesure et la version 4 semble fiable.\u00a0</li><li>Enfin, pour ce qui est du <b>DOM-based XSS</b>, c'est <b>plus compliqu\u00e9</b>. Un d\u00e9veloppeur java qui code une application Java EE en utilisant la JSF et Primefaces n'a pas vraiment la main sur ces aspects. La fin de ce tutorial contient des liens que vous pourrez suivre pour en savoir plus.<br></li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "9 Lutte (2)",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [
            "Non, \u00e7a n'est pas tout.<br><ul><li>Pour \u00e9viter le vol de cookie il est utile de param\u00e9trer l'objet <b>session</b> en for\u00e7ant l'attribut <b>&lt;http-only&gt;</b> \u00e0 la valeur <b>true</b>.</li><li>Il faut aussi \u00eatre<b> vigilant</b> sur les <b>biblioth\u00e8ques et les composants</b> que l'on utilise pour programmer. Par d\u00e9faut, la JSF Java \u00e9chappe tout ce qu'elle contient, m\u00eame le texte qui n'est pas inclu dans une balise. Par contre, les premi\u00e8res versions de la biblioth\u00e8que Primefaces contenaient de nombreuses failles XSS. Ces failles ont \u00e9t\u00e9 corrig\u00e9es au fur et \u00e0 mesure et la version 4 semble fiable.&nbsp;</li><li>Enfin, pour ce qui est du <b>DOM-based XSS</b>, c'est <b>plus compliqu\u00e9</b>. Un d\u00e9veloppeur java qui code une application Java EE en utilisant la JSF et Primefaces n'a pas vraiment la main sur ces aspects. La fin de ce tutorial contient des liens que vous pourrez suivre pour en savoir plus.<br></li></ul>"
          ],
          "description": "Default"
        }
      ]
    },
    "state_name": "9 Lutte (2)",
    "property_name": "widget_handlers"
  },
  {
    "new_value": [
      {
        "type": "text",
        "value": "Voil\u00e0, c'est presque termin\u00e9. Vous savez maintenant ce qu'est une faille XSS et vous savez quoi faire, en tant que programmeur, pour \u00e9viter la plupart d'entre elles. <br>Avant de se quitter, voici juste quelques mots sur les outils de d\u00e9tection des failles XSS sur une application existante.<br>"
      }
    ],
    "cmd": "edit_state_property",
    "old_value": [{ "type": "text", "value": "" }],
    "state_name": "10 Outils de d\u00e9tection",
    "property_name": "content"
  },
  {
    "new_value": "Continue",
    "cmd": "edit_state_property",
    "old_value": "TextInput",
    "state_name": "10 Outils de d\u00e9tection",
    "property_name": "widget_id"
  },
  {
    "new_value": { "buttonText": { "value": "Continue" } },
    "cmd": "edit_state_property",
    "old_value": {
      "rows": { "value": 1 },
      "placeholder": { "value": "Type your answer here." },
      "columns": { "value": 60 }
    },
    "state_name": "10 Outils de d\u00e9tection",
    "property_name": "widget_customization_args"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "END",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "10 Outils de d\u00e9tection",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [""],
          "description": "Default"
        }
      ]
    },
    "state_name": "10 Outils de d\u00e9tection",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites web, redirection de l'utilisateur vers un site malveillant... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai.  Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates."
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span class=\"\"></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai.  Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates."
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  },
  {
    "new_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites web, redirection de l'utilisateur vers un site malveillant... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai.  Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites web, redirection de l'utilisateur vers un site malveillant... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates."
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "cmd": "edit_state_property",
    "old_value": {
      "submit": [
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 0 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Pas du tout ! Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites web, redirection de l'utilisateur vers un site malveillant... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates.<span class=\"\"></span>"
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": {
            "rule_type": "atomic",
            "inputs": { "x": 1 },
            "name": "Equals",
            "subject": "answer"
          },
          "param_changes": [],
          "description": "is equal to {{x|NonnegativeInt}}",
          "feedback": [
            "Oui c'est vrai.  Les cons\u00e9quences des failles XSS sont <b>vastes</b> et peuvent \u00eatre <b>\ntr\u00e8s graves</b> : vol de cookies et donc de session, comptes utilisateurs d\u00e9tourn\u00e9s, \nalt\u00e9ration de sites WEB... Certaines attaques XSS peuvent m\u00eame faire tomber un \nserveur ou une base de donn\u00e9es en les noyant de requ\u00eates."
          ]
        },
        {
          "dest": "3 Qu'est-ce qu'un faille XSS",
          "definition": { "rule_type": "default" },
          "param_changes": [],
          "feedback": [],
          "description": "Default"
        }
      ]
    },
    "state_name": "2 Cons\u00e9quences",
    "property_name": "widget_handlers"
  }
]
