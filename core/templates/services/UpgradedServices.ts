// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Service for managing all of our upgraded services.
 */

import { downgradeInjectable } from '@angular/upgrade/static';
import { Injectable } from '@angular/core';
import {
  HttpClient,
  HttpXhrBackend,
  /* eslint-disable camelcase */
  Éµangular_packages_common_http_http_d
  /* eslint-enable camelcase */
} from '@angular/common/http';

import { AlertsService } from 'services/alerts.service';
import { AngularNameService } from
  'pages/exploration-editor-page/services/angular-name.service';
import { AnswerClassificationResultObjectFactory } from
  'domain/classifier/AnswerClassificationResultObjectFactory';
import { AnswerGroupObjectFactory } from
  'domain/exploration/AnswerGroupObjectFactory';
import { AnswerGroupsCacheService } from
  // eslint-disable-next-line max-len
  'pages/exploration-editor-page/editor-tab/services/answer-groups-cache.service';
import { AudioLanguageObjectFactory } from
  'domain/utilities/AudioLanguageObjectFactory';
import { AudioTranslationLanguageService } from
  'pages/exploration-player-page/services/audio-translation-language.service';
import { AutogeneratedAudioLanguageObjectFactory } from
  'domain/utilities/AutogeneratedAudioLanguageObjectFactory';
import { BackgroundMaskService } from
  'services/stateful/background-mask.service';
import { baseInteractionValidationService } from
  'interactions/base-interaction-validation.service';
import { BrowserCheckerService } from
  'domain/utilities/browser-checker.service';
import { CamelCaseToHyphensPipe } from
  'filters/string-utility-filters/camel-case-to-hyphens.pipe';
import { ChangeObjectFactory } from
  'domain/editor/undo_redo/ChangeObjectFactory';
import { ChangesInHumanReadableFormService } from
  // eslint-disable-next-line max-len
  'pages/exploration-editor-page/services/changes-in-human-readable-form.service';
import { ClassifierObjectFactory } from
  'domain/classifier/ClassifierObjectFactory';
import { CodeNormalizerService } from 'services/code-normalizer.service';
import { CodeReplPredictionService } from
  'interactions/CodeRepl/code-repl-prediction.service';
import { CodeReplRulesService } from
  'interactions/CodeRepl/directives/code-repl-rules.service';
import { ComputeGraphService } from 'services/compute-graph.service';
import { ConceptCardObjectFactory } from
  'domain/skill/ConceptCardObjectFactory';
import { ContextService } from 'services/context.service';
import { CountVectorizerService } from 'classifiers/count-vectorizer.service';
import { CreatorDashboardBackendApiService } from
  'domain/creator_dashboard/creator-dashboard-backend-api.service';
import { CsrfTokenService } from 'services/csrf-token.service';
import { DateTimeFormatService } from 'services/date-time-format.service';
import { DebouncerService } from 'services/debouncer.service';
import { DeviceInfoService } from 'services/contextual/device-info.service';
import { DocumentAttributeCustomizationService } from
  'services/contextual/document-attribute-customization.service';
import { EditabilityService } from 'services/editability.service';
import { EditorFirstTimeEventsService } from
  'pages/exploration-editor-page/services/editor-first-time-events.service';
import { EmailDashboardDataService } from
  'pages/email-dashboard-pages/email-dashboard-data.service';
import { EntityContextObjectFactory } from
  'domain/utilities/EntityContextObjectFactory';
import { ExplorationDiffService } from
  'pages/exploration-editor-page/services/exploration-diff.service';
import { ExplorationDraftObjectFactory } from
  'domain/exploration/ExplorationDraftObjectFactory';
import { ExplorationFeaturesService } from
  'services/exploration-features.service';
import { ExplorationHtmlFormatterService } from
  'services/exploration-html-formatter.service';
import { ExplorationObjectFactory } from
  'domain/exploration/ExplorationObjectFactory';
import { ExpressionParserService } from 'expressions/expression-parser.service';
import { ExtensionTagAssemblerService } from
  'services/extension-tag-assembler.service';
import { ExtractImageFilenamesFromStateService } from
  // eslint-disable-next-line max-len
  'pages/exploration-player-page/services/extract-image-filenames-from-state.service';
import { FeedbackThreadObjectFactory } from
  'domain/feedback_thread/FeedbackThreadObjectFactory';
import { FormatTimePipe } from 'filters/format-timer.pipe';
import { FractionObjectFactory } from 'domain/objects/FractionObjectFactory';
import { GenerateContentIdService } from 'services/generate-content-id.service';
import { HintObjectFactory } from 'domain/exploration/HintObjectFactory';
import { HtmlEscaperService } from 'services/html-escaper.service';
import { IdGenerationService } from 'services/id-generation.service';
import { ImprovementActionButtonObjectFactory } from
  'domain/statistics/ImprovementActionButtonObjectFactory';
import { ImprovementsDisplayService } from
  // eslint-disable-next-line max-len
  'pages/exploration-editor-page/improvements-tab/services/improvements-display.service';
import { ImprovementsService } from 'services/improvements.service';
import { InteractionObjectFactory } from
  'domain/exploration/InteractionObjectFactory';
import { LanguageUtilService } from 'domain/utilities/language-util.service';
import { LearnerActionObjectFactory } from
  'domain/statistics/LearnerActionObjectFactory';
import { LearnerAnswerDetailsObjectFactory } from
  'domain/statistics/LearnerAnswerDetailsObjectFactory';
import { LearnerAnswerInfoObjectFactory } from
  'domain/statistics/LearnerAnswerInfoObjectFactory';
import { LearnerDashboardActivityIdsObjectFactory } from
  'domain/learner_dashboard/LearnerDashboardActivityIdsObjectFactory';
import { LearnerParamsService } from
  'pages/exploration-player-page/services/learner-params.service';
import { LocalStorageService } from 'services/local-storage.service';
import { LoggerService } from 'services/contextual/logger.service';
import { MetaTagCustomizationService } from
  'services/contextual/meta-tag-customization.service';
import { NormalizeWhitespacePipe } from
  'filters/string-utility-filters/normalize-whitespace.pipe';
import { NormalizeWhitespacePunctuationAndCasePipe } from
  // eslint-disable-next-line max-len
  'filters/string-utility-filters/normalize-whitespace-punctuation-and-case.pipe';
import { NumberWithUnitsObjectFactory } from
  'domain/objects/NumberWithUnitsObjectFactory';
import { OutcomeObjectFactory } from 'domain/exploration/OutcomeObjectFactory';
import { ParamChangeObjectFactory } from
  'domain/exploration/ParamChangeObjectFactory';
import { ParamChangesObjectFactory } from
  'domain/exploration/ParamChangesObjectFactory';
import { ParamMetadataObjectFactory } from
  'domain/exploration/ParamMetadataObjectFactory';
import { ParamSpecObjectFactory } from
  'domain/exploration/ParamSpecObjectFactory';
import { ParamSpecsObjectFactory } from
  'domain/exploration/ParamSpecsObjectFactory';
import { ParamTypeObjectFactory } from
  'domain/exploration/ParamTypeObjectFactory';
import { PencilCodeEditorRulesService } from
  'interactions/PencilCodeEditor/directives/pencil-code-editor-rules.service';
import { PlayerPositionService } from
  'pages/exploration-player-page/services/player-position.service';
import { PlayerTranscriptService } from
  'pages/exploration-player-page/services/player-transcript.service';
import { PlaythroughIssueObjectFactory } from
  'domain/statistics/PlaythroughIssueObjectFactory';
import { PlaythroughObjectFactory } from
  'domain/statistics/PlaythroughObjectFactory';
import { PredictionResultObjectFactory } from
  'domain/classifier/PredictionResultObjectFactory';
import { PythonProgramTokenizer } from 'classifiers/python-program.tokenizer';
import { RatingComputationService } from
  'components/ratings/rating-computation/rating-computation.service';
import { ReadOnlyStoryNodeObjectFactory } from
  'domain/story_viewer/ReadOnlyStoryNodeObjectFactory';
import { RecordedVoiceoversObjectFactory } from
  'domain/exploration/RecordedVoiceoversObjectFactory';
import { RuleObjectFactory } from 'domain/exploration/RuleObjectFactory';
import { SVMPredictionService } from 'classifiers/svm-prediction.service';
import { SidebarStatusService } from 'domain/sidebar/sidebar-status.service';
import { SiteAnalyticsService } from 'services/site-analytics.service';
import { SkillSummaryObjectFactory } from
  'domain/skill/SkillSummaryObjectFactory';
import { SolutionObjectFactory } from
  'domain/exploration/SolutionObjectFactory';
import { SolutionValidityService } from
  'pages/exploration-editor-page/editor-tab/services/solution-validity.service';
import { StateCardObjectFactory } from
  'domain/state_card/StateCardObjectFactory';
import { StateClassifierMappingService } from
  'pages/exploration-player-page/services/state-classifier-mapping.service';
import { StateContentService } from
  // eslint-disable-next-line max-len
  'components/state-editor/state-editor-properties-services/state-content.service';
import { StateCustomizationArgsService } from
  // eslint-disable-next-line max-len
  'components/state-editor/state-editor-properties-services/state-customization-args.service';
import { StateEditorService } from
  // eslint-disable-next-line max-len
  'components/state-editor/state-editor-properties-services/state-editor.service';
import { StateHintsService } from
  // eslint-disable-next-line max-len
  'components/state-editor/state-editor-properties-services/state-hints.service';
import { StateImprovementSuggestionService } from
  // eslint-disable-next-line max-len
  'pages/exploration-editor-page/statistics-tab/services/state-improvement-suggestion.service';
import { StateInteractionIdService } from
  // eslint-disable-next-line max-len
  'components/state-editor/state-editor-properties-services/state-interaction-id.service';
import { StateObjectFactory } from 'domain/state/StateObjectFactory';
import { StatePropertyService } from
  // eslint-disable-next-line max-len
  'components/state-editor/state-editor-properties-services/state-property.service';
import { StateRecordedVoiceoversService } from
  // eslint-disable-next-line max-len
  'components/state-editor/state-editor-properties-services/state-recorded-voiceovers.service';
import { StateSolicitAnswerDetailsService } from
  // eslint-disable-next-line max-len
  'components/state-editor/state-editor-properties-services/state-solicit-answer-details.service';
import { StateSolutionService } from
  // eslint-disable-next-line max-len
  'components/state-editor/state-editor-properties-services/state-solution.service';
import { StateWrittenTranslationsService } from
  // eslint-disable-next-line max-len
  'components/state-editor/state-editor-properties-services/state-written-translations.service';
import { StatesObjectFactory } from 'domain/exploration/StatesObjectFactory';
import { StopwatchObjectFactory } from
  'domain/utilities/StopwatchObjectFactory';
import { StoryNodeObjectFactory } from
  'domain/story/StoryNodeObjectFactory';
import { StoryPlaythroughObjectFactory } from
  'domain/story_viewer/StoryPlaythroughObjectFactory';
import { StoryReferenceObjectFactory } from
  'domain/topic/StoryReferenceObjectFactory';
import { StorySummaryObjectFactory } from
  'domain/story/StorySummaryObjectFactory';
import { SubtitledHtmlObjectFactory } from
  'domain/exploration/SubtitledHtmlObjectFactory';
import { SubtopicObjectFactory } from 'domain/topic/SubtopicObjectFactory';
import { SuggestionModalService } from 'services/suggestion-modal.service';
import { SuggestionObjectFactory } from
  'domain/suggestion/SuggestionObjectFactory';
import { SuggestionThreadObjectFactory } from
  'domain/suggestion/SuggestionThreadObjectFactory';
import { SuggestionsService } from 'services/suggestions.service';
import { TextInputPredictionService } from
  'interactions/TextInput/text-input-prediction.service';
import { TextInputRulesService } from
  'interactions/TextInput/directives/text-input-rules.service';
import { TextInputValidationService } from
  'interactions/TextInput/directives/text-input-validation.service';
import { ThreadMessageObjectFactory } from
  'domain/feedback_message/ThreadMessageObjectFactory';
import { ThreadMessageSummaryObjectFactory } from
  'domain/feedback_message/ThreadMessageSummaryObjectFactory';
import { ThreadStatusDisplayService } from
  // eslint-disable-next-line max-len
  'pages/exploration-editor-page/feedback-tab/services/thread-status-display.service';
import { TopicObjectFactory } from 'domain/topic/TopicObjectFactory';
import { TopicRightsObjectFactory } from
  'domain/topic/TopicRightsObjectFactory';
import { TopicSummaryObjectFactory } from
  'domain/topic/TopicSummaryObjectFactory';
import { UnitsObjectFactory } from 'domain/objects/UnitsObjectFactory';
import { UrlInterpolationService } from
  'domain/utilities/url-interpolation.service';
import { UrlService } from 'services/contextual/url.service';
import { UserInfoObjectFactory } from 'domain/user/UserInfoObjectFactory';
import { UtilsService } from 'services/utils.service';
import { ValidatorsService } from 'services/validators.service';
import { VersionTreeService } from
  'pages/exploration-editor-page/history-tab/services/version-tree.service';
import { VoiceoverObjectFactory } from
  'domain/exploration/VoiceoverObjectFactory';
import { WindowDimensionsService } from
  'services/contextual/window-dimensions.service';
import { WindowRef } from 'services/contextual/window-ref.service';
import { WinnowingPreprocessingService } from
  'classifiers/winnowing-preprocessing.service';
import { WrittenTranslationObjectFactory } from
  'domain/exploration/WrittenTranslationObjectFactory';
import { WrittenTranslationsObjectFactory } from
  'domain/exploration/WrittenTranslationsObjectFactory';

type Newable<T> = { new (...args: any[]): T; };

class Register<T> {
  constructor(public service: Newable<T>, public dependencies: string[]) {}
}

@Injectable({providedIn: 'root'})
export class UpgradedServices {
  private serviceRegistry: {[serviceName: string]: Register<any>};

  constructor() {
    this.serviceRegistry = {};

    // Please keep these sorted by name to make maintenance simpler.
    this.registerService(AlertsService).withDependencies(LoggerService);
    this.registerService(AngularNameService).withDependencies();
    this.registerService(AnswerClassificationResultObjectFactory)
      .withDependencies();
    this.registerService(AnswerGroupObjectFactory).withDependencies(
      OutcomeObjectFactory, RuleObjectFactory);
    this.registerService(AnswerGroupsCacheService).withDependencies();
    this.registerService(AudioLanguageObjectFactory).withDependencies();
    this.registerService(AudioTranslationLanguageService).withDependencies(
      BrowserCheckerService, LanguageUtilService);
    this.registerService(AutogeneratedAudioLanguageObjectFactory)
      .withDependencies();
    this.registerService(BackgroundMaskService).withDependencies();
    this.registerService(BrowserCheckerService).withDependencies(WindowRef);
    this.registerService(CamelCaseToHyphensPipe).withDependencies();
    this.registerService(ChangeObjectFactory).withDependencies();
    this.registerService(ChangesInHumanReadableFormService).withDependencies(
      UtilsService);
    this.registerService(ClassifierObjectFactory).withDependencies();
    this.registerService(CodeNormalizerService).withDependencies();
    this.registerService(CodeReplPredictionService).withDependencies(
      CountVectorizerService, PythonProgramTokenizer, SVMPredictionService,
      WinnowingPreprocessingService);
    this.registerService(CodeReplRulesService).withDependencies(
      NormalizeWhitespacePipe, CodeNormalizerService);
    this.registerService(ComputeGraphService).withDependencies();
    this.registerService(ConceptCardObjectFactory).withDependencies(
      SubtitledHtmlObjectFactory, RecordedVoiceoversObjectFactory);
    this.registerService(ContextService).withDependencies(
      UrlService, EntityContextObjectFactory);
    this.registerService(CountVectorizerService).withDependencies();
    this.registerService(CreatorDashboardBackendApiService).withDependencies(
      HttpClient);
    this.registerService(CsrfTokenService).withDependencies();
    this.registerService(DateTimeFormatService).withDependencies();
    this.registerService(DebouncerService).withDependencies();
    this.registerService(DeviceInfoService).withDependencies(WindowRef);
    this.registerService(DocumentAttributeCustomizationService)
      .withDependencies(WindowRef);
    this.registerService(EditabilityService).withDependencies();
    this.registerService(EditorFirstTimeEventsService).withDependencies(
      SiteAnalyticsService);
    this.registerService(EmailDashboardDataService)
      .withDependencies(HttpClient);
    this.registerService(EntityContextObjectFactory).withDependencies();
    this.registerService(ExplorationDiffService).withDependencies();
    this.registerService(ExplorationDraftObjectFactory).withDependencies();
    this.registerService(ExplorationFeaturesService).withDependencies();
    this.registerService(ExplorationHtmlFormatterService).withDependencies(
      CamelCaseToHyphensPipe, ExtensionTagAssemblerService, HtmlEscaperService);
    this.registerService(ExplorationObjectFactory).withDependencies(
      LoggerService, ParamChangesObjectFactory, ParamSpecsObjectFactory,
      StatesObjectFactory, UrlInterpolationService);
    this.registerService(ExpressionParserService).withDependencies();
    this.registerService(ExtensionTagAssemblerService).withDependencies(
      HtmlEscaperService, CamelCaseToHyphensPipe);
    this.registerService(ExtractImageFilenamesFromStateService)
      .withDependencies(HtmlEscaperService);
    this.registerService(FeedbackThreadObjectFactory).withDependencies(
      ThreadMessageSummaryObjectFactory);
    this.registerService(FractionObjectFactory).withDependencies();
    this.registerService(GenerateContentIdService).withDependencies();
    this.registerService(HintObjectFactory).withDependencies(
      SubtitledHtmlObjectFactory);
    this.registerService(HtmlEscaperService).withDependencies(LoggerService);
    this.registerService(HttpClient).withDependencies(HttpXhrBackend);
    this.registerService(HttpXhrBackend).withDependencies(
      Éµangular_packages_common_http_http_d);
    this.registerService(IdGenerationService).withDependencies();
    this.registerService(ImprovementActionButtonObjectFactory)
      .withDependencies();
    this.registerService(ImprovementsService).withDependencies();
    this.registerService(InteractionObjectFactory).withDependencies(
      AnswerGroupObjectFactory, HintObjectFactory, SolutionObjectFactory,
      OutcomeObjectFactory);
    this.registerService(LanguageUtilService).withDependencies(
      AudioLanguageObjectFactory, AutogeneratedAudioLanguageObjectFactory,
      BrowserCheckerService);
    this.registerService(LearnerActionObjectFactory).withDependencies();
    this.registerService(LearnerAnswerDetailsObjectFactory).withDependencies();
    this.registerService(LearnerAnswerInfoObjectFactory).withDependencies();
    this.registerService(LearnerDashboardActivityIdsObjectFactory)
      .withDependencies();
    this.registerService(LearnerParamsService).withDependencies();
    this.registerService(LocalStorageService).withDependencies(
      ExplorationDraftObjectFactory);
    this.registerService(LoggerService).withDependencies();
    this.registerService(MetaTagCustomizationService)
      .withDependencies(WindowRef);
    this.registerService(NormalizeWhitespacePipe)
      .withDependencies(UtilsService);
    this.registerService(NormalizeWhitespacePunctuationAndCasePipe)
      .withDependencies();
    this.registerService(NumberWithUnitsObjectFactory).withDependencies(
      UnitsObjectFactory, FractionObjectFactory);
    this.registerService(OutcomeObjectFactory).withDependencies(
      SubtitledHtmlObjectFactory);
    this.registerService(ParamChangeObjectFactory).withDependencies();
    this.registerService(ParamChangesObjectFactory).withDependencies(
      ParamChangeObjectFactory);
    this.registerService(ParamMetadataObjectFactory).withDependencies();
    this.registerService(ParamSpecObjectFactory).withDependencies(
      ParamTypeObjectFactory);
    this.registerService(ParamSpecsObjectFactory).withDependencies(
      ParamSpecObjectFactory);
    this.registerService(ParamTypeObjectFactory).withDependencies();
    this.registerService(PencilCodeEditorRulesService).withDependencies(
      NormalizeWhitespacePipe, NormalizeWhitespacePunctuationAndCasePipe,
      CodeNormalizerService);
    this.registerService(PlayerPositionService).withDependencies(
      ContextService, PlayerTranscriptService);
    this.registerService(PlayerTranscriptService)
      .withDependencies(LoggerService);
    this.registerService(PlaythroughIssueObjectFactory).withDependencies();
    this.registerService(PlaythroughObjectFactory).withDependencies(
      LearnerActionObjectFactory);
    this.registerService(PredictionResultObjectFactory).withDependencies();
    this.registerService(PythonProgramTokenizer)
      .withDependencies(LoggerService);
    this.registerService(RatingComputationService).withDependencies();
    this.registerService(ReadOnlyStoryNodeObjectFactory).withDependencies();
    this.registerService(RecordedVoiceoversObjectFactory).withDependencies(
      VoiceoverObjectFactory);
    this.registerService(RuleObjectFactory).withDependencies();
    this.registerService(SVMPredictionService).withDependencies(
      PredictionResultObjectFactory);
    this.registerService(SidebarStatusService).withDependencies(
      WindowDimensionsService);
    this.registerService(SiteAnalyticsService).withDependencies(WindowRef);
    this.registerService(SkillSummaryObjectFactory).withDependencies();
    this.registerService(SolutionObjectFactory).withDependencies(
      SubtitledHtmlObjectFactory, ExplorationHtmlFormatterService);
    this.registerService(SolutionValidityService).withDependencies();
    this.registerService(StateCardObjectFactory).withDependencies(
      AudioTranslationLanguageService);
    this.registerService(StateClassifierMappingService).withDependencies(
      ClassifierObjectFactory);
    this.registerService(StateContentService).withDependencies(
      AlertsService, UtilsService);
    this.registerService(StateCustomizationArgsService).withDependencies(
      AlertsService, UtilsService);
    this.registerService(StateEditorService)
      .withDependencies(SolutionValidityService);
    this.registerService(StateHintsService).withDependencies(
      AlertsService, UtilsService);
    this.registerService(StateImprovementSuggestionService).withDependencies();
    this.registerService(StateInteractionIdService).withDependencies(
      AlertsService, UtilsService);
    this.registerService(StateObjectFactory).withDependencies(
      InteractionObjectFactory, ParamChangesObjectFactory,
      RecordedVoiceoversObjectFactory, SubtitledHtmlObjectFactory,
      WrittenTranslationsObjectFactory);
    this.registerService(StatePropertyService).withDependencies(
      AlertsService, UtilsService);
    this.registerService(StateRecordedVoiceoversService).withDependencies(
      AlertsService, UtilsService);
    this.registerService(StateSolicitAnswerDetailsService).withDependencies(
      AlertsService, UtilsService);
    this.registerService(StateSolutionService).withDependencies(
      AlertsService, UtilsService);
    this.registerService(StateWrittenTranslationsService).withDependencies(
      AlertsService, UtilsService);
    this.registerService(StatesObjectFactory)
      .withDependencies(StateObjectFactory);
    this.registerService(StopwatchObjectFactory).withDependencies();
    this.registerService(StoryNodeObjectFactory).withDependencies();
    this.registerService(StoryPlaythroughObjectFactory).withDependencies(
      ReadOnlyStoryNodeObjectFactory);
    this.registerService(StoryReferenceObjectFactory).withDependencies();
    this.registerService(StorySummaryObjectFactory).withDependencies();
    this.registerService(SubtitledHtmlObjectFactory).withDependencies();
    this.registerService(SubtopicObjectFactory).withDependencies(
      SkillSummaryObjectFactory);
    this.registerService(SuggestionModalService).withDependencies();
    this.registerService(SuggestionObjectFactory).withDependencies(
      SuggestionsService);
    this.registerService(SuggestionsService).withDependencies();
    this.registerService(SuggestionThreadObjectFactory).withDependencies(
      SuggestionObjectFactory, ThreadMessageSummaryObjectFactory);
    this.registerService(TextInputRulesService).withDependencies(
      NormalizeWhitespacePipe);
    this.registerService(TextInputValidationService).withDependencies(
      baseInteractionValidationService);
    this.registerService(ThreadMessageObjectFactory).withDependencies(
      ThreadMessageSummaryObjectFactory);
    this.registerService(ThreadMessageSummaryObjectFactory).withDependencies();
    this.registerService(ThreadStatusDisplayService).withDependencies();
    this.registerService(TopicObjectFactory).withDependencies(
      SubtopicObjectFactory, StoryReferenceObjectFactory,
      SkillSummaryObjectFactory);
    this.registerService(TopicRightsObjectFactory).withDependencies();
    this.registerService(TopicSummaryObjectFactory).withDependencies();
    this.registerService(UnitsObjectFactory).withDependencies();
    this.registerService(UrlInterpolationService).withDependencies(
      AlertsService, UrlService, UtilsService);
    this.registerService(UrlService).withDependencies(WindowRef);
    this.registerService(UserInfoObjectFactory).withDependencies();
    this.registerService(UtilsService).withDependencies();
    this.registerService(ValidatorsService).withDependencies(
      AlertsService, NormalizeWhitespacePipe);
    this.registerService(VersionTreeService).withDependencies();
    this.registerService(VoiceoverObjectFactory).withDependencies();
    this.registerService(WindowDimensionsService).withDependencies(WindowRef);
    this.registerService(WindowRef).withDependencies();
    this.registerService(WinnowingPreprocessingService).withDependencies();
    this.registerService(WrittenTranslationObjectFactory).withDependencies();
    this.registerService(WrittenTranslationsObjectFactory).withDependencies(
      WrittenTranslationObjectFactory);
    this.registerService(baseInteractionValidationService).withDependencies();
    this.registerService(Éµangular_packages_common_http_http_d)
      .withDependencies();
  }

  private registerService<T>(service: Newable<T>) {
    let serviceRegistry = this.serviceRegistry;
    return {
      withDependencies: function(...args: Newable<any>[]): void {
        if (serviceRegistry.hasOwnProperty(service.name)) {
          throw Error(
            'Redefinition Error: Trying to register "' + service.name + '" ' +
            'more than once');
        }
        serviceRegistry[service.name] =
          new Register<T>(service, args.map(a => a.name));
      }
    };
  }

  private validateServiceDependencies(): void {
    let registeredServices = Object.keys(this.serviceRegistry);
    let referencedServices = [].concat(
      ...Object.values(this.serviceRegistry).map(r => r.dependencies));
    let unregisteredServices =
      referencedServices.filter(s => !registeredServices.includes(s));

    if (unregisteredServices.length > 0) {
      throw Error(
        'Registry Error: the following service(s) are referenced but not ' +
        'registered: ' + unregisteredServices.join(', '));
    }
  }

  getUpgradedServices() {
    this.validateServiceDependencies();

    let unresolvedServices: string[] = Object.keys(this.serviceRegistry);
    let resolvedServices = {};
    let isSatisfied = (serviceName: string): boolean => {
      return this.serviceRegistry[serviceName].dependencies.every(
        d => resolvedServices.hasOwnProperty(d));
    };

    while (unresolvedServices.length > 0) {
      let satisfiedServices: string[] = unresolvedServices.filter(isSatisfied);
      if (satisfiedServices.length === 0) {
        throw Error(
          'Circular Dependency Error: the following service(s) have a cyclic ' +
          'dependency: ' + unresolvedServices.join(', '));
      }
      for (let serviceName of satisfiedServices) {
        let {service, dependencies} = this.serviceRegistry[serviceName];
        resolvedServices[serviceName] =
          new service(...dependencies.map(d => resolvedServices[d]));
        unresolvedServices.splice(unresolvedServices.indexOf(serviceName), 1);
      }
    }

    return resolvedServices;
  }
}

angular.module('oppia').factory(
  'UpgradedServices',
  downgradeInjectable(UpgradedServices));
