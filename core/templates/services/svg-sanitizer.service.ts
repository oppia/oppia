// Copyright 2020 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview SVG related checks and sanitization service.
 */

import { Injectable } from '@angular/core';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import { downgradeInjectable } from '@angular/upgrade/static';

import constants from 'assets/constants';

@Injectable({
  providedIn: 'root'
})
export class SvgSanitizerService {
  constructor(private sanitizer: DomSanitizer) {}

  cleanMathExpressionSvgString(svgString: string): string {
    // We need to modify/remove unnecessary attributes added by mathjax
    // from the svg tag.
    let domParser = new DOMParser();
    let doc = domParser.parseFromString(svgString, 'image/svg+xml');
    doc.querySelectorAll('*').forEach((node) => {
      if (node.tagName.toLowerCase() === 'svg') {
        node.removeAttribute('xmlns:xlink');
        node.removeAttribute('role');
        // We are removing this attribute, because currently it is not in
        // the allowlist of valid attributes.
        node.removeAttribute('aria-hidden');
        node.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
      }
      // Remove the custom data attributes added by MathJax.
      // These custom attributes don't affect the rendering of the SVGs,
      // and they are not present in the white list for allowed attributes.
      for (let i = 0; i < node.attributes.length; i++) {
        if (node.attributes[i].name.toLowerCase().startsWith('data-')) {
          node.removeAttribute(node.attributes[i].name.toLowerCase());
        }
      }
    });
    return doc.documentElement.outerHTML;
  }

  extractDimensionsFromMathExpressionSvgString(svgString: string): {
    height: string, width: string, verticalPadding: string} {
    // The method below extracts the dimensions from the attributes of a
    // math SVG string generated by mathJax.
    let domParser = new DOMParser();
    let dimensions = {
      height: '',
      width: '',
      verticalPadding: ''
    };
    let doc = domParser.parseFromString(svgString, 'image/svg+xml');
    doc.querySelectorAll('*').forEach((node) => {
      // Mathjax SVGs have relative dimensions in the unit of 'ex' rather
      // than 'px'(pixels). Hence the dimensions have decimal points in them,
      // we need to replace these decimals with a letter so that it's easier
      // to process and validate the filenames.
      if (node.tagName.toLowerCase() === 'svg') {
        dimensions.height = (
          (node.getAttribute('height').match(/\d+\.*\d*/g)[0]).replace(
            '.', 'd'));
        dimensions.width = (
          (node.getAttribute('width').match(/\d+\.*\d*/g)[0]).replace(
            '.', 'd'));
        // This attribute is useful for the vertical alignment of the
        // Math SVG while displaying inline with other text.
        // Math SVGs don't necessarily have a vertical alignment, in that
        // case we assign it zero.
        let styleValue = node.getAttribute('style').match(/\d+\.*\d*/g);
        if (styleValue) {
          dimensions.verticalPadding = styleValue[0].replace('.', 'd');
        } else {
          dimensions.verticalPadding = '0';
        }
      }
    });
    return dimensions;
  }

  private _getInvalidSvgTagsAndAttrs(
      svg: Document): {tags: string[], attrs: string[]} {
    let invalidTags = [];
    let invalidAttrs = [];
    let allowedTags = Object.keys(constants.SVG_ATTRS_WHITELIST);
    let nodeTagName = null;
    svg.querySelectorAll('*').forEach((node) => {
      nodeTagName = node.tagName.toLowerCase();
      if (allowedTags.indexOf(nodeTagName) !== -1) {
        for (let i = 0; i < node.attributes.length; i++) {
          if (constants.SVG_ATTRS_WHITELIST[nodeTagName].indexOf(
            node.attributes[i].name.toLowerCase()) === -1) {
            invalidAttrs.push(
              node.tagName + ':' + node.attributes[i].name);
          }
        }
      } else {
        invalidTags.push(node.tagName);
      }
    });
    return { tags: invalidTags, attrs: invalidAttrs };
  }

  getInvalidSvgTagsAndAttrs(svg: Document): {tags: string[], attrs: string[]} {
    return this._getInvalidSvgTagsAndAttrs(svg);
  }

  getInvalidSvgTagsAndAttrsFromDataUri(
      dataURI: string): {tags: string[], attrs: string[]} {
    // Convert base64/URLEncoded data component to raw binary data
    // held in a string.
    let svgString = atob(dataURI.split(',')[1]);
    let domParser = new DOMParser();
    let doc = domParser.parseFromString(svgString, 'image/svg+xml');
    return this._getInvalidSvgTagsAndAttrs(doc);
  }

  /**
   * Checks the input for malicious or invalid SVG code.
   * The checks:
   * 1. Is base64 encoded.
   * 2. Has no invalid tags or attributes. This check is performed by the
   *    getInvalidSvgTagsAndAttrsFromDataUri function in this file.
   *
   * @returns {boolean} True if all the checks pass. False Otherwise.
   */
  isValidBase64Svg(base64ImageData: string): boolean {
    const DATA_URL_PATTERN = /^data:image\/svg\+xml;base64,[a-z0-9+\/]+=*$/i;
    // Check if data passed is a valid bse64 SVG.
    if (!base64ImageData.match(DATA_URL_PATTERN)) {
      return false;
    }

    // Check for malicious SVG.
    const { tags: invalidTags, attrs: invalidAttributes } = (
      this.getInvalidSvgTagsAndAttrsFromDataUri(base64ImageData));

    if (invalidTags.length > 0 || invalidAttributes.length > 0) {
      return false;
    }

    // The SVG is safe and valid.
    return true;
  }

  /**
   * Checks the input for malicious or invalid SVG code.
   * Angular by default treats svg+xml data as unsafe. In order to show the SVG
   * we need to check the SVG data for possible XSS attacks. The spec file for
   * this component showcases some scenarios where XSS attacks are possible if
   * the SVG is not checked for such attacks. The following function checks the
   * SVG data for possible XSS vulnerabilities.
   *
   * @returns {SafeResourceUrl | null} SafeResourceUrl if the SVG is valid and
   * trusted. Otherwise returns null.
   */
  getTrustedSvgResourceUrl(base64ImageData: string): SafeResourceUrl | null {
    if (this.isValidBase64Svg(base64ImageData)) {
      return this.sanitizer.bypassSecurityTrustResourceUrl(base64ImageData);
    }
    return null;
  }
}

angular.module('oppia').factory(
  'SvgSanitizerService', downgradeInjectable(SvgSanitizerService));
