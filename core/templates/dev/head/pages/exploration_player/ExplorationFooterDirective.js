// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Directive for showing author/share footer
 * in exploration player.
 */

require('components/StateGraphLayoutService.js');
require('domain/classifier/AnswerClassificationResultObjectFactory.js');
require('domain/collection/GuestCollectionProgressService.js');
require('domain/exploration/EditableExplorationBackendApiService.js');
require('domain/exploration/ExplorationObjectFactory.js');
require('domain/exploration/ParamChangeObjectFactory.js');
require('domain/exploration/ReadOnlyExplorationBackendApiService.js');
require('domain/exploration/RuleObjectFactory.js');
require('domain/feedback_thread/FeedbackThreadObjectFactory.js');
require('domain/question/PretestQuestionBackendApiService.js');
require('domain/skill/ConceptCardBackendApiService.js');
require('domain/skill/ConceptCardObjectFactory.js');
require('domain/state/StateObjectFactory.js');
require('domain/state/StatesObjectFactory.js');
require('domain/state_card/StateCardObjectFactory.js');
require('domain/suggestion/SuggestionObjectFactory.js');
require('domain/suggestion/SuggestionThreadObjectFactory.js');
require('domain/summary/ExplorationSummaryBackendApiService.js');
require('domain/utilities/BrowserCheckerService.js');
require('domain/utilities/LanguageUtilService.js');
require('domain/utilities/UrlInterpolationService.js');
require('expressions/ExpressionInterpolationService.js');
require('pages/exploration_player/AnswerClassificationService.js');
require('pages/exploration_player/AudioPreloaderService.js');
require('pages/exploration_player/AudioTranslationLanguageService.js');
require('pages/exploration_player/AudioTranslationManagerService.js');
require('pages/exploration_player/CurrentInteractionService.js');
require('pages/exploration_player/ExplorationEngineService.js');
require('pages/exploration_player/ExplorationPlayerStateService.js');
require('pages/exploration_player/ExplorationRecommendationsService.js');
require('pages/exploration_player/FatigueDetectionService.js');
require('pages/exploration_player/HintsAndSolutionManagerService.js');
require('pages/exploration_player/ImagePreloaderService.js');
require('pages/exploration_player/LearnerParamsService.js');
require('pages/exploration_player/LearnerViewRatingService.js');
require('pages/exploration_player/NumberAttemptsService.js');
require('pages/exploration_player/PlayerConstants.js');
require('pages/exploration_player/PlayerCorrectnessFeedbackEnabledService.js');
require('pages/exploration_player/PlayerPositionService.js');
require('pages/exploration_player/PlayerTranscriptService.js');
require('pages/exploration_player/PredictionAlgorithmRegistryService.js');
require('pages/exploration_player/PretestEngineService.js');
require('pages/exploration_player/RefresherExplorationConfirmationModalService.js');
require('pages/exploration_player/StateClassifierMappingService.js');
require('pages/exploration_player/StatsReportingService.js');
require('pages/state_editor/StateEditorService.js');
require('pages/state_editor/StatePropertyServices.js');
require('pages/suggestion_editor/ShowSuggestionModalForEditorViewService.js');
require('services/AlertsService.js');
require('services/AssetsBackendApiService.js');
require('services/AudioPlayerService.js');
require('services/AutogeneratedAudioPlayerService.js');
require('services/ComputeGraphService.js');
require('services/ContextService.js');
require('services/DateTimeFormatService.js');
require('services/EditabilityService.js');
require('services/ExplorationFeaturesService.js');
require('services/ExplorationHtmlFormatterService.js');
require('services/IdGenerationService.js');
require('services/ImprovementCardService.js');
require('services/ImprovementsService.js');
require('services/LocalStorageService.js');
require('services/MessengerService.js');
require('services/PlaythroughIssuesService.js');
require('services/PlaythroughService.js');
require('services/SiteAnalyticsService.js');
require('services/StateRulesStatsService.js');
require('services/StateTopAnswersStatsService.js');
require('services/UserService.js');
require('services/UtilsService.js');
require('services/ValidatorsService.js');
require('services/contextual/UrlService.js');
require('services/contextual/WindowDimensionsService.js');
require('services/stateful/FocusManagerService.js');

oppia.directive('explorationFooter', [
  'UrlInterpolationService', function(UrlInterpolationService) {
    return {
      restrict: 'E',
      scope: {
        twitterText: '@'
      },
      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(
        '/pages/exploration_player/exploration_footer_directive.html'),
      controller: [
        '$scope', '$http', '$log', 'ContextService',
        'ExplorationSummaryBackendApiService', 'UrlService',
        'WindowDimensionsService',
        function(
            $scope, $http, $log, ContextService,
            ExplorationSummaryBackendApiService, UrlService,
            WindowDimensionsService) {
          $scope.explorationId = ContextService.getExplorationId();
          $scope.getStaticImageUrl = UrlInterpolationService.getStaticImageUrl;
          $scope.iframed = UrlService.isIframed();

          $scope.windowIsNarrow = WindowDimensionsService.isWindowNarrow();
          WindowDimensionsService.registerOnResizeHook(function() {
            $scope.windowIsNarrow = WindowDimensionsService.isWindowNarrow();
            $scope.$apply();
          });

          $scope.contributorNames = [];
          ExplorationSummaryBackendApiService
            .loadPublicAndPrivateExplorationSummaries([$scope.explorationId])
            .then(function(summaries) {
              var summaryBackendObject = null;
              if (summaries.length > 0) {
                var contributorSummary = (
                  summaries[0].human_readable_contributors_summary);
                $scope.contributorNames = Object.keys(contributorSummary).sort(
                  function(contributorUsername1, contributorUsername2) {
                    var commitsOfContributor1 = contributorSummary[
                      contributorUsername1].num_commits;
                    var commitsOfContributor2 = contributorSummary[
                      contributorUsername2].num_commits;
                    return commitsOfContributor2 - commitsOfContributor1;
                  });
              }
            });
        }
      ]
    };
  }]);
