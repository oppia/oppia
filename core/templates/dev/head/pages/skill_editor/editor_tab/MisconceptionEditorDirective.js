// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Directive for the misconception editor.
 */

require('components/QuestionCreationService.js');
require('components/RatingComputationService.js');
require('components/StateGraphLayoutService.js');
require('domain/classifier/AnswerClassificationResultObjectFactory.js');
require('domain/classifier/ClassifierObjectFactory.js');
require('domain/collection/GuestCollectionProgressService.js');
require('domain/editor/undo_redo/UndoRedoService.js');
require('domain/exploration/EditableExplorationBackendApiService.js');
require('domain/exploration/ExplorationObjectFactory.js');
require('domain/exploration/ParamChangeObjectFactory.js');
require('domain/exploration/ReadOnlyExplorationBackendApiService.js');
require('domain/exploration/RuleObjectFactory.js');
require('domain/feedback_thread/FeedbackThreadObjectFactory.js');
require('domain/question/EditableQuestionBackendApiService.js');
require('domain/question/PretestQuestionBackendApiService.js');
require('domain/question/QuestionObjectFactory.js');
require('domain/skill/ConceptCardBackendApiService.js');
require('domain/skill/ConceptCardObjectFactory.js');
require('domain/skill/EditableSkillBackendApiService.js');
require('domain/skill/MisconceptionObjectFactory.js');
require('domain/skill/SkillUpdateService.js');
require('domain/state/StateObjectFactory.js');
require('domain/state/StatesObjectFactory.js');
require('domain/state_card/StateCardObjectFactory.js');
require('domain/suggestion/SuggestionObjectFactory.js');
require('domain/suggestion/SuggestionThreadObjectFactory.js');
require('domain/summary/ExplorationSummaryBackendApiService.js');
require('domain/utilities/BrowserCheckerService.js');
require('domain/utilities/LanguageUtilService.js');
require('domain/utilities/StopwatchObjectFactory.js');
require('domain/utilities/UrlInterpolationService.js');
require('expressions/ExpressionInterpolationService.js');
require('pages/topic_editor/TopicEditorStateService.js');
require('pages/state_editor/StateEditorService.js');
require('pages/state_editor/StatePropertyServices.js');
require('pages/suggestion_editor/ShowSuggestionModalForEditorViewService.js');
require('pages/suggestion_editor/ShowSuggestionModalForLearnerLocalViewService.js');
require('services/AlertsService.js');
require('services/AssetsBackendApiService.js');
require('services/AudioPlayerService.js');
require('services/AutogeneratedAudioPlayerService.js');
require('services/ComputeGraphService.js');
require('services/ContextService.js');
require('services/DateTimeFormatService.js');
require('services/EditabilityService.js');
require('services/ExplorationFeaturesBackendApiService.js');
require('services/ExplorationFeaturesService.js');
require('services/ExplorationHtmlFormatterService.js');
require('services/HtmlEscaperService.js');
require('services/IdGenerationService.js');
require('services/ImprovementCardService.js');
require('services/ImprovementsService.js');
require('services/LocalStorageService.js');
require('services/MessengerService.js');
require('services/PlaythroughIssuesService.js');
require('services/PlaythroughService.js');
require('services/SiteAnalyticsService.js');
require('services/StateRulesStatsService.js');
require('services/StateTopAnswersStatsService.js');
require('services/UserService.js');
require('services/UtilsService.js');
require('services/ValidatorsService.js');
require('services/contextual/DeviceInfoService.js');
require('services/contextual/UrlService.js');
require('services/contextual/WindowDimensionsService.js');
require('services/stateful/BackgroundMaskService.js');
require('services/stateful/FocusManagerService.js');

oppia.directive('misconceptionEditor', [
  'UrlInterpolationService', function(UrlInterpolationService) {
    return {
      retrict: 'E',
      scope: {
        misconception: '=',
        getIndex: '&index',
        isEditable: '&isEditable'
      },
      templateUrl: UrlInterpolationService.getDirectiveTemplateUrl(
        '/pages/skill_editor/editor_tab/misconception_editor_directive.html'),
      controller: [
        '$scope', 'SkillUpdateService', 'SkillEditorStateService',
        function($scope, SkillUpdateService, SkillEditorStateService) {
          $scope.skill = SkillEditorStateService.getSkill();

          var nameMemento = null;
          var notesMemento = null;
          var feedbackMemento = null;

          $scope.nameEditorIsOpen = false;
          $scope.notesEditorIsOpen = false;
          $scope.feedbackEditorIsOpen = false;

          $scope.container = {
            misconceptionName: $scope.misconception.getName(),
            misconceptionNotes: $scope.misconception.getNotes(),
            misconceptionFeedback: $scope.misconception.getFeedback()
          };

          $scope.NOTES_FORM_SCHEMA = {
            type: 'html',
            ui_config: {}
          };

          $scope.FEEDBACK_FORM_SCHEMA = {
            type: 'html',
            ui_config: {
              hide_complex_extensions: 'true'
            }
          };

          $scope.openNameEditor = function() {
            if ($scope.isEditable()) {
              nameMemento = angular.copy(
                $scope.container.misconceptionName);
              $scope.nameEditorIsOpen = true;
            }
          };

          $scope.openNotesEditor = function() {
            if ($scope.isEditable()) {
              notesMemento = angular.copy(
                $scope.container.misconceptionNotes);
              $scope.notesEditorIsOpen = true;
            }
          };

          $scope.openFeedbackEditor = function() {
            if ($scope.isEditable()) {
              feedbackMemento = angular.copy(
                $scope.container.misconceptionFeedback);
              $scope.feedbackEditorIsOpen = true;
            }
          };

          $scope.saveName = function() {
            $scope.nameEditorIsOpen = false;
            var nameHasChanged = (
              nameMemento !==
              $scope.container.misconceptionName);

            if (nameHasChanged) {
              SkillUpdateService.updateMisconceptionName(
                $scope.skill,
                $scope.misconception.getId(),
                nameMemento,
                $scope.container.misconceptionName);
              nameMemento = null;
            }
          };

          $scope.saveNotes = function() {
            $scope.notesEditorIsOpen = false;
            var notesHasChanged = (
              notesMemento !==
              $scope.container.misconceptionNotes);

            if (notesHasChanged) {
              SkillUpdateService.updateMisconceptionNotes(
                $scope.skill,
                $scope.misconception.getId(),
                notesMemento,
                $scope.container.misconceptionNotes);
              notesMemento = null;
            }
          };

          $scope.saveFeedback = function() {
            $scope.feedbackEditorIsOpen = false;
            var feedbackHasChanged = (
              feedbackMemento !==
              $scope.container.misconceptionFeedback);

            if (feedbackHasChanged) {
              SkillUpdateService.updateMisconceptionFeedback(
                $scope.skill,
                $scope.misconception.getId(),
                feedbackMemento,
                $scope.container.misconceptionFeedback);
              feedbackMemento = null;
            }
          };

          $scope.cancelEditName = function() {
            $scope.container.misconceptionName = nameMemento;
            nameMemento = null;
            $scope.nameEditorIsOpen = false;
          };

          $scope.cancelEditNotes = function() {
            $scope.container.misconceptionNotes = notesMemento;
            notesMemento = null;
            $scope.notesEditorIsOpen = false;
          };

          $scope.cancelEditFeedback = function() {
            $scope.container.misconceptionFeedback = feedbackMemento;
            feedbackMemento = null;
            $scope.feedbackEditorIsOpen = false;
          };
        }]
    };
  }
]);
