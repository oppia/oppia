// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview A service that maintains a record of the objects exclusive to
 * a state.
 */

require('components/QuestionCreationService.js');
require('components/RatingComputationService.js');
require('components/StateGraphLayoutService.js');
require('domain/classifier/AnswerClassificationResultObjectFactory.js');
require('domain/classifier/ClassifierObjectFactory.js');
require('domain/collection/GuestCollectionProgressService.js');
require('domain/editor/undo_redo/UndoRedoService.js');
require('domain/exploration/EditableExplorationBackendApiService.js');
require('domain/exploration/ExplorationObjectFactory.js');
require('domain/exploration/ParamChangeObjectFactory.js');
require('domain/exploration/ReadOnlyExplorationBackendApiService.js');
require('domain/exploration/RuleObjectFactory.js');
require('domain/exploration/SubtitledHtmlObjectFactory.js');
require('domain/feedback_thread/FeedbackThreadObjectFactory.js');
require('domain/question/EditableQuestionBackendApiService.js');
require('domain/question/PretestQuestionBackendApiService.js');
require('domain/question/QuestionObjectFactory.js');
require('domain/skill/ConceptCardBackendApiService.js');
require('domain/skill/ConceptCardObjectFactory.js');
require('domain/skill/EditableSkillBackendApiService.js');
require('domain/skill/MisconceptionObjectFactory.js');
require('domain/skill/SkillObjectFactory.js');
require('domain/skill/SkillRightsBackendApiService.js');
require('domain/skill/SkillRightsObjectFactory.js');
require('domain/skill/SkillUpdateService.js');
require('domain/state/StateObjectFactory.js');
require('domain/state/StatesObjectFactory.js');
require('domain/state_card/StateCardObjectFactory.js');
require('domain/suggestion/SuggestionObjectFactory.js');
require('domain/suggestion/SuggestionThreadObjectFactory.js');
require('domain/summary/ExplorationSummaryBackendApiService.js');
require('domain/utilities/BrowserCheckerService.js');
require('domain/utilities/LanguageUtilService.js');
require('domain/utilities/StopwatchObjectFactory.js');
require('domain/utilities/UrlInterpolationService.js');
require('expressions/ExpressionInterpolationService.js');
require('pages/exploration_editor/EditorFirstTimeEventsService.js');
require('pages/topic_editor/TopicEditorStateService.js');
require('pages/skill_editor/SkillEditorRoutingService.js');
require('pages/skill_editor/SkillEditorStateService.js');
require('pages/state_editor/StateEditorService.js');
require('pages/state_editor/StatePropertyServices.js');
require('pages/suggestion_editor/ShowSuggestionModalForEditorViewService.js');
require('pages/suggestion_editor/ShowSuggestionModalForLearnerLocalViewService.js');
require('services/AlertsService.js');
require('services/AssetsBackendApiService.js');
require('services/AudioPlayerService.js');
require('services/AutogeneratedAudioPlayerService.js');
require('services/ComputeGraphService.js');
require('services/ContextService.js');
require('services/DateTimeFormatService.js');
require('services/EditabilityService.js');
require('services/ExplorationFeaturesBackendApiService.js');
require('services/ExplorationFeaturesService.js');
require('services/ExplorationHtmlFormatterService.js');
require('services/GenerateContentIdService.js');
require('services/HtmlEscaperService.js');
require('services/IdGenerationService.js');
require('services/ImprovementCardService.js');
require('services/ImprovementsService.js');
require('services/LocalStorageService.js');
require('services/MessengerService.js');
require('services/PlaythroughIssuesService.js');
require('services/PlaythroughService.js');
require('services/SiteAnalyticsService.js');
require('services/StateRulesStatsService.js');
require('services/StateTopAnswersStatsService.js');
require('services/UserService.js');
require('services/UtilsService.js');
require('services/ValidatorsService.js');
require('services/contextual/DeviceInfoService.js');
require('services/contextual/UrlService.js');
require('services/contextual/WindowDimensionsService.js');
require('services/stateful/BackgroundMaskService.js');
require('services/stateful/FocusManagerService.js');

oppia.factory('StateEditorService', [
  '$log', 'SolutionValidityService',
  function(
      $log, SolutionValidityService) {
    var activeStateName = null;
    var stateNames = [];
    var correctnessFeedbackEnabled = null;
    var inQuestionMode = null;
    // Currently, the only place where this is used in the state editor
    // is in solution verification. So, once the interaction is set in this
    // service, the given solutions would be automatically verified for the set
    // interaction.
    var interaction = null;
    var misconceptions = [];
    var explorationIsWhitelisted = false;

    return {
      getActiveStateName: function() {
        return activeStateName;
      },
      setActiveStateName: function(newActiveStateName) {
        if (newActiveStateName === '' || newActiveStateName === null) {
          $log.error('Invalid active state name: ' + newActiveStateName);
          return;
        }
        activeStateName = newActiveStateName;
      },
      isExplorationWhitelisted: function() {
        return explorationIsWhitelisted;
      },
      updateExplorationWhitelistedStatus: function(value) {
        explorationIsWhitelisted = value;
      },
      setMisconceptions: function(newMisconceptions) {
        misconceptions = newMisconceptions;
      },
      getMisconceptions: function() {
        return misconceptions;
      },
      setInteraction: function(newInteraction) {
        interaction = newInteraction;
      },
      setInteractionId: function(newId) {
        interaction.setId(newId);
      },
      setInteractionAnswerGroups: function(newAnswerGroups) {
        interaction.setAnswerGroups(newAnswerGroups);
      },
      setInteractionDefaultOutcome: function(newOutcome) {
        interaction.setDefaultOutcome(newOutcome);
      },
      setInteractionCustomizationArgs: function(newArgs) {
        interaction.setCustomizationArgs(newArgs);
      },
      setInteractionSolution: function(solution) {
        interaction.setSolution(solution);
      },
      setInteractionHints: function(hints) {
        interaction.setHints(hints);
      },
      getInteraction: function() {
        return interaction;
      },
      getAnswerChoices: function(interactionId, customizationArgs) {
        if (!interactionId) {
          return null;
        }
        // Special cases for multiple choice input and image click input.
        if (interactionId === 'MultipleChoiceInput') {
          return customizationArgs.choices.value.map(
            function(val, ind) {
              return {
                val: ind,
                label: val
              };
            }
          );
        } else if (interactionId === 'ImageClickInput') {
          var _answerChoices = [];
          var imageWithRegions =
            customizationArgs.imageAndRegions.value;
          for (
            var j = 0; j < imageWithRegions.labeledRegions.length; j++) {
            _answerChoices.push({
              val: imageWithRegions.labeledRegions[j].label,
              label: imageWithRegions.labeledRegions[j].label
            });
          }
          return _answerChoices;
        } else if (interactionId === 'ItemSelectionInput' ||
            interactionId === 'DragAndDropSortInput') {
          return customizationArgs.choices.value.map(function(val) {
            return {
              val: val,
              label: val
            };
          });
        } else {
          return null;
        }
      },
      setInQuestionMode: function(newModeValue) {
        inQuestionMode = newModeValue;
      },
      isInQuestionMode: function() {
        return inQuestionMode;
      },
      setCorrectnessFeedbackEnabled: function(newCorrectnessFeedbackEnabled) {
        correctnessFeedbackEnabled = newCorrectnessFeedbackEnabled;
      },
      getCorrectnessFeedbackEnabled: function() {
        return correctnessFeedbackEnabled;
      },
      setStateNames: function(newStateNames) {
        stateNames = newStateNames;
      },
      getStateNames: function() {
        return stateNames;
      },
      isCurrentSolutionValid: function() {
        return SolutionValidityService.isSolutionValid(activeStateName);
      },
      deleteCurrentSolutionValidity: function() {
        SolutionValidityService.deleteSolutionValidity(activeStateName);
      }
    };
  }]);
