(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["story_editor~topics_and_skills_dashboard"],{

/***/ "./core/templates/dev/head/components/forms/custom-forms-directives/image-uploader.directive.ts":
/*!******************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/custom-forms-directives/image-uploader.directive.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for uploading images.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/IdGenerationService.ts */ "./core/templates/dev/head/services/IdGenerationService.ts");
angular.module('oppia').directive('imageUploader', [
    'IdGenerationService', 'UrlInterpolationService',
    function (IdGenerationService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                height: '@',
                onFileChanged: '=',
                errorMessage: '@',
                width: '@'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/custom-forms-directives/' +
                'image-uploader.directive.html'),
            link: function (scope, elt) {
                var onDragEnd = function (e) {
                    e.preventDefault();
                    $('.image-uploader-drop-area').removeClass('image-uploader-is-active');
                };
                var validateUploadedFile = function (file, filename) {
                    if (!file || !file.size || !file.type.match('image.*')) {
                        return 'This file is not recognized as an image.';
                    }
                    if (!file.type.match('image.jpeg') &&
                        !file.type.match('image.gif') &&
                        !file.type.match('image.jpg') &&
                        !file.type.match('image.png')) {
                        return 'This image format is not supported.';
                    }
                    if ((file.type.match(/jp(e?)g$/) && !file.name.match(/\.jp(e?)g$/)) ||
                        (file.type.match(/gif$/) && !file.name.match(/\.gif$/)) ||
                        (file.type.match(/png$/) && !file.name.match(/\.png$/))) {
                        return 'This image format does not match the filename extension.';
                    }
                    var ONE_MB_IN_BYTES = 1048576;
                    if (file.size > ONE_MB_IN_BYTES) {
                        var currentSize = (file.size / ONE_MB_IN_BYTES).toFixed(1) + ' MB';
                        return 'The maximum allowed file size is 1 MB' +
                            ' (' + currentSize + ' given).';
                    }
                    return null;
                };
                $(elt).bind('drop', function (e) {
                    onDragEnd(e);
                    var file = e.originalEvent.dataTransfer.files[0];
                    scope.errorMessage = validateUploadedFile(file, file.name);
                    if (!scope.errorMessage) {
                        // Only fire this event if validations pass.
                        scope.onFileChanged(file, file.name);
                    }
                    scope.$apply();
                });
                $(elt).bind('dragover', function (e) {
                    e.preventDefault();
                    $('.image-uploader-drop-area').addClass('image-uploader-is-active');
                });
                $(elt).bind('dragleave', onDragEnd);
                // If the user accidentally drops an image outside of the image-uploader
                // we want to prevent the browser from applying normal drag-and-drop
                // logic, which is to load the image in the browser tab.
                $(window).bind('dragover', function (e) {
                    e.preventDefault();
                });
                $(window).bind('drop', function (e) {
                    e.preventDefault();
                });
                // We generate a random class name to distinguish this input from
                // others in the DOM.
                scope.fileInputClassName = ('image-uploader-file-input' + IdGenerationService.generateNewId());
                angular.element(document).on('change', '.' + scope.fileInputClassName, function (evt) {
                    var file = evt.currentTarget.files[0];
                    var filename = evt.target.value.split(/(\\|\/)/g).pop();
                    scope.errorMessage = validateUploadedFile(file, filename);
                    if (!scope.errorMessage) {
                        // Only fire this event if validations pass.
                        scope.onFileChanged(file, filename);
                    }
                    scope.$apply();
                });
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/conversion.ts":
/*!********************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/conversion.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Functions to convert symbols available on the keyboard to
 *   desired logic symbols as a user types.
 */
var logicProofConversion = (function () {
    // NOTE: the 'old' values must all be single characters
    var REPLACEMENT_PAIRS = [{
            old: '&',
            // eslint-disable quote-props
            'new': '\u2227'
        }, {
            old: '|',
            'new': '\u2228'
        }, {
            old: '@',
            'new': '\u2200'
        }, {
            old: '$',
            'new': '\u2203'
        }, {
            old: '^',
            'new': '\u2227'
        }, {
            old: '\u0009',
            'new': '  '
            // eslint-enable quote-props
        }];
    var convertToLogicCharacters = function (oldString) {
        var replacedString = oldString;
        for (var i = 0; i < REPLACEMENT_PAIRS.length; i++) {
            // We don't use .replace() as it only affects the first instance
            replacedString = replacedString.split(REPLACEMENT_PAIRS[i].old).join(REPLACEMENT_PAIRS[i]['new']);
        }
        return replacedString;
    };
    return {
        convertToLogicCharacters: convertToLogicCharacters
    };
}());
exports.default = logicProofConversion;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/data.ts":
/*!**************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/data.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Contains logic proof data.
 */
var logicProofData = (function () {
    var BASE_VOCABULARY = {
        from: ['from'],
        and: ['and'],
        have: ['we have', 'we know', 'have'],
        hence: ['hence', 'so', 'thus', 'thence', 'whence'],
        whichever: [
            'and whichever is true', 'and either way', 'and in either case'
        ],
        arbitrary: ['was arbitrary', 'is arbitrary'],
        take: ['take'],
        satisfying: ['satisfying', 'such that'],
        // eslint-disable quote-props
        'if': ['if'],
        given: ['given'],
        contradiction: ['contradiction'],
        at: ['at']
    };
    var SINGLE_BOOLEAN = {
        type: 'boolean',
        arbitrarily_many: false
    };
    var SINGLE_ELEMENT = {
        type: 'element',
        arbitrarily_many: false
    };
    // NOTE: By default, 'and' & 'or' must be binary.
    // NOTE: We are not yet using the display keys from the kinds (we are using
    // symbol keys from the list of operators).
    var BASE_STUDENT_LANGUAGE = {
        types: {
            'boolean': {
                // eslint-enable quote-props
                quantifiable: false
            },
            element: {
                quantifiable: true
            }
        },
        kinds: {
            binary_connective: {
                display: [{
                        format: 'argument_index',
                        content: 0
                    }, {
                        format: 'name'
                    }, {
                        format: 'argument_index',
                        content: 1
                    }]
            },
            unary_connective: {
                matchable: false,
                display: [{
                        format: 'name'
                    }, {
                        format: 'argument_index',
                        content: 0
                    }]
            },
            quantifier: {
                matchable: false,
                display: [{
                        format: 'name'
                    }, {
                        format: 'dummy_index',
                        content: 0
                    }, {
                        format: 'string',
                        content: '.'
                    }, {
                        format: 'argument_index',
                        conent: 0
                    }]
            },
            binary_function: {
                matchable: false,
                display: [{
                        format: 'argument_index',
                        content: 0
                    }, {
                        format: 'name'
                    }, {
                        format: 'argument_index',
                        content: 1
                    }],
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }]
            },
            prefix_function: {
                matchable: false,
                typing: [{
                        arguments: [{
                                type: 'element',
                                arbitrarily_many: true
                            }],
                        dummies: [],
                        output: 'element'
                    }, {
                        arguments: [{
                                type: 'element',
                                arbitrarily_many: true
                            }],
                        dummies: [],
                        output: 'boolean'
                    }]
            },
            constant: {
                matchable: false,
                display: [{
                        format: 'name'
                    }],
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'element'
                    }]
            },
            variable: {
                matchable: true,
                display: [{
                        format: 'name'
                    }],
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'element'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'boolean'
                    }]
            }
        },
        operators: {
            and: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['\u2227']
            },
            or: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['\u2228']
            },
            implies: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['=>']
            },
            iff: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<=>']
            },
            not: {
                kind: 'unary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['~']
            },
            for_all: {
                kind: 'quantifier',
                typing: [{
                        arguments: [SINGLE_BOOLEAN],
                        dummies: [SINGLE_ELEMENT],
                        output: 'boolean'
                    }],
                symbols: ['\u2200', '.']
            },
            exists: {
                kind: 'quantifier',
                typing: [{
                        arguments: [SINGLE_BOOLEAN],
                        dummies: [SINGLE_ELEMENT],
                        output: 'boolean'
                    }],
                symbols: ['\u2203', '.']
            },
            equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['=']
            },
            not_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['!=']
            },
            less_than: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<']
            },
            greater_than: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['>']
            },
            less_than_or_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<=']
            },
            greater_than_or_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['>=']
            },
            addition: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }],
                symbols: ['+']
            },
            subtraction: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }],
                symbols: ['-']
            },
            multiplication: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }],
                symbols: ['*']
            },
            division: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }],
                symbols: ['/']
            },
            exponentiation: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }],
                symbols: ['^']
            }
        }
    };
    var SINGLE_INTEGER = {
        type: 'integer',
        arbitrarily_many: false
    };
    var SINGLE_STRING = {
        type: 'string',
        arbitrarily_many: false
    };
    var SINGLE_FORMULA = {
        type: 'formula',
        arbitrarily_many: false
    };
    var SINGLE_SET_OF_FORMULAS = {
        type: 'set_of_formulas',
        arbitrarily_many: false
    };
    var BASE_CONTROL_LANGUAGE = {
        types: {
            // eslint-disable-next-line quote-props
            'boolean': {
                quantifiable: false
            },
            // Used for line numbers & indentation.
            integer: {
                quantifiable: true
            },
            // Used for line.template.
            string: {
                quantifiable: false
            },
            // Used for matchings, target.
            formula: {
                quantifiable: true
            },
            // Used for antecedents, results & assumptions.
            set_of_formulas: {
                quantifiable: false
            }
        },
        kinds: {
            binary_connective: {},
            unary_connective: {},
            quantifier: {},
            bounded_quantifier: {},
            binary_relation: {},
            binary_function: {},
            // NOTE: new prefix_functions will be explicitely added by making
            // definitions, and from these definitions their types will be known.
            // Thus it is not necessary for their kinds to have typing rules (and
            // such typing rules would in any case have to be inconveniently long).
            prefix_function: {},
            ranged_function: {},
            constant: {
                matchable: false,
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'integer'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'string'
                    }]
            },
            variable: {
                matchable: true,
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'integer'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'string'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'formula'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'set_of_formulas'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'boolean'
                    }]
            }
        },
        operators: {
            and: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [{
                                type: 'boolean',
                                arbitrarily_many: true
                            }],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['\u2227']
            },
            or: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [{
                                type: 'boolean',
                                arbitrarily_many: true
                            }],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['\u2228']
            },
            implies: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['=>']
            },
            iff: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<=>']
            },
            not: {
                kind: 'unary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['~']
            },
            equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_STRING, SINGLE_STRING],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_FORMULA, SINGLE_FORMULA],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_SET_OF_FORMULAS, SINGLE_SET_OF_FORMULAS],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['=']
            },
            not_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_STRING, SINGLE_STRING],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_FORMULA, SINGLE_FORMULA],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_SET_OF_FORMULAS, SINGLE_SET_OF_FORMULAS],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['!=']
            },
            less_than: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<']
            },
            greater_than: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['>']
            },
            less_than_or_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<=']
            },
            greater_than_or_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['>=']
            },
            is_in: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_FORMULA, SINGLE_SET_OF_FORMULAS],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['\u2208']
            },
            addition: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'integer'
                    }],
                symbols: ['+']
            },
            subtraction: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'integer'
                    }],
                symbols: ['-']
            },
            multiplication: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'integer'
                    }],
                symbols: ['*']
            },
            bounded_for_all: {
                kind: 'bounded_quantifier',
                typing: [{
                        // The first argument is the bounding.
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_INTEGER],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_INTEGER],
                        output: 'boolean'
                    }],
                symbols: ['\u2200', '.']
            },
            bounded_exists: {
                kind: 'bounded_quantifier',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_INTEGER],
                        output: 'boolean'
                    }, {
                        // The first argument is the bounding.
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_FORMULA],
                        output: 'boolean'
                    }],
                symbols: ['\u2203', '.']
            },
            // This has form min{n<m|A(n)}, A(n) is the argument and n the dummy, or
            // alteratively min{p∈antecedents(n)|B(p)} which will return the first
            // element of set_of_formulas antecedents(n) satisfying B.
            min: {
                kind: 'ranged_function',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_INTEGER],
                        output: 'integer'
                    }, {
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_FORMULA],
                        output: 'formula'
                    }],
                symbols: ['min', '{', '|', '}']
            },
            max: {
                kind: 'ranged_function',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_INTEGER],
                        output: 'integer'
                    }, {
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_FORMULA],
                        output: 'formula'
                    }],
                symbols: ['max', '{', '|', '}']
            },
            indentation: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'integer'
                    }]
            },
            template: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'string'
                    }]
            },
            antecedents: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            results: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            variables: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            text: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'string'
                    }]
            },
            element: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_STRING, SINGLE_INTEGER],
                        dummies: [],
                        output: 'formula'
                    }]
            },
            num_lines: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'integer'
                    }]
            },
            assumptions: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            target: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'formula'
                    }]
            },
            question_variables: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            // eslint-disable-next-line quote-props
            'if': {
                // NOTE: this prefix function is unusual in having a boolean input
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'integer'
                    }, {
                        arguments: [SINGLE_BOOLEAN, SINGLE_STRING, SINGLE_STRING],
                        dummies: [],
                        output: 'string'
                    }, {
                        arguments: [SINGLE_BOOLEAN, SINGLE_FORMULA, SINGLE_FORMULA],
                        dummies: [],
                        output: 'formula'
                    }, {
                        arguments: [
                            SINGLE_BOOLEAN, SINGLE_SET_OF_FORMULAS, SINGLE_SET_OF_FORMULAS
                        ],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            entry: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_SET_OF_FORMULAS],
                        dummies: [],
                        output: 'formula'
                    }]
            },
            substitute: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_FORMULA, SINGLE_FORMULA, SINGLE_FORMULA],
                        dummies: [],
                        output: 'formula'
                    }]
            }
        }
    };
    var BASE_GENERAL_MESSAGES = {
        odd_number_spaces: {
            templates: [[{
                        isFixed: true,
                        content: ('An indentation is indicated by a double space at the start of ' +
                            'the line, but this line starts with an odd number of spaces.')
                    }]],
            parameters: {},
            category: 'parsing'
        },
        unmatched_line: {
            templates: [[{
                        isFixed: true,
                        content: ('This line could not be identified as valid - please check the ' +
                            'list of possible lines.')
                    }]],
            parameters: {},
            category: 'parsing'
        },
        wrong_kind_in_line: {
            templates: [[{
                        isFixed: true,
                        content: 'In a line of this form, your '
                    }, {
                        isFixed: false,
                        content: 'expression'
                    }, {
                        isFixed: true,
                        content: ' should be a '
                    }, {
                        isFixed: false,
                        content: 'expected_kind'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                expression: {
                    format: 'expression'
                },
                expected_kind: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        unspecified_mistake: {
            templates: [[{
                        isFixed: true,
                        content: 'This line contains a mistake in its '
                    }, {
                        isFixed: false,
                        content: 'section'
                    }, {
                        isFixed: true,
                        content: ' (with code '
                    }, {
                        isFixed: false,
                        content: 'entry'
                    }, {
                        isFixed: true,
                        content: ').'
                    }]],
            parameters: {
                section: {
                    format: 'string'
                },
                entry: {
                    format: 'string'
                }
            },
            category: 'mistake'
        },
        illegal_symbol: {
            templates: [[{
                        isFixed: true,
                        content: 'The symbol '
                    }, {
                        isFixed: false,
                        content: 'symbol'
                    }, {
                        isFixed: true,
                        content: ' was not recognised.'
                    }]],
            parameters: {
                symbol: {
                    format: 'string'
                }
            },
            category: 'parsing'
        },
        blank_line: {
            templates: [[{
                        isFixed: true,
                        content: 'This line is blank.'
                    }]],
            parameters: {},
            category: 'parsing'
        },
        unidentified_word: {
            templates: [[{
                        isFixed: true,
                        content: 'We could not identify \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: ('\'; please make sure you are using vocabulary from the ' +
                            'given list, and don\'t have two consecutive expressions.')
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            },
            category: 'parsing'
        },
        unidentified_words: {
            templates: [[{
                        isFixed: true,
                        content: 'We could not identify either of \''
                    }, {
                        isFixed: false,
                        content: 'word1'
                    }, {
                        isFixed: true,
                        content: '\' or \''
                    }, {
                        isFixed: false,
                        content: 'word2'
                    }, {
                        isFixed: true,
                        content: ('\' as words; please make sure you are using vocabulary from the ' +
                            'given list, and don\'t have two consecutive expressions.')
                    }]],
            parameters: {
                word1: {
                    format: 'string'
                },
                word2: {
                    format: 'string'
                }
            },
            category: 'parsing'
        },
        consecutive_expressions: {
            templates: [[{
                        isFixed: true,
                        content: 'This line has two expressions in a row ('
                    }, {
                        isFixed: false,
                        content: 'word1'
                    }, {
                        isFixed: true,
                        content: ' and '
                    }, {
                        isFixed: false,
                        content: 'word2'
                    }, {
                        isFixed: true,
                        content: ') which is not allowed.'
                    }]],
            parameters: {
                word1: {
                    format: 'string'
                },
                word2: {
                    format: 'string'
                }
            },
            category: 'parsing'
        },
        unidentified_phrase_starting_at: {
            templates: [[{
                        isFixed: true,
                        content: 'The phrase starting \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: ('\' could not be identified; please make sure you are only ' +
                            'using phrases from the given list of vocabulary.')
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            },
            category: 'formattting'
        },
        forbidden_word: {
            templates: [[{
                        isFixed: true,
                        content: 'The name \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: '\' is reserved for vocabulary and so cannot be used here.'
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            },
            category: 'parsing'
        },
        not_enough_inputs: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' must have at least '
                    }, {
                        isFixed: false,
                        content: 'num_needed'
                    }, {
                        isFixed: true,
                        content: ' '
                    }, {
                        isFixed: false,
                        content: 'input_category'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                num_needed: {
                    format: 'string'
                },
                input_category: {
                    format: 'string'
                },
                operator: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        wrong_num_inputs: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' must have '
                    }, {
                        isFixed: false,
                        content: 'num_needed'
                    }, {
                        isFixed: true,
                        content: ' '
                    }, {
                        isFixed: false,
                        content: 'input_category'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                num_needed: {
                    format: 'string'
                },
                input_category: {
                    format: 'string'
                },
                operator: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        wrong_kind: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' is supposed to be a '
                    }, {
                        isFixed: false,
                        content: 'expected_kind'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                },
                expected_kind: {
                    format: 'string'
                },
                actual_kind: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        wrong_type: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' yields a '
                    }, {
                        isFixed: false,
                        content: 'actual_type'
                    }, {
                        isFixed: true,
                        content: ' but you are trying to use it to give a '
                    }, {
                        isFixed: false,
                        content: 'expected_type'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                },
                expected_type: {
                    format: 'string'
                },
                actual_type: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        duplicate_dummy_name: {
            templates: [[{
                        isFixed: true,
                        content: 'The name \''
                    }, {
                        isFixed: false,
                        content: 'dummy'
                    }, {
                        isFixed: true,
                        content: '\' is already in use and so cannot be quantified over in '
                    }, {
                        isFixed: false,
                        content: 'expression'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                dummy: {
                    format: 'expression'
                },
                expression: {
                    format: 'expression'
                }
            },
            category: 'typing'
        },
        dummy_not_variable: {
            templates: [[{
                        isFixed: true,
                        content: 'You can only quantify over variables, not  '
                    }, {
                        isFixed: false,
                        content: 'dummy'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                dummy: {
                    format: 'expression'
                },
                expression: {
                    format: 'expression'
                }
            },
            category: 'typing'
        },
        unknown_operator: {
            templates: [[{
                        isFixed: true,
                        content: 'The operator '
                    }, {
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' could not be identified.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        too_many_parsings: {
            templates: [[{
                        isFixed: true,
                        content: ('This can be parsed in too many different ways - try using fewer ' +
                            'words, especially single-character words.')
                    }]],
            parameters: {},
            category: 'parsing'
        },
        too_many_typings: {
            templates: [[{
                        isFixed: true,
                        content: ('This has too many possible typings - try using fewer variables.')
                    }]],
            parameters: {}
        },
        category: 'typing'
    };
    return {
        BASE_VOCABULARY: BASE_VOCABULARY,
        BASE_STUDENT_LANGUAGE: BASE_STUDENT_LANGUAGE,
        BASE_CONTROL_LANGUAGE: BASE_CONTROL_LANGUAGE,
        BASE_GENERAL_MESSAGES: BASE_GENERAL_MESSAGES
    };
})();
exports.default = logicProofData;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/generatedDefaultData.ts":
/*!******************************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/generatedDefaultData.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/data.ts */ "./extensions/interactions/LogicProof/static/js/data.ts"));
// Paste generated code here.
var LOGIC_PROOF_DEFAULT_QUESTION_DATA = { assumptions: [], results: [], language: data_ts_1.default.BASE_STUDENT_LANGUAGE, general_messages: data_ts_1.default.BASE_GENERAL_MESSAGES, "line_templates": [{ "name": "and_eliminate_left", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "and_eliminate_right", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "and_introduce", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "and_introduce", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_right", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_right", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_left", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_left", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_cis", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_trans", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_introduce", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_introduce", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "assumption", "reader_view": [{ "format": "phrase", "content": "if" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "implies_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "implies_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "implies_introduce", "reader_view": [{ "format": "phrase", "content": "hence" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "not_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "phrase", "content": "contradiction" }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [], "variables": [], "error": [] }, { "name": "not_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "phrase", "content": "contradiction" }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [], "variables": [], "error": [] }, { "name": "contradiction_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "phrase", "content": "contradiction" }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "not_introduce", "reader_view": [{ "format": "phrase", "content": "hence" }, { "format": "expression", "content": { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "excluded_middle_1", "reader_view": [{ "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "excluded_middle_2", "reader_view": [{ "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "excluded_middle_3", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "or_eliminate", "reader_view": [{ "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "whichever" }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "or_introduce_left", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "or_introduce_right", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "exists_eliminate", "reader_view": [{ "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "quantifier", "top_operator_name": "exists", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "hence" }, { "format": "phrase", "content": "take" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element", "kind": "variable" } }, { "format": "phrase", "content": "satisfying" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "quantifier", "top_operator_name": "exists", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" }], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "exists_introduce", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" } }, { "format": "phrase", "content": "at" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "quantifier", "top_operator_name": "exists", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "quantifier", "top_operator_name": "exists", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" }], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "for_all_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "quantifier", "top_operator_name": "for_all", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "at" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "quantifier", "top_operator_name": "for_all", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" }], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "for_all_introduce", "reader_view": [{ "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element", "kind": "variable" } }, { "format": "phrase", "content": "arbitrary" }, { "format": "phrase", "content": "hence" }, { "format": "expression", "content": { "expression": { "top_kind_name": "quantifier", "top_operator_name": "for_all", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "quantifier", "top_operator_name": "for_all", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" }], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "given", "reader_view": [{ "format": "phrase", "content": "given" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element" } }], "antecedents": [], "results": [], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "take", "reader_view": [{ "format": "phrase", "content": "take" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element" } }], "antecedents": [], "results": [], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "reminder", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "reminder", "reader_view": [{ "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "and_introduce_e1", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "Should this be 'From " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " and " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " we have " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "'?" }], [{ "format": "string", "content": "To prove " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " you need to have shown " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " as well." }]] }, { "name": "and_introduce_e2", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "Should this be 'From " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " and " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " we have " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "'?" }], [{ "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " means that " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " and " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " are both true, so you also need to have shown " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "." }]] }, { "name": "and_introduce_e3", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "You have shown " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": ", not " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "." }]] }, { "name": "and_introduce_e4", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "You have shown " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": ", not " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "." }]] }, { "name": "and_eliminate_e", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "From " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " you can conclude either " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " or " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "." }]] }, { "name": "not_introduce_e", "reader_view": [{ "format": "phrase", "content": "hence" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "If you want to reach a contradiction from " }, { "format": "expression", "content": { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " and so conclude " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " then you'll need to start from the law of the excluded middle 'We know " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "'." }]] }], "vocabulary": { "from": ["from"], "and": ["and"], "have": ["we have", "we know", "have"], "hence": ["hence", "so", "thus", "whence", "therefore"], "whichever": ["and whichever is true", "and either way", "and in either case"], "arbitrary": ["was arbitrary", "is arbitrary"], "take": ["take"], "satisfying": ["satisfying", "such that"], "if": ["if"], "given": ["given"], "contradiction": ["contradiction"], "at": ["at"] }, "mistake_table": [{ "name": "layout", "entries": [{ "name": "first_line_indented", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "The first line of a proof should not be indented." }]] }, { "name": "illegal_indent", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_scope_creator", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "Indents should only occur after lines of the form 'If..' or 'Given...'." }]] }, { "name": "double_indent", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "addition", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_scope_creator", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "Only indent once after '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "'." }]] }, { "name": "missing_indent_given", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "After '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' the following lines in which you reason using the variable " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " should be indented. Then stop indenting once you reach a statement of the form '\u2200x.....' in which the " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " no longer occurs." }]] }, { "name": "missing_indent_assumption", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "After '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' the following lines in which you reason under the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " should be indented. Once you have proved some statement p assuming " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " then you can write an unindented line 'Hence " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "=>p'. Alternatively you can simply stop indenting if you no longer wish to use the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "missing_deindent_forall_0", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To prove " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " you need to start by writing 'Given " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "' and then start indenting your lines until you manage to prove " }, { "format": "expression", "content": { "top_operator_name": "entry", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ". After this you can write this line (which should not be indented)." }]] }, { "name": "incorrect_deindent_forall", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "We are still working under the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " and must stop doing so (for example by moving to a statement of the form " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "=>p) before we can leave the scope of " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " and introduce a for-all quantifier." }]] }, { "name": "missing_deindent_for_all_1", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "This line should no longer being indented (because we are no longer within the scope of " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ")." }]] }, { "name": "missing_deindent_for_all_2", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "This line should be indented one step less than the previous line (because it is no longer in the scope of " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ")." }]] }, { "name": "double_deindent_forall", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "We only reduce the level of indentation by one here; we are just leaving the scope of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "'." }]] }, { "name": "missing_deindent_implies_0", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To prove " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " you need to start by writing 'If " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "', then give a chain of reasoning (which should be indented) that ends with " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ". After that you can put this line (which should not be indented)." }]] }, { "name": "missing_deindent_not_0", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To prove " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " you need to start by writing 'If " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "' and then give a chain of reasoning (on indented lines) that ends with a contradiction. After that you are allowed to write this line (unindented)." }]] }, { "name": "incorrect_deindent", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You are still working withing the scope of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' and you need to stop doing so (typically be introducing a forall statement) before you can drop the assumption of " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ". Alternatively you could try changing the order of your 'Given...' and 'If...' lines." }]] }, { "name": "missing_deindent_1", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "Stop indenting at this point, because the truth of this line does not rely on the assumption of " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "missing_deindent_2", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "When writing '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' we reduce the level of indentation by one, to indicate that we are no longer making the assumption that " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "double_deindent_assumption", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You should only de-indent once here; we are dropping the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " but not that of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "double_deindent_given", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "Only deindent once here; we are dropping the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " but are still within the scope of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "'." }]] }, { "name": "illegal_first_line", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You can't have this as the first line of your proof" }]] }] }, { "name": "variables", "entries": [{ "name": "unspecified_variable", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "variables", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_initialized", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You haven't said where " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " comes from; if you want it to be arbitrary then add a preceding line saying 'Given " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "'; alternatively you might want to take a particular " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " witnessing some existential formula." }]] }, { "name": "inaccessible_variable", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "variables", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_accessible", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "The variable " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " was only specified within the scope of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper2", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' in line " }, { "format": "expression", "content": { "top_operator_name": "scoper2", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" } }, { "format": "string", "content": ", and so can only be used there. If you want it as an arbitrary variable again then write 'Given " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "'." }]] }, { "name": "incorrect_variable_forall", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "We originally took " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " as our arbitrary variable so this, rather than " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ", needs to be the one that we quantify out over." }]] }, { "name": "arbitrary_variable_clash", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_accessible", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "The variable " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " is already in use; chose a new variable to work with instead." }]] }, { "name": "variable_clash", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'exists_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_accessible", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You just know that there is some " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " such that " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "; you can't assume that it is the " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " we were previously discussing. Try using an entirely new variable in place of " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }] }, { "name": "logic", "entries": [{ "name": "missing_antecedent", "occurs": { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_proven", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "boolean" }, "message": [[{ "format": "string", "content": "This line uses " }, { "format": "expression", "content": { "top_operator_name": "min", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_proven", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "formula" } }, { "format": "string", "content": ", so you need to have an earlier line proving that " }, { "format": "expression", "content": { "top_operator_name": "min", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_proven", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "formula" } }, { "format": "string", "content": " is true." }]] }, { "name": "inaccessible_antecedent", "occurs": { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_available", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "boolean" }, "message": [[{ "format": "string", "content": "You are using here that " }, { "format": "expression", "content": { "top_operator_name": "min", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_available", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "formula" } }, { "format": "string", "content": ", which was only proved within the context of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "prover", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "min", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_available", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' and so is no longer available to you." }]] }, { "name": "missing_false", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "needs_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "This line assumes you have already proved a contradiction, which is not the case." }]] }, { "name": "inaccessible_false", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "needs_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in_scope", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "It is true that you proved a contradiction in line " }, { "format": "expression", "content": { "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" } }, { "format": "string", "content": " but this line is no longer available to you." }]] }, { "name": "for_all_incorrect_conclusion", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "substitute", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'p'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'x'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'a'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To conclude this you need to have shown " }, { "format": "expression", "content": { "top_operator_name": "substitute", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'p'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'x'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'a'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " on the immediately preceding line." }]] }, { "name": "implies_incorrect_conclusion", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To deduce '" }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "' you need to have proved " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " in the immediately preceding line (under the assumption of " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ")." }]] }, { "name": "implies_incorrect_assumption", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You started with the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " not " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ", so you must conclude 'Hence " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "=>" }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "'." }]] }, { "name": "not_incorrect_conclusion", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To prove the statement " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " you need to start by assuming " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " is true and prove a contradiction. Then write this line immediately afterwards." }]] }, { "name": "not_incorrect_assumption", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "We started with the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ", so what we have in fact shown is ~" }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "or_missing_antecedent_both", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To conclude that " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " follows from " }, { "format": "expression", "content": { "top_operator_name": "entry", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " you need to show that it follows if either " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " or " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " is true. Write 'If " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "' and then give an (indented) series of lines that deduce " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " (or a contradiction) from " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ". Then separately write 'If " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "' and prove " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " (or a contradiction) under this assumption." }]] }, { "name": "or_missing_antecedent_left", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You have proved that " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " follows if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " holds; you need to also prove it follows if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " holds." }]] }, { "name": "or_missing_antecedent_right", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You have proved that " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " follows if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " holds; you need to also prove it follows if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " holds." }]] }, { "name": "or_inaccessible_antecedent_left", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_available_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You proved that if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " then " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ", but this was in the context of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "', which we have since left." }]] }, { "name": "or_inaccessible_antecedent_right", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_available_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You proved that if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " then " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ", but this was in the context of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "', which we have since left." }]] }] }, { "name": "target", "entries": [{ "name": "last_line_indented_assumption", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "num_lines", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "The last line of a proof should not be indented; you need to prove that the given formulas holds just from the original assumptions, not the additional assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "last_line_indented_given", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "num_lines", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "The last line of a proof should not be indented; you should have ceased working within the scope of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' by this point, typically by introducing a forall statement." }]] }, { "name": "last_line_not_target", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "num_lines", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "target", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "We are trying to prove " }, { "format": "expression", "content": { "top_operator_name": "target", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "formula" } }, { "format": "string", "content": " so it should be given by the final line of the proof." }]] }] }], "control_functions": [{ "name": "variable", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "formula" }], "definition": { "top_operator_name": "entry", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "variables", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "formula" }, "description": "The free variable occurring in line n (if any)" }, { "name": "result", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "formula" }], "definition": { "top_operator_name": "entry", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "formula" }, "description": "The result of line n (if any)" }, { "name": "is_scope_creator", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether the line after this one should be indented" }, { "name": "scoper", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "integer" }], "definition": { "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" }, "description": "The most recent line (not including n) in whose scope line n is" }, { "name": "scoper2", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "integer" }], "definition": { "top_operator_name": "if", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "is_scope_creator", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, "description": "The most recent line (including n) in whose scope line n is" }, { "name": "is_in_scope", "variables": [{ "top_kind_name": "variable", "top_operator_name": "k", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_scope_creator", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether the results and variables of line k<=n are accessible to line n" }, { "name": "is_initializer", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'exists_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'take'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether line n initializes its variables" }, { "name": "initializes", "variables": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "variables", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether line n initializes variable x" }, { "name": "is_initialized", "variables": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "question_variables", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "initializes", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether variable x is initialized by line n (this does not mean it is legal to use, as it may be out of scope)." }, { "name": "initializer", "variables": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "integer" }], "definition": { "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "initializes", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" }, "description": "The most recent line before n that initializes x" }, { "name": "is_accessible", "variables": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "question_variables", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "initializes", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in_scope", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether variable x is initialized and still available by line n" }, { "name": "is_arbitrary", "variables": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, "description": "Whether variable x is arbitrary at line n" }, { "name": "is_proven", "variables": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "assumptions", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether there is a line before n that proves R (again, it may still be out of scope and thus unusable)." }, { "name": "prover", "variables": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "integer" }], "definition": { "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" }, "description": "The most recent line before n that proves R." }, { "name": "is_available", "variables": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "assumptions", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in_scope", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether R is available to use by line n" }, { "name": "yields_false", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate_false'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether line n proves a contradiction" }, { "name": "needs_false", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'contradiction_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, "description": "Whether line n assumes a contradiction has been proved" }, { "name": "yields_implication", "variables": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "m", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "S", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "addition", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether line n is a proof of S under the assumption of R, made on line m" }, { "name": "yields_implies_false", "variables": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "m", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "addition", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether line n is a proof of contradiction under the assumption of R, made on line m" }, { "name": "is_available_implication", "variables": [{ "top_kind_name": "variable", "top_operator_name": "A", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "B", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "B", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }, "description": "Whether there is a proof of B under the assumption of A available at line n" }, { "name": "is_available_implies_false", "variables": [{ "top_kind_name": "variable", "top_operator_name": "A", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "yields_implies_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }, "description": "Whether there is a proof of contradiction under the assumption of A available at line n" }] };
// ^^Paste generated code above this line^^
exports.default = LOGIC_PROOF_DEFAULT_QUESTION_DATA;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/generatedParser.ts":
/*!*************************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/generatedParser.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var logicProofParser = (function () {
    /*
     * Generated by PEG.js 0.7.0.
     *
     * http://pegjs.majda.cz/
     */
    function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
        return '"' + s
            .replace(/\\/g, '\\\\') // backslash
            .replace(/"/g, '\\"') // closing quote character
            .replace(/\x08/g, '\\b') // backspace
            .replace(/\t/g, '\\t') // horizontal tab
            .replace(/\n/g, '\\n') // line feed
            .replace(/\f/g, '\\f') // form feed
            .replace(/\r/g, '\\r') // carriage return
            .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
            + '"';
    }
    var result = {
        /*
         * Parses the input with a generated parser. If the parsing is successfull,
         * returns a value explicitly or implicitly specified by the grammar from
         * which the parser was generated (see |PEG.buildParser|). If the parsing is
         * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
         */
        parse: function (input, startRule) {
            var parseFunctions = {
                "expressionTemplate": parse_expressionTemplate,
                "booleanTemplate": parse_booleanTemplate,
                "substitution": parse_substitution,
                "elementTemplate": parse_elementTemplate,
                "variableTemplate": parse_variableTemplate,
                "listOfBooleanTemplates": parse_listOfBooleanTemplates,
                "commaThenBooleanTemplate": parse_commaThenBooleanTemplate,
                "expressionTemplate2": parse_expressionTemplate2,
                "booleanTemplate2": parse_booleanTemplate2,
                "formulaLHS": parse_formulaLHS,
                "listOfVariables": parse_listOfVariables,
                "commaThenVariable": parse_commaThenVariable,
                "expression": parse_expression,
                "listOfExpressions": parse_listOfExpressions,
                "commaThenExpression": parse_commaThenExpression,
                "iffSymbol": parse_iffSymbol,
                "impliesSymbol": parse_impliesSymbol,
                "forAllSymbol": parse_forAllSymbol,
                "existsSymbol": parse_existsSymbol,
                "andSymbol": parse_andSymbol,
                "orSymbol": parse_orSymbol,
                "notSymbol": parse_notSymbol,
                "equalsSymbol": parse_equalsSymbol,
                "lessThanOrEqualsSymbol": parse_lessThanOrEqualsSymbol,
                "greaterThanOrEqualsSymbol": parse_greaterThanOrEqualsSymbol,
                "lessThanSymbol": parse_lessThanSymbol,
                "greaterThanSymbol": parse_greaterThanSymbol,
                "notEqualsSymbol": parse_notEqualsSymbol,
                "membershipSymbol": parse_membershipSymbol,
                "addition": parse_addition,
                "subtraction": parse_subtraction,
                "multiplication": parse_multiplication,
                "division": parse_division,
                "exponentiation": parse_exponentiation,
                "iffFormula": parse_iffFormula,
                "impliesFormula": parse_impliesFormula,
                "quantifierFormula": parse_quantifierFormula,
                "forAllFormula": parse_forAllFormula,
                "existsFormula": parse_existsFormula,
                "boundedForAllFormula": parse_boundedForAllFormula,
                "boundedExistsFormula": parse_boundedExistsFormula,
                "orFormula": parse_orFormula,
                "andFormula": parse_andFormula,
                "andRHS": parse_andRHS,
                "unaryFormula": parse_unaryFormula,
                "notFormula": parse_notFormula,
                "notRHS": parse_notRHS,
                "infixRelationFormula": parse_infixRelationFormula,
                "infixRelationName": parse_infixRelationName,
                "boundableInfixRelationName": parse_boundableInfixRelationName,
                "infixRelationRHS": parse_infixRelationRHS,
                "additionArgument": parse_additionArgument,
                "additionRHS": parse_additionRHS,
                "subtractionArgument": parse_subtractionArgument,
                "subtractionRHS": parse_subtractionRHS,
                "multiplicationArgument": parse_multiplicationArgument,
                "multiplicationRHS": parse_multiplicationRHS,
                "divisionArgument": parse_divisionArgument,
                "divisionRHS": parse_divisionRHS,
                "exponentiationArgument": parse_exponentiationArgument,
                "exponentiationRHS": parse_exponentiationRHS,
                "reducedArgument": parse_reducedArgument,
                "bracketExpression": parse_bracketExpression,
                "prefixFunction": parse_prefixFunction,
                "rangedFunction": parse_rangedFunction,
                "constant": parse_constant,
                "string": parse_string,
                "variable": parse_variable,
                "name": parse_name
            };
            if (startRule !== undefined) {
                if (parseFunctions[startRule] === undefined) {
                    throw new Error("Invalid rule name: " + quote(startRule) + ".");
                }
            }
            else {
                startRule = "expression";
            }
            var pos = 0;
            var reportFailures = 0;
            var rightmostFailuresPos = 0;
            var rightmostFailuresExpected = [];
            var cache = {};
            function padLeft(input, padding, length) {
                var result = input;
                var padLength = length - input.length;
                for (var i = 0; i < padLength; i++) {
                    result = padding + result;
                }
                return result;
            }
            function escape(ch) {
                var charCode = ch.charCodeAt(0);
                var escapeChar;
                var length;
                if (charCode <= 0xFF) {
                    escapeChar = 'x';
                    length = 2;
                }
                else {
                    escapeChar = 'u';
                    length = 4;
                }
                return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
            }
            function matchFailed(failure) {
                if (pos < rightmostFailuresPos) {
                    return;
                }
                if (pos > rightmostFailuresPos) {
                    rightmostFailuresPos = pos;
                    rightmostFailuresExpected = [];
                }
                rightmostFailuresExpected.push(failure);
            }
            function parse_expressionTemplate() {
                var cacheKey = "expressionTemplate@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_variableTemplate();
                if (result0 === null) {
                    result0 = parse_elementTemplate();
                    if (result0 === null) {
                        result0 = parse_booleanTemplate();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_booleanTemplate() {
                var cacheKey = "booleanTemplate@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_expression();
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_substitution();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_substitution();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, expression, subs) {
                        return {
                            expression: expression,
                            substitutions: subs,
                            type: 'boolean',
                        };
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_substitution() {
                var cacheKey = "substitution@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3, result4;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 91) {
                    result0 = "[";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"[\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        if (input.substr(pos, 2) === "->") {
                            result2 = "->";
                            pos += 2;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"->\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_expression();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos) === 93) {
                                    result4 = "]";
                                    pos++;
                                }
                                else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"]\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                }
                                else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, from, to) {
                        var output = {};
                        output[from.top_operator_name] = to;
                        return output;
                    })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_elementTemplate() {
                var cacheKey = "elementTemplate@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 2) === "{{") {
                    result0 = "{{";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"{{\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_additionArgument();
                    if (result1 !== null) {
                        if (input.substr(pos, 10) === "|element}}") {
                            result2 = "|element}}";
                            pos += 10;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"|element}}\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, element) {
                        return {
                            expression: element,
                            substitutions: [],
                            type: 'element',
                        };
                    })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_variableTemplate() {
                var cacheKey = "variableTemplate@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 2) === "{{") {
                    result0 = "{{";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"{{\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        if (input.substr(pos, 11) === "|variable}}") {
                            result2 = "|variable}}";
                            pos += 11;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"|variable}}\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, variable) {
                        return {
                            expression: variable,
                            substitutions: [],
                            type: 'element',
                            kind: 'variable'
                        };
                    })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_listOfBooleanTemplates() {
                var cacheKey = "listOfBooleanTemplates@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_booleanTemplate();
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_commaThenBooleanTemplate();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_commaThenBooleanTemplate();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av, avList) {
                        var result = (av === '') ? [] : [av];
                        for (var i = 0; i < avList.length; i++) {
                            result.push(avList[i]);
                        }
                        return result;
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_commaThenBooleanTemplate() {
                var cacheKey = "commaThenBooleanTemplate@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 44) {
                    result0 = ",";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_booleanTemplate();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av) { return av; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_expressionTemplate2() {
                var cacheKey = "expressionTemplate2@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_elementTemplate();
                if (result0 === null) {
                    result0 = parse_variableTemplate();
                    if (result0 === null) {
                        result0 = parse_booleanTemplate2();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_booleanTemplate2() {
                var cacheKey = "booleanTemplate2@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 2) === "{{") {
                    result0 = "{{";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"{{\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_expression();
                    if (result1 !== null) {
                        result2 = [];
                        result3 = parse_substitution();
                        while (result3 !== null) {
                            result2.push(result3);
                            result3 = parse_substitution();
                        }
                        if (result2 !== null) {
                            if (input.substr(pos, 2) === "}}") {
                                result3 = "}}";
                                pos += 2;
                            }
                            else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"}}\"");
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, expression, subs) {
                        return {
                            expression: expression,
                            substitutions: subs,
                            type: 'boolean',
                        };
                    })(pos0, result0[1], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_formulaLHS() {
                var cacheKey = "formulaLHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_name();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 40) {
                        result1 = "(";
                        pos++;
                    }
                    else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_listOfVariables();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                                result3 = ")";
                                pos++;
                            }
                            else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, name, args) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: name,
                            arguments: args,
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_listOfVariables() {
                var cacheKey = "listOfVariables@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_variable();
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_commaThenVariable();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_commaThenVariable();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av, avList) {
                        var result = (av === '') ? [] : [av];
                        for (var i = 0; i < avList.length; i++) {
                            result.push(avList[i]);
                        }
                        return result;
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_commaThenVariable() {
                var cacheKey = "commaThenVariable@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 44) {
                    result0 = ",";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av) { return av; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_expression() {
                var cacheKey = "expression@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                result0 = parse_iffFormula();
                if (result0 !== null) {
                    result0 = (function (offset, a) { return a; })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_listOfExpressions() {
                var cacheKey = "listOfExpressions@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_expression();
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_commaThenExpression();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_commaThenExpression();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av, avList) {
                        var result = (av === '') ? [] : [av];
                        for (var i = 0; i < avList.length; i++) {
                            result.push(avList[i]);
                        }
                        return result;
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_commaThenExpression() {
                var cacheKey = "commaThenExpression@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 44) {
                    result0 = ",";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_expression();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av) { return av; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_iffSymbol() {
                var cacheKey = "iffSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.substr(pos, 3) === "<=>") {
                    result0 = "<=>";
                    pos += 3;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"<=>\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_impliesSymbol() {
                var cacheKey = "impliesSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.substr(pos, 2) === "=>") {
                    result0 = "=>";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"=>\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_forAllSymbol() {
                var cacheKey = "forAllSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 8704) {
                    result0 = "\u2200";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\u2200\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_existsSymbol() {
                var cacheKey = "existsSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 8707) {
                    result0 = "\u2203";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\u2203\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_andSymbol() {
                var cacheKey = "andSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 8743) {
                    result0 = "\u2227";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\u2227\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_orSymbol() {
                var cacheKey = "orSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 8744) {
                    result0 = "\u2228";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\u2228\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_notSymbol() {
                var cacheKey = "notSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 126) {
                    result0 = "~";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"~\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_equalsSymbol() {
                var cacheKey = "equalsSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.charCodeAt(pos) === 61) {
                    result0 = "=";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"=\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'equals'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_lessThanOrEqualsSymbol() {
                var cacheKey = "lessThanOrEqualsSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.substr(pos, 2) === "<=") {
                    result0 = "<=";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"<=\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'less_than_or_equals'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_greaterThanOrEqualsSymbol() {
                var cacheKey = "greaterThanOrEqualsSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.substr(pos, 2) === ">=") {
                    result0 = ">=";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\">=\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'greater_than_or_equals'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_lessThanSymbol() {
                var cacheKey = "lessThanSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.charCodeAt(pos) === 60) {
                    result0 = "<";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"<\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'less_than'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_greaterThanSymbol() {
                var cacheKey = "greaterThanSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.charCodeAt(pos) === 62) {
                    result0 = ">";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\">\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'greater_than'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_notEqualsSymbol() {
                var cacheKey = "notEqualsSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.substr(pos, 2) === "!=") {
                    result0 = "!=";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"!=\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'not_equals'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_membershipSymbol() {
                var cacheKey = "membershipSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.charCodeAt(pos) === 8712) {
                    result0 = "\u2208";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\u2208\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'is_in'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_addition() {
                var cacheKey = "addition@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 43) {
                    result0 = "+";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"+\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_subtraction() {
                var cacheKey = "subtraction@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 45) {
                    result0 = "-";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"-\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_multiplication() {
                var cacheKey = "multiplication@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 42) {
                    result0 = "*";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"*\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_division() {
                var cacheKey = "division@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 47) {
                    result0 = "/";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"/\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_exponentiation() {
                var cacheKey = "exponentiation@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 94) {
                    result0 = "^";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"^\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_iffFormula() {
                var cacheKey = "iffFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_impliesFormula();
                if (result0 !== null) {
                    result1 = parse_iffSymbol();
                    if (result1 !== null) {
                        result2 = parse_iffFormula();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_connective',
                            top_operator_name: 'iff',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_impliesFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_impliesFormula() {
                var cacheKey = "impliesFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_quantifierFormula();
                if (result0 !== null) {
                    result1 = parse_impliesSymbol();
                    if (result1 !== null) {
                        result2 = parse_impliesFormula();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_connective',
                            top_operator_name: 'implies',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_quantifierFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_quantifierFormula() {
                var cacheKey = "quantifierFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_orFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_forAllFormula() {
                var cacheKey = "forAllFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_forAllSymbol();
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 46) {
                            result2 = ".";
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\".\"");
                            }
                        }
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            result3 = parse_quantifierFormula();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'quantifier',
                            top_operator_name: 'for_all',
                            arguments: [right],
                            dummies: [left]
                        };
                    })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_existsFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_existsFormula() {
                var cacheKey = "existsFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_existsSymbol();
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 46) {
                            result2 = ".";
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\".\"");
                            }
                        }
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            result3 = parse_quantifierFormula();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'quantifier',
                            top_operator_name: 'exists',
                            arguments: [right],
                            dummies: [left]
                        };
                    })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_boundedForAllFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_boundedForAllFormula() {
                var cacheKey = "boundedForAllFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_forAllSymbol();
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        result2 = parse_boundableInfixRelationName();
                        if (result2 !== null) {
                            result3 = parse_additionArgument();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos) === 46) {
                                    result4 = ".";
                                    pos++;
                                }
                                else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\".\"");
                                    }
                                }
                                result4 = result4 !== null ? result4 : "";
                                if (result4 !== null) {
                                    result5 = parse_quantifierFormula();
                                    if (result5 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5];
                                    }
                                    else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                }
                                else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, k, relation, n, A) {
                        return {
                            top_kind_name: 'bounded_quantifier',
                            top_operator_name: 'bounded_for_all',
                            arguments: [{
                                    top_kind_name: 'binary_relation',
                                    top_operator_name: relation,
                                    arguments: [k, n],
                                    dummies: []
                                }, A],
                            dummies: [k]
                        };
                    })(pos0, result0[1], result0[2], result0[3], result0[5]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_boundedExistsFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_boundedExistsFormula() {
                var cacheKey = "boundedExistsFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_existsSymbol();
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        result2 = parse_boundableInfixRelationName();
                        if (result2 !== null) {
                            result3 = parse_additionArgument();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos) === 46) {
                                    result4 = ".";
                                    pos++;
                                }
                                else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\".\"");
                                    }
                                }
                                result4 = result4 !== null ? result4 : "";
                                if (result4 !== null) {
                                    result5 = parse_quantifierFormula();
                                    if (result5 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5];
                                    }
                                    else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                }
                                else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, k, relation, n, A) {
                        return {
                            top_kind_name: 'bounded_quantifier',
                            top_operator_name: 'bounded_exists',
                            arguments: [{
                                    top_kind_name: 'binary_relation',
                                    top_operator_name: relation,
                                    arguments: [k, n],
                                    dummies: []
                                }, A],
                            dummies: [k]
                        };
                    })(pos0, result0[1], result0[2], result0[3], result0[5]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_orFormula() {
                var cacheKey = "orFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_andFormula();
                if (result0 !== null) {
                    result1 = parse_orSymbol();
                    if (result1 !== null) {
                        result2 = parse_quantifierFormula();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_connective',
                            top_operator_name: 'or',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_andFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_andFormula() {
                var cacheKey = "andFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_unaryFormula();
                if (result0 !== null) {
                    result1 = parse_andSymbol();
                    if (result1 !== null) {
                        result2 = parse_andRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_connective',
                            top_operator_name: 'and',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_unaryFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_andRHS() {
                var cacheKey = "andRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_andFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_unaryFormula() {
                var cacheKey = "unaryFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_notFormula();
                if (result0 === null) {
                    result0 = parse_infixRelationFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_notFormula() {
                var cacheKey = "notFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_notSymbol();
                if (result0 !== null) {
                    result1 = parse_notRHS();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, right) {
                        return {
                            top_kind_name: 'unary_connective',
                            top_operator_name: 'not',
                            arguments: [right],
                            dummies: []
                        };
                    })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_notRHS() {
                var cacheKey = "notRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_unaryFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_infixRelationFormula() {
                var cacheKey = "infixRelationFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_additionArgument();
                if (result0 !== null) {
                    result1 = parse_infixRelationName();
                    if (result1 !== null) {
                        result2 = parse_infixRelationRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, name, right) {
                        return {
                            top_kind_name: 'binary_relation',
                            top_operator_name: name,
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[1], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_additionArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_infixRelationName() {
                var cacheKey = "infixRelationName@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_equalsSymbol();
                if (result0 === null) {
                    result0 = parse_lessThanOrEqualsSymbol();
                    if (result0 === null) {
                        result0 = parse_greaterThanOrEqualsSymbol();
                        if (result0 === null) {
                            result0 = parse_lessThanSymbol();
                            if (result0 === null) {
                                result0 = parse_greaterThanSymbol();
                                if (result0 === null) {
                                    result0 = parse_notEqualsSymbol();
                                    if (result0 === null) {
                                        result0 = parse_membershipSymbol();
                                    }
                                }
                            }
                        }
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_boundableInfixRelationName() {
                var cacheKey = "boundableInfixRelationName@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_lessThanOrEqualsSymbol();
                if (result0 === null) {
                    result0 = parse_lessThanSymbol();
                    if (result0 === null) {
                        result0 = parse_membershipSymbol();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_infixRelationRHS() {
                var cacheKey = "infixRelationRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_infixRelationFormula();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_additionArgument() {
                var cacheKey = "additionArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_subtractionArgument();
                if (result0 !== null) {
                    result1 = parse_addition();
                    if (result1 !== null) {
                        result2 = parse_additionRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: 'addition',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_subtractionArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_additionRHS() {
                var cacheKey = "additionRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_additionArgument();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_subtractionArgument() {
                var cacheKey = "subtractionArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_multiplicationArgument();
                if (result0 !== null) {
                    result1 = parse_subtraction();
                    if (result1 !== null) {
                        result2 = parse_subtractionRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: 'subtraction',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_multiplicationArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_subtractionRHS() {
                var cacheKey = "subtractionRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_subtractionArgument();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_multiplicationArgument() {
                var cacheKey = "multiplicationArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_divisionArgument();
                if (result0 !== null) {
                    result1 = parse_multiplication();
                    if (result1 !== null) {
                        result2 = parse_multiplicationRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: 'multiplication',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_divisionArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_multiplicationRHS() {
                var cacheKey = "multiplicationRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_multiplicationArgument();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_divisionArgument() {
                var cacheKey = "divisionArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_exponentiationArgument();
                if (result0 !== null) {
                    result1 = parse_division();
                    if (result1 !== null) {
                        result2 = parse_divisionRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: 'division',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_exponentiationArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_divisionRHS() {
                var cacheKey = "divisionRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_divisionArgument();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_exponentiationArgument() {
                var cacheKey = "exponentiationArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_reducedArgument();
                if (result0 !== null) {
                    result1 = parse_exponentiation();
                    if (result1 !== null) {
                        result2 = parse_exponentiationRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: 'exponentiation',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_reducedArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_exponentiationRHS() {
                var cacheKey = "exponentiationRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_exponentiationArgument();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_reducedArgument() {
                var cacheKey = "reducedArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_bracketExpression();
                if (result0 === null) {
                    result0 = parse_prefixFunction();
                    if (result0 === null) {
                        result0 = parse_constant();
                        if (result0 === null) {
                            result0 = parse_variable();
                        }
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_bracketExpression() {
                var cacheKey = "bracketExpression@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 40) {
                    result0 = "(";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"(\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_expression();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 41) {
                            result2 = ")";
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\")\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, e) { return e; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_prefixFunction() {
                var cacheKey = "prefixFunction@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_name();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 40) {
                        result1 = "(";
                        pos++;
                    }
                    else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_listOfExpressions();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                                result3 = ")";
                                pos++;
                            }
                            else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, name, args) {
                        return {
                            top_kind_name: 'prefix_function',
                            top_operator_name: name,
                            arguments: args,
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_rangedFunction();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_rangedFunction() {
                var cacheKey = "rangedFunction@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3, result4, result5, result6, result7;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_name();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 123) {
                        result1 = "{";
                        pos++;
                    }
                    else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"{\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_variable();
                        if (result2 !== null) {
                            result3 = parse_boundableInfixRelationName();
                            if (result3 !== null) {
                                result4 = parse_additionArgument();
                                if (result4 !== null) {
                                    if (input.charCodeAt(pos) === 124) {
                                        result5 = "|";
                                        pos++;
                                    }
                                    else {
                                        result5 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"|\"");
                                        }
                                    }
                                    if (result5 !== null) {
                                        result6 = parse_expression();
                                        if (result6 !== null) {
                                            if (input.charCodeAt(pos) === 125) {
                                                result7 = "}";
                                                pos++;
                                            }
                                            else {
                                                result7 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"}\"");
                                                }
                                            }
                                            if (result7 !== null) {
                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                            }
                                            else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        }
                                        else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    }
                                    else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                }
                                else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, name, k, relation, n, A) {
                        return {
                            top_kind_name: 'ranged_function',
                            top_operator_name: name,
                            arguments: [{
                                    top_kind_name: 'binary_relation',
                                    top_operator_name: relation,
                                    arguments: [k, n],
                                    dummies: []
                                }, A],
                            dummies: [k]
                        };
                    })(pos0, result0[0], result0[2], result0[3], result0[4], result0[6]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_constant() {
                var cacheKey = "constant@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1;
                var pos0;
                pos0 = pos;
                if (/^[0-9]/.test(input.charAt(pos))) {
                    result1 = input.charAt(pos);
                    pos++;
                }
                else {
                    result1 = null;
                    if (reportFailures === 0) {
                        matchFailed("[0-9]");
                    }
                }
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        if (/^[0-9]/.test(input.charAt(pos))) {
                            result1 = input.charAt(pos);
                            pos++;
                        }
                        else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[0-9]");
                            }
                        }
                    }
                }
                else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result0 = (function (offset, digits) {
                        return {
                            top_kind_name: 'constant',
                            top_operator_name: parseInt(digits.join(""), 10),
                            arguments: [],
                            dummies: [],
                            type: 'integer'
                        };
                    })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_string();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_string() {
                var cacheKey = "string@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 39) {
                    result0 = "'";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"'\"");
                    }
                }
                if (result0 !== null) {
                    result1 = [];
                    if (/^[a-zA-Z0-9_]/.test(input.charAt(pos))) {
                        result2 = input.charAt(pos);
                        pos++;
                    }
                    else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[a-zA-Z0-9_]");
                        }
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        if (/^[a-zA-Z0-9_]/.test(input.charAt(pos))) {
                            result2 = input.charAt(pos);
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[a-zA-Z0-9_]");
                            }
                        }
                    }
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 39) {
                            result2 = "'";
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"'\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, characters) {
                        return {
                            top_kind_name: 'constant',
                            top_operator_name: '\'' + characters.join('') + '\'',
                            arguments: [],
                            dummies: [],
                            type: 'string'
                        };
                    })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_variable() {
                var cacheKey = "variable@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                result0 = parse_name();
                if (result0 !== null) {
                    result0 = (function (offset, name) {
                        return {
                            top_kind_name: 'variable',
                            top_operator_name: name,
                            arguments: [],
                            dummies: []
                        };
                    })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_name() {
                var cacheKey = "name@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (/^[A-Za-z]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[A-Za-z]");
                    }
                }
                if (result0 !== null) {
                    result1 = [];
                    if (/^[A-Za-z0-9_]/.test(input.charAt(pos))) {
                        result2 = input.charAt(pos);
                        pos++;
                    }
                    else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[A-Za-z0-9_]");
                        }
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        if (/^[A-Za-z0-9_]/.test(input.charAt(pos))) {
                            result2 = input.charAt(pos);
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[A-Za-z0-9_]");
                            }
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, first, middle) {
                        return first + middle.join('');
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function cleanupExpected(expected) {
                expected.sort();
                var lastExpected = null;
                var cleanExpected = [];
                for (var i = 0; i < expected.length; i++) {
                    if (expected[i] !== lastExpected) {
                        cleanExpected.push(expected[i]);
                        lastExpected = expected[i];
                    }
                }
                return cleanExpected;
            }
            function computeErrorPosition() {
                /*
                 * The first idea was to use |String.split| to break the input up to the
                 * error position along newlines and derive the line and column from
                 * there. However IE's |split| implementation is so broken that it was
                 * enough to prevent it.
                 */
                var line = 1;
                var column = 1;
                var seenCR = false;
                for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
                    var ch = input.charAt(i);
                    if (ch === "\n") {
                        if (!seenCR) {
                            line++;
                        }
                        column = 1;
                        seenCR = false;
                    }
                    else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        line++;
                        column = 1;
                        seenCR = true;
                    }
                    else {
                        column++;
                        seenCR = false;
                    }
                }
                return { line: line, column: column };
            }
            var result = parseFunctions[startRule]();
            /*
             * The parser is now in one of the following three states:
             *
             * 1. The parser successfully parsed the whole input.
             *
             *    - |result !== null|
             *    - |pos === input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 2. The parser successfully parsed only a part of the input.
             *
             *    - |result !== null|
             *    - |pos < input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 3. The parser did not successfully parse any part of the input.
             *
             *   - |result === null|
             *   - |pos === 0|
             *   - |rightmostFailuresExpected| contains at least one failure
             *
             * All code following this comment (including called functions) must
             * handle these states.
             */
            if (result === null || pos !== input.length) {
                var offset = Math.max(pos, rightmostFailuresPos);
                var found = offset < input.length ? input.charAt(offset) : null;
                var errorPosition = computeErrorPosition();
                throw new this.SyntaxError(cleanupExpected(rightmostFailuresExpected), found, offset, errorPosition.line, errorPosition.column);
            }
            return result;
        },
        /* Returns the parser source code. */
        toSource: function () { return this._source; },
        SyntaxError: null
    };
    /* Thrown when a parser encounters a syntax error. */
    result.SyntaxError = function (expected, found, offset, line, column) {
        function buildMessage(expected, found) {
            var expectedHumanized, foundHumanized;
            switch (expected.length) {
                case 0:
                    expectedHumanized = "end of input";
                    break;
                case 1:
                    expectedHumanized = expected[0];
                    break;
                default:
                    expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                        + " or "
                        + expected[expected.length - 1];
            }
            foundHumanized = found ? quote(found) : "end of input";
            return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }
        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
    };
    result.SyntaxError.prototype = Error.prototype;
    return result;
})();
exports.default = logicProofParser;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/shared.ts":
/*!****************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/shared.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Components used by both the editor and reader of the
 *  LogicProof interaction.
 */
var generatedParser_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/generatedParser.ts */ "./extensions/interactions/LogicProof/static/js/generatedParser.ts"));
var logicProofShared = (function () {
    // Used by parseLineString() to limit the number of possible parsings of a
    // line (or line template) considered.
    var MAX_NUM_PARSINGS_PERMITTED = 1000;
    // Used by assignTypesToExpressionArray() to limit the number of possible
    // typings of an expression considered.
    var MAX_NUM_TYPINGS_PERMITTED = 1000;
    // ERROR-HANDLING
    // UserErrors have codes that refer to entries in the errorDictionary (which
    // is either logicProofData.BASE_GENERAL_MESSAGES or
    // logicProofTeacher.TEACHER_ERROR_MESSAGES), from which a human-readable
    // message can be constructed.
    var UserError = function (code, parameters) {
        this.name = 'UserError';
        this.code = code;
        this.parameters = parameters || {};
    };
    // These errors already have messages which are user-readable.
    var PreRenderedUserError = function (messages, code) {
        this.name = 'PreRenderedUserError';
        this.messages = messages;
        this.code = code;
    };
    // TODO(Jacob): Make these errors prototype from Error()
    /** Converts a message template into a string to show to the user.
     * @param messageTemplate: a GeneralMessageTemplate object that determines how
     * to build the string describing an error.
     * @param parameterFormats: a dictionary of GeneralMessageParameters, which
     *        specify the format of the parameter in question (e.g. 'string').
     * @param parameters: a dictionary giving the values of the parameters for
     *        this particular instance of the message.
     * @param language: the relevant Language.
     * @result a user-readable string.
     */
    var renderGeneralMessage = function (messageTemplate, parameterFormats, parameters, language) {
        var message = '';
        for (var i = 0; i < messageTemplate.length; i++) {
            if (messageTemplate[i].isFixed) {
                message += messageTemplate[i].content;
            }
            else {
                var parameterFormat = parameterFormats[messageTemplate[i].content].format;
                var parameter = parameters[messageTemplate[i].content];
                switch (parameterFormat) {
                    case 'string':
                        message += parameter;
                        break;
                    case 'expression':
                        message += displayExpression(parameter, language.operators);
                        break;
                    default:
                        throw Error('Unknown format ' + parameterFormat +
                            ' sent to renderGeneralMessage().');
                }
            }
        }
        return message;
    };
    /**
     * @param {UserError} error - a UserError object
     * @param {object} errorDictionary - a dictionary keyed by error codes for
     *        each of which it provides a description of possible ways to display
     *        the error to the user, one of which will be chosen at random.
     * @param {Language} language - the relevant Language
     * @return {string} A string to show to the user describing what went wrong.
     */
    var renderError = function (error, errorDictionary, language) {
        if (error.name === 'UserError') {
            if (!errorDictionary.hasOwnProperty(error.code)) {
                throw new Error('Unknown error code ' + error.code + ' sent to renderError().');
            }
            var messageTemplates = errorDictionary[error.code].templates;
            var messageTemplate = messageTemplates[Math.floor((Math.random() * messageTemplates.length))];
            return renderGeneralMessage(messageTemplate, errorDictionary[error.code].parameters, error.parameters, language);
        }
        else if (error.name === 'PreRenderedUserError') {
            return error.messages[Math.floor((Math.random() * error.messages.length))];
        }
        else {
            throw error;
        }
    };
    // DISPLAY
    /**
     * @param {Expression} expression - an Expression, which is to be displayed
     * @param {object} operators - provides the symbols keys of the operators so
     *        that we we know e.g. 'for_all' should be displayed using '@'.
     * @return {string} A string representing the expression that can be shown to
     *        the user.
     */
    var displayExpression = function (expression, operators) {
        return displayExpressionHelper(expression, operators, 0);
    };
    /**
     * Recursive helper for displayExpression().
     *
     * @param {Expression} expression - an Expression, which is to be displayed
     * @param {object} operators - provides the symbols keys of the operators so
     *        that we we know e.g. 'for_all' should be displayed using '@'.
     * @param {int} desirabilityOfBrackets - used internally to determine whether
     *        to surround the formula with brackets.
     * @return {string} A string representing the expression.
     */
    var displayExpressionHelper = function (expression, operators, desirabilityOfBrackets) {
        if (desirabilityOfBrackets === void 0) { desirabilityOfBrackets = 0; }
        var desirabilityOfBracketsBelow = (expression.top_kind_name === 'binary_connective' ||
            expression.top_kind_name === 'binary_relation' ||
            expression.top_kind_name === 'binary_function') ? 2 : (expression.top_kind_name === 'unary_connective' ||
            expression.top_kind_name === 'quantifier') ? 1 : 0;
        var processedArguments = [];
        var processedDummies = [];
        for (var i = 0; i < expression.arguments.length; i++) {
            processedArguments.push(displayExpressionHelper(expression.arguments[i], operators, desirabilityOfBracketsBelow));
        }
        for (var i = 0; i < expression.dummies.length; i++) {
            processedDummies.push(displayExpressionHelper(expression.dummies[i], operators, desirabilityOfBracketsBelow));
        }
        var symbol = (!operators.hasOwnProperty(expression.top_operator_name)) ?
            expression.top_operator_name :
            (!operators[expression.top_operator_name].hasOwnProperty('symbols')) ?
                expression.top_operator_name :
                operators[expression.top_operator_name].symbols[0];
        var output = null;
        if (expression.top_kind_name === 'binary_connective' ||
            expression.top_kind_name === 'binary_relation' ||
            expression.top_kind_name === 'binary_function') {
            return (desirabilityOfBrackets > 0 ?
                '(' + processedArguments.join(symbol) + ')' :
                processedArguments.join(symbol));
        }
        else if (expression.top_kind_name === 'unary_connective') {
            output = symbol + processedArguments[0];
            return (desirabilityOfBrackets === 2) ? '(' + output + ')' : output;
        }
        else if (expression.top_kind_name === 'quantifier') {
            output = symbol + processedDummies[0] + '.' + processedArguments[0];
            return (desirabilityOfBrackets === 2) ? '(' + output + ')' : output;
        }
        else if (expression.top_kind_name === 'bounded_quantifier') {
            output = symbol + processedArguments[0] + '.' + processedArguments[1];
            return (desirabilityOfBrackets === 2) ? '(' + output + ')' : output;
        }
        else if (expression.top_kind_name === 'prefix_relation' ||
            expression.top_kind_name === 'prefix_function') {
            return symbol + '(' + processedArguments.join(',') + ')';
        }
        else if (expression.top_kind_name === 'ranged_function') {
            return (symbol + '{' + processedArguments[0] + ' | ' + processedArguments[1] +
                '}');
        }
        else if (expression.top_kind_name === 'atom' ||
            expression.top_kind_name === 'constant' ||
            expression.top_kind_name === 'variable') {
            return symbol;
        }
        else {
            throw Error('Unknown kind ' + expression.top_kind_name +
                ' sent to displayExpression()');
        }
    };
    var displayExpressionArray = function (expressionArray, operators) {
        var processedArray = [];
        for (var i = 0; i < expressionArray.length; i++) {
            processedArray.push(displayExpressionHelper(expressionArray[i], operators));
        }
        return processedArray.join(', ');
    };
    // PARSING
    /**
     * This function checks whether the string contains any symbol that occurs
     * in a member of the symbols key for some operator (these will be
     * symbols such as ∀, =, <).
     * @param {string} string - contains the characters we check
     * @param {object} operators - a dictionary of Operator objects
     * @param {boolean} isTemplate - denotes that the string represents a line
     *        template (which may have substitutions) and not just a line.
     * @return {boolean} true or false
     */
    var containsLogicalCharacter = function (string, operators, isTemplate) {
        var GENERAL_LOGICAL_CHARACTERS = '(),';
        var TEMPLATE_LOGICAL_CHARACTERS = '[->]{|}';
        if (containsCharacterFromArray(string, GENERAL_LOGICAL_CHARACTERS)) {
            return true;
        }
        if (isTemplate &&
            containsCharacterFromArray(string, TEMPLATE_LOGICAL_CHARACTERS)) {
            return true;
        }
        for (var key in operators) {
            if (operators[key].hasOwnProperty('symbols')) {
                for (var i = 0; i < operators[key].symbols.length; i++) {
                    // We check each character of a multi-character symbol in turn.
                    for (var j = 0; j < operators[key].symbols[i].length; j++) {
                        if (string.indexOf(operators[key].symbols[i][j]) !== -1) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    };
    /**
     * This function strips whitespace from within expressions, whilst using the
     * whitespace between expressions to split a line into an array of word /
     * expression strings.
     *  e.g. 'from p and q we have p ∧ q' will be converted to ['from', 'p',
     *   'and', 'q', 'we', 'have', 'p∧q'].
     * @param {string} inputString - the string from which whitespace is to be
     *        stripped.
     * @param {object} operators - a dictionary of the Operator objects usable in
     *        the line
     * @param {boolean} isTemplate - denotes that the string represents a line
     *        template (which may have substitutions) and not just a line.
     * @return {Array} A non-empty array of words and expressions (as strings).
     * @throws if the line is blank or contains an unknown character.
     */
    var preParseLineString = function (inputString, operators, isTemplate) {
        // The logical characters that may occur at the start and end of a formula
        // respectively. The unicode characters are 'for all' and 'exists'.
        var POSSIBLE_START_CHARS = '({\u2200\u2203~';
        var POSSIBLE_END_CHARS = ')}]';
        var POSSIBLE_NAME_CHARS = ('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 _');
        var _absorbsSpacesToTheLeft = function (character) {
            return containsLogicalCharacter(character, operators, isTemplate) &&
                !containsCharacter(POSSIBLE_START_CHARS, character);
        };
        var _absorbsSpacesToTheRight = function (character) {
            return (containsLogicalCharacter(character, operators, isTemplate) &&
                !containsCharacter(POSSIBLE_END_CHARS, character)) ||
                character === ' ';
        };
        var _isLegalCharacter = function (character) {
            return containsCharacter(POSSIBLE_NAME_CHARS, character) ||
                containsLogicalCharacter(character, operators, isTemplate);
        };
        var strippedString = '';
        for (var i = 0; i < inputString.length; i++) {
            if (!_isLegalCharacter(inputString[i])) {
                throw new UserError('illegal_symbol', {
                    symbol: inputString[i]
                });
            }
            // We keep all non-spaces, and all spaces that are absorbed neither by
            // characters to their left nor their right.
            if (inputString[i] !== ' ' ||
                (i === 0 || !_absorbsSpacesToTheRight(strippedString[strippedString.length - 1])) &&
                    (i === inputString.length - 1 || !_absorbsSpacesToTheLeft(inputString[i + 1]))) {
                strippedString += inputString[i];
            }
        }
        if (strippedString.replace(/ /g, '') === '') {
            throw new UserError('blank_line', {});
        }
        return strippedString.trim().split(' ');
    };
    /**
     * @param {string} inputString - written by the user - we will parse it.
     * @param {object} operators - the relevant operators, which are just needed
     *        for their symbols so we can identify whether the symbols the user
     *        is using are legitimate.
     * @param {object} vocabulary - a dictionary whose keys are phrases such as
     *        'have' whose entries are arrays of possible ways to write each
     *        phrase, for example ['have', 'we have']. We will attempt to match
     *        sections of the inputString to the ways of writing each phrase.
     * @param {boolean} isTemplate - if true, we parse the input as a
     *        LineTemplate; otherwise we parse it as a Line.
     * @return {*} A LineTemplate.reader_view if isTemplate === true, and a
     *         ProtoLine if isTemplate === false.
     * @throws If a section of the string cannot be identified as either a phrase
     *         or an expression then we throw an error that tries to best identify
     *         what the user intended and did wrong.
     */
    var parseLineString = function (inputString, operators, vocabulary, isTemplate) {
        if (isTemplate === void 0) { isTemplate = false; }
        var unparsedArray = preParseLineString(inputString, operators, isTemplate);
        // We compile all words occurring in the vocabulary, to help us identify
        // them in lines.
        var vocabularyWords = [];
        for (var key in vocabulary) {
            for (var i = 0; i < vocabulary[key].length; i++) {
                for (var j = 0; j < vocabulary[key][i].split(' ').length; j++) {
                    if (vocabularyWords.indexOf(vocabulary[key][i].split(' ')[j]) === -1) {
                        vocabularyWords.push(vocabulary[key][i].split(' ')[j]);
                    }
                }
            }
        }
        // The lth entry in this array will contain all parsings of the first
        // l-many elements of the unparsedArray.
        var partiallyParsedArrays = [[[]]];
        for (var i = 1; i <= unparsedArray.length; i++) {
            partiallyParsedArrays.push([]);
        }
        for (var i = 0; i < unparsedArray.length; i++) {
            // We have parsed the first i-many entries in the given unparsedArray,
            // and will now attempt to parse the next one.
            // This will only occur in pathological cases
            if (partiallyParsedArrays[i].length > MAX_NUM_PARSINGS_PERMITTED) {
                throw new UserError('too_many_parsings', {});
            }
            for (var j = i + 1; j <= unparsedArray.length; j++) {
                for (var key in vocabulary) {
                    for (var k = 0; k < vocabulary[key].length; k++) {
                        if (unparsedArray.slice(i, j).join(' ').toLowerCase() ===
                            vocabulary[key][k]) {
                            // We have identified the next (j-i)-many words together form a
                            // phrase in the vocabulary dictionary.
                            for (var l = 0; l < partiallyParsedArrays[i].length; l++) {
                                partiallyParsedArrays[j].push(partiallyParsedArrays[i][l].concat([{
                                        format: 'phrase',
                                        content: key
                                    }]));
                            }
                        }
                    }
                }
            }
            // If something is a known word then we do not attempt to parse it as an
            // expression. This is because any word can be regarded as an expression
            // (as a single atom) so otherwise we would end up with a large number of
            // spurious parsings. The exception is single-character words, because
            // e.g. 'a' could reasonably be either a word or the name of an atom.
            if (unparsedArray[i].length === 1 ||
                vocabularyWords.indexOf(unparsedArray[i].toLowerCase()) === -1) {
                // We attempt to parse this entry as an expression / expression template
                try {
                    var expression = generatedParser_ts_1.default.parse(unparsedArray[i], isTemplate ? 'expressionTemplate' : 'expression');
                    for (var j = 0; j < partiallyParsedArrays[i].length; j++) {
                        // We do not allow a line to have two expressions in a row. This is
                        // to allow the identification of typos: For example if the user
                        // types 'fron p∧q ...' then otherwise we would think that both
                        // 'fron' and 'p∧q' are expressions. We also do not attempt to
                        // parse a word as an expression if it is a vocabulary word, to
                        // avoid masses of silly attempts to parse the line.
                        if (i === 0 ||
                            partiallyParsedArrays[i][j][partiallyParsedArrays[i][j].length - 1].format === 'phrase') {
                            partiallyParsedArrays[i + 1].push(partiallyParsedArrays[i][j].concat([{
                                    format: 'expression',
                                    content: expression
                                }]));
                        }
                    }
                }
                catch (err) { }
            }
        }
        if (partiallyParsedArrays[unparsedArray.length].length > 0) {
            // We have succeeded in fully parsing
            return partiallyParsedArrays[unparsedArray.length];
        }
        else {
            // We identify the best attempts
            for (var i = unparsedArray.length; i >= 0; i--) {
                if (partiallyParsedArrays[i].length > 0) {
                    var numEntriesMatched = i;
                    break;
                }
            }
            // We return a description of the problem, based on one of the best
            // attempts.
            // NOTE: This is not guaranteed to correctly identify the mistake the
            // user made. It could do with improvement based on user feedback.
            // containsLogicalCharacter is used to guess if something is an
            // expression, but it is not always correct because expressions may
            // consist only of letters.
            var bestAttempt = partiallyParsedArrays[numEntriesMatched][0];
            if (numEntriesMatched === 0 ||
                bestAttempt[bestAttempt.length - 1].format === 'phrase') {
                var word = unparsedArray[numEntriesMatched];
                throw (vocabularyWords.indexOf(word) !== -1) ?
                    new UserError('unidentified_phrase_starting_at', {
                        word: word
                    }) :
                    new UserError('unidentified_word', {
                        word: word
                    });
            }
            else {
                var word1 = unparsedArray[numEntriesMatched - 1];
                var word2 = unparsedArray[numEntriesMatched];
                if (vocabularyWords.indexOf(word1) !== -1) {
                    throw new UserError('unidentified_phrase_starting_at', {
                        word: word1
                    });
                }
                else if (containsLogicalCharacter(word1, operators, isTemplate)) {
                    throw (vocabularyWords.indexOf(word2) !== -1) ?
                        new UserError('unidentified_phrase_starting_at', {
                            word: word2
                        }) :
                        containsLogicalCharacter(word2, operators, isTemplate) ?
                            new UserError('consecutive_expressions', {
                                word1: word1,
                                word2: word2
                            }) :
                            new UserError('unidentified_word', {
                                word: word2
                            });
                }
                else {
                    throw (vocabularyWords.indexOf(word2) !== -1) ?
                        new UserError('unidentified_phrase_starting_at', {
                            word: word2
                        }) :
                        containsLogicalCharacter(word2, operators, isTemplate) ?
                            new UserError('unidentified_word', {
                                word: word1
                            }) :
                            new UserError('unidentified_words', {
                                word1: word1,
                                word2: word2
                            });
                }
            }
        }
    };
    // TYPING ASSIGNMENT
    /**
     * This takes an array of TypingElements and converts it into an array of
     * types.
     * @param {Array.<Object>} types - an array of dictionaries of the form {
     *               type: the name of an available type ('boolean' or 'element')
     *               arbitrarily_many: boolean
     *            }
     *          where at most one member can have 'arbitrarily_many' set to
     *          true, signifying that any number of arguments of this type
     *          can occur here.
     * @param {int} desiredLength - the number of entries we would like to have.
     * @returns {array} an array of types with the right number of entries,
     *          derived from 'types'.
     * @throws if this is not possible.
     */
    var instantiateTypingElementArray = function (types, desiredLength) {
        var listOfTypes = [];
        for (var i = 0; i < types.length; i++) {
            listOfTypes.push(types[i].type);
            if (types[i].arbitrarily_many) {
                var indexWithArbitrarilyMany = i;
            }
        }
        if (indexWithArbitrarilyMany === undefined) {
            if (types.length === desiredLength) {
                return listOfTypes;
            }
            else {
                throw new UserError('wrong_num_inputs', {
                    num_needed: desiredLength
                });
            }
        }
        else {
            var output = [];
            if (types.length <= desiredLength + 1) {
                for (var i = 0; i < types.length; i++) {
                    if (i === indexWithArbitrarilyMany) {
                        for (var j = 0; j < desiredLength - types.length + 1; j++) {
                            output.push(listOfTypes[indexWithArbitrarilyMany]);
                        }
                    }
                    else {
                        output.push(listOfTypes[i]);
                    }
                }
                return output;
            }
            else {
                throw new UserError('not_enough_inputs', {
                    num_needed: desiredLength
                });
            }
        }
    };
    /**
     * This takes an (untyped) Expression, usually provided by the parser, and
     * returns a TypedExpression in which types have been added at each level.
     * @param {Expression} untypedExpression - the expression to be typed
     * @param {Array} possibleTopTypes - an array of types that the expression as
     *        a whole could have - each will be tried in turn.
     * @param {Language} language - the relevant language
     * @param {Array} newKindsPermitted - an array of kinds (e.g. 'variable',
     *        'constant') of which the user is allowed to create new operators.
     *        Any operator with a kind not in this list and that does not already
     *        occur in the language will cause an error.
     * @param {boolean} permitDuplicateDummyNames - if true the user can write
     *        e.g. ∀x.p even if x is already in use; if false they cannot.
     * @return {array} An array of dictionaries of the form: {
     *           typedExpression: A TypedExpression
     *           operators: the given language.operatorss together with any new
     *             operators that occurred in the expression.
     * @throws If a valid typing cannot be found this function will throw a
     *         UserError. The parameters of this error will contain an additional
     *         key 'amountTyped' that determines where the error occurred. e.g.
     *         [1,2,0] would indicate that there was a problem at the 0th input
     *         (dummy or argument) of the 2nd input of the 1st input of this
     *         expression. We return the typing attempt for which this  value is
     *         largest (in lexicographic ordering) as this is likely to be closest
     *         to what the user intended.
     */
    var assignTypesToExpression = function (untypedExpression, possibleTopTypes, language, newKindsPermitted, permitDuplicateDummyNames) {
        if (newKindsPermitted === void 0) { newKindsPermitted = ['constant', 'variable']; }
        if (permitDuplicateDummyNames === void 0) { permitDuplicateDummyNames = false; }
        var operators = language.operators;
        var _attemptTyping = function (topType, typingRule) {
            if (!operatorIsNew &&
                untypedExpression.top_kind_name !==
                    operators[untypedExpression.top_operator_name].kind) {
                throw new UserError('wrong_kind', {
                    operator: untypedExpression.top_operator_name,
                    expected_kind: operators[untypedExpression.top_operator_name].kind,
                    actual_kind: untypedExpression.top_kind_name,
                    amount_typed: []
                });
            }
            if (topType !== typingRule.output) {
                throw new UserError('wrong_type', {
                    operator: untypedExpression.top_operator_name,
                    expected_type: topType,
                    actual_type: typingRule.output,
                    amount_typed: []
                });
            }
            var _isNumber = function (n) {
                return !isNaN(parseFloat(n)) && isFinite(n);
            };
            var _isString = function (s) {
                return s[0] === '\'' && s[s.length - 1] === '\'';
            };
            if (language.types.hasOwnProperty('integer') &&
                _isNumber(untypedExpression.top_operator_name) &&
                untypedExpression.top_kind_name === 'constant' &&
                topType !== 'integer') {
                throw new UserError('wrong_type', {
                    operator: untypedExpression.top_operator_name,
                    expected_type: topType,
                    actual_type: 'integer',
                    amount_typed: []
                });
            }
            if (language.types.hasOwnProperty('string') &&
                _isString(untypedExpression.top_operator_name) &&
                untypedExpression.top_kind_name === 'constant' &&
                topType !== 'string') {
                throw new UserError('wrong_type', {
                    operator: untypedExpression.top_operator_name,
                    expected_type: topType,
                    actual_type: 'string',
                    amount_typed: []
                });
            }
            try {
                var argumentTypes = instantiateTypingElementArray(typingRule.arguments, untypedExpression.arguments.length);
            }
            catch (err) {
                err.parameters.operator = untypedExpression.top_operator_name;
                err.parameters.input_category = 'arguments';
                err.parameters.amount_typed = [];
                throw err;
            }
            try {
                var dummyTypes = instantiateTypingElementArray(typingRule.dummies, untypedExpression.dummies.length);
            }
            catch (err) {
                err.parameters.operator = untypedExpression.top_operator_name;
                err.parameters.input_category = 'dummies';
                err.parameters.amount_typed = [];
                throw err;
            }
            var updatedOperators = {};
            for (var key in operators) {
                updatedOperators[key] = operators[key];
            }
            if (operatorIsNew) {
                var _decorateTypes = function (types) {
                    var decoratedTypes = [];
                    for (var k = 0; k < types.length; k++) {
                        decoratedTypes.push({
                            type: types[k],
                            arbitrarily_many: false
                        });
                    }
                    return decoratedTypes;
                };
                updatedOperators[untypedExpression.top_operator_name] = {
                    kind: untypedExpression.top_kind_name,
                    typing: [{
                            arguments: _decorateTypes(argumentTypes),
                            dummies: _decorateTypes(dummyTypes),
                            output: topType
                        }]
                };
            }
            for (var n = 0; n < untypedExpression.dummies.length; n++) {
                if (!permitDuplicateDummyNames &&
                    updatedOperators.hasOwnProperty(untypedExpression.dummies[n].top_operator_name)) {
                    throw new UserError('duplicate_dummy_name', {
                        dummy: untypedExpression.dummies[n],
                        expression: untypedExpression,
                        amount_typed: []
                    });
                }
                else if (untypedExpression.dummies[n].top_kind_name !== 'variable') {
                    // The parser does not currently permit this to happen
                    throw new UserError('dummy_not_variable', {
                        dummy: untypedExpression.dummies[n],
                        expression: untypedExpression,
                        amount_typed: []
                    });
                }
            }
            return assignTypesToExpressionArray(untypedExpression.dummies.concat(untypedExpression.arguments), dummyTypes.concat(argumentTypes), {
                operators: updatedOperators,
                kinds: language.kinds,
                types: language.types
            }, newKindsPermitted, permitDuplicateDummyNames, untypedExpression.dummies.length);
        };
        var operatorIsNew = false;
        if (!operators.hasOwnProperty(untypedExpression.top_operator_name)) {
            if (newKindsPermitted.indexOf(untypedExpression.top_kind_name) === -1) {
                throw new UserError('unknown_operator', {
                    operator: untypedExpression.top_operator_name,
                    amount_typed: []
                });
            }
            else {
                operatorIsNew = true;
            }
        }
        var typingRules = (operatorIsNew) ?
            language.kinds[untypedExpression.top_kind_name].typing :
            operators[untypedExpression.top_operator_name].typing;
        var results = [];
        for (var i = 0; i < possibleTopTypes.length; i++) {
            for (var j = 0; j < typingRules.length; j++) {
                try {
                    var newAttempts = _attemptTyping(possibleTopTypes[i], typingRules[j]);
                    for (var k = 0; k < newAttempts.length; k++) {
                        var typedDummies = [];
                        for (var l = 0; l < untypedExpression.dummies.length; l++) {
                            typedDummies.push(newAttempts[k].typedArray[l]);
                            // These dummy variables should not be available outside this
                            // part of the untypedExpression.
                            if (!operators.hasOwnProperty(untypedExpression.dummies[l].top_operator_name)) {
                                delete newAttempts[k].operators[untypedExpression.dummies[l].top_operator_name];
                            }
                        }
                        var typedArguments = [];
                        for (var m = untypedExpression.dummies.length; m < untypedExpression.dummies.length +
                            untypedExpression.arguments.length; m++) {
                            typedArguments.push(newAttempts[k].typedArray[m]);
                        }
                        results.push({
                            typedExpression: {
                                top_operator_name: untypedExpression.top_operator_name,
                                top_kind_name: untypedExpression.top_kind_name,
                                arguments: typedArguments,
                                dummies: typedDummies,
                                type: possibleTopTypes[i]
                            },
                            operators: newAttempts[k].operators
                        });
                    }
                }
                catch (err) {
                    if (bestAttemptSoFar !== undefined &&
                        !bestAttemptSoFar.hasOwnProperty('parameters')) {
                        throw bestAttemptSoFar;
                    }
                    if (bestAttemptSoFar === undefined ||
                        greaterThanInLex(err.parameters.amount_typed, bestAttemptSoFar.parameters.amount_typed)) {
                        var bestAttemptSoFar = err;
                    }
                }
            }
        }
        if (results.length > 0) {
            return results;
        }
        else {
            throw bestAttemptSoFar;
        }
    };
    /** Companion function to assignTypesToExpression, with the following
     * modifications:
     * @param untypedArray: an array of expressions to type
     *  @param topTypes: an array of types that the expressions in the array must
     *        have (only one option for each).
     * @numDummies: the number of elements in the array (from the start) that are
     *              dummies rather than arguments.
     * @result: {
     *            typedArray: an array of TypedExpressions
     *            operators: the updated list of operators
     *          }
     * @raises: as before
     */
    var assignTypesToExpressionArray = function (untypedArray, topTypes, language, newKindsPermitted, isTemplate, numDummies) {
        if (newKindsPermitted === void 0) { newKindsPermitted = ['constant', 'variable']; }
        if (isTemplate === void 0) { isTemplate = false; }
        if (numDummies === void 0) { numDummies = 0; }
        var partiallyTypedArrays = [[[]]];
        var partiallyUpdatedOperators = [[{}]];
        for (var key in language.operators) {
            partiallyUpdatedOperators[0][0][key] = language.operators[key];
        }
        for (var i = 1; i <= untypedArray.length; i++) {
            partiallyTypedArrays.push([]);
            partiallyUpdatedOperators.push([]);
        }
        for (var i = 0; i < untypedArray.length; i++) {
            // This will only happen in pathological cases.
            if (partiallyTypedArrays[i].length > MAX_NUM_TYPINGS_PERMITTED) {
                throw new UserError('too_many_typings', {});
            }
            for (var j = 0; j < partiallyTypedArrays[i].length; j++) {
                // Dummies are always allowed to have previously unseen names
                var newKindsPermittedHere = (i < numDummies) ?
                    newKindsPermitted.concat(['variable']) :
                    newKindsPermitted;
                try {
                    var newResults = assignTypesToExpression(untypedArray[i], [topTypes[i]], {
                        operators: partiallyUpdatedOperators[i][j],
                        kinds: language.kinds,
                        types: language.types
                    }, newKindsPermittedHere, isTemplate);
                    for (var k = 0; k < newResults.length; k++) {
                        partiallyTypedArrays[i + 1].push(partiallyTypedArrays[i][j].concat([
                            newResults[k].typedExpression
                        ]));
                        partiallyUpdatedOperators[i + 1].push(newResults[k].operators);
                    }
                }
                catch (err) {
                    if (!err.hasOwnProperty('parameters')) {
                        throw err;
                    }
                    var amountTyped = [i].concat(err.parameters.amount_typed);
                    if (bestAttemptSoFar === undefined ||
                        greaterThanInLex(amountTyped, bestAttemptSoFar.parameters.amount_typed)) {
                        err.parameters.amount_typed = amountTyped;
                        var bestAttemptSoFar = err;
                    }
                }
            }
        }
        var fullyTypedArrays = partiallyTypedArrays[untypedArray.length];
        var fullyUpdatedOperatorss = partiallyUpdatedOperators[untypedArray.length];
        if (fullyTypedArrays.length > 0) {
            var result = [];
            for (var i = 0; i < fullyTypedArrays.length; i++) {
                result.push({
                    typedArray: fullyTypedArrays[i],
                    operators: fullyUpdatedOperatorss[i]
                });
            }
            return result;
        }
        else {
            throw bestAttemptSoFar;
        }
    };
    // UTILITIES
    // Expressions with different dummy variables are considered different
    var checkExpressionsAreEqual = function (expression1, expression2) {
        if (expression1.top_kind_name !== expression2.top_kind_name ||
            expression1.top_operator_name !== expression2.top_operator_name ||
            expression1.arguments.length !== expression2.arguments.length ||
            expression1.dummies.length !== expression2.dummies.length) {
            return false;
        }
        if (expression1.hasOwnProperty('type')) {
            if (expression1.type !== expression2.type) {
                return false;
            }
        }
        for (var i = 0; i < expression1.arguments.length + expression1.dummies.length; i++) {
            if (!checkExpressionsAreEqual((expression1.arguments.concat(expression1.dummies))[i], (expression2.arguments.concat(expression2.dummies))[i])) {
                return false;
            }
        }
        return true;
    };
    var checkExpressionIsInSet = function (expression, set) {
        for (var i = 0; i < set.length; i++) {
            if (checkExpressionsAreEqual(expression, set[i])) {
                return true;
            }
        }
        return false;
    };
    var checkSetsOfExpressionsAreEqual = function (set1, set2) {
        for (var i = 0; i < set1.length; i++) {
            if (!checkExpressionIsInSet(set1[i], set2)) {
                return false;
            }
        }
        for (var i = 0; i < set2.length; i++) {
            if (!checkExpressionIsInSet(set2[i], set1)) {
                return false;
            }
        }
        return true;
    };
    // Returns a list of all the names of operators in an expression. kinds is an
    // array specifying which kinds of operators to return; if it is not supplied
    // then all are returned
    var getOperatorsFromExpression = function (expression, kinds) {
        if (kinds === void 0) { kinds = null; }
        var output = getOperatorsFromExpressionArray(expression.arguments.concat(expression.dummies), kinds);
        return (output.indexOf(expression.top_operator_name) === -1 &&
            (kinds === null || kinds.indexOf(expression.top_kind_name) !== -1)) ?
            output.concat([expression.top_operator_name]) :
            output;
    };
    var getOperatorsFromExpressionArray = function (array, kinds) {
        if (kinds === void 0) { kinds = null; }
        var output = [];
        for (var i = 0; i < array.length; i++) {
            var newOutput = getOperatorsFromExpression(array[i], kinds);
            for (var j = 0; j < newOutput.length; j++) {
                if (output.indexOf(newOutput[j]) === -1) {
                    output = output.concat([newOutput[j]]);
                }
            }
        }
        return output;
    };
    // The expression should be typed; returns the type of operator (or throws an
    // error if not found). Does not check for inconsistent typing.
    // NOTE: treats dummy variables like free ones.
    var seekTypeInExpression = function (expression, operator) {
        return operator === expression.top_operator_name ? expression.type :
            seekTypeInExpressionArray(expression.arguments.concat(expression.dummies), operator);
    };
    var seekTypeInExpressionArray = function (array, operator) {
        for (var i = 0; i < array.length; i++) {
            try {
                return seekTypeInExpression(array[i], operator);
            }
            catch (err) { }
        }
        throw UserError('unknown_typing_error', {
            array: array
        });
    };
    // Returns whether LHS is larger than RHS in lexicographic ordering
    var greaterThanInLex = function (LHS, RHS) {
        for (var i = 0; i < LHS.length; i++) {
            if (i >= RHS.length) {
                return true;
            }
            else if (LHS[i] > RHS[i]) {
                return true;
            }
            else if (LHS[i] < RHS[i]) {
                return false;
            }
        }
        return false;
    };
    // Checks if the string contains the character
    var containsCharacter = function (string, character) {
        return (string.indexOf(character) !== -1);
    };
    // Checks if the string contains some character from the array
    var containsCharacterFromArray = function (string, array) {
        for (var i = 0; i < array.length; i++) {
            if (string.indexOf(array[i]) !== -1) {
                return true;
            }
        }
        return false;
    };
    return {
        UserError: UserError,
        PreRenderedUserError: PreRenderedUserError,
        renderError: renderError,
        displayExpression: displayExpression,
        displayExpressionArray: displayExpressionArray,
        preParseLineString: preParseLineString,
        parseLineString: parseLineString,
        instantiateTypingElementArray: instantiateTypingElementArray,
        assignTypesToExpression: assignTypesToExpression,
        assignTypesToExpressionArray: assignTypesToExpressionArray,
        checkExpressionsAreEqual: checkExpressionsAreEqual,
        checkExpressionIsInSet: checkExpressionIsInSet,
        checkSetsOfExpressionsAreEqual: checkSetsOfExpressionsAreEqual,
        getOperatorsFromExpression: getOperatorsFromExpression,
        getOperatorsFromExpressionArray: getOperatorsFromExpressionArray,
        seekTypeInExpression: seekTypeInExpression,
        greaterThanInLex: greaterThanInLex
    };
})();
exports.default = logicProofShared;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/teacher.ts":
/*!*****************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/teacher.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Components used by the LogicProof interaction editor.
 */
var shared_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/shared.ts */ "./extensions/interactions/LogicProof/static/js/shared.ts"));
var data_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/data.ts */ "./extensions/interactions/LogicProof/static/js/data.ts"));
var generatedParser_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/generatedParser.ts */ "./extensions/interactions/LogicProof/static/js/generatedParser.ts"));
var logicProofTeacher = (function () {
    // QUESTION
    /**
     * A question is composed of the formulas the student may assume and the
     * formula she must prove; it will be different for each state in which the
     * interaction is used.
     * @param {string} assumptionsString - typed by the teacher to describe the
     *        assumptions the student is allowed to make.
     * @param {string} targetString - typed by the teacher to describe what the
     *        student is supposed to prove.
     * @param {object} vocabulary - A vocabulary object, the words from which the
     *        teacher is not allowed to use as function names.
     * @returns {
     *           operators: the operators occurring in the question including both
     *             ordinary ones (like ∧) and specific ones (like f).
     *           assumptions: an array of Expressions, which will form the
     *             'assumptions' key in the interaction.
     *           results: an array of length one built from the targetString which
     *             will form the 'results' key in the interaction.
     *         }
     * @throws If the given strings cannot be parsed, or are mal-typed or use
     *         words that are reserved for the vocabulary.
     */
    var buildQuestion = function (assumptionsString, targetString, vocabulary) {
        var assumptions = null;
        if (assumptionsString.replace(/ /g, '') === '') {
            assumptions = [];
        }
        else {
            try {
                assumptions = generatedParser_ts_1.default.parse(assumptionsString.replace(/ /g, ''), 'listOfExpressions');
            }
            catch (err) {
                var error = new shared_ts_1.default.UserError('unparseable', {
                    field: 'assumptions'
                });
                throw {
                    message: shared_ts_1.default.renderError(error, TEACHER_ERROR_MESSAGES, data_ts_1.default.BASE_STUDENT_LANGUAGE)
                };
            }
        }
        try {
            var target = generatedParser_ts_1.default.parse(targetString.replace(/ /g, ''), 'expression');
        }
        catch (err) {
            var error = new shared_ts_1.default.UserError('unparseable', {
                field: 'target'
            });
            throw {
                message: shared_ts_1.default.renderError(error, TEACHER_ERROR_MESSAGES, data_ts_1.default.BASE_STUDENT_LANGUAGE)
            };
        }
        // All assumptions and the target must be booleans.
        var expressions = [];
        var topTypes = [];
        for (var i = 0; i < assumptions.length; i++) {
            expressions.push(assumptions[i]);
            topTypes.push('boolean');
        }
        expressions.push(target);
        topTypes.push('boolean');
        try {
            var typing = shared_ts_1.default.assignTypesToExpressionArray(expressions, topTypes, data_ts_1.default.BASE_STUDENT_LANGUAGE, ['variable', 'constant', 'prefix_function']);
            if (typing.length > 1) {
                throw new shared_ts_1.default.UserError('ambiguous_typing', {});
            }
            requireNoVocabularyWordsUsed(expressions, data_ts_1.default.BASE_STUDENT_LANGUAGE.operators, vocabulary);
        }
        catch (err) {
            throw {
                message: shared_ts_1.default.renderError(err, TEACHER_ERROR_MESSAGES, data_ts_1.default.BASE_STUDENT_LANGUAGE)
            };
        }
        return {
            operators: typing[0].operators,
            assumptions: assumptions,
            results: [target]
        };
    };
    // Throws an error if the given expression array uses an operator that is not
    // in knownOperators and whose name has length greater than one and occurs as
    // a word in the vocabulary.
    var requireNoVocabularyWordsUsed = function (expressionArray, knownOperators, vocabulary) {
        var _isMember = function (entry, array) {
            return (array.indexOf(entry) !== -1);
        };
        var vocabularyWords = [];
        for (var key in vocabulary) {
            for (var i = 0; i < vocabulary[key].length; i++) {
                var wordArray = vocabulary[key][i].split(' ');
                for (var j = 0; j < wordArray.length; j++) {
                    if (!_isMember(wordArray[j], vocabularyWords)) {
                        vocabularyWords.push(wordArray[j]);
                    }
                }
            }
        }
        var operatorNamesToCheck = shared_ts_1.default.getOperatorsFromExpressionArray(expressionArray);
        for (var i = 0; i < operatorNamesToCheck.length; i++) {
            if (_isMember(operatorNamesToCheck[i], vocabularyWords) &&
                operatorNamesToCheck[i].length > 1 &&
                !knownOperators.hasOwnProperty(operatorNamesToCheck[i])) {
                throw new shared_ts_1.default.UserError('forbidden_word', {
                    word: operatorNamesToCheck[i]
                });
            }
        }
    };
    // DATA
    var TEACHER_ERROR_MESSAGES = {
        unparseable: {
            templates: [[{
                        isFixed: true,
                        content: 'The '
                    }, {
                        isFixed: false,
                        content: 'field'
                    }, {
                        isFixed: true,
                        content: ' could not be parsed.'
                    }]],
            parameters: {
                field: {
                    format: 'string'
                }
            }
        },
        ambiguous_typing: {
            templates: [[{
                        isFixed: true,
                        content: ('Unfortunately this cannot be accepted as it has multiple possible ' +
                            'typings.')
                    }]],
            parameters: {}
        },
        hidden_operator: {
            templates: [[{
                        isFixed: true,
                        content: 'It will not be possible to uniquely identify '
                    }, {
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' from a line of this form.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                }
            }
        },
        duplicate_function_name: {
            templates: [[{
                        isFixed: true,
                        content: 'The function '
                    }, {
                        isFixed: false,
                        content: 'function'
                    }, {
                        isFixed: true,
                        content: ' has already been defined.'
                    }]],
            parameters: {
                // eslint-disable-next-line quote-props
                'function': {
                    format: 'string'
                }
            }
        },
        function_name_is_n: {
            templates: [[{
                        isFixed: true,
                        content: ('You cannot use n as a function name; it is reserved to refer to ' +
                            'line numbers')
                    }]]
        },
        argument_is_function_name: {
            templates: [[{
                        isFixed: true,
                        content: '\''
                    }, {
                        isFixed: false,
                        content: 'argument'
                    }, {
                        isFixed: true,
                        content: ('\' is the name of a function and so cannot be used as an argument.')
                    }]],
            parameters: {
                argument: {
                    format: 'string'
                }
            }
        },
        duplicate_argument: {
            templates: [[{
                        isFixed: true,
                        content: 'The variables used as arguments must all be distinct'
                    }]],
            parameters: {
                argument: {
                    format: 'string'
                }
            }
        },
        unused_argument: {
            templates: [[{
                        isFixed: true,
                        content: 'The argument \''
                    }, {
                        isFixed: false,
                        content: 'argument'
                    }, {
                        isFixed: true,
                        content: '\' does not occur in the definition.'
                    }]],
            parameters: {
                argument: {
                    format: 'string'
                }
            }
        },
        unknown_typing_error: {
            templates: [[{
                        isFixed: true,
                        content: 'A typing error has occurred with '
                    }, {
                        isFixed: false,
                        content: 'expression'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                expression: {
                    format: 'expression'
                }
            }
        },
        'unmatched_{{': {
            templates: [[{
                        isFixed: true,
                        content: 'This has an unmatched {{.'
                    }]],
            parameters: {}
        },
        unparseable_fragment: {
            templates: [[{
                        isFixed: true,
                        content: 'It was not possible to parse '
                    }, {
                        isFixed: false,
                        content: 'fragment'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                fragment: {
                    format: 'string'
                }
            }
        },
        ambiguous_parsing: {
            templates: [[{
                        isFixed: true,
                        content: 'The '
                    }, {
                        isFixed: false,
                        content: 'field'
                    }, {
                        isFixed: true,
                        content: (' can be understood in more than one way. Try using fewer ' +
                            'single-character words and variables so that it is easier to ' +
                            'distinguish between the two.')
                    }]],
            parameters: {
                field: {
                    format: 'string'
                }
            }
        },
        illegal_symbol: {
            templates: [[{
                        isFixed: true,
                        content: 'The symbol '
                    }, {
                        isFixed: false,
                        content: 'symbol'
                    }, {
                        isFixed: true,
                        content: ' was not recognised.'
                    }]],
            parameters: {
                symbol: {
                    format: 'string'
                }
            }
        },
        blank_line: {
            templates: [[{
                        isFixed: true,
                        content: 'This line is blank.'
                    }]],
            parameters: {}
        },
        unidentified_word: {
            templates: [[{
                        isFixed: true,
                        content: 'We could not identify \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: ('\'; please make sure you are using vocabulary from the given ' +
                            'list, and don\'t have two consecutive expressions.')
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            }
        },
        unidentified_words: {
            templates: [[{
                        isFixed: true,
                        content: 'We could not identify either of \''
                    }, {
                        isFixed: false,
                        content: 'word1'
                    }, {
                        isFixed: true,
                        content: '\' or \''
                    }, {
                        isFixed: false,
                        content: 'word2'
                    }, {
                        isFixed: true,
                        content: ('\' as words; please make sure you are using vocabulary from ' +
                            'the given list, and don\'t have two consecutive expressions.')
                    }]],
            parameters: {
                word1: {
                    format: 'string'
                },
                word2: {
                    format: 'string'
                }
            }
        },
        consecutive_expressions: {
            templates: [[{
                        isFixed: true,
                        content: 'This line has two expressions in a row ('
                    }, {
                        isFixed: false,
                        content: 'word1'
                    }, {
                        isFixed: true,
                        content: ' and '
                    }, {
                        isFixed: false,
                        content: 'word2'
                    }, {
                        isFixed: true,
                        content: ') which is not allowed.'
                    }]],
            parameters: {
                word1: {
                    format: 'string'
                },
                word2: {
                    format: 'string'
                }
            }
        },
        unidentified_phrase_starting_at: {
            templates: [[{
                        isFixed: true,
                        content: 'The phrase starting \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: ('\' could not be identified; please make sure you are only ' +
                            'using phrases from the given list of vocabulary.')
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            }
        },
        forbidden_word: {
            templates: [[{
                        isFixed: true,
                        content: 'The name \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: '\' is reserved for vocabulary and so cannot be used here.'
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            }
        },
        not_enough_inputs: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' must have at least '
                    }, {
                        isFixed: false,
                        content: 'num_needed'
                    }, {
                        isFixed: true,
                        content: ' '
                    }, {
                        isFixed: false,
                        content: 'input_category'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                num_needed: {
                    format: 'string'
                },
                input_category: {
                    format: 'string'
                },
                operator: {
                    format: 'string'
                }
            }
        },
        wrong_num_inputs: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' must have '
                    }, {
                        isFixed: false,
                        content: 'num_needed'
                    }, {
                        isFixed: true,
                        content: ' '
                    }, {
                        isFixed: false,
                        content: 'input_category'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                num_needed: {
                    format: 'string'
                },
                input_category: {
                    format: 'string'
                },
                operator: {
                    format: 'string'
                }
            }
        },
        wrong_kind: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' is supposed to be a '
                    }, {
                        isFixed: false,
                        content: 'expected_kind'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                },
                expected_kind: {
                    format: 'string'
                },
                actual_kind: {
                    format: 'string'
                }
            }
        },
        wrong_type: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' yields a '
                    }, {
                        isFixed: false,
                        content: 'actual_type'
                    }, {
                        isFixed: true,
                        content: ' but you are trying to use it to give a '
                    }, {
                        isFixed: false,
                        content: 'expected_type'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                },
                expected_type: {
                    format: 'string'
                },
                actual_type: {
                    format: 'string'
                }
            }
        },
        duplicate_dummy_name: {
            templates: [[{
                        isFixed: true,
                        content: 'The name \''
                    }, {
                        isFixed: false,
                        content: 'dummy'
                    }, {
                        isFixed: true,
                        content: '\' is already in use and so cannot be quantified over in '
                    }, {
                        isFixed: false,
                        content: 'expression'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                dummy: {
                    format: 'expression'
                },
                expression: {
                    format: 'expression'
                }
            }
        },
        dummy_not_variable: {
            templates: [[{
                        isFixed: true,
                        content: 'You can only quantify over variables, not  '
                    }, {
                        isFixed: false,
                        content: 'dummy'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                dummy: {
                    format: 'expression'
                },
                expression: {
                    format: 'expression'
                }
            }
        },
        unknown_operator: {
            templates: [[{
                        isFixed: true,
                        content: 'The operator '
                    }, {
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' could not be identified.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                }
            }
        },
        too_many_parsings: {
            templates: [[{
                        isFixed: true,
                        content: ('This can be parsed in too many different ways - try using ' +
                            'fewer words, especially single-character words.')
                    }]],
            parameters: {}
        },
        too_many_typings: {
            templates: [[{
                        isFixed: true,
                        content: ('This has too many possible typings - try using fewer variables.')
                    }]],
            parameters: {}
        }
    };
    return {
        buildQuestion: buildQuestion,
        TEACHER_ERROR_MESSAGES: TEACHER_ERROR_MESSAGES
    };
})();
exports.default = logicProofTeacher;


/***/ }),

/***/ "./extensions/objects/objectComponentsRequires.ts":
/*!********************************************************!*\
  !*** ./extensions/objects/objectComponentsRequires.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for all the object templates.
 */
__webpack_require__(/*! objects/templates/boolean-editor.directive.ts */ "./extensions/objects/templates/boolean-editor.directive.ts");
__webpack_require__(/*! objects/templates/code-string-editor.directive.ts */ "./extensions/objects/templates/code-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/coord-two-dim-editor.directive.ts */ "./extensions/objects/templates/coord-two-dim-editor.directive.ts");
__webpack_require__(/*! objects/templates/drag-and-drop-html-string-editor.directive.ts */ "./extensions/objects/templates/drag-and-drop-html-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/drag-and-drop-positive-int-editor.directive.ts */ "./extensions/objects/templates/drag-and-drop-positive-int-editor.directive.ts");
__webpack_require__(/*! objects/templates/filepath-editor.directive.ts */ "./extensions/objects/templates/filepath-editor.directive.ts");
__webpack_require__(/*! objects/templates/fraction-editor.directive.ts */ "./extensions/objects/templates/fraction-editor.directive.ts");
__webpack_require__(/*! objects/templates/graph-editor.directive.ts */ "./extensions/objects/templates/graph-editor.directive.ts");
__webpack_require__(/*! objects/templates/graph-property-editor.directive.ts */ "./extensions/objects/templates/graph-property-editor.directive.ts");
__webpack_require__(/*! objects/templates/html-editor.directive.ts */ "./extensions/objects/templates/html-editor.directive.ts");
__webpack_require__(/*! objects/templates/image-with-regions-editor.directive.ts */ "./extensions/objects/templates/image-with-regions-editor.directive.ts");
__webpack_require__(/*! objects/templates/int-editor.directive.ts */ "./extensions/objects/templates/int-editor.directive.ts");
__webpack_require__(/*! objects/templates/list-of-sets-of-html-strings-editor.directive.ts */ "./extensions/objects/templates/list-of-sets-of-html-strings-editor.directive.ts");
__webpack_require__(/*! objects/templates/list-of-tabs-editor.directive.ts */ "./extensions/objects/templates/list-of-tabs-editor.directive.ts");
__webpack_require__(/*! objects/templates/list-of-unicode-string-editor.directive.ts */ "./extensions/objects/templates/list-of-unicode-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/logic-error-category-editor.directive.ts */ "./extensions/objects/templates/logic-error-category-editor.directive.ts");
__webpack_require__(/*! objects/templates/logic-question-editor.directive.ts */ "./extensions/objects/templates/logic-question-editor.directive.ts");
__webpack_require__(/*! objects/templates/math-latex-string-editor.directive.ts */ "./extensions/objects/templates/math-latex-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/music-phrase-editor.directive.ts */ "./extensions/objects/templates/music-phrase-editor.directive.ts");
__webpack_require__(/*! objects/templates/nonnegative-int-editor.directive.ts */ "./extensions/objects/templates/nonnegative-int-editor.directive.ts");
__webpack_require__(/*! objects/templates/normalized-string-editor.directive.ts */ "./extensions/objects/templates/normalized-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/number-with-units-editor.directive.ts */ "./extensions/objects/templates/number-with-units-editor.directive.ts");
__webpack_require__(/*! objects/templates/parameter-name-editor.directive.ts */ "./extensions/objects/templates/parameter-name-editor.directive.ts");
__webpack_require__(/*! objects/templates/real-editor.directive.ts */ "./extensions/objects/templates/real-editor.directive.ts");
__webpack_require__(/*! objects/templates/sanitized-url-editor.directive.ts */ "./extensions/objects/templates/sanitized-url-editor.directive.ts");
__webpack_require__(/*! objects/templates/set-of-html-string-editor.directive.ts */ "./extensions/objects/templates/set-of-html-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/set-of-unicode-string-editor.directive.ts */ "./extensions/objects/templates/set-of-unicode-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/unicode-string-editor.directive.ts */ "./extensions/objects/templates/unicode-string-editor.directive.ts");


/***/ }),

/***/ "./extensions/objects/templates/boolean-editor.directive.ts":
/*!******************************************************************!*\
  !*** ./extensions/objects/templates/boolean-editor.directive.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for boolean editor.
 */
// The value for this editor is always editable.
angular.module('oppia').directive('booleanEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function (newValue) {
                        ctrl.localValue = {
                            label: newValue || false
                        };
                    }, true);
                    $scope.$watch('$ctrl.localValue.label', function (newValue) {
                        ctrl.value = newValue;
                    });
                }],
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/boolean-editor.directive.html'),
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/code-string-editor.directive.ts":
/*!**********************************************************************!*\
  !*** ./extensions/objects/templates/code-string-editor.directive.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for code string editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('codeStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getAlwaysEditable: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/code-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.alwaysEditable = ctrl.getAlwaysEditable();
                    ctrl.getWarningText = function () {
                        if (ctrl.localValue.label.indexOf('\t') !== -1) {
                            return 'Code may not contain tab characters.';
                        }
                        return '';
                    };
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function () {
                        ctrl.localValue = {
                            label: ctrl.value || ''
                        };
                    }, true);
                    $scope.$watch('$ctrl.localValue.label', function (newValue) {
                        ctrl.value = newValue;
                    });
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/coord-two-dim-editor.directive.ts":
/*!************************************************************************!*\
  !*** ./extensions/objects/templates/coord-two-dim-editor.directive.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for coord two dim editor.
 */
angular.module('oppia').directive('coordTwoDimEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.mapCenter = {
                        lat: ctrl.value[0],
                        lng: ctrl.value[1],
                        zoom: 0
                    };
                    ctrl.mapMarkers = {
                        mainMarker: {
                            lat: ctrl.value[0],
                            lng: ctrl.value[1],
                            focus: true,
                            draggable: true,
                            icon: {
                                iconUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-icon.png'),
                                // The size of the icon image in pixels.
                                iconSize: [25, 41],
                                // The coordinates of the "tip" of the icon.
                                iconAnchor: [12, 41],
                                shadowUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-shadow.png'),
                                // The size of the shadow image in pixels.
                                shadowSize: [41, 41],
                                // The coordinates of the "tip" of the shadow.
                                shadowAnchor: [13, 41],
                                // The URL to a retina sized version of the icon image.
                                // Used for Retina screen devices.
                                iconRetinaUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-icon-2x.png'),
                                shadowRetinaUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-shadow.png')
                            }
                        }
                    };
                    ctrl.mapEvents = {
                        map: {
                            enable: ['click'],
                            logic: 'emit'
                        },
                        markers: {
                            enable: ['dragend'],
                            logic: 'emit'
                        }
                    };
                    $scope.$on('leafletDirectiveMap.coordTwoDimEditor.click', function (evt, args) {
                        var newLat = args.leafletEvent.latlng.lat;
                        var newLng = args.leafletEvent.latlng.lng;
                        ctrl.value = [newLat, newLng];
                        updateMarker(newLat, newLng);
                    });
                    $scope.$on('leafletDirectiveMarker.coordTwoDimEditor.dragend', function (evt, args) {
                        ctrl.value = [args.model.lat, args.model.lng];
                    });
                    var updateMarker = function (lat, lng) {
                        ctrl.mapMarkers.mainMarker.lat = lat;
                        ctrl.mapMarkers.mainMarker.lng = lng;
                    };
                }],
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/coord-two-dim-editor.directive.html'),
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/drag-and-drop-html-string-editor.directive.ts":
/*!************************************************************************************!*\
  !*** ./extensions/objects/templates/drag-and-drop-html-string-editor.directive.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for drag and drop HTML string editor.
 */
angular.module('oppia').directive('dragAndDropHtmlStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/drag-and-drop-html-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.name = math.random().toString(36).substring(7);
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.choices = ctrl.initArgs.choices;
                    if (!ctrl.value || ctrl.value === '') {
                        ctrl.value = ctrl.choices[0].id;
                    }
                    ctrl.selectedItem = ctrl.value;
                    ctrl.selection = function (selectedItem) {
                        ctrl.value = selectedItem;
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/drag-and-drop-positive-int-editor.directive.ts":
/*!*************************************************************************************!*\
  !*** ./extensions/objects/templates/drag-and-drop-positive-int-editor.directive.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for drag and drop positive int editor.
 */
angular.module('oppia').directive('dragAndDropPositiveIntEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/drag_and_drop_positive_int-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    if (!parseInt(ctrl.value)) {
                        ctrl.value = 1;
                    }
                    if (!ctrl.selectedRank) {
                        ctrl.selectedRank = '';
                    }
                    ctrl.allowedRanks = [];
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.choices = ctrl.initArgs.choices;
                    for (var i = 0; i < ctrl.choices.length; i++) {
                        ctrl.allowedRanks.push(i + 1);
                    }
                    ctrl.selection = function (selectedRank) {
                        ctrl.value = parseInt(selectedRank);
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/filepath-editor.directive.ts":
/*!*******************************************************************!*\
  !*** ./extensions/objects/templates/filepath-editor.directive.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for filepath editor.
 */
// This directive can only be used in the context of an exploration.
__webpack_require__(/*! components/forms/custom-forms-directives/image-uploader.directive.ts */ "./core/templates/dev/head/components/forms/custom-forms-directives/image-uploader.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/AssetsBackendApiService.ts */ "./core/templates/dev/head/services/AssetsBackendApiService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/CsrfTokenService.ts */ "./core/templates/dev/head/services/CsrfTokenService.ts");
angular.module('oppia').directive('filepathEditor', [
    '$sce', 'AlertsService', 'AssetsBackendApiService',
    'ContextService', 'CsrfTokenService', 'UrlInterpolationService',
    function ($sce, AlertsService, AssetsBackendApiService, ContextService, CsrfTokenService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/filepath-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    var MODE_EMPTY = 1;
                    var MODE_UPLOADED = 2;
                    var MODE_SAVED = 3;
                    // We only use PNG format since that is what canvas can export to in
                    // all browsers.
                    // TODO(sll): See if we can add support for other image formats.
                    var OUTPUT_IMAGE_FORMAT = 'png';
                    var OUTPUT_IMAGE_MAX_WIDTH_PX = 490;
                    var CROP_BORDER_MARGIN_PX = 10;
                    var CROP_AREA_MIN_WIDTH_PX = 40;
                    var CROP_AREA_MIN_HEIGHT_PX = 40;
                    // Categorize mouse positions with respect to the crop area.
                    var MOUSE_TOP_LEFT = 1;
                    var MOUSE_TOP = 2;
                    var MOUSE_TOP_RIGHT = 3;
                    var MOUSE_RIGHT = 4;
                    var MOUSE_BOTTOM_RIGHT = 5;
                    var MOUSE_BOTTOM = 6;
                    var MOUSE_BOTTOM_LEFT = 7;
                    var MOUSE_LEFT = 8;
                    var MOUSE_INSIDE = 9;
                    // Define the cursors for the crop area.
                    var CROP_CURSORS = {};
                    CROP_CURSORS[MOUSE_TOP_LEFT] = 'nwse-resize';
                    CROP_CURSORS[MOUSE_TOP] = 'ns-resize';
                    CROP_CURSORS[MOUSE_TOP_RIGHT] = 'nesw-resize';
                    CROP_CURSORS[MOUSE_RIGHT] = 'ew-resize';
                    CROP_CURSORS[MOUSE_BOTTOM_RIGHT] = 'nwse-resize';
                    CROP_CURSORS[MOUSE_BOTTOM] = 'ns-resize';
                    CROP_CURSORS[MOUSE_BOTTOM_LEFT] = 'nesw-resize';
                    CROP_CURSORS[MOUSE_LEFT] = 'ew-resize';
                    CROP_CURSORS[MOUSE_INSIDE] = 'move';
                    /** Internal functions (not visible in the view) */
                    /**
                     * Resamples an image to the specified dimension.
                     *
                     * @param imageDataURI A DOMString containing the input image data URI.
                     * @param width The desired output width.
                     * @param height The desired output height.
                     * @return A DOMString containing the output image data URI.
                     */
                    var getResampledImageData = function (imageDataURI, width, height) {
                        // Create an Image object with the original data.
                        var img = new Image();
                        img.src = imageDataURI;
                        // Create a Canvas and draw the image on it, resampled.
                        var canvas = document.createElement('canvas');
                        canvas.width = width;
                        canvas.height = height;
                        var ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0, width, height);
                        return canvas.toDataURL('image/' + OUTPUT_IMAGE_FORMAT, 1);
                    };
                    /**
                     * Crops an image to the specified rectangular region.
                     *
                     * @param imageDataURI A DOMString containing the input image data URI.
                     * @param x The x coorinate of the top-left corner of the crop region.
                     * @param y The y coorinate of the top-left corner of the crop region.
                     * @param width The width of the crop region.
                     * @param height The height of the crop region.
                     * @return A DOMString containing the output image data URI.
                     */
                    var getCroppedImageData = function (imageDataURI, x, y, width, height) {
                        // Put the original image in a canvas.
                        var img = new Image();
                        img.src = imageDataURI;
                        var canvas = document.createElement('canvas');
                        canvas.width = x + width;
                        canvas.height = y + height;
                        var ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0);
                        // Get image data for a cropped selection.
                        var data = ctx.getImageData(x, y, width, height);
                        // Draw on a separate canvas and return the dataURL.
                        var cropCanvas = document.createElement('canvas');
                        cropCanvas.width = width;
                        cropCanvas.height = height;
                        var cropCtx = cropCanvas.getContext('2d');
                        cropCtx.putImageData(data, 0, 0);
                        return cropCanvas.toDataURL('image/' + OUTPUT_IMAGE_FORMAT, 1);
                    };
                    var convertImageDataToImageFile = function (dataURI) {
                        // Convert base64/URLEncoded data component to raw binary data
                        // held in a string.
                        var byteString = atob(dataURI.split(',')[1]);
                        // Separate out the mime component.
                        var mime = dataURI.split(',')[0].split(':')[1].split(';')[0];
                        // Write the bytes of the string to a typed array.
                        var ia = new Uint8Array(byteString.length);
                        for (var i = 0; i < byteString.length; i++) {
                            ia[i] = byteString.charCodeAt(i);
                        }
                        var blob = new Blob([ia], { type: mime });
                        if (blob.type.match('image') &&
                            blob.size > 0) {
                            return blob;
                        }
                        else {
                            return null;
                        }
                    };
                    var getEventCoorindatesRelativeToImageContainer = function (e) {
                        // Even though the event listeners are added to the image container,
                        // the events seem to be reported with 'target' set to the deepest
                        // element where the event occurred. In other words, if the event
                        // occurred outside of the crop area, then the (x, y) reported will be
                        // the one with respect to the image container, but if the event
                        // occurs inside the crop area, then the (x, y) reported will be the
                        // one with respect to the crop area itself. So this function does
                        // normalization on the (x, y) values so that they are always reported
                        // with respect to the image container (makes calculations easier).
                        var x = e.offsetX;
                        var y = e.offsetY;
                        var containerClass = 'filepath-editor-image-crop-container';
                        var node = e.target;
                        while (!node.classList.contains(containerClass)) {
                            x += node.offsetLeft;
                            y += node.offsetTop;
                            node = node.offsetParent;
                        }
                        return { x: x, y: y };
                    };
                    var clamp = function (value, min, max) {
                        return Math.min(Math.max(min, value), max);
                    };
                    var handleMouseMoveWhileDraggingCropArea = function (x, y) {
                        var xDown = ctrl.lastMouseDownEventCoordinates.x;
                        var yDown = ctrl.lastMouseDownEventCoordinates.y;
                        var x1WhenDown = ctrl.cropAreaXWhenLastDown;
                        var y1WhenDown = ctrl.cropAreaYWhenLastDown;
                        // Calculate new position of the crop area.
                        var x1 = x1WhenDown + (x - xDown);
                        var y1 = y1WhenDown + (y - yDown);
                        // Correct for boundaries.
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var cropWidth = ctrl.cropArea.x2 - ctrl.cropArea.x1;
                        var cropHeight = ctrl.cropArea.y2 - ctrl.cropArea.y1;
                        x1 = clamp(x1, 0, dimensions.width - cropWidth);
                        y1 = clamp(y1, 0, dimensions.height - cropHeight);
                        // Update crop area coordinates.
                        ctrl.cropArea.x1 = x1;
                        ctrl.cropArea.y1 = y1;
                        ctrl.cropArea.x2 = x1 + cropWidth;
                        ctrl.cropArea.y2 = y1 + cropHeight;
                    };
                    var handleMouseMoveWhileResizingCropArea = function (x, y) {
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var direction = ctrl.cropAreaResizeDirection;
                        var adjustResizeLeft = function (x) {
                            // Update crop area x1 value, correcting for boundaries.
                            ctrl.cropArea.x1 = clamp(x, 0, ctrl.cropArea.x2 - CROP_AREA_MIN_WIDTH_PX);
                        };
                        var adjustResizeRight = function (x) {
                            // Update crop area x2 value, correcting for boundaries.
                            ctrl.cropArea.x2 = clamp(x, CROP_AREA_MIN_WIDTH_PX + ctrl.cropArea.x1, dimensions.width);
                        };
                        var adjustResizeTop = function (y) {
                            // Update crop area y1 value, correcting for boundaries.
                            ctrl.cropArea.y1 = clamp(y, 0, ctrl.cropArea.y2 - CROP_AREA_MIN_HEIGHT_PX);
                        };
                        var adjustResizeBottom = function (y) {
                            // Update crop area y2 value, correcting for boundaries.
                            ctrl.cropArea.y2 = clamp(y, CROP_AREA_MIN_HEIGHT_PX + ctrl.cropArea.y1, dimensions.height);
                        };
                        switch (direction) {
                            case MOUSE_TOP_LEFT:
                                adjustResizeTop(y);
                                adjustResizeLeft(x);
                                break;
                            case MOUSE_TOP:
                                adjustResizeTop(y);
                                break;
                            case MOUSE_TOP_RIGHT:
                                adjustResizeTop(y);
                                adjustResizeRight(x);
                                break;
                            case MOUSE_RIGHT:
                                adjustResizeRight(x);
                                break;
                            case MOUSE_BOTTOM_RIGHT:
                                adjustResizeBottom(y);
                                adjustResizeRight(x);
                                break;
                            case MOUSE_BOTTOM:
                                adjustResizeBottom(y);
                                break;
                            case MOUSE_BOTTOM_LEFT:
                                adjustResizeBottom(y);
                                adjustResizeLeft(x);
                                break;
                            case MOUSE_LEFT:
                                adjustResizeLeft(x);
                                break;
                        }
                    };
                    var updatePositionWithinCropArea = function (x, y) {
                        var margin = CROP_BORDER_MARGIN_PX;
                        var cx1 = ctrl.cropArea.x1;
                        var cy1 = ctrl.cropArea.y1;
                        var cx2 = ctrl.cropArea.x2;
                        var cy2 = ctrl.cropArea.y2;
                        var xOnLeftBorder = x > cx1 - margin && x < cx1 + margin;
                        var xOnRightBorder = x > cx2 - margin && x < cx2 + margin;
                        var yOnTopBorder = y > cy1 - margin && y < cy1 + margin;
                        var yOnBottomBorder = y > cy2 - margin && y < cy2 + margin;
                        var xInside = x > cx1 && x < cx2;
                        var yInside = y > cy1 && y < cy2;
                        // It is important to check the pointer position for corners first,
                        // since the conditions overlap. In other words, the pointer can be
                        // at the top border and at the top-right corner at the same time, in
                        // which case we want to recognize the corner.
                        if (xOnLeftBorder && yOnTopBorder) {
                            // Upper left corner.
                            ctrl.mousePositionWithinCropArea = MOUSE_TOP_LEFT;
                        }
                        else if (xOnRightBorder && yOnTopBorder) {
                            // Upper right corner.
                            ctrl.mousePositionWithinCropArea = MOUSE_TOP_RIGHT;
                        }
                        else if (xOnLeftBorder && yOnBottomBorder) {
                            // Lower left corner.
                            ctrl.mousePositionWithinCropArea = MOUSE_BOTTOM_LEFT;
                        }
                        else if (xOnRightBorder && yOnBottomBorder) {
                            // Lower right corner.
                            ctrl.mousePositionWithinCropArea = MOUSE_BOTTOM_RIGHT;
                        }
                        else if (yOnTopBorder) {
                            // Top border.
                            ctrl.mousePositionWithinCropArea = MOUSE_TOP;
                        }
                        else if (xOnLeftBorder) {
                            // Left border.
                            ctrl.mousePositionWithinCropArea = MOUSE_LEFT;
                        }
                        else if (xOnRightBorder) {
                            // Right border.
                            ctrl.mousePositionWithinCropArea = MOUSE_RIGHT;
                        }
                        else if (yOnBottomBorder) {
                            // Bottom border.
                            ctrl.mousePositionWithinCropArea = MOUSE_BOTTOM;
                        }
                        else if (xInside && yInside) {
                            // Inside the crop area.
                            ctrl.mousePositionWithinCropArea = MOUSE_INSIDE;
                        }
                        else {
                            ctrl.mousePositionWithinCropArea = null;
                        }
                    };
                    var getTrustedResourceUrlForImageFileName = function (imageFileName) {
                        var encodedFilepath = window.encodeURIComponent(imageFileName);
                        return $sce.trustAsResourceUrl(AssetsBackendApiService.getImageUrlForPreview(ctrl.entityType, ctrl.entityId, encodedFilepath));
                    };
                    /** Scope variables and functions (visibles to the view) */
                    // Reset the component each time the value changes
                    // (e.g. if this is part of an editable list).
                    $scope.$watch('$ctrl.value', function (newValue) {
                        if (newValue) {
                            ctrl.setSavedImageFilename(newValue, false);
                        }
                    });
                    ctrl.resetFilePathEditor = function () {
                        ctrl.data = {
                            mode: MODE_EMPTY,
                            metadata: {}
                        };
                        ctrl.imageResizeRatio = 1;
                    };
                    ctrl.validate = function (data) {
                        return data.mode === MODE_SAVED &&
                            data.metadata.savedImageFilename &&
                            data.metadata.savedImageFilename.length > 0;
                    };
                    ctrl.isUserCropping = function () {
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var cropWidth = ctrl.cropArea.x2 - ctrl.cropArea.x1;
                        var cropHeight = ctrl.cropArea.y2 - ctrl.cropArea.y1;
                        return cropWidth < dimensions.width || cropHeight < dimensions.height;
                    };
                    ctrl.onMouseMoveOnImageArea = function (e) {
                        e.preventDefault();
                        var coords = getEventCoorindatesRelativeToImageContainer(e);
                        if (ctrl.userIsDraggingCropArea) {
                            handleMouseMoveWhileDraggingCropArea(coords.x, coords.y);
                        }
                        else if (ctrl.userIsResizingCropArea) {
                            handleMouseMoveWhileResizingCropArea(coords.x, coords.y);
                        }
                        else {
                            updatePositionWithinCropArea(coords.x, coords.y);
                        }
                        ctrl.mouseLastKnownCoordinates = { x: coords.x, y: coords.y };
                    };
                    ctrl.onMouseDownOnCropArea = function (e) {
                        e.preventDefault();
                        var coords = getEventCoorindatesRelativeToImageContainer(e);
                        var position = ctrl.mousePositionWithinCropArea;
                        if (position === MOUSE_INSIDE) {
                            ctrl.lastMouseDownEventCoordinates = { x: coords.x, y: coords.y };
                            ctrl.cropAreaXWhenLastDown = ctrl.cropArea.x1;
                            ctrl.cropAreaYWhenLastDown = ctrl.cropArea.y1;
                            ctrl.userIsDraggingCropArea = true;
                        }
                        else if (position !== null) {
                            ctrl.lastMouseDownEventCoordinates = { x: coords.x, y: coords.y };
                            ctrl.userIsResizingCropArea = true;
                            ctrl.cropAreaResizeDirection = position;
                        }
                    };
                    ctrl.onMouseUpOnCropArea = function (e) {
                        e.preventDefault();
                        ctrl.userIsDraggingCropArea = false;
                        ctrl.userIsResizingCropArea = false;
                    };
                    ctrl.getMainContainerDynamicStyles = function () {
                        var width = OUTPUT_IMAGE_MAX_WIDTH_PX;
                        return 'width: ' + width + 'px';
                    };
                    ctrl.getImageContainerDynamicStyles = function () {
                        if (ctrl.data.mode === MODE_EMPTY) {
                            return 'border: 1px dotted #888';
                        }
                        else {
                            return 'border: none';
                        }
                    };
                    ctrl.getToolbarDynamicStyles = function () {
                        if (ctrl.isUserCropping()) {
                            return 'visibility: hidden';
                        }
                        else {
                            return 'visibility: visible';
                        }
                    };
                    ctrl.getCropButtonBarDynamicStyles = function () {
                        return 'left: ' + ctrl.cropArea.x2 + 'px;' +
                            'top: ' + ctrl.cropArea.y1 + 'px;';
                    };
                    ctrl.getCropAreaDynamicStyles = function () {
                        var cropWidth = ctrl.cropArea.x2 - ctrl.cropArea.x1;
                        var cropHeight = ctrl.cropArea.y2 - ctrl.cropArea.y1;
                        var position = ctrl.mousePositionWithinCropArea;
                        // Position, size, cursor and background.
                        var styles = {
                            left: ctrl.cropArea.x1 + 'px',
                            top: ctrl.cropArea.y1 + 'px',
                            width: cropWidth + 'px',
                            height: cropHeight + 'px',
                            cursor: CROP_CURSORS[position],
                            background: null
                        };
                        if (!styles.cursor) {
                            styles.cursor = 'default';
                        }
                        // Translucent background layer.
                        if (ctrl.isUserCropping()) {
                            var data = 'url(' + ctrl.data.metadata.uploadedImageData + ')';
                            styles.background = data + ' no-repeat';
                            var x = ctrl.cropArea.x1 + 3; // Add crop area border.
                            var y = ctrl.cropArea.y1 + 3; // Add crop area border.
                            styles['background-position'] = '-' + x + 'px -' + y + 'px';
                            var dimensions = ctrl.calculateTargetImageDimensions();
                            styles['background-size'] = dimensions.width + 'px ' +
                                dimensions.height + 'px';
                        }
                        return Object.keys(styles).map(function (key) {
                            return key + ': ' + styles[key];
                        }).join('; ');
                    };
                    ctrl.getUploadedImageDynamicStyles = function () {
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var w = dimensions.width;
                        var h = dimensions.height;
                        return 'width: ' + w + 'px; height: ' + h + 'px;';
                    };
                    ctrl.confirmCropImage = function () {
                        // Find coordinates of the cropped area within original image scale.
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var r = ctrl.data.metadata.originalWidth / dimensions.width;
                        var x1 = ctrl.cropArea.x1 * r;
                        var y1 = ctrl.cropArea.y1 * r;
                        var width = (ctrl.cropArea.x2 - ctrl.cropArea.x1) * r;
                        var height = (ctrl.cropArea.y2 - ctrl.cropArea.y1) * r;
                        // Generate new image data and file.
                        var newImageData = getCroppedImageData(ctrl.data.metadata.uploadedImageData, x1, y1, width, height);
                        var newImageFile = convertImageDataToImageFile(newImageData);
                        // Update image data.
                        ctrl.data.metadata.uploadedFile = newImageFile;
                        ctrl.data.metadata.uploadedImageData = newImageData;
                        ctrl.data.metadata.originalWidth = width;
                        ctrl.data.metadata.originalHeight = height;
                        // Re-calculate the dimensions of the base image and reset the
                        // coordinates of the crop area to the boundaries of the image.
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        ctrl.cropArea = {
                            x1: 0,
                            y1: 0,
                            x2: dimensions.width,
                            y2: dimensions.height
                        };
                    };
                    ctrl.cancelCropImage = function () {
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        ctrl.cropArea.x1 = 0;
                        ctrl.cropArea.y1 = 0;
                        ctrl.cropArea.x2 = dimensions.width;
                        ctrl.cropArea.y2 = dimensions.height;
                    };
                    ctrl.getImageSizeHelp = function () {
                        var imageWidth = ctrl.data.metadata.originalWidth;
                        if (ctrl.imageResizeRatio === 1 &&
                            imageWidth > OUTPUT_IMAGE_MAX_WIDTH_PX) {
                            return 'This image has been automatically downsized to ensure ' +
                                'that it will fit in the card.';
                        }
                        return null;
                    };
                    ctrl.isNoImageUploaded = function () {
                        return ctrl.data.mode === MODE_EMPTY;
                    };
                    ctrl.isImageUploaded = function () {
                        return ctrl.data.mode === MODE_UPLOADED;
                    };
                    ctrl.isImageSaved = function () {
                        return ctrl.data.mode === MODE_SAVED;
                    };
                    ctrl.getCurrentResizePercent = function () {
                        return Math.round(100 * ctrl.imageResizeRatio);
                    };
                    ctrl.decreaseResizePercent = function (amount) {
                        // Do not allow to decrease size below 10%.
                        ctrl.imageResizeRatio = Math.max(0.1, ctrl.imageResizeRatio - amount / 100);
                    };
                    ctrl.increaseResizePercent = function (amount) {
                        // Do not allow to increase size above 100% (only downsize allowed).
                        ctrl.imageResizeRatio = Math.min(1, ctrl.imageResizeRatio + amount / 100);
                    };
                    ctrl.calculateTargetImageDimensions = function () {
                        var width = ctrl.data.metadata.originalWidth;
                        var height = ctrl.data.metadata.originalHeight;
                        if (width > OUTPUT_IMAGE_MAX_WIDTH_PX) {
                            var aspectRatio = width / height;
                            width = OUTPUT_IMAGE_MAX_WIDTH_PX;
                            height = width / aspectRatio;
                        }
                        return {
                            width: Math.round(width * ctrl.imageResizeRatio),
                            height: Math.round(height * ctrl.imageResizeRatio)
                        };
                    };
                    ctrl.setUploadedFile = function (file) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            var img = new Image();
                            img.onload = function () {
                                ctrl.data = {
                                    mode: MODE_UPLOADED,
                                    metadata: {
                                        uploadedFile: file,
                                        uploadedImageData: e.target.result,
                                        originalWidth: img.naturalWidth,
                                        originalHeight: img.naturalHeight
                                    }
                                };
                                var dimensions = ctrl.calculateTargetImageDimensions();
                                ctrl.cropArea = {
                                    x1: 0,
                                    y1: 0,
                                    x2: dimensions.width,
                                    y2: dimensions.height
                                };
                                $scope.$apply();
                            };
                            img.src = (e.target.result);
                        };
                        reader.readAsDataURL(file);
                    };
                    ctrl.setSavedImageFilename = function (filename, updateParent) {
                        ctrl.data = {
                            mode: MODE_SAVED,
                            metadata: {
                                savedImageFilename: filename,
                                savedImageUrl: getTrustedResourceUrlForImageFileName(filename)
                            }
                        };
                        if (updateParent) {
                            AlertsService.clearWarnings();
                            ctrl.value = filename;
                        }
                    };
                    ctrl.onFileChanged = function (file, filename) {
                        ctrl.setUploadedFile(file);
                        $scope.$apply();
                    };
                    ctrl.discardUploadedFile = function () {
                        ctrl.resetFilePathEditor();
                    };
                    ctrl.saveUploadedFile = function () {
                        AlertsService.clearWarnings();
                        if (!ctrl.data.metadata.uploadedFile) {
                            AlertsService.addWarning('No image file detected.');
                            return;
                        }
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var resampledImageData = getResampledImageData(ctrl.data.metadata.uploadedImageData, dimensions.width, dimensions.height);
                        var resampledFile = convertImageDataToImageFile(resampledImageData);
                        if (resampledFile === null) {
                            AlertsService.addWarning('Could not get resampled file.');
                            return;
                        }
                        var form = new FormData();
                        form.append('image', resampledFile);
                        form.append('payload', JSON.stringify({
                            filename: ctrl.generateImageFilename(dimensions.height, dimensions.width)
                        }));
                        var imageUploadUrlTemplate = '/createhandler/imageupload/' +
                            '<entity_type>/<entity_id>';
                        CsrfTokenService.getTokenAsync().then(function (token) {
                            form.append('csrf_token', token);
                            $.ajax({
                                url: UrlInterpolationService.interpolateUrl(imageUploadUrlTemplate, {
                                    entity_type: ctrl.entityType,
                                    entity_id: ctrl.entityId
                                }),
                                data: form,
                                processData: false,
                                contentType: false,
                                type: 'POST',
                                dataFilter: function (data) {
                                    // Remove the XSSI prefix.
                                    var transformedData = data.substring(5);
                                    return JSON.parse(transformedData);
                                },
                                dataType: 'text'
                            }).done(function (data) {
                                // Pre-load image before marking the image as saved.
                                var img = new Image();
                                img.onload = function () {
                                    ctrl.setSavedImageFilename(data.filename, true);
                                    $scope.$apply();
                                };
                                img.src = getTrustedResourceUrlForImageFileName(data.filename);
                            }).fail(function (data) {
                                // Remove the XSSI prefix.
                                var transformedData = data.responseText.substring(5);
                                var parsedResponse = JSON.parse(transformedData);
                                AlertsService.addWarning(parsedResponse.error || 'Error communicating with server.');
                                $scope.$apply();
                            });
                        });
                    };
                    ctrl.generateImageFilename = function (height, width) {
                        var date = new Date();
                        return 'img_' +
                            date.getFullYear() +
                            ('0' + (date.getMonth() + 1)).slice(-2) +
                            ('0' + date.getDate()).slice(-2) +
                            '_' +
                            ('0' + date.getHours()).slice(-2) +
                            ('0' + date.getMinutes()).slice(-2) +
                            ('0' + date.getSeconds()).slice(-2) +
                            '_' +
                            Math.random().toString(36).substr(2, 10) +
                            '_height_' + height +
                            '_width_' + width +
                            '.' + OUTPUT_IMAGE_FORMAT;
                    };
                    // This variable holds information about the image upload flow.
                    // It's always guaranteed to have the 'mode' and 'metadata' properties.
                    //
                    // See below a description of each mode.
                    //
                    // MODE_EMPTY:
                    //   The user has not uploaded an image yet.
                    //   In this mode, data.metadata will be an empty object:
                    //     {}
                    //
                    // MODE_UPLOADED:
                    //   The user has uploaded an image but it is not yet saved.
                    //   All the crop and resizing happens at this stage.
                    //   In this mode, data.metadata will contain the following info:
                    //     {
                    //       uploadedFile: <a File object>,
                    //       uploadedImageData: <binary data corresponding to the image>,
                    //       originalWidth: <original width of the uploaded image>,
                    //       originalHeight: <original height of the uploaded image>
                    //     }
                    //
                    // MODE_SAVED:
                    //   The user has saved the final image for use in Oppia.
                    //   At this stage, the user can click on the trash to start over.
                    //   In this mode, data.metadata will contain the following info:
                    //     {
                    //       savedImageFilename: <File name of the resource for the image>
                    //       savedImageUrl: <Trusted resource Url for the image>
                    //     }
                    ctrl.data = { mode: MODE_EMPTY, metadata: {} };
                    // Resizing properties.
                    ctrl.imageResizeRatio = 1;
                    // Cropping properties.
                    ctrl.cropArea = { x1: 0, y1: 0, x2: 0, y2: 0 };
                    ctrl.mousePositionWithinCropArea = null;
                    ctrl.mouseLastKnownCoordinates = { x: 0, y: 0 };
                    ctrl.lastMouseDownEventCoordinates = { x: 0, y: 0 };
                    ctrl.userIsDraggingCropArea = false;
                    ctrl.userIsResizingCropArea = false;
                    ctrl.cropAreaResizeDirection = null;
                    ctrl.entityId = ContextService.getEntityId();
                    ctrl.entityType = ContextService.getEntityType();
                    ctrl.resetFilePathEditor();
                    window.addEventListener('mouseup', function (e) {
                        e.preventDefault();
                        ctrl.userIsDraggingCropArea = false;
                        ctrl.userIsResizingCropArea = false;
                    }, false);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/fraction-editor.directive.ts":
/*!*******************************************************************!*\
  !*** ./extensions/objects/templates/fraction-editor.directive.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for fraction editor.
 */
angular.module('oppia').directive('fractionEditor', [
    'FractionObjectFactory', 'UrlInterpolationService',
    function (FractionObjectFactory, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/fraction-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    var errorMessage = '';
                    var fractionString = '0';
                    if (ctrl.value !== null) {
                        var defaultFraction = FractionObjectFactory.fromDict(ctrl.value);
                        fractionString = defaultFraction.toString();
                    }
                    ctrl.localValue = {
                        label: fractionString
                    };
                    $scope.$watch('$ctrl.localValue.label', function (newValue) {
                        try {
                            ctrl.value = FractionObjectFactory.fromRawInputString(newValue);
                            errorMessage = '';
                        }
                        catch (parsingError) {
                            errorMessage = parsingError.message;
                        }
                    });
                    ctrl.getWarningText = function () {
                        return errorMessage;
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/graph-editor.directive.ts":
/*!****************************************************************!*\
  !*** ./extensions/objects/templates/graph-editor.directive.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for graph editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('graphEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/graph-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.alwaysEditable = true;
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/graph-property-editor.directive.ts":
/*!*************************************************************************!*\
  !*** ./extensions/objects/templates/graph-property-editor.directive.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for graph property editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('graphPropertyEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/graph-property-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.alwaysEditable = true;
                    ctrl.graphProperties = [{
                            name: 'regular',
                            humanReadableName: 'regular'
                        }, {
                            name: 'acyclic',
                            humanReadableName: 'acyclic'
                        }, {
                            name: 'strongly_connected',
                            humanReadableName: 'strongly connected'
                        }, {
                            name: 'weakly_connected',
                            humanReadableName: 'weakly connected'
                        }];
                    ctrl.localValue = {
                        property: ctrl.graphProperties[0]
                    };
                    for (var i = 0; i < ctrl.graphProperties.length; i++) {
                        if (ctrl.graphProperties[i].name === ctrl.value) {
                            ctrl.localValue.property = ctrl.graphProperties[i];
                        }
                    }
                    $scope.$watch('$ctrl.localValue.property', function () {
                        ctrl.value = ctrl.localValue.property.name;
                    });
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/html-editor.directive.ts":
/*!***************************************************************!*\
  !*** ./extensions/objects/templates/html-editor.directive.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for HTML editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
//
// This directive is based on the UnicodeString directive.
angular.module('oppia').directive('htmlEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/html-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.schema = {
                        type: 'html'
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/image-with-regions-editor.directive.ts":
/*!*****************************************************************************!*\
  !*** ./extensions/objects/templates/image-with-regions-editor.directive.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for image with regions editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
// TODO(czx): Uniquify the labels of image regions
angular.module('oppia').directive('imageWithRegionsEditor', [
    'AssetsBackendApiService',
    'ContextService', 'UrlInterpolationService', 'ENTITY_TYPE',
    function (AssetsBackendApiService, ContextService, UrlInterpolationService, ENTITY_TYPE) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/image-with-regions-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$element', '$uibModal',
                function ($scope, $element, $uibModal) {
                    var ctrl = this;
                    ctrl.alwaysEditable = true;
                    // Dynamically defines the CSS style for the region rectangle.
                    ctrl.getRegionStyle = function (index) {
                        if (index === ctrl.selectedRegion) {
                            return 'fill: #00f; opacity: 0.5; stroke: #00d';
                        }
                        else {
                            return 'fill: white; opacity: 0.5; stroke: #ddd';
                        }
                    };
                    // Dynamically defines the CSS style for the region trash icon.
                    ctrl.getRegionTrashStyle = function (index) {
                        if (index === ctrl.selectedRegion) {
                            return 'fill: #eee; opacity: 0.7';
                        }
                        else {
                            return 'fill: #333; opacity: 0.7';
                        }
                    };
                    // Dynamically defines the CSS style for the region label.
                    ctrl.getRegionLabelStyle = function (index) {
                        var commonStyles = 'font-size: 14px; pointer-events: none;';
                        if (index === ctrl.selectedRegion) {
                            return commonStyles + ' fill: #eee; visibility: hidden;';
                        }
                        else {
                            return commonStyles + ' fill: #333; visibility: visible;';
                        }
                    };
                    // Dynamically defines the CSS style for the region label text input.
                    ctrl.getRegionLabelEditorStyle = function () {
                        if (ctrl.selectedRegion === null) {
                            return 'display: none';
                        }
                        var area = cornerAndDimensionsFromRegionArea(ctrl.value.labeledRegions[ctrl.selectedRegion].region.area);
                        return 'left: ' + (area.x + 6) + 'px; ' +
                            'top: ' + (area.y + 26) + 'px; ' +
                            'width: ' + (area.width - 12) + 'px;';
                    };
                    ctrl.initializeEditor = function () {
                        // All coordinates have origin at top-left,
                        // increasing in x to the right and increasing in y down
                        // Current mouse position in SVG coordinates
                        ctrl.mouseX = 0;
                        ctrl.mouseY = 0;
                        // Original mouse click position for rectangle drawing.
                        ctrl.originalMouseX = 0;
                        ctrl.originalMouseY = 0;
                        // Original position and dimensions for dragged rectangle.
                        ctrl.originalRectArea = {
                            x: 0,
                            y: 0,
                            width: 0,
                            height: 0
                        };
                        // Coordinates for currently drawn rectangle (when user is dragging)
                        ctrl.rectX = 0;
                        ctrl.rectY = 0;
                        ctrl.rectWidth = 0;
                        ctrl.rectHeight = 0;
                        // Is user currently drawing a new region?
                        ctrl.userIsCurrentlyDrawing = false;
                        // Is user currently dragging an existing region?
                        ctrl.userIsCurrentlyDragging = false;
                        // Is user currently resizing an existing region?
                        ctrl.userIsCurrentlyResizing = false;
                        // The horizontal direction along which user resize occurs.
                        // 1 -> Left     -1 -> Right     0 -> No resize
                        ctrl.xDirection = 0;
                        // The vertical direction along which user resize occurs.
                        // 1 -> Top     -1 -> Bottom     0 -> No resize
                        ctrl.yDirection = 0;
                        // Flags to check whether the direction changes while resizing.
                        ctrl.yDirectionToggled = false;
                        ctrl.xDirectionToggled = false;
                        // A boolean that is set whenever the cursor moves out of the
                        // rectangular region while resizing.
                        ctrl.movedOutOfRegion = false;
                        // The region along borders that will display the resize cursor.
                        ctrl.resizableBorderWidthPx = 10;
                        // Dimensions of original image.
                        ctrl.originalImageWidth = 0;
                        ctrl.originalImageHeight = 0;
                        // Index of region currently hovered over.
                        ctrl.hoveredRegion = null;
                        // Index of region currently selected.
                        ctrl.selectedRegion = null;
                        // Message to displaye when there is an error.
                        ctrl.errorText = '';
                    };
                    ctrl.initializeEditor();
                    // Calculates the dimensions of the image, assuming that the width
                    // of the image is scaled down to fit the svg element if necessary.
                    var _calculateImageDimensions = function () {
                        var svgElement = $($element).find('.oppia-image-with-regions-editor-svg');
                        var displayedImageWidth = Math.min(svgElement.width(), ctrl.originalImageWidth);
                        var scalingRatio = displayedImageWidth / ctrl.originalImageWidth;
                        // Note that scalingRatio may be NaN if ctrl.originalImageWidth is
                        // zero.
                        var displayedImageHeight = (ctrl.originalImageWidth === 0 ? 0.0 :
                            ctrl.originalImageHeight * scalingRatio);
                        return {
                            width: displayedImageWidth,
                            height: displayedImageHeight
                        };
                    };
                    // Use these two functions to get the calculated image width and
                    // height.
                    ctrl.getImageWidth = function () {
                        return _calculateImageDimensions().width;
                    };
                    ctrl.getImageHeight = function () {
                        return _calculateImageDimensions().height;
                    };
                    ctrl.getPreviewUrl = function (imageUrl) {
                        return AssetsBackendApiService.getImageUrlForPreview(ENTITY_TYPE.EXPLORATION, ContextService.getExplorationId(), encodeURIComponent(imageUrl));
                    };
                    // Called when the image is changed to calculate the required
                    // width and height, especially for large images.
                    $scope.$watch('$ctrl.value.imagePath', function (newVal) {
                        if (newVal !== '') {
                            // Loads the image in hanging <img> tag so as to get the
                            // width and height.
                            $('<img/>').attr('src', ctrl.getPreviewUrl(newVal)).on('load', function () {
                                ctrl.originalImageWidth = this.width;
                                ctrl.originalImageHeight = this.height;
                                $scope.$apply();
                            });
                        }
                    });
                    var hasDuplicates = function (originalArray) {
                        var array = originalArray.slice(0).sort();
                        for (var i = 1; i < array.length; i++) {
                            if (array[i - 1] === array[i]) {
                                return true;
                            }
                        }
                        return false;
                    };
                    ctrl.regionLabelGetterSetter = function (index) {
                        return function (label) {
                            if (angular.isDefined(label)) {
                                ctrl.value.labeledRegions[index].label = label;
                                var labels = ctrl.value.labeledRegions.map(function (region) {
                                    return region.label;
                                });
                                if (hasDuplicates(labels)) {
                                    ctrl.errorText = 'Warning: Label "' + label + '" already ' +
                                        'exists! Please use a different label.';
                                }
                                else {
                                    ctrl.errorText = '';
                                }
                            }
                            return ctrl.value.labeledRegions[index].label;
                        };
                    };
                    var convertCoordsToFraction = function (coords, dimensions) {
                        return [coords[0] / dimensions[0], coords[1] / dimensions[1]];
                    };
                    // Convert to and from region area (which is stored as a fraction of
                    // image width and height) and actual width and height.
                    var regionAreaFromCornerAndDimensions = function (x, y, width, height) {
                        return [
                            convertCoordsToFraction([x, y], [ctrl.getImageWidth(), ctrl.getImageHeight()]),
                            convertCoordsToFraction([x + width, y + height], [ctrl.getImageWidth(), ctrl.getImageHeight()])
                        ];
                    };
                    var cornerAndDimensionsFromRegionArea = function (area) {
                        return {
                            x: area[0][0] * ctrl.getImageWidth(),
                            y: area[0][1] * ctrl.getImageHeight(),
                            width: (area[1][0] - area[0][0]) * ctrl.getImageWidth(),
                            height: (area[1][1] - area[0][1]) * ctrl.getImageHeight()
                        };
                    };
                    var resizeRegion = function () {
                        var labeledRegions = ctrl.value.labeledRegions;
                        var resizedRegion = labeledRegions[ctrl.selectedRegion].region;
                        var deltaX = ctrl.mouseX - ctrl.originalMouseX;
                        var deltaY = ctrl.mouseY - ctrl.originalMouseY;
                        var x = ctrl.originalRectArea.x;
                        var y = ctrl.originalRectArea.y;
                        var width = ctrl.originalRectArea.width;
                        var height = ctrl.originalRectArea.height;
                        var newWidth = width - ctrl.xDirection * deltaX;
                        var newHeight = height - ctrl.yDirection * deltaY;
                        // The distance between where the mouse was first clicked to
                        // initiate the resize action and the left-most x co-ordinate of
                        // rectangle.
                        var marginX = Math.abs(ctrl.originalRectArea.x - ctrl.originalMouseX);
                        // The distance between where the mouse was first clicked to
                        // initiate the resize action and the top-most y co-ordinate of
                        // rectangle.
                        var marginY = Math.abs(ctrl.originalRectArea.y - ctrl.originalMouseY);
                        if (newHeight <= 0 && !ctrl.yDirectionToggled) {
                            ctrl.yDirectionToggled = true;
                        }
                        else if (newHeight >= 0 && ctrl.yDirectionToggled) {
                            ctrl.yDirectionToggled = false;
                        }
                        if (ctrl.yDirection === 1) {
                            y += ctrl.yDirectionToggled ? (height + marginY) : deltaY;
                        }
                        else if (ctrl.yDirection === -1) {
                            y += ctrl.yDirectionToggled * (deltaY + marginY);
                        }
                        if (newWidth <= 0 && !ctrl.xDirectionToggled) {
                            ctrl.xDirectionToggled = true;
                        }
                        else if (newWidth >= 0 && ctrl.xDirectionToggled) {
                            ctrl.xDirectionToggled = false;
                        }
                        if (ctrl.xDirection === 1) {
                            x += ctrl.xDirectionToggled ? (width + marginX) : deltaX;
                        }
                        else if (ctrl.xDirection === -1) {
                            x += ctrl.xDirectionToggled * (deltaX + marginX);
                        }
                        // Whenever the direction changes the value of newHeight and
                        // newWidth computed is negative, hence the absolute value is taken.
                        resizedRegion.area = regionAreaFromCornerAndDimensions(x, y, Math.abs(newWidth), Math.abs(newHeight));
                    };
                    ctrl.onSvgMouseMove = function (evt) {
                        var svgElement = $($element).find('.oppia-image-with-regions-editor-svg');
                        ctrl.mouseX = evt.pageX - svgElement.offset().left;
                        ctrl.mouseY = evt.pageY - svgElement.offset().top;
                        if (ctrl.userIsCurrentlyDrawing) {
                            ctrl.rectX = Math.min(ctrl.originalMouseX, ctrl.mouseX);
                            ctrl.rectY = Math.min(ctrl.originalMouseY, ctrl.mouseY);
                            ctrl.rectWidth = Math.abs(ctrl.originalMouseX - ctrl.mouseX);
                            ctrl.rectHeight = Math.abs(ctrl.originalMouseY - ctrl.mouseY);
                        }
                        else if (ctrl.userIsCurrentlyDragging) {
                            var labeledRegions = ctrl.value.labeledRegions;
                            var draggedRegion = labeledRegions[ctrl.selectedRegion].region;
                            var deltaX = ctrl.mouseX - ctrl.originalMouseX;
                            var deltaY = ctrl.mouseY - ctrl.originalMouseY;
                            var newX1 = ctrl.originalRectArea.x + deltaX;
                            var newY1 = ctrl.originalRectArea.y + deltaY;
                            var newX2 = newX1 + ctrl.originalRectArea.width;
                            var newY2 = newY1 + ctrl.originalRectArea.height;
                            if (newX1 < 0) {
                                newX1 = 0;
                                newX2 = ctrl.originalRectArea.width;
                            }
                            if (newY1 < 0) {
                                newY1 = 0;
                                newY2 = ctrl.originalRectArea.height;
                            }
                            if (newX2 > ctrl.getImageWidth()) {
                                newX2 = ctrl.getImageWidth();
                                newX1 = newX2 - ctrl.originalRectArea.width;
                            }
                            if (newY2 > ctrl.getImageHeight()) {
                                newY2 = ctrl.getImageHeight();
                                newY1 = newY2 - ctrl.originalRectArea.height;
                            }
                            draggedRegion.area = regionAreaFromCornerAndDimensions(newX1, newY1, ctrl.originalRectArea.width, ctrl.originalRectArea.height);
                        }
                        else if (ctrl.userIsCurrentlyResizing) {
                            resizeRegion();
                        }
                    };
                    ctrl.onSvgMouseDown = function (evt) {
                        evt.preventDefault();
                        ctrl.originalMouseX = ctrl.mouseX;
                        ctrl.originalMouseY = ctrl.mouseY;
                        if (ctrl.hoveredRegion === null) {
                            ctrl.rectWidth = ctrl.rectHeight = 0;
                            ctrl.userIsCurrentlyDrawing = true;
                        }
                    };
                    ctrl.onSvgMouseUp = function () {
                        if (ctrl.hoveredRegion === null) {
                            ctrl.selectedRegion = null;
                        }
                        if (ctrl.yDirectionToggled) {
                            ctrl.yDirection = (ctrl.yDirection === 1) ? -1 : 1;
                        }
                        if (ctrl.xDirectionToggled) {
                            ctrl.xDirection = (ctrl.xDirection === 1) ? -1 : 1;
                        }
                        if (ctrl.movedOutOfRegion) {
                            ctrl.xDirection = 0;
                            ctrl.yDirection = 0;
                        }
                        if (ctrl.userIsCurrentlyDrawing) {
                            if (ctrl.rectWidth !== 0 && ctrl.rectHeight !== 0) {
                                var labels = ctrl.value.labeledRegions.map(function (region) {
                                    return region.label;
                                });
                                // Searches numbers starting from 1 to find a valid label
                                // that doesn't overlap with currently existing labels.
                                var newLabel = null;
                                for (var i = 1; i <= labels.length + 1; i++) {
                                    var candidateLabel = 'Region' + i.toString();
                                    if (labels.indexOf(candidateLabel) === -1) {
                                        newLabel = candidateLabel;
                                        break;
                                    }
                                }
                                var newRegion = {
                                    label: newLabel,
                                    region: {
                                        regionType: 'Rectangle',
                                        area: regionAreaFromCornerAndDimensions(ctrl.rectX, ctrl.rectY, ctrl.rectWidth, ctrl.rectHeight)
                                    }
                                };
                                ctrl.value.labeledRegions.push(newRegion);
                                ctrl.selectedRegion = (ctrl.value.labeledRegions.length - 1);
                            }
                        }
                        ctrl.userIsCurrentlyDrawing = false;
                        ctrl.userIsCurrentlyDragging = false;
                        ctrl.userIsCurrentlyResizing = false;
                        ctrl.movedOutOfRegion = false;
                        ctrl.yDirectionToggled = false;
                        ctrl.xDirectionToggled = false;
                    };
                    ctrl.onMouseoverRegion = function (index) {
                        if (ctrl.hoveredRegion === null) {
                            ctrl.hoveredRegion = index;
                        }
                        ctrl.movedOutOfRegion = false;
                    };
                    ctrl.onMouseMoveRegion = function () {
                        if (ctrl.userIsCurrentlyDragging ||
                            ctrl.userIsCurrentlyResizing) {
                            return;
                        }
                        var region = cornerAndDimensionsFromRegionArea(ctrl.value.labeledRegions[ctrl.hoveredRegion].region.area);
                        if (!ctrl.xDirectionToggled && !ctrl.yDirectionToggled) {
                            if (ctrl.mouseY <= region.y + ctrl.resizableBorderWidthPx) {
                                ctrl.yDirection = 1;
                            }
                            else if (ctrl.mouseY >= region.height + region.y -
                                ctrl.resizableBorderWidthPx) {
                                ctrl.yDirection = -1;
                            }
                            else {
                                ctrl.yDirection = 0;
                            }
                            if (ctrl.mouseX <= region.x + ctrl.resizableBorderWidthPx) {
                                ctrl.xDirection = 1;
                            }
                            else if (ctrl.mouseX >= region.width + region.x -
                                ctrl.resizableBorderWidthPx) {
                                ctrl.xDirection = -1;
                            }
                            else {
                                ctrl.xDirection = 0;
                            }
                        }
                    };
                    ctrl.onMouseoutRegion = function (index) {
                        if (ctrl.hoveredRegion === index) {
                            ctrl.hoveredRegion = null;
                        }
                        if (!ctrl.userIsCurrentlyResizing) {
                            ctrl.xDirection = 0;
                            ctrl.yDirection = 0;
                        }
                        ctrl.movedOutOfRegion = true;
                    };
                    ctrl.onMousedownRegion = function () {
                        if (ctrl.xDirection || ctrl.yDirection) {
                            ctrl.userIsCurrentlyResizing = true;
                        }
                        else {
                            ctrl.userIsCurrentlyDragging = true;
                        }
                        ctrl.selectedRegion = ctrl.hoveredRegion;
                        ctrl.originalRectArea = cornerAndDimensionsFromRegionArea(ctrl.value.labeledRegions[ctrl.hoveredRegion].region.area);
                    };
                    ctrl.regionLabelEditorMouseUp = function () {
                        ctrl.userIsCurrentlyDragging = false;
                        ctrl.userIsCurrentlyResizing = false;
                    };
                    ctrl.getCursorStyle = function () {
                        var xDirectionCursor = '';
                        var yDirectionCursor = '';
                        if (ctrl.xDirection || ctrl.yDirection) {
                            // User is resizing, so we figure out the direction.
                            if ((ctrl.xDirection === 1 && !ctrl.xDirectionToggled) ||
                                (ctrl.xDirection === -1 && ctrl.xDirectionToggled)) {
                                xDirectionCursor = 'w';
                            }
                            else if ((ctrl.xDirection === -1 && !ctrl.xDirectionToggled) ||
                                (ctrl.xDirection === 1 && ctrl.xDirectionToggled)) {
                                xDirectionCursor = 'e';
                            }
                            else {
                                xDirectionCursor = '';
                            }
                            if ((ctrl.yDirection === 1 && !ctrl.yDirectionToggled) ||
                                (ctrl.yDirection === -1 && ctrl.yDirectionToggled)) {
                                yDirectionCursor = 'n';
                            }
                            else if ((ctrl.yDirection === -1 && !ctrl.yDirectionToggled) ||
                                (ctrl.yDirection === 1 && ctrl.yDirectionToggled)) {
                                yDirectionCursor = 's';
                            }
                            else {
                                yDirectionCursor = '';
                            }
                            return yDirectionCursor + xDirectionCursor + '-resize';
                        }
                        else if (ctrl.hoveredRegion !== null) {
                            // User is not resizing but cursor is over a region.
                            return 'pointer';
                        }
                        return 'crosshair';
                    };
                    ctrl.resetEditor = function () {
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/' +
                                'image-with-regions-reset-confirmation.directive.html'),
                            backdrop: 'static',
                            keyboard: false,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss();
                                    };
                                    $scope.confirmClear = function () {
                                        $uibModalInstance.close();
                                    };
                                }
                            ]
                        }).result.then(function () {
                            ctrl.value.imagePath = '';
                            ctrl.value.labeledRegions = [];
                            ctrl.initializeEditor();
                        });
                    };
                    ctrl.deleteRegion = function (index) {
                        if (ctrl.selectedRegion === index) {
                            ctrl.selectedRegion = null;
                        }
                        else if (ctrl.selectedRegion > index) {
                            ctrl.selectedRegion--;
                        }
                        if (ctrl.hoveredRegion === index) {
                            ctrl.hoveredRegion = null;
                        }
                        else if (ctrl.hoveredRegion > index) {
                            ctrl.hoveredRegion--;
                        }
                        ctrl.value.labeledRegions.splice(index, 1);
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/int-editor.directive.ts":
/*!**************************************************************!*\
  !*** ./extensions/objects/templates/int-editor.directive.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for int editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('intEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/int-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'int',
                        validators: [{
                                id: 'is_integer'
                            }]
                    };
                    if (!ctrl.value) {
                        ctrl.value = 0;
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/list-of-sets-of-html-strings-editor.directive.ts":
/*!***************************************************************************************!*\
  !*** ./extensions/objects/templates/list-of-sets-of-html-strings-editor.directive.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for list of sets of html strings editor.
 */
angular.module('oppia').directive('listOfSetsOfHtmlStringsEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/' +
                'list-of-sets-of-html-strings-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    var errorMessage = '';
                    if (!ctrl.selectedRank) {
                        ctrl.selectedRank = '';
                    }
                    if (!ctrl.maxPrevIndex) {
                        ctrl.maxPrevIndex = 1;
                    }
                    ctrl.initValues = [];
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.choices = ctrl.initArgs.choices;
                    // Initialize the default values.
                    if (ctrl.value[0] === undefined || ctrl.value[0].length === 0) {
                        ctrl.value = [[]];
                        for (var i = 0; i < ctrl.choices.length; i++) {
                            ctrl.value[0].push(ctrl.choices[i].id);
                            ctrl.initValues.push(1);
                        }
                    }
                    else {
                        for (var i = 0; i < ctrl.choices.length; i++) {
                            for (var j = 0; j < ctrl.value.length; j++) {
                                var choice = ctrl.choices[i].id;
                                if (ctrl.value[j].indexOf(choice) !== -1) {
                                    ctrl.initValues.push(j + 1);
                                    ctrl.maxPrevIndex = math.max(ctrl.maxPrevIndex, j + 1);
                                    break;
                                }
                            }
                        }
                    }
                    if (ctrl.selectedRank !== '') {
                        ctrl.maxPrevIndex = math.max(parseInt(ctrl.selectedRank), ctrl.maxPrevIndex);
                    }
                    ctrl.allowedChoices = function () {
                        var allowedList = [];
                        for (var i = 0; i <= math.min(ctrl.maxPrevIndex, ctrl.choices.length - 1); i++) {
                            allowedList.push(i + 1);
                        }
                        return allowedList;
                    };
                    ctrl.selectedItem = function (choiceListIndex, selectedRankString) {
                        var choiceHtml = ctrl.choices[choiceListIndex].id;
                        var selectedRank = parseInt(selectedRankString) - 1;
                        errorMessage = '';
                        // Reorder the ctrl.choices array to make it consistent with the
                        // selected rank.
                        // ctrl.choices.splice(selectedRank, 0, ctrl.choices.splice(
                        // choiceListIndex, 1)[0]);
                        var choiceHtmlHasBeenAdded = false;
                        ctrl.maxPrevIndex = math.max(selectedRank + 1, ctrl.maxPrevIndex);
                        for (var i = 0; i < ctrl.value.length; i++) {
                            choiceHtmlHasBeenAdded = false;
                            var choiceHtmlIndex = ctrl.value[i].indexOf(choiceHtml);
                            if (choiceHtmlIndex > -1) {
                                if (i !== selectedRank) {
                                    ctrl.value[i].splice(choiceHtmlIndex, 1);
                                    if (ctrl.value[selectedRank] === undefined) {
                                        ctrl.value[selectedRank] = [choiceHtml];
                                    }
                                    else {
                                        ctrl.value[selectedRank].push(choiceHtml);
                                    }
                                }
                                choiceHtmlHasBeenAdded = true;
                                break;
                            }
                        }
                        for (var i = 0; i < ctrl.value.length; i++) {
                            if (ctrl.value[i].length === 0) {
                                if (i === ctrl.value.length - 1) {
                                    // If it is empty list at the last, pop it out.
                                    ctrl.value.pop();
                                }
                                else {
                                    // Continuity error.
                                    errorMessage = ('No choice(s) is assigned at position ' +
                                        String(i + 1) + '. Please assign some choice at this ' +
                                        'position.');
                                }
                            }
                        }
                        if (!choiceHtmlHasBeenAdded) {
                            if (ctrl.value[selectedRank] === undefined) {
                                ctrl.value[selectedRank] = [choiceHtml];
                            }
                            else {
                                ctrl.value[selectedRank].push(choiceHtml);
                            }
                        }
                    };
                    ctrl.getWarningText = function () {
                        return errorMessage;
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/list-of-tabs-editor.directive.ts":
/*!***********************************************************************!*\
  !*** ./extensions/objects/templates/list-of-tabs-editor.directive.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS-IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for list of tabs editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('listOfTabsEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/list-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'list',
                        items: {
                            type: 'dict',
                            properties: [{
                                    name: 'title',
                                    description: 'Tab title',
                                    schema: {
                                        type: 'unicode',
                                        validators: [{
                                                id: 'is_nonempty'
                                            }]
                                    }
                                }, {
                                    name: 'content',
                                    description: 'Tab content',
                                    schema: {
                                        type: 'html',
                                        ui_config: {
                                            hide_complex_extensions: true
                                        }
                                    }
                                }]
                        },
                        ui_config: {
                            add_element_text: 'Add new tab'
                        }
                    };
                    if (!ctrl.value) {
                        ctrl.value = [];
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/list-of-unicode-string-editor.directive.ts":
/*!*********************************************************************************!*\
  !*** ./extensions/objects/templates/list-of-unicode-string-editor.directive.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for list of unicode string editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('listOfUnicodeStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/list-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'list',
                        items: {
                            type: 'unicode'
                        }
                    };
                    if (!ctrl.value) {
                        ctrl.value = [];
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/logic-error-category-editor.directive.ts":
/*!*******************************************************************************!*\
  !*** ./extensions/objects/templates/logic-error-category-editor.directive.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for logic error category editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('logicErrorCategoryEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/logic-error-category-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.alwaysEditable = true;
                    ctrl.errorCategories = [{
                            name: 'parsing',
                            humanReadable: 'Unparseable'
                        }, {
                            name: 'typing',
                            humanReadable: 'Ill-typed'
                        }, {
                            name: 'line',
                            humanReadable: 'Incorrect line'
                        }, {
                            name: 'layout',
                            humanReadable: 'Wrong indenting'
                        }, {
                            name: 'variables',
                            humanReadable: 'Variables error'
                        }, {
                            name: 'logic',
                            humanReadable: 'Invalid deduction'
                        }, {
                            name: 'target',
                            humanReadable: 'Target not proved'
                        }, {
                            name: 'mistake',
                            humanReadable: 'Unspecified'
                        }];
                    ctrl.localValue = {
                        category: ctrl.errorCategories[0]
                    };
                    for (var i = 0; i < ctrl.errorCategories.length; i++) {
                        if (ctrl.errorCategories[i].name === ctrl.value) {
                            ctrl.localValue.category = ctrl.errorCategories[i];
                        }
                    }
                    $scope.$watch('$ctrl.localValue.category', function () {
                        ctrl.value = ctrl.localValue.category.name;
                    });
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/logic-question-editor.directive.ts":
/*!*************************************************************************!*\
  !*** ./extensions/objects/templates/logic-question-editor.directive.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Directive for logic question editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
var shared_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/shared.ts */ "./extensions/interactions/LogicProof/static/js/shared.ts"));
var teacher_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/teacher.ts */ "./extensions/interactions/LogicProof/static/js/teacher.ts"));
var data_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/data.ts */ "./extensions/interactions/LogicProof/static/js/data.ts"));
var conversion_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/conversion.ts */ "./extensions/interactions/LogicProof/static/js/conversion.ts"));
var generatedDefaultData_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/generatedDefaultData.ts */ "./extensions/interactions/LogicProof/static/js/generatedDefaultData.ts"));
angular.module('oppia').directive('logicQuestionEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/logic-question-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.alwaysEditable = true;
                    ctrl.localValue = {
                        assumptionsString: shared_ts_1.default.displayExpressionArray(ctrl.value.assumptions, data_ts_1.default.BASE_STUDENT_LANGUAGE.operators),
                        targetString: shared_ts_1.default.displayExpression(ctrl.value.results[0], data_ts_1.default.BASE_STUDENT_LANGUAGE.operators),
                        errorMessage: '',
                        proofString: ctrl.value.default_proof_string
                    };
                    // NOTE: we use ng-change rather than $watch because the latter runs in
                    // response to any change to the watched value, and we only want to
                    // respond to changes made by the user.
                    ctrl.changeAssumptions = function () {
                        ctrl.convertThenBuild('logicQuestionAssumptions', 'assumptionsString');
                    };
                    ctrl.changeTarget = function () {
                        ctrl.convertThenBuild('logicQuestionTarget', 'targetString');
                    };
                    ctrl.changeProof = function () {
                        ctrl.convertThenBuild('logicQuestionProof', 'proofString');
                    };
                    ctrl.convertThenBuild = function (elementID, nameOfString) {
                        var element = document.getElementById(elementID);
                        var cursorPosition = element.selectionEnd;
                        ctrl.localValue[nameOfString] =
                            conversion_ts_1.default.convertToLogicCharacters(ctrl.localValue[nameOfString]);
                        ctrl.buildQuestion();
                        // NOTE: angular will reset the position of the cursor after this
                        // function runs, so we need to delay our re-resetting.
                        setTimeout(function () {
                            element.selectionEnd = cursorPosition;
                        }, 2);
                    };
                    ctrl.buildQuestion = function () {
                        try {
                            var builtQuestion = angular.copy(teacher_ts_1.default.buildQuestion(ctrl.localValue.assumptionsString, ctrl.localValue.targetString, generatedDefaultData_ts_1.default.vocabulary));
                            ctrl.value = {
                                assumptions: builtQuestion.assumptions,
                                results: builtQuestion.results,
                                default_proof_string: ctrl.localValue.proofString
                            };
                            ctrl.localValue.errorMessage = '';
                        }
                        catch (err) {
                            ctrl.localValue.errorMessage = err.message;
                        }
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/math-latex-string-editor.directive.ts":
/*!****************************************************************************!*\
  !*** ./extensions/objects/templates/math-latex-string-editor.directive.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for math latex string editor.
 */
__webpack_require__(/*! directives/mathjax-bind.directive.ts */ "./core/templates/dev/head/directives/mathjax-bind.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('mathLatexStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getAlwaysEditable: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/math-latex-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.placeholderText = '\\frac{x}{y}';
                    ctrl.alwaysEditable = ctrl.getAlwaysEditable();
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function () {
                        ctrl.localValue = {
                            label: ctrl.value || ''
                        };
                    }, true);
                    if (ctrl.alwaysEditable) {
                        $scope.$watch('$ctrl.localValue.label', function (newValue) {
                            ctrl.value = newValue;
                        });
                    }
                    else {
                        ctrl.openEditor = function () {
                            ctrl.active = true;
                        };
                        ctrl.closeEditor = function () {
                            ctrl.active = false;
                        };
                        ctrl.replaceValue = function (newValue) {
                            ctrl.localValue = {
                                label: newValue
                            };
                            ctrl.value = newValue;
                            ctrl.closeEditor();
                        };
                        $scope.$on('externalSave', function () {
                            if (ctrl.active) {
                                ctrl.replaceValue(ctrl.localValue.label);
                                // The $scope.$apply() call is needed to propagate the replaced
                                // value.
                                $scope.$apply();
                            }
                        });
                        ctrl.closeEditor();
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/music-phrase-editor.directive.ts":
/*!***********************************************************************!*\
  !*** ./extensions/objects/templates/music-phrase-editor.directive.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2012 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for music phrase editor.
 */
// This directive is always editable.
angular.module('oppia').directive('musicPhraseEditor', [
    'AlertsService', 'UrlInterpolationService',
    function (AlertsService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/music-phrase-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    // The maximum number of notes allowed in a music phrase.
                    var _MAX_NOTES_IN_PHRASE = 8;
                    ctrl.schema = {
                        type: 'list',
                        items: {
                            type: 'unicode',
                            choices: [
                                'C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5', 'D5', 'E5', 'F5',
                                'G5', 'A5'
                            ]
                        },
                        ui_config: {
                            add_element_text: 'Add Note ♩'
                        },
                        validators: [{
                                id: 'has_length_at_most',
                                max_value: _MAX_NOTES_IN_PHRASE
                            }]
                    };
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function (newValue) {
                        // TODO(sll): Check that $ctrl.value is a list.
                        ctrl.localValue = [];
                        if (newValue) {
                            for (var i = 0; i < newValue.length; i++) {
                                ctrl.localValue.push(newValue[i].readableNoteName);
                            }
                        }
                    }, true);
                    $scope.$watch('$ctrl.localValue', function (newValue, oldValue) {
                        if (newValue && oldValue) {
                            if (newValue.length > _MAX_NOTES_IN_PHRASE) {
                                AlertsService.addWarning('There are too many notes on the staff.');
                            }
                            else {
                                var parentValues = [];
                                for (var i = 0; i < newValue.length; i++) {
                                    parentValues.push({
                                        readableNoteName: newValue[i],
                                        noteDuration: {
                                            num: 1,
                                            den: 1
                                        }
                                    });
                                }
                                ctrl.value = parentValues;
                            }
                        }
                    }, true);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/nonnegative-int-editor.directive.ts":
/*!**************************************************************************!*\
  !*** ./extensions/objects/templates/nonnegative-int-editor.directive.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2012 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for non negative int editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('nonnegativeIntEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/nonnegative-int-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'int',
                        validators: [{
                                id: 'is_at_least',
                                min_value: 0
                            }, {
                                id: 'is_integer'
                            }]
                    };
                    if (!ctrl.value) {
                        ctrl.value = 0;
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/normalized-string-editor.directive.ts":
/*!****************************************************************************!*\
  !*** ./extensions/objects/templates/normalized-string-editor.directive.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for normalized string editor.
 */
// This is a copy of the UnicodeStringEditor.
angular.module('oppia').directive('normalizedStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getAlwaysEditable: '&',
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/unicode-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.alwaysEditable = ctrl.getAlwaysEditable();
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.largeInput = false;
                    $scope.$watch('$ctrl.initArgs', function (newValue) {
                        ctrl.largeInput = false;
                        if (newValue && newValue.largeInput) {
                            ctrl.largeInput = newValue.largeInput;
                        }
                    });
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function () {
                        ctrl.localValue = {
                            label: ctrl.value || ''
                        };
                    }, true);
                    if (ctrl.alwaysEditable) {
                        $scope.$watch('$ctrl.localValue.label', function (newValue) {
                            ctrl.value = newValue;
                        });
                    }
                    else {
                        ctrl.openEditor = function () {
                            ctrl.active = true;
                        };
                        ctrl.closeEditor = function () {
                            ctrl.active = false;
                        };
                        ctrl.replaceValue = function (newValue) {
                            ctrl.localValue = {
                                label: newValue
                            };
                            ctrl.value = newValue;
                            ctrl.closeEditor();
                        };
                        $scope.$on('externalSave', function () {
                            if (ctrl.active) {
                                ctrl.replaceValue(ctrl.localValue.label);
                                // The $scope.$apply() call is needed to propagate the replaced
                                // value.
                                $scope.$apply();
                            }
                        });
                        ctrl.closeEditor();
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/number-with-units-editor.directive.ts":
/*!****************************************************************************!*\
  !*** ./extensions/objects/templates/number-with-units-editor.directive.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for number with units editor.
 */
angular.module('oppia').directive('numberWithUnitsEditor', [
    'NumberWithUnitsObjectFactory', 'UrlInterpolationService',
    function (NumberWithUnitsObjectFactory, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/number-with-units-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    var errorMessage = '';
                    var numberWithUnitsString = '';
                    if (ctrl.value !== null) {
                        var defaultNumberWithUnits = NumberWithUnitsObjectFactory.fromDict(ctrl.value);
                        numberWithUnitsString = defaultNumberWithUnits.toString();
                    }
                    ctrl.localValue = {
                        label: numberWithUnitsString
                    };
                    $scope.$watch('$ctrl.localValue.label', function (newValue) {
                        try {
                            var numberWithUnits = NumberWithUnitsObjectFactory.fromRawInputString(newValue);
                            ctrl.value = numberWithUnits;
                            errorMessage = '';
                        }
                        catch (parsingError) {
                            errorMessage = parsingError.message;
                        }
                    });
                    ctrl.getWarningText = function () {
                        return errorMessage;
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/parameter-name-editor.directive.ts":
/*!*************************************************************************!*\
  !*** ./extensions/objects/templates/parameter-name-editor.directive.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for parameter name editor.
 */
// NOTE TO DEVELOPERS: This editor requires ExplorationParamSpecsService to be
// available in the context in which it is used.
angular.module('oppia').directive('parameterNameEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/parameter-name-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$attrs', 'ExplorationParamSpecsService',
                function ($scope, $attrs, ExplorationParamSpecsService) {
                    var ctrl = this;
                    ctrl.availableParamNames =
                        ExplorationParamSpecsService.savedMemento.getParamNames();
                    if (ctrl.availableParamNames.length === 0) {
                        ctrl.localValue = null;
                    }
                    else {
                        ctrl.localValue = ctrl.availableParamNames[0];
                    }
                    ctrl.validate = function () {
                        return (ctrl.availableParamNames.length === 0) ? false : true;
                    };
                    ctrl.SCHEMA = {
                        type: 'unicode',
                        choices: ctrl.availableParamNames
                    };
                    // Reset the component each time the value changes (e.g. if this is
                    // part of an editable list).
                    $scope.$watch('$ctrl.value', function (newValue) {
                        if (newValue) {
                            ctrl.localValue = newValue;
                        }
                    }, true);
                    $scope.$watch('$ctrl.localValue', function (newValue) {
                        ctrl.value = newValue;
                    });
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/real-editor.directive.ts":
/*!***************************************************************!*\
  !*** ./extensions/objects/templates/real-editor.directive.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for real editor.
 */
angular.module('oppia').directive('realEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/real-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.schema = {
                        type: 'float'
                    };
                    $scope.$watch('$ctrl.value', function () {
                        if (ctrl.value === '') {
                            // A new rule
                            ctrl.value = 0.0;
                        }
                    });
                    if (ctrl.value === '') {
                        ctrl.value = 0.0;
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/sanitized-url-editor.directive.ts":
/*!************************************************************************!*\
  !*** ./extensions/objects/templates/sanitized-url-editor.directive.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for sanitized URL editor.
 */
angular.module('oppia').directive('sanitizedUrlEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        // Editable URL directive.
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/sanitized-url-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'unicode',
                        validators: [{
                                id: 'is_nonempty'
                            }],
                        ui_config: {
                            placeholder: 'https://www.example.com'
                        }
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/set-of-html-string-editor.directive.ts":
/*!*****************************************************************************!*\
  !*** ./extensions/objects/templates/set-of-html-string-editor.directive.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2012 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for set of HTML string editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('setOfHtmlStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/set-of-html-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'list',
                        items: {
                            type: 'html'
                        }
                    };
                    if (!ctrl.value) {
                        ctrl.value = [];
                    }
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.choices = ctrl.initArgs.choices;
                    ctrl.selections = ctrl.choices.map(function (choice) {
                        return ctrl.value.indexOf(choice.id) !== -1;
                    });
                    // The following function is necessary to insert elements into the
                    // answer groups for the Item Selection Widget.
                    ctrl.toggleSelection = function (choiceListIndex) {
                        var choiceHtml = ctrl.choices[choiceListIndex].id;
                        var selectedChoicesIndex = ctrl.value.indexOf(choiceHtml);
                        if (selectedChoicesIndex > -1) {
                            ctrl.value.splice(selectedChoicesIndex, 1);
                        }
                        else {
                            ctrl.value.push(choiceHtml);
                        }
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/set-of-unicode-string-editor.directive.ts":
/*!********************************************************************************!*\
  !*** ./extensions/objects/templates/set-of-unicode-string-editor.directive.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for set of unicode string editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('setOfUnicodeStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/list-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'list',
                        items: {
                            type: 'unicode'
                        },
                        validators: [{
                                id: 'is_uniquified'
                            }]
                    };
                    if (!ctrl.value) {
                        ctrl.value = [];
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/unicode-string-editor.directive.ts":
/*!*************************************************************************!*\
  !*** ./extensions/objects/templates/unicode-string-editor.directive.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for unicode string editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('unicodeStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getAlwaysEditable: '&',
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/unicode-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.alwaysEditable = ctrl.getAlwaysEditable();
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.largeInput = false;
                    $scope.$watch('$ctrl.initArgs', function (newValue) {
                        ctrl.largeInput = false;
                        if (newValue && newValue.largeInput) {
                            ctrl.largeInput = newValue.largeInput;
                        }
                    });
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function () {
                        ctrl.localValue = {
                            label: ctrl.value || ''
                        };
                    }, true);
                    if (ctrl.alwaysEditable) {
                        $scope.$watch('$ctrl.localValue.label', function (newValue) {
                            ctrl.value = newValue;
                        });
                    }
                    else {
                        ctrl.openEditor = function () {
                            ctrl.active = true;
                        };
                        ctrl.closeEditor = function () {
                            ctrl.active = false;
                        };
                        ctrl.replaceValue = function (newValue) {
                            ctrl.localValue = {
                                label: newValue
                            };
                            ctrl.value = newValue;
                            ctrl.closeEditor();
                        };
                        $scope.$on('externalSave', function () {
                            if (ctrl.active) {
                                ctrl.replaceValue(ctrl.localValue.label);
                                // The $scope.$apply() call is needed to propagate the replaced
                                // value.
                                $scope.$apply();
                            }
                        });
                        ctrl.closeEditor();
                    }
                }]
        };
    }
]);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,