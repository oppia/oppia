/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"creator_dashboard": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.scripts.ts","vendors~about~admin~collection_editor~collection_player~community_dashboard~contact~creator_dashboar~7856c05a","vendors~admin~collection_editor~collection_player~creator_dashboard~exploration_editor~exploration_p~7f8bcc67","vendors~admin~collection_editor~creator_dashboard~exploration_editor~exploration_player~practice_ses~988cfeb1","vendors~creator_dashboard~exploration_editor~exploration_player~practice_session~review_test~skill_e~61b3d15e","about~admin~collection_editor~collection_player~community_dashboard~contact~creator_dashboard~donate~e06a4a17","admin~creator_dashboard~exploration_editor~exploration_player~moderator~practice_session~review_test~b9580ed0","admin~creator_dashboard~exploration_editor~exploration_player~moderator~practice_session~review_test~d3595155","collection_player~creator_dashboard~learner_dashboard~library~profile~story_viewer"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./core/templates/dev/head/base_components/BaseContentDirective.ts":
/*!*************************************************************************!*\
  !*** ./core/templates/dev/head/base_components/BaseContentDirective.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Base Transclusion Component.
 */
__webpack_require__(/*! base_components/WarningLoaderDirective.ts */ "./core/templates/dev/head/base_components/WarningLoaderDirective.ts");
__webpack_require__(/*! pages/OppiaFooterDirective.ts */ "./core/templates/dev/head/pages/OppiaFooterDirective.ts");
__webpack_require__(/*! domain/sidebar/SidebarStatusService.ts */ "./core/templates/dev/head/domain/sidebar/SidebarStatusService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/stateful/BackgroundMaskService.ts */ "./core/templates/dev/head/services/stateful/BackgroundMaskService.ts");
angular.module('oppia').directive('baseContent', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            transclude: {
                breadcrumb: '?navbarBreadcrumb',
                content: 'content',
                footer: '?pageFooter',
                navOptions: '?navOptions',
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/base_components/base_content_directive.html'),
            controllerAs: '$ctrl',
            controller: ['$rootScope', 'BackgroundMaskService',
                'SidebarStatusService', 'UrlService', 'SITE_FEEDBACK_FORM_URL',
                function ($rootScope, BackgroundMaskService, SidebarStatusService, UrlService, SITE_FEEDBACK_FORM_URL) {
                    var ctrl = this;
                    ctrl.iframed = UrlService.isIframed();
                    ctrl.siteFeedbackFormUrl = SITE_FEEDBACK_FORM_URL;
                    ctrl.isSidebarShown = SidebarStatusService.isSidebarShown;
                    ctrl.closeSidebarOnSwipe = SidebarStatusService.closeSidebar;
                    ctrl.isBackgroundMaskActive = BackgroundMaskService.isMaskActive;
                    ctrl.DEV_MODE = $rootScope.DEV_MODE;
                    ctrl.skipToMainContent = function () {
                        var mainContentElement = document.getElementById('oppia-main-content');
                        if (!mainContentElement) {
                            throw Error('Variable mainContentElement is undefined.');
                        }
                        mainContentElement.tabIndex = -1;
                        mainContentElement.scrollIntoView();
                        mainContentElement.focus();
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/base_components/WarningLoaderDirective.ts":
/*!***************************************************************************!*\
  !*** ./core/templates/dev/head/base_components/WarningLoaderDirective.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for warning_loader.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('oppia').directive('warningLoader', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/base_components/warning_loader_directive.html'),
            controllerAs: '$ctrl',
            controller: ['AlertsService',
                function (AlertsService) {
                    var ctrl = this;
                    ctrl.AlertsService = AlertsService;
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/button-directives/exploration-embed-button.service.ts":
/*!**************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/button-directives/exploration-embed-button.service.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for the 'embed exploration' modal.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/SiteAnalyticsService.ts */ "./core/templates/dev/head/services/SiteAnalyticsService.ts");
angular.module('oppia').factory('ExplorationEmbedButtonService', [
    '$uibModal', 'SiteAnalyticsService', 'UrlInterpolationService',
    function ($uibModal, SiteAnalyticsService, UrlInterpolationService) {
        return {
            showModal: function (explorationId) {
                $uibModal.open({
                    backdrop: true,
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/button-directives/' +
                        'exploration-embed-button.directive.html'),
                    resolve: {
                        explorationId: function () {
                            return explorationId;
                        }
                    },
                    controller: [
                        '$scope', '$uibModalInstance', '$window', 'explorationId',
                        function ($scope, $uibModalInstance, $window, explorationId) {
                            $scope.explorationId = explorationId;
                            $scope.serverName = ($window.location.protocol + '//' + $window.location.host);
                            $scope.close = function () {
                                $uibModalInstance.dismiss('close');
                            };
                            $scope.selectText = function (evt) {
                                var codeDiv = evt.currentTarget;
                                var range = document.createRange();
                                range.setStartBefore(codeDiv.firstChild);
                                range.setEndAfter(codeDiv.lastChild);
                                var selection = window.getSelection();
                                selection.removeAllRanges();
                                selection.addRange(range);
                            };
                        }
                    ]
                });
                SiteAnalyticsService.registerOpenEmbedInfoEvent(explorationId);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/common-layout-directives/common-elements/background-banner.directive.ts":
/*!********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/common-layout-directives/common-elements/background-banner.directive.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the background banner.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('backgroundBanner', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/common-layout-directives/common-elements/' +
                'background-banner.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                function () {
                    var ctrl = this;
                    var possibleBannerFilenames = [
                        'bannerA.svg', 'bannerB.svg', 'bannerC.svg', 'bannerD.svg'
                    ];
                    var bannerImageFilename = possibleBannerFilenames[Math.floor(Math.random() * possibleBannerFilenames.length)];
                    ctrl.bannerImageFileUrl = UrlInterpolationService.getStaticImageUrl('/background/' + bannerImageFilename);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/common-layout-directives/common-elements/sharing-links.directive.ts":
/*!****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/common-layout-directives/common-elements/sharing-links.directive.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Social Sharing Links.
 */
__webpack_require__(/*! components/button-directives/exploration-embed-button.service.ts */ "./core/templates/dev/head/components/button-directives/exploration-embed-button.service.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/SiteAnalyticsService.ts */ "./core/templates/dev/head/services/SiteAnalyticsService.ts");
angular.module('oppia').directive('sharingLinks', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                layoutType: '@',
                layoutAlignType: '@',
                shareType: '@',
                getExplorationId: '&explorationId',
                getCollectionId: '&collectionId'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/common-layout-directives/common-elements/' +
                'sharing-links.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$window', 'HtmlEscaperService',
                'ExplorationEmbedButtonService', 'SiteAnalyticsService',
                'DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR',
                function ($window, HtmlEscaperService, ExplorationEmbedButtonService, SiteAnalyticsService, DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR) {
                    var ctrl = this;
                    ctrl.registerShareEvent = null;
                    if (ctrl.shareType === 'exploration') {
                        ctrl.explorationId = ctrl.getExplorationId();
                        ctrl.activityType = 'explore';
                        ctrl.activityId = ctrl.explorationId;
                        ctrl.registerShareEvent = (SiteAnalyticsService.registerShareExplorationEvent);
                        ctrl.showEmbedExplorationModal = (ExplorationEmbedButtonService.showModal);
                    }
                    else if (ctrl.shareType === 'collection') {
                        ctrl.collectionId = ctrl.getCollectionId();
                        ctrl.activityType = 'collection';
                        ctrl.activityId = ctrl.collectionId;
                        ctrl.registerShareEvent = (SiteAnalyticsService.registerShareCollectionEvent);
                    }
                    else {
                        throw Error('SharingLinks directive can only be used either in the' +
                            'collection player or the exploration player');
                    }
                    ctrl.serverName = ($window.location.protocol + '//' + $window.location.host);
                    ctrl.escapedTwitterText = (HtmlEscaperService.unescapedStrToEscapedStr(DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR));
                    ctrl.classroomUrl = UrlInterpolationService.getStaticImageUrl('/general/classroom.png');
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/custom-forms-directives/image-uploader.directive.ts":
/*!******************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/custom-forms-directives/image-uploader.directive.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for uploading images.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/IdGenerationService.ts */ "./core/templates/dev/head/services/IdGenerationService.ts");
angular.module('oppia').directive('imageUploader', [
    'IdGenerationService', 'UrlInterpolationService',
    function (IdGenerationService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                height: '@',
                onFileChanged: '=',
                errorMessage: '@',
                width: '@'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/custom-forms-directives/' +
                'image-uploader.directive.html'),
            link: function (scope, elt) {
                var onDragEnd = function (e) {
                    e.preventDefault();
                    $('.image-uploader-drop-area').removeClass('image-uploader-is-active');
                };
                var validateUploadedFile = function (file, filename) {
                    if (!file || !file.size || !file.type.match('image.*')) {
                        return 'This file is not recognized as an image.';
                    }
                    if (!file.type.match('image.jpeg') &&
                        !file.type.match('image.gif') &&
                        !file.type.match('image.jpg') &&
                        !file.type.match('image.png')) {
                        return 'This image format is not supported.';
                    }
                    if ((file.type.match(/jp(e?)g$/) && !file.name.match(/\.jp(e?)g$/)) ||
                        (file.type.match(/gif$/) && !file.name.match(/\.gif$/)) ||
                        (file.type.match(/png$/) && !file.name.match(/\.png$/))) {
                        return 'This image format does not match the filename extension.';
                    }
                    var ONE_MB_IN_BYTES = 1048576;
                    if (file.size > ONE_MB_IN_BYTES) {
                        var currentSize = (file.size / ONE_MB_IN_BYTES).toFixed(1) + ' MB';
                        return 'The maximum allowed file size is 1 MB' +
                            ' (' + currentSize + ' given).';
                    }
                    return null;
                };
                $(elt).bind('drop', function (e) {
                    onDragEnd(e);
                    var file = e.originalEvent.dataTransfer.files[0];
                    scope.errorMessage = validateUploadedFile(file, file.name);
                    if (!scope.errorMessage) {
                        // Only fire this event if validations pass.
                        scope.onFileChanged(file, file.name);
                    }
                    scope.$apply();
                });
                $(elt).bind('dragover', function (e) {
                    e.preventDefault();
                    $('.image-uploader-drop-area').addClass('image-uploader-is-active');
                });
                $(elt).bind('dragleave', onDragEnd);
                // If the user accidentally drops an image outside of the image-uploader
                // we want to prevent the browser from applying normal drag-and-drop
                // logic, which is to load the image in the browser tab.
                $(window).bind('dragover', function (e) {
                    e.preventDefault();
                });
                $(window).bind('drop', function (e) {
                    e.preventDefault();
                });
                // We generate a random class name to distinguish this input from
                // others in the DOM.
                scope.fileInputClassName = ('image-uploader-file-input' + IdGenerationService.generateNewId());
                angular.element(document).on('change', '.' + scope.fileInputClassName, function (evt) {
                    var file = evt.currentTarget.files[0];
                    var filename = evt.target.value.split(/(\\|\/)/g).pop();
                    scope.errorMessage = validateUploadedFile(file, filename);
                    if (!scope.errorMessage) {
                        // Only fire this event if validations pass.
                        scope.onFileChanged(file, filename);
                    }
                    scope.$apply();
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-editor.service.ts":
/*!******************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-editor.service.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview A service that maintains a record of the objects exclusive to
 * a state.
 */
var cloneDeep_1 = __importDefault(__webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js"));
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var solution_validity_service_1 = __webpack_require__(/*! pages/exploration-editor-page/editor-tab/services/solution-validity.service */ "./core/templates/dev/head/pages/exploration-editor-page/editor-tab/services/solution-validity.service.ts");
/* eslint-enable max-len */
var StateEditorService = /** @class */ (function () {
    function StateEditorService(solutionValidityService) {
        this.solutionValidityService = solutionValidityService;
        this.activeStateName = null;
        this.stateNames = [];
        this.correctnessFeedbackEnabled = null;
        this.inQuestionMode = null;
        // Currently, the only place where this is used in the state editor
        // is in solution verification. So, once the interaction is set in this
        // service, the given solutions would be automatically verified for the set
        // interaction.
        // TODO(#7165): Replace 'any' with the exact type. This has been kept as
        // 'any' because the return type is a interaction domain object which can be
        // typed once InteractionObjectFactory is upgraded.
        this.interaction = null;
        this.misconceptionsBySkill = {};
        this.explorationIsWhitelisted = false;
        this.solicitAnswerDetails = null;
    }
    StateEditorService.prototype.getActiveStateName = function () {
        return this.activeStateName;
    };
    StateEditorService.prototype.setActiveStateName = function (newActiveStateName) {
        if (newActiveStateName === '' || newActiveStateName === null) {
            console.error('Invalid active state name: ' + newActiveStateName);
            return;
        }
        this.activeStateName = newActiveStateName;
    };
    StateEditorService.prototype.isExplorationWhitelisted = function () {
        return this.explorationIsWhitelisted;
    };
    StateEditorService.prototype.updateExplorationWhitelistedStatus = function (value) {
        this.explorationIsWhitelisted = value;
    };
    StateEditorService.prototype.setMisconceptionsBySkill = function (newMisconceptionsBySkill) {
        this.misconceptionsBySkill = newMisconceptionsBySkill;
    };
    StateEditorService.prototype.getMisconceptionsBySkill = function () {
        return this.misconceptionsBySkill;
    };
    StateEditorService.prototype.setInteraction = function (newInteraction) {
        this.interaction = newInteraction;
    };
    StateEditorService.prototype.setInteractionId = function (newId) {
        this.interaction.setId(newId);
    };
    StateEditorService.prototype.setInteractionAnswerGroups = function (newAnswerGroups) {
        this.interaction.setAnswerGroups(newAnswerGroups);
    };
    StateEditorService.prototype.setInteractionDefaultOutcome = function (newOutcome) {
        this.interaction.setDefaultOutcome(newOutcome);
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'newArgs' is a dict with underscore_cased keys which
    // give tslint errors against underscore_casing in favor of camelCasing.
    StateEditorService.prototype.setInteractionCustomizationArgs = function (newArgs) {
        this.interaction.setCustomizationArgs(newArgs);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'solution' is a solution domain object which can be typed
    // once SolutionObjectFactory is upgraded.
    StateEditorService.prototype.setInteractionSolution = function (solution) {
        this.interaction.setSolution(solution);
    };
    StateEditorService.prototype.setInteractionHints = function (hints) {
        this.interaction.setHints(hints);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a interaction domain object which can be
    // typed once InteractionObjectFactory is upgraded.
    StateEditorService.prototype.getInteraction = function () {
        return cloneDeep_1.default(this.interaction);
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    StateEditorService.prototype.getAnswerChoices = function (interactionId, customizationArgs) {
        if (!interactionId) {
            return null;
        }
        // Special cases for multiple choice input and image click input.
        if (interactionId === 'MultipleChoiceInput') {
            return customizationArgs.choices.value.map(function (val, ind) {
                return {
                    val: ind,
                    label: val
                };
            });
        }
        else if (interactionId === 'ImageClickInput') {
            var _answerChoices = [];
            var imageWithRegions = customizationArgs.imageAndRegions.value;
            for (var j = 0; j < imageWithRegions.labeledRegions.length; j++) {
                _answerChoices.push({
                    val: imageWithRegions.labeledRegions[j].label,
                    label: imageWithRegions.labeledRegions[j].label
                });
            }
            return _answerChoices;
        }
        else if (interactionId === 'ItemSelectionInput' ||
            interactionId === 'DragAndDropSortInput') {
            return customizationArgs.choices.value.map(function (val) {
                return {
                    val: val,
                    label: val
                };
            });
        }
        else {
            return null;
        }
    };
    StateEditorService.prototype.setInQuestionMode = function (newModeValue) {
        this.inQuestionMode = newModeValue;
    };
    StateEditorService.prototype.isInQuestionMode = function () {
        return this.inQuestionMode;
    };
    StateEditorService.prototype.setCorrectnessFeedbackEnabled = function (newCorrectnessFeedbackEnabled) {
        this.correctnessFeedbackEnabled = newCorrectnessFeedbackEnabled;
    };
    StateEditorService.prototype.getCorrectnessFeedbackEnabled = function () {
        return this.correctnessFeedbackEnabled;
    };
    StateEditorService.prototype.setSolicitAnswerDetails = function (newSolicitAnswerDetails) {
        this.solicitAnswerDetails = newSolicitAnswerDetails;
    };
    StateEditorService.prototype.getSolicitAnswerDetails = function () {
        return this.solicitAnswerDetails;
    };
    StateEditorService.prototype.setStateNames = function (newStateNames) {
        this.stateNames = newStateNames;
    };
    StateEditorService.prototype.getStateNames = function () {
        return this.stateNames;
    };
    StateEditorService.prototype.isCurrentSolutionValid = function () {
        return this.solutionValidityService.isSolutionValid(this.activeStateName);
    };
    StateEditorService.prototype.deleteCurrentSolutionValidity = function () {
        this.solutionValidityService.deleteSolutionValidity(this.activeStateName);
    };
    var _a;
    StateEditorService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof solution_validity_service_1.SolutionValidityService !== "undefined" && solution_validity_service_1.SolutionValidityService) === "function" ? _a : Object])
    ], StateEditorService);
    return StateEditorService;
}());
exports.StateEditorService = StateEditorService;
angular.module('oppia').factory('StateEditorService', static_1.downgradeInjectable(StateEditorService));


/***/ }),

/***/ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-interaction-id.service.ts":
/*!**************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-interaction-id.service.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A data service that stores the current interaction id.
 */
// TODO(sll): Add validation.
angular.module('oppia').factory('StateInteractionIdService', [
    'StatePropertyService', function (StatePropertyService) {
        var child = Object.create(StatePropertyService);
        child.setterMethodKey = 'saveInteractionId';
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-property.service.ts":
/*!********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-property.service.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Standalone services for the general state editor page.
 */
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('oppia').factory('StatePropertyService', [
    'AlertsService',
    function (AlertsService) {
        // Public base API for data services corresponding to state properties
        // (interaction id, content, etc.)
        // WARNING: This should be initialized only in the context of the state
        // editor, and every time the state is loaded, so that proper behavior is
        // maintained if e.g. the state is renamed.
        return {
            init: function (stateName, value) {
                if (this.setterMethodKey === null) {
                    throw 'State property setter method key cannot be null.';
                }
                // The name of the state.
                this.stateName = stateName;
                // The current value of the property (which may not have been saved to
                // the frontend yet). In general, this will be bound directly to the UI.
                this.displayed = angular.copy(value);
                // The previous (saved-in-the-frontend) value of the property. Here,
                // 'saved' means that this is the latest value of the property as
                // determined by the frontend change list.
                this.savedMemento = angular.copy(value);
            },
            // Returns whether the current value has changed from the memento.
            hasChanged: function () {
                return !angular.equals(this.savedMemento, this.displayed);
            },
            // The name of the setter method in ExplorationStatesService for this
            // property. THIS MUST BE SPECIFIED BY SUBCLASSES.
            setterMethodKey: null,
            // Transforms the given value into a normalized form. THIS CAN BE
            // OVERRIDDEN BY SUBCLASSES. The default behavior is to do nothing.
            _normalize: function (value) {
                return value;
            },
            // Validates the given value and returns a boolean stating whether it
            // is valid or not. THIS CAN BE OVERRIDDEN BY SUBCLASSES. The default
            // behavior is to always return true.
            _isValid: function (value) {
                return true;
            },
            // Updates the memento to the displayed value.
            saveDisplayedValue: function () {
                if (this.setterMethodKey === null) {
                    throw 'State property setter method key cannot be null.';
                }
                this.displayed = this._normalize(this.displayed);
                if (!this._isValid(this.displayed) || !this.hasChanged()) {
                    this.restoreFromMemento();
                    return;
                }
                if (angular.equals(this.displayed, this.savedMemento)) {
                    return;
                }
                AlertsService.clearWarnings();
                this.savedMemento = angular.copy(this.displayed);
            },
            // Reverts the displayed value to the saved memento.
            restoreFromMemento: function () {
                this.displayed = angular.copy(this.savedMemento);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ajs.ts":
/*!**************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ajs.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for summary tile for collections.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var collection_summary_tile_constants_1 = __webpack_require__(/*! components/summary-tile/collection-summary-tile.constants */ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ts");
angular.module('oppia').constant('COLLECTION_VIEWER_URL', collection_summary_tile_constants_1.CollectionSummaryTileConstants.COLLECTION_VIEWER_URL);
angular.module('oppia').constant('COLLECTION_EDITOR_URL', collection_summary_tile_constants_1.CollectionSummaryTileConstants.COLLECTION_EDITOR_URL);


/***/ }),

/***/ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ts":
/*!**********************************************************************************************!*\
  !*** ./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for summary tile for collections.
 */
var CollectionSummaryTileConstants = /** @class */ (function () {
    function CollectionSummaryTileConstants() {
    }
    CollectionSummaryTileConstants.COLLECTION_VIEWER_URL = '/collection/<collection_id>';
    CollectionSummaryTileConstants.COLLECTION_EDITOR_URL = '/collection_editor/create/<collection_id>';
    return CollectionSummaryTileConstants;
}());
exports.CollectionSummaryTileConstants = CollectionSummaryTileConstants;


/***/ }),

/***/ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.directive.ts":
/*!**********************************************************************************************!*\
  !*** ./core/templates/dev/head/components/summary-tile/collection-summary-tile.directive.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Summary tile for collections.
 */
__webpack_require__(/*! domain/learner_dashboard/LearnerDashboardIconsDirective.ts */ "./core/templates/dev/head/domain/learner_dashboard/LearnerDashboardIconsDirective.ts");
__webpack_require__(/*! filters/string-utility-filters/truncate-and-capitalize.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-and-capitalize.filter.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/DateTimeFormatService.ts */ "./core/templates/dev/head/services/DateTimeFormatService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! components/summary-tile/collection-summary-tile.constants.ajs.ts */ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ajs.ts");
angular.module('oppia').directive('collectionSummaryTile', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getCollectionId: '&collectionId',
                getCollectionTitle: '&collectionTitle',
                getObjective: '&objective',
                getNodeCount: '&nodeCount',
                getLastUpdatedMsec: '&lastUpdatedMsec',
                getThumbnailIconUrl: '&thumbnailIconUrl',
                getThumbnailBgColor: '&thumbnailBgColor',
                isLinkedToEditorPage: '=?isLinkedToEditorPage',
                getCategory: '&category',
                isPlaylistTile: '&isPlaylistTile',
                showLearnerDashboardIconsIfPossible: ('&showLearnerDashboardIconsIfPossible'),
                isContainerNarrow: '&containerIsNarrow',
                isOwnedByCurrentUser: '&activityIsOwnedByCurrentUser',
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/summary-tile/collection-summary-tile.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                'DateTimeFormatService', 'UserService',
                'ACTIVITY_TYPE_COLLECTION', 'COLLECTION_VIEWER_URL',
                'COLLECTION_EDITOR_URL', function (DateTimeFormatService, UserService, ACTIVITY_TYPE_COLLECTION, COLLECTION_VIEWER_URL, COLLECTION_EDITOR_URL) {
                    var ctrl = this;
                    ctrl.userIsLoggedIn = null;
                    UserService.getUserInfoAsync().then(function (userInfo) {
                        ctrl.userIsLoggedIn = userInfo.isLoggedIn();
                    });
                    ctrl.DEFAULT_EMPTY_TITLE = 'Untitled';
                    ctrl.ACTIVITY_TYPE_COLLECTION = ACTIVITY_TYPE_COLLECTION;
                    ctrl.getLastUpdatedDatetime = function () {
                        return DateTimeFormatService.getLocaleAbbreviatedDatetimeString(ctrl.getLastUpdatedMsec());
                    };
                    ctrl.getCollectionLink = function () {
                        var targetUrl = (ctrl.isLinkedToEditorPage ?
                            COLLECTION_EDITOR_URL : COLLECTION_VIEWER_URL);
                        return UrlInterpolationService.interpolateUrl(targetUrl, {
                            collection_id: ctrl.getCollectionId()
                        });
                    };
                    ctrl.getCompleteThumbnailIconUrl = function () {
                        return UrlInterpolationService.getStaticImageUrl(ctrl.getThumbnailIconUrl());
                    };
                    ctrl.getStaticImageUrl = function (url) {
                        return UrlInterpolationService.getStaticImageUrl(url);
                    };
                    ctrl.setHoverState = function (hoverState) {
                        ctrl.collectionIsCurrentlyHoveredOver = hoverState;
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/classifier/PredictionResultObjectFactory.ts":
/*!************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/classifier/PredictionResultObjectFactory.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of Prediction
 *     result domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var PredictionResult = /** @class */ (function () {
    function PredictionResult(label, confidence) {
        this.predictionLabel = label;
        this.predictionConfidence = confidence;
    }
    PredictionResult.prototype.getLabel = function () {
        return this.predictionLabel;
    };
    PredictionResult.prototype.getConfidence = function () {
        return this.predictionConfidence;
    };
    return PredictionResult;
}());
exports.PredictionResult = PredictionResult;
var PredictionResultObjectFactory = /** @class */ (function () {
    function PredictionResultObjectFactory() {
    }
    PredictionResultObjectFactory.prototype.createNew = function (label, confidence) {
        return new PredictionResult(label, confidence);
    };
    PredictionResultObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], PredictionResultObjectFactory);
    return PredictionResultObjectFactory;
}());
exports.PredictionResultObjectFactory = PredictionResultObjectFactory;
angular.module('oppia').factory('PredictionResultObjectFactory', static_1.downgradeInjectable(PredictionResultObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/collection/ReadOnlyCollectionBackendApiService.ts":
/*!******************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/collection/ReadOnlyCollectionBackendApiService.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to retrieve read only information
 * about collections from the backend.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
// TODO(bhenning): For preview mode, this service should be replaced by a
// separate CollectionDataService implementation which returns a local copy of
// the collection instead. This file should not be included on the page in that
// scenario.
angular.module('oppia').factory('ReadOnlyCollectionBackendApiService', [
    '$http', '$q', 'UrlInterpolationService',
    'COLLECTION_DATA_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, COLLECTION_DATA_URL_TEMPLATE) {
        // Maps previously loaded collections to their IDs.
        var _collectionCache = [];
        var _collectionDetailsCache = [];
        var _fetchCollection = function (collectionId, successCallback, errorCallback) {
            var collectionDataUrl = UrlInterpolationService.interpolateUrl(COLLECTION_DATA_URL_TEMPLATE, {
                collection_id: collectionId
            });
            $http.get(collectionDataUrl).then(function (response) {
                var collection = angular.copy(response.data.collection);
                _cacheCollectionDetails(response.data);
                if (successCallback) {
                    successCallback(collection);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _cacheCollectionDetails = function (details) {
            _collectionDetailsCache[details.collection.id] = {
                canEdit: details.can_edit,
                title: details.collection.title,
            };
        };
        var _isCached = function (collectionId) {
            return _collectionCache.hasOwnProperty(collectionId);
        };
        return {
            /**
             * Retrieves a collection from the backend given a collection ID. This
             * returns a promise object that allows a success and rejection callbacks
             * to be registered. If the collection is successfully loaded and a
             * success callback function is provided to the promise object, the
             * success callback is called with the collection passed in as a
             * parameter. If something goes wrong while trying to fetch the
             * collection, the rejection callback is called instead, if present. The
             * rejection callback function is passed the error that occurred and the
             * collection ID.
             */
            fetchCollection: function (collectionId) {
                return $q(function (resolve, reject) {
                    _fetchCollection(collectionId, resolve, reject);
                });
            },
            /**
             * Behaves in the exact same way as fetchCollection (including callback
             * behavior and returning a promise object), except this function will
             * attempt to see whether the given collection has already been loaded. If
             * it has not yet been loaded, it will fetch the collection from the
             * backend. If it successfully retrieves the collection from the backend,
             * it will store it in the cache to avoid requests from the backend in
             * further function calls.
             */
            loadCollection: function (collectionId) {
                return $q(function (resolve, reject) {
                    if (_isCached(collectionId)) {
                        if (resolve) {
                            resolve(angular.copy(_collectionCache[collectionId]));
                        }
                    }
                    else {
                        _fetchCollection(collectionId, function (collection) {
                            // Save the fetched collection to avoid future fetches.
                            _collectionCache[collectionId] = collection;
                            if (resolve) {
                                resolve(angular.copy(collection));
                            }
                        }, reject);
                    }
                });
            },
            getCollectionDetails: function (collectionId) {
                if (_collectionDetailsCache[collectionId]) {
                    return _collectionDetailsCache[collectionId];
                }
                else {
                    throw Error('collection has not been fetched');
                }
            },
            /**
             * Returns whether the given collection is stored within the local data
             * cache or if it needs to be retrieved from the backend upon a laod.
             */
            isCached: function (collectionId) {
                return _isCached(collectionId);
            },
            /**
             * Replaces the current collection in the cache given by the specified
             * collection ID with a new collection object.
             */
            cacheCollection: function (collectionId, collection) {
                _collectionCache[collectionId] = angular.copy(collection);
            },
            /**
             * Clears the local collection data cache, forcing all future loads to
             * re-request the previously loaded collections from the backend.
             */
            clearCollectionCache: function () {
                _collectionCache = [];
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/creator_dashboard/CreatorDashboardBackendApiService.ts":
/*!***********************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/creator_dashboard/CreatorDashboardBackendApiService.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service to retrieve information of creator dashboard from the
 * backend.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var http_1 = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var CreatorDashboardBackendApiService = /** @class */ (function () {
    function CreatorDashboardBackendApiService(http) {
        this.http = http;
    }
    CreatorDashboardBackendApiService.prototype._fetchDashboardData = function () {
        // HttpClient returns an Observable, the toPromise converts it into a
        // Promise.
        return this.http.get('/creatordashboardhandler/data').toPromise();
    };
    CreatorDashboardBackendApiService.prototype.fetchDashboardData = function () {
        return this._fetchDashboardData();
    };
    var _a;
    CreatorDashboardBackendApiService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof http_1.HttpClient !== "undefined" && http_1.HttpClient) === "function" ? _a : Object])
    ], CreatorDashboardBackendApiService);
    return CreatorDashboardBackendApiService;
}());
exports.CreatorDashboardBackendApiService = CreatorDashboardBackendApiService;
angular.module('oppia').factory('CreatorDashboardBackendApiService', static_1.downgradeInjectable(CreatorDashboardBackendApiService));


/***/ }),

/***/ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts":
/*!*************************************************************************!*\
  !*** ./core/templates/dev/head/domain/objects/FractionObjectFactory.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating instances of Fraction
 * domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var objects_domain_constants_1 = __webpack_require__(/*! domain/objects/objects-domain.constants */ "./core/templates/dev/head/domain/objects/objects-domain.constants.ts");
var Fraction = /** @class */ (function () {
    function Fraction(isNegative, wholeNumber, numerator, denominator) {
        this.isNegative = isNegative;
        this.wholeNumber = wholeNumber;
        this.numerator = numerator;
        this.denominator = denominator;
    }
    Fraction.prototype.toString = function () {
        var fractionString = '';
        if (this.numerator !== 0) {
            fractionString += this.numerator + '/' + this.denominator;
        }
        if (this.wholeNumber !== 0) {
            fractionString = this.wholeNumber + ' ' + fractionString;
            // If the fractional part was empty then there will be a trailing
            // whitespace.
            fractionString = fractionString.trim();
        }
        if (this.isNegative && fractionString !== '') {
            fractionString = '-' + fractionString;
        }
        return fractionString === '' ? '0' : fractionString;
    };
    Fraction.prototype.toDict = function () {
        return {
            isNegative: this.isNegative,
            wholeNumber: this.wholeNumber,
            numerator: this.numerator,
            denominator: this.denominator
        };
    };
    Fraction.prototype.toFloat = function () {
        var totalParts = (this.wholeNumber * this.denominator) + this.numerator;
        var floatVal = (totalParts / this.denominator);
        return this.isNegative ? -floatVal : floatVal;
    };
    Fraction.prototype.getIntegerPart = function () {
        return this.isNegative ? -this.wholeNumber : this.wholeNumber;
    };
    Fraction.prototype.convertToSimplestForm = function () {
        var gcd = function (x, y) {
            return y === 0 ? x : gcd(y, x % y);
        };
        var g = gcd(this.numerator, this.denominator);
        var numerator = this.numerator / g;
        var denominator = this.denominator / g;
        return new Fraction(this.isNegative, this.wholeNumber, numerator, denominator);
    };
    Fraction.prototype.hasNonzeroIntegerPart = function () {
        return this.wholeNumber !== 0;
    };
    Fraction.prototype.isImproperFraction = function () {
        return this.denominator <= this.numerator;
    };
    return Fraction;
}());
exports.Fraction = Fraction;
var FractionObjectFactory = /** @class */ (function () {
    function FractionObjectFactory() {
    }
    FractionObjectFactory.prototype.fromRawInputString = function (rawInput) {
        var INVALID_CHARS_REGEX = /[^\d\s\/-]/g;
        if (INVALID_CHARS_REGEX.test(rawInput)) {
            throw new Error(objects_domain_constants_1.ObjectsDomainConstants.FRACTION_PARSING_ERRORS.INVALID_CHARS);
        }
        var FRACTION_REGEX = /^\s*-?\s*((\d*\s*\d+\s*\/\s*\d+)|\d+)\s*$/;
        if (!FRACTION_REGEX.test(rawInput)) {
            throw new Error(objects_domain_constants_1.ObjectsDomainConstants.FRACTION_PARSING_ERRORS.INVALID_FORMAT);
        }
        var isNegative = false;
        var wholeNumber = 0;
        var numerator = 0;
        var denominator = 1;
        rawInput = rawInput.trim();
        if (rawInput.charAt(0) === '-') {
            isNegative = true;
            // Remove the negative char from the string.
            rawInput = rawInput.substring(1);
        }
        // Filter result from split to remove empty strings.
        var numbers = rawInput.split(/\/|\s/g).filter(function (token) {
            // The empty string will evaluate to false.
            return Boolean(token);
        });
        if (numbers.length === 1) {
            wholeNumber = parseInt(numbers[0]);
        }
        else if (numbers.length === 2) {
            numerator = parseInt(numbers[0]);
            denominator = parseInt(numbers[1]);
        }
        else {
            // numbers.length == 3
            wholeNumber = parseInt(numbers[0]);
            numerator = parseInt(numbers[1]);
            denominator = parseInt(numbers[2]);
        }
        if (denominator === 0) {
            throw new Error(objects_domain_constants_1.ObjectsDomainConstants.FRACTION_PARSING_ERRORS.DIVISION_BY_ZERO);
        }
        return new Fraction(isNegative, wholeNumber, numerator, denominator);
    };
    FractionObjectFactory.prototype.fromDict = function (fractionDict) {
        return new Fraction(fractionDict.isNegative, fractionDict.wholeNumber, fractionDict.numerator, fractionDict.denominator);
    };
    FractionObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], FractionObjectFactory);
    return FractionObjectFactory;
}());
exports.FractionObjectFactory = FractionObjectFactory;
angular.module('oppia').factory('FractionObjectFactory', static_1.downgradeInjectable(FractionObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating instances of NumberWithUnits
 * domain objects.
 */
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
__webpack_require__(/*! domain/objects/UnitsObjectFactory.ts */ "./core/templates/dev/head/domain/objects/UnitsObjectFactory.ts");
__webpack_require__(/*! domain/objects/objects-domain.constants.ajs.ts */ "./core/templates/dev/head/domain/objects/objects-domain.constants.ajs.ts");
/* Guidelines for adding new custom currency units in Number with Units
  interaction:

  Simply add currency unit to the dict of CURRENCY_UNITS constant and it will
  be automatically added to the allowed custom units. Following are the keys
  to be defined within the unit dict:
    name:  The name of the custom currency unit.
    aliases: Other allowed canonical forms of the currency unit.
    front_units: A list of all the currency symbols that are added to the front
      (like- $, Rs, ₹). Keep it an empty list if no symbol is needed.
    base_unit: Define the unit in terms of base unit only if the defined custom
      unit is a sub unit else assign it 'null' value.*/
angular.module('oppia').factory('NumberWithUnitsObjectFactory', [
    'FractionObjectFactory', 'UnitsObjectFactory', 'CURRENCY_UNITS',
    'NUMBER_WITH_UNITS_PARSING_ERRORS', function (FractionObjectFactory, UnitsObjectFactory, CURRENCY_UNITS, NUMBER_WITH_UNITS_PARSING_ERRORS) {
        var NumberWithUnits = function (type, real, fractionObj, unitsObj) {
            this.type = type;
            this.real = real;
            this.fraction = fractionObj;
            this.units = unitsObj.units;
        };
        NumberWithUnits.prototype.toString = function () {
            var numberWithUnitsString = '';
            var unitsString = UnitsObjectFactory.fromList(this.units).toString();
            if (unitsString.includes('$')) {
                unitsString = unitsString.replace('$', '');
                numberWithUnitsString += '$' + ' ';
            }
            if (unitsString.includes('Rs')) {
                unitsString = unitsString.replace('Rs', '');
                numberWithUnitsString += 'Rs' + ' ';
            }
            if (unitsString.includes('₹')) {
                unitsString = unitsString.replace('₹', '');
                numberWithUnitsString += '₹' + ' ';
            }
            if (this.type === 'real') {
                numberWithUnitsString += this.real + ' ';
            }
            else if (this.type === 'fraction') {
                numberWithUnitsString += this.fraction.toString() + ' ';
            }
            numberWithUnitsString += unitsString.trim();
            numberWithUnitsString = numberWithUnitsString.trim();
            return numberWithUnitsString;
        };
        NumberWithUnits.prototype.toMathjsCompatibleString = function () {
            var numberWithUnitsString = '';
            var unitsString = UnitsObjectFactory.fromList(this.units).toString();
            unitsString = UnitsObjectFactory.toMathjsCompatibleString(unitsString);
            if (this.type === 'real') {
                numberWithUnitsString += this.real + ' ';
            }
            else if (this.type === 'fraction') {
                numberWithUnitsString += this.fraction.toString() + ' ';
            }
            numberWithUnitsString += unitsString.trim();
            numberWithUnitsString = numberWithUnitsString.trim();
            return numberWithUnitsString;
        };
        NumberWithUnits.prototype.toDict = function () {
            return {
                type: this.type,
                real: this.real,
                fraction: this.fraction.toDict(),
                units: this.units
            };
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        NumberWithUnits['createCurrencyUnits'] = function () {
            /* eslint-enable dot-notation */
            try {
                UnitsObjectFactory.createCurrencyUnits();
            }
            catch (parsingError) { }
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        NumberWithUnits['fromRawInputString'] = function (rawInput) {
            /* eslint-enable dot-notation */
            rawInput = rawInput.trim();
            var type = '';
            var real = 0.0;
            // Default fraction value.
            var fractionObj = FractionObjectFactory.fromRawInputString('0/1');
            var units = '';
            var value = '';
            var unitObj = [];
            // Allow validation only when rawInput is not null or an empty string.
            if (rawInput !== '' && rawInput !== null) {
                // Start with digit when there is no currency unit.
                if (rawInput.match(/^\d/)) {
                    var ind = rawInput.indexOf(rawInput.match(/[a-z(₹$]/i));
                    if (ind === -1) {
                        // There is value with no units.
                        value = rawInput;
                        units = '';
                    }
                    else {
                        value = rawInput.substr(0, ind).trim();
                        units = rawInput.substr(ind).trim();
                    }
                    var keys = Object.keys(CURRENCY_UNITS);
                    for (var i = 0; i < keys.length; i++) {
                        for (var j = 0; j < CURRENCY_UNITS[keys[i]].front_units.length; j++) {
                            if (units.indexOf(CURRENCY_UNITS[keys[i]].front_units[j]) !== -1) {
                                throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_CURRENCY_FORMAT);
                            }
                        }
                    }
                }
                else {
                    var startsWithCorrectCurrencyUnit = false;
                    var keys = Object.keys(CURRENCY_UNITS);
                    for (var i = 0; i < keys.length; i++) {
                        for (var j = 0; j < CURRENCY_UNITS[keys[i]].front_units.length; j++) {
                            if (rawInput.startsWith(CURRENCY_UNITS[keys[i]].front_units[j])) {
                                startsWithCorrectCurrencyUnit = true;
                                break;
                            }
                        }
                    }
                    if (startsWithCorrectCurrencyUnit === false) {
                        throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_CURRENCY);
                    }
                    var ind = rawInput.indexOf(rawInput.match(/[0-9]/));
                    if (ind === -1) {
                        throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_CURRENCY);
                    }
                    units = rawInput.substr(0, ind).trim();
                    startsWithCorrectCurrencyUnit = false;
                    for (var i = 0; i < keys.length; i++) {
                        for (var j = 0; j < CURRENCY_UNITS[keys[i]].front_units.length; j++) {
                            if (units === CURRENCY_UNITS[keys[i]].front_units[j].trim()) {
                                startsWithCorrectCurrencyUnit = true;
                                break;
                            }
                        }
                    }
                    if (startsWithCorrectCurrencyUnit === false) {
                        throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_CURRENCY);
                    }
                    units = units + ' ';
                    var ind2 = rawInput.indexOf(rawInput.substr(ind).match(/[a-z(]/i));
                    if (ind2 !== -1) {
                        value = rawInput.substr(ind, ind2 - ind).trim();
                        units += rawInput.substr(ind2).trim();
                    }
                    else {
                        value = rawInput.substr(ind).trim();
                        units = units.trim();
                    }
                }
                // Checking invalid characters in value.
                if (value.match(/[a-z]/i) || value.match(/[*^$₹()#@]/)) {
                    throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_VALUE);
                }
                if (value.includes('/')) {
                    type = 'fraction';
                    fractionObj = FractionObjectFactory.fromRawInputString(value);
                }
                else {
                    type = 'real';
                    real = parseFloat(value);
                }
                if (units !== '') {
                    // Checking invalid characters in units.
                    if (units.match(/[^0-9a-z/* ^()₹$-]/i)) {
                        throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_UNIT_CHARS);
                    }
                }
            }
            var unitsObj = UnitsObjectFactory.fromRawInputString(units);
            return new NumberWithUnits(type, real, fractionObj, unitsObj);
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        NumberWithUnits['fromDict'] = function (numberWithUnitsDict) {
            /* eslint-enable dot-notation */
            return new NumberWithUnits(numberWithUnitsDict.type, numberWithUnitsDict.real, FractionObjectFactory.fromDict(numberWithUnitsDict.fraction), UnitsObjectFactory.fromList(numberWithUnitsDict.units));
        };
        return NumberWithUnits;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/objects/UnitsObjectFactory.ts":
/*!**********************************************************************!*\
  !*** ./core/templates/dev/head/domain/objects/UnitsObjectFactory.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
// TODO(#7403): Convert this to partial imports.
var mathjs_1 = __importDefault(__webpack_require__(/*! mathjs */ "./node_modules/mathjs/index.js"));
var objects_domain_constants_1 = __webpack_require__(/*! domain/objects/objects-domain.constants */ "./core/templates/dev/head/domain/objects/objects-domain.constants.ts");
var Units = /** @class */ (function () {
    function Units(unitsList) {
        this.units = unitsList;
    }
    Units.prototype.toDict = function () {
        return {
            units: this.units
        };
    };
    Units.prototype.toString = function () {
        var unit = '';
        for (var i = 0; i < this.units.length; i++) {
            var d = this.units[i];
            if (d.exponent === 1) {
                unit += d.unit + ' ';
            }
            else {
                unit += d.unit + '^' + d.exponent.toString() + ' ';
            }
        }
        return unit.trim();
    };
    return Units;
}());
exports.Units = Units;
var UnitsObjectFactory = /** @class */ (function () {
    function UnitsObjectFactory() {
    }
    UnitsObjectFactory.prototype.isunit = function (unit) {
        return !('/*() '.includes(unit));
    };
    UnitsObjectFactory.prototype.stringToLexical = function (units) {
        units += '#';
        var unitList = [];
        var unit = '';
        for (var i = 0; i < units.length; i++) {
            if ('*/()# '.includes(units[i]) && unit !== 'per') {
                if (unit.length > 0) {
                    if ((unitList.length > 0) && this.isunit(unitList.slice(-1).pop())) {
                        unitList.push('*');
                    }
                    unitList.push(unit);
                    unit = '';
                }
                if (!('# '.includes(units[i]))) {
                    unitList.push(units[i]);
                }
            }
            else if (units[i] === ' ' && unit === 'per') {
                unitList.push('/');
                unit = '';
            }
            else {
                unit += units[i];
            }
        }
        return unitList;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a list with varying element types. An
    // exact type needs to be found for it.
    UnitsObjectFactory.prototype.unitWithMultiplier = function (unitList) {
        var multiplier = 1;
        var unitsWithMultiplier = [];
        var parenthesisStack = [];
        for (var ind = 0; ind < unitList.length; ind++) {
            if (unitList[ind] === '/') {
                multiplier = -multiplier;
            }
            else if (unitList[ind] === '(') {
                if (unitList[ind - 1] === '/') {
                    // If previous element was division then we need to inverse
                    // multiplier when we find its corresponsing closing parenthesis.
                    // Second element of pushed element is used for this purpose.
                    parenthesisStack.push(['(', -1]);
                }
                else {
                    // If previous element was not division then we don't need to
                    // invert the multiplier.
                    parenthesisStack.push(['(', 1]);
                }
            }
            else if (unitList[ind] === ')') {
                var elem = parenthesisStack.pop();
                multiplier = parseInt(elem[1]) * multiplier;
            }
            else if (this.isunit(unitList[ind])) {
                unitsWithMultiplier.push([unitList[ind], multiplier]);
                // If previous element was division then we need to invert
                // multiplier.
                if (unitList[ind - 1] === '/') {
                    multiplier = -multiplier;
                }
            }
        }
        return unitsWithMultiplier;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'unitDict' is a dict with varying element types. An
    // exact type needs to be found for it, Once that is found the return type
    // can also be typed.
    UnitsObjectFactory.prototype.convertUnitDictToList = function (unitDict) {
        var unitList = [];
        for (var key in unitDict) {
            unitList.push({ unit: key, exponent: unitDict[key] });
        }
        return unitList;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'unitsWithMultiplier' is a dict with varying element types.
    // An exact type needs to be found for it, Once that is found the return type
    // can also be typed.
    UnitsObjectFactory.prototype.unitToList = function (unitsWithMultiplier) {
        var unitDict = {};
        for (var i = 0; i < unitsWithMultiplier.length; i++) {
            var unit = unitsWithMultiplier[i][0];
            var multiplier = unitsWithMultiplier[i][1];
            var ind = unit.indexOf('^');
            var s = null;
            var power = null;
            if (ind > -1) {
                s = unit.substr(0, ind);
                power = parseInt(unit.substr(ind + 1));
            }
            else {
                s = unit;
                power = 1;
            }
            if (!(s in unitDict)) {
                unitDict[s] = 0;
            }
            unitDict[s] += multiplier * power;
        }
        return this.convertUnitDictToList(unitDict);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'units' is a list with varying element types. An exact
    // type needs to be found for it.
    UnitsObjectFactory.prototype.fromList = function (unitsList) {
        return new Units(unitsList);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is to be determined once 'unitToList' has
    // determined return type.
    UnitsObjectFactory.prototype.fromStringToList = function (unitsString) {
        return this.unitToList(this.unitWithMultiplier(this.stringToLexical(unitsString)));
    };
    UnitsObjectFactory.prototype.createCurrencyUnits = function () {
        var keys = Object.keys(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS);
        for (var i = 0; i < keys.length; i++) {
            if (objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].base_unit === null) {
                // Base unit (like: rupees, dollar etc.).
                mathjs_1.default.createUnit(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name, {
                    aliases: objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases
                });
            }
            else {
                // Sub unit (like: paise, cents etc.).
                mathjs_1.default.createUnit(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name, {
                    definition: objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].base_unit,
                    aliases: objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases
                });
            }
        }
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'units' is a list with varying element types. An exact
    // type needs to be found for it.
    UnitsObjectFactory.prototype.toMathjsCompatibleString = function (units) {
        // Makes the units compatible with the math.js allowed format.
        units = units.replace(/per/g, '/');
        // Special symbols need to be replaced as math.js doesn't support custom
        // units starting with special symbols. Also, it doesn't allow units
        // followed by a number as in the case of currency units.
        var keys = Object.keys(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS);
        for (var i = 0; i < keys.length; i++) {
            for (var j = 0; j < objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units.length; j++) {
                if (units.includes(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units[j])) {
                    units = units.replace(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units[j], '');
                    units = objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name + units;
                }
            }
            for (var j = 0; j < objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases.length; j++) {
                if (units.includes(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases[j])) {
                    units = units.replace(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases[j], objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name);
                }
            }
        }
        return units.trim();
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'units' is a list with varying element types. An exact
    // type needs to be found for it.
    UnitsObjectFactory.prototype.fromRawInputString = function (units) {
        try {
            this.createCurrencyUnits();
        }
        catch (parsingError) { }
        var compatibleUnits = this.toMathjsCompatibleString(units);
        if (compatibleUnits !== '') {
            try {
                mathjs_1.default.unit(compatibleUnits);
            }
            catch (err) {
                throw new Error(err);
            }
        }
        return new Units(this.fromStringToList(units));
    };
    UnitsObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], UnitsObjectFactory);
    return UnitsObjectFactory;
}());
exports.UnitsObjectFactory = UnitsObjectFactory;
angular.module('oppia').factory('UnitsObjectFactory', static_1.downgradeInjectable(UnitsObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/objects/objects-domain.constants.ajs.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/objects/objects-domain.constants.ajs.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for objects domain.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var objects_domain_constants_1 = __webpack_require__(/*! domain/objects/objects-domain.constants */ "./core/templates/dev/head/domain/objects/objects-domain.constants.ts");
angular.module('oppia').constant('FRACTION_PARSING_ERRORS', objects_domain_constants_1.ObjectsDomainConstants.FRACTION_PARSING_ERRORS);
angular.module('oppia').constant('NUMBER_WITH_UNITS_PARSING_ERRORS', objects_domain_constants_1.ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERRORS);
angular.module('oppia').constant('CURRENCY_UNITS', objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS);


/***/ }),

/***/ "./core/templates/dev/head/domain/suggestion/SuggestionObjectFactory.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/suggestion/SuggestionObjectFactory.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of suggestion
   domain objects.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var Suggestion = /** @class */ (function () {
    function Suggestion(suggestionType, suggestionId, targetType, targetId, status, authorName, stateName, newValue, oldValue, lastUpdated) {
        this.suggestionType = suggestionType;
        this.suggestionId = suggestionId;
        this.targetType = targetType;
        this.targetId = targetId;
        this.status = status;
        this.authorName = authorName;
        this.stateName = stateName;
        this.newValue = newValue;
        this.oldValue = oldValue;
        this.lastUpdated = lastUpdated;
    }
    Suggestion.prototype.getThreadId = function () {
        return this.suggestionId;
    };
    return Suggestion;
}());
exports.Suggestion = Suggestion;
var SuggestionObjectFactory = /** @class */ (function () {
    function SuggestionObjectFactory() {
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'suggestionBackendDict' is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    SuggestionObjectFactory.prototype.createFromBackendDict = function (suggestionBackendDict) {
        return new Suggestion(suggestionBackendDict.suggestion_type, suggestionBackendDict.suggestion_id, suggestionBackendDict.target_type, suggestionBackendDict.target_id, suggestionBackendDict.status, suggestionBackendDict.author_name, suggestionBackendDict.change.state_name, suggestionBackendDict.change.new_value, suggestionBackendDict.change.old_value, suggestionBackendDict.last_updated);
    };
    SuggestionObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], SuggestionObjectFactory);
    return SuggestionObjectFactory;
}());
exports.SuggestionObjectFactory = SuggestionObjectFactory;
angular.module('oppia').factory('SuggestionObjectFactory', static_1.downgradeInjectable(SuggestionObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/suggestion/SuggestionThreadObjectFactory.ts":
/*!************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/suggestion/SuggestionThreadObjectFactory.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of suggestion
   thread domain objects.
 */
__webpack_require__(/*! domain/suggestion/SuggestionObjectFactory.ts */ "./core/templates/dev/head/domain/suggestion/SuggestionObjectFactory.ts");
angular.module('oppia').factory('SuggestionThreadObjectFactory', [
    'SuggestionObjectFactory', function (SuggestionObjectFactory) {
        var SuggestionThread = function (status, subject, summary, originalAuthorName, lastUpdated, messageCount, threadId, suggestion) {
            this.status = status;
            this.subject = subject;
            this.summary = summary;
            this.originalAuthorName = originalAuthorName;
            this.lastUpdated = lastUpdated;
            this.messageCount = messageCount;
            this.threadId = threadId;
            this.suggestion = suggestion;
            this.messages = [];
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        SuggestionThread['createFromBackendDicts'] = function (
        /* eslint-enable dot-notation */
        suggestionThreadBackendDict, suggestionBackendDict) {
            var suggestion;
            if (suggestionBackendDict.suggestion_type ===
                'edit_exploration_state_content') {
                suggestion = SuggestionObjectFactory.createFromBackendDict(suggestionBackendDict);
            }
            return new SuggestionThread(suggestionThreadBackendDict.status, suggestionThreadBackendDict.subject, suggestionThreadBackendDict.summary, suggestionThreadBackendDict.original_author_username, suggestionThreadBackendDict.last_updated, suggestionThreadBackendDict.message_count, suggestionThreadBackendDict.thread_id, suggestion);
        };
        SuggestionThread.prototype.setMessages = function (messages) {
            this.messages = messages;
        };
        SuggestionThread.prototype.isSuggestionHandled = function () {
            return this.suggestion.status !== 'review';
        };
        SuggestionThread.prototype.getSuggestionStateName = function () {
            return this.suggestion.stateName;
        };
        SuggestionThread.prototype.getSuggestionStatus = function () {
            return this.suggestion.status;
        };
        SuggestionThread.prototype.getReplacementHtmlFromSuggestion = function () {
            return this.suggestion.newValue.html;
        };
        SuggestionThread.prototype.isSuggestionThread = function () {
            return true;
        };
        SuggestionThread.prototype.getSuggestion = function () {
            return this.suggestion;
        };
        return SuggestionThread;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/remove-duplicates-in-array.filter.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/filters/remove-duplicates-in-array.filter.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview RemoveDuplicatesInArray filter for Oppia.
 */
angular.module('oppia').filter('removeDuplicatesInArray', [function () {
        return function (input) {
            if (!input.filter) {
                throw Error('Bad input for removeDuplicatesInArray: ' + JSON.stringify(input));
            }
            return input.filter(function (val, pos) {
                return input.indexOf(val) === pos;
            });
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace-punctuation-and-case.filter.ts":
/*!********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace-punctuation-and-case.filter.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview NormalizeWhitespacePunctuationAndCase filter for Oppia.
 */
// Filter that takes a string, trims and normalizes spaces within each
// line, and removes blank lines. Note that any spaces whose removal does not
// result in two alphanumeric "words" being joined together are also removed,
// so "hello ? " becomes "hello?".
angular.module('oppia').filter('normalizeWhitespacePunctuationAndCase', [
    function () {
        return function (input) {
            if (typeof input === 'string' || input instanceof String) {
                var isAlphanumeric = function (character) {
                    return 'qwertyuiopasdfghjklzxcvbnm0123456789'.indexOf(character.toLowerCase()) !== -1;
                };
                input = input.trim();
                var inputLines = input.split('\n');
                var resultLines = [];
                for (var i = 0; i < inputLines.length; i++) {
                    var result = '';
                    var inputLine = inputLines[i].trim().replace(/\s{2,}/g, ' ');
                    for (var j = 0; j < inputLine.length; j++) {
                        var currentChar = inputLine.charAt(j).toLowerCase();
                        if (currentChar === ' ') {
                            if (j > 0 && j < inputLine.length - 1 &&
                                isAlphanumeric(inputLine.charAt(j - 1)) &&
                                isAlphanumeric(inputLine.charAt(j + 1))) {
                                result += currentChar;
                            }
                        }
                        else {
                            result += currentChar;
                        }
                    }
                    if (result) {
                        resultLines.push(result);
                    }
                }
                return resultLines.join('\n');
            }
            else {
                return input;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts":
/*!***********************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview NormalizeWhitespace filter for Oppia.
 */
__webpack_require__(/*! services/UtilsService.ts */ "./core/templates/dev/head/services/UtilsService.ts");
// Filter that removes whitespace from the beginning and end of a string, and
// replaces interior whitespace with a single space character.
angular.module('oppia').filter('normalizeWhitespace', [
    'UtilsService', function (UtilsService) {
        return function (input) {
            if (UtilsService.isString(input)) {
                // Remove whitespace from the beginning and end of the string, and
                // replace interior whitespace with a single space character.
                input = input.trim();
                input = input.replace(/\s{2,}/g, ' ');
                return input;
            }
            else {
                return input;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts":
/*!*************************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview TruncateAtFirstLine filter for Oppia.
 */
angular.module('oppia').filter('truncateAtFirstLine', [function () {
        return function (input) {
            if (!input) {
                return input;
            }
            var pattern = /(\r\n|[\n\v\f\r\x85\u2028\u2029])/g;
            // Normalize line endings then split using the normalized delimiter.
            var lines = input.replace(pattern, '\n').split('\n');
            var firstNonemptyLineIndex = -1;
            var otherNonemptyLinesExist = false;
            for (var i = 0; i < lines.length; i++) {
                if (lines[i].length > 0) {
                    if (firstNonemptyLineIndex === -1) {
                        firstNonemptyLineIndex = i;
                    }
                    else {
                        otherNonemptyLinesExist = true;
                        break;
                    }
                }
            }
            var suffix = otherNonemptyLinesExist ? '...' : '';
            return (firstNonemptyLineIndex !== -1 ?
                lines[firstNonemptyLineIndex] + suffix : '');
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/pages/OppiaFooterDirective.ts":
/*!***************************************************************!*\
  !*** ./core/templates/dev/head/pages/OppiaFooterDirective.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the footer.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('oppiaFooter', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/oppia_footer_directive.html'),
            controllerAs: '$ctrl',
            controller: [
                function () { }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.constants.ajs.ts":
/*!******************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.constants.ajs.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for the creator dashboard.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var creator_dashboard_page_constants_1 = __webpack_require__(/*! pages/creator-dashboard-page/creator-dashboard-page.constants */ "./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.constants.ts");
angular.module('oppia').constant('EXPLORATION_DROPDOWN_STATS', creator_dashboard_page_constants_1.CreatorDashboardConstants.EXPLORATION_DROPDOWN_STATS);
angular.module('oppia').constant('EXPLORATIONS_SORT_BY_KEYS', creator_dashboard_page_constants_1.CreatorDashboardConstants.EXPLORATIONS_SORT_BY_KEYS);
angular.module('oppia').constant('HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS', creator_dashboard_page_constants_1.CreatorDashboardConstants.HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS);
angular.module('oppia').constant('SUBSCRIPTION_SORT_BY_KEYS', creator_dashboard_page_constants_1.CreatorDashboardConstants.SUBSCRIPTION_SORT_BY_KEYS);
angular.module('oppia').constant('HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS', creator_dashboard_page_constants_1.CreatorDashboardConstants.HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS);


/***/ }),

/***/ "./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.constants.ts":
/*!**************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.constants.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for the creator dashboard.
 */
var CreatorDashboardConstants = /** @class */ (function () {
    function CreatorDashboardConstants() {
    }
    CreatorDashboardConstants.EXPLORATION_DROPDOWN_STATS = {
        OPEN_FEEDBACK: 'open_feedback'
    };
    CreatorDashboardConstants.EXPLORATIONS_SORT_BY_KEYS = {
        TITLE: 'title',
        RATING: 'ratings',
        NUM_VIEWS: 'num_views',
        OPEN_FEEDBACK: 'num_open_threads',
        LAST_UPDATED: 'last_updated_msec'
    };
    CreatorDashboardConstants.HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS = {
        TITLE: 'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_TITLE',
        RATING: 'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_AVERAGE_RATING',
        NUM_VIEWS: 'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_TOTAL_PLAYS',
        OPEN_FEEDBACK: 'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_OPEN_FEEDBACK',
        LAST_UPDATED: 'I18N_DASHBOARD_EXPLORATIONS_SORT_BY_LAST_UPDATED'
    };
    CreatorDashboardConstants.SUBSCRIPTION_SORT_BY_KEYS = {
        USERNAME: 'subscriber_username',
        IMPACT: 'subscriber_impact'
    };
    CreatorDashboardConstants.HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS = {
        USERNAME: 'Username',
        IMPACT: 'Impact'
    };
    return CreatorDashboardConstants;
}());
exports.CreatorDashboardConstants = CreatorDashboardConstants;


/***/ }),

/***/ "./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.controller.ts":
/*!***************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.controller.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the creator dashboard.
 */
__webpack_require__(/*! base_components/BaseContentDirective.ts */ "./core/templates/dev/head/base_components/BaseContentDirective.ts");
__webpack_require__(/*! components/common-layout-directives/common-elements/sharing-links.directive.ts */ "./core/templates/dev/head/components/common-layout-directives/common-elements/sharing-links.directive.ts");
__webpack_require__(/*! components/common-layout-directives/common-elements/background-banner.directive.ts */ "./core/templates/dev/head/components/common-layout-directives/common-elements/background-banner.directive.ts");
__webpack_require__(/*! components/summary-tile/collection-summary-tile.directive.ts */ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.directive.ts");
__webpack_require__(/*! pages/exploration-editor-page/feedback-tab/thread-table/thread-table.directive.ts */ "./core/templates/dev/head/pages/exploration-editor-page/feedback-tab/thread-table/thread-table.directive.ts");
__webpack_require__(/*! interactions/interactionsRequires.ts */ "./extensions/interactions/interactionsRequires.ts");
__webpack_require__(/*! objects/objectComponentsRequires.ts */ "./extensions/objects/objectComponentsRequires.ts");
__webpack_require__(/*! components/entity-creation-services/exploration-creation.service.ts */ "./core/templates/dev/head/components/entity-creation-services/exploration-creation.service.ts");
__webpack_require__(/*! components/ratings/rating-computation/rating-computation.service.ts */ "./core/templates/dev/head/components/ratings/rating-computation/rating-computation.service.ts");
__webpack_require__(/*! domain/creator_dashboard/CreatorDashboardBackendApiService.ts */ "./core/templates/dev/head/domain/creator_dashboard/CreatorDashboardBackendApiService.ts");
__webpack_require__(/*! domain/suggestion/SuggestionObjectFactory.ts */ "./core/templates/dev/head/domain/suggestion/SuggestionObjectFactory.ts");
__webpack_require__(/*! domain/suggestion/SuggestionThreadObjectFactory.ts */ "./core/templates/dev/head/domain/suggestion/SuggestionThreadObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/creator-dashboard-page/suggestion-modal-for-creator-view/suggestion-modal-for-creator-view.service.ts */ "./core/templates/dev/head/pages/creator-dashboard-page/suggestion-modal-for-creator-view/suggestion-modal-for-creator-view.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/feedback-tab/services/thread-status-display.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/feedback-tab/services/thread-status-display.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/DateTimeFormatService.ts */ "./core/templates/dev/head/services/DateTimeFormatService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! pages/creator-dashboard-page/creator-dashboard-page.constants.ajs.ts */ "./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.constants.ajs.ts");
angular.module('oppia').directive('creatorDashboardPage', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/creator-dashboard-page/creator-dashboard-page.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$http', '$log', '$q', '$rootScope', '$window',
                'AlertsService', 'CreatorDashboardBackendApiService',
                'DateTimeFormatService',
                'ExplorationCreationService', 'RatingComputationService',
                'SuggestionModalForCreatorDashboardService', 'SuggestionObjectFactory',
                'SuggestionThreadObjectFactory', 'ThreadStatusDisplayService',
                'UrlInterpolationService', 'UserService',
                'ALLOWED_CREATOR_DASHBOARD_DISPLAY_PREFS',
                'DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR', 'EXPLORATIONS_SORT_BY_KEYS',
                'EXPLORATION_DROPDOWN_STATS', 'FATAL_ERROR_CODES',
                'HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS',
                'HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS',
                'SUBSCRIPTION_SORT_BY_KEYS',
                function ($http, $log, $q, $rootScope, $window, AlertsService, CreatorDashboardBackendApiService, DateTimeFormatService, ExplorationCreationService, RatingComputationService, SuggestionModalForCreatorDashboardService, SuggestionObjectFactory, SuggestionThreadObjectFactory, ThreadStatusDisplayService, UrlInterpolationService, UserService, ALLOWED_CREATOR_DASHBOARD_DISPLAY_PREFS, DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR, EXPLORATIONS_SORT_BY_KEYS, EXPLORATION_DROPDOWN_STATS, FATAL_ERROR_CODES, HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS, HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS, SUBSCRIPTION_SORT_BY_KEYS) {
                    var ctrl = this;
                    var EXP_PUBLISH_TEXTS = {
                        defaultText: ('This exploration is private. Publish it to receive statistics.'),
                        smText: 'Publish the exploration to receive statistics.'
                    };
                    var userDashboardDisplayPreference = ALLOWED_CREATOR_DASHBOARD_DISPLAY_PREFS.CARD;
                    ctrl.DEFAULT_EMPTY_TITLE = 'Untitled';
                    ctrl.EXPLORATION_DROPDOWN_STATS = EXPLORATION_DROPDOWN_STATS;
                    ctrl.EXPLORATIONS_SORT_BY_KEYS = EXPLORATIONS_SORT_BY_KEYS;
                    ctrl.HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS = (HUMAN_READABLE_EXPLORATIONS_SORT_BY_KEYS);
                    ctrl.SUBSCRIPTION_SORT_BY_KEYS = SUBSCRIPTION_SORT_BY_KEYS;
                    ctrl.HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS = (HUMAN_READABLE_SUBSCRIPTION_SORT_BY_KEYS);
                    ctrl.DEFAULT_TWITTER_SHARE_MESSAGE_DASHBOARD = (DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR);
                    ctrl.canCreateCollections = null;
                    $rootScope.loadingMessage = 'Loading';
                    var userInfoPromise = UserService.getUserInfoAsync();
                    userInfoPromise.then(function (userInfo) {
                        ctrl.canCreateCollections = userInfo.canCreateCollections();
                    });
                    var dashboardDataPromise = (CreatorDashboardBackendApiService.fetchDashboardData());
                    dashboardDataPromise.then(function (response) {
                        // The following condition is required for Karma testing. The
                        // Angular HttpClient returns an Observable which when converted
                        // to a promise does not have the 'data' key but the AngularJS
                        // mocks of services using HttpClient use $http which return
                        // promise and the content is contained in the 'data' key.
                        // Therefore the following condition checks for presence of
                        // 'response.data' which would be the case in AngularJS testing
                        // but assigns 'response' if the former is not present which is
                        // the case with HttpClient.
                        var responseData = response.data ? response.data : response;
                        ctrl.currentSortType = EXPLORATIONS_SORT_BY_KEYS.OPEN_FEEDBACK;
                        ctrl.currentSubscribersSortType =
                            SUBSCRIPTION_SORT_BY_KEYS.USERNAME;
                        ctrl.isCurrentSortDescending = true;
                        ctrl.isCurrentSubscriptionSortDescending = true;
                        ctrl.explorationsList = responseData.explorations_list;
                        ctrl.collectionsList = responseData.collections_list;
                        ctrl.subscribersList = responseData.subscribers_list;
                        ctrl.dashboardStats = responseData.dashboard_stats;
                        ctrl.lastWeekStats = responseData.last_week_stats;
                        ctrl.myExplorationsView = responseData.display_preference;
                        var numberOfCreatedSuggestions = (responseData.threads_for_created_suggestions_list.length);
                        var numberOfSuggestionsToReview = (responseData.threads_for_suggestions_to_review_list.length);
                        ctrl.mySuggestionsList = [];
                        for (var i = 0; i < numberOfCreatedSuggestions; i++) {
                            if (responseData.created_suggestions_list.length !==
                                numberOfCreatedSuggestions) {
                                $log.error('Number of suggestions does not match number of ' +
                                    'suggestion threads');
                            }
                            for (var j = 0; j < numberOfCreatedSuggestions; j++) {
                                var suggestion = SuggestionObjectFactory
                                    .createFromBackendDict(responseData.created_suggestions_list[j]);
                                var threadDict = (responseData.threads_for_created_suggestions_list[i]);
                                if (threadDict.thread_id === suggestion.getThreadId()) {
                                    var suggestionThread = (SuggestionThreadObjectFactory.createFromBackendDicts(threadDict, responseData.created_suggestions_list[j]));
                                    ctrl.mySuggestionsList.push(suggestionThread);
                                }
                            }
                        }
                        ctrl.suggestionsToReviewList = [];
                        for (var i = 0; i < numberOfSuggestionsToReview; i++) {
                            if (responseData.suggestions_to_review_list.length !==
                                numberOfSuggestionsToReview) {
                                $log.error('Number of suggestions does not match number of ' +
                                    'suggestion threads');
                            }
                            for (var j = 0; j < numberOfSuggestionsToReview; j++) {
                                var suggestion = SuggestionObjectFactory
                                    .createFromBackendDict(responseData.suggestions_to_review_list[j]);
                                var threadDict = (responseData.threads_for_suggestions_to_review_list[i]);
                                if (threadDict.thread_id === suggestion.getThreadId()) {
                                    var suggestionThread = (SuggestionThreadObjectFactory.createFromBackendDicts(threadDict, responseData.suggestions_to_review_list[j]));
                                    ctrl.suggestionsToReviewList.push(suggestionThread);
                                }
                            }
                        }
                        if (ctrl.dashboardStats && ctrl.lastWeekStats) {
                            ctrl.relativeChangeInTotalPlays = (ctrl.dashboardStats.total_plays - (ctrl.lastWeekStats.total_plays));
                        }
                        if (ctrl.explorationsList.length === 0 &&
                            ctrl.collectionsList.length > 0) {
                            ctrl.activeTab = 'myCollections';
                        }
                        else if (ctrl.explorationsList.length === 0 && (ctrl.mySuggestionsList.length > 0 ||
                            ctrl.suggestionsToReviewList.length > 0)) {
                            ctrl.activeTab = 'suggestions';
                        }
                        else {
                            ctrl.activeTab = 'myExplorations';
                        }
                    }, function (errorResponse) {
                        if (FATAL_ERROR_CODES.indexOf(errorResponse.status) !== -1) {
                            AlertsService.addWarning('Failed to get dashboard data');
                        }
                    });
                    $q.all([userInfoPromise, dashboardDataPromise]).then(function () {
                        $rootScope.loadingMessage = '';
                    });
                    ctrl.getAverageRating = RatingComputationService
                        .computeAverageRating;
                    ctrl.createNewExploration = (ExplorationCreationService.createNewExploration);
                    ctrl.getLocaleAbbreviatedDatetimeString = (DateTimeFormatService.getLocaleAbbreviatedDatetimeString);
                    ctrl.getHumanReadableStatus = (ThreadStatusDisplayService.getHumanReadableStatus);
                    ctrl.emptyDashboardImgUrl = UrlInterpolationService
                        .getStaticImageUrl('/general/empty_dashboard.svg');
                    ctrl.canReviewActiveThread = null;
                    ctrl.setActiveTab = function (newActiveTabName) {
                        ctrl.activeTab = newActiveTabName;
                    };
                    ctrl.getExplorationUrl = function (explorationId) {
                        return '/create/' + explorationId;
                    };
                    ctrl.getCollectionUrl = function (collectionId) {
                        return '/collection_editor/create/' + collectionId;
                    };
                    ctrl.setMyExplorationsView = function (newViewType) {
                        $http.post('/creatordashboardhandler/data', {
                            display_preference: newViewType,
                        }).then(function () {
                            ctrl.myExplorationsView = newViewType;
                        });
                        userDashboardDisplayPreference = newViewType;
                    };
                    ctrl.checkMobileView = function () {
                        return ($window.innerWidth < 500);
                    };
                    ctrl.showUsernamePopover = function (subscriberUsername) {
                        // The popover on the subscription card is only shown if the length
                        // of the subscriber username is greater than 10 and the user hovers
                        // over the truncated username.
                        if (subscriberUsername.length > 10) {
                            return 'mouseenter';
                        }
                        else {
                            return 'none';
                        }
                    };
                    ctrl.updatesGivenScreenWidth = function () {
                        if (ctrl.checkMobileView()) {
                            // For mobile users, the view of the creators
                            // exploration list is shown only in
                            // the card view and can't be switched to list view.
                            ctrl.myExplorationsView = (ALLOWED_CREATOR_DASHBOARD_DISPLAY_PREFS.CARD);
                            ctrl.publishText = EXP_PUBLISH_TEXTS.smText;
                        }
                        else {
                            // For computer users or users operating in larger screen size
                            // the creator exploration list will come back to its previously
                            // selected view (card or list) when resized from mobile view
                            ctrl.myExplorationsView = userDashboardDisplayPreference;
                            ctrl.publishText = EXP_PUBLISH_TEXTS.defaultText;
                        }
                    };
                    ctrl.updatesGivenScreenWidth();
                    angular.element($window).bind('resize', function () {
                        ctrl.updatesGivenScreenWidth();
                    });
                    ctrl.setExplorationsSortingOptions = function (sortType) {
                        if (sortType === ctrl.currentSortType) {
                            ctrl.isCurrentSortDescending = !ctrl.isCurrentSortDescending;
                        }
                        else {
                            ctrl.currentSortType = sortType;
                        }
                    };
                    ctrl.setSubscriptionSortingOptions = function (sortType) {
                        if (sortType === ctrl.currentSubscribersSortType) {
                            ctrl.isCurrentSubscriptionSortDescending = (!ctrl.isCurrentSubscriptionSortDescending);
                        }
                        else {
                            ctrl.currentSubscribersSortType = sortType;
                        }
                    };
                    ctrl.sortSubscriptionFunction = function (entity) {
                        // This function is passed as a custom comparator function to
                        // `orderBy`, so that special cases can be handled while sorting
                        // subscriptions.
                        var value = entity[ctrl.currentSubscribersSortType];
                        if (ctrl.currentSubscribersSortType ===
                            SUBSCRIPTION_SORT_BY_KEYS.IMPACT) {
                            value = (value || 0);
                        }
                        return value;
                    };
                    var _fetchMessages = function (threadId) {
                        $http.get('/threadhandler/' + threadId).then(function (response) {
                            var allThreads = ctrl.mySuggestionsList.concat(ctrl.suggestionsToReviewList);
                            for (var i = 0; i < allThreads.length; i++) {
                                if (allThreads[i].threadId === threadId) {
                                    allThreads[i].setMessages(response.data.messages);
                                    break;
                                }
                            }
                        });
                    };
                    ctrl.clearActiveThread = function () {
                        ctrl.activeThread = null;
                    };
                    ctrl.setActiveThread = function (threadId) {
                        _fetchMessages(threadId);
                        for (var i = 0; i < ctrl.mySuggestionsList.length; i++) {
                            if (ctrl.mySuggestionsList[i].threadId === threadId) {
                                ctrl.activeThread = ctrl.mySuggestionsList[i];
                                ctrl.canReviewActiveThread = false;
                                break;
                            }
                        }
                        if (!ctrl.activeThread) {
                            for (var i = 0; i < ctrl.suggestionsToReviewList.length; i++) {
                                if (ctrl.suggestionsToReviewList[i].threadId === threadId) {
                                    ctrl.activeThread = ctrl.suggestionsToReviewList[i];
                                    ctrl.canReviewActiveThread = true;
                                    break;
                                }
                            }
                        }
                    };
                    ctrl.showSuggestionModal = function () {
                        SuggestionModalForCreatorDashboardService.showSuggestionModal(ctrl.activeThread.suggestion.suggestionType, {
                            activeThread: ctrl.activeThread,
                            suggestionsToReviewList: ctrl.suggestionsToReviewList,
                            clearActiveThread: ctrl.clearActiveThread,
                            canReviewActiveThread: ctrl.canReviewActiveThread
                        });
                    };
                    ctrl.sortByFunction = function (entity) {
                        // This function is passed as a custom comparator function to
                        // `orderBy`, so that special cases can be handled while sorting
                        // explorations.
                        var value = entity[ctrl.currentSortType];
                        if (entity.status === 'private') {
                            if (ctrl.currentSortType === EXPLORATIONS_SORT_BY_KEYS.TITLE) {
                                value = (value || ctrl.DEFAULT_EMPTY_TITLE);
                            }
                            else if (ctrl.currentSortType !==
                                EXPLORATIONS_SORT_BY_KEYS.LAST_UPDATED) {
                                value = 0;
                            }
                        }
                        else if (ctrl.currentSortType === EXPLORATIONS_SORT_BY_KEYS.RATING) {
                            var averageRating = ctrl.getAverageRating(value);
                            value = (averageRating || 0);
                        }
                        return value;
                    };
                    ctrl.getCompleteThumbnailIconUrl = function (iconUrl) {
                        return UrlInterpolationService.getStaticImageUrl(iconUrl);
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.module.ts":
/*!***********************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.module.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Module for the collection player page.
 */
__webpack_require__(/*! core-js/es7/reflect */ "./node_modules/core-js/es7/reflect.js");
__webpack_require__(/*! zone.js */ "./node_modules/zone.js/dist/zone.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var platform_browser_1 = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var http_1 = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
// This component is needed to force-bootstrap Angular at the beginning of the
// app.
var ServiceBootstrapComponent = /** @class */ (function () {
    function ServiceBootstrapComponent() {
    }
    ServiceBootstrapComponent = __decorate([
        core_1.Component({
            selector: 'service-bootstrap',
            template: ''
        })
    ], ServiceBootstrapComponent);
    return ServiceBootstrapComponent;
}());
exports.ServiceBootstrapComponent = ServiceBootstrapComponent;
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var classifiers_extension_constants_1 = __webpack_require__(/*! classifiers/classifiers-extension.constants */ "./extensions/classifiers/classifiers-extension.constants.ts");
var collection_summary_tile_constants_1 = __webpack_require__(/*! components/summary-tile/collection-summary-tile.constants */ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ts");
var interactions_extension_constants_1 = __webpack_require__(/*! interactions/interactions-extension.constants */ "./extensions/interactions/interactions-extension.constants.ts");
var objects_domain_constants_1 = __webpack_require__(/*! domain/objects/objects-domain.constants */ "./core/templates/dev/head/domain/objects/objects-domain.constants.ts");
var services_constants_1 = __webpack_require__(/*! services/services.constants */ "./core/templates/dev/head/services/services.constants.ts");
var creator_dashboard_page_constants_1 = __webpack_require__(/*! pages/creator-dashboard-page/creator-dashboard-page.constants */ "./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.constants.ts");
var CreatorDashboardPageModule = /** @class */ (function () {
    function CreatorDashboardPageModule() {
    }
    // Empty placeholder method to satisfy the `Compiler`.
    CreatorDashboardPageModule.prototype.ngDoBootstrap = function () { };
    CreatorDashboardPageModule = __decorate([
        core_1.NgModule({
            imports: [
                platform_browser_1.BrowserModule,
                http_1.HttpClientModule
            ],
            declarations: [
                ServiceBootstrapComponent
            ],
            entryComponents: [
                ServiceBootstrapComponent
            ],
            providers: [
                app_constants_1.AppConstants,
                classifiers_extension_constants_1.ClassifiersExtensionConstants,
                collection_summary_tile_constants_1.CollectionSummaryTileConstants,
                interactions_extension_constants_1.InteractionsExtensionsConstants,
                objects_domain_constants_1.ObjectsDomainConstants,
                services_constants_1.ServicesConstants,
                creator_dashboard_page_constants_1.CreatorDashboardConstants
            ]
        })
    ], CreatorDashboardPageModule);
    return CreatorDashboardPageModule;
}());
var platform_browser_dynamic_1 = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
var static_2 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var bootstrapFn = function (extraProviders) {
    var platformRef = platform_browser_dynamic_1.platformBrowserDynamic(extraProviders);
    return platformRef.bootstrapModule(CreatorDashboardPageModule);
};
var downgradedModule = static_2.downgradeModule(bootstrapFn);
angular.module('oppia', [
    'dndLists', 'headroom', 'infinite-scroll', 'ngAnimate',
    'ngAudio', 'ngCookies', 'ngImgCrop', 'ngJoyRide', 'ngMaterial',
    'ngResource', 'ngSanitize', 'ngTouch', 'pascalprecht.translate',
    'toastr', 'ui.bootstrap', 'ui.sortable', 'ui.tree', 'ui.validate',
    downgradedModule
])
    // This directive is the downgraded version of the Angular component to
    // bootstrap the Angular 8.
    .directive('serviceBootstrap', static_1.downgradeComponent({
    component: ServiceBootstrapComponent
}));


/***/ }),

/***/ "./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.scripts.ts":
/*!************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.scripts.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive scripts for the creator dashboard.
 */
// The module needs to be loaded before everything else since it defines the
// main module the elements are attached to.
__webpack_require__(/*! pages/creator-dashboard-page/creator-dashboard-page.module.ts */ "./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.module.ts");
__webpack_require__(/*! App.ts */ "./core/templates/dev/head/App.ts");
__webpack_require__(/*! pages/creator-dashboard-page/creator-dashboard-page.controller.ts */ "./core/templates/dev/head/pages/creator-dashboard-page/creator-dashboard-page.controller.ts");


/***/ }),

/***/ "./core/templates/dev/head/pages/creator-dashboard-page/suggestion-modal-for-creator-view/suggestion-modal-for-creator-view.service.ts":
/*!*********************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/creator-dashboard-page/suggestion-modal-for-creator-view/suggestion-modal-for-creator-view.service.ts ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to display suggestion modal in creator view.
 */
__webpack_require__(/*! components/ck-editor-helpers/ck-editor-4-rte.directive.ts */ "./core/templates/dev/head/components/ck-editor-helpers/ck-editor-4-rte.directive.ts");
__webpack_require__(/*! components/ck-editor-helpers/ck-editor-4-widgets.initializer.ts */ "./core/templates/dev/head/components/ck-editor-helpers/ck-editor-4-widgets.initializer.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/SuggestionModalService.ts */ "./core/templates/dev/head/services/SuggestionModalService.ts");
angular.module('oppia').factory('SuggestionModalForCreatorDashboardService', [
    '$http', '$log',
    '$uibModal', 'UrlInterpolationService',
    function ($http, $log, $uibModal, UrlInterpolationService) {
        var _templateUrl = UrlInterpolationService.getDirectiveTemplateUrl('/pages/creator-dashboard-page/suggestion-modal-for-creator-view/' +
            'suggestion-modal-for-creator-view.directive.html');
        var _showEditStateContentSuggestionModal = function (activeThread, suggestionsToReviewList, clearActiveThread, canReviewActiveThread) {
            $uibModal.open({
                templateUrl: _templateUrl,
                backdrop: true,
                size: 'lg',
                resolve: {
                    suggestionIsHandled: function () {
                        return activeThread.isSuggestionHandled();
                    },
                    suggestionStatus: function () {
                        return activeThread.getSuggestionStatus();
                    },
                    description: function () {
                        return activeThread.description;
                    },
                    oldContent: function () {
                        return activeThread.suggestion.oldValue;
                    },
                    newContent: function () {
                        return activeThread.suggestion.newValue;
                    },
                    canReviewActiveThread: function () {
                        return canReviewActiveThread;
                    },
                    stateName: function () {
                        return activeThread.suggestion.stateName;
                    },
                    suggestionType: function () {
                        return activeThread.suggestion.suggestionType;
                    }
                },
                controller: [
                    '$log', '$scope', '$uibModalInstance', 'SuggestionModalService',
                    'canReviewActiveThread', 'description', 'newContent', 'oldContent',
                    'stateName', 'suggestionIsHandled', 'suggestionStatus',
                    'suggestionType',
                    function ($log, $scope, $uibModalInstance, SuggestionModalService, canReviewActiveThread, description, newContent, oldContent, stateName, suggestionIsHandled, suggestionStatus, suggestionType) {
                        $scope.isNotHandled = !suggestionIsHandled;
                        $scope.canReject = $scope.isNotHandled;
                        $scope.canAccept = $scope.isNotHandled;
                        if (!$scope.isNotHandled) {
                            if (suggestionStatus === (SuggestionModalService.SUGGESTION_ACCEPTED)) {
                                $scope.errorMessage = SuggestionModalService
                                    .SUGGESTION_ACCEPTED_MSG;
                                $scope.isSuggestionRejected = false;
                            }
                            else {
                                $scope.errorMessage = SuggestionModalService
                                    .SUGGESTION_REJECTED_MSG;
                                $scope.isSuggestionRejected = true;
                            }
                        }
                        else {
                            $scope.errorMessage = '';
                        }
                        $scope.oldContent = oldContent;
                        $scope.newContent = newContent;
                        $scope.stateName = stateName;
                        $scope.suggestionType = suggestionType;
                        $scope.commitMessage = description;
                        $scope.reviewMessage = null;
                        $scope.summaryMessage = null;
                        $scope.canReviewActiveThread = canReviewActiveThread;
                        // ng-model needs to bind to a property of an object on
                        // the scope (the property cannot sit directly on the scope)
                        // Reference https://stackoverflow.com/q/12618342
                        $scope.suggestionData = { newSuggestionHtml: newContent.html };
                        $scope.suggestionEditorIsShown = false;
                        $scope.acceptSuggestion = function () {
                            SuggestionModalService.acceptSuggestion($uibModalInstance, {
                                action: SuggestionModalService.ACTION_ACCEPT_SUGGESTION,
                                commitMessage: $scope.commitMessage,
                                reviewMessage: $scope.reviewMessage,
                            });
                        };
                        $scope.rejectSuggestion = function () {
                            SuggestionModalService.rejectSuggestion($uibModalInstance, {
                                action: SuggestionModalService.ACTION_REJECT_SUGGESTION,
                                commitMessage: null,
                                reviewMessage: $scope.reviewMessage
                            });
                        };
                        $scope.editSuggestion = function () {
                            $scope.suggestionEditorIsShown = true;
                        };
                        $scope.cancel = function () {
                            SuggestionModalService.cancelSuggestion($uibModalInstance);
                        };
                        $scope.isEditButtonShown = function () {
                            return (!$scope.isNotHandled && $scope.isSuggestionRejected &&
                                !$scope.suggestionEditorIsShown);
                        };
                        $scope.isResubmitButtonShown = function () {
                            return (!$scope.isNotHandled && $scope.isSuggestionRejected &&
                                $scope.suggestionEditorIsShown);
                        };
                        $scope.isResubmitButtonDisabled = function () {
                            return !($scope.summaryMessage &&
                                ($scope.suggestionData.newSuggestionHtml.trim() !==
                                    newContent.html.trim()));
                        };
                        $scope.cancelEditMode = function () {
                            $scope.suggestionEditorIsShown = false;
                        };
                        $scope.resubmitChanges = function () {
                            $uibModalInstance.close({
                                action: SuggestionModalService.ACTION_RESUBMIT_SUGGESTION,
                                newSuggestionHtml: $scope.suggestionData.newSuggestionHtml,
                                summaryMessage: $scope.summaryMessage,
                                stateName: $scope.stateName,
                                suggestionType: $scope.suggestionType,
                                oldContent: $scope.oldContent
                            });
                        };
                    }
                ]
            }).result.then(function (result) {
                var RESUBMIT_SUGGESTION_URL_TEMPLATE = ('/suggestionactionhandler/resubmit/<suggestion_id>');
                var HANDLE_SUGGESTION_URL_TEMPLATE = ('/suggestionactionhandler/<target_type>/<target_id>/<suggestion_id>');
                var url = null;
                var data = null;
                if (result.action === 'resubmit' &&
                    result.suggestionType === 'edit_exploration_state_content') {
                    url = UrlInterpolationService.interpolateUrl(RESUBMIT_SUGGESTION_URL_TEMPLATE, {
                        suggestion_id: activeThread.suggestion.suggestionId
                    });
                    data = {
                        action: result.action,
                        summary_message: result.summaryMessage,
                        change: {
                            cmd: 'edit_state_property',
                            property_name: 'content',
                            state_name: result.stateName,
                            old_value: result.oldContent,
                            new_value: {
                                html: result.newSuggestionHtml
                            }
                        }
                    };
                }
                else {
                    url = UrlInterpolationService.interpolateUrl(HANDLE_SUGGESTION_URL_TEMPLATE, {
                        target_type: activeThread.suggestion.targetType,
                        target_id: activeThread.suggestion.targetId,
                        suggestion_id: activeThread.suggestion.suggestionId
                    });
                    data = {
                        action: result.action,
                        commit_message: result.commitMessage,
                        review_message: result.reviewMessage
                    };
                }
                $http.put(url, data).then(function () {
                    for (var i = 0; i < suggestionsToReviewList.length; i++) {
                        if (suggestionsToReviewList[i] === activeThread) {
                            suggestionsToReviewList.splice(i, 1);
                            break;
                        }
                    }
                    clearActiveThread();
                }, function () {
                    $log.error('Error resolving suggestion');
                });
            });
        };
        return {
            showSuggestionModal: function (suggestionType, extraParams) {
                if (suggestionType === 'edit_exploration_state_content') {
                    _showEditStateContentSuggestionModal(extraParams.activeThread, extraParams.suggestionsToReviewList, extraParams.clearActiveThread, extraParams.canReviewActiveThread);
                }
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/editor-tab/services/solution-validity.service.ts":
/*!****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/editor-tab/services/solution-validity.service.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service for keeping track of solution validity.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var SolutionValidityService = /** @class */ (function () {
    function SolutionValidityService() {
        this.solutionValidities = {};
    }
    SolutionValidityService.prototype.init = function (stateNames) {
        var _this = this;
        stateNames.forEach(function (stateName) {
            _this.solutionValidities[stateName] = true;
        });
    };
    SolutionValidityService.prototype.deleteSolutionValidity = function (stateName) {
        delete this.solutionValidities[stateName];
    };
    SolutionValidityService.prototype.onRenameState = function (newStateName, oldStateName) {
        this.solutionValidities[newStateName] =
            this.solutionValidities[oldStateName];
        this.deleteSolutionValidity(oldStateName);
    };
    SolutionValidityService.prototype.updateValidity = function (stateName, solutionIsValid) {
        this.solutionValidities[stateName] = solutionIsValid;
    };
    SolutionValidityService.prototype.isSolutionValid = function (stateName) {
        if (this.solutionValidities.hasOwnProperty(stateName)) {
            return this.solutionValidities[stateName];
        }
    };
    SolutionValidityService.prototype.getAllValidities = function () {
        return this.solutionValidities;
    };
    SolutionValidityService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], SolutionValidityService);
    return SolutionValidityService;
}());
exports.SolutionValidityService = SolutionValidityService;
angular.module('oppia').factory('SolutionValidityService', static_1.downgradeInjectable(SolutionValidityService));


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/feedback-tab/services/thread-status-display.service.ts":
/*!**********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/feedback-tab/services/thread-status-display.service.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service that provides information about how to display the
 * status label for a thread in the feedback tab of the exploration editor.
 */
var cloneDeep_1 = __importDefault(__webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js"));
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var ThreadStatusDisplayService = /** @class */ (function () {
    function ThreadStatusDisplayService() {
        this.STATUS_CHOICES = cloneDeep_1.default(ThreadStatusDisplayService_1._STATUS_CHOICES);
    }
    ThreadStatusDisplayService_1 = ThreadStatusDisplayService;
    ThreadStatusDisplayService.prototype.getLabelClass = function (status) {
        if (status === 'open') {
            return 'label label-info';
        }
        else if (status === 'compliment') {
            return 'label label-success';
        }
        else {
            return 'label label-default';
        }
    };
    ThreadStatusDisplayService.prototype.getHumanReadableStatus = function (status) {
        for (var i = 0; i < ThreadStatusDisplayService_1._STATUS_CHOICES.length; i++) {
            if (ThreadStatusDisplayService_1._STATUS_CHOICES[i].id === status) {
                return ThreadStatusDisplayService_1._STATUS_CHOICES[i].text;
            }
        }
        return '';
    };
    var ThreadStatusDisplayService_1;
    ThreadStatusDisplayService._STATUS_CHOICES = [{
            id: 'open',
            text: 'Open'
        }, {
            id: 'fixed',
            text: 'Fixed'
        }, {
            id: 'ignored',
            text: 'Ignored'
        }, {
            id: 'compliment',
            text: 'Compliment'
        }, {
            id: 'not_actionable',
            text: 'Not Actionable'
        }];
    ThreadStatusDisplayService = ThreadStatusDisplayService_1 = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], ThreadStatusDisplayService);
    return ThreadStatusDisplayService;
}());
exports.ThreadStatusDisplayService = ThreadStatusDisplayService;
angular.module('oppia').factory('ThreadStatusDisplayService', static_1.downgradeInjectable(ThreadStatusDisplayService));


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/feedback-tab/thread-table/thread-table.directive.ts":
/*!*******************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/feedback-tab/thread-table/thread-table.directive.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for displaying the list of threads in the feedback
 * tab of the exploration editor.
 */
__webpack_require__(/*! filters/string-utility-filters/truncate.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate.filter.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/feedback-tab/services/thread-status-display.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/feedback-tab/services/thread-status-display.service.ts");
__webpack_require__(/*! services/DateTimeFormatService.ts */ "./core/templates/dev/head/services/DateTimeFormatService.ts");
angular.module('oppia').directive('threadTable', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                onClickRow: '=',
                getThreads: '&threads'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/feedback-tab/thread-table/' +
                'thread-table.directive.html'),
            controller: [
                '$scope', 'ThreadStatusDisplayService', 'DateTimeFormatService',
                function ($scope, ThreadStatusDisplayService, DateTimeFormatService) {
                    $scope.getLabelClass = ThreadStatusDisplayService.getLabelClass;
                    $scope.getHumanReadableStatus = (ThreadStatusDisplayService.getHumanReadableStatus);
                    $scope.getLocaleAbbreviatedDatetimeString = (DateTimeFormatService.getLocaleAbbreviatedDatetimeString);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Facilitates communication between the current interaction
 * and the progress nav. The former holds data about the learner's answer,
 * while the latter contains the actual "Submit" button which triggers the
 * answer submission process.
 */
__webpack_require__(/*! components/state-editor/state-editor-properties-services/state-editor.service.ts */ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-editor.service.ts");
__webpack_require__(/*! components/state-editor/state-editor-properties-services/state-interaction-id.service.ts */ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-interaction-id.service.ts");
__webpack_require__(/*! components/state-editor/state-editor-properties-services/state-property.service.ts */ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-property.service.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
angular.module('oppia').factory('CurrentInteractionService', [
    'ContextService', 'StateEditorService', 'StateInteractionIdService', function (ContextService, StateEditorService, StateInteractionIdService) {
        var _submitAnswerFn = null;
        var _onSubmitFn = null;
        var _validityCheckFn = null;
        var _presubmitHooks = [];
        return {
            setOnSubmitFn: function (onSubmit) {
                /**
                 * The ConversationSkinDirective should register its onSubmit
                 * callback here.
                 *
                 * @param {function(answer, interactionRulesService)} onSubmit
                 */
                _onSubmitFn = onSubmit;
            },
            registerCurrentInteraction: function (submitAnswerFn, validityCheckFn) {
                /**
                 * Each interaction directive should call registerCurrentInteraction
                 * when the interaction directive is first created.
                 *
                 * @param {function|null} submitAnswerFn - Should grab the learner's
                 *   answer and pass it to onSubmit. The interaction can pass in
                 *   null if it does not use the progress nav's submit button
                 *   (ex: MultipleChoiceInput).
                 * @param {function} validityCheckFn - The progress nav will use this
                 *   to decide whether or not to disable the submit button. If the
                 *   interaction passes in null, the submit button will remain
                 *   enabled (for the entire duration of the current interaction).
                 */
                _submitAnswerFn = submitAnswerFn || null;
                _validityCheckFn = validityCheckFn || null;
            },
            registerPresubmitHook: function (hookFn) {
                /* Register a hook that will be called right before onSubmit.
                 * All hooks for the current interaction will be cleared right
                 * before loading the next card.
                 */
                _presubmitHooks.push(hookFn);
            },
            clearPresubmitHooks: function () {
                /* Clear out all the hooks for the current interaction. Should
                 * be called before loading the next card.
                 */
                _presubmitHooks = [];
            },
            onSubmit: function (answer, interactionRulesService) {
                for (var i = 0; i < _presubmitHooks.length; i++) {
                    _presubmitHooks[i]();
                }
                _onSubmitFn(answer, interactionRulesService);
            },
            submitAnswer: function () {
                /* This starts the answer submit process, it should be called once the
                 * learner presses the "Submit" button.
                 */
                if (_submitAnswerFn === null) {
                    var additionalInfo = ('\nUndefined submit answer debug logs:' +
                        '\nInteraction ID: ' + StateInteractionIdService.savedMemento +
                        '\nExploration ID: ' + ContextService.getExplorationId() +
                        '\nState name: ' + StateEditorService.getActiveStateName());
                    throw Error('The current interaction did not ' +
                        'register a _submitAnswerFn.' + additionalInfo);
                }
                else {
                    _submitAnswerFn();
                }
            },
            isSubmitButtonDisabled: function () {
                /* Returns whether or not the Submit button should be disabled based on
                 * the validity of the current answer. If the interaction does not pass
                 * in a _validityCheckFn, then _validityCheckFn will be null and by
                 * default we assume the answer is valid, so the submit button should
                 * not be disabled.
                 */
                if (_validityCheckFn === null) {
                    return false;
                }
                return !_validityCheckFn();
            },
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/CodeNormalizerService.ts":
/*!*******************************************************************!*\
  !*** ./core/templates/dev/head/services/CodeNormalizerService.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service for code normalization. Used by the code REPL
 * and pencil code interactions.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var CodeNormalizerService = /** @class */ (function () {
    function CodeNormalizerService() {
    }
    CodeNormalizerService.prototype.removeLeadingWhitespace = function (str) {
        return str.replace(/^\s+/g, '');
    };
    CodeNormalizerService.prototype.removeTrailingWhitespace = function (str) {
        return str.replace(/\s+$/g, '');
    };
    CodeNormalizerService.prototype.removeIntermediateWhitespace = function (str) {
        return str.replace(/\s+/g, ' ');
    };
    CodeNormalizerService.prototype.getNormalizedCode = function (codeString) {
        var _this = this;
        /*
         * Normalizes a code string (which is assumed not to contain tab
         * characters). In particular:
         *
         * - Strips out lines that start with '#' (comments), possibly preceded by
         *     whitespace.
         * - Trims trailing whitespace on each line, and normalizes multiple
         *     whitespace characters within a single line into one space
         *     character.
         * - Removes blank newlines.
         * - Make the indentation level four spaces.
         */
        // TODO(sll): Augment this function to strip out comments that occur at
        // the end of a line. However, be careful with lines where '#' is
        // contained in quotes or the character is escaped.
        var FOUR_SPACES = '    ';
        // Maps the number of spaces at the beginning of a line to an int
        // specifying the desired indentation level.
        var numSpacesToDesiredIndentLevel = {
            0: 0
        };
        var codeLines = this.removeTrailingWhitespace(codeString).split('\n');
        var normalizedCodeLines = [];
        codeLines.forEach(function (line) {
            if (_this.removeLeadingWhitespace(line).indexOf('#') === 0) {
                return;
            }
            line = _this.removeTrailingWhitespace(line);
            if (!line) {
                return;
            }
            var numSpaces = line.length - _this.removeLeadingWhitespace(line).length;
            var existingNumSpaces = Object.keys(numSpacesToDesiredIndentLevel);
            var maxNumSpaces = Math.max.apply(null, existingNumSpaces);
            if (numSpaces > maxNumSpaces) {
                // Add a new indentation level
                numSpacesToDesiredIndentLevel[numSpaces] = existingNumSpaces.length;
            }
            // This is set when the indentation level of the current line does not
            // start a new scope, and also does not match any previous indentation
            // level. This case is actually invalid, but for now, we take the
            // largest indentation level that is less than this one.
            // TODO(sll): Bad indentation should result in an error nearer the
            // source.
            var isShortfallLine = !numSpacesToDesiredIndentLevel.hasOwnProperty(numSpaces) &&
                numSpaces < maxNumSpaces;
            // Clear all existing indentation levels to the right of this one.
            for (var indentLength in numSpacesToDesiredIndentLevel) {
                if (Number(indentLength) > numSpaces) {
                    delete numSpacesToDesiredIndentLevel[indentLength];
                }
            }
            if (isShortfallLine) {
                existingNumSpaces = Object.keys(numSpacesToDesiredIndentLevel);
                numSpaces = Math.max.apply(null, existingNumSpaces);
            }
            var normalizedLine = '';
            for (var i = 0; i < numSpacesToDesiredIndentLevel[numSpaces]; i++) {
                normalizedLine += FOUR_SPACES;
            }
            normalizedLine += _this.removeIntermediateWhitespace(_this.removeLeadingWhitespace(line));
            normalizedCodeLines.push(normalizedLine);
        });
        return normalizedCodeLines.join('\n');
    };
    CodeNormalizerService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], CodeNormalizerService);
    return CodeNormalizerService;
}());
exports.CodeNormalizerService = CodeNormalizerService;
angular.module('oppia').factory('CodeNormalizerService', static_1.downgradeInjectable(CodeNormalizerService));


/***/ }),

/***/ "./core/templates/dev/head/services/SuggestionModalService.ts":
/*!********************************************************************!*\
  !*** ./core/templates/dev/head/services/SuggestionModalService.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service to handle common code for suggestion modal display.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var SuggestionModalService = /** @class */ (function () {
    function SuggestionModalService() {
        this.SUGGESTION_ACCEPTED_MSG = ('This suggestion has already been accepted.');
        this.SUGGESTION_REJECTED_MSG = ('This suggestion has already been rejected.');
        this.SUGGESTION_INVALID_MSG = ('This suggestion was made for a state that no longer exists.' +
            ' It cannot be accepted.');
        this.UNSAVED_CHANGES_MSG = ('You have unsaved changes to this exploration. Please save/discard your ' +
            'unsaved changes if you wish to accept.');
        this.ACTION_ACCEPT_SUGGESTION = 'accept';
        this.ACTION_REJECT_SUGGESTION = 'reject';
        this.ACTION_RESUBMIT_SUGGESTION = 'resubmit';
        this.SUGGESTION_ACCEPTED = 'accepted';
        this.SUGGESTION_REJECTED = 'rejected';
    }
    // TODO(YashJipkate): Replace 'any' with the exact type. This has been kept as
    // 'any' since '$uibModalInstance' is a AngularJS native object and does not
    // have a TS interface.
    SuggestionModalService.prototype.acceptSuggestion = function ($uibModalInstance, paramDict) {
        $uibModalInstance.close(paramDict);
    };
    // TODO(YashJipkate): Replace 'any' with the exact type. This has been kept as
    // 'any' since '$uibModalInstance' is a AngularJS native object and does not
    // have a TS interface.
    SuggestionModalService.prototype.rejectSuggestion = function ($uibModalInstance, paramDict) {
        $uibModalInstance.close(paramDict);
    };
    // TODO(YashJipkate): Replace 'any' with the exact type. This has been kept as
    // 'any' since '$uibModalInstance' is a AngularJS native object and does not
    // have a TS interface.
    SuggestionModalService.prototype.cancelSuggestion = function ($uibModalInstance) {
        $uibModalInstance.dismiss('cancel');
    };
    SuggestionModalService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], SuggestionModalService);
    return SuggestionModalService;
}());
exports.SuggestionModalService = SuggestionModalService;
angular.module('oppia').factory('SuggestionModalService', static_1.downgradeInjectable(SuggestionModalService));


/***/ }),

/***/ "./extensions/classifiers/classifiers-extension.constants.ajs.ts":
/*!***********************************************************************!*\
  !*** ./extensions/classifiers/classifiers-extension.constants.ajs.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for classfiers extensions.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var classifiers_extension_constants_1 = __webpack_require__(/*! classifiers/classifiers-extension.constants */ "./extensions/classifiers/classifiers-extension.constants.ts");
angular.module('oppia').constant('PythonProgramTokenType', classifiers_extension_constants_1.ClassifiersExtensionConstants.PythonProgramTokenType);


/***/ }),

/***/ "./extensions/classifiers/classifiers-extension.constants.ts":
/*!*******************************************************************!*\
  !*** ./extensions/classifiers/classifiers-extension.constants.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for classfiers extensions.
 */
var ClassifiersExtensionConstants = /** @class */ (function () {
    function ClassifiersExtensionConstants() {
    }
    ClassifiersExtensionConstants.PythonProgramTokenType = {
        COMMENT: 'COMMENT',
        NL: 'NL',
        STRING: 'STRING',
        INDENT: 'INDENT',
        DEDENT: 'DEDENT',
        ENDMARKER: 'ENDMARKER',
        NUMBER: 'NUMBER',
        NAME: 'NAME',
        OP: 'OP',
        ERRORTOKEN: 'ERRORTOKEN'
    };
    return ClassifiersExtensionConstants;
}());
exports.ClassifiersExtensionConstants = ClassifiersExtensionConstants;


/***/ }),

/***/ "./extensions/classifiers/count-vectorizer.service.ts":
/*!************************************************************!*\
  !*** ./extensions/classifiers/count-vectorizer.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Vectorizer function which mirrors the CountVectorizer feature
 * extractor of sklearn.
 *
 * IMPORTANT NOTE: The Vectorizer function uses the vocabulary that was
 * extracted during the training. During training scikit's
 * CountVectorizer class is used for this purpose. If there are any changes
 * in scikit's CountVectorize class then corresponding changes must be
 * propagated here.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var CountVectorizerService = /** @class */ (function () {
    function CountVectorizerService() {
    }
    CountVectorizerService.prototype.vectorize = function (tokens, vocabulary) {
        var vectorLength = Object.keys(vocabulary).length;
        var vector = [];
        for (var i = 0; i < vectorLength; i++) {
            vector.push(0);
        }
        if (tokens === null) {
            return vector;
        }
        tokens.forEach(function (token) {
            if (vocabulary.hasOwnProperty(token)) {
                vector[vocabulary[token]] += 1;
            }
        });
        return vector;
    };
    CountVectorizerService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], CountVectorizerService);
    return CountVectorizerService;
}());
exports.CountVectorizerService = CountVectorizerService;
angular.module('oppia').factory('CountVectorizerService', static_1.downgradeInjectable(CountVectorizerService));


/***/ }),

/***/ "./extensions/classifiers/python-program.tokenizer.ts":
/*!************************************************************!*\
  !*** ./extensions/classifiers/python-program.tokenizer.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Tokenizer for Python code.
 *
 * IMPORTANT NOTE: The tokenizer is built using Python's own tokenizer module.
 * These functions are simply translated from Python code to JS code and they
 * both do same task. The unnecessary code from Python's tokenizer module
 * has been removed before translating it into JS and code relevant to
 * generating tokens has been kept intact. If Python version changes on Oppia-ml
 * then changes in Python's tokenizer module must be propagated here.
 *
 * Python's tokenizer module for Python version 2.7:
 * https://github.com/python/cpython/blob/2.7/Lib/tokenize.py
 */
__webpack_require__(/*! classifiers/classifiers-extension.constants.ajs.ts */ "./extensions/classifiers/classifiers-extension.constants.ajs.ts");
angular.module('oppia').factory('PythonProgramTokenizer', [
    '$log', 'PythonProgramTokenType', function ($log, PythonProgramTokenType) {
        var groupOfRegEx = function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return '(' + Array.prototype.join.call(params, '|') + ')';
        };
        var regExMayBePresent = function (params) {
            return groupOfRegEx(params) + '?';
        };
        var repeatedRegEx = function (params) {
            return groupOfRegEx(params) + '*';
        };
        var whitespace = '[ \\f\\t]*';
        var comment = '#[^\\r\\n]*';
        var ignore = whitespace + repeatedRegEx('\\\\\\r?\\n' + whitespace) + regExMayBePresent(comment);
        var name = '[a-zA-Z_]\\w*';
        var hexnumber = '0[xX][\\da-fA-F]+[lL]?';
        var octnumber = '(0[oO][0-7]+)|(0[0-7]*)[lL]?';
        var binnumber = '0[bB][01]+[lL]?';
        var decnumber = '[1-9]\\d*[lL]?';
        var intnumber = groupOfRegEx(hexnumber, binnumber, octnumber, decnumber);
        var exponent = '[eE][-+]?\\d+';
        var pointfloat = groupOfRegEx('\\d+\\.\\d*', '\\\\d+\\\\.\\\\d*') + regExMayBePresent(exponent);
        var expfloat = '\\d+' + exponent;
        var floatnumber = groupOfRegEx(pointfloat, expfloat);
        var imagnumber = groupOfRegEx('\\d+[jJ]', floatnumber + '[jJ]');
        var num = groupOfRegEx(imagnumber, floatnumber, intnumber);
        // Tail end of ' string.
        var single = '[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'';
        // Tail end of " string.
        var doubleQuote = '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"';
        // Tail end of ''' string.
        var single3 = "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''";
        // Tail end of """ string.
        var double3 = '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""';
        var triple = groupOfRegEx("[uUbB]?[rR]?'''", '[uUbB]?[rR]?"""');
        // single-line ' or " string.
        var str = groupOfRegEx("[uUbB]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'", '[uUbB]?[rR]?"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*"');
        // Because of leftmost-then-longest match semantics, be sure to put the
        // longest operators first (e.g., if = came before ==, == would get
        // recognized as two instances of =).
        var operator = groupOfRegEx('\\*\\*=?', '>>=?', '<<=?', '<>', '!=', '//=?', '[+\\-*/%&|^=<>]=?', '~');
        var bracket = '[(){}]';
        var special = groupOfRegEx('\\r?\\n', '[:;.,\\`@]');
        var funny = groupOfRegEx(operator, bracket, special);
        var plaintoken = groupOfRegEx(num, funny, str, name);
        var token = ignore + plaintoken;
        // First (or only) line of ' or " string.
        var contStr = groupOfRegEx("[uUbB]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'" +
            groupOfRegEx("'", '\\\\\\r?\\n'), '[uUbB]?[rR]?"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*' +
            groupOfRegEx('"', '\\\\\\r?\\n'));
        var pseudoextras = groupOfRegEx('\\\\\\r?\\n|\\Z', comment, triple);
        var pseudotoken = whitespace + groupOfRegEx(pseudoextras, num, funny, contStr, name);
        // Regular Expression object.
        var tokenprog = new RegExp(token);
        var pseudoprog = new RegExp(pseudotoken);
        var single3prog = new RegExp(single3);
        var double3prog = new RegExp(double3);
        var endprogs = {
            "'": new RegExp(single), '"': new RegExp(doubleQuote),
            "'''": single3prog, '"""': double3prog,
            "r'''": single3prog, 'r"""': double3prog,
            "u'''": single3prog, 'u"""': double3prog,
            "ur'''": single3prog, 'ur"""': double3prog,
            "R'''": single3prog, 'R"""': double3prog,
            "U'''": single3prog, 'U"""': double3prog,
            "uR'''": single3prog, 'uR"""': double3prog,
            "Ur'''": single3prog, 'Ur"""': double3prog,
            "UR'''": single3prog, 'UR"""': double3prog,
            "b'''": single3prog, 'b"""': double3prog,
            "br'''": single3prog, 'br"""': double3prog,
            "B'''": single3prog, 'B"""': double3prog,
            "bR'''": single3prog, 'bR"""': double3prog,
            "Br'''": single3prog, 'Br"""': double3prog,
            "BR'''": single3prog, 'BR"""': double3prog,
            r: null, R: null, u: null, U: null,
            b: null, B: null
        };
        var tripleQuoted = [
            "'''", '"""', "r'''", 'r"""', "R'''", 'R"""',
            "u'''", 'u"""', "U'''", 'U"""', "ur'''", 'ur"""', "Ur'''", 'Ur"""',
            "uR'''", 'uR"""', "UR'''", 'UR"""', "b'''", 'b"""', "B'''", 'B"""',
            "br'''", 'br"""', "Br'''", 'Br"""', "bR'''", 'bR"""', "BR'''", 'BR"""'
        ];
        var singleQuoted = [
            "'", '"', "r'", 'r"', "R'", 'R"', "u'", 'u"', "U'", 'U"', "ur'",
            'ur"', "Ur'", 'Ur"', "uR'", 'uR"', "UR'", 'UR"', "b'", 'b"', "B'", 'B"',
            "br'", 'br"', "Br'", 'Br"', "bR'", 'bR"', "BR'", 'BR"'
        ];
        var tabsize = 8;
        return {
            generateTokens: function (program) {
                var tokenizedProgram = [];
                var lnum = 0;
                var parenlev = 0;
                var continued = 0;
                var namechars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_';
                var numchars = '0123456789';
                var contstr = '';
                var needcont = 0;
                var contline = null;
                var indents = [0];
                var lcount = 0;
                var endprog = null;
                while (1) {
                    var line = program[lcount];
                    lcount++;
                    if (line === undefined) {
                        break;
                    }
                    var pos = 0;
                    var max = line.length;
                    if (contstr) {
                        if (!line) {
                            // Exception.
                            $log.error('EOF in multi-line string');
                        }
                        var endmatch = endprog.exec(line);
                        if (endmatch && endmatch.index === 0) {
                            token = endmatch[0];
                            pos = pos + token.length;
                            tokenizedProgram.push([PythonProgramTokenType.STRING, token]);
                            contstr = '';
                            needcont = 0;
                            contline = null;
                        }
                        else if (needcont && line.slice(-2) !== '\\\n' ||
                            line.slice(-3) !== '\\\r\n') {
                            tokenizedProgram.push([PythonProgramTokenType.ERRORTOKEN, contstr + line]);
                            contstr = '';
                            contline = null;
                            continue;
                        }
                        else {
                            contstr = contstr + line;
                            contline = contline + line;
                            continue;
                        }
                    }
                    else if (parenlev === 0 && !continued) {
                        // New statement.
                        if (!line) {
                            break;
                        }
                        var column = 0;
                        // Measure leading whitespace.
                        while (pos < max) {
                            if (line[pos] === ' ') {
                                column += 1;
                            }
                            else if (line[pos] === '\t') {
                                column = (column / tabsize + 1) * tabsize;
                            }
                            else if (line[pos] === '\f') {
                                column = 0;
                            }
                            else {
                                break;
                            }
                            pos += 1;
                        }
                        if (pos === max) {
                            break;
                        }
                        // Skip comments or blank lines.
                        if (('#\r\n').indexOf(line[pos]) !== -1) {
                            if (line[pos] === '#') {
                                var commentToken = line.slice(pos).replace('\\r\\n', '');
                                var nlPos = pos + commentToken.length;
                                tokenizedProgram.push([PythonProgramTokenType.COMMENT, commentToken]);
                                tokenizedProgram.push([PythonProgramTokenType.NL, line.slice(nlPos)]);
                            }
                            else {
                                var comment = PythonProgramTokenType.COMMENT;
                                var nl = PythonProgramTokenType.NL;
                                tokenizedProgram.push([
                                    PythonProgramTokenType.line[pos] === '#' ? comment : nl,
                                    line.slice(pos)
                                ]);
                            }
                            continue;
                        }
                        // Count indents or dedents.
                        if (column > indents[-1]) {
                            indents.push(column);
                            tokenizedProgram.push([PythonProgramTokenType.INDENT, line.slice(0, pos)]);
                        }
                        while (column < indents[-1]) {
                            if (indents.indexOf(column) === -1) {
                                $log.error('unindent does not match any outer indentation level');
                            }
                            indents = indents.slice(0, -1);
                            tokenizedProgram.push([PythonProgramTokenType.DEDENT, '']);
                        }
                    }
                    else {
                        // Continued statement.
                        if (!line) {
                            $log.error('EOF in multi-line statement');
                        }
                        continued = 0;
                    }
                    while (pos < max) {
                        var pseudomatch = pseudoprog.exec(line.slice(pos));
                        // Scan for tokens.
                        if (pseudomatch && pseudomatch.index === 0) {
                            var start = pos + pseudomatch[0].indexOf(pseudomatch[1]);
                            var end = start + pseudomatch[1].length;
                            pos = end;
                            if (start === end) {
                                continue;
                            }
                            var token = line.slice(start, end);
                            var initial = line[start];
                            // Ordinary number.
                            if (numchars.indexOf(initial) !== -1 ||
                                (initial === '.' && token !== '.')) {
                                tokenizedProgram.push([PythonProgramTokenType.NUMBER, token]);
                            }
                            else if ('\r\n'.indexOf(initial) !== -1) {
                                tokenizedProgram.push([PythonProgramTokenType.NL, token]);
                            }
                            else if (initial === '#') {
                                if (!token.endswith('\n')) {
                                    tokenizedProgram.push([PythonProgramTokenType.COMMENT, token]);
                                }
                            }
                            else if (tripleQuoted.indexOf(token) !== -1) {
                                endprog = endprogs[token];
                                endmatch = endprog.exec(line.slice(pos));
                                // All on one line.
                                if (endmatch) {
                                    pos = pos + endmatch[0].length;
                                    token = line.slice(start, pos);
                                    tokenizedProgram.push([PythonProgramTokenType.STRING, token]);
                                }
                                else {
                                    // Multiple lines.
                                    contstr = line.slice(start);
                                    contline = line;
                                    break;
                                }
                            }
                            else if (singleQuoted.indexOf(initial) !== -1 ||
                                singleQuoted.indexOf(token.slice(0, 2)) !== -1 ||
                                singleQuoted.indexOf(token.slice(0, 3)) !== -1) {
                                // Continued string.
                                if (token.slice(-1) === '\n') {
                                    endprog = (endprogs[initial] || endprogs[token[1]] ||
                                        endprogs[token[2]]);
                                    contstr = line.slice(start);
                                    needcont = 1;
                                    contline = line;
                                    break;
                                }
                                else {
                                    tokenizedProgram.push([PythonProgramTokenType.STRING, token]);
                                }
                            }
                            else if (namechars.indexOf(initial) !== -1) {
                                // Ordinary name
                                tokenizedProgram.push([PythonProgramTokenType.NAME, token]);
                            }
                            else if (initial === '\\') {
                                // Continued statement.
                                continued = 1;
                            }
                            else {
                                if ('([{'.indexOf(initial) !== -1) {
                                    parenlev += 1;
                                }
                                else if (')]}'.indexOf(initial) !== -1) {
                                    parenlev -= 1;
                                }
                                tokenizedProgram.push([PythonProgramTokenType.OP, token]);
                            }
                        }
                        else {
                            tokenizedProgram.push([PythonProgramTokenType.ERRORTOKEN, line[pos]]);
                            pos += 1;
                        }
                    }
                }
                // Pop remaining indent levels
                for (var indent in indents.slice(1)) {
                    tokenizedProgram.push([PythonProgramTokenType.DEDENT, '']);
                }
                tokenizedProgram.push([PythonProgramTokenType.ENDMARKER, '']);
                return tokenizedProgram;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/classifiers/svm-prediction.service.ts":
/*!**********************************************************!*\
  !*** ./extensions/classifiers/svm-prediction.service.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview SVM predict function for SVC classifier of sklearn.
 *
 * IMPORTANT NOTE: The predict function uses svm data that was extracted
 * after training of classifier on Oppia-ml. If there are any changes in
 * format of extracted data then corresponding changes must be propagated here.
 * Oppia-ml uses scikit's SVC class during training classifier which uses
 * libsvm's implementation. If there are any changes in following part of
 * code in libsvm then corresponding changes must be propagated here.
 *
 * libsvm's code for prediction:
 * https://github.com/arnaudsj/libsvm/blob/master/svm.cpp#L2481
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var PredictionResultObjectFactory_1 = __webpack_require__(/*! domain/classifier/PredictionResultObjectFactory */ "./core/templates/dev/head/domain/classifier/PredictionResultObjectFactory.ts");
var IKernelParams = /** @class */ (function () {
    function IKernelParams() {
    }
    return IKernelParams;
}());
exports.IKernelParams = IKernelParams;
var SVMPredictionService = /** @class */ (function () {
    function SVMPredictionService(predictionResultObjectFactory) {
        this.predictionResultObjectFactory = predictionResultObjectFactory;
    }
    SVMPredictionService.prototype.kernel = function (kernelParams, supportVectors, input) {
        var kernel = kernelParams.kernel;
        var kvalues = [];
        if (kernel === 'rbf') {
            var gamma = kernelParams.gamma;
            var vectorLength = input.length;
            for (var i = 0; i < supportVectors.length; i++) {
                var sum = 0;
                for (var j = 0; j < input.length; j++) {
                    sum += Math.pow((supportVectors[i][j] - input[j]), 2);
                }
                kvalues.push(Math.exp(-gamma * sum));
            }
        }
        else if (kernel === 'linear') {
            var vectorLength = input.length;
            for (var i = 0; i < supportVectors.length; i++) {
                var sum = 0;
                for (var j = 0; j < input.length; j++) {
                    sum += supportVectors[i][j] * input[j];
                }
                kvalues.push(sum);
            }
        }
        return kvalues;
    };
    // Find multiclass probabilities.
    // NOTE: This function is implemented as it is given in LibSVM.
    // For more information on exact approach used, read following paper:
    // https://www.csie.ntu.edu.tw/~cjlin/papers/svmprob/svmprob.pdf
    // Also take a look at implementation by LibSVM:
    // https://github.com/arnaudsj/libsvm/blob/master/svm.cpp#L1829
    SVMPredictionService.prototype.calculateMulticlassProbabilities = function (nClasses, pairwiseProb) {
        var Q = [];
        for (var i = 0; i < nClasses; i++) {
            Q.push([]);
            for (var j = 0; j < nClasses; j++) {
                Q[i].push(0);
            }
        }
        var Qp = [];
        for (var i = 0; i < nClasses; i++) {
            Qp.push(0);
        }
        var P = [];
        for (var i = 0; i < nClasses; i++) {
            P.push(0);
        }
        var maxIter = Math.max(100, nClasses);
        var eps = 0.005 / nClasses;
        for (var t = 0; t < nClasses; t++) {
            P[t] = 1.0 / nClasses;
            Q[t][t] = 0.0;
            for (var j = 0; j < t; j++) {
                Q[t][t] += pairwiseProb[j][t] * pairwiseProb[j][t];
                Q[t][j] = Q[j][t];
            }
            for (var j = t + 1; j < nClasses; j++) {
                Q[t][t] += pairwiseProb[j][t] * pairwiseProb[j][t];
                Q[t][j] = -pairwiseProb[j][t] * pairwiseProb[t][j];
            }
        }
        var iter = 0;
        for (iter = 0; iter < maxIter; iter++) {
            var pQp = 0.0;
            for (var t = 0; t < nClasses; t++) {
                Qp[t] = 0;
                for (var j = 0; j < nClasses; j++) {
                    Qp[t] += Q[t][j] * P[j];
                }
                pQp += P[t] * Qp[t];
            }
            var maxError = 0;
            for (var t = 0; t < nClasses; t++) {
                var error = Math.abs(Qp[t] - pQp);
                if (error > maxError) {
                    maxError = error;
                }
            }
            if (maxError < eps) {
                break;
            }
            for (var t = 0; t < nClasses; t++) {
                var diff = (-Qp[t] + pQp) / Q[t][t];
                P[t] += diff;
                pQp = ((pQp + diff * (diff * Q[t][t] + 2 * Qp[t])) /
                    (1 + diff) / (1 + diff));
                for (var j = 0; j < nClasses; j++) {
                    Qp[j] = (Qp[j] + diff * Q[t][j]) / (1 + diff);
                    P[j] /= (1 + diff);
                }
            }
        }
        if (iter >= maxIter) {
            console.warn('Exceeds maxIter in calculateMulticlassProbabilities');
        }
        return P;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'classifierData' is a dict with underscore_cased keys which
    // give tslint errors against underscore_casing in favor of camelCasing. Same
    // goes for 'input'.
    SVMPredictionService.prototype.predict = function (classifierData, input) {
        var nSupport = classifierData.n_support;
        var supportVectors = classifierData.support_vectors;
        var dualCoef = classifierData.dual_coef;
        var intercept = classifierData.intercept;
        var classes = classifierData.classes;
        var kernelParams = classifierData.kernel_params;
        var probA = classifierData.probA;
        var probB = classifierData.probB;
        var startIndices = [];
        startIndices[0] = 0;
        for (var i = 1; i < nSupport.length; i++) {
            startIndices[i] = startIndices[i - 1] + nSupport[i - 1];
        }
        if (supportVectors[0].length !== input.length) {
            // Support vector and input dimensions do not match.
            console.error('Dimension of support vectors and given input is different.');
        }
        // Find kernel values for supportVectors and given input. Assumes that
        // input has same dimension and data type as any of the supportVectors.
        var kvalues = this.kernel(kernelParams, supportVectors, input);
        var votes = [];
        for (var i = 0; i < classes.length; i++) {
            votes.push(0);
        }
        var pairwiseProb = [];
        for (var i = 0; i < classes.length; i++) {
            pairwiseProb.push([]);
            for (var j = 0; j < classes.length; j++) {
                pairwiseProb[i].push(0);
            }
        }
        var p = 0;
        for (var i = 0; i < classes.length; i++) {
            for (var j = i + 1; j < classes.length; j++) {
                var si = startIndices[i];
                var sj = startIndices[j];
                var ci = nSupport[i];
                var cj = nSupport[j];
                var minProb = 1e-7;
                var coef1 = dualCoef[j - 1];
                var coef2 = dualCoef[i];
                var sum = 0;
                for (var k = 0; k < ci; k++) {
                    sum += kvalues[si + k] * coef1[si + k];
                }
                for (var k = 0; k < cj; k++) {
                    sum += kvalues[sj + k] * coef2[sj + k];
                }
                // NOTE: libsvm substracts the intercept from sum in its prediction
                // function. Here intercept is added because sci-kit negates the
                // intercept before passing it on to libsvm for prediction.
                // For more info see github following issue:
                // https://github.com/oppia/oppia/issues/4166
                sum += intercept[p];
                // The following approach to calculate pairwise probabilities was
                // proposed by platt. For more info on LibSVM's implementation
                // of platt scaling, read following paper:
                // https://www.csie.ntu.edu.tw/~cjlin/papers/plattprob.pdf
                // Also take a look at following implementation by LibSVM:
                // https://github.com/arnaudsj/libsvm/blob/master/svm.cpp#L2552
                var f = probA[p] * sum + probB[p];
                var prob = 0;
                if (f >= 0) {
                    prob = Math.exp(-f) / (1 + Math.exp(-f));
                }
                else {
                    prob = 1 / (1 + Math.exp(f));
                }
                prob = Math.min(Math.max(prob, minProb), 1 - minProb);
                pairwiseProb[i][j] = prob;
                pairwiseProb[j][i] = 1 - prob;
                p++;
            }
        }
        var probabilities = this.calculateMulticlassProbabilities(classes.length, pairwiseProb);
        var maxProbIdx = 0;
        for (var i = 1; i < classes.length; i++) {
            if (probabilities[i] > probabilities[maxProbIdx]) {
                maxProbIdx = i;
            }
        }
        var predictedLabel = classes[maxProbIdx];
        var prediction = this.predictionResultObjectFactory.createNew(predictedLabel, probabilities[maxProbIdx]);
        return prediction;
    };
    var _a;
    SVMPredictionService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof PredictionResultObjectFactory_1.PredictionResultObjectFactory !== "undefined" && PredictionResultObjectFactory_1.PredictionResultObjectFactory) === "function" ? _a : Object])
    ], SVMPredictionService);
    return SVMPredictionService;
}());
exports.SVMPredictionService = SVMPredictionService;
angular.module('oppia').factory('SVMPredictionService', static_1.downgradeInjectable(SVMPredictionService));


/***/ }),

/***/ "./extensions/classifiers/text-input.tokenizer.ts":
/*!********************************************************!*\
  !*** ./extensions/classifiers/text-input.tokenizer.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Tokenizer for TextInput.
 *
 * Note: This is a simple tokenizer for tokenizing text input. The parameter
 * n_grams is used for deciding if we need to add n_gram tokens other than
 * the unigram tokens. As of now, we are only interested in unigrams but if
 * needed in the future, this tokenizer should be able to generate n-grams
 * also.
 *
 * For reference: https://github.com/scikit-learn/scikit-learn/
 *     blob/master/sklearn/feature_extraction/text.py#L541
 */
// TODO(anmol): Add functionality to add n_grams, remove stop words.
angular.module('oppia').factory('TextInputTokenizer', [function () {
        return {
            generateTokens: function (textInput) {
                var tokenizedTextInput;
                // The default regexp select tokens of 2 or more alphanumeric
                // characters (punctuation is completely ignored and always treated
                // as a token separator).
                var tokenPattern = '\\b\\w\\w+\\b';
                var regexp = new RegExp(tokenPattern, 'g');
                tokenizedTextInput = textInput.match(regexp);
                return tokenizedTextInput;
            }
        };
    }]);


/***/ }),

/***/ "./extensions/classifiers/winnowing-preprocessing.service.ts":
/*!*******************************************************************!*\
  !*** ./extensions/classifiers/winnowing-preprocessing.service.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Winnowing preprocessing functions.
 *
 * IMPORTANT NOTE: The preprocessing functions are implemented according to
 * winnowing preprocessing functions used on Oppia-ml. These functions
 * are simple translation of Python code to JS code and they both do exact
 * same task.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var WinnowingPreprocessingService = /** @class */ (function () {
    function WinnowingPreprocessingService() {
    }
    WinnowingPreprocessingService_1 = WinnowingPreprocessingService;
    WinnowingPreprocessingService.generateHashValue = function (tokens, tokenToId) {
        var hashVal = 0;
        var n = tokens.length - 1;
        var base = Math.pow(Object.keys(tokenToId).length, n);
        tokens.forEach(function (token) {
            hashVal += tokenToId[token] * base;
            base /= Object.keys(tokenToId).length;
        });
        return hashVal;
    };
    WinnowingPreprocessingService.prototype.getKGramHashes = function (tokens, tokenToId, K) {
        // Generate all possible k-gram hashes from tokens.
        var kGramHashes = [];
        var kTokens;
        for (var i = 0; i < tokens.length - K + 1; i += 1) {
            kTokens = tokens.slice(i, i + K);
            kGramHashes.push(WinnowingPreprocessingService_1.generateHashValue(kTokens, tokenToId));
        }
        return kGramHashes;
    };
    WinnowingPreprocessingService.prototype.getFingerprintFromHashes = function (kGramHashes, T, K) {
        // Generate fingerprint of a document from its k-gram hashes.
        var windowSize = T - K + 1;
        var fingerprintHashesIndex = new Set();
        for (var i = 0; i < kGramHashes.length - windowSize + 1; i += 1) {
            var windowHashes = kGramHashes.slice(i, i + windowSize);
            var minHashValue = Math.min.apply(Math, windowHashes);
            var minHashIndex = i + windowHashes.indexOf(minHashValue);
            fingerprintHashesIndex.add(minHashIndex);
        }
        var fingerprint = [];
        fingerprintHashesIndex.forEach(function (hashIndex) {
            fingerprint.push([kGramHashes[hashIndex], hashIndex]);
        });
        return fingerprint;
    };
    var WinnowingPreprocessingService_1;
    WinnowingPreprocessingService = WinnowingPreprocessingService_1 = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], WinnowingPreprocessingService);
    return WinnowingPreprocessingService;
}());
exports.WinnowingPreprocessingService = WinnowingPreprocessingService;
angular.module('oppia').factory('WinnowingPreprocessingService', static_1.downgradeInjectable(WinnowingPreprocessingService));


/***/ }),

/***/ "./extensions/interactions/CodeRepl/CodeRepl.ts":
/*!******************************************************!*\
  !*** ./extensions/interactions/CodeRepl/CodeRepl.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for CodeRepl interaction.
 */
__webpack_require__(/*! interactions/CodeRepl/static/code_repl.css */ "./extensions/interactions/CodeRepl/static/code_repl.css");
__webpack_require__(/*! interactions/CodeRepl/code-repl-prediction.service.ts */ "./extensions/interactions/CodeRepl/code-repl-prediction.service.ts");
__webpack_require__(/*! interactions/CodeRepl/directives/code-repl-rules.service.ts */ "./extensions/interactions/CodeRepl/directives/code-repl-rules.service.ts");
__webpack_require__(/*! interactions/CodeRepl/directives/code-repl-validation.service.ts */ "./extensions/interactions/CodeRepl/directives/code-repl-validation.service.ts");
__webpack_require__(/*! interactions/CodeRepl/directives/oppia-interactive-code-repl.directive.ts */ "./extensions/interactions/CodeRepl/directives/oppia-interactive-code-repl.directive.ts");
__webpack_require__(/*! interactions/CodeRepl/directives/oppia-response-code-repl.directive.ts */ "./extensions/interactions/CodeRepl/directives/oppia-response-code-repl.directive.ts");
__webpack_require__(/*! interactions/CodeRepl/directives/oppia-short-response-code-repl.directive.ts */ "./extensions/interactions/CodeRepl/directives/oppia-short-response-code-repl.directive.ts");


/***/ }),

/***/ "./extensions/interactions/CodeRepl/code-repl-prediction.service.ts":
/*!**************************************************************************!*\
  !*** ./extensions/interactions/CodeRepl/code-repl-prediction.service.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview CodeRepl interaction prediction functions.
 *
 * IMPORTANT NOTE: The prediction function uses the classifier data
 * of trained model (code classifier model) for inference. These functions
 * must be changed if there are any changes in corresponding classifier training
 * function on Oppia-ml.
 */
__webpack_require__(/*! classifiers/count-vectorizer.service.ts */ "./extensions/classifiers/count-vectorizer.service.ts");
__webpack_require__(/*! classifiers/python-program.tokenizer.ts */ "./extensions/classifiers/python-program.tokenizer.ts");
__webpack_require__(/*! classifiers/svm-prediction.service.ts */ "./extensions/classifiers/svm-prediction.service.ts");
__webpack_require__(/*! classifiers/winnowing-preprocessing.service.ts */ "./extensions/classifiers/winnowing-preprocessing.service.ts");
__webpack_require__(/*! interactions/interactions-extension.constants.ajs.ts */ "./extensions/interactions/interactions-extension.constants.ajs.ts");
angular.module('oppia').factory('CodeReplPredictionService', [
    'CountVectorizerService', 'PythonProgramTokenType',
    'PythonProgramTokenizer', 'SVMPredictionService',
    'WinnowingPreprocessingService',
    'CODE_REPL_PREDICTION_SERVICE_THRESHOLD', function (CountVectorizerService, PythonProgramTokenType, PythonProgramTokenizer, SVMPredictionService, WinnowingPreprocessingService, CODE_REPL_PREDICTION_SERVICE_THRESHOLD) {
        // The string with which all the variable and method names need to be
        // replaced.
        var TOKEN_NAME_VAR = 'V';
        // The string with which all unknown tokens (tokens which are ignored
        // because they appear rarely in a program) will be replaced.
        var TOKEN_NAME_UNK = 'UNK';
        // List of python keywords.
        var KW_LIST = [
            'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del',
            'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global',
            'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print',
            'raise', 'return', 'try', 'while', 'with', 'yield'
        ];
        var predictionService = {
            getTokenizedProgram: function (programTokens, tokenToId) {
                // Tokenize Python programs in dataset for winnowing.
                var tokenizedProgram = [];
                for (var i = 0; i < programTokens.length; i++) {
                    var token = programTokens[i];
                    var tokenId = token[0];
                    var tokenName = token[1];
                    if (tokenId === PythonProgramTokenType.NL ||
                        tokenId === PythonProgramTokenType.COMMENT ||
                        tokenName.trim() === '') {
                        continue;
                    }
                    else if (tokenId === PythonProgramTokenType.NAME &&
                        KW_LIST.indexOf(tokenName) === -1) {
                        tokenizedProgram.push(TOKEN_NAME_VAR);
                    }
                    else {
                        if (tokenToId.hasOwnProperty(tokenName)) {
                            tokenizedProgram.push(tokenName);
                        }
                        else {
                            tokenizedProgram.push(TOKEN_NAME_UNK);
                        }
                    }
                }
                return tokenizedProgram;
            },
            getTokenizedProgramForCV: function (programTokens) {
                // Tokenize Python programs in dataset for winnowing.
                var tokenizedProgram = [];
                for (var i = 0; i < programTokens.length; i++) {
                    var token = programTokens[i];
                    var tokenId = token[0];
                    var tokenName = token[1];
                    if (tokenId === PythonProgramTokenType.NL ||
                        tokenId === PythonProgramTokenType.COMMENT ||
                        tokenName.trim() === '') {
                        continue;
                    }
                    else if (tokenId === PythonProgramTokenType.NAME &&
                        KW_LIST.indexOf(tokenName) === -1) {
                        tokenizedProgram.push(TOKEN_NAME_VAR);
                    }
                    else {
                        tokenizedProgram.push(tokenName);
                    }
                }
                return tokenizedProgram;
            },
            calcJaccardIndex: function (multisetA, multisetB) {
                // Calculate jaccard index between two multisets.
                multisetA.sort(function (x, y) {
                    return x > y ? 1 : -1;
                });
                multisetB.sort(function (x, y) {
                    return x > y ? 1 : -1;
                });
                var smallSet = ((multisetA.length < multisetB.length) ?
                    multisetA.slice() : multisetB.slice());
                var unionSet = ((multisetA.length < multisetB.length) ?
                    multisetB.slice() : multisetA.slice());
                var index = 0;
                var extraElements = [];
                smallSet.forEach(function (elem) {
                    while (index < unionSet.length && elem > unionSet[index]) {
                        index += 1;
                    }
                    if (index >= unionSet.length || elem < unionSet[index]) {
                        extraElements.push(elem);
                    }
                    else if (elem === unionSet[index]) {
                        index += 1;
                    }
                });
                unionSet = unionSet.concat(extraElements);
                if (unionSet.length === 0) {
                    return 0;
                }
                index = 0;
                var intersectionSet = [];
                multisetA.forEach(function (elem) {
                    while (index < multisetB.length && elem > multisetB[index]) {
                        index += 1;
                    }
                    if (index < multisetB.length && elem === multisetB[index]) {
                        intersectionSet.push(elem);
                        index += 1;
                    }
                });
                var coeff = intersectionSet.length / unionSet.length;
                return coeff;
            },
            getProgramSimilarity: function (fingerprintA, fingerprintB) {
                // Calculate similarity between two programs' fingerprints.
                var multisetA = [];
                var multisetB = [];
                fingerprintA.forEach(function (hash) {
                    multisetA.push(hash[0]);
                });
                fingerprintB.forEach(function (hash) {
                    multisetB.push(hash[0]);
                });
                return predictionService.calcJaccardIndex(multisetA, multisetB);
            },
            findNearestNeighborsIndexes: function (knnData, program) {
                // Find index of nearest neighbor programs to given program.
                var K = knnData.K;
                var T = knnData.T;
                var fingerprintData = knnData.fingerprint_data;
                var tokenToId = knnData.token_to_id;
                var top = knnData.top;
                // Find program tokens using python program tokenizer.
                var programLines = program.split('\n');
                // Empty lines in between program causes parser to think that program
                // has ended which leads to generation of wrong set of tokens.
                programLines = programLines.filter(function (line) {
                    return line.trim().length !== 0;
                });
                var pythonProgramTokens = PythonProgramTokenizer.generateTokens(programLines);
                // Normalize program tokens for winnowing preprocessing. This removes
                // unnecessary tokens and normalizes variable and method name tokens.
                var tokenizedProgram = predictionService.getTokenizedProgram(pythonProgramTokens, tokenToId);
                // Find k-gram hashes from normalized program tokens.
                var programHashes = WinnowingPreprocessingService.getKGramHashes(tokenizedProgram, tokenToId, K);
                // Find fingerprint from k-gram hashes of program.
                var programFingerprint = (WinnowingPreprocessingService.getFingerprintFromHashes(programHashes, T, K));
                // Calculte similarity of the input program with every program in
                // classifier data for k nearest neighbor classification.
                var similarityList = [];
                Object.keys(fingerprintData).forEach(function (index) {
                    var fingerprintA = fingerprintData[index].fingerprint;
                    var similarity = predictionService.getProgramSimilarity(fingerprintA, programFingerprint);
                    similarityList.push([parseInt(index), similarity]);
                });
                // Sort the programs according to their similairy with the
                // input program.
                similarityList.sort(function (x, y) {
                    return x[1] > y[1] ? -1 : 1;
                });
                var nearestNeighborsIndexes = similarityList.slice(0, top);
                return nearestNeighborsIndexes;
            },
            predict: function (classifierData, answer) {
                // Get python code from the input answer.
                var program = answer.code;
                var knnData = classifierData.KNN;
                var svmData = classifierData.SVM;
                var cvVocabulary = classifierData.cv_vocabulary;
                var fingerprintData = knnData.fingerprint_data;
                var top = knnData.top;
                var occurrence = knnData.occurrence;
                var nearestNeighborsIndexes = (predictionService.findNearestNeighborsIndexes(knnData, program));
                var nearesNeighborsClasses = [];
                // Find classes of nearest neighbor programs.
                nearestNeighborsIndexes.forEach(function (neighbor) {
                    var index = neighbor[0];
                    var outputClassPropertyName = 'class';
                    var similarity = neighbor[1];
                    nearesNeighborsClasses.push([fingerprintData[index][outputClassPropertyName], similarity]);
                });
                // Count how many times a class appears in nearest neighbors.
                var classCount = {};
                nearesNeighborsClasses.forEach(function (neighbor) {
                    var outputClass = neighbor[0];
                    if (classCount.hasOwnProperty(outputClass)) {
                        classCount[outputClass] += 1;
                    }
                    else {
                        classCount[outputClass] = 1;
                    }
                });
                // Find the winning class.
                var classCountArray = [];
                Object.keys(classCount).forEach(function (k) {
                    classCountArray.push([parseInt(k), classCount[k]]);
                });
                classCountArray.sort(function (x, y) {
                    return x[1] > y[1] ? -1 : 1;
                });
                var predictedClass = classCountArray[0][0];
                var predictedClassOccurrence = classCountArray[0][1];
                var prediction = predictedClass;
                if (predictedClassOccurrence >= occurrence) {
                    if (classCountArray.length > 1) {
                        if (predictedClassOccurrence !== classCountArray[1][1]) {
                            // Check whether second most likely prediction does not have same
                            // occurrence count. If it does, then we assume that KNN has
                            // failed.
                            return prediction;
                        }
                    }
                    else {
                        return prediction;
                    }
                }
                // If KNN fails to predict then use SVM to predict the output class.
                // Find program tokens using python program tokenizer.
                var programLines = program.split('\n');
                // Empty lines in between program causes parser to think that program
                // has ended which leads to generation of wrong set of tokens.
                programLines = programLines.filter(function (line) {
                    return line.trim().length !== 0;
                });
                var pythonProgramTokens = PythonProgramTokenizer.generateTokens(programLines);
                var tokenizedProgram = predictionService.getTokenizedProgramForCV(pythonProgramTokens);
                var programVector = CountVectorizerService.vectorize(tokenizedProgram, cvVocabulary);
                var predictionResult = SVMPredictionService.predict(svmData, programVector);
                if (predictionResult.predictionConfidence >
                    CODE_REPL_PREDICTION_SERVICE_THRESHOLD) {
                    return predictionResult.predictionLabel;
                }
                return -1;
            }
        };
        return predictionService;
    }
]);


/***/ }),

/***/ "./extensions/interactions/CodeRepl/directives/code-repl-rules.service.ts":
/*!********************************************************************************!*\
  !*** ./extensions/interactions/CodeRepl/directives/code-repl-rules.service.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts");
__webpack_require__(/*! services/CodeNormalizerService.ts */ "./core/templates/dev/head/services/CodeNormalizerService.ts");
angular.module('oppia').factory('CodeReplRulesService', [
    '$filter', 'CodeNormalizerService',
    function ($filter, CodeNormalizerService) {
        return {
            CodeEquals: function (answer, inputs) {
                var normalizedCode = CodeNormalizerService.getNormalizedCode(answer.code);
                var normalizedExpectedCode = CodeNormalizerService.getNormalizedCode(inputs.x);
                return normalizedCode === normalizedExpectedCode;
            },
            CodeContains: function (answer, inputs) {
                var normalizedCode = CodeNormalizerService.getNormalizedCode(answer.code);
                var normalizedSnippet = CodeNormalizerService.getNormalizedCode(inputs.x);
                return normalizedCode.indexOf(normalizedSnippet) !== -1;
            },
            CodeDoesNotContain: function (answer, inputs) {
                var normalizedCode = CodeNormalizerService.getNormalizedCode(answer.code);
                var normalizedSnippet = CodeNormalizerService.getNormalizedCode(inputs.x);
                return normalizedCode.indexOf(normalizedSnippet) === -1;
            },
            OutputContains: function (answer, inputs) {
                var normalizedOutput = $filter('normalizeWhitespace')(answer.output);
                var normalizedSnippet = $filter('normalizeWhitespace')(inputs.x);
                return normalizedOutput.indexOf(normalizedSnippet) !== -1;
            },
            OutputEquals: function (answer, inputs) {
                var normalizedOutput = $filter('normalizeWhitespace')(answer.output);
                var normalizedExpectedOutput = $filter('normalizeWhitespace')(inputs.x);
                return normalizedOutput === normalizedExpectedOutput;
            },
            ResultsInError: function (answer) {
                return !!(answer.error.trim());
            },
            ErrorContains: function (answer, inputs) {
                var normalizedError = $filter('normalizeWhitespace')(answer.error);
                var normalizedSnippet = $filter('normalizeWhitespace')(inputs.x);
                return normalizedError.indexOf(normalizedSnippet) !== -1;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/CodeRepl/directives/code-repl-validation.service.ts":
/*!*************************************************************************************!*\
  !*** ./extensions/interactions/CodeRepl/directives/code-repl-validation.service.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var CodeReplValidationService = /** @class */ (function () {
    function CodeReplValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    CodeReplValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        var warningsList = [];
        this.baseInteractionValidationServiceInstance.requireCustomizationArguments(customizationArgs, [
            'language',
            'placeholder',
            'preCode',
            'postCode'
        ]);
        var language = customizationArgs.language.value;
        if (!(typeof language === 'string')) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: 'Programming language name must be a string.'
            });
        }
        var placeholder = customizationArgs.placeholder.value;
        if (!(typeof placeholder === 'string')) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: 'Placeholder text must be a string.'
            });
        }
        var preCode = customizationArgs.preCode.value;
        if (!(typeof preCode === 'string')) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: 'The pre-code text must be a string.'
            });
        }
        var postCode = customizationArgs.postCode.value;
        if (!(typeof postCode === 'string')) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: 'The post-code text must be a string.'
            });
        }
        return warningsList;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    CodeReplValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        return this.getCustomizationArgsWarnings(customizationArgs).concat(this.baseInteractionValidationServiceInstance.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
    };
    var _a;
    CodeReplValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], CodeReplValidationService);
    return CodeReplValidationService;
}());
exports.CodeReplValidationService = CodeReplValidationService;
angular.module('oppia').factory('CodeReplValidationService', static_1.downgradeInjectable(CodeReplValidationService));


/***/ }),

/***/ "./extensions/interactions/CodeRepl/directives/oppia-interactive-code-repl.directive.ts":
/*!**********************************************************************************************!*\
  !*** ./extensions/interactions/CodeRepl/directives/oppia-interactive-code-repl.directive.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the CodeRepl interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! interactions/codemirrorRequires.ts */ "./extensions/interactions/codemirrorRequires.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/CodeRepl/directives/code-repl-rules.service.ts */ "./extensions/interactions/CodeRepl/directives/code-repl-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
angular.module('oppia').directive('oppiaInteractiveCodeRepl', [
    'CodeReplRulesService', 'HtmlEscaperService', 'UrlInterpolationService',
    'EVENT_NEW_CARD_AVAILABLE',
    function (CodeReplRulesService, HtmlEscaperService, UrlInterpolationService, EVENT_NEW_CARD_AVAILABLE) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getLastAnswer: '&lastAnswer',
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/CodeRepl/directives/' +
                'code-repl-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$attrs', 'WindowDimensionsService',
                'CurrentInteractionService',
                function ($scope, $attrs, WindowDimensionsService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.interactionIsActive = (ctrl.getLastAnswer() === null);
                    $scope.$on(EVENT_NEW_CARD_AVAILABLE, function () {
                        ctrl.interactionIsActive = false;
                    });
                    ctrl.language = HtmlEscaperService.escapedJsonToObj($attrs.languageWithValue);
                    ctrl.placeholder = HtmlEscaperService.escapedJsonToObj($attrs.placeholderWithValue);
                    ctrl.preCode = HtmlEscaperService.escapedJsonToObj($attrs.preCodeWithValue);
                    ctrl.postCode = HtmlEscaperService.escapedJsonToObj($attrs.postCodeWithValue);
                    // Make sure ctrl.preCode ends with a newline:
                    if (ctrl.preCode.trim().length === 0) {
                        ctrl.preCode = '';
                    }
                    else if (ctrl.preCode.slice(-1) !== '\n') {
                        ctrl.preCode += '\n';
                    }
                    // Make sure ctrl.placeholder ends with a newline.
                    if (ctrl.placeholder.slice(-1) !== '\n') {
                        ctrl.placeholder += '\n';
                    }
                    ctrl.hasLoaded = false;
                    // Keep the code string given by the user and the stdout from the
                    // evaluation until sending them back to the server.
                    if (ctrl.interactionIsActive) {
                        ctrl.code = (ctrl.preCode + ctrl.placeholder + ctrl.postCode);
                        ctrl.output = '';
                    }
                    else {
                        ctrl.code = ctrl.getLastAnswer().code;
                        ctrl.output = ctrl.getLastAnswer().output;
                    }
                    ctrl.initCodeEditor = function (editor) {
                        editor.setValue(ctrl.code);
                        // Options for the ui-codemirror display.
                        editor.setOption('lineNumbers', true);
                        editor.setOption('indentWithTabs', true);
                        editor.setOption('indentUnit', 4);
                        editor.setOption('mode', 'python');
                        editor.setOption('extraKeys', {
                            Tab: function (cm) {
                                var spaces = Array(cm.getOption('indentUnit') + 1).join(' ');
                                cm.replaceSelection(spaces);
                                // Move the cursor to the end of the selection.
                                var endSelectionPos = cm.getDoc().getCursor('head');
                                cm.getDoc().setCursor(endSelectionPos);
                            }
                        });
                        editor.setOption('theme', 'preview default');
                        // NOTE: this is necessary to avoid the textarea being greyed-out.
                        setTimeout(function () {
                            editor.refresh();
                            initMarkers(editor);
                        }, 200);
                        editor.on('change', function () {
                            ctrl.code = editor.getValue();
                        });
                        // Without this, the editor does not show up correctly on small
                        // screens when the user switches to the supplemental interaction.
                        $scope.$on('showInteraction', function () {
                            setTimeout(function () {
                                editor.refresh();
                                initMarkers(editor);
                            }, 200);
                        });
                        ctrl.hasLoaded = true;
                    };
                    // Configure Skulpt.
                    Sk.configure({
                        output: function (out) {
                            // This output function is called continuously throughout the
                            // runtime of the script.
                            ctrl.output += out;
                        },
                        read: function (name) {
                            // This function is called when a builtin module is imported
                            if (Sk.builtinFiles.files[name] === undefined) {
                                // If corresponding module is not present then,
                                // removal of this block also results in failure of import.
                                throw 'module ' + name + ' not found';
                            }
                            return Sk.builtinFiles.files[name];
                        },
                        timeoutMsg: function () {
                            ctrl.sendResponse('', 'timeout');
                        },
                        execLimit: 10000
                    });
                    ctrl.runAndSubmitCode = function (codeInput) {
                        ctrl.runCode(codeInput, function (evaluation, err) {
                            ctrl.sendResponse(evaluation, err);
                        });
                    };
                    var submitAnswer = function () {
                        ctrl.runAndSubmitCode(ctrl.code);
                    };
                    ctrl.runCode = function (codeInput, onFinishRunCallback) {
                        ctrl.code = codeInput;
                        ctrl.output = '';
                        // Evaluate the program asynchronously using Skulpt.
                        Sk.misceval.asyncToPromise(function () {
                            Sk.importMainWithBody('<stdin>', false, codeInput, true);
                        }).then(function () {
                            // Finished evaluating.
                            ctrl.evaluation = '';
                            ctrl.fullError = '';
                            if (onFinishRunCallback) {
                                onFinishRunCallback('', '');
                            }
                        }, function (err) {
                            if (!(err instanceof Sk.builtin.TimeLimitError)) {
                                ctrl.evaluation = '';
                                ctrl.fullError = String(err);
                                if (onFinishRunCallback) {
                                    onFinishRunCallback('', String(err));
                                }
                            }
                        });
                    };
                    var initMarkers = function (editor) {
                        var doc = editor.getDoc();
                        // The -1 here is because prepended code ends with a newline.
                        var preCodeNumLines = ctrl.preCode.split('\n').length - 1;
                        var postCodeNumLines = ctrl.postCode.split('\n').length;
                        var fullCodeNumLines = ctrl.code.split('\n').length;
                        var userCodeNumLines = (fullCodeNumLines - preCodeNumLines - postCodeNumLines);
                        // Mark pre- and post- code as uneditable, and give it some styling.
                        var markOptions = {
                            atomic: false,
                            readOnly: true,
                            inclusiveLeft: true,
                            inclusiveRight: true
                        };
                        if (ctrl.preCode.length !== 0) {
                            doc.markText({
                                line: 0,
                                ch: 0
                            }, {
                                line: preCodeNumLines,
                                ch: 0
                            }, angular.extend({}, markOptions, {
                                inclusiveRight: false
                            }));
                            for (var i = 0; i < preCodeNumLines; i++) {
                                editor.addLineClass(i, 'text', 'code-repl-noneditable-line');
                            }
                        }
                        if (ctrl.postCode.length !== 0) {
                            doc.markText({
                                line: preCodeNumLines + userCodeNumLines,
                                ch: 0
                            }, {
                                line: fullCodeNumLines,
                                ch: 0
                            }, markOptions);
                            for (var i = 0; i < postCodeNumLines; i++) {
                                editor.addLineClass(preCodeNumLines + userCodeNumLines + i, 'text', 'code-repl-noneditable-line');
                            }
                        }
                    };
                    ctrl.sendResponse = function (evaluation, err) {
                        CurrentInteractionService.onSubmit({
                            // Replace tabs with 2 spaces.
                            // TODO(sll): Change the default Python indentation to 4 spaces.
                            code: ctrl.code.replace(/\t/g, '  ') || '',
                            output: ctrl.output,
                            evaluation: ctrl.evaluation,
                            error: (err || '')
                        }, CodeReplRulesService);
                        // Without this, the error message displayed in the user-facing
                        // console will sometimes not update.
                        $scope.$apply();
                    };
                    CurrentInteractionService.registerCurrentInteraction(submitAnswer, null);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/CodeRepl/directives/oppia-response-code-repl.directive.ts":
/*!*******************************************************************************************!*\
  !*** ./extensions/interactions/CodeRepl/directives/oppia-response-code-repl.directive.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the CodeRepl response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
angular.module('oppia').directive('oppiaResponseCodeRepl', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/CodeRepl/directives/' +
                'code-repl-response.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'FocusManagerService',
                function ($attrs, FocusManagerService) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    if (ctrl.answer.error) {
                        ctrl.errorFocusLabel = FocusManagerService.generateFocusLabel();
                        FocusManagerService.setFocus(ctrl.errorFocusLabel);
                    }
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/CodeRepl/directives/oppia-short-response-code-repl.directive.ts":
/*!*************************************************************************************************!*\
  !*** ./extensions/interactions/CodeRepl/directives/oppia-short-response-code-repl.directive.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the CodeRepl short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! filters/string-utility-filters/truncate-at-first-line.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseCodeRepl', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/CodeRepl/directives/' +
                'code-repl-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/CodeRepl/static/code_repl.css":
/*!***************************************************************!*\
  !*** ./extensions/interactions/CodeRepl/static/code_repl.css ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./code_repl.css */ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/CodeRepl/static/code_repl.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./extensions/interactions/Continue/Continue.ts":
/*!******************************************************!*\
  !*** ./extensions/interactions/Continue/Continue.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for Continue interaction.
 */
__webpack_require__(/*! interactions/Continue/directives/continue-rules.service.ts */ "./extensions/interactions/Continue/directives/continue-rules.service.ts");
__webpack_require__(/*! interactions/Continue/directives/continue-validation.service.ts */ "./extensions/interactions/Continue/directives/continue-validation.service.ts");
__webpack_require__(/*! interactions/Continue/directives/oppia-interactive-continue.directive.ts */ "./extensions/interactions/Continue/directives/oppia-interactive-continue.directive.ts");
__webpack_require__(/*! interactions/Continue/directives/oppia-response-continue.directive.ts */ "./extensions/interactions/Continue/directives/oppia-response-continue.directive.ts");
__webpack_require__(/*! interactions/Continue/directives/oppia-short-response-continue.directive.ts */ "./extensions/interactions/Continue/directives/oppia-short-response-continue.directive.ts");


/***/ }),

/***/ "./extensions/interactions/Continue/directives/continue-rules.service.ts":
/*!*******************************************************************************!*\
  !*** ./extensions/interactions/Continue/directives/continue-rules.service.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Rules service for the interaction.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var ContinueRulesService = /** @class */ (function () {
    function ContinueRulesService() {
    }
    ContinueRulesService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], ContinueRulesService);
    return ContinueRulesService;
}());
exports.ContinueRulesService = ContinueRulesService;
angular.module('oppia').factory('ContinueRulesService', static_1.downgradeInjectable(ContinueRulesService));


/***/ }),

/***/ "./extensions/interactions/Continue/directives/continue-validation.service.ts":
/*!************************************************************************************!*\
  !*** ./extensions/interactions/Continue/directives/continue-validation.service.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var ContinueValidationService = /** @class */ (function () {
    function ContinueValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    ContinueValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        var warningsList = [];
        this.baseInteractionValidationServiceInstance.requireCustomizationArguments(customizationArgs, ['buttonText']);
        if (customizationArgs.buttonText.value.length === 0) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'The button text should not be empty.'
            });
        }
        return warningsList;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    ContinueValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = this.getCustomizationArgsWarnings(customizationArgs);
        if (answerGroups.length > 0) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: ('Only the default outcome is necessary for a continue' +
                    ' interaction.')
            });
        }
        if (!defaultOutcome || defaultOutcome.isConfusing(stateName)) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: ('Please specify what Oppia should do after the button' +
                    ' is clicked.')
            });
        }
        return warningsList;
    };
    var _a;
    ContinueValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], ContinueValidationService);
    return ContinueValidationService;
}());
exports.ContinueValidationService = ContinueValidationService;
angular.module('oppia').factory('ContinueValidationService', static_1.downgradeInjectable(ContinueValidationService));


/***/ }),

/***/ "./extensions/interactions/Continue/directives/oppia-interactive-continue.directive.ts":
/*!*********************************************************************************************!*\
  !*** ./extensions/interactions/Continue/directives/oppia-interactive-continue.directive.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Continue button interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/Continue/directives/continue-rules.service.ts */ "./extensions/interactions/Continue/directives/continue-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
angular.module('oppia').directive('oppiaInteractiveContinue', [
    'ContinueRulesService', 'HtmlEscaperService', 'UrlInterpolationService',
    function (ContinueRulesService, HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/Continue/directives/' +
                'continue-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'WindowDimensionsService',
                'CurrentInteractionService', 'ContextService',
                function ($attrs, WindowDimensionsService, CurrentInteractionService, ContextService) {
                    var ctrl = this;
                    ctrl.buttonText = HtmlEscaperService.escapedJsonToObj($attrs.buttonTextWithValue);
                    var DEFAULT_BUTTON_TEXT = 'Continue';
                    var DEFAULT_HUMAN_READABLE_ANSWER = 'Please continue.';
                    ctrl.isInEditorMode = ContextService.isInExplorationEditorMode();
                    ctrl.submitAnswer = function () {
                        // We used to show "(Continue)" to indicate a 'continue' action when
                        // the learner browses through the history of the exploration, but
                        // this apparently can be mistaken for a button/control. The
                        // following makes the learner's "answer" a bit more conversational,
                        // as if they were chatting with Oppia.
                        var humanReadableAnswer = DEFAULT_HUMAN_READABLE_ANSWER;
                        if (ctrl.buttonText !== DEFAULT_BUTTON_TEXT) {
                            humanReadableAnswer = ctrl.buttonText;
                        }
                        CurrentInteractionService.onSubmit(humanReadableAnswer, ContinueRulesService);
                    };
                    CurrentInteractionService.registerCurrentInteraction(ctrl.submitAnswer, null);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/Continue/directives/oppia-response-continue.directive.ts":
/*!******************************************************************************************!*\
  !*** ./extensions/interactions/Continue/directives/oppia-response-continue.directive.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Continue button response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseContinue', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/Continue/directives/' +
                'continue-response.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'HtmlEscaperService',
                function ($attrs, HtmlEscaperService) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/Continue/directives/oppia-short-response-continue.directive.ts":
/*!************************************************************************************************!*\
  !*** ./extensions/interactions/Continue/directives/oppia-short-response-continue.directive.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Continue button short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseContinue', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/Continue/directives/' +
                'continue-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'HtmlEscaperService',
                function ($attrs, HtmlEscaperService) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/DragAndDropSortInput/DragAndDropSortInput.ts":
/*!******************************************************************************!*\
  !*** ./extensions/interactions/DragAndDropSortInput/DragAndDropSortInput.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for DragAndDropSortInput interaction.
 */
__webpack_require__(/*! interactions/DragAndDropSortInput/directives/drag-and-drop-sort-input-rules.service.ts */ "./extensions/interactions/DragAndDropSortInput/directives/drag-and-drop-sort-input-rules.service.ts");
__webpack_require__(/*! interactions/DragAndDropSortInput/directives/drag-and-drop-sort-input-validation.service.ts */ "./extensions/interactions/DragAndDropSortInput/directives/drag-and-drop-sort-input-validation.service.ts");
__webpack_require__(/*! interactions/DragAndDropSortInput/directives/oppia-interactive-drag-and-drop-sort-input.directive.ts */ "./extensions/interactions/DragAndDropSortInput/directives/oppia-interactive-drag-and-drop-sort-input.directive.ts");
__webpack_require__(/*! interactions/DragAndDropSortInput/directives/oppia-response-drag-and-drop-sort-input.directive.ts */ "./extensions/interactions/DragAndDropSortInput/directives/oppia-response-drag-and-drop-sort-input.directive.ts");
__webpack_require__(/*! interactions/DragAndDropSortInput/directives/oppia-short-response-drag-and-drop-sort-input.directive.ts */ "./extensions/interactions/DragAndDropSortInput/directives/oppia-short-response-drag-and-drop-sort-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/DragAndDropSortInput/directives/drag-and-drop-sort-input-rules.service.ts":
/*!***********************************************************************************************************!*\
  !*** ./extensions/interactions/DragAndDropSortInput/directives/drag-and-drop-sort-input-rules.service.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
// Rules Service for DragAndDropSortInput interaction.
angular.module('oppia').factory('DragAndDropSortInputRulesService', [
    function () {
        var checkEquality = function (answer, inputs) {
            for (var i = 0; i < answer.length; i++) {
                if (answer[i].length === inputs.x[i].length) {
                    for (var j = 0; j < answer[i].length; j++) {
                        if (inputs.x[i].indexOf(answer[i][j]) === -1) {
                            return false;
                        }
                    }
                }
                else {
                    return false;
                }
            }
            return true;
        };
        var checkEqualityWithIncorrectPositions = function (answer, inputs) {
            var noOfMismatches = 0;
            for (var i = 0; i < math.min(inputs.x.length, answer.length); i++) {
                for (var j = 0; j < math.max(answer[i].length, inputs.x[i].length); j++) {
                    if (inputs.x[i].length > answer[i].length) {
                        if (answer[i].indexOf(inputs.x[i][j]) === -1) {
                            noOfMismatches += 1;
                        }
                    }
                    else {
                        if (inputs.x[i].indexOf(answer[i][j]) === -1) {
                            noOfMismatches += 1;
                        }
                    }
                }
            }
            return noOfMismatches === 1;
        };
        return {
            IsEqualToOrdering: function (answer, inputs) {
                return answer.length === inputs.x.length && checkEquality(answer, inputs);
            },
            IsEqualToOrderingWithOneItemAtIncorrectPosition: function (answer, inputs) {
                return checkEqualityWithIncorrectPositions(answer, inputs);
            },
            HasElementXAtPositionY: function (answer, inputs) {
                for (var i = 0; i < answer.length; i++) {
                    var index = answer[i].indexOf(inputs.x);
                    if (index !== -1) {
                        return ((i + 1) === inputs.y);
                    }
                }
            },
            HasElementXBeforeElementY: function (answer, inputs) {
                var indX = -1;
                var indY = -1;
                for (var i = 0; i < answer.length; i++) {
                    var index = answer[i].indexOf(inputs.x);
                    if (index !== -1) {
                        indX = i;
                    }
                    index = answer[i].indexOf(inputs.y);
                    if (index !== -1) {
                        indY = i;
                    }
                }
                return indX < indY;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/DragAndDropSortInput/directives/drag-and-drop-sort-input-validation.service.ts":
/*!****************************************************************************************************************!*\
  !*** ./extensions/interactions/DragAndDropSortInput/directives/drag-and-drop-sort-input-validation.service.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the drag and drop sorting interaction.
 */
// TODO(#7403): Convert this to partial imports.
var mathjs_1 = __importDefault(__webpack_require__(/*! mathjs */ "./node_modules/mathjs/index.js"));
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var DragAndDropSortInputValidationService = /** @class */ (function () {
    function DragAndDropSortInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    DragAndDropSortInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        var warningsList = [];
        this.baseInteractionValidationServiceInstance.requireCustomizationArguments(customizationArgs, ['choices']);
        var areAnyChoicesEmpty = false;
        var areAnyChoicesDuplicated = false;
        var seenChoices = [];
        var numChoices = customizationArgs.choices.value.length;
        if (numChoices < 2) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please enter at least two choices.'
            });
        }
        for (var i = 0; i < numChoices; i++) {
            var choice = customizationArgs.choices.value[i];
            if (choice.trim().length === 0) {
                areAnyChoicesEmpty = true;
            }
            if (seenChoices.indexOf(choice) !== -1) {
                areAnyChoicesDuplicated = true;
            }
            seenChoices.push(choice);
        }
        if (areAnyChoicesEmpty) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please ensure that the choices are nonempty.'
            });
        }
        if (areAnyChoicesDuplicated) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please ensure that the choices are unique.'
            });
        }
        return warningsList;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    DragAndDropSortInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = [];
        var seenItems = [];
        var ranges = [];
        var areAnyItemsEmpty = false;
        var areAnyItemsDuplicated = false;
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        var checkRedundancy = function (earlierRule, laterRule) {
            var noOfMismatches = 0;
            var inputs = earlierRule.inputs.x;
            var answer = laterRule.inputs.x;
            for (var i = 0; i < mathjs_1.default.min(inputs.length, answer.length); i++) {
                for (var j = 0; j < mathjs_1.default.max(answer[i].length, inputs[i].length); j++) {
                    if (inputs[i].length > answer[i].length) {
                        if (answer[i].indexOf(inputs[i][j]) === -1) {
                            noOfMismatches += 1;
                        }
                    }
                    else {
                        if (inputs[i].indexOf(answer[i][j]) === -1) {
                            noOfMismatches += 1;
                        }
                    }
                }
            }
            return noOfMismatches === 1;
        };
        for (var i = 0; i < answerGroups.length; i++) {
            var rules = answerGroups[i].rules;
            for (var j = 0; j < rules.length; j++) {
                var inputs = rules[j].inputs;
                var rule = rules[j];
                var range = {
                    answerGroupIndex: i + 1,
                    ruleIndex: j + 1
                };
                seenItems = [];
                areAnyItemsEmpty = false;
                areAnyItemsDuplicated = false;
                switch (rule.type) {
                    case 'HasElementXBeforeElementY':
                        if (inputs.x === inputs.y) {
                            warningsList.push({
                                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                                message: ('Rule ' + (j + 1) + ' from answer group ' +
                                    (i + 1) + ' will never be matched because both the ' +
                                    'selected elements are same.')
                            });
                        }
                        break;
                    case 'IsEqualToOrdering':
                    case 'IsEqualToOrderingWithOneItemAtIncorrectPosition':
                        for (var k = 0; k < inputs.x.length; k++) {
                            if (inputs.x[k].length === 0) {
                                areAnyItemsEmpty = true;
                            }
                            else {
                                for (var l = 0; l < inputs.x[k].length; l++) {
                                    var item = inputs.x[k][l];
                                    if (item.trim().length === 0) {
                                        areAnyItemsEmpty = true;
                                    }
                                    if (seenItems.indexOf(item) !== -1) {
                                        areAnyItemsDuplicated = true;
                                    }
                                    seenItems.push(item);
                                }
                            }
                        }
                        if (areAnyItemsEmpty) {
                            warningsList.push({
                                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                                message: 'Please ensure the items are nonempty.'
                            });
                        }
                        if (areAnyItemsDuplicated) {
                            warningsList.push({
                                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                                message: 'Please ensure the items are unique.'
                            });
                        }
                        break;
                    default:
                }
                for (var k = 0; k < ranges.length; k++) {
                    var earlierRule = answerGroups[ranges[k].answerGroupIndex - 1].
                        rules[ranges[k].ruleIndex - 1];
                    if (earlierRule.type ===
                        'IsEqualToOrderingWithOneItemAtIncorrectPosition' &&
                        rule.type === 'IsEqualToOrdering') {
                        if (checkRedundancy(earlierRule, rule)) {
                            warningsList.push({
                                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                                message: ('Rule ' + (j + 1) + ' from answer group ' +
                                    (i + 1) + ' will never be matched because it ' +
                                    'is made redundant by rule ' + ranges[k].ruleIndex +
                                    ' from answer group ' + ranges[k].answerGroupIndex +
                                    '.')
                            });
                        }
                    }
                }
                ranges.push(range);
            }
        }
        warningsList = warningsList.concat(this.baseInteractionValidationServiceInstance.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
        return warningsList;
    };
    var _a;
    DragAndDropSortInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], DragAndDropSortInputValidationService);
    return DragAndDropSortInputValidationService;
}());
exports.DragAndDropSortInputValidationService = DragAndDropSortInputValidationService;
angular.module('oppia').factory('DragAndDropSortInputValidationService', static_1.downgradeInjectable(DragAndDropSortInputValidationService));


/***/ }),

/***/ "./extensions/interactions/DragAndDropSortInput/directives/oppia-interactive-drag-and-drop-sort-input.directive.ts":
/*!*************************************************************************************************************************!*\
  !*** ./extensions/interactions/DragAndDropSortInput/directives/oppia-interactive-drag-and-drop-sort-input.directive.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the DragAndDropSortInput interaction.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/DragAndDropSortInput/directives/drag-and-drop-sort-input-rules.service.ts */ "./extensions/interactions/DragAndDropSortInput/directives/drag-and-drop-sort-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('oppia').directive('oppiaInteractiveDragAndDropSortInput', [
    'DragAndDropSortInputRulesService', 'HtmlEscaperService',
    'UrlInterpolationService', function (DragAndDropSortInputRulesService, HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/DragAndDropSortInput/directives/' +
                'drag-and-drop-sort-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'UrlService', 'CurrentInteractionService',
                function ($attrs, UrlService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.choices = HtmlEscaperService.escapedJsonToObj($attrs.choicesWithValue);
                    var answers = [];
                    ctrl.list = [];
                    ctrl.dataMaxDepth = 1;
                    ctrl.allowMultipleItemsInSamePosition = ($attrs.allowMultipleItemsInSamePositionWithValue === 'true');
                    if (ctrl.allowMultipleItemsInSamePosition) {
                        ctrl.dataMaxDepth = 2;
                    }
                    else {
                        ctrl.dataMaxDepth = 1;
                    }
                    // Make list of dicts from the list of choices.
                    for (var i = 0; i < ctrl.choices.length; i++) {
                        ctrl.list.push({ title: ctrl.choices[i], items: [] });
                    }
                    ctrl.treeOptions = {
                        dragMove: function (e) {
                            // Change the color of the placeholder based on the position of
                            // the dragged item.
                            if (e.dest.nodesScope.$childNodesScope !== undefined) {
                                e.elements.placeholder[0].style.borderColor = '#add8e6';
                            }
                            else {
                                e.elements.placeholder[0].style.borderColor = '#000000';
                            }
                        }
                    };
                    ctrl.submitAnswer = function () {
                        // Converting list of dicts to list of lists to make it consistent
                        // with the ListOfSetsOfHtmlStrings object.
                        answers = [];
                        for (var i = 0; i < ctrl.list.length; i++) {
                            answers.push([ctrl.list[i].title]);
                            for (var j = 0; j < ctrl.list[i].items.length; j++) {
                                answers[i].push(ctrl.list[i].items[j].title);
                            }
                        }
                        CurrentInteractionService.onSubmit(answers, DragAndDropSortInputRulesService);
                    };
                    CurrentInteractionService.registerCurrentInteraction(ctrl.submitAnswer, null);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/DragAndDropSortInput/directives/oppia-response-drag-and-drop-sort-input.directive.ts":
/*!**********************************************************************************************************************!*\
  !*** ./extensions/interactions/DragAndDropSortInput/directives/oppia-response-drag-and-drop-sort-input.directive.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the DragAndDropSortInput response.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseDragAndDropSortInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/DragAndDropSortInput/directives/' +
                'drag-and-drop-sort-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.chooseItemType = function (index) {
                        if (index === 0) {
                            ctrl.itemtype = 'drag-and-drop-response-item';
                        }
                        else {
                            ctrl.itemtype = 'drag-and-drop-response-subitem';
                        }
                        return true;
                    };
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.isAnswerLengthGreaterThanZero = (ctrl.answer.length > 0);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/DragAndDropSortInput/directives/oppia-short-response-drag-and-drop-sort-input.directive.ts":
/*!****************************************************************************************************************************!*\
  !*** ./extensions/interactions/DragAndDropSortInput/directives/oppia-short-response-drag-and-drop-sort-input.directive.ts ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the DragAndDropSortInput short response.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseDragAndDropSortInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/DragAndDropSortInput/directives/' +
                'drag-and-drop-sort-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.chooseItemType = function (index) {
                        if (index === 0) {
                            ctrl.itemtype = 'drag-and-drop-response-item';
                        }
                        else {
                            ctrl.itemtype = 'drag-and-drop-response-subitem';
                        }
                        return true;
                    };
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.isAnswerLengthGreaterThanZero = (ctrl.answer.length > 0);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/EndExploration/EndExploration.ts":
/*!******************************************************************!*\
  !*** ./extensions/interactions/EndExploration/EndExploration.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for EndExploration interaction.
 */
__webpack_require__(/*! interactions/EndExploration/directives/end-exploration-rules.service.ts */ "./extensions/interactions/EndExploration/directives/end-exploration-rules.service.ts");
__webpack_require__(/*! interactions/EndExploration/directives/end-exploration-validation.service.ts */ "./extensions/interactions/EndExploration/directives/end-exploration-validation.service.ts");
__webpack_require__(/*! interactions/EndExploration/directives/oppia-interactive-end-exploration.directive.ts */ "./extensions/interactions/EndExploration/directives/oppia-interactive-end-exploration.directive.ts");
__webpack_require__(/*! interactions/EndExploration/directives/oppia-response-end-exploration.directive.ts */ "./extensions/interactions/EndExploration/directives/oppia-response-end-exploration.directive.ts");
__webpack_require__(/*! interactions/EndExploration/directives/oppia-short-response-end-exploration.directive.ts */ "./extensions/interactions/EndExploration/directives/oppia-short-response-end-exploration.directive.ts");


/***/ }),

/***/ "./extensions/interactions/EndExploration/directives/end-exploration-rules.service.ts":
/*!********************************************************************************************!*\
  !*** ./extensions/interactions/EndExploration/directives/end-exploration-rules.service.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Rules service for the interaction.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var EndExplorationRulesService = /** @class */ (function () {
    function EndExplorationRulesService() {
    }
    EndExplorationRulesService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], EndExplorationRulesService);
    return EndExplorationRulesService;
}());
exports.EndExplorationRulesService = EndExplorationRulesService;
angular.module('oppia').factory('EndExplorationRulesService', static_1.downgradeInjectable(EndExplorationRulesService));


/***/ }),

/***/ "./extensions/interactions/EndExploration/directives/end-exploration-validation.service.ts":
/*!*************************************************************************************************!*\
  !*** ./extensions/interactions/EndExploration/directives/end-exploration-validation.service.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var EndExplorationValidationService = /** @class */ (function () {
    function EndExplorationValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    EndExplorationValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        var warningsList = [];
        this.baseInteractionValidationServiceInstance.requireCustomizationArguments(customizationArgs, ['recommendedExplorationIds']);
        var recommendedExplorationIds = (customizationArgs.recommendedExplorationIds.value);
        if (!Array.isArray(recommendedExplorationIds)) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: 'Set of recommended exploration IDs must be list.'
            });
        }
        for (var i = 0; i < recommendedExplorationIds.length; i++) {
            if (!(typeof recommendedExplorationIds[i] === 'string')) {
                warningsList.push({
                    type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                    message: 'Recommended exploration ID must be a string.'
                });
            }
        }
        return warningsList;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    EndExplorationValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = [];
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        if (answerGroups.length !== 0) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: 'Please make sure end exploration interactions do not ' +
                    'have any answer groups.'
            });
        }
        if (defaultOutcome) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: 'Please make sure end exploration interactions do not ' +
                    'have a default outcome.'
            });
        }
        return warningsList;
    };
    var _a;
    EndExplorationValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], EndExplorationValidationService);
    return EndExplorationValidationService;
}());
exports.EndExplorationValidationService = EndExplorationValidationService;
angular.module('oppia').factory('EndExplorationValidationService', static_1.downgradeInjectable(EndExplorationValidationService));


/***/ }),

/***/ "./extensions/interactions/EndExploration/directives/oppia-interactive-end-exploration.directive.ts":
/*!**********************************************************************************************************!*\
  !*** ./extensions/interactions/EndExploration/directives/oppia-interactive-end-exploration.directive.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the EndExploration 'interaction'.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/collection/ReadOnlyCollectionBackendApiService.ts */ "./core/templates/dev/head/domain/collection/ReadOnlyCollectionBackendApiService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('oppia').directive('oppiaInteractiveEndExploration', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/EndExploration/directives/' +
                'end-exploration-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$http', '$attrs', '$q', 'UrlService',
                'ContextService', 'ReadOnlyCollectionBackendApiService',
                'PAGE_CONTEXT', 'EXPLORATION_EDITOR_TAB_CONTEXT',
                'HtmlEscaperService', 'EXPLORATION_SUMMARY_DATA_URL_TEMPLATE',
                function ($http, $attrs, $q, UrlService, ContextService, ReadOnlyCollectionBackendApiService, PAGE_CONTEXT, EXPLORATION_EDITOR_TAB_CONTEXT, HtmlEscaperService, EXPLORATION_SUMMARY_DATA_URL_TEMPLATE) {
                    var ctrl = this;
                    var authorRecommendedExplorationIds = (HtmlEscaperService.escapedJsonToObj($attrs.recommendedExplorationIdsWithValue));
                    ctrl.isIframed = UrlService.isIframed();
                    ctrl.isInEditorPage = (ContextService.getPageContext() === (PAGE_CONTEXT.EXPLORATION_EDITOR));
                    ctrl.isInEditorPreviewMode = ctrl.isInEditorPage && (ContextService.getEditorTabContext() ===
                        EXPLORATION_EDITOR_TAB_CONTEXT.PREVIEW);
                    ctrl.isInEditorMainTab = ctrl.isInEditorPage && (ContextService.getEditorTabContext() ===
                        EXPLORATION_EDITOR_TAB_CONTEXT.EDITOR);
                    ctrl.collectionId = UrlService.getCollectionIdFromExplorationUrl();
                    if (ctrl.collectionId) {
                        ReadOnlyCollectionBackendApiService
                            .loadCollection(ctrl.collectionId)
                            .then(function (collection) {
                            ctrl.getCollectionTitle = function () {
                                return collection.title;
                            };
                        });
                    }
                    ctrl.errorMessage = '';
                    if (ctrl.isInEditorPage) {
                        // Display a message if any author-recommended explorations are
                        // invalid.
                        var explorationId = ContextService.getExplorationId();
                        $http.get(EXPLORATION_SUMMARY_DATA_URL_TEMPLATE, {
                            params: {
                                stringified_exp_ids: JSON.stringify(authorRecommendedExplorationIds)
                            }
                        }).then(function (response) {
                            var data = response.data;
                            var foundExpIds = [];
                            data.summaries.map(function (expSummary) {
                                foundExpIds.push(expSummary.id);
                            });
                            var missingExpIds = [];
                            authorRecommendedExplorationIds.forEach(function (expId) {
                                if (foundExpIds.indexOf(expId) === -1) {
                                    missingExpIds.push(expId);
                                }
                            });
                            if (missingExpIds.length === 0) {
                                ctrl.errorMessage = '';
                            }
                            else {
                                var listOfIds = missingExpIds.join('", "');
                                ctrl.errorMessage = ('Warning: exploration(s) with the IDs "' + listOfIds +
                                    '" will ' + 'not be shown as recommendations because they ' +
                                    'either do not exist, or are not publicly viewable.');
                            }
                        });
                    }
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/EndExploration/directives/oppia-response-end-exploration.directive.ts":
/*!*******************************************************************************************************!*\
  !*** ./extensions/interactions/EndExploration/directives/oppia-response-end-exploration.directive.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the EndExploration response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
angular.module('oppia').directive('oppiaResponseEndExploration', [function () {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            template: '',
            controllerAs: '$ctrl',
            controller: [function () { }]
        };
    }]);


/***/ }),

/***/ "./extensions/interactions/EndExploration/directives/oppia-short-response-end-exploration.directive.ts":
/*!*************************************************************************************************************!*\
  !*** ./extensions/interactions/EndExploration/directives/oppia-short-response-end-exploration.directive.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the EndExploration short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
angular.module('oppia').directive('oppiaShortResponseEndExploration', [
    function () {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            template: '',
            controllerAs: '$ctrl',
            controller: [function () { }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/FractionInput/FractionInput.ts":
/*!****************************************************************!*\
  !*** ./extensions/interactions/FractionInput/FractionInput.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for FractionInput interaction.
 */
__webpack_require__(/*! interactions/FractionInput/directives/fraction-input-rules.service.ts */ "./extensions/interactions/FractionInput/directives/fraction-input-rules.service.ts");
__webpack_require__(/*! interactions/FractionInput/directives/fraction-input-validation.service.ts */ "./extensions/interactions/FractionInput/directives/fraction-input-validation.service.ts");
__webpack_require__(/*! interactions/FractionInput/directives/oppia-interactive-fraction-input.directive.ts */ "./extensions/interactions/FractionInput/directives/oppia-interactive-fraction-input.directive.ts");
__webpack_require__(/*! interactions/FractionInput/directives/oppia-response-fraction-input.directive.ts */ "./extensions/interactions/FractionInput/directives/oppia-response-fraction-input.directive.ts");
__webpack_require__(/*! interactions/FractionInput/directives/oppia-short-response-fraction-input.directive.ts */ "./extensions/interactions/FractionInput/directives/oppia-short-response-fraction-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/FractionInput/directives/fraction-input-rules.service.ts":
/*!******************************************************************************************!*\
  !*** ./extensions/interactions/FractionInput/directives/fraction-input-rules.service.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
angular.module('oppia').factory('FractionInputRulesService', [
    'FractionObjectFactory',
    function (FractionObjectFactory) {
        var toFloat = function (fractionDict) {
            return FractionObjectFactory.fromDict(fractionDict).toFloat();
        };
        return {
            IsEquivalentTo: function (answer, inputs) {
                return toFloat(answer) === toFloat(inputs.f);
            },
            IsEquivalentToAndInSimplestForm: function (answer, inputs) {
                var simplestForm = FractionObjectFactory.fromDict(inputs.f).convertToSimplestForm();
                return toFloat(answer) === toFloat(inputs.f) &&
                    angular.equals(answer, simplestForm);
            },
            IsExactlyEqualTo: function (answer, inputs) {
                // Only returns true if both answers are structurally equal.
                return angular.equals(answer, inputs.f);
            },
            IsLessThan: function (answer, inputs) {
                return toFloat(answer) < toFloat(inputs.f);
            },
            IsGreaterThan: function (answer, inputs) {
                return toFloat(answer) > toFloat(inputs.f);
            },
            HasIntegerPartEqualTo: function (answer, inputs) {
                var answerFraction = FractionObjectFactory.fromDict(answer);
                return answerFraction.getIntegerPart() === inputs.x;
            },
            HasNumeratorEqualTo: function (answer, inputs) {
                return answer.numerator === inputs.x;
            },
            HasDenominatorEqualTo: function (answer, inputs) {
                return answer.denominator === inputs.x;
            },
            HasNoFractionalPart: function (answer) {
                return answer.numerator === 0;
            },
            HasFractionalPartExactlyEqualTo: function (answer, inputs) {
                return (answer.numerator === inputs.f.numerator &&
                    answer.denominator === inputs.f.denominator);
            },
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/FractionInput/directives/fraction-input-validation.service.ts":
/*!***********************************************************************************************!*\
  !*** ./extensions/interactions/FractionInput/directives/fraction-input-validation.service.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Validator service for the fraction interaction.
 */
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
__webpack_require__(/*! interactions/base-interaction-validation.service.ts */ "./extensions/interactions/base-interaction-validation.service.ts");
angular.module('oppia').factory('FractionInputValidationService', [
    'FractionObjectFactory', 'baseInteractionValidationService',
    'WARNING_TYPES',
    function (FractionObjectFactory, baseInteractionValidationService, WARNING_TYPES) {
        var getNonIntegerInputWarning = function (i, j) {
            return {
                type: WARNING_TYPES.ERROR,
                message: ('Rule ' + (j + 1) + ' from answer group ' +
                    (i + 1) + ' is invalid: input should be an ' +
                    'integer.')
            };
        };
        return {
            getCustomizationArgsWarnings: function (customizationArgs) {
                return [];
            },
            getAllWarnings: function (stateName, customizationArgs, answerGroups, defaultOutcome) {
                var warningsList = [];
                var shouldBeInSimplestForm = customizationArgs.requireSimplestForm.value;
                var allowImproperFraction = customizationArgs.allowImproperFraction.value;
                var allowNonzeroIntegerPart = customizationArgs.allowNonzeroIntegerPart.value;
                warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
                var toFloat = function (fraction) {
                    return FractionObjectFactory.fromDict(fraction).toFloat();
                };
                /**
                 * Store an answer range for every rule, then check for redundant
                 * ranges. A range is an object of the form:
                 * {
                 *   lb: float, lower bound
                 *   ub: float, upper bound
                 *   lbi: bool, is lower bound inclusive
                 *   ubi: bool, is upper bound inclusive
                 * }
                 */
                var setLowerAndUpperBounds = function (range, lb, ub, lbi, ubi) {
                    range.lb = lb;
                    range.ub = ub;
                    range.lbi = lbi;
                    range.ubi = ubi;
                };
                var isEnclosedBy = function (ra, rb) {
                    if ((ra.lb === null && ra.ub === null) ||
                        (rb.lb === null && rb.ub === null)) {
                        return false;
                    }
                    // Checks if range ra is enclosed by range rb.
                    var lowerBoundConditionIsSatisfied = (rb.lb < ra.lb) || (rb.lb === ra.lb && (!ra.lbi || rb.lbi));
                    var upperBoundConditionIsSatisfied = (rb.ub > ra.ub) || (rb.ub === ra.ub && (!ra.ubi || rb.ubi));
                    return lowerBoundConditionIsSatisfied &&
                        upperBoundConditionIsSatisfied;
                };
                var shouldCheckRangeCriteria = function (earlierRule, laterRule) {
                    if ((earlierRule.type === 'IsExactlyEqualTo' &&
                        laterRule.type === 'IsExactlyEqualTo') ||
                        (earlierRule.type === 'IsExactlyEqualTo' &&
                            laterRule.type === 'IsEquivalentTo') ||
                        (earlierRule.type === 'IsExactlyEqualTo' &&
                            laterRule.type === 'IsEquivalentToAndInSimplestForm')) {
                        return false;
                    }
                    return true;
                };
                var ranges = [];
                var matchedDenominators = [];
                for (var i = 0; i < answerGroups.length; i++) {
                    var rules = answerGroups[i].rules;
                    for (var j = 0; j < rules.length; j++) {
                        var rule = rules[j];
                        var range = {
                            answerGroupIndex: i + 1,
                            ruleIndex: j + 1,
                            lb: null,
                            ub: null,
                            lbi: false,
                            ubi: false,
                        };
                        var matchedDenominator = {
                            answerGroupIndex: i + 1,
                            ruleIndex: j + 1,
                            denominator: null,
                        };
                        switch (rule.type) {
                            case 'IsExactlyEqualTo':
                                if (shouldBeInSimplestForm) {
                                    var fraction = rule.inputs.f;
                                    var fractionInSimplestForm = FractionObjectFactory.fromDict(fraction).convertToSimplestForm();
                                    if (!angular.equals(fraction, fractionInSimplestForm)) {
                                        warningsList.push({
                                            type: WARNING_TYPES.ERROR,
                                            message: ('Rule ' + (j + 1) + ' from answer group ' +
                                                (i + 1) +
                                                ' will never be matched because it is not ' +
                                                'in simplest form.')
                                        });
                                    }
                                }
                                if (!allowImproperFraction) {
                                    var fraction = FractionObjectFactory.fromDict(rule.inputs.f);
                                    if (fraction.isImproperFraction()) {
                                        warningsList.push({
                                            type: WARNING_TYPES.ERROR,
                                            message: ('Rule ' + (j + 1) + ' from answer group ' +
                                                (i + 1) +
                                                ' will never be matched because it is an ' +
                                                'improper fraction')
                                        });
                                    }
                                }
                                if (!allowNonzeroIntegerPart) {
                                    var fraction = FractionObjectFactory.fromDict(rule.inputs.f);
                                    if (fraction.hasNonzeroIntegerPart()) {
                                        warningsList.push({
                                            type: WARNING_TYPES.ERROR,
                                            message: ('Rule ' + (j + 1) + ' from answer group ' +
                                                (i + 1) +
                                                ' will never be matched because it has a ' +
                                                'non zero integer part')
                                        });
                                    }
                                }
                                var f = toFloat(rule.inputs.f);
                                setLowerAndUpperBounds(range, f, f, true, true);
                                break;
                            case 'IsEquivalentTo': // fall-through
                            case 'IsEquivalentToAndInSimplestForm':
                                var f = toFloat(rule.inputs.f);
                                setLowerAndUpperBounds(range, f, f, true, true);
                                break;
                            case 'IsGreaterThan':
                                var f = toFloat(rule.inputs.f);
                                setLowerAndUpperBounds(range, f, Infinity, false, false);
                                break;
                            case 'IsLessThan':
                                var f = toFloat(rule.inputs.f);
                                setLowerAndUpperBounds(range, -Infinity, f, false, false);
                                break;
                            case 'HasNumeratorEqualTo':
                                if (!Number.isInteger(rule.inputs.x)) {
                                    warningsList.push(getNonIntegerInputWarning(i, j));
                                }
                                break;
                            case 'HasIntegerPartEqualTo':
                                if (!allowNonzeroIntegerPart && rule.inputs.x !== 0) {
                                    warningsList.push({
                                        type: WARNING_TYPES.ERROR,
                                        message: ('Rule ' + (j + 1) + ' from answer group ' +
                                            (i + 1) +
                                            ' will never be matched because integer part ' +
                                            'has to be zero')
                                    });
                                }
                                if (!Number.isInteger(rule.inputs.x)) {
                                    warningsList.push(getNonIntegerInputWarning(i, j));
                                }
                                break;
                            case 'HasDenominatorEqualTo':
                                if (!Number.isInteger(rule.inputs.x)) {
                                    warningsList.push(getNonIntegerInputWarning(i, j));
                                }
                                if (rule.inputs.x === 0) {
                                    warningsList.push({
                                        type: WARNING_TYPES.ERROR,
                                        message: ('Rule ' + (j + 1) + ' from answer group ' +
                                            (i + 1) + ' is invalid: denominator ' +
                                            'should be greater than zero.')
                                    });
                                }
                                matchedDenominator.denominator = rule.inputs.x;
                                break;
                            case 'HasFractionalPartExactlyEqualTo':
                                if (rule.inputs.f.wholeNumber !== 0) {
                                    warningsList.push({
                                        type: WARNING_TYPES.ERROR,
                                        message: ('Rule ' + (j + 1) + ' from answer group ' +
                                            (i + 1) +
                                            ' is invalid as integer part should be zero')
                                    });
                                }
                                if (rule.inputs.f.isNegative !== false) {
                                    warningsList.push({
                                        type: WARNING_TYPES.ERROR,
                                        message: ('Rule ' + (j + 1) + ' from answer group ' +
                                            (i + 1) +
                                            ' is invalid as sign should be positive')
                                    });
                                }
                                if (!allowImproperFraction) {
                                    var fraction = FractionObjectFactory.fromDict(rule.inputs.f);
                                    if (fraction.isImproperFraction()) {
                                        warningsList.push({
                                            type: WARNING_TYPES.ERROR,
                                            message: ('Rule ' + (j + 1) + ' from answer group ' +
                                                (i + 1) +
                                                ' is invalid as improper fractions are not allowed')
                                        });
                                    }
                                }
                                break;
                            default:
                                break;
                        }
                        for (var k = 0; k < ranges.length; k++) {
                            if (isEnclosedBy(range, ranges[k])) {
                                var earlierRule = answerGroups[ranges[k].answerGroupIndex - 1]
                                    .rules[ranges[k].ruleIndex - 1];
                                if (shouldCheckRangeCriteria(earlierRule, rule)) {
                                    warningsList.push({
                                        type: WARNING_TYPES.ERROR,
                                        message: ('Rule ' + (j + 1) + ' from answer group ' +
                                            (i + 1) + ' will never be matched because it ' +
                                            'is made redundant by rule ' + ranges[k].ruleIndex +
                                            ' from answer group ' + ranges[k].answerGroupIndex +
                                            '.')
                                    });
                                }
                            }
                        }
                        for (var k = 0; k < matchedDenominators.length; k++) {
                            if (matchedDenominators[k].denominator !== null &&
                                rule.type === 'HasFractionalPartExactlyEqualTo') {
                                if (matchedDenominators[k].denominator ===
                                    rule.inputs.f.denominator) {
                                    warningsList.push({
                                        type: WARNING_TYPES.ERROR,
                                        message: ('Rule ' + (j + 1) + ' from answer group ' +
                                            (i + 1) + ' will never be matched because it ' +
                                            'is made redundant by rule ' +
                                            matchedDenominators[k].ruleIndex +
                                            ' from answer group ' +
                                            matchedDenominators[k].answerGroupIndex + '.')
                                    });
                                }
                            }
                        }
                        ranges.push(range);
                        matchedDenominators.push(matchedDenominator);
                    }
                }
                warningsList = warningsList.concat(baseInteractionValidationService.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
                return warningsList;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/FractionInput/directives/oppia-interactive-fraction-input.directive.ts":
/*!********************************************************************************************************!*\
  !*** ./extensions/interactions/FractionInput/directives/oppia-interactive-fraction-input.directive.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the FractionInput interaction.
 */
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/FractionInput/directives/fraction-input-rules.service.ts */ "./extensions/interactions/FractionInput/directives/fraction-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
angular.module('oppia').directive('oppiaInteractiveFractionInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/FractionInput/directives/' +
                'fraction-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$attrs', 'FocusManagerService', 'FractionInputRulesService',
                'FractionObjectFactory', 'FRACTION_PARSING_ERRORS',
                'WindowDimensionsService', 'CurrentInteractionService',
                function ($scope, $attrs, FocusManagerService, FractionInputRulesService, FractionObjectFactory, FRACTION_PARSING_ERRORS, WindowDimensionsService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.answer = '';
                    ctrl.labelForFocusTarget = $attrs.labelForFocusTarget || null;
                    var requireSimplestForm = ($attrs.requireSimplestFormWithValue === 'true');
                    var allowImproperFraction = ($attrs.allowImproperFractionWithValue === 'true');
                    ctrl.allowNonzeroIntegerPart = ($attrs.allowNonzeroIntegerPartWithValue === 'true');
                    ctrl.customPlaceholder = HtmlEscaperService.escapedJsonToObj($attrs.customPlaceholderWithValue);
                    var errorMessage = '';
                    // Label for errors caused whilst parsing a fraction.
                    var FORM_ERROR_TYPE = 'FRACTION_FORMAT_ERROR';
                    ctrl.FRACTION_INPUT_FORM_SCHEMA = {
                        type: 'unicode',
                        ui_config: {}
                    };
                    ctrl.getWarningText = function () {
                        return errorMessage;
                    };
                    /**
                     * Disables the input box if the data entered is not a valid prefix
                     * for a fraction.
                     * Examples of valid prefixes:
                     * -- 1
                     * -- 1 2
                     * -- 1 2/
                     * -- 2/
                     * -- 1 2/3
                     */
                    $scope.$watch('$ctrl.answer', function (newValue) {
                        var INVALID_CHARS_REGEX = /[^\d\s\/-]/g;
                        // Accepts incomplete fraction inputs
                        // (see examples above except last).
                        var PARTIAL_FRACTION_REGEX = /^\s*(-?\s*((\d*\s*\d+\s*\/?\s*)|\d+)\s*)?$/;
                        // Accepts complete fraction inputs.
                        var FRACTION_REGEX = /^\s*-?\s*((\d*\s*\d+\s*\/\s*\d+)|\d+)\s*$/;
                        if (INVALID_CHARS_REGEX.test(newValue)) {
                            errorMessage = FRACTION_PARSING_ERRORS.INVALID_CHARS;
                            ctrl.FractionInputForm.answer.$setValidity(FORM_ERROR_TYPE, false);
                        }
                        else if (!(FRACTION_REGEX.test(newValue) ||
                            PARTIAL_FRACTION_REGEX.test(newValue))) {
                            errorMessage = FRACTION_PARSING_ERRORS.INVALID_FORMAT;
                            ctrl.FractionInputForm.answer.$setValidity(FORM_ERROR_TYPE, false);
                        }
                        else {
                            errorMessage = '';
                            ctrl.FractionInputForm.answer.$setValidity(FORM_ERROR_TYPE, true);
                        }
                    });
                    ctrl.submitAnswer = function (answer) {
                        try {
                            var fraction = FractionObjectFactory.fromRawInputString(answer);
                            if (requireSimplestForm &&
                                !angular.equals(fraction, fraction.convertToSimplestForm())) {
                                errorMessage = ('Please enter an answer in simplest form ' +
                                    '(e.g., 1/3 instead of 2/6).');
                                ctrl.FractionInputForm.answer.$setValidity(FORM_ERROR_TYPE, false);
                            }
                            else if (!allowImproperFraction && fraction.isImproperFraction()) {
                                errorMessage = ('Please enter an answer with a "proper" fractional part ' +
                                    '(e.g., 1 2/3 instead of 5/3).');
                                ctrl.FractionInputForm.answer.$setValidity(FORM_ERROR_TYPE, false);
                            }
                            else if (!ctrl.allowNonzeroIntegerPart &&
                                fraction.hasNonzeroIntegerPart()) {
                                errorMessage = ('Please enter your answer as a fraction (e.g., 5/3 instead ' +
                                    'of 1 2/3).');
                                ctrl.FractionInputForm.answer.$setValidity(FORM_ERROR_TYPE, false);
                            }
                            else {
                                CurrentInteractionService.onSubmit(fraction, FractionInputRulesService);
                            }
                        }
                        catch (parsingError) {
                            errorMessage = parsingError.message;
                            ctrl.FractionInputForm.answer.$setValidity(FORM_ERROR_TYPE, false);
                        }
                    };
                    ctrl.isAnswerValid = function () {
                        if (ctrl.FractionInputForm === undefined) {
                            return false;
                        }
                        return (!ctrl.FractionInputForm.$invalid && ctrl.answer !== '');
                    };
                    var submitAnswerFn = function () {
                        ctrl.submitAnswer(ctrl.answer);
                    };
                    CurrentInteractionService.registerCurrentInteraction(submitAnswerFn, ctrl.isAnswerValid);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/FractionInput/directives/oppia-response-fraction-input.directive.ts":
/*!*****************************************************************************************************!*\
  !*** ./extensions/interactions/FractionInput/directives/oppia-response-fraction-input.directive.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the FractionInput response.
 */
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseFractionInput', [
    'FractionObjectFactory', 'HtmlEscaperService', 'UrlInterpolationService',
    function (FractionObjectFactory, HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/FractionInput/directives/' +
                'fraction-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.answer = FractionObjectFactory.fromDict(answer).toString();
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/FractionInput/directives/oppia-short-response-fraction-input.directive.ts":
/*!***********************************************************************************************************!*\
  !*** ./extensions/interactions/FractionInput/directives/oppia-short-response-fraction-input.directive.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the FractionInput short response.
 */
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseFractionInput', [
    'FractionObjectFactory', 'HtmlEscaperService', 'UrlInterpolationService',
    function (FractionObjectFactory, HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/FractionInput/directives/' +
                'fraction-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.answer = FractionObjectFactory.fromDict(answer).toString();
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/GraphInput/GraphInput.ts":
/*!**********************************************************!*\
  !*** ./extensions/interactions/GraphInput/GraphInput.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for GraphInput interaction.
 */
__webpack_require__(/*! interactions/GraphInput/directives/graph-input-rules.service.ts */ "./extensions/interactions/GraphInput/directives/graph-input-rules.service.ts");
__webpack_require__(/*! interactions/GraphInput/directives/graph-input-validation.service.ts */ "./extensions/interactions/GraphInput/directives/graph-input-validation.service.ts");
__webpack_require__(/*! interactions/GraphInput/directives/oppia-interactive-graph-input.directive.ts */ "./extensions/interactions/GraphInput/directives/oppia-interactive-graph-input.directive.ts");
__webpack_require__(/*! interactions/GraphInput/directives/oppia-response-graph-input.directive.ts */ "./extensions/interactions/GraphInput/directives/oppia-response-graph-input.directive.ts");
__webpack_require__(/*! interactions/GraphInput/directives/oppia-short-response-graph-input.directive.ts */ "./extensions/interactions/GraphInput/directives/oppia-short-response-graph-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/GraphInput/directives/graph-detail.service.ts":
/*!*******************************************************************************!*\
  !*** ./extensions/interactions/GraphInput/directives/graph-detail.service.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Detail service for the interaction.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var GraphDetailService = /** @class */ (function () {
    function GraphDetailService() {
        this.VERTEX_RADIUS = 6;
        this.EDGE_WIDTH = 3;
    }
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'graph' is a dict with 'answer' type object which is itself
    // typed 'any'.
    GraphDetailService.prototype.getDirectedEdgeArrowPoints = function (graph, index) {
        var ARROW_WIDTH = 5;
        var ARROW_HEIGHT = 10;
        var edge = graph.edges[index];
        var srcVertex = graph.vertices[edge.src];
        var dstVertex = graph.vertices[edge.dst];
        var dx = dstVertex.x - srcVertex.x;
        var dy = dstVertex.y - srcVertex.y;
        var length = Math.sqrt(dx * dx + dy * dy);
        if (length === 0) {
            return '';
        }
        dx /= length;
        dy /= length;
        var endX = dstVertex.x - 4 * dx;
        var endY = dstVertex.y - 4 * dy;
        var ret = '';
        ret +=
            endX + ',' +
                endY + ' ';
        ret +=
            (endX - ARROW_HEIGHT * dx + ARROW_WIDTH * dy) + ',' +
                (endY - ARROW_HEIGHT * dy - ARROW_WIDTH * dx) + ' ';
        ret +=
            (endX - ARROW_HEIGHT * dx - ARROW_WIDTH * dy) + ',' +
                (endY - ARROW_HEIGHT * dy + ARROW_WIDTH * dx);
        return ret;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'graph' is a dict with 'answer' type object which is itself
    // typed 'any'.
    GraphDetailService.prototype.getEdgeCentre = function (graph, index) {
        var edge = graph.edges[index];
        var srcVertex = graph.vertices[edge.src];
        var dstVertex = graph.vertices[edge.dst];
        return {
            x: (srcVertex.x + dstVertex.x) / 2.0,
            y: (srcVertex.y + dstVertex.y) / 2.0
        };
    };
    GraphDetailService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], GraphDetailService);
    return GraphDetailService;
}());
exports.GraphDetailService = GraphDetailService;
angular.module('oppia').factory('GraphDetailService', static_1.downgradeInjectable(GraphDetailService));


/***/ }),

/***/ "./extensions/interactions/GraphInput/directives/graph-input-rules.service.ts":
/*!************************************************************************************!*\
  !*** ./extensions/interactions/GraphInput/directives/graph-input-rules.service.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
__webpack_require__(/*! interactions/GraphInput/directives/graph-utils.service.ts */ "./extensions/interactions/GraphInput/directives/graph-utils.service.ts");
angular.module('oppia').factory('GraphInputRulesService', [
    'GraphUtilsService', function (GraphUtilsService) {
        /**
         * @param {object} graph - A graph object.
         * @return {boolean} Whether the graph is strongly connected.
         */
        var isStronglyConnected = function (graph) {
            // Uses depth first search on each vertex to try and visit every other
            // vertex in both the normal and inverted adjacency lists.
            if (graph.vertices.length === 0) {
                return true;
            }
            var adjacencyLists = GraphUtilsService.constructAdjacencyLists(graph, GraphUtilsService.GRAPH_ADJACENCY_MODE.DIRECTED);
            var invertedAdjacencyLists = GraphUtilsService.constructAdjacencyLists(graph, GraphUtilsService.GRAPH_ADJACENCY_MODE.INVERTED);
            var isVisited = graph.vertices.map(function () {
                return false;
            });
            GraphUtilsService.markAccessible(0, adjacencyLists, isVisited);
            var isAnyVertexUnreachable = isVisited.some(function (visited) {
                return visited === false;
            });
            var isVisitedInReverse = graph.vertices.map(function () {
                return false;
            });
            GraphUtilsService.markAccessible(0, invertedAdjacencyLists, isVisitedInReverse);
            var isAnyVertexUnreachableInReverse = isVisitedInReverse.some(function (visited) {
                return visited === false;
            });
            return !isAnyVertexUnreachable && !isAnyVertexUnreachableInReverse;
        };
        /**
         * @param {object} graph - A graph object.
         * @return {boolean} Whether the graph is weakly connected.
         */
        var isWeaklyConnected = function (graph) {
            // Generates adjacency lists assuming graph is undirected, then uses depth
            // first search on node 0 to try to reach every other vertex
            if (graph.vertices.length === 0) {
                return true;
            }
            var adjacencyLists = GraphUtilsService.constructAdjacencyLists(graph, GraphUtilsService.GRAPH_ADJACENCY_MODE.UNDIRECTED);
            var isVisited = graph.vertices.map(function () {
                return false;
            });
            GraphUtilsService.markAccessible(0, adjacencyLists, isVisited);
            return isVisited.every(function (visited) {
                return visited === true;
            });
        };
        /**
         * @param {object} graph - A graph object.
         * @return {boolean} Whether the graph is acyclic.
         */
        var isAcyclic = function (graph) {
            // Uses depth first search to ensure that we never have an edge to an
            // ancestor in the search tree.
            var isVisited = graph.vertices.map(function () {
                return GraphUtilsService.DFS_STATUS.UNVISITED;
            });
            var adjacencyLists = GraphUtilsService.constructAdjacencyLists(graph, GraphUtilsService.GRAPH_ADJACENCY_MODE.DIRECTED);
            for (var startVertex = 0; startVertex < graph.vertices.length; startVertex++) {
                if (isVisited[startVertex] === GraphUtilsService.DFS_STATUS.UNVISITED) {
                    if (GraphUtilsService.findCycle(startVertex, -1, adjacencyLists, isVisited, graph.isDirected)) {
                        return false;
                    }
                }
            }
            return true;
        };
        /**
         * @param {object} graph - A graph object.
         * @return {boolean} Whether the graph is acyclic.
         */
        var isRegular = function (graph) {
            // Checks that every vertex has outdegree and indegree equal to the first
            if (graph.vertices.length === 0) {
                return true;
            }
            var adjacencyLists = GraphUtilsService.constructAdjacencyLists(graph, GraphUtilsService.GRAPH_ADJACENCY_MODE.DIRECTED);
            var outdegreeCounts = adjacencyLists.map(function (list) {
                return list.length;
            });
            var indegreeCounts = adjacencyLists.map(function () {
                return 0;
            });
            adjacencyLists.forEach(function (list) {
                list.forEach(function (destination) {
                    indegreeCounts[destination]++;
                });
            });
            var areIndegreeCountsEqual = indegreeCounts.every(function (indegree) {
                return indegree === indegreeCounts[0];
            });
            var areOutdegreeCountsEqual = outdegreeCounts.every(function (outdegree) {
                return outdegree === outdegreeCounts[0];
            });
            return areIndegreeCountsEqual && areOutdegreeCountsEqual;
        };
        var isIsomorphic = function (graph1, graph2) {
            if (graph1.vertices.length !== graph2.vertices.length) {
                return false;
            }
            var adj1 = GraphUtilsService.constructAdjacencyMatrix(graph1);
            var adj2 = GraphUtilsService.constructAdjacencyMatrix(graph2);
            // Check that for every vertex from the first graph there is a vertex in
            // the second graph with the same sum of weights of outgoing edges
            var degrees1 = adj1.map(function (value) {
                return value.reduce(function (prev, cur) {
                    return prev + cur;
                });
            }).sort();
            var degrees2 = adj2.map(function (value) {
                return value.reduce(function (prev, cur) {
                    return prev + cur;
                });
            }).sort();
            if (!angular.equals(degrees1, degrees2)) {
                return false;
            }
            // Check against every permutation of vectices.
            var numVertices = graph2.vertices.length;
            var permutation = [];
            for (var i = 0; i < numVertices; i++) {
                permutation.push(i);
            }
            while (permutation !== null) {
                var doLabelsMatch = (!graph1.isLabeled && !graph2.isLabeled) ||
                    graph2.vertices.every(function (vertex, index) {
                        return vertex.label === graph1.vertices[permutation[index]].label;
                    });
                if (doLabelsMatch &&
                    GraphUtilsService.areAdjacencyMatricesEqualWithPermutation(adj1, adj2, permutation)) {
                    return true;
                }
                permutation = GraphUtilsService.nextPermutation(permutation);
            }
            return false;
        };
        return {
            HasGraphProperty: function (answer, inputs) {
                if (inputs.p === 'strongly_connected') {
                    return isStronglyConnected(answer);
                }
                else if (inputs.p === 'weakly_connected') {
                    return isWeaklyConnected(answer);
                }
                else if (inputs.p === 'acyclic') {
                    return isAcyclic(answer);
                }
                else if (inputs.p === 'regular') {
                    return isRegular(answer);
                }
                else {
                    return false;
                }
            },
            IsIsomorphicTo: function (answer, inputs) {
                return isIsomorphic(answer, inputs.g);
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/GraphInput/directives/graph-input-validation.service.ts":
/*!*****************************************************************************************!*\
  !*** ./extensions/interactions/GraphInput/directives/graph-input-validation.service.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var GraphInputValidationService = /** @class */ (function () {
    function GraphInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
        this.VERTICES_LIMIT = 50;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    GraphInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        var warningsList = [];
        this.baseInteractionValidationServiceInstance.requireCustomizationArguments(customizationArgs, ['graph', 'canEditEdgeWeight', 'canEditVertexLabel']);
        if (customizationArgs.graph.value.vertices.length > this.VERTICES_LIMIT) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: ('The graph used in customization exceeds supported ' +
                    'maximum number of vertices of ' + this.VERTICES_LIMIT + '.')
            });
        }
        if (!customizationArgs.graph.value.isWeighted &&
            customizationArgs.canEditEdgeWeight.value) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: ('The learner cannot edit edge weights for an unweighted graph.')
            });
        }
        if (!customizationArgs.graph.value.isLabeled &&
            customizationArgs.canEditVertexLabel.value) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: ('The learner cannot edit vertex labels for an unlabeled graph.')
            });
        }
        return warningsList;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    GraphInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var ISOMORPHISM_VERTICES_LIMIT = 10;
        var warningsList = [];
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        warningsList = warningsList.concat(this.baseInteractionValidationServiceInstance.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
        for (var i = 0; i < answerGroups.length; i++) {
            var rules = answerGroups[i].rules;
            for (var j = 0; j < rules.length; j++) {
                var rule = rules[j];
                try {
                    if (rule.type === 'HasGraphProperty') {
                        continue;
                    }
                    else if (rule.type === 'IsIsomorphicTo' &&
                        rule.inputs.g.vertices.length > ISOMORPHISM_VERTICES_LIMIT) {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                            message: ('The graph used in the rule ' + (j + 1) + ' in group ' +
                                (i + 1) + ' exceeds supported maximum number of vertices ' +
                                'of ' + ISOMORPHISM_VERTICES_LIMIT +
                                ' for isomorphism check.')
                        });
                    }
                    else if (rule.inputs.g.vertices.length > this.VERTICES_LIMIT) {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                            message: ('The graph used in the rule ' + (j + 1) + ' in group ' +
                                (i + 1) + ' exceeds supported maximum number of vertices ' +
                                'of ' + this.VERTICES_LIMIT + '.')
                        });
                    }
                }
                catch (e) {
                    warningsList.push({
                        type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                        message: ('The rule ' + (j + 1) + ' in group ' + (i + 1) +
                            ' is invalid.')
                    });
                }
            }
        }
        return warningsList;
    };
    var _a;
    GraphInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], GraphInputValidationService);
    return GraphInputValidationService;
}());
exports.GraphInputValidationService = GraphInputValidationService;
angular.module('oppia').factory('GraphInputValidationService', static_1.downgradeInjectable(GraphInputValidationService));


/***/ }),

/***/ "./extensions/interactions/GraphInput/directives/graph-utils.service.ts":
/*!******************************************************************************!*\
  !*** ./extensions/interactions/GraphInput/directives/graph-utils.service.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Utils service for the interaction.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var GraphUtilsService = /** @class */ (function () {
    function GraphUtilsService() {
        this.GRAPH_ADJACENCY_MODE = {
            DIRECTED: 'directed',
            INVERTED: 'inverted',
            UNDIRECTED: 'undirected'
        };
        this.DFS_STATUS = {
            VISITED: 'visited',
            UNVISITED: 'unvisited',
            STILL_VISITING: 'still visiting'
        };
    }
    /**
     * @param {object} graph - A graph object.
     * @param {string} adjacencyListMode - A string indicating the mode.
     * @return {array} An adjacency list. Depending on the mode, the list has
     *   all edges (directed),
     *   all edges inverted (inverted),
     *   or all edges in both directions, as though the graph were undirected
     *   (undirected)
     */
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'graph' is a dict with 'answer' type object which is itself
    // typed 'any'.
    GraphUtilsService.prototype.constructAdjacencyLists = function (graph, adjacencyListMode) {
        var adjacencyLists = [];
        for (var i = 0; i < graph.vertices.length; i++) {
            adjacencyLists.push([]);
        }
        // If a graph is undirected, all modes work the same way anyway
        if (!graph.isDirected) {
            adjacencyListMode = this.GRAPH_ADJACENCY_MODE.UNDIRECTED;
        }
        for (var i = 0; i < graph.edges.length; i++) {
            var edge = graph.edges[i];
            if (adjacencyListMode === this.GRAPH_ADJACENCY_MODE.DIRECTED ||
                adjacencyListMode === this.GRAPH_ADJACENCY_MODE.UNDIRECTED) {
                adjacencyLists[edge.src].push(edge.dst);
            }
            if (adjacencyListMode === (this.GRAPH_ADJACENCY_MODE.INVERTED) || adjacencyListMode === (this.GRAPH_ADJACENCY_MODE.UNDIRECTED)) {
                adjacencyLists[edge.dst].push(edge.src);
            }
        }
        return adjacencyLists;
    };
    /**
     * @param {integer} startVertex - The index of the starting vertex.
     * @param {array} adjacencyLists - An array of arrays.
     * @param {array} isVisited - An array with length equal to the number of
     *     vertices. All the values should be false initially.
     * This function modifies the isVisited array and changes the values at
     * the indices of the vertices reachable from the starting vertex to true.
     */
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'isVisited' is an array with both string and boolean values;
    // a thorough check needs to be done to assure its exact type.
    GraphUtilsService.prototype.markAccessible = function (startVertex, adjacencyLists, isVisited) {
        isVisited[startVertex] = true;
        for (var i = 0; i < adjacencyLists[startVertex].length; i++) {
            var nextVertex = adjacencyLists[startVertex][i];
            if (!isVisited[nextVertex]) {
                this.markAccessible(nextVertex, adjacencyLists, isVisited);
            }
        }
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'isVisited' is an array with both string and boolean values;
    // A thorough check needs to be done to assure of its exact type.
    GraphUtilsService.prototype.findCycle = function (currentVertex, previousVertex, adjacencyLists, isVisited, isDirected) {
        isVisited[currentVertex] = this.DFS_STATUS.STILL_VISITING;
        for (var i = 0; i < adjacencyLists[currentVertex].length; i++) {
            var nextVertex = adjacencyLists[currentVertex][i];
            if (nextVertex === previousVertex && !isDirected) {
                continue;
            }
            if (isVisited[nextVertex] === (this.DFS_STATUS.STILL_VISITING)) {
                return true;
            }
            if (isVisited[nextVertex] === this.DFS_STATUS.UNVISITED &&
                this.findCycle(nextVertex, currentVertex, adjacencyLists, isVisited, isDirected)) {
                return true;
            }
        }
        isVisited[currentVertex] = this.DFS_STATUS.VISITED;
        return false;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'graph' is a dict with 'answer' type object which is itself
    // typed 'any'.
    GraphUtilsService.prototype.constructAdjacencyMatrix = function (graph) {
        var adjMatrix = [];
        for (var i = 0; i < graph.vertices.length; i++) {
            var adjMatrixRow = [];
            for (var j = 0; j < graph.vertices.length; j++) {
                adjMatrixRow.push(null);
            }
            adjMatrix.push(adjMatrixRow);
        }
        // TODO(#7165): Replace 'any' with the exact type. This has been typed
        // as 'any' since 'edge' is a dict with various keys. A thorough research
        // needs to be carried out to determine exact type.
        graph.edges.map(function (edge) {
            var weight = graph.isWeighted ? edge.weight : 1;
            adjMatrix[edge.src][edge.dst] = weight;
            if (!graph.isDirected) {
                adjMatrix[edge.dst][edge.src] = weight;
            }
        });
        return adjMatrix;
    };
    GraphUtilsService.prototype.nextPermutation = function (permutation) {
        // Generates (in place) the next lexicographical permutation.
        // permutation is a permutation of [0, 1, 2, ..., permutation.length - 1]
        // Find the pivot to longest decreasing suffix and successor
        var pivot = null;
        var successor = null;
        permutation.reduce(function (previousValue, currentValue, currentIndex) {
            if (previousValue < currentValue) {
                pivot = currentIndex - 1;
            }
            if (pivot !== null && currentValue > permutation[pivot]) {
                successor = currentIndex;
            }
            return currentValue;
        });
        if (pivot === null) {
            return null;
        }
        // Swap the pivot and successor and reverse the suffix
        var tmp = permutation[pivot];
        permutation[pivot] = permutation[successor];
        permutation[successor] = tmp;
        permutation = permutation.concat(permutation.splice(pivot + 1).reverse());
        return permutation;
    };
    GraphUtilsService.prototype.areAdjacencyMatricesEqualWithPermutation = function (adj1, adj2, permutation) {
        var numVertices = adj1.length;
        for (var i = 0; i < numVertices; i++) {
            for (var j = 0; j < numVertices; j++) {
                if (adj1[permutation[i]][permutation[j]] !== adj2[i][j]) {
                    return false;
                }
            }
        }
        return true;
    };
    GraphUtilsService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], GraphUtilsService);
    return GraphUtilsService;
}());
exports.GraphUtilsService = GraphUtilsService;
angular.module('oppia').factory('GraphUtilsService', static_1.downgradeInjectable(GraphUtilsService));


/***/ }),

/***/ "./extensions/interactions/GraphInput/directives/graph-viz.directive.ts":
/*!******************************************************************************!*\
  !*** ./extensions/interactions/GraphInput/directives/graph-viz.directive.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the graph-viz.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/GraphInput/directives/graph-detail.service.ts */ "./extensions/interactions/GraphInput/directives/graph-detail.service.ts");
__webpack_require__(/*! services/contextual/DeviceInfoService.ts */ "./core/templates/dev/head/services/contextual/DeviceInfoService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
__webpack_require__(/*! interactions/interactions-extension.constants.ajs.ts */ "./extensions/interactions/interactions-extension.constants.ajs.ts");
angular.module('oppia').directive('graphViz', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                graph: '=',
                canAddVertex: '=',
                canDeleteVertex: '=',
                canMoveVertex: '=',
                canEditVertexLabel: '=',
                canAddEdge: '=',
                canDeleteEdge: '=',
                canEditEdgeWeight: '=',
                canEditOptions: '=',
                isInteractionActive: '&interactionIsActive'
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/GraphInput/directives/' +
                'graph-viz.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$element', '$attrs', '$document', '$timeout',
                'FocusManagerService', 'GraphDetailService', 'GRAPH_INPUT_LEFT_MARGIN',
                'EVENT_NEW_CARD_AVAILABLE', 'DeviceInfoService',
                function ($scope, $element, $attrs, $document, $timeout, FocusManagerService, GraphDetailService, GRAPH_INPUT_LEFT_MARGIN, EVENT_NEW_CARD_AVAILABLE, DeviceInfoService) {
                    var ctrl = this;
                    var _MODES = {
                        MOVE: 0,
                        ADD_EDGE: 1,
                        ADD_VERTEX: 2,
                        DELETE: 3
                    };
                    // The current state of the UI and stuff like that
                    ctrl.state = {
                        currentMode: _MODES.MOVE,
                        // Vertex, edge, mode button, label currently being hovered over
                        hoveredVertex: null,
                        hoveredEdge: null,
                        hoveredModeButton: null,
                        // If in ADD_EDGE mode, source vertex of the new edge, if it exists
                        addEdgeVertex: null,
                        // Currently dragged vertex
                        currentlyDraggedVertex: null,
                        // Selected vertex for editing label
                        selectedVertex: null,
                        // Selected edge for editing weight
                        selectedEdge: null,
                        // Mouse position in SVG coordinates
                        mouseX: 0,
                        mouseY: 0,
                        // Original position of dragged vertex
                        vertexDragStartX: 0,
                        vertexDragStartY: 0,
                        // Original position of mouse when dragging started
                        mouseDragStartX: 0,
                        mouseDragStartY: 0
                    };
                    ctrl.VERTEX_RADIUS = GraphDetailService.VERTEX_RADIUS;
                    ctrl.EDGE_WIDTH = GraphDetailService.EDGE_WIDTH;
                    ctrl.selectedEdgeWeightValue = 0;
                    ctrl.shouldShowWrongWeightWarning = false;
                    $scope.$on(EVENT_NEW_CARD_AVAILABLE, function () {
                        ctrl.state.currentMode = null;
                    });
                    ctrl.isMobile = false;
                    if (DeviceInfoService.isMobileDevice()) {
                        ctrl.isMobile = true;
                    }
                    var vizContainer = $($element).find('.oppia-graph-viz-svg');
                    ctrl.vizWidth = vizContainer.width();
                    ctrl.mousemoveGraphSVG = function (event) {
                        if (!ctrl.isInteractionActive()) {
                            return;
                        }
                        // Note: Transform client (X, Y) to SVG (X, Y). This has to be
                        // done so that changes due to viewBox attribute are
                        // propagated nicely.
                        var pt = vizContainer[0].createSVGPoint();
                        pt.x = event.clientX;
                        pt.y = event.clientY;
                        var svgp = pt.matrixTransform(vizContainer[0].getScreenCTM().inverse());
                        ctrl.state.mouseX = svgp.x;
                        ctrl.state.mouseY = svgp.y;
                        // We use vertexDragStartX/Y and mouseDragStartX/Y to make
                        // mouse-dragging by label more natural, by moving the vertex
                        // according to the difference from the original position.
                        // Otherwise, mouse-dragging by label will make the vertex
                        // awkwardly jump to the mouse.
                        if (ctrl.state.currentlyDraggedVertex !== null &&
                            (ctrl.state.mouseX > GRAPH_INPUT_LEFT_MARGIN)) {
                            ctrl.graph.vertices[ctrl.state.currentlyDraggedVertex].x = (ctrl.state.vertexDragStartX + (ctrl.state.mouseX - ctrl.state.mouseDragStartX));
                            ctrl.graph.vertices[ctrl.state.currentlyDraggedVertex].y = (ctrl.state.vertexDragStartY + (ctrl.state.mouseY - ctrl.state.mouseDragStartY));
                        }
                    };
                    ctrl.onClickGraphSVG = function () {
                        if (!ctrl.isInteractionActive()) {
                            return;
                        }
                        if (ctrl.state.currentMode === _MODES.ADD_VERTEX &&
                            ctrl.canAddVertex) {
                            ctrl.graph.vertices.push({
                                x: ctrl.state.mouseX,
                                y: ctrl.state.mouseY,
                                label: ''
                            });
                        }
                        if (ctrl.state.hoveredVertex === null) {
                            ctrl.state.selectedVertex = null;
                        }
                        if (ctrl.state.hoveredEdge === null) {
                            ctrl.state.selectedEdge = null;
                        }
                    };
                    ctrl.init = function () {
                        initButtons();
                        ctrl.state.currentMode = ctrl.buttons[0].mode;
                        if (ctrl.isMobile) {
                            if (ctrl.state.currentMode === _MODES.ADD_EDGE) {
                                ctrl.helpText =
                                    'I18N_INTERACTIONS_GRAPH_EDGE_INITIAL_HELPTEXT';
                            }
                            else if (ctrl.state.currentMode === _MODES.MOVE) {
                                ctrl.helpText =
                                    'I18N_INTERACTIONS_GRAPH_MOVE_INITIAL_HELPTEXT';
                            }
                            else {
                                ctrl.helpText = null;
                            }
                        }
                        else {
                            ctrl.helpText = null;
                        }
                    };
                    var initButtons = function () {
                        ctrl.buttons = [];
                        if (ctrl.canMoveVertex) {
                            ctrl.buttons.push({
                                text: '\uE068',
                                description: 'I18N_INTERACTIONS_GRAPH_MOVE',
                                mode: _MODES.MOVE
                            });
                        }
                        if (ctrl.canAddEdge) {
                            ctrl.buttons.push({
                                text: '\uE144',
                                description: 'I18N_INTERACTIONS_GRAPH_ADD_EDGE',
                                mode: _MODES.ADD_EDGE
                            });
                        }
                        if (ctrl.canAddVertex) {
                            ctrl.buttons.push({
                                text: '\u002B',
                                description: 'I18N_INTERACTIONS_GRAPH_ADD_NODE',
                                mode: _MODES.ADD_VERTEX
                            });
                        }
                        if (ctrl.canDeleteVertex || ctrl.canDeleteEdge) {
                            ctrl.buttons.push({
                                text: '\u2212',
                                description: 'I18N_INTERACTIONS_GRAPH_DELETE',
                                mode: _MODES.DELETE
                            });
                        }
                    };
                    var initViewboxSize = function () {
                        var svgContainer = $($element).find('.oppia-graph-viz-svg')[0];
                        var boundingBox = svgContainer.getBBox();
                        var viewBoxHeight = Math.max(boundingBox.height + boundingBox.y, svgContainer.getAttribute('height'));
                        ctrl.svgViewBox = (0 + ' ' + 0 + ' ' + (boundingBox.width + boundingBox.x) +
                            ' ' + (viewBoxHeight));
                    };
                    ctrl.graphOptions = [{
                            text: 'Labeled',
                            option: 'isLabeled'
                        },
                        {
                            text: 'Directed',
                            option: 'isDirected'
                        },
                        {
                            text: 'Weighted',
                            option: 'isWeighted'
                        }];
                    ctrl.toggleGraphOption = function (option) {
                        // Handle the case when we have two edges s -> d and d -> s
                        if (option === 'isDirected' && ctrl.graph[option]) {
                            _deleteRepeatedUndirectedEdges();
                        }
                        ctrl.graph[option] = !ctrl.graph[option];
                    };
                    ctrl.helpText = null;
                    var setMode = function (mode) {
                        ctrl.state.currentMode = mode;
                        if (ctrl.isMobile) {
                            if (ctrl.state.currentMode === _MODES.ADD_EDGE) {
                                ctrl.helpText =
                                    'I18N_INTERACTIONS_GRAPH_EDGE_INITIAL_HELPTEXT';
                            }
                            else if (ctrl.state.currentMode === _MODES.MOVE) {
                                ctrl.helpText =
                                    'I18N_INTERACTIONS_GRAPH_MOVE_INITIAL_HELPTEXT';
                            }
                            else {
                                ctrl.helpText = null;
                            }
                        }
                        else {
                            ctrl.helpText = null;
                        }
                        ctrl.state.addEdgeVertex = null;
                        ctrl.state.selectedVertex = null;
                        ctrl.state.selectedEdge = null;
                        ctrl.state.currentlyDraggedVertex = null;
                        ctrl.state.hoveredVertex = null;
                    };
                    ctrl.onClickModeButton = function (mode, $event) {
                        $event.preventDefault();
                        $event.stopPropagation();
                        if (ctrl.isInteractionActive()) {
                            setMode(mode);
                        }
                    };
                    // TODO(czx): Consider if there's a neat way to write a reset()
                    // function to clear bits of ctrl.state
                    // (e.g. currentlyDraggedVertex, addEdgeVertex)
                    // Vertex events
                    ctrl.onClickVertex = function (index) {
                        if (ctrl.state.currentMode === _MODES.DELETE) {
                            if (ctrl.canDeleteVertex) {
                                deleteVertex(index);
                            }
                        }
                        if (ctrl.state.currentMode !== _MODES.DELETE &&
                            ctrl.graph.isLabeled &&
                            ctrl.canEditVertexLabel) {
                            beginEditVertexLabel(index);
                        }
                        if (ctrl.isMobile) {
                            ctrl.state.hoveredVertex = index;
                            if (ctrl.state.addEdgeVertex === null &&
                                ctrl.state.currentlyDraggedVertex === null) {
                                ctrl.onTouchInitialVertex(index);
                            }
                            else {
                                if (ctrl.state.addEdgeVertex === index) {
                                    ctrl.state.hoveredVertex = null;
                                    ctrl.helpText =
                                        'I18N_INTERACTIONS_GRAPH_EDGE_INITIAL_HELPTEXT';
                                    ctrl.state.addEdgeVertex = null;
                                    return;
                                }
                                ctrl.onTouchFinalVertex(index);
                            }
                        }
                    };
                    ctrl.onTouchInitialVertex = function (index) {
                        if (ctrl.state.currentMode === _MODES.ADD_EDGE) {
                            if (ctrl.canAddEdge) {
                                beginAddEdge(index);
                                ctrl.helpText = 'I18N_INTERACTIONS_GRAPH_EDGE_FINAL_HELPTEXT';
                            }
                        }
                        else if (ctrl.state.currentMode === _MODES.MOVE) {
                            if (ctrl.canMoveVertex) {
                                beginDragVertex(index);
                                ctrl.helpText = 'I18N_INTERACTIONS_GRAPH_MOVE_FINAL_HELPTEXT';
                            }
                        }
                    };
                    ctrl.onTouchFinalVertex = function (index) {
                        if (ctrl.state.currentMode === _MODES.ADD_EDGE) {
                            tryAddEdge(ctrl.state.addEdgeVertex, index);
                            endAddEdge();
                            ctrl.state.hoveredVertex = null;
                            ctrl.helpText = 'I18N_INTERACTIONS_GRAPH_EDGE_INITIAL_HELPTEXT';
                        }
                        else if (ctrl.state.currentMode === _MODES.MOVE) {
                            if (ctrl.state.currentlyDraggedVertex !== null) {
                                endDragVertex();
                                ctrl.state.hoveredVertex = null;
                                ctrl.helpText =
                                    'I18N_INTERACTIONS_GRAPH_MOVE_INITIAL_HELPTEXT';
                            }
                        }
                    };
                    ctrl.onMousedownVertex = function (index) {
                        if (ctrl.isMobile) {
                            return;
                        }
                        if (ctrl.state.currentMode === _MODES.ADD_EDGE) {
                            if (ctrl.canAddEdge) {
                                beginAddEdge(index);
                            }
                        }
                        else if (ctrl.state.currentMode === _MODES.MOVE) {
                            if (ctrl.canMoveVertex) {
                                beginDragVertex(index);
                            }
                        }
                    };
                    ctrl.onMouseleaveVertex = function (index) {
                        if (ctrl.isMobile) {
                            return;
                        }
                        ctrl.state.hoveredVertex = (index === ctrl.state.hoveredVertex) ?
                            null : ctrl.state.hoveredVertex;
                    };
                    ctrl.onClickVertexLabel = function (index) {
                        if (ctrl.graph.isLabeled && ctrl.canEditVertexLabel) {
                            beginEditVertexLabel(index);
                        }
                    };
                    // Edge events
                    ctrl.onClickEdge = function (index) {
                        if (ctrl.state.currentMode === _MODES.DELETE) {
                            if (ctrl.canDeleteEdge) {
                                deleteEdge(index);
                            }
                        }
                        if (ctrl.state.currentMode !== _MODES.DELETE &&
                            ctrl.graph.isWeighted &&
                            ctrl.canEditEdgeWeight) {
                            beginEditEdgeWeight(index);
                        }
                    };
                    ctrl.onClickEdgeWeight = function (index) {
                        if (ctrl.graph.isWeighted && ctrl.canEditEdgeWeight) {
                            beginEditEdgeWeight(index);
                        }
                    };
                    // Document event
                    ctrl.onMouseupDocument = function () {
                        if (ctrl.isMobile) {
                            return;
                        }
                        if (ctrl.state.currentMode === _MODES.ADD_EDGE) {
                            if (ctrl.state.hoveredVertex !== null) {
                                tryAddEdge(ctrl.state.addEdgeVertex, ctrl.state.hoveredVertex);
                            }
                            endAddEdge();
                        }
                        else if (ctrl.state.currentMode === _MODES.MOVE) {
                            if (ctrl.state.currentlyDraggedVertex !== null) {
                                endDragVertex();
                            }
                        }
                    };
                    $document.on('mouseup', ctrl.onMouseupDocument);
                    // Actions
                    var beginAddEdge = function (startIndex) {
                        ctrl.state.addEdgeVertex = startIndex;
                    };
                    var endAddEdge = function () {
                        ctrl.state.addEdgeVertex = null;
                    };
                    var tryAddEdge = function (startIndex, endIndex) {
                        if (startIndex === null ||
                            endIndex === null ||
                            startIndex === endIndex ||
                            startIndex < 0 ||
                            endIndex < 0 ||
                            startIndex >= ctrl.graph.vertices.length ||
                            endIndex >= ctrl.graph.vertices.length) {
                            return;
                        }
                        for (var i = 0; i < ctrl.graph.edges.length; i++) {
                            if (startIndex === ctrl.graph.edges[i].src &&
                                endIndex === ctrl.graph.edges[i].dst) {
                                return;
                            }
                            if (!ctrl.graph.isDirected) {
                                if (startIndex === ctrl.graph.edges[i].dst &&
                                    endIndex === ctrl.graph.edges[i].src) {
                                    return;
                                }
                            }
                        }
                        ctrl.graph.edges.push({
                            src: startIndex,
                            dst: endIndex,
                            weight: 1
                        });
                        return;
                    };
                    var beginDragVertex = function (index) {
                        ctrl.state.currentlyDraggedVertex = index;
                        ctrl.state.vertexDragStartX = ctrl.graph.vertices[index].x;
                        ctrl.state.vertexDragStartY = ctrl.graph.vertices[index].y;
                        ctrl.state.mouseDragStartX = ctrl.state.mouseX;
                        ctrl.state.mouseDragStartY = ctrl.state.mouseY;
                    };
                    var endDragVertex = function () {
                        ctrl.state.currentlyDraggedVertex = null;
                        ctrl.state.vertexDragStartX = 0;
                        ctrl.state.vertexDragStartY = 0;
                        ctrl.state.mouseDragStartX = 0;
                        ctrl.state.mouseDragStartY = 0;
                    };
                    var beginEditVertexLabel = function (index) {
                        ctrl.state.selectedVertex = index;
                        FocusManagerService.setFocus('vertexLabelEditBegun');
                    };
                    var beginEditEdgeWeight = function (index) {
                        ctrl.state.selectedEdge = index;
                        ctrl.selectedEdgeWeightValue = (ctrl.graph.edges[ctrl.state.selectedEdge].weight);
                        ctrl.shouldShowWrongWeightWarning = false;
                        FocusManagerService.setFocus('edgeWeightEditBegun');
                    };
                    var deleteEdge = function (index) {
                        ctrl.graph.edges.splice(index, 1);
                        ctrl.state.hoveredEdge = null;
                    };
                    var _deleteRepeatedUndirectedEdges = function () {
                        for (var i = 0; i < ctrl.graph.edges.length; i++) {
                            var edge1 = ctrl.graph.edges[i];
                            for (var j = i + 1; j < ctrl.graph.edges.length; j++) {
                                var edge2 = ctrl.graph.edges[j];
                                if ((edge1.src === edge2.src && edge1.dst === edge2.dst) ||
                                    (edge1.src === edge2.dst && edge1.dst === edge2.src)) {
                                    deleteEdge(j);
                                    j--;
                                }
                            }
                        }
                    };
                    var deleteVertex = function (index) {
                        // Using jQuery's map instead of normal array.map because
                        // it removes elements for which the callback returns null
                        ctrl.graph.edges = $.map(ctrl.graph.edges, function (edge) {
                            if (edge.src === index || edge.dst === index) {
                                return null;
                            }
                            if (edge.src > index) {
                                edge.src--;
                            }
                            if (edge.dst > index) {
                                edge.dst--;
                            }
                            return edge;
                        });
                        ctrl.graph.vertices.splice(index, 1);
                        ctrl.state.hoveredVertex = null;
                    };
                    ctrl.selectedVertexLabelGetterSetter = function (label) {
                        if (ctrl.state.selectedVertex === null) {
                            return '';
                        }
                        if (angular.isDefined(label)) {
                            ctrl.graph.vertices[ctrl.state.selectedVertex].label = label;
                        }
                        return ctrl.graph.vertices[ctrl.state.selectedVertex].label;
                    };
                    ctrl.selectedEdgeWeight = function (weight) {
                        if (ctrl.state.selectedEdge === null) {
                            return '';
                        }
                        if (weight === null) {
                            ctrl.selectedEdgeWeightValue = '';
                        }
                        if (angular.isNumber(weight)) {
                            ctrl.selectedEdgeWeightValue = weight;
                        }
                        return ctrl.selectedEdgeWeightValue;
                    };
                    ctrl.isValidEdgeWeight = function () {
                        return angular.isNumber(ctrl.selectedEdgeWeightValue);
                    };
                    ctrl.onUpdateEdgeWeight = function () {
                        if (angular.isNumber(ctrl.selectedEdgeWeightValue)) {
                            ctrl.graph.edges[ctrl.state.selectedEdge].weight = (ctrl.selectedEdgeWeightValue);
                        }
                        ctrl.state.selectedEdge = null;
                    };
                    // Styling functions
                    var DELETE_COLOR = 'red';
                    var HOVER_COLOR = 'aqua';
                    var SELECT_COLOR = 'orange';
                    var DEFAULT_COLOR = 'black';
                    ctrl.getEdgeColor = function (index) {
                        if (!ctrl.isInteractionActive()) {
                            return DEFAULT_COLOR;
                        }
                        if (ctrl.state.currentMode === _MODES.DELETE &&
                            index === ctrl.state.hoveredEdge &&
                            ctrl.canDeleteEdge) {
                            return DELETE_COLOR;
                        }
                        else if (index === ctrl.state.hoveredEdge) {
                            return HOVER_COLOR;
                        }
                        else if (ctrl.state.selectedEdge === index) {
                            return SELECT_COLOR;
                        }
                        else {
                            return DEFAULT_COLOR;
                        }
                    };
                    ctrl.getVertexColor = function (index) {
                        if (!ctrl.isInteractionActive()) {
                            return DEFAULT_COLOR;
                        }
                        if (ctrl.state.currentMode === _MODES.DELETE &&
                            index === ctrl.state.hoveredVertex &&
                            ctrl.canDeleteVertex) {
                            return DELETE_COLOR;
                        }
                        else if (index === ctrl.state.currentlyDraggedVertex) {
                            return HOVER_COLOR;
                        }
                        else if (index === ctrl.state.hoveredVertex) {
                            return HOVER_COLOR;
                        }
                        else if (ctrl.state.selectedVertex === index) {
                            return SELECT_COLOR;
                        }
                        else {
                            return DEFAULT_COLOR;
                        }
                    };
                    ctrl.getDirectedEdgeArrowPoints = function (index) {
                        return GraphDetailService.getDirectedEdgeArrowPoints(ctrl.graph, index);
                    };
                    ctrl.getEdgeCentre = function (index) {
                        return GraphDetailService.getEdgeCentre(ctrl.graph, index);
                    };
                    // Initial value of SVG view box.
                    ctrl.svgViewBox = initViewboxSize();
                    if (ctrl.isInteractionActive()) {
                        ctrl.init();
                    }
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/GraphInput/directives/oppia-interactive-graph-input.directive.ts":
/*!**************************************************************************************************!*\
  !*** ./extensions/interactions/GraphInput/directives/oppia-interactive-graph-input.directive.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the GraphInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! interactions/GraphInput/directives/graph-viz.directive.ts */ "./extensions/interactions/GraphInput/directives/graph-viz.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/GraphInput/directives/graph-input-rules.service.ts */ "./extensions/interactions/GraphInput/directives/graph-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
angular.module('oppia').directive('oppiaInteractiveGraphInput', [
    'GraphInputRulesService', 'HtmlEscaperService', 'UrlInterpolationService',
    'EVENT_NEW_CARD_AVAILABLE',
    function (GraphInputRulesService, HtmlEscaperService, UrlInterpolationService, EVENT_NEW_CARD_AVAILABLE) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getLastAnswer: '&lastAnswer',
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/GraphInput/directives/' +
                'graph-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$element', '$attrs', 'WindowDimensionsService',
                'CurrentInteractionService',
                function ($scope, $element, $attrs, WindowDimensionsService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.errorMessage = '';
                    ctrl.graph = {
                        vertices: [],
                        edges: [],
                        isDirected: false,
                        isWeighted: false,
                        isLabeled: false
                    };
                    ctrl.submitGraph = function () {
                        // Here, angular.copy is needed to strip $$hashkey from the graph.
                        CurrentInteractionService.onSubmit(angular.copy(ctrl.graph), GraphInputRulesService);
                    };
                    ctrl.interactionIsActive = (ctrl.getLastAnswer() === null);
                    $scope.$on(EVENT_NEW_CARD_AVAILABLE, function () {
                        ctrl.interactionIsActive = false;
                        ctrl.canAddVertex = false;
                        ctrl.canDeleteVertex = false;
                        ctrl.canEditVertexLabel = false;
                        ctrl.canMoveVertex = false;
                        ctrl.canAddEdge = false;
                        ctrl.canDeleteEdge = false;
                        ctrl.canEditEdgeWeight = false;
                    });
                    ctrl.resetGraph = function () {
                        var newGraph = HtmlEscaperService.escapedJsonToObj($attrs.graphWithValue);
                        if (checkValidGraph(newGraph)) {
                            ctrl.graph = newGraph;
                        }
                        else {
                            ctrl.errorMessage = 'I18N_INTERACTIONS_GRAPH_ERROR_INVALID';
                        }
                    };
                    var init = function () {
                        if (ctrl.interactionIsActive) {
                            ctrl.resetGraph();
                        }
                        else {
                            ctrl.graph = ctrl.getLastAnswer();
                        }
                        var stringToBool = function (str) {
                            return (str === 'true');
                        };
                        ctrl.canAddVertex = ctrl.interactionIsActive ?
                            stringToBool($attrs.canAddVertexWithValue) : false;
                        ctrl.canDeleteVertex = ctrl.interactionIsActive ?
                            stringToBool($attrs.canDeleteVertexWithValue) : false;
                        ctrl.canEditVertexLabel = ctrl.interactionIsActive ?
                            stringToBool($attrs.canEditVertexLabelWithValue) : false;
                        ctrl.canMoveVertex = ctrl.interactionIsActive ?
                            stringToBool($attrs.canMoveVertexWithValue) : false;
                        ctrl.canAddEdge = ctrl.interactionIsActive ?
                            stringToBool($attrs.canAddEdgeWithValue) : false;
                        ctrl.canDeleteEdge = ctrl.interactionIsActive ?
                            stringToBool($attrs.canDeleteEdgeWithValue) : false;
                        ctrl.canEditEdgeWeight = ctrl.interactionIsActive ?
                            stringToBool($attrs.canEditEdgeWeightWithValue) : false;
                    };
                    // TODO(czxcjx): Write this function
                    var checkValidGraph = function (graph) {
                        return Boolean(graph);
                    };
                    var validityCheckFn = function () {
                        return checkValidGraph(ctrl.graph);
                    };
                    CurrentInteractionService.registerCurrentInteraction(ctrl.submitGraph, validityCheckFn);
                    init();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/GraphInput/directives/oppia-response-graph-input.directive.ts":
/*!***********************************************************************************************!*\
  !*** ./extensions/interactions/GraphInput/directives/oppia-response-graph-input.directive.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the GraphInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/GraphInput/directives/graph-detail.service.ts */ "./extensions/interactions/GraphInput/directives/graph-detail.service.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! interactions/interactions-extension.constants.ajs.ts */ "./extensions/interactions/interactions-extension.constants.ajs.ts");
angular.module('oppia').directive('oppiaResponseGraphInput', [
    'GraphDetailService', 'HtmlEscaperService', 'UrlInterpolationService',
    'GRAPH_INPUT_LEFT_MARGIN',
    function (GraphDetailService, HtmlEscaperService, UrlInterpolationService, GRAPH_INPUT_LEFT_MARGIN) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/GraphInput/directives/' +
                'graph-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.graph = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.VERTEX_RADIUS = GraphDetailService.VERTEX_RADIUS;
                    ctrl.EDGE_WIDTH = GraphDetailService.EDGE_WIDTH;
                    ctrl.GRAPH_INPUT_LEFT_MARGIN = GRAPH_INPUT_LEFT_MARGIN;
                    ctrl.getDirectedEdgeArrowPoints = function (index) {
                        return GraphDetailService.getDirectedEdgeArrowPoints(ctrl.graph, index);
                    };
                    ctrl.getEdgeCentre = function (index) {
                        return GraphDetailService.getEdgeCentre(ctrl.graph, index);
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/GraphInput/directives/oppia-short-response-graph-input.directive.ts":
/*!*****************************************************************************************************!*\
  !*** ./extensions/interactions/GraphInput/directives/oppia-short-response-graph-input.directive.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the GraphInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseGraphInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/GraphInput/directives/' +
                'graph-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    // TODO(bhenning): Improve this short response by using a small version
                    // of the graph image instead of an arbitrary label of vertices and
                    // edges.
                    ctrl.graph = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/ImageClickInput/ImageClickInput.ts":
/*!********************************************************************!*\
  !*** ./extensions/interactions/ImageClickInput/ImageClickInput.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for ImageClickInput interaction.
 */
__webpack_require__(/*! interactions/ImageClickInput/directives/image-click-input-rules.service.ts */ "./extensions/interactions/ImageClickInput/directives/image-click-input-rules.service.ts");
__webpack_require__(/*! interactions/ImageClickInput/directives/image-click-input-validation.service.ts */ "./extensions/interactions/ImageClickInput/directives/image-click-input-validation.service.ts");
__webpack_require__(/*! interactions/ImageClickInput/directives/oppia-interactive-image-click-input.directive.ts */ "./extensions/interactions/ImageClickInput/directives/oppia-interactive-image-click-input.directive.ts");
__webpack_require__(/*! interactions/ImageClickInput/directives/oppia-response-image-click-input.directive.ts */ "./extensions/interactions/ImageClickInput/directives/oppia-response-image-click-input.directive.ts");
__webpack_require__(/*! interactions/ImageClickInput/directives/oppia-short-response-image-click-input.directive.ts */ "./extensions/interactions/ImageClickInput/directives/oppia-short-response-image-click-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/ImageClickInput/directives/image-click-input-rules.service.ts":
/*!***********************************************************************************************!*\
  !*** ./extensions/interactions/ImageClickInput/directives/image-click-input-rules.service.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Rules service for the interaction.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var ImageClickInputRulesService = /** @class */ (function () {
    function ImageClickInputRulesService() {
    }
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'answer' is a complex object having varying types. A general
    // type needs to be found. Same goes for 'inputs'.
    ImageClickInputRulesService.prototype.IsInRegion = function (answer, inputs) {
        return answer.clickedRegions.indexOf(inputs.x) !== -1;
    };
    ImageClickInputRulesService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], ImageClickInputRulesService);
    return ImageClickInputRulesService;
}());
exports.ImageClickInputRulesService = ImageClickInputRulesService;
angular.module('oppia').factory('ImageClickInputRulesService', static_1.downgradeInjectable(ImageClickInputRulesService));


/***/ }),

/***/ "./extensions/interactions/ImageClickInput/directives/image-click-input-validation.service.ts":
/*!****************************************************************************************************!*\
  !*** ./extensions/interactions/ImageClickInput/directives/image-click-input-validation.service.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var ImageClickInputValidationService = /** @class */ (function () {
    function ImageClickInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    ImageClickInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        this.baseInteractionValidationServiceInstance.requireCustomizationArguments(customizationArgs, ['imageAndRegions']);
        var warningsList = [];
        var imgAndRegionArgValue = customizationArgs.imageAndRegions.value;
        if (!imgAndRegionArgValue.imagePath) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please add an image for the learner to click on.'
            });
            // If there is no image specified, further warnings don't really
            // apply.
            return warningsList;
        }
        var areAnyRegionStringsEmpty = false;
        var areAnyRegionStringsNonAlphaNumeric = false;
        var areAnyRegionStringsDuplicated = false;
        var seenRegionStrings = [];
        if (imgAndRegionArgValue.labeledRegions.length === 0) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: 'Please specify at least one region in the image.'
            });
        }
        for (var i = 0; i < imgAndRegionArgValue.labeledRegions.length; i++) {
            var regionLabel = (imgAndRegionArgValue.labeledRegions[i].label);
            var ALPHANUMERIC_REGEX = /^[A-Za-z0-9]+$/;
            if (regionLabel.trim().length === 0) {
                areAnyRegionStringsEmpty = true;
            }
            else if (!ALPHANUMERIC_REGEX.test(regionLabel)) {
                areAnyRegionStringsNonAlphaNumeric = true;
            }
            else if (seenRegionStrings.indexOf(regionLabel) !== -1) {
                areAnyRegionStringsDuplicated = true;
            }
            else {
                seenRegionStrings.push(regionLabel);
            }
        }
        if (areAnyRegionStringsEmpty) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please ensure the region labels are nonempty.'
            });
        }
        if (areAnyRegionStringsNonAlphaNumeric) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: ('The region labels should consist of alphanumeric characters.')
            });
        }
        if (areAnyRegionStringsDuplicated) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please ensure the region labels are unique.'
            });
        }
        return warningsList;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    ImageClickInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = [];
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        warningsList = warningsList.concat(this.baseInteractionValidationServiceInstance.getAnswerGroupWarnings(answerGroups, stateName));
        var imgAndRegionArgValue = customizationArgs.imageAndRegions.value;
        var seenRegionStrings = imgAndRegionArgValue.labeledRegions.map(function (region) {
            return region.label;
        });
        // Check that each rule refers to a valid region string.
        for (var i = 0; i < answerGroups.length; i++) {
            var rules = answerGroups[i].rules;
            for (var j = 0; j < rules.length; j++) {
                if (rules[j].type === 'IsInRegion') {
                    var label = rules[j].inputs.x;
                    if (seenRegionStrings.indexOf(label) === -1) {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                            message: ('The region label \'' + label + '\' in rule ' +
                                String(j + 1) + ' in group ' + String(i + 1) +
                                ' is invalid.')
                        });
                    }
                }
            }
        }
        if (!defaultOutcome || defaultOutcome.isConfusing(stateName)) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: ('Please add a rule to cover what should happen if none of the ' +
                    'given regions are clicked.')
            });
        }
        return warningsList;
    };
    var _a;
    ImageClickInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], ImageClickInputValidationService);
    return ImageClickInputValidationService;
}());
exports.ImageClickInputValidationService = ImageClickInputValidationService;
angular.module('oppia').factory('ImageClickInputValidationService', static_1.downgradeInjectable(ImageClickInputValidationService));


/***/ }),

/***/ "./extensions/interactions/ImageClickInput/directives/oppia-interactive-image-click-input.directive.ts":
/*!*************************************************************************************************************!*\
  !*** ./extensions/interactions/ImageClickInput/directives/oppia-interactive-image-click-input.directive.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the ImageClickInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! interactions/ImageClickInput/directives/image-click-input-rules.service.ts */ "./extensions/interactions/ImageClickInput/directives/image-click-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/image-preloader.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/image-preloader.service.ts");
__webpack_require__(/*! services/AssetsBackendApiService.ts */ "./core/templates/dev/head/services/AssetsBackendApiService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaInteractiveImageClickInput', [
    'AssetsBackendApiService', 'ContextService',
    'HtmlEscaperService', 'ImageClickInputRulesService', 'ImagePreloaderService',
    'UrlInterpolationService', 'EVENT_NEW_CARD_AVAILABLE',
    'EXPLORATION_EDITOR_TAB_CONTEXT', 'LOADING_INDICATOR_URL',
    function (AssetsBackendApiService, ContextService, HtmlEscaperService, ImageClickInputRulesService, ImagePreloaderService, UrlInterpolationService, EVENT_NEW_CARD_AVAILABLE, EXPLORATION_EDITOR_TAB_CONTEXT, LOADING_INDICATOR_URL) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getLastAnswer: '&lastAnswer'
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/ImageClickInput/directives/' +
                'image-click-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$element', '$attrs', '$scope', 'CurrentInteractionService',
                function ($element, $attrs, $scope, CurrentInteractionService) {
                    var ctrl = this;
                    var imageAndRegions = HtmlEscaperService.escapedJsonToObj($attrs.imageAndRegionsWithValue);
                    ctrl.highlightRegionsOnHover =
                        ($attrs.highlightRegionsOnHoverWithValue === 'true');
                    ctrl.filepath = imageAndRegions.imagePath;
                    ctrl.imageUrl = '';
                    ctrl.loadingIndicatorUrl = UrlInterpolationService
                        .getStaticImageUrl(LOADING_INDICATOR_URL);
                    ctrl.isLoadingIndicatorShown = false;
                    ctrl.isTryAgainShown = false;
                    if (ImagePreloaderService.inExplorationPlayer()) {
                        ctrl.isLoadingIndicatorShown = true;
                        ctrl.dimensions = (ImagePreloaderService.getDimensionsOfImage(ctrl.filepath));
                        // For aligning the gif to the center of it's container
                        var loadingIndicatorSize = ((ctrl.dimensions.height < 124) ? 24 : 120);
                        ctrl.imageContainerStyle = {
                            height: ctrl.dimensions.height + 'px'
                        };
                        ctrl.loadingIndicatorStyle = {
                            height: loadingIndicatorSize + 'px',
                            width: loadingIndicatorSize + 'px'
                        };
                        ctrl.loadImage = function () {
                            ImagePreloaderService.getImageUrl(ctrl.filepath)
                                .then(function (objectUrl) {
                                ctrl.isTryAgainShown = false;
                                ctrl.isLoadingIndicatorShown = false;
                                ctrl.imageUrl = objectUrl;
                            }, function () {
                                ctrl.isTryAgainShown = true;
                                ctrl.isLoadingIndicatorShown = false;
                            });
                        };
                        ctrl.loadImage();
                    }
                    else {
                        // This is the case when user is in exploration editor or in
                        // preview mode. We don't have loading indicator or try again for
                        // showing images in the exploration editor or in preview mode. So
                        // we directly assign the url to the imageUrl.
                        ctrl.imageUrl = AssetsBackendApiService.getImageUrlForPreview(ContextService.getEntityType(), ContextService.getEntityId(), ctrl.filepath);
                    }
                    ctrl.mouseX = 0;
                    ctrl.mouseY = 0;
                    ctrl.interactionIsActive = (ctrl.getLastAnswer() === null);
                    if (!ctrl.interactionIsActive) {
                        ctrl.lastAnswer = ctrl.getLastAnswer();
                    }
                    ctrl.currentlyHoveredRegions = [];
                    ctrl.allRegions = imageAndRegions.labeledRegions;
                    ctrl.updateCurrentlyHoveredRegions = function () {
                        for (var i = 0; i < imageAndRegions.labeledRegions.length; i++) {
                            var labeledRegion = imageAndRegions.labeledRegions[i];
                            var regionArea = labeledRegion.region.area;
                            if (regionArea[0][0] <= ctrl.mouseX &&
                                ctrl.mouseX <= regionArea[1][0] &&
                                regionArea[0][1] <= ctrl.mouseY &&
                                ctrl.mouseY <= regionArea[1][1]) {
                                ctrl.currentlyHoveredRegions.push(labeledRegion.label);
                            }
                        }
                    };
                    if (!ctrl.interactionIsActive) {
                        /* The following lines highlight the learner's last answer for this
                          card. This need only be done at the beginning as if he submits
                          an answer, based on EVENT_NEW_CARD_AVAILABLE, the image is made
                          inactive, so his last selection would be higlighted.*/
                        ctrl.mouseX = ctrl.getLastAnswer().clickPosition[0];
                        ctrl.mouseY = ctrl.getLastAnswer().clickPosition[1];
                        ctrl.updateCurrentlyHoveredRegions();
                    }
                    ctrl.getRegionDimensions = function (index) {
                        var image = $($element).find('.oppia-image-click-img');
                        var labeledRegion = imageAndRegions.labeledRegions[index];
                        var regionArea = labeledRegion.region.area;
                        var leftDelta = image.offset().left - image.parent().offset().left;
                        var topDelta = image.offset().top - image.parent().offset().top;
                        return {
                            left: regionArea[0][0] * image.width() + leftDelta,
                            top: regionArea[0][1] * image.height() + topDelta,
                            width: (regionArea[1][0] - regionArea[0][0]) * image.width(),
                            height: (regionArea[1][1] - regionArea[0][1]) * image.height()
                        };
                    };
                    ctrl.getRegionDisplay = function (label) {
                        if (ctrl.currentlyHoveredRegions.indexOf(label) === -1) {
                            return 'none';
                        }
                        else {
                            return 'inline';
                        }
                    };
                    ctrl.getDotDisplay = function () {
                        if (ContextService.getEditorTabContext() ===
                            EXPLORATION_EDITOR_TAB_CONTEXT.EDITOR) {
                            return 'none';
                        }
                        return 'inline';
                    };
                    $scope.$on(EVENT_NEW_CARD_AVAILABLE, function () {
                        ctrl.interactionIsActive = false;
                        ctrl.lastAnswer = {
                            clickPosition: [ctrl.mouseX, ctrl.mouseY]
                        };
                    });
                    ctrl.getDotLocation = function () {
                        var image = $($element).find('.oppia-image-click-img');
                        var dotLocation = {
                            left: null,
                            top: null
                        };
                        if (ctrl.lastAnswer) {
                            dotLocation.left =
                                ctrl.lastAnswer.clickPosition[0] * image.width() +
                                    image.offset().left -
                                    image.parent().offset().left - 5;
                            dotLocation.top =
                                ctrl.lastAnswer.clickPosition[1] * image.height() +
                                    image.offset().top -
                                    image.parent().offset().top - 5;
                        }
                        return dotLocation;
                    };
                    ctrl.onMousemoveImage = function (event) {
                        if (!ctrl.interactionIsActive) {
                            return;
                        }
                        var image = $($element).find('.oppia-image-click-img');
                        ctrl.mouseX =
                            (event.pageX - image.offset().left) / image.width();
                        ctrl.mouseY =
                            (event.pageY - image.offset().top) / image.height();
                        ctrl.currentlyHoveredRegions = [];
                        ctrl.updateCurrentlyHoveredRegions();
                    };
                    ctrl.onClickImage = function () {
                        var answer = {
                            clickPosition: [ctrl.mouseX, ctrl.mouseY],
                            clickedRegions: ctrl.currentlyHoveredRegions
                        };
                        CurrentInteractionService.onSubmit(answer, ImageClickInputRulesService);
                    };
                    CurrentInteractionService.registerCurrentInteraction(null, null);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/ImageClickInput/directives/oppia-response-image-click-input.directive.ts":
/*!**********************************************************************************************************!*\
  !*** ./extensions/interactions/ImageClickInput/directives/oppia-response-image-click-input.directive.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the ImageClickInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseImageClickInput', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/ImageClickInput/directives/' +
                'image-click-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'HtmlEscaperService',
                function ($attrs, HtmlEscaperService) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.clickRegionLabel = '(Clicks on ' + (_answer.clickedRegions.length > 0 ?
                        '\'' + _answer.clickedRegions[0] + '\'' : 'image') + ')';
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/ImageClickInput/directives/oppia-short-response-image-click-input.directive.ts":
/*!****************************************************************************************************************!*\
  !*** ./extensions/interactions/ImageClickInput/directives/oppia-short-response-image-click-input.directive.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the ImageClickInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseImageClickInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/ImageClickInput/directives/' +
                'image-click-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.clickRegionLabel = (_answer.clickedRegions.length > 0 ? _answer.clickedRegions[0] :
                        'Clicked on image');
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/InteractiveMap/InteractiveMap.ts":
/*!******************************************************************!*\
  !*** ./extensions/interactions/InteractiveMap/InteractiveMap.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for InteractiveMap interaction.
 */
__webpack_require__(/*! interactions/InteractiveMap/directives/interactive-map-rules.service.ts */ "./extensions/interactions/InteractiveMap/directives/interactive-map-rules.service.ts");
__webpack_require__(/*! interactions/InteractiveMap/directives/interactive-map-validation.service.ts */ "./extensions/interactions/InteractiveMap/directives/interactive-map-validation.service.ts");
__webpack_require__(/*! interactions/InteractiveMap/directives/oppia-interactive-interactive-map.directive.ts */ "./extensions/interactions/InteractiveMap/directives/oppia-interactive-interactive-map.directive.ts");
__webpack_require__(/*! interactions/InteractiveMap/directives/oppia-response-interactive-map.directive.ts */ "./extensions/interactions/InteractiveMap/directives/oppia-response-interactive-map.directive.ts");
__webpack_require__(/*! interactions/InteractiveMap/directives/oppia-short-response-interactive-map.directive.ts */ "./extensions/interactions/InteractiveMap/directives/oppia-short-response-interactive-map.directive.ts");


/***/ }),

/***/ "./extensions/interactions/InteractiveMap/directives/interactive-map-rules.service.ts":
/*!********************************************************************************************!*\
  !*** ./extensions/interactions/InteractiveMap/directives/interactive-map-rules.service.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
angular.module('oppia').factory('InteractiveMapRulesService', [
    function () {
        var RADIUS_OF_EARTH_KM = 6371.0;
        var degreesToRadians = function (angle) {
            return angle / 180 * Math.PI;
        };
        var getDistanceInKm = function (point1, point2) {
            var latitude1 = degreesToRadians(point1[0]);
            var latitude2 = degreesToRadians(point2[0]);
            var latitudeDifference = degreesToRadians(point2[0] - point1[0]);
            var longitudeDifference = degreesToRadians(point2[1] - point1[1]);
            // Use the haversine formula
            var haversineOfCentralAngle = (Math.pow(Math.sin(latitudeDifference / 2), 2) +
                Math.cos(latitude1) * Math.cos(latitude2) *
                    Math.pow(Math.sin(longitudeDifference / 2), 2));
            return RADIUS_OF_EARTH_KM *
                2 * Math.asin(Math.sqrt(haversineOfCentralAngle));
        };
        return {
            Within: function (answer, inputs) {
                var actualDistance = getDistanceInKm(inputs.p, answer);
                return actualDistance <= inputs.d;
            },
            NotWithin: function (answer, inputs) {
                var actualDistance = getDistanceInKm(inputs.p, answer);
                return actualDistance > inputs.d;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/InteractiveMap/directives/interactive-map-validation.service.ts":
/*!*************************************************************************************************!*\
  !*** ./extensions/interactions/InteractiveMap/directives/interactive-map-validation.service.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validation service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var InteractiveMapValidationService = /** @class */ (function () {
    function InteractiveMapValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    InteractiveMapValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        var warningsList = [];
        this.baseInteractionValidationServiceInstance.requireCustomizationArguments(customizationArgs, ['latitude', 'longitude']);
        if (customizationArgs.latitude.value < -90 ||
            customizationArgs.latitude.value > 90) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please pick a starting latitude between -90 and 90.'
            });
        }
        if (customizationArgs.longitude.value < -180 ||
            customizationArgs.longitude.value > 180) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please pick a starting longitude between -180 and 180.'
            });
        }
        return warningsList;
    };
    InteractiveMapValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = [];
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        for (var i = 0; i < answerGroups.length; i++) {
            var rules = answerGroups[i].rules;
            for (var j = 0; j < rules.length; j++) {
                if (rules[j].type === 'Within' ||
                    rules[j].type === 'NotWithin') {
                    if (rules[j].inputs.d < 0) {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                            message: 'Please ensure that rule ' + String(j + 1) +
                                ' in group ' + String(i + 1) +
                                ' refers to a valid distance.'
                        });
                    }
                }
            }
        }
        warningsList = warningsList.concat(this.baseInteractionValidationServiceInstance.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
        return warningsList;
    };
    var _a;
    InteractiveMapValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], InteractiveMapValidationService);
    return InteractiveMapValidationService;
}());
exports.InteractiveMapValidationService = InteractiveMapValidationService;
angular.module('oppia').factory('InteractiveMapValidationService', static_1.downgradeInjectable(InteractiveMapValidationService));


/***/ }),

/***/ "./extensions/interactions/InteractiveMap/directives/oppia-interactive-interactive-map.directive.ts":
/*!**********************************************************************************************************!*\
  !*** ./extensions/interactions/InteractiveMap/directives/oppia-interactive-interactive-map.directive.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the InteractiveMap interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! interactions/uiLeafletRequires.ts */ "./extensions/interactions/uiLeafletRequires.ts");
__webpack_require__(/*! domain/utilities/BrowserCheckerService.ts */ "./core/templates/dev/head/domain/utilities/BrowserCheckerService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/InteractiveMap/directives/interactive-map-rules.service.ts */ "./extensions/interactions/InteractiveMap/directives/interactive-map-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaInteractiveInteractiveMap', [
    'HtmlEscaperService', 'InteractiveMapRulesService', 'UrlInterpolationService',
    'EVENT_NEW_CARD_AVAILABLE',
    function (HtmlEscaperService, InteractiveMapRulesService, UrlInterpolationService, EVENT_NEW_CARD_AVAILABLE) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getLastAnswer: '&lastAnswer'
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/directives/' +
                'interactive-map-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', '$scope', '$timeout', 'BrowserCheckerService',
                'CurrentInteractionService', function ($attrs, $scope, $timeout, BrowserCheckerService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.coords = [
                        HtmlEscaperService.escapedJsonToObj($attrs.latitudeWithValue),
                        HtmlEscaperService.escapedJsonToObj($attrs.longitudeWithValue)
                    ];
                    ctrl.zoom = (HtmlEscaperService.escapedJsonToObj($attrs.zoomWithValue));
                    ctrl.interactionIsActive = (ctrl.getLastAnswer() === null);
                    ctrl.mapMarkers = {};
                    var coords = ctrl.coords || [0, 0];
                    var zoomLevel = parseInt(ctrl.zoom, 10) || 0;
                    ctrl.setOverlay = function () {
                        ctrl.overlayStyle = {
                            'background-color': 'white',
                            opacity: 0.5,
                            'z-index': 1001
                        };
                    };
                    ctrl.hideOverlay = function () {
                        ctrl.overlayStyle = {
                            'background-color': 'white'
                        };
                    };
                    var changeMarkerPosition = function (lat, lng) {
                        ctrl.mapMarkers.mainMarker = {
                            lat: lat,
                            lng: lng,
                            icon: {
                                iconUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-icon.png'),
                                // The size of the icon image in pixels.
                                iconSize: [25, 41],
                                // The coordinates of the "tip" of the icon.
                                iconAnchor: [12, 41],
                                shadowUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-shadow.png'),
                                // The size of the shadow image in pixels.
                                shadowSize: [41, 41],
                                // The coordinates of the "tip" of the shadow.
                                shadowAnchor: [13, 41],
                                // The URL to a retina sized version of the icon image.
                                // Used for Retina screen devices.
                                iconRetinaUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-icon-2x.png'),
                                shadowRetinaUrl: (UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-shadow.png'))
                            }
                        };
                    };
                    $scope.$on(EVENT_NEW_CARD_AVAILABLE, function () {
                        ctrl.interactionIsActive = false;
                        ctrl.setOverlay();
                    });
                    $scope.$on('showInteraction', function () {
                        refreshMap();
                    });
                    var refreshMap = function () {
                        ctrl.mapOptions = {
                            center: {
                                lat: coords[0],
                                lng: coords[1],
                                zoom: zoomLevel
                            },
                            defaults: {
                                // Disable dragging for mobile devices.
                                dragging: !BrowserCheckerService.isMobileDevice()
                            },
                            events: {
                                map: {
                                    enable: ['click', 'mouseover', 'mouseout'],
                                    logic: 'emit'
                                }
                            }
                        };
                        if (!ctrl.interactionIsActive) {
                            changeMarkerPosition(ctrl.getLastAnswer()[0], ctrl.getLastAnswer()[1]);
                        }
                    };
                    $scope.$on('leafletDirectiveMap.interactiveMap.mouseover', function () {
                        if (!ctrl.interactionIsActive) {
                            ctrl.setOverlay();
                        }
                    });
                    $scope.$on('leafletDirectiveMap.interactiveMap.mouseout', function () {
                        if (!ctrl.interactionIsActive) {
                            ctrl.hideOverlay();
                        }
                    });
                    $scope.$on('leafletDirectiveMap.interactiveMap.click', function (evt, args) {
                        if (ctrl.interactionIsActive) {
                            var newLat = args.leafletEvent.latlng.lat;
                            var newLng = args.leafletEvent.latlng.lng;
                            changeMarkerPosition(newLat, newLng);
                            CurrentInteractionService.onSubmit([newLat, newLng], InteractiveMapRulesService);
                        }
                    });
                    refreshMap();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/InteractiveMap/directives/oppia-response-interactive-map.directive.ts":
/*!*******************************************************************************************************!*\
  !*** ./extensions/interactions/InteractiveMap/directives/oppia-response-interactive-map.directive.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the InteractiveMap response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! interactions/uiLeafletRequires.ts */ "./extensions/interactions/uiLeafletRequires.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseInteractiveMap', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/directives/' +
                'interactive-map-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.mapOptions = {
                        defaults: {
                            zoomControl: false,
                            attributionControl: false
                        },
                        center: {
                            lat: _answer[0],
                            lng: _answer[1],
                            zoom: 8
                        },
                        mapMarkers: {
                            mainMarker: {
                                lat: _answer[0],
                                lng: _answer[1],
                                icon: {
                                    iconUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-icon.png'),
                                    // The size of the icon image in pixels.
                                    iconSize: [25, 41],
                                    // The coordinates of the "tip" of the icon.
                                    iconAnchor: [12, 41],
                                    shadowUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-shadow.png'),
                                    // The size of the shadow image in pixels.
                                    shadowSize: [41, 41],
                                    // The coordinates of the "tip" of the shadow.
                                    shadowAnchor: [13, 41],
                                    // The URL to a retina sized version of the icon image.
                                    // Used for Retina screen devices.
                                    iconRetinaUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-icon-2x.png'),
                                    shadowRetinaUrl: (UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-shadow.png'))
                                }
                            }
                        }
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/InteractiveMap/directives/oppia-short-response-interactive-map.directive.ts":
/*!*************************************************************************************************************!*\
  !*** ./extensions/interactions/InteractiveMap/directives/oppia-short-response-interactive-map.directive.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the InteractiveMap short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseInteractiveMap', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/directives/' +
                'interactive-map-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.formattedCoords = Math.abs(_answer[0]).toFixed(3) + '° ';
                    ctrl.formattedCoords += (_answer[0] >= 0 ? 'N' : 'S');
                    ctrl.formattedCoords += ', ';
                    ctrl.formattedCoords += Math.abs(_answer[1]).toFixed(3) + '° ';
                    ctrl.formattedCoords += (_answer[1] >= 0 ? 'E' : 'W');
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/ItemSelectionInput/ItemSelectionInput.ts":
/*!**************************************************************************!*\
  !*** ./extensions/interactions/ItemSelectionInput/ItemSelectionInput.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for ItemSelectionInput interaction.
 */
__webpack_require__(/*! interactions/ItemSelectionInput/static/item_selection_input.css */ "./extensions/interactions/ItemSelectionInput/static/item_selection_input.css");
__webpack_require__(/*! interactions/ItemSelectionInput/directives/item-selection-input-rules.service.ts */ "./extensions/interactions/ItemSelectionInput/directives/item-selection-input-rules.service.ts");
__webpack_require__(/*! interactions/ItemSelectionInput/directives/item-selection-input-validation.service.ts */ "./extensions/interactions/ItemSelectionInput/directives/item-selection-input-validation.service.ts");
__webpack_require__(/*! interactions/ItemSelectionInput/directives/oppia-interactive-item-selection-input.directive.ts */ "./extensions/interactions/ItemSelectionInput/directives/oppia-interactive-item-selection-input.directive.ts");
__webpack_require__(/*! interactions/ItemSelectionInput/directives/oppia-response-item-selection-input.directive.ts */ "./extensions/interactions/ItemSelectionInput/directives/oppia-response-item-selection-input.directive.ts");
__webpack_require__(/*! interactions/ItemSelectionInput/directives/oppia-short-response-item-selection-input.directive.ts */ "./extensions/interactions/ItemSelectionInput/directives/oppia-short-response-item-selection-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/ItemSelectionInput/directives/item-selection-input-rules.service.ts":
/*!*****************************************************************************************************!*\
  !*** ./extensions/interactions/ItemSelectionInput/directives/item-selection-input-rules.service.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
__webpack_require__(/*! filters/remove-duplicates-in-array.filter.ts */ "./core/templates/dev/head/filters/remove-duplicates-in-array.filter.ts");
angular.module('oppia').factory('ItemSelectionInputRulesService', [
    '$filter', function ($filter) {
        return {
            Equals: function (answer, inputs) {
                var normalizedAnswer = $filter('removeDuplicatesInArray')(answer);
                var normalizedInput = $filter('removeDuplicatesInArray')(inputs.x);
                return normalizedAnswer.length === normalizedInput.length &&
                    normalizedAnswer.every(function (val) {
                        return normalizedInput.indexOf(val) !== -1;
                    });
            },
            ContainsAtLeastOneOf: function (answer, inputs) {
                var normalizedAnswer = $filter('removeDuplicatesInArray')(answer);
                var normalizedInput = $filter('removeDuplicatesInArray')(inputs.x);
                return normalizedAnswer.some(function (val) {
                    return normalizedInput.indexOf(val) !== -1;
                });
            },
            // TODO(wxy): migrate the name of this rule to OmitsAtLeastOneOf, keeping
            // in sync with the backend migration of the same rule.
            DoesNotContainAtLeastOneOf: function (answer, inputs) {
                var normalizedAnswer = $filter('removeDuplicatesInArray')(answer);
                var normalizedInput = $filter('removeDuplicatesInArray')(inputs.x);
                return normalizedInput.some(function (val) {
                    return normalizedAnswer.indexOf(val) === -1;
                });
            },
            // This function checks if the answer
            // given by the user is a subset of the correct answers.
            IsProperSubsetOf: function (answer, inputs) {
                var normalizedAnswer = $filter('removeDuplicatesInArray')(answer);
                var normalizedInput = $filter('removeDuplicatesInArray')(inputs.x);
                return normalizedAnswer.length < normalizedInput.length &&
                    normalizedAnswer.every(function (val) {
                        return normalizedInput.indexOf(val) !== -1;
                    });
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/ItemSelectionInput/directives/item-selection-input-validation.service.ts":
/*!**********************************************************************************************************!*\
  !*** ./extensions/interactions/ItemSelectionInput/directives/item-selection-input-validation.service.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var ItemSelectionInputValidationService = /** @class */ (function () {
    function ItemSelectionInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    ItemSelectionInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        var warningsList = [];
        this.baseInteractionValidationServiceInstance.requireCustomizationArguments(customizationArgs, ['choices']);
        var areAnyChoicesEmpty = false;
        var areAnyChoicesDuplicated = false;
        var seenChoices = [];
        var handledAnswers = [];
        var numChoices = customizationArgs.choices.value.length;
        for (var i = 0; i < numChoices; i++) {
            var choice = customizationArgs.choices.value[i];
            if (choice.trim().length === 0) {
                areAnyChoicesEmpty = true;
            }
            if (seenChoices.indexOf(choice) !== -1) {
                areAnyChoicesDuplicated = true;
            }
            seenChoices.push(choice);
            handledAnswers.push(false);
        }
        if (areAnyChoicesEmpty) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please ensure the choices are nonempty.'
            });
        }
        if (areAnyChoicesDuplicated) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please ensure the choices are unique.'
            });
        }
        var minAllowedCount = customizationArgs.minAllowableSelectionCount.value;
        var maxAllowedCount = customizationArgs.maxAllowableSelectionCount.value;
        if (minAllowedCount > maxAllowedCount) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: ('Please ensure that the max allowed count is not less than the ' +
                    'min count.')
            });
        }
        if (numChoices < minAllowedCount) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: ('Please ensure that you have enough choices to reach the min ' +
                    'count.')
            });
        }
        else if (numChoices < maxAllowedCount) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: ('Please ensure that you have enough choices to reach the max ' +
                    'count.')
            });
        }
        return warningsList;
    };
    ItemSelectionInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = [];
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        warningsList = warningsList.concat(this.baseInteractionValidationServiceInstance.getAnswerGroupWarnings(answerGroups, stateName));
        var seenChoices = customizationArgs.choices.value;
        var handledAnswers = seenChoices.map(function (item) {
            return false;
        });
        var minAllowedCount = customizationArgs.minAllowableSelectionCount.value;
        var maxAllowedCount = customizationArgs.maxAllowableSelectionCount.value;
        var areAllChoicesCovered = false;
        if (maxAllowedCount === 1) {
            var answerChoiceToIndex = {};
            seenChoices.forEach(function (seenChoice, choiceIndex) {
                answerChoiceToIndex[seenChoice] = choiceIndex;
            });
            answerGroups.forEach(function (answerGroup, answerIndex) {
                var rules = answerGroup.rules;
                rules.forEach(function (rule, ruleIndex) {
                    var ruleInputs = rule.inputs.x;
                    ruleInputs.forEach(function (ruleInput) {
                        var choiceIndex = answerChoiceToIndex[ruleInput];
                        if (rule.type === 'Equals') {
                            handledAnswers[choiceIndex] = true;
                            if (ruleInputs.length > 1) {
                                warningsList.push({
                                    type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                                    message: ('In answer group ' + (answerIndex + 1) + ', ' +
                                        'rule ' + (ruleIndex + 1) + ', ' +
                                        'please select only one answer choice.')
                                });
                            }
                        }
                        else if (rule.type === 'IsProperSubsetOf') {
                            handledAnswers[choiceIndex] = true;
                        }
                        else if (rule.type === 'ContainsAtLeastOneOf') {
                            handledAnswers[choiceIndex] = true;
                        }
                        else if (rule.type ===
                            'DoesNotContainAtLeastOneOf') {
                            for (var i = 0; i < handledAnswers.length; i++) {
                                if (i !== choiceIndex) {
                                    handledAnswers[i] = true;
                                }
                            }
                        }
                    });
                });
            });
            areAllChoicesCovered = handledAnswers.every(function (handledAnswer) {
                return handledAnswer;
            });
        }
        if (!areAllChoicesCovered) {
            if (!defaultOutcome || defaultOutcome.isConfusing(stateName)) {
                warningsList.push({
                    type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                    message: ('Please add something for Oppia to say in the ' +
                        '\"All other answers\" response.')
                });
            }
        }
        answerGroups.forEach(function (answerGroup, answerIndex) {
            var rules = answerGroup.rules;
            rules.forEach(function (rule, ruleIndex) {
                var ruleInputs = rule.inputs.x;
                ruleInputs.forEach(function (ruleInput) {
                    if (rule.type === 'IsProperSubsetOf') {
                        if (ruleInputs.length < 2) {
                            warningsList.push({
                                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                                message: ('In answer group ' + (answerIndex + 1) + ', ' +
                                    'rule ' + (ruleIndex + 1) + ', the "proper subset" ' +
                                    'rule must include at least 2 options.')
                            });
                        }
                    }
                    else if (rule.type === 'Equals') {
                        if (minAllowedCount > ruleInputs.length ||
                            maxAllowedCount < ruleInputs.length) {
                            warningsList.push({
                                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                                message: ('In answer group ' + (answerIndex + 1) + ', ' +
                                    'rule ' + (ruleIndex + 1) + ', the number of correct ' +
                                    'options in the "Equals" rule should be between ' +
                                    minAllowedCount + ' and ' + maxAllowedCount +
                                    ' (the minimum and maximum allowed selection counts).')
                            });
                        }
                    }
                });
                if (ruleInputs.length === 0) {
                    if (rule.type === 'ContainsAtLeastOneOf') {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                            message: ('In answer group ' + (answerIndex + 1) + ', rule ' +
                                (ruleIndex + 1) + ', the "ContainsAtLeastOneOf" rule ' +
                                'should have at least one option.')
                        });
                    }
                }
            });
        });
        return warningsList;
    };
    var _a;
    ItemSelectionInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], ItemSelectionInputValidationService);
    return ItemSelectionInputValidationService;
}());
exports.ItemSelectionInputValidationService = ItemSelectionInputValidationService;
angular.module('oppia').factory('ItemSelectionInputValidationService', static_1.downgradeInjectable(ItemSelectionInputValidationService));


/***/ }),

/***/ "./extensions/interactions/ItemSelectionInput/directives/oppia-interactive-item-selection-input.directive.ts":
/*!*******************************************************************************************************************!*\
  !*** ./extensions/interactions/ItemSelectionInput/directives/oppia-interactive-item-selection-input.directive.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the ItemSelectionInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/ItemSelectionInput/directives/item-selection-input-rules.service.ts */ "./extensions/interactions/ItemSelectionInput/directives/item-selection-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaInteractiveItemSelectionInput', [
    'HtmlEscaperService', 'ItemSelectionInputRulesService',
    'UrlInterpolationService', function (HtmlEscaperService, ItemSelectionInputRulesService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/ItemSelectionInput/directives/' +
                'item-selection-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'WindowDimensionsService',
                'UrlService', 'CurrentInteractionService',
                function ($attrs, WindowDimensionsService, UrlService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.choices = HtmlEscaperService.escapedJsonToObj($attrs.choicesWithValue);
                    ctrl.maxAllowableSelectionCount = ($attrs.maxAllowableSelectionCountWithValue);
                    ctrl.minAllowableSelectionCount = ($attrs.minAllowableSelectionCountWithValue);
                    // The following is an associative array where the key is a choice
                    // (html) and the value is a boolean value indicating whether the
                    // choice was selected by the user (default is false).
                    ctrl.userSelections = {};
                    for (var i = 0; i < ctrl.choices.length; i++) {
                        ctrl.userSelections[ctrl.choices[i]] = false;
                    }
                    ctrl.displayCheckboxes = (ctrl.maxAllowableSelectionCount > 1);
                    // The following indicates that the number of answers is more than
                    // maxAllowableSelectionCount.
                    ctrl.preventAdditionalSelections = false;
                    // The following indicates that the number of answers is less than
                    // minAllowableSelectionCount.
                    ctrl.notEnoughSelections = (ctrl.minAllowableSelectionCount > 0);
                    ctrl.onToggleCheckbox = function () {
                        ctrl.newQuestion = false;
                        ctrl.selectionCount = Object.keys(ctrl.userSelections).filter(function (obj) {
                            return ctrl.userSelections[obj];
                        }).length;
                        ctrl.preventAdditionalSelections = (ctrl.selectionCount >= ctrl.maxAllowableSelectionCount);
                        ctrl.notEnoughSelections = (ctrl.selectionCount < ctrl.minAllowableSelectionCount);
                    };
                    ctrl.submitMultipleChoiceAnswer = function (index) {
                        ctrl.userSelections[ctrl.choices[index]] = true;
                        ctrl.submitAnswer(ctrl.userSelections);
                    };
                    ctrl.submitAnswer = function () {
                        var answers = Object.keys(ctrl.userSelections).filter(function (obj) {
                            return ctrl.userSelections[obj];
                        });
                        CurrentInteractionService.onSubmit(answers, ItemSelectionInputRulesService);
                    };
                    var validityCheckFn = function () {
                        return !ctrl.notEnoughSelections;
                    };
                    CurrentInteractionService.registerCurrentInteraction(ctrl.submitAnswer, validityCheckFn);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/ItemSelectionInput/directives/oppia-response-item-selection-input.directive.ts":
/*!****************************************************************************************************************!*\
  !*** ./extensions/interactions/ItemSelectionInput/directives/oppia-response-item-selection-input.directive.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the ItemSelectionInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseItemSelectionInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/ItemSelectionInput/directives/' +
                'item-selection-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/ItemSelectionInput/directives/oppia-short-response-item-selection-input.directive.ts":
/*!**********************************************************************************************************************!*\
  !*** ./extensions/interactions/ItemSelectionInput/directives/oppia-short-response-item-selection-input.directive.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the ItemSelectionInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseItemSelectionInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/ItemSelectionInput/directives/' +
                'item-selection-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/ItemSelectionInput/static/item_selection_input.css":
/*!************************************************************************************!*\
  !*** ./extensions/interactions/ItemSelectionInput/static/item_selection_input.css ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./item_selection_input.css */ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/ItemSelectionInput/static/item_selection_input.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./extensions/interactions/LogicProof/LogicProof.ts":
/*!**********************************************************!*\
  !*** ./extensions/interactions/LogicProof/LogicProof.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for LogicProof interaction.
 */
__webpack_require__(/*! interactions/LogicProof/static/logic_proof.css */ "./extensions/interactions/LogicProof/static/logic_proof.css");
__webpack_require__(/*! interactions/LogicProof/directives/logic-proof-rules.service.ts */ "./extensions/interactions/LogicProof/directives/logic-proof-rules.service.ts");
__webpack_require__(/*! interactions/LogicProof/directives/logic-proof-validation.service.ts */ "./extensions/interactions/LogicProof/directives/logic-proof-validation.service.ts");
__webpack_require__(/*! interactions/LogicProof/directives/oppia-interactive-logic-proof.directive.ts */ "./extensions/interactions/LogicProof/directives/oppia-interactive-logic-proof.directive.ts");
__webpack_require__(/*! interactions/LogicProof/directives/oppia-response-logic-proof.directive.ts */ "./extensions/interactions/LogicProof/directives/oppia-response-logic-proof.directive.ts");
__webpack_require__(/*! interactions/LogicProof/directives/oppia-short-response-logic-proof.directive.ts */ "./extensions/interactions/LogicProof/directives/oppia-short-response-logic-proof.directive.ts");


/***/ }),

/***/ "./extensions/interactions/LogicProof/directives/logic-proof-rules.service.ts":
/*!************************************************************************************!*\
  !*** ./extensions/interactions/LogicProof/directives/logic-proof-rules.service.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
angular.module('oppia').factory('LogicProofRulesService', [function () {
        return {
            Correct: function (answer) {
                return answer.correct;
            },
            NotCorrect: function (answer) {
                return !answer.correct;
            },
            NotCorrectByCategory: function (answer, inputs) {
                return !answer.correct && answer.error_category === inputs.c;
            }
        };
    }]);


/***/ }),

/***/ "./extensions/interactions/LogicProof/directives/logic-proof-validation.service.ts":
/*!*****************************************************************************************!*\
  !*** ./extensions/interactions/LogicProof/directives/logic-proof-validation.service.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var LogicProofValidationService = /** @class */ (function () {
    function LogicProofValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    LogicProofValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        // TODO(juansaba): Implement customization args validations.
        return [];
    };
    LogicProofValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        // We do not require a default rule for this interaction, since the
        // feedback is mostly provided from within the interaction itself.
        return this.getCustomizationArgsWarnings(customizationArgs).concat(this.baseInteractionValidationServiceInstance.getAnswerGroupWarnings(answerGroups, stateName));
    };
    var _a;
    LogicProofValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], LogicProofValidationService);
    return LogicProofValidationService;
}());
exports.LogicProofValidationService = LogicProofValidationService;
angular.module('oppia').factory('LogicProofValidationService', static_1.downgradeInjectable(LogicProofValidationService));


/***/ }),

/***/ "./extensions/interactions/LogicProof/directives/oppia-interactive-logic-proof.directive.ts":
/*!**************************************************************************************************!*\
  !*** ./extensions/interactions/LogicProof/directives/oppia-interactive-logic-proof.directive.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Directive for the LogicProof Interaction.
 */
__webpack_require__(/*! interactions/codemirrorRequires.ts */ "./extensions/interactions/codemirrorRequires.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/LogicProof/directives/logic-proof-rules.service.ts */ "./extensions/interactions/LogicProof/directives/logic-proof-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
var shared_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/shared.ts */ "./extensions/interactions/LogicProof/static/js/shared.ts"));
var student_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/student.ts */ "./extensions/interactions/LogicProof/static/js/student.ts"));
var data_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/data.ts */ "./extensions/interactions/LogicProof/static/js/data.ts"));
var conversion_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/conversion.ts */ "./extensions/interactions/LogicProof/static/js/conversion.ts"));
var generatedDefaultData_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/generatedDefaultData.ts */ "./extensions/interactions/LogicProof/static/js/generatedDefaultData.ts"));
angular.module('oppia').directive('oppiaInteractiveLogicProof', [
    'HtmlEscaperService', 'UrlInterpolationService', 'EVENT_NEW_CARD_AVAILABLE',
    function (HtmlEscaperService, UrlInterpolationService, EVENT_NEW_CARD_AVAILABLE) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getLastAnswer: '&lastAnswer',
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/LogicProof/directives/' +
                'logic-proof-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$attrs', '$uibModal', 'LogicProofRulesService',
                'WindowDimensionsService', 'UrlService',
                'CurrentInteractionService',
                function ($scope, $attrs, $uibModal, LogicProofRulesService, WindowDimensionsService, UrlService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.localQuestionData = HtmlEscaperService.escapedJsonToObj($attrs.questionWithValue);
                    // This is the information about how to mark a question (e.g. the
                    // permitted line templates) that is stored in defaultData.js within
                    // the dependencies.
                    ctrl.questionData = angular.copy(generatedDefaultData_ts_1.default);
                    ctrl.interactionIsActive = (ctrl.getLastAnswer() === null);
                    $scope.$on(EVENT_NEW_CARD_AVAILABLE, function () {
                        ctrl.interactionIsActive = false;
                    });
                    ctrl.questionData.assumptions =
                        ctrl.localQuestionData.assumptions;
                    ctrl.questionData.results = ctrl.localQuestionData.results;
                    // Deduce the new operators, as in logicProofTeacher.buildQuestion(),
                    // since these are not currently stored separately for each question.
                    ctrl.expressions = [];
                    ctrl.topTypes = [];
                    for (var i = 0; i < ctrl.questionData.assumptions.length; i++) {
                        ctrl.expressions.push(ctrl.questionData.assumptions[i]);
                        ctrl.topTypes.push('boolean');
                    }
                    ctrl.expressions.push(ctrl.questionData.results[0]);
                    ctrl.topTypes.push('boolean');
                    ctrl.typing = shared_ts_1.default.assignTypesToExpressionArray(ctrl.expressions, ctrl.topTypes, data_ts_1.default.BASE_STUDENT_LANGUAGE, ['variable', 'constant', 'prefix_function']);
                    ctrl.questionData.language.operators = ctrl.typing[0].operators;
                    if (ctrl.questionData.assumptions.length <= 1) {
                        ctrl.assumptionsString = shared_ts_1.default.displayExpressionArray(ctrl.questionData.assumptions, ctrl.questionData.language.operators);
                    }
                    else {
                        ctrl.assumptionsString = shared_ts_1.default.displayExpressionArray(ctrl.questionData.assumptions.slice(0, ctrl.questionData.assumptions.length - 1), ctrl.questionData.language.operators) + ' and ' + shared_ts_1.default.displayExpression(ctrl.questionData.assumptions[ctrl.questionData.assumptions.length - 1], ctrl.questionData.language.operators);
                    }
                    ctrl.targetString = shared_ts_1.default.displayExpression(ctrl.questionData.results[0], ctrl.questionData.language.operators);
                    ctrl.questionString = (ctrl.assumptionsString === '' ?
                        'I18N_INTERACTIONS_LOGIC_PROOF_QUESTION_STR_NO_ASSUMPTION' :
                        'I18N_INTERACTIONS_LOGIC_PROOF_QUESTION_STR_ASSUMPTIONS');
                    ctrl.questionStringData = {
                        target: ctrl.targetString,
                        assumptions: ctrl.assumptionsString
                    };
                    ctrl.questionInstance = student_ts_1.default.buildInstance(ctrl.questionData);
                    // Denotes whether messages are in response to a submission, in which
                    // case they persist for longer.
                    ctrl.messageIsSticky = false;
                    // NOTE: for information on integrating angular and code-mirror see
                    // http://github.com/angular-ui/ui-codemirror
                    ctrl.codeEditor = function (editor) {
                        var proofString = (ctrl.interactionIsActive ?
                            ctrl.localQuestionData.default_proof_string :
                            ctrl.getLastAnswer().proof_string);
                        editor.setValue(proofString);
                        ctrl.proofString = editor.getValue();
                        var cursorPosition = editor.doc.getCursor();
                        editor.setOption('lineNumbers', true);
                        editor.setOption('lineWrapping', true);
                        // NOTE: this is necessary to avoid the textarea being greyed-out.
                        // See: http://stackoverflow.com/questions/8349571 for discussion.
                        setTimeout(function () {
                            editor.refresh();
                        }, 500);
                        // NOTE: we must use beforeChange rather than change here to avoid
                        // an infinite loop (which code-mirror will not catch).
                        editor.on('beforeChange', function (instance, change) {
                            var convertedText = conversion_ts_1.default.convertToLogicCharacters(change.text.join('\n'));
                            if (convertedText !== change.text.join('\n')) {
                                // We update using the converted text, then cancel its being
                                // overwritten by the original text.
                                editor.doc.replaceRange(convertedText, change.from, change.to);
                                change.cancel();
                            }
                        });
                        editor.on('cursorActivity', function () {
                            if (editor.doc.getCursor().line !== cursorPosition.line) {
                                ctrl.checkForBasicErrors();
                                cursorPosition = editor.doc.getCursor();
                            }
                        });
                        // NOTE: we use change rather than beforeChange here so that
                        // checking for mistakes is done with respect to the updated text.
                        editor.on('change', function (instance, change) {
                            ctrl.proofString = editor.getValue();
                            // We update the message only if the user has added or removed a
                            // line break, so that it remains while they work on a single
                            // line.
                            if (change.text.length > 1 || change.removed.length > 1) {
                                ctrl.checkForBasicErrors();
                            }
                        });
                        ctrl.editor = editor;
                    };
                    // This performs simple error checks that are done as the student
                    // types rather than waiting for the proof to be submitted.
                    ctrl.checkForBasicErrors = function () {
                        if (!ctrl.messageIsSticky) {
                            ctrl.clearMessage();
                        }
                        try {
                            student_ts_1.default.validateProof(ctrl.proofString, ctrl.questionInstance);
                        }
                        catch (err) {
                            ctrl.clearMessage();
                            ctrl.showMessage(err.message, err.line);
                            ctrl.messageIsSticky = false;
                        }
                        // NOTE: this line is necessary to force angular to refresh the
                        // displayed errorMessage.
                        $scope.$apply();
                    };
                    ctrl.clearMessage = function () {
                        if (ctrl.errorMark) {
                            ctrl.errorMark.clear();
                        }
                        ctrl.errorMessage = '';
                    };
                    ctrl.showMessage = function (message, lineNum) {
                        ctrl.errorMessage = ctrl.constructDisplayedMessage(message, lineNum);
                        ctrl.errorMark = ctrl.editor.doc.markText({
                            line: lineNum,
                            ch: 0
                        }, {
                            line: lineNum,
                            ch: 100
                        }, {
                            className: 'logic-proof-erroneous-line'
                        });
                    };
                    ctrl.constructDisplayedMessage = function (message, lineNum) {
                        return 'line ' + (lineNum + 1) + ': ' + message;
                    };
                    ctrl.displayProof = function (proofString, errorLineNum) {
                        var proofLines = proofString.split('\n');
                        var numberedLines = [];
                        for (var i = 0; i < proofLines.length; i++) {
                            numberedLines.push((i + 1) + '  ' + proofLines[i]);
                        }
                        // We split incorrect proofs into three parts so that response.html
                        // can make the invalid line bold.
                        return (errorLineNum === undefined) ?
                            [numberedLines.join('\n')] :
                            [
                                numberedLines.slice(0, errorLineNum).join('\n'),
                                numberedLines[errorLineNum],
                                numberedLines.slice(errorLineNum + 1, numberedLines.length).join('\n')
                            ];
                    };
                    // NOTE: proof_num_lines, displayed_question and displayed_proof are
                    // only computed here because response.html needs them and does not
                    // have its own javascript.
                    ctrl.submitProof = function () {
                        ctrl.clearMessage();
                        var submission = {
                            assumptions_string: ctrl.assumptionsString,
                            target_string: ctrl.targetString,
                            proof_string: ctrl.proofString,
                            proof_num_lines: ctrl.proofString.split('\n').length,
                            displayed_question: ctrl.questionString,
                            correct: null,
                            error_category: null,
                            error_code: null,
                            error_message: null,
                            error_line_number: null,
                            displayed_message: null,
                            displayed_proof: null
                        };
                        try {
                            var proof = student_ts_1.default.buildProof(ctrl.proofString, ctrl.questionInstance);
                            student_ts_1.default.checkProof(proof, ctrl.questionInstance);
                            submission.correct = true;
                        }
                        catch (err) {
                            submission.correct = false;
                            submission.error_category = err.category;
                            submission.error_code = err.code;
                            submission.error_message = err.message;
                            submission.error_line_number = err.line;
                            submission.displayed_message =
                                ctrl.constructDisplayedMessage(err.message, err.line);
                            submission.displayed_proof =
                                ctrl.displayProof(ctrl.proofString, err.line);
                            ctrl.showMessage(err.message, err.line);
                            ctrl.messageIsSticky = true;
                        }
                        if (submission.correct) {
                            submission.displayed_message = '';
                            submission.displayed_proof = ctrl.displayProof(ctrl.proofString);
                        }
                        CurrentInteractionService.onSubmit(submission, LogicProofRulesService);
                    };
                    CurrentInteractionService.registerCurrentInteraction(ctrl.submitProof, null);
                    ctrl.showHelp = function () {
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/LogicProof/directives/' +
                                'logic-proof-help-modal.directive.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.close = function () {
                                        $uibModalInstance.close();
                                    };
                                }
                            ]
                        }).result.then(function () { });
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/LogicProof/directives/oppia-response-logic-proof.directive.ts":
/*!***********************************************************************************************!*\
  !*** ./extensions/interactions/LogicProof/directives/oppia-response-logic-proof.directive.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the LogicProof response.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseLogicProof', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/LogicProof/directives/' +
                'logic-proof-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/LogicProof/directives/oppia-short-response-logic-proof.directive.ts":
/*!*****************************************************************************************************!*\
  !*** ./extensions/interactions/LogicProof/directives/oppia-short-response-logic-proof.directive.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the LogicProof short response.
 */
__webpack_require__(/*! filters/string-utility-filters/truncate-at-first-line.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseLogicProof', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/LogicProof/directives/' +
                'logic-proof-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/conversion.ts":
/*!********************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/conversion.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Functions to convert symbols available on the keyboard to
 *   desired logic symbols as a user types.
 */
var logicProofConversion = (function () {
    // NOTE: the 'old' values must all be single characters
    var REPLACEMENT_PAIRS = [{
            old: '&',
            // eslint-disable quote-props
            'new': '\u2227'
        }, {
            old: '|',
            'new': '\u2228'
        }, {
            old: '@',
            'new': '\u2200'
        }, {
            old: '$',
            'new': '\u2203'
        }, {
            old: '^',
            'new': '\u2227'
        }, {
            old: '\u0009',
            'new': '  '
            // eslint-enable quote-props
        }];
    var convertToLogicCharacters = function (oldString) {
        var replacedString = oldString;
        for (var i = 0; i < REPLACEMENT_PAIRS.length; i++) {
            // We don't use .replace() as it only affects the first instance
            replacedString = replacedString.split(REPLACEMENT_PAIRS[i].old).join(REPLACEMENT_PAIRS[i]['new']);
        }
        return replacedString;
    };
    return {
        convertToLogicCharacters: convertToLogicCharacters
    };
}());
exports.default = logicProofConversion;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/data.ts":
/*!**************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/data.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Contains logic proof data.
 */
var logicProofData = (function () {
    var BASE_VOCABULARY = {
        from: ['from'],
        and: ['and'],
        have: ['we have', 'we know', 'have'],
        hence: ['hence', 'so', 'thus', 'thence', 'whence'],
        whichever: [
            'and whichever is true', 'and either way', 'and in either case'
        ],
        arbitrary: ['was arbitrary', 'is arbitrary'],
        take: ['take'],
        satisfying: ['satisfying', 'such that'],
        // eslint-disable quote-props
        'if': ['if'],
        given: ['given'],
        contradiction: ['contradiction'],
        at: ['at']
    };
    var SINGLE_BOOLEAN = {
        type: 'boolean',
        arbitrarily_many: false
    };
    var SINGLE_ELEMENT = {
        type: 'element',
        arbitrarily_many: false
    };
    // NOTE: By default, 'and' & 'or' must be binary.
    // NOTE: We are not yet using the display keys from the kinds (we are using
    // symbol keys from the list of operators).
    var BASE_STUDENT_LANGUAGE = {
        types: {
            'boolean': {
                // eslint-enable quote-props
                quantifiable: false
            },
            element: {
                quantifiable: true
            }
        },
        kinds: {
            binary_connective: {
                display: [{
                        format: 'argument_index',
                        content: 0
                    }, {
                        format: 'name'
                    }, {
                        format: 'argument_index',
                        content: 1
                    }]
            },
            unary_connective: {
                matchable: false,
                display: [{
                        format: 'name'
                    }, {
                        format: 'argument_index',
                        content: 0
                    }]
            },
            quantifier: {
                matchable: false,
                display: [{
                        format: 'name'
                    }, {
                        format: 'dummy_index',
                        content: 0
                    }, {
                        format: 'string',
                        content: '.'
                    }, {
                        format: 'argument_index',
                        conent: 0
                    }]
            },
            binary_function: {
                matchable: false,
                display: [{
                        format: 'argument_index',
                        content: 0
                    }, {
                        format: 'name'
                    }, {
                        format: 'argument_index',
                        content: 1
                    }],
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }]
            },
            prefix_function: {
                matchable: false,
                typing: [{
                        arguments: [{
                                type: 'element',
                                arbitrarily_many: true
                            }],
                        dummies: [],
                        output: 'element'
                    }, {
                        arguments: [{
                                type: 'element',
                                arbitrarily_many: true
                            }],
                        dummies: [],
                        output: 'boolean'
                    }]
            },
            constant: {
                matchable: false,
                display: [{
                        format: 'name'
                    }],
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'element'
                    }]
            },
            variable: {
                matchable: true,
                display: [{
                        format: 'name'
                    }],
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'element'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'boolean'
                    }]
            }
        },
        operators: {
            and: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['\u2227']
            },
            or: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['\u2228']
            },
            implies: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['=>']
            },
            iff: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<=>']
            },
            not: {
                kind: 'unary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['~']
            },
            for_all: {
                kind: 'quantifier',
                typing: [{
                        arguments: [SINGLE_BOOLEAN],
                        dummies: [SINGLE_ELEMENT],
                        output: 'boolean'
                    }],
                symbols: ['\u2200', '.']
            },
            exists: {
                kind: 'quantifier',
                typing: [{
                        arguments: [SINGLE_BOOLEAN],
                        dummies: [SINGLE_ELEMENT],
                        output: 'boolean'
                    }],
                symbols: ['\u2203', '.']
            },
            equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['=']
            },
            not_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['!=']
            },
            less_than: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<']
            },
            greater_than: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['>']
            },
            less_than_or_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<=']
            },
            greater_than_or_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['>=']
            },
            addition: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }],
                symbols: ['+']
            },
            subtraction: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }],
                symbols: ['-']
            },
            multiplication: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }],
                symbols: ['*']
            },
            division: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }],
                symbols: ['/']
            },
            exponentiation: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_ELEMENT, SINGLE_ELEMENT],
                        dummies: [],
                        output: 'element'
                    }],
                symbols: ['^']
            }
        }
    };
    var SINGLE_INTEGER = {
        type: 'integer',
        arbitrarily_many: false
    };
    var SINGLE_STRING = {
        type: 'string',
        arbitrarily_many: false
    };
    var SINGLE_FORMULA = {
        type: 'formula',
        arbitrarily_many: false
    };
    var SINGLE_SET_OF_FORMULAS = {
        type: 'set_of_formulas',
        arbitrarily_many: false
    };
    var BASE_CONTROL_LANGUAGE = {
        types: {
            // eslint-disable-next-line quote-props
            'boolean': {
                quantifiable: false
            },
            // Used for line numbers & indentation.
            integer: {
                quantifiable: true
            },
            // Used for line.template.
            string: {
                quantifiable: false
            },
            // Used for matchings, target.
            formula: {
                quantifiable: true
            },
            // Used for antecedents, results & assumptions.
            set_of_formulas: {
                quantifiable: false
            }
        },
        kinds: {
            binary_connective: {},
            unary_connective: {},
            quantifier: {},
            bounded_quantifier: {},
            binary_relation: {},
            binary_function: {},
            // NOTE: new prefix_functions will be explicitely added by making
            // definitions, and from these definitions their types will be known.
            // Thus it is not necessary for their kinds to have typing rules (and
            // such typing rules would in any case have to be inconveniently long).
            prefix_function: {},
            ranged_function: {},
            constant: {
                matchable: false,
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'integer'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'string'
                    }]
            },
            variable: {
                matchable: true,
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'integer'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'string'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'formula'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'set_of_formulas'
                    }, {
                        arguments: [],
                        dummies: [],
                        output: 'boolean'
                    }]
            }
        },
        operators: {
            and: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [{
                                type: 'boolean',
                                arbitrarily_many: true
                            }],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['\u2227']
            },
            or: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [{
                                type: 'boolean',
                                arbitrarily_many: true
                            }],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['\u2228']
            },
            implies: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['=>']
            },
            iff: {
                kind: 'binary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<=>']
            },
            not: {
                kind: 'unary_connective',
                typing: [{
                        arguments: [SINGLE_BOOLEAN],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['~']
            },
            equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_STRING, SINGLE_STRING],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_FORMULA, SINGLE_FORMULA],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_SET_OF_FORMULAS, SINGLE_SET_OF_FORMULAS],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['=']
            },
            not_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_STRING, SINGLE_STRING],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_FORMULA, SINGLE_FORMULA],
                        dummies: [],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_SET_OF_FORMULAS, SINGLE_SET_OF_FORMULAS],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['!=']
            },
            less_than: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<']
            },
            greater_than: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['>']
            },
            less_than_or_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['<=']
            },
            greater_than_or_equals: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['>=']
            },
            is_in: {
                kind: 'binary_relation',
                typing: [{
                        arguments: [SINGLE_FORMULA, SINGLE_SET_OF_FORMULAS],
                        dummies: [],
                        output: 'boolean'
                    }],
                symbols: ['\u2208']
            },
            addition: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'integer'
                    }],
                symbols: ['+']
            },
            subtraction: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'integer'
                    }],
                symbols: ['-']
            },
            multiplication: {
                kind: 'binary_function',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'integer'
                    }],
                symbols: ['*']
            },
            bounded_for_all: {
                kind: 'bounded_quantifier',
                typing: [{
                        // The first argument is the bounding.
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_INTEGER],
                        output: 'boolean'
                    }, {
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_INTEGER],
                        output: 'boolean'
                    }],
                symbols: ['\u2200', '.']
            },
            bounded_exists: {
                kind: 'bounded_quantifier',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_INTEGER],
                        output: 'boolean'
                    }, {
                        // The first argument is the bounding.
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_FORMULA],
                        output: 'boolean'
                    }],
                symbols: ['\u2203', '.']
            },
            // This has form min{n<m|A(n)}, A(n) is the argument and n the dummy, or
            // alteratively min{p∈antecedents(n)|B(p)} which will return the first
            // element of set_of_formulas antecedents(n) satisfying B.
            min: {
                kind: 'ranged_function',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_INTEGER],
                        output: 'integer'
                    }, {
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_FORMULA],
                        output: 'formula'
                    }],
                symbols: ['min', '{', '|', '}']
            },
            max: {
                kind: 'ranged_function',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_INTEGER],
                        output: 'integer'
                    }, {
                        arguments: [SINGLE_BOOLEAN, SINGLE_BOOLEAN],
                        dummies: [SINGLE_FORMULA],
                        output: 'formula'
                    }],
                symbols: ['max', '{', '|', '}']
            },
            indentation: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'integer'
                    }]
            },
            template: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'string'
                    }]
            },
            antecedents: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            results: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            variables: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            text: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER],
                        dummies: [],
                        output: 'string'
                    }]
            },
            element: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_STRING, SINGLE_INTEGER],
                        dummies: [],
                        output: 'formula'
                    }]
            },
            num_lines: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'integer'
                    }]
            },
            assumptions: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            target: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'formula'
                    }]
            },
            question_variables: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            // eslint-disable-next-line quote-props
            'if': {
                // NOTE: this prefix function is unusual in having a boolean input
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_BOOLEAN, SINGLE_INTEGER, SINGLE_INTEGER],
                        dummies: [],
                        output: 'integer'
                    }, {
                        arguments: [SINGLE_BOOLEAN, SINGLE_STRING, SINGLE_STRING],
                        dummies: [],
                        output: 'string'
                    }, {
                        arguments: [SINGLE_BOOLEAN, SINGLE_FORMULA, SINGLE_FORMULA],
                        dummies: [],
                        output: 'formula'
                    }, {
                        arguments: [
                            SINGLE_BOOLEAN, SINGLE_SET_OF_FORMULAS, SINGLE_SET_OF_FORMULAS
                        ],
                        dummies: [],
                        output: 'set_of_formulas'
                    }]
            },
            entry: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_INTEGER, SINGLE_SET_OF_FORMULAS],
                        dummies: [],
                        output: 'formula'
                    }]
            },
            substitute: {
                kind: 'prefix_function',
                typing: [{
                        arguments: [SINGLE_FORMULA, SINGLE_FORMULA, SINGLE_FORMULA],
                        dummies: [],
                        output: 'formula'
                    }]
            }
        }
    };
    var BASE_GENERAL_MESSAGES = {
        odd_number_spaces: {
            templates: [[{
                        isFixed: true,
                        content: ('An indentation is indicated by a double space at the start of ' +
                            'the line, but this line starts with an odd number of spaces.')
                    }]],
            parameters: {},
            category: 'parsing'
        },
        unmatched_line: {
            templates: [[{
                        isFixed: true,
                        content: ('This line could not be identified as valid - please check the ' +
                            'list of possible lines.')
                    }]],
            parameters: {},
            category: 'parsing'
        },
        wrong_kind_in_line: {
            templates: [[{
                        isFixed: true,
                        content: 'In a line of this form, your '
                    }, {
                        isFixed: false,
                        content: 'expression'
                    }, {
                        isFixed: true,
                        content: ' should be a '
                    }, {
                        isFixed: false,
                        content: 'expected_kind'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                expression: {
                    format: 'expression'
                },
                expected_kind: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        unspecified_mistake: {
            templates: [[{
                        isFixed: true,
                        content: 'This line contains a mistake in its '
                    }, {
                        isFixed: false,
                        content: 'section'
                    }, {
                        isFixed: true,
                        content: ' (with code '
                    }, {
                        isFixed: false,
                        content: 'entry'
                    }, {
                        isFixed: true,
                        content: ').'
                    }]],
            parameters: {
                section: {
                    format: 'string'
                },
                entry: {
                    format: 'string'
                }
            },
            category: 'mistake'
        },
        illegal_symbol: {
            templates: [[{
                        isFixed: true,
                        content: 'The symbol '
                    }, {
                        isFixed: false,
                        content: 'symbol'
                    }, {
                        isFixed: true,
                        content: ' was not recognised.'
                    }]],
            parameters: {
                symbol: {
                    format: 'string'
                }
            },
            category: 'parsing'
        },
        blank_line: {
            templates: [[{
                        isFixed: true,
                        content: 'This line is blank.'
                    }]],
            parameters: {},
            category: 'parsing'
        },
        unidentified_word: {
            templates: [[{
                        isFixed: true,
                        content: 'We could not identify \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: ('\'; please make sure you are using vocabulary from the ' +
                            'given list, and don\'t have two consecutive expressions.')
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            },
            category: 'parsing'
        },
        unidentified_words: {
            templates: [[{
                        isFixed: true,
                        content: 'We could not identify either of \''
                    }, {
                        isFixed: false,
                        content: 'word1'
                    }, {
                        isFixed: true,
                        content: '\' or \''
                    }, {
                        isFixed: false,
                        content: 'word2'
                    }, {
                        isFixed: true,
                        content: ('\' as words; please make sure you are using vocabulary from the ' +
                            'given list, and don\'t have two consecutive expressions.')
                    }]],
            parameters: {
                word1: {
                    format: 'string'
                },
                word2: {
                    format: 'string'
                }
            },
            category: 'parsing'
        },
        consecutive_expressions: {
            templates: [[{
                        isFixed: true,
                        content: 'This line has two expressions in a row ('
                    }, {
                        isFixed: false,
                        content: 'word1'
                    }, {
                        isFixed: true,
                        content: ' and '
                    }, {
                        isFixed: false,
                        content: 'word2'
                    }, {
                        isFixed: true,
                        content: ') which is not allowed.'
                    }]],
            parameters: {
                word1: {
                    format: 'string'
                },
                word2: {
                    format: 'string'
                }
            },
            category: 'parsing'
        },
        unidentified_phrase_starting_at: {
            templates: [[{
                        isFixed: true,
                        content: 'The phrase starting \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: ('\' could not be identified; please make sure you are only ' +
                            'using phrases from the given list of vocabulary.')
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            },
            category: 'formattting'
        },
        forbidden_word: {
            templates: [[{
                        isFixed: true,
                        content: 'The name \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: '\' is reserved for vocabulary and so cannot be used here.'
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            },
            category: 'parsing'
        },
        not_enough_inputs: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' must have at least '
                    }, {
                        isFixed: false,
                        content: 'num_needed'
                    }, {
                        isFixed: true,
                        content: ' '
                    }, {
                        isFixed: false,
                        content: 'input_category'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                num_needed: {
                    format: 'string'
                },
                input_category: {
                    format: 'string'
                },
                operator: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        wrong_num_inputs: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' must have '
                    }, {
                        isFixed: false,
                        content: 'num_needed'
                    }, {
                        isFixed: true,
                        content: ' '
                    }, {
                        isFixed: false,
                        content: 'input_category'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                num_needed: {
                    format: 'string'
                },
                input_category: {
                    format: 'string'
                },
                operator: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        wrong_kind: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' is supposed to be a '
                    }, {
                        isFixed: false,
                        content: 'expected_kind'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                },
                expected_kind: {
                    format: 'string'
                },
                actual_kind: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        wrong_type: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' yields a '
                    }, {
                        isFixed: false,
                        content: 'actual_type'
                    }, {
                        isFixed: true,
                        content: ' but you are trying to use it to give a '
                    }, {
                        isFixed: false,
                        content: 'expected_type'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                },
                expected_type: {
                    format: 'string'
                },
                actual_type: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        duplicate_dummy_name: {
            templates: [[{
                        isFixed: true,
                        content: 'The name \''
                    }, {
                        isFixed: false,
                        content: 'dummy'
                    }, {
                        isFixed: true,
                        content: '\' is already in use and so cannot be quantified over in '
                    }, {
                        isFixed: false,
                        content: 'expression'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                dummy: {
                    format: 'expression'
                },
                expression: {
                    format: 'expression'
                }
            },
            category: 'typing'
        },
        dummy_not_variable: {
            templates: [[{
                        isFixed: true,
                        content: 'You can only quantify over variables, not  '
                    }, {
                        isFixed: false,
                        content: 'dummy'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                dummy: {
                    format: 'expression'
                },
                expression: {
                    format: 'expression'
                }
            },
            category: 'typing'
        },
        unknown_operator: {
            templates: [[{
                        isFixed: true,
                        content: 'The operator '
                    }, {
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' could not be identified.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                }
            },
            category: 'typing'
        },
        too_many_parsings: {
            templates: [[{
                        isFixed: true,
                        content: ('This can be parsed in too many different ways - try using fewer ' +
                            'words, especially single-character words.')
                    }]],
            parameters: {},
            category: 'parsing'
        },
        too_many_typings: {
            templates: [[{
                        isFixed: true,
                        content: ('This has too many possible typings - try using fewer variables.')
                    }]],
            parameters: {}
        },
        category: 'typing'
    };
    return {
        BASE_VOCABULARY: BASE_VOCABULARY,
        BASE_STUDENT_LANGUAGE: BASE_STUDENT_LANGUAGE,
        BASE_CONTROL_LANGUAGE: BASE_CONTROL_LANGUAGE,
        BASE_GENERAL_MESSAGES: BASE_GENERAL_MESSAGES
    };
})();
exports.default = logicProofData;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/generatedDefaultData.ts":
/*!******************************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/generatedDefaultData.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/data.ts */ "./extensions/interactions/LogicProof/static/js/data.ts"));
// Paste generated code here.
var LOGIC_PROOF_DEFAULT_QUESTION_DATA = { assumptions: [], results: [], language: data_ts_1.default.BASE_STUDENT_LANGUAGE, general_messages: data_ts_1.default.BASE_GENERAL_MESSAGES, "line_templates": [{ "name": "and_eliminate_left", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "and_eliminate_right", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "and_introduce", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "and_introduce", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_right", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_right", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_left", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_left", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_cis", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_eliminate_trans", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_introduce", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "iff_introduce", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "iff", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "assumption", "reader_view": [{ "format": "phrase", "content": "if" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "implies_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "implies_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "implies_introduce", "reader_view": [{ "format": "phrase", "content": "hence" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "implies", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "not_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "phrase", "content": "contradiction" }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [], "variables": [], "error": [] }, { "name": "not_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "phrase", "content": "contradiction" }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [], "variables": [], "error": [] }, { "name": "contradiction_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "phrase", "content": "contradiction" }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "not_introduce", "reader_view": [{ "format": "phrase", "content": "hence" }, { "format": "expression", "content": { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "excluded_middle_1", "reader_view": [{ "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "excluded_middle_2", "reader_view": [{ "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "excluded_middle_3", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "or_eliminate", "reader_view": [{ "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "whichever" }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "or_introduce_left", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "or_introduce_right", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "exists_eliminate", "reader_view": [{ "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "quantifier", "top_operator_name": "exists", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "hence" }, { "format": "phrase", "content": "take" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element", "kind": "variable" } }, { "format": "phrase", "content": "satisfying" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "quantifier", "top_operator_name": "exists", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" }], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "exists_introduce", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" } }, { "format": "phrase", "content": "at" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "quantifier", "top_operator_name": "exists", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "quantifier", "top_operator_name": "exists", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" }], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "for_all_eliminate", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "quantifier", "top_operator_name": "for_all", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "at" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "quantifier", "top_operator_name": "for_all", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }, "substitutions": [{ "x": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] } }], "type": "boolean" }], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "for_all_introduce", "reader_view": [{ "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element", "kind": "variable" } }, { "format": "phrase", "content": "arbitrary" }, { "format": "phrase", "content": "hence" }, { "format": "expression", "content": { "expression": { "top_kind_name": "quantifier", "top_operator_name": "for_all", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "quantifier", "top_operator_name": "for_all", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "p", "arguments": [], "dummies": [] }], "dummies": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }] }, "substitutions": [], "type": "boolean" }], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "given", "reader_view": [{ "format": "phrase", "content": "given" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element" } }], "antecedents": [], "results": [], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "take", "reader_view": [{ "format": "phrase", "content": "take" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }, "substitutions": [], "type": "element" } }], "antecedents": [], "results": [], "variables": [{ "top_kind_name": "variable", "top_operator_name": "a", "arguments": [], "dummies": [] }], "error": [] }, { "name": "reminder", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "reminder", "reader_view": [{ "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [] }, { "name": "and_introduce_e1", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "Should this be 'From " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " and " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " we have " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "'?" }], [{ "format": "string", "content": "To prove " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " you need to have shown " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " as well." }]] }, { "name": "and_introduce_e2", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "Should this be 'From " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " and " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " we have " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "'?" }], [{ "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " means that " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " and " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " are both true, so you also need to have shown " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "." }]] }, { "name": "and_introduce_e3", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "You have shown " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": ", not " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "." }]] }, { "name": "and_introduce_e4", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "and" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }, { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "You have shown " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": ", not " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "." }]] }, { "name": "and_eliminate_e", "reader_view": [{ "format": "phrase", "content": "from" }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "phrase", "content": "have" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [{ "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" }], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "T", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "From " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "and", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " you can conclude either " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " or " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "." }]] }, { "name": "not_introduce_e", "reader_view": [{ "format": "phrase", "content": "hence" }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }], "antecedents": [], "results": [{ "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" }], "variables": [], "error": [[{ "format": "string", "content": "If you want to reach a contradiction from " }, { "format": "expression", "content": { "expression": { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " and so conclude " }, { "format": "expression", "content": { "expression": { "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": " then you'll need to start from the law of the excluded middle 'We know " }, { "format": "expression", "content": { "expression": { "top_kind_name": "binary_connective", "top_operator_name": "or", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "unary_connective", "top_operator_name": "not", "arguments": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }], "dummies": [] }], "dummies": [] }, "substitutions": [], "type": "boolean" } }, { "format": "string", "content": "'." }]] }], "vocabulary": { "from": ["from"], "and": ["and"], "have": ["we have", "we know", "have"], "hence": ["hence", "so", "thus", "whence", "therefore"], "whichever": ["and whichever is true", "and either way", "and in either case"], "arbitrary": ["was arbitrary", "is arbitrary"], "take": ["take"], "satisfying": ["satisfying", "such that"], "if": ["if"], "given": ["given"], "contradiction": ["contradiction"], "at": ["at"] }, "mistake_table": [{ "name": "layout", "entries": [{ "name": "first_line_indented", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "The first line of a proof should not be indented." }]] }, { "name": "illegal_indent", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_scope_creator", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "Indents should only occur after lines of the form 'If..' or 'Given...'." }]] }, { "name": "double_indent", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "addition", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_scope_creator", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "Only indent once after '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "'." }]] }, { "name": "missing_indent_given", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "After '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' the following lines in which you reason using the variable " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " should be indented. Then stop indenting once you reach a statement of the form '\u2200x.....' in which the " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " no longer occurs." }]] }, { "name": "missing_indent_assumption", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "After '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' the following lines in which you reason under the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " should be indented. Once you have proved some statement p assuming " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " then you can write an unindented line 'Hence " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "=>p'. Alternatively you can simply stop indenting if you no longer wish to use the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "missing_deindent_forall_0", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To prove " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " you need to start by writing 'Given " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "' and then start indenting your lines until you manage to prove " }, { "format": "expression", "content": { "top_operator_name": "entry", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ". After this you can write this line (which should not be indented)." }]] }, { "name": "incorrect_deindent_forall", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "We are still working under the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " and must stop doing so (for example by moving to a statement of the form " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "=>p) before we can leave the scope of " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " and introduce a for-all quantifier." }]] }, { "name": "missing_deindent_for_all_1", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "This line should no longer being indented (because we are no longer within the scope of " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ")." }]] }, { "name": "missing_deindent_for_all_2", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "This line should be indented one step less than the previous line (because it is no longer in the scope of " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ")." }]] }, { "name": "double_deindent_forall", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "We only reduce the level of indentation by one here; we are just leaving the scope of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "'." }]] }, { "name": "missing_deindent_implies_0", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To prove " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " you need to start by writing 'If " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "', then give a chain of reasoning (which should be indented) that ends with " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ". After that you can put this line (which should not be indented)." }]] }, { "name": "missing_deindent_not_0", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To prove " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " you need to start by writing 'If " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "' and then give a chain of reasoning (on indented lines) that ends with a contradiction. After that you are allowed to write this line (unindented)." }]] }, { "name": "incorrect_deindent", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You are still working withing the scope of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' and you need to stop doing so (typically be introducing a forall statement) before you can drop the assumption of " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ". Alternatively you could try changing the order of your 'Given...' and 'If...' lines." }]] }, { "name": "missing_deindent_1", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "Stop indenting at this point, because the truth of this line does not rely on the assumption of " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "missing_deindent_2", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "When writing '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' we reduce the level of indentation by one, to indicate that we are no longer making the assumption that " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "double_deindent_assumption", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You should only de-indent once here; we are dropping the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " but not that of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "double_deindent_given", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "Only deindent once here; we are dropping the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " but are still within the scope of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "'." }]] }, { "name": "illegal_first_line", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You can't have this as the first line of your proof" }]] }] }, { "name": "variables", "entries": [{ "name": "unspecified_variable", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "variables", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_initialized", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You haven't said where " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " comes from; if you want it to be arbitrary then add a preceding line saying 'Given " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "'; alternatively you might want to take a particular " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " witnessing some existential formula." }]] }, { "name": "inaccessible_variable", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "variables", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_accessible", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "The variable " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " was only specified within the scope of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper2", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' in line " }, { "format": "expression", "content": { "top_operator_name": "scoper2", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" } }, { "format": "string", "content": ", and so can only be used there. If you want it as an arbitrary variable again then write 'Given " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "'." }]] }, { "name": "incorrect_variable_forall", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "We originally took " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " as our arbitrary variable so this, rather than " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ", needs to be the one that we quantify out over." }]] }, { "name": "arbitrary_variable_clash", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_accessible", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "The variable " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " is already in use; chose a new variable to work with instead." }]] }, { "name": "variable_clash", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'exists_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_accessible", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You just know that there is some " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " such that " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "; you can't assume that it is the " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " we were previously discussing. Try using an entirely new variable in place of " }, { "format": "expression", "content": { "top_operator_name": "variable", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }] }, { "name": "logic", "entries": [{ "name": "missing_antecedent", "occurs": { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_proven", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "boolean" }, "message": [[{ "format": "string", "content": "This line uses " }, { "format": "expression", "content": { "top_operator_name": "min", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_proven", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "formula" } }, { "format": "string", "content": ", so you need to have an earlier line proving that " }, { "format": "expression", "content": { "top_operator_name": "min", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_proven", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "formula" } }, { "format": "string", "content": " is true." }]] }, { "name": "inaccessible_antecedent", "occurs": { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_available", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "boolean" }, "message": [[{ "format": "string", "content": "You are using here that " }, { "format": "expression", "content": { "top_operator_name": "min", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_available", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "formula" } }, { "format": "string", "content": ", which was only proved within the context of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "prover", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "min", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_available", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' and so is no longer available to you." }]] }, { "name": "missing_false", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "needs_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "This line assumes you have already proved a contradiction, which is not the case." }]] }, { "name": "inaccessible_false", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "needs_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in_scope", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "It is true that you proved a contradiction in line " }, { "format": "expression", "content": { "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" } }, { "format": "string", "content": " but this line is no longer available to you." }]] }, { "name": "for_all_incorrect_conclusion", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "substitute", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'p'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'x'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'a'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To conclude this you need to have shown " }, { "format": "expression", "content": { "top_operator_name": "substitute", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'p'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'x'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'a'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " on the immediately preceding line." }]] }, { "name": "implies_incorrect_conclusion", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To deduce '" }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "' you need to have proved " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " in the immediately preceding line (under the assumption of " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ")." }]] }, { "name": "implies_incorrect_assumption", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'implies_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You started with the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " not " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ", so you must conclude 'Hence " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "=>" }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "'." }]] }, { "name": "not_incorrect_conclusion", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To prove the statement " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " you need to start by assuming " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " is true and prove a contradiction. Then write this line immediately afterwards." }]] }, { "name": "not_incorrect_assumption", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_introduce'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "We started with the assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ", so what we have in fact shown is ~" }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "subtraction", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "or_missing_antecedent_both", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "To conclude that " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " follows from " }, { "format": "expression", "content": { "top_operator_name": "entry", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "antecedents", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " you need to show that it follows if either " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " or " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " is true. Write 'If " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "' and then give an (indented) series of lines that deduce " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " (or a contradiction) from " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ". Then separately write 'If " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "' and prove " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " (or a contradiction) under this assumption." }]] }, { "name": "or_missing_antecedent_left", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You have proved that " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " follows if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " holds; you need to also prove it follows if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " holds." }]] }, { "name": "or_missing_antecedent_right", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You have proved that " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " follows if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " holds; you need to also prove it follows if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " holds." }]] }, { "name": "or_inaccessible_antecedent_left", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_available_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You proved that if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " then " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ", but this was in the context of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'R'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "', which we have since left." }]] }, { "name": "or_inaccessible_antecedent_right", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_available_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "You proved that if " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": " then " }, { "format": "expression", "content": { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": ", but this was in the context of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'S'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "element", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "'T'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "', which we have since left." }]] }] }, { "name": "target", "entries": [{ "name": "last_line_indented_assumption", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "num_lines", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "The last line of a proof should not be indented; you need to prove that the given formulas holds just from the original assumptions, not the additional assumption of " }, { "format": "expression", "content": { "top_operator_name": "result", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "formula" } }, { "format": "string", "content": "." }]] }, { "name": "last_line_indented_given", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "num_lines", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "The last line of a proof should not be indented; you should have ceased working within the scope of '" }, { "format": "expression", "content": { "top_operator_name": "text", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" } }, { "format": "string", "content": "' by this point, typically by introducing a forall statement." }]] }, { "name": "last_line_not_target", "occurs": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "num_lines", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "target", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "message": [[{ "format": "string", "content": "We are trying to prove " }, { "format": "expression", "content": { "top_operator_name": "target", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "formula" } }, { "format": "string", "content": " so it should be given by the final line of the proof." }]] }] }], "control_functions": [{ "name": "variable", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "formula" }], "definition": { "top_operator_name": "entry", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "variables", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "formula" }, "description": "The free variable occurring in line n (if any)" }, { "name": "result", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "formula" }], "definition": { "top_operator_name": "entry", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "formula" }, "description": "The result of line n (if any)" }, { "name": "is_scope_creator", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether the line after this one should be indented" }, { "name": "scoper", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "integer" }], "definition": { "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" }, "description": "The most recent line (not including n) in whose scope line n is" }, { "name": "scoper2", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "integer" }], "definition": { "top_operator_name": "if", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "is_scope_creator", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "scoper", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, "description": "The most recent line (including n) in whose scope line n is" }, { "name": "is_in_scope", "variables": [{ "top_kind_name": "variable", "top_operator_name": "k", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "is_scope_creator", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether the results and variables of line k<=n are accessible to line n" }, { "name": "is_initializer", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'for_all_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'exists_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'take'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether line n initializes its variables" }, { "name": "initializes", "variables": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "variables", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether line n initializes variable x" }, { "name": "is_initialized", "variables": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "question_variables", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "initializes", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether variable x is initialized by line n (this does not mean it is legal to use, as it may be out of scope)." }, { "name": "initializer", "variables": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "integer" }], "definition": { "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "initializes", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" }, "description": "The most recent line before n that initializes x" }, { "name": "is_accessible", "variables": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "question_variables", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "initializes", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in_scope", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether variable x is initialized and still available by line n" }, { "name": "is_arbitrary", "variables": [{ "top_kind_name": "variable", "top_operator_name": "x", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "initializer", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "x", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'given'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, "description": "Whether variable x is arbitrary at line n" }, { "name": "is_proven", "variables": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "assumptions", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether there is a line before n that proves R (again, it may still be out of scope and thus unusable)." }, { "name": "prover", "variables": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "integer" }], "definition": { "top_operator_name": "max", "top_kind_name": "ranged_function", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "integer" }, "description": "The most recent line before n that proves R." }, { "name": "is_available", "variables": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "assumptions", "top_kind_name": "prefix_function", "arguments": [], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in_scope", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether R is available to use by line n" }, { "name": "yields_false", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'not_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'or_eliminate_false'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether line n proves a contradiction" }, { "name": "needs_false", "variables": [{ "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'contradiction_eliminate'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, "description": "Whether line n assumes a contradiction has been proved" }, { "name": "yields_implication", "variables": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "S", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "m", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "or", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "S", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "addition", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether line n is a proof of S under the assumption of R, made on line m" }, { "name": "yields_implies_false", "variables": [{ "top_kind_name": "variable", "top_operator_name": "R", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "m", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 0, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "yields_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "template", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "string" }, { "top_operator_name": "'assumption'", "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "string" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "is_in", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "R", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "results", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "set_of_formulas" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "addition", "top_kind_name": "binary_function", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": 1, "top_kind_name": "constant", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "m", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }, "description": "Whether line n is a proof of contradiction under the assumption of R, made on line m" }, { "name": "is_available_implication", "variables": [{ "top_kind_name": "variable", "top_operator_name": "A", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "B", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "yields_implication", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "B", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }, "description": "Whether there is a proof of B under the assumption of A available at line n" }, { "name": "is_available_implies_false", "variables": [{ "top_kind_name": "variable", "top_operator_name": "A", "arguments": [], "dummies": [] }, { "top_kind_name": "variable", "top_operator_name": "n", "arguments": [], "dummies": [] }], "typing": [{ "arguments": [{ "type": "formula", "arbitrarily_many": false }, { "type": "integer", "arbitrarily_many": false }], "dummies": [], "output": "boolean" }], "definition": { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "yields_implies_false", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "A", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "formula" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "not", "top_kind_name": "unary_connective", "arguments": [{ "top_operator_name": "bounded_exists", "top_kind_name": "bounded_quantifier", "arguments": [{ "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "and", "top_kind_name": "binary_connective", "arguments": [{ "top_operator_name": "greater_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }, { "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "k", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [], "type": "boolean" }, { "top_operator_name": "less_than_or_equals", "top_kind_name": "binary_relation", "arguments": [{ "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }, { "top_operator_name": "indentation", "top_kind_name": "prefix_function", "arguments": [{ "top_operator_name": "n", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "dummies": [], "type": "integer" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [], "type": "boolean" }], "dummies": [{ "top_operator_name": "i", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }], "dummies": [{ "top_operator_name": "j", "top_kind_name": "variable", "arguments": [], "dummies": [], "type": "integer" }], "type": "boolean" }, "description": "Whether there is a proof of contradiction under the assumption of A available at line n" }] };
// ^^Paste generated code above this line^^
exports.default = LOGIC_PROOF_DEFAULT_QUESTION_DATA;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/generatedParser.ts":
/*!*************************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/generatedParser.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var logicProofParser = (function () {
    /*
     * Generated by PEG.js 0.7.0.
     *
     * http://pegjs.majda.cz/
     */
    function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
        return '"' + s
            .replace(/\\/g, '\\\\') // backslash
            .replace(/"/g, '\\"') // closing quote character
            .replace(/\x08/g, '\\b') // backspace
            .replace(/\t/g, '\\t') // horizontal tab
            .replace(/\n/g, '\\n') // line feed
            .replace(/\f/g, '\\f') // form feed
            .replace(/\r/g, '\\r') // carriage return
            .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
            + '"';
    }
    var result = {
        /*
         * Parses the input with a generated parser. If the parsing is successfull,
         * returns a value explicitly or implicitly specified by the grammar from
         * which the parser was generated (see |PEG.buildParser|). If the parsing is
         * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
         */
        parse: function (input, startRule) {
            var parseFunctions = {
                "expressionTemplate": parse_expressionTemplate,
                "booleanTemplate": parse_booleanTemplate,
                "substitution": parse_substitution,
                "elementTemplate": parse_elementTemplate,
                "variableTemplate": parse_variableTemplate,
                "listOfBooleanTemplates": parse_listOfBooleanTemplates,
                "commaThenBooleanTemplate": parse_commaThenBooleanTemplate,
                "expressionTemplate2": parse_expressionTemplate2,
                "booleanTemplate2": parse_booleanTemplate2,
                "formulaLHS": parse_formulaLHS,
                "listOfVariables": parse_listOfVariables,
                "commaThenVariable": parse_commaThenVariable,
                "expression": parse_expression,
                "listOfExpressions": parse_listOfExpressions,
                "commaThenExpression": parse_commaThenExpression,
                "iffSymbol": parse_iffSymbol,
                "impliesSymbol": parse_impliesSymbol,
                "forAllSymbol": parse_forAllSymbol,
                "existsSymbol": parse_existsSymbol,
                "andSymbol": parse_andSymbol,
                "orSymbol": parse_orSymbol,
                "notSymbol": parse_notSymbol,
                "equalsSymbol": parse_equalsSymbol,
                "lessThanOrEqualsSymbol": parse_lessThanOrEqualsSymbol,
                "greaterThanOrEqualsSymbol": parse_greaterThanOrEqualsSymbol,
                "lessThanSymbol": parse_lessThanSymbol,
                "greaterThanSymbol": parse_greaterThanSymbol,
                "notEqualsSymbol": parse_notEqualsSymbol,
                "membershipSymbol": parse_membershipSymbol,
                "addition": parse_addition,
                "subtraction": parse_subtraction,
                "multiplication": parse_multiplication,
                "division": parse_division,
                "exponentiation": parse_exponentiation,
                "iffFormula": parse_iffFormula,
                "impliesFormula": parse_impliesFormula,
                "quantifierFormula": parse_quantifierFormula,
                "forAllFormula": parse_forAllFormula,
                "existsFormula": parse_existsFormula,
                "boundedForAllFormula": parse_boundedForAllFormula,
                "boundedExistsFormula": parse_boundedExistsFormula,
                "orFormula": parse_orFormula,
                "andFormula": parse_andFormula,
                "andRHS": parse_andRHS,
                "unaryFormula": parse_unaryFormula,
                "notFormula": parse_notFormula,
                "notRHS": parse_notRHS,
                "infixRelationFormula": parse_infixRelationFormula,
                "infixRelationName": parse_infixRelationName,
                "boundableInfixRelationName": parse_boundableInfixRelationName,
                "infixRelationRHS": parse_infixRelationRHS,
                "additionArgument": parse_additionArgument,
                "additionRHS": parse_additionRHS,
                "subtractionArgument": parse_subtractionArgument,
                "subtractionRHS": parse_subtractionRHS,
                "multiplicationArgument": parse_multiplicationArgument,
                "multiplicationRHS": parse_multiplicationRHS,
                "divisionArgument": parse_divisionArgument,
                "divisionRHS": parse_divisionRHS,
                "exponentiationArgument": parse_exponentiationArgument,
                "exponentiationRHS": parse_exponentiationRHS,
                "reducedArgument": parse_reducedArgument,
                "bracketExpression": parse_bracketExpression,
                "prefixFunction": parse_prefixFunction,
                "rangedFunction": parse_rangedFunction,
                "constant": parse_constant,
                "string": parse_string,
                "variable": parse_variable,
                "name": parse_name
            };
            if (startRule !== undefined) {
                if (parseFunctions[startRule] === undefined) {
                    throw new Error("Invalid rule name: " + quote(startRule) + ".");
                }
            }
            else {
                startRule = "expression";
            }
            var pos = 0;
            var reportFailures = 0;
            var rightmostFailuresPos = 0;
            var rightmostFailuresExpected = [];
            var cache = {};
            function padLeft(input, padding, length) {
                var result = input;
                var padLength = length - input.length;
                for (var i = 0; i < padLength; i++) {
                    result = padding + result;
                }
                return result;
            }
            function escape(ch) {
                var charCode = ch.charCodeAt(0);
                var escapeChar;
                var length;
                if (charCode <= 0xFF) {
                    escapeChar = 'x';
                    length = 2;
                }
                else {
                    escapeChar = 'u';
                    length = 4;
                }
                return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
            }
            function matchFailed(failure) {
                if (pos < rightmostFailuresPos) {
                    return;
                }
                if (pos > rightmostFailuresPos) {
                    rightmostFailuresPos = pos;
                    rightmostFailuresExpected = [];
                }
                rightmostFailuresExpected.push(failure);
            }
            function parse_expressionTemplate() {
                var cacheKey = "expressionTemplate@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_variableTemplate();
                if (result0 === null) {
                    result0 = parse_elementTemplate();
                    if (result0 === null) {
                        result0 = parse_booleanTemplate();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_booleanTemplate() {
                var cacheKey = "booleanTemplate@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_expression();
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_substitution();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_substitution();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, expression, subs) {
                        return {
                            expression: expression,
                            substitutions: subs,
                            type: 'boolean',
                        };
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_substitution() {
                var cacheKey = "substitution@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3, result4;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 91) {
                    result0 = "[";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"[\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        if (input.substr(pos, 2) === "->") {
                            result2 = "->";
                            pos += 2;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"->\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_expression();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos) === 93) {
                                    result4 = "]";
                                    pos++;
                                }
                                else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"]\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                }
                                else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, from, to) {
                        var output = {};
                        output[from.top_operator_name] = to;
                        return output;
                    })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_elementTemplate() {
                var cacheKey = "elementTemplate@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 2) === "{{") {
                    result0 = "{{";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"{{\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_additionArgument();
                    if (result1 !== null) {
                        if (input.substr(pos, 10) === "|element}}") {
                            result2 = "|element}}";
                            pos += 10;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"|element}}\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, element) {
                        return {
                            expression: element,
                            substitutions: [],
                            type: 'element',
                        };
                    })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_variableTemplate() {
                var cacheKey = "variableTemplate@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 2) === "{{") {
                    result0 = "{{";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"{{\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        if (input.substr(pos, 11) === "|variable}}") {
                            result2 = "|variable}}";
                            pos += 11;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"|variable}}\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, variable) {
                        return {
                            expression: variable,
                            substitutions: [],
                            type: 'element',
                            kind: 'variable'
                        };
                    })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_listOfBooleanTemplates() {
                var cacheKey = "listOfBooleanTemplates@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_booleanTemplate();
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_commaThenBooleanTemplate();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_commaThenBooleanTemplate();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av, avList) {
                        var result = (av === '') ? [] : [av];
                        for (var i = 0; i < avList.length; i++) {
                            result.push(avList[i]);
                        }
                        return result;
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_commaThenBooleanTemplate() {
                var cacheKey = "commaThenBooleanTemplate@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 44) {
                    result0 = ",";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_booleanTemplate();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av) { return av; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_expressionTemplate2() {
                var cacheKey = "expressionTemplate2@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_elementTemplate();
                if (result0 === null) {
                    result0 = parse_variableTemplate();
                    if (result0 === null) {
                        result0 = parse_booleanTemplate2();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_booleanTemplate2() {
                var cacheKey = "booleanTemplate2@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 2) === "{{") {
                    result0 = "{{";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"{{\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_expression();
                    if (result1 !== null) {
                        result2 = [];
                        result3 = parse_substitution();
                        while (result3 !== null) {
                            result2.push(result3);
                            result3 = parse_substitution();
                        }
                        if (result2 !== null) {
                            if (input.substr(pos, 2) === "}}") {
                                result3 = "}}";
                                pos += 2;
                            }
                            else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"}}\"");
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, expression, subs) {
                        return {
                            expression: expression,
                            substitutions: subs,
                            type: 'boolean',
                        };
                    })(pos0, result0[1], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_formulaLHS() {
                var cacheKey = "formulaLHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_name();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 40) {
                        result1 = "(";
                        pos++;
                    }
                    else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_listOfVariables();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                                result3 = ")";
                                pos++;
                            }
                            else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, name, args) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: name,
                            arguments: args,
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_listOfVariables() {
                var cacheKey = "listOfVariables@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_variable();
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_commaThenVariable();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_commaThenVariable();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av, avList) {
                        var result = (av === '') ? [] : [av];
                        for (var i = 0; i < avList.length; i++) {
                            result.push(avList[i]);
                        }
                        return result;
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_commaThenVariable() {
                var cacheKey = "commaThenVariable@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 44) {
                    result0 = ",";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av) { return av; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_expression() {
                var cacheKey = "expression@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                result0 = parse_iffFormula();
                if (result0 !== null) {
                    result0 = (function (offset, a) { return a; })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_listOfExpressions() {
                var cacheKey = "listOfExpressions@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_expression();
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_commaThenExpression();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_commaThenExpression();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av, avList) {
                        var result = (av === '') ? [] : [av];
                        for (var i = 0; i < avList.length; i++) {
                            result.push(avList[i]);
                        }
                        return result;
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_commaThenExpression() {
                var cacheKey = "commaThenExpression@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 44) {
                    result0 = ",";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_expression();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, av) { return av; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_iffSymbol() {
                var cacheKey = "iffSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.substr(pos, 3) === "<=>") {
                    result0 = "<=>";
                    pos += 3;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"<=>\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_impliesSymbol() {
                var cacheKey = "impliesSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.substr(pos, 2) === "=>") {
                    result0 = "=>";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"=>\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_forAllSymbol() {
                var cacheKey = "forAllSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 8704) {
                    result0 = "\u2200";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\u2200\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_existsSymbol() {
                var cacheKey = "existsSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 8707) {
                    result0 = "\u2203";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\u2203\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_andSymbol() {
                var cacheKey = "andSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 8743) {
                    result0 = "\u2227";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\u2227\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_orSymbol() {
                var cacheKey = "orSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 8744) {
                    result0 = "\u2228";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\u2228\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_notSymbol() {
                var cacheKey = "notSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 126) {
                    result0 = "~";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"~\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_equalsSymbol() {
                var cacheKey = "equalsSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.charCodeAt(pos) === 61) {
                    result0 = "=";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"=\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'equals'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_lessThanOrEqualsSymbol() {
                var cacheKey = "lessThanOrEqualsSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.substr(pos, 2) === "<=") {
                    result0 = "<=";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"<=\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'less_than_or_equals'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_greaterThanOrEqualsSymbol() {
                var cacheKey = "greaterThanOrEqualsSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.substr(pos, 2) === ">=") {
                    result0 = ">=";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\">=\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'greater_than_or_equals'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_lessThanSymbol() {
                var cacheKey = "lessThanSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.charCodeAt(pos) === 60) {
                    result0 = "<";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"<\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'less_than'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_greaterThanSymbol() {
                var cacheKey = "greaterThanSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.charCodeAt(pos) === 62) {
                    result0 = ">";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\">\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'greater_than'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_notEqualsSymbol() {
                var cacheKey = "notEqualsSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.substr(pos, 2) === "!=") {
                    result0 = "!=";
                    pos += 2;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"!=\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'not_equals'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_membershipSymbol() {
                var cacheKey = "membershipSymbol@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                if (input.charCodeAt(pos) === 8712) {
                    result0 = "\u2208";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\u2208\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) { return 'is_in'; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_addition() {
                var cacheKey = "addition@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 43) {
                    result0 = "+";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"+\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_subtraction() {
                var cacheKey = "subtraction@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 45) {
                    result0 = "-";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"-\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_multiplication() {
                var cacheKey = "multiplication@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 42) {
                    result0 = "*";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"*\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_division() {
                var cacheKey = "division@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 47) {
                    result0 = "/";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"/\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_exponentiation() {
                var cacheKey = "exponentiation@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                if (input.charCodeAt(pos) === 94) {
                    result0 = "^";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"^\"");
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_iffFormula() {
                var cacheKey = "iffFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_impliesFormula();
                if (result0 !== null) {
                    result1 = parse_iffSymbol();
                    if (result1 !== null) {
                        result2 = parse_iffFormula();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_connective',
                            top_operator_name: 'iff',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_impliesFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_impliesFormula() {
                var cacheKey = "impliesFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_quantifierFormula();
                if (result0 !== null) {
                    result1 = parse_impliesSymbol();
                    if (result1 !== null) {
                        result2 = parse_impliesFormula();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_connective',
                            top_operator_name: 'implies',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_quantifierFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_quantifierFormula() {
                var cacheKey = "quantifierFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_orFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_forAllFormula() {
                var cacheKey = "forAllFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_forAllSymbol();
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 46) {
                            result2 = ".";
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\".\"");
                            }
                        }
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            result3 = parse_quantifierFormula();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'quantifier',
                            top_operator_name: 'for_all',
                            arguments: [right],
                            dummies: [left]
                        };
                    })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_existsFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_existsFormula() {
                var cacheKey = "existsFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_existsSymbol();
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 46) {
                            result2 = ".";
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\".\"");
                            }
                        }
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            result3 = parse_quantifierFormula();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'quantifier',
                            top_operator_name: 'exists',
                            arguments: [right],
                            dummies: [left]
                        };
                    })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_boundedForAllFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_boundedForAllFormula() {
                var cacheKey = "boundedForAllFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_forAllSymbol();
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        result2 = parse_boundableInfixRelationName();
                        if (result2 !== null) {
                            result3 = parse_additionArgument();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos) === 46) {
                                    result4 = ".";
                                    pos++;
                                }
                                else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\".\"");
                                    }
                                }
                                result4 = result4 !== null ? result4 : "";
                                if (result4 !== null) {
                                    result5 = parse_quantifierFormula();
                                    if (result5 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5];
                                    }
                                    else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                }
                                else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, k, relation, n, A) {
                        return {
                            top_kind_name: 'bounded_quantifier',
                            top_operator_name: 'bounded_for_all',
                            arguments: [{
                                    top_kind_name: 'binary_relation',
                                    top_operator_name: relation,
                                    arguments: [k, n],
                                    dummies: []
                                }, A],
                            dummies: [k]
                        };
                    })(pos0, result0[1], result0[2], result0[3], result0[5]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_boundedExistsFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_boundedExistsFormula() {
                var cacheKey = "boundedExistsFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_existsSymbol();
                if (result0 !== null) {
                    result1 = parse_variable();
                    if (result1 !== null) {
                        result2 = parse_boundableInfixRelationName();
                        if (result2 !== null) {
                            result3 = parse_additionArgument();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos) === 46) {
                                    result4 = ".";
                                    pos++;
                                }
                                else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\".\"");
                                    }
                                }
                                result4 = result4 !== null ? result4 : "";
                                if (result4 !== null) {
                                    result5 = parse_quantifierFormula();
                                    if (result5 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5];
                                    }
                                    else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                }
                                else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, k, relation, n, A) {
                        return {
                            top_kind_name: 'bounded_quantifier',
                            top_operator_name: 'bounded_exists',
                            arguments: [{
                                    top_kind_name: 'binary_relation',
                                    top_operator_name: relation,
                                    arguments: [k, n],
                                    dummies: []
                                }, A],
                            dummies: [k]
                        };
                    })(pos0, result0[1], result0[2], result0[3], result0[5]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_orFormula() {
                var cacheKey = "orFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_andFormula();
                if (result0 !== null) {
                    result1 = parse_orSymbol();
                    if (result1 !== null) {
                        result2 = parse_quantifierFormula();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_connective',
                            top_operator_name: 'or',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_andFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_andFormula() {
                var cacheKey = "andFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_unaryFormula();
                if (result0 !== null) {
                    result1 = parse_andSymbol();
                    if (result1 !== null) {
                        result2 = parse_andRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_connective',
                            top_operator_name: 'and',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_unaryFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_andRHS() {
                var cacheKey = "andRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_andFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_unaryFormula() {
                var cacheKey = "unaryFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_notFormula();
                if (result0 === null) {
                    result0 = parse_infixRelationFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_notFormula() {
                var cacheKey = "notFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_notSymbol();
                if (result0 !== null) {
                    result1 = parse_notRHS();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, right) {
                        return {
                            top_kind_name: 'unary_connective',
                            top_operator_name: 'not',
                            arguments: [right],
                            dummies: []
                        };
                    })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_notRHS() {
                var cacheKey = "notRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_unaryFormula();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_infixRelationFormula() {
                var cacheKey = "infixRelationFormula@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_additionArgument();
                if (result0 !== null) {
                    result1 = parse_infixRelationName();
                    if (result1 !== null) {
                        result2 = parse_infixRelationRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, name, right) {
                        return {
                            top_kind_name: 'binary_relation',
                            top_operator_name: name,
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[1], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_additionArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_infixRelationName() {
                var cacheKey = "infixRelationName@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_equalsSymbol();
                if (result0 === null) {
                    result0 = parse_lessThanOrEqualsSymbol();
                    if (result0 === null) {
                        result0 = parse_greaterThanOrEqualsSymbol();
                        if (result0 === null) {
                            result0 = parse_lessThanSymbol();
                            if (result0 === null) {
                                result0 = parse_greaterThanSymbol();
                                if (result0 === null) {
                                    result0 = parse_notEqualsSymbol();
                                    if (result0 === null) {
                                        result0 = parse_membershipSymbol();
                                    }
                                }
                            }
                        }
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_boundableInfixRelationName() {
                var cacheKey = "boundableInfixRelationName@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_lessThanOrEqualsSymbol();
                if (result0 === null) {
                    result0 = parse_lessThanSymbol();
                    if (result0 === null) {
                        result0 = parse_membershipSymbol();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_infixRelationRHS() {
                var cacheKey = "infixRelationRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_infixRelationFormula();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_additionArgument() {
                var cacheKey = "additionArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_subtractionArgument();
                if (result0 !== null) {
                    result1 = parse_addition();
                    if (result1 !== null) {
                        result2 = parse_additionRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: 'addition',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_subtractionArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_additionRHS() {
                var cacheKey = "additionRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_additionArgument();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_subtractionArgument() {
                var cacheKey = "subtractionArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_multiplicationArgument();
                if (result0 !== null) {
                    result1 = parse_subtraction();
                    if (result1 !== null) {
                        result2 = parse_subtractionRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: 'subtraction',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_multiplicationArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_subtractionRHS() {
                var cacheKey = "subtractionRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_subtractionArgument();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_multiplicationArgument() {
                var cacheKey = "multiplicationArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_divisionArgument();
                if (result0 !== null) {
                    result1 = parse_multiplication();
                    if (result1 !== null) {
                        result2 = parse_multiplicationRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: 'multiplication',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_divisionArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_multiplicationRHS() {
                var cacheKey = "multiplicationRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_multiplicationArgument();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_divisionArgument() {
                var cacheKey = "divisionArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_exponentiationArgument();
                if (result0 !== null) {
                    result1 = parse_division();
                    if (result1 !== null) {
                        result2 = parse_divisionRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: 'division',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_exponentiationArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_divisionRHS() {
                var cacheKey = "divisionRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_divisionArgument();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_exponentiationArgument() {
                var cacheKey = "exponentiationArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_reducedArgument();
                if (result0 !== null) {
                    result1 = parse_exponentiation();
                    if (result1 !== null) {
                        result2 = parse_exponentiationRHS();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, left, right) {
                        return {
                            top_kind_name: 'binary_function',
                            top_operator_name: 'exponentiation',
                            arguments: [left, right],
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_reducedArgument();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_exponentiationRHS() {
                var cacheKey = "exponentiationRHS@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_forAllFormula();
                if (result0 === null) {
                    result0 = parse_notFormula();
                    if (result0 === null) {
                        result0 = parse_exponentiationArgument();
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_reducedArgument() {
                var cacheKey = "reducedArgument@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                result0 = parse_bracketExpression();
                if (result0 === null) {
                    result0 = parse_prefixFunction();
                    if (result0 === null) {
                        result0 = parse_constant();
                        if (result0 === null) {
                            result0 = parse_variable();
                        }
                    }
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_bracketExpression() {
                var cacheKey = "bracketExpression@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 40) {
                    result0 = "(";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"(\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_expression();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 41) {
                            result2 = ")";
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\")\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, e) { return e; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_prefixFunction() {
                var cacheKey = "prefixFunction@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_name();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 40) {
                        result1 = "(";
                        pos++;
                    }
                    else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_listOfExpressions();
                        if (result2 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                                result3 = ")";
                                pos++;
                            }
                            else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, name, args) {
                        return {
                            top_kind_name: 'prefix_function',
                            top_operator_name: name,
                            arguments: args,
                            dummies: []
                        };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_rangedFunction();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_rangedFunction() {
                var cacheKey = "rangedFunction@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2, result3, result4, result5, result6, result7;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                result0 = parse_name();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 123) {
                        result1 = "{";
                        pos++;
                    }
                    else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"{\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_variable();
                        if (result2 !== null) {
                            result3 = parse_boundableInfixRelationName();
                            if (result3 !== null) {
                                result4 = parse_additionArgument();
                                if (result4 !== null) {
                                    if (input.charCodeAt(pos) === 124) {
                                        result5 = "|";
                                        pos++;
                                    }
                                    else {
                                        result5 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"|\"");
                                        }
                                    }
                                    if (result5 !== null) {
                                        result6 = parse_expression();
                                        if (result6 !== null) {
                                            if (input.charCodeAt(pos) === 125) {
                                                result7 = "}";
                                                pos++;
                                            }
                                            else {
                                                result7 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"}\"");
                                                }
                                            }
                                            if (result7 !== null) {
                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                            }
                                            else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        }
                                        else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    }
                                    else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                }
                                else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            }
                            else {
                                result0 = null;
                                pos = pos1;
                            }
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, name, k, relation, n, A) {
                        return {
                            top_kind_name: 'ranged_function',
                            top_operator_name: name,
                            arguments: [{
                                    top_kind_name: 'binary_relation',
                                    top_operator_name: relation,
                                    arguments: [k, n],
                                    dummies: []
                                }, A],
                            dummies: [k]
                        };
                    })(pos0, result0[0], result0[2], result0[3], result0[4], result0[6]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_constant() {
                var cacheKey = "constant@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1;
                var pos0;
                pos0 = pos;
                if (/^[0-9]/.test(input.charAt(pos))) {
                    result1 = input.charAt(pos);
                    pos++;
                }
                else {
                    result1 = null;
                    if (reportFailures === 0) {
                        matchFailed("[0-9]");
                    }
                }
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        if (/^[0-9]/.test(input.charAt(pos))) {
                            result1 = input.charAt(pos);
                            pos++;
                        }
                        else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[0-9]");
                            }
                        }
                    }
                }
                else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result0 = (function (offset, digits) {
                        return {
                            top_kind_name: 'constant',
                            top_operator_name: parseInt(digits.join(""), 10),
                            arguments: [],
                            dummies: [],
                            type: 'integer'
                        };
                    })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_string();
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_string() {
                var cacheKey = "string@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 39) {
                    result0 = "'";
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"'\"");
                    }
                }
                if (result0 !== null) {
                    result1 = [];
                    if (/^[a-zA-Z0-9_]/.test(input.charAt(pos))) {
                        result2 = input.charAt(pos);
                        pos++;
                    }
                    else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[a-zA-Z0-9_]");
                        }
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        if (/^[a-zA-Z0-9_]/.test(input.charAt(pos))) {
                            result2 = input.charAt(pos);
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[a-zA-Z0-9_]");
                            }
                        }
                    }
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 39) {
                            result2 = "'";
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"'\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        }
                        else {
                            result0 = null;
                            pos = pos1;
                        }
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, characters) {
                        return {
                            top_kind_name: 'constant',
                            top_operator_name: '\'' + characters.join('') + '\'',
                            arguments: [],
                            dummies: [],
                            type: 'string'
                        };
                    })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_variable() {
                var cacheKey = "variable@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0;
                var pos0;
                pos0 = pos;
                result0 = parse_name();
                if (result0 !== null) {
                    result0 = (function (offset, name) {
                        return {
                            top_kind_name: 'variable',
                            top_operator_name: name,
                            arguments: [],
                            dummies: []
                        };
                    })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function parse_name() {
                var cacheKey = "name@" + pos;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = cachedResult.nextPos;
                    return cachedResult.result;
                }
                var result0, result1, result2;
                var pos0, pos1;
                pos0 = pos;
                pos1 = pos;
                if (/^[A-Za-z]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                }
                else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[A-Za-z]");
                    }
                }
                if (result0 !== null) {
                    result1 = [];
                    if (/^[A-Za-z0-9_]/.test(input.charAt(pos))) {
                        result2 = input.charAt(pos);
                        pos++;
                    }
                    else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[A-Za-z0-9_]");
                        }
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        if (/^[A-Za-z0-9_]/.test(input.charAt(pos))) {
                            result2 = input.charAt(pos);
                            pos++;
                        }
                        else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[A-Za-z0-9_]");
                            }
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    }
                    else {
                        result0 = null;
                        pos = pos1;
                    }
                }
                else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, first, middle) {
                        return first + middle.join('');
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                cache[cacheKey] = {
                    nextPos: pos,
                    result: result0
                };
                return result0;
            }
            function cleanupExpected(expected) {
                expected.sort();
                var lastExpected = null;
                var cleanExpected = [];
                for (var i = 0; i < expected.length; i++) {
                    if (expected[i] !== lastExpected) {
                        cleanExpected.push(expected[i]);
                        lastExpected = expected[i];
                    }
                }
                return cleanExpected;
            }
            function computeErrorPosition() {
                /*
                 * The first idea was to use |String.split| to break the input up to the
                 * error position along newlines and derive the line and column from
                 * there. However IE's |split| implementation is so broken that it was
                 * enough to prevent it.
                 */
                var line = 1;
                var column = 1;
                var seenCR = false;
                for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
                    var ch = input.charAt(i);
                    if (ch === "\n") {
                        if (!seenCR) {
                            line++;
                        }
                        column = 1;
                        seenCR = false;
                    }
                    else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        line++;
                        column = 1;
                        seenCR = true;
                    }
                    else {
                        column++;
                        seenCR = false;
                    }
                }
                return { line: line, column: column };
            }
            var result = parseFunctions[startRule]();
            /*
             * The parser is now in one of the following three states:
             *
             * 1. The parser successfully parsed the whole input.
             *
             *    - |result !== null|
             *    - |pos === input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 2. The parser successfully parsed only a part of the input.
             *
             *    - |result !== null|
             *    - |pos < input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 3. The parser did not successfully parse any part of the input.
             *
             *   - |result === null|
             *   - |pos === 0|
             *   - |rightmostFailuresExpected| contains at least one failure
             *
             * All code following this comment (including called functions) must
             * handle these states.
             */
            if (result === null || pos !== input.length) {
                var offset = Math.max(pos, rightmostFailuresPos);
                var found = offset < input.length ? input.charAt(offset) : null;
                var errorPosition = computeErrorPosition();
                throw new this.SyntaxError(cleanupExpected(rightmostFailuresExpected), found, offset, errorPosition.line, errorPosition.column);
            }
            return result;
        },
        /* Returns the parser source code. */
        toSource: function () { return this._source; },
        SyntaxError: null
    };
    /* Thrown when a parser encounters a syntax error. */
    result.SyntaxError = function (expected, found, offset, line, column) {
        function buildMessage(expected, found) {
            var expectedHumanized, foundHumanized;
            switch (expected.length) {
                case 0:
                    expectedHumanized = "end of input";
                    break;
                case 1:
                    expectedHumanized = expected[0];
                    break;
                default:
                    expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                        + " or "
                        + expected[expected.length - 1];
            }
            foundHumanized = found ? quote(found) : "end of input";
            return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }
        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
    };
    result.SyntaxError.prototype = Error.prototype;
    return result;
})();
exports.default = logicProofParser;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/shared.ts":
/*!****************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/shared.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Components used by both the editor and reader of the
 *  LogicProof interaction.
 */
var generatedParser_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/generatedParser.ts */ "./extensions/interactions/LogicProof/static/js/generatedParser.ts"));
var logicProofShared = (function () {
    // Used by parseLineString() to limit the number of possible parsings of a
    // line (or line template) considered.
    var MAX_NUM_PARSINGS_PERMITTED = 1000;
    // Used by assignTypesToExpressionArray() to limit the number of possible
    // typings of an expression considered.
    var MAX_NUM_TYPINGS_PERMITTED = 1000;
    // ERROR-HANDLING
    // UserErrors have codes that refer to entries in the errorDictionary (which
    // is either logicProofData.BASE_GENERAL_MESSAGES or
    // logicProofTeacher.TEACHER_ERROR_MESSAGES), from which a human-readable
    // message can be constructed.
    var UserError = function (code, parameters) {
        this.name = 'UserError';
        this.code = code;
        this.parameters = parameters || {};
    };
    // These errors already have messages which are user-readable.
    var PreRenderedUserError = function (messages, code) {
        this.name = 'PreRenderedUserError';
        this.messages = messages;
        this.code = code;
    };
    // TODO(Jacob): Make these errors prototype from Error()
    /** Converts a message template into a string to show to the user.
     * @param messageTemplate: a GeneralMessageTemplate object that determines how
     * to build the string describing an error.
     * @param parameterFormats: a dictionary of GeneralMessageParameters, which
     *        specify the format of the parameter in question (e.g. 'string').
     * @param parameters: a dictionary giving the values of the parameters for
     *        this particular instance of the message.
     * @param language: the relevant Language.
     * @result a user-readable string.
     */
    var renderGeneralMessage = function (messageTemplate, parameterFormats, parameters, language) {
        var message = '';
        for (var i = 0; i < messageTemplate.length; i++) {
            if (messageTemplate[i].isFixed) {
                message += messageTemplate[i].content;
            }
            else {
                var parameterFormat = parameterFormats[messageTemplate[i].content].format;
                var parameter = parameters[messageTemplate[i].content];
                switch (parameterFormat) {
                    case 'string':
                        message += parameter;
                        break;
                    case 'expression':
                        message += displayExpression(parameter, language.operators);
                        break;
                    default:
                        throw Error('Unknown format ' + parameterFormat +
                            ' sent to renderGeneralMessage().');
                }
            }
        }
        return message;
    };
    /**
     * @param {UserError} error - a UserError object
     * @param {object} errorDictionary - a dictionary keyed by error codes for
     *        each of which it provides a description of possible ways to display
     *        the error to the user, one of which will be chosen at random.
     * @param {Language} language - the relevant Language
     * @return {string} A string to show to the user describing what went wrong.
     */
    var renderError = function (error, errorDictionary, language) {
        if (error.name === 'UserError') {
            if (!errorDictionary.hasOwnProperty(error.code)) {
                throw new Error('Unknown error code ' + error.code + ' sent to renderError().');
            }
            var messageTemplates = errorDictionary[error.code].templates;
            var messageTemplate = messageTemplates[Math.floor((Math.random() * messageTemplates.length))];
            return renderGeneralMessage(messageTemplate, errorDictionary[error.code].parameters, error.parameters, language);
        }
        else if (error.name === 'PreRenderedUserError') {
            return error.messages[Math.floor((Math.random() * error.messages.length))];
        }
        else {
            throw error;
        }
    };
    // DISPLAY
    /**
     * @param {Expression} expression - an Expression, which is to be displayed
     * @param {object} operators - provides the symbols keys of the operators so
     *        that we we know e.g. 'for_all' should be displayed using '@'.
     * @return {string} A string representing the expression that can be shown to
     *        the user.
     */
    var displayExpression = function (expression, operators) {
        return displayExpressionHelper(expression, operators, 0);
    };
    /**
     * Recursive helper for displayExpression().
     *
     * @param {Expression} expression - an Expression, which is to be displayed
     * @param {object} operators - provides the symbols keys of the operators so
     *        that we we know e.g. 'for_all' should be displayed using '@'.
     * @param {int} desirabilityOfBrackets - used internally to determine whether
     *        to surround the formula with brackets.
     * @return {string} A string representing the expression.
     */
    var displayExpressionHelper = function (expression, operators, desirabilityOfBrackets) {
        if (desirabilityOfBrackets === void 0) { desirabilityOfBrackets = 0; }
        var desirabilityOfBracketsBelow = (expression.top_kind_name === 'binary_connective' ||
            expression.top_kind_name === 'binary_relation' ||
            expression.top_kind_name === 'binary_function') ? 2 : (expression.top_kind_name === 'unary_connective' ||
            expression.top_kind_name === 'quantifier') ? 1 : 0;
        var processedArguments = [];
        var processedDummies = [];
        for (var i = 0; i < expression.arguments.length; i++) {
            processedArguments.push(displayExpressionHelper(expression.arguments[i], operators, desirabilityOfBracketsBelow));
        }
        for (var i = 0; i < expression.dummies.length; i++) {
            processedDummies.push(displayExpressionHelper(expression.dummies[i], operators, desirabilityOfBracketsBelow));
        }
        var symbol = (!operators.hasOwnProperty(expression.top_operator_name)) ?
            expression.top_operator_name :
            (!operators[expression.top_operator_name].hasOwnProperty('symbols')) ?
                expression.top_operator_name :
                operators[expression.top_operator_name].symbols[0];
        var output = null;
        if (expression.top_kind_name === 'binary_connective' ||
            expression.top_kind_name === 'binary_relation' ||
            expression.top_kind_name === 'binary_function') {
            return (desirabilityOfBrackets > 0 ?
                '(' + processedArguments.join(symbol) + ')' :
                processedArguments.join(symbol));
        }
        else if (expression.top_kind_name === 'unary_connective') {
            output = symbol + processedArguments[0];
            return (desirabilityOfBrackets === 2) ? '(' + output + ')' : output;
        }
        else if (expression.top_kind_name === 'quantifier') {
            output = symbol + processedDummies[0] + '.' + processedArguments[0];
            return (desirabilityOfBrackets === 2) ? '(' + output + ')' : output;
        }
        else if (expression.top_kind_name === 'bounded_quantifier') {
            output = symbol + processedArguments[0] + '.' + processedArguments[1];
            return (desirabilityOfBrackets === 2) ? '(' + output + ')' : output;
        }
        else if (expression.top_kind_name === 'prefix_relation' ||
            expression.top_kind_name === 'prefix_function') {
            return symbol + '(' + processedArguments.join(',') + ')';
        }
        else if (expression.top_kind_name === 'ranged_function') {
            return (symbol + '{' + processedArguments[0] + ' | ' + processedArguments[1] +
                '}');
        }
        else if (expression.top_kind_name === 'atom' ||
            expression.top_kind_name === 'constant' ||
            expression.top_kind_name === 'variable') {
            return symbol;
        }
        else {
            throw Error('Unknown kind ' + expression.top_kind_name +
                ' sent to displayExpression()');
        }
    };
    var displayExpressionArray = function (expressionArray, operators) {
        var processedArray = [];
        for (var i = 0; i < expressionArray.length; i++) {
            processedArray.push(displayExpressionHelper(expressionArray[i], operators));
        }
        return processedArray.join(', ');
    };
    // PARSING
    /**
     * This function checks whether the string contains any symbol that occurs
     * in a member of the symbols key for some operator (these will be
     * symbols such as ∀, =, <).
     * @param {string} string - contains the characters we check
     * @param {object} operators - a dictionary of Operator objects
     * @param {boolean} isTemplate - denotes that the string represents a line
     *        template (which may have substitutions) and not just a line.
     * @return {boolean} true or false
     */
    var containsLogicalCharacter = function (string, operators, isTemplate) {
        var GENERAL_LOGICAL_CHARACTERS = '(),';
        var TEMPLATE_LOGICAL_CHARACTERS = '[->]{|}';
        if (containsCharacterFromArray(string, GENERAL_LOGICAL_CHARACTERS)) {
            return true;
        }
        if (isTemplate &&
            containsCharacterFromArray(string, TEMPLATE_LOGICAL_CHARACTERS)) {
            return true;
        }
        for (var key in operators) {
            if (operators[key].hasOwnProperty('symbols')) {
                for (var i = 0; i < operators[key].symbols.length; i++) {
                    // We check each character of a multi-character symbol in turn.
                    for (var j = 0; j < operators[key].symbols[i].length; j++) {
                        if (string.indexOf(operators[key].symbols[i][j]) !== -1) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    };
    /**
     * This function strips whitespace from within expressions, whilst using the
     * whitespace between expressions to split a line into an array of word /
     * expression strings.
     *  e.g. 'from p and q we have p ∧ q' will be converted to ['from', 'p',
     *   'and', 'q', 'we', 'have', 'p∧q'].
     * @param {string} inputString - the string from which whitespace is to be
     *        stripped.
     * @param {object} operators - a dictionary of the Operator objects usable in
     *        the line
     * @param {boolean} isTemplate - denotes that the string represents a line
     *        template (which may have substitutions) and not just a line.
     * @return {Array} A non-empty array of words and expressions (as strings).
     * @throws if the line is blank or contains an unknown character.
     */
    var preParseLineString = function (inputString, operators, isTemplate) {
        // The logical characters that may occur at the start and end of a formula
        // respectively. The unicode characters are 'for all' and 'exists'.
        var POSSIBLE_START_CHARS = '({\u2200\u2203~';
        var POSSIBLE_END_CHARS = ')}]';
        var POSSIBLE_NAME_CHARS = ('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 _');
        var _absorbsSpacesToTheLeft = function (character) {
            return containsLogicalCharacter(character, operators, isTemplate) &&
                !containsCharacter(POSSIBLE_START_CHARS, character);
        };
        var _absorbsSpacesToTheRight = function (character) {
            return (containsLogicalCharacter(character, operators, isTemplate) &&
                !containsCharacter(POSSIBLE_END_CHARS, character)) ||
                character === ' ';
        };
        var _isLegalCharacter = function (character) {
            return containsCharacter(POSSIBLE_NAME_CHARS, character) ||
                containsLogicalCharacter(character, operators, isTemplate);
        };
        var strippedString = '';
        for (var i = 0; i < inputString.length; i++) {
            if (!_isLegalCharacter(inputString[i])) {
                throw new UserError('illegal_symbol', {
                    symbol: inputString[i]
                });
            }
            // We keep all non-spaces, and all spaces that are absorbed neither by
            // characters to their left nor their right.
            if (inputString[i] !== ' ' ||
                (i === 0 || !_absorbsSpacesToTheRight(strippedString[strippedString.length - 1])) &&
                    (i === inputString.length - 1 || !_absorbsSpacesToTheLeft(inputString[i + 1]))) {
                strippedString += inputString[i];
            }
        }
        if (strippedString.replace(/ /g, '') === '') {
            throw new UserError('blank_line', {});
        }
        return strippedString.trim().split(' ');
    };
    /**
     * @param {string} inputString - written by the user - we will parse it.
     * @param {object} operators - the relevant operators, which are just needed
     *        for their symbols so we can identify whether the symbols the user
     *        is using are legitimate.
     * @param {object} vocabulary - a dictionary whose keys are phrases such as
     *        'have' whose entries are arrays of possible ways to write each
     *        phrase, for example ['have', 'we have']. We will attempt to match
     *        sections of the inputString to the ways of writing each phrase.
     * @param {boolean} isTemplate - if true, we parse the input as a
     *        LineTemplate; otherwise we parse it as a Line.
     * @return {*} A LineTemplate.reader_view if isTemplate === true, and a
     *         ProtoLine if isTemplate === false.
     * @throws If a section of the string cannot be identified as either a phrase
     *         or an expression then we throw an error that tries to best identify
     *         what the user intended and did wrong.
     */
    var parseLineString = function (inputString, operators, vocabulary, isTemplate) {
        if (isTemplate === void 0) { isTemplate = false; }
        var unparsedArray = preParseLineString(inputString, operators, isTemplate);
        // We compile all words occurring in the vocabulary, to help us identify
        // them in lines.
        var vocabularyWords = [];
        for (var key in vocabulary) {
            for (var i = 0; i < vocabulary[key].length; i++) {
                for (var j = 0; j < vocabulary[key][i].split(' ').length; j++) {
                    if (vocabularyWords.indexOf(vocabulary[key][i].split(' ')[j]) === -1) {
                        vocabularyWords.push(vocabulary[key][i].split(' ')[j]);
                    }
                }
            }
        }
        // The lth entry in this array will contain all parsings of the first
        // l-many elements of the unparsedArray.
        var partiallyParsedArrays = [[[]]];
        for (var i = 1; i <= unparsedArray.length; i++) {
            partiallyParsedArrays.push([]);
        }
        for (var i = 0; i < unparsedArray.length; i++) {
            // We have parsed the first i-many entries in the given unparsedArray,
            // and will now attempt to parse the next one.
            // This will only occur in pathological cases
            if (partiallyParsedArrays[i].length > MAX_NUM_PARSINGS_PERMITTED) {
                throw new UserError('too_many_parsings', {});
            }
            for (var j = i + 1; j <= unparsedArray.length; j++) {
                for (var key in vocabulary) {
                    for (var k = 0; k < vocabulary[key].length; k++) {
                        if (unparsedArray.slice(i, j).join(' ').toLowerCase() ===
                            vocabulary[key][k]) {
                            // We have identified the next (j-i)-many words together form a
                            // phrase in the vocabulary dictionary.
                            for (var l = 0; l < partiallyParsedArrays[i].length; l++) {
                                partiallyParsedArrays[j].push(partiallyParsedArrays[i][l].concat([{
                                        format: 'phrase',
                                        content: key
                                    }]));
                            }
                        }
                    }
                }
            }
            // If something is a known word then we do not attempt to parse it as an
            // expression. This is because any word can be regarded as an expression
            // (as a single atom) so otherwise we would end up with a large number of
            // spurious parsings. The exception is single-character words, because
            // e.g. 'a' could reasonably be either a word or the name of an atom.
            if (unparsedArray[i].length === 1 ||
                vocabularyWords.indexOf(unparsedArray[i].toLowerCase()) === -1) {
                // We attempt to parse this entry as an expression / expression template
                try {
                    var expression = generatedParser_ts_1.default.parse(unparsedArray[i], isTemplate ? 'expressionTemplate' : 'expression');
                    for (var j = 0; j < partiallyParsedArrays[i].length; j++) {
                        // We do not allow a line to have two expressions in a row. This is
                        // to allow the identification of typos: For example if the user
                        // types 'fron p∧q ...' then otherwise we would think that both
                        // 'fron' and 'p∧q' are expressions. We also do not attempt to
                        // parse a word as an expression if it is a vocabulary word, to
                        // avoid masses of silly attempts to parse the line.
                        if (i === 0 ||
                            partiallyParsedArrays[i][j][partiallyParsedArrays[i][j].length - 1].format === 'phrase') {
                            partiallyParsedArrays[i + 1].push(partiallyParsedArrays[i][j].concat([{
                                    format: 'expression',
                                    content: expression
                                }]));
                        }
                    }
                }
                catch (err) { }
            }
        }
        if (partiallyParsedArrays[unparsedArray.length].length > 0) {
            // We have succeeded in fully parsing
            return partiallyParsedArrays[unparsedArray.length];
        }
        else {
            // We identify the best attempts
            for (var i = unparsedArray.length; i >= 0; i--) {
                if (partiallyParsedArrays[i].length > 0) {
                    var numEntriesMatched = i;
                    break;
                }
            }
            // We return a description of the problem, based on one of the best
            // attempts.
            // NOTE: This is not guaranteed to correctly identify the mistake the
            // user made. It could do with improvement based on user feedback.
            // containsLogicalCharacter is used to guess if something is an
            // expression, but it is not always correct because expressions may
            // consist only of letters.
            var bestAttempt = partiallyParsedArrays[numEntriesMatched][0];
            if (numEntriesMatched === 0 ||
                bestAttempt[bestAttempt.length - 1].format === 'phrase') {
                var word = unparsedArray[numEntriesMatched];
                throw (vocabularyWords.indexOf(word) !== -1) ?
                    new UserError('unidentified_phrase_starting_at', {
                        word: word
                    }) :
                    new UserError('unidentified_word', {
                        word: word
                    });
            }
            else {
                var word1 = unparsedArray[numEntriesMatched - 1];
                var word2 = unparsedArray[numEntriesMatched];
                if (vocabularyWords.indexOf(word1) !== -1) {
                    throw new UserError('unidentified_phrase_starting_at', {
                        word: word1
                    });
                }
                else if (containsLogicalCharacter(word1, operators, isTemplate)) {
                    throw (vocabularyWords.indexOf(word2) !== -1) ?
                        new UserError('unidentified_phrase_starting_at', {
                            word: word2
                        }) :
                        containsLogicalCharacter(word2, operators, isTemplate) ?
                            new UserError('consecutive_expressions', {
                                word1: word1,
                                word2: word2
                            }) :
                            new UserError('unidentified_word', {
                                word: word2
                            });
                }
                else {
                    throw (vocabularyWords.indexOf(word2) !== -1) ?
                        new UserError('unidentified_phrase_starting_at', {
                            word: word2
                        }) :
                        containsLogicalCharacter(word2, operators, isTemplate) ?
                            new UserError('unidentified_word', {
                                word: word1
                            }) :
                            new UserError('unidentified_words', {
                                word1: word1,
                                word2: word2
                            });
                }
            }
        }
    };
    // TYPING ASSIGNMENT
    /**
     * This takes an array of TypingElements and converts it into an array of
     * types.
     * @param {Array.<Object>} types - an array of dictionaries of the form {
     *               type: the name of an available type ('boolean' or 'element')
     *               arbitrarily_many: boolean
     *            }
     *          where at most one member can have 'arbitrarily_many' set to
     *          true, signifying that any number of arguments of this type
     *          can occur here.
     * @param {int} desiredLength - the number of entries we would like to have.
     * @returns {array} an array of types with the right number of entries,
     *          derived from 'types'.
     * @throws if this is not possible.
     */
    var instantiateTypingElementArray = function (types, desiredLength) {
        var listOfTypes = [];
        for (var i = 0; i < types.length; i++) {
            listOfTypes.push(types[i].type);
            if (types[i].arbitrarily_many) {
                var indexWithArbitrarilyMany = i;
            }
        }
        if (indexWithArbitrarilyMany === undefined) {
            if (types.length === desiredLength) {
                return listOfTypes;
            }
            else {
                throw new UserError('wrong_num_inputs', {
                    num_needed: desiredLength
                });
            }
        }
        else {
            var output = [];
            if (types.length <= desiredLength + 1) {
                for (var i = 0; i < types.length; i++) {
                    if (i === indexWithArbitrarilyMany) {
                        for (var j = 0; j < desiredLength - types.length + 1; j++) {
                            output.push(listOfTypes[indexWithArbitrarilyMany]);
                        }
                    }
                    else {
                        output.push(listOfTypes[i]);
                    }
                }
                return output;
            }
            else {
                throw new UserError('not_enough_inputs', {
                    num_needed: desiredLength
                });
            }
        }
    };
    /**
     * This takes an (untyped) Expression, usually provided by the parser, and
     * returns a TypedExpression in which types have been added at each level.
     * @param {Expression} untypedExpression - the expression to be typed
     * @param {Array} possibleTopTypes - an array of types that the expression as
     *        a whole could have - each will be tried in turn.
     * @param {Language} language - the relevant language
     * @param {Array} newKindsPermitted - an array of kinds (e.g. 'variable',
     *        'constant') of which the user is allowed to create new operators.
     *        Any operator with a kind not in this list and that does not already
     *        occur in the language will cause an error.
     * @param {boolean} permitDuplicateDummyNames - if true the user can write
     *        e.g. ∀x.p even if x is already in use; if false they cannot.
     * @return {array} An array of dictionaries of the form: {
     *           typedExpression: A TypedExpression
     *           operators: the given language.operatorss together with any new
     *             operators that occurred in the expression.
     * @throws If a valid typing cannot be found this function will throw a
     *         UserError. The parameters of this error will contain an additional
     *         key 'amountTyped' that determines where the error occurred. e.g.
     *         [1,2,0] would indicate that there was a problem at the 0th input
     *         (dummy or argument) of the 2nd input of the 1st input of this
     *         expression. We return the typing attempt for which this  value is
     *         largest (in lexicographic ordering) as this is likely to be closest
     *         to what the user intended.
     */
    var assignTypesToExpression = function (untypedExpression, possibleTopTypes, language, newKindsPermitted, permitDuplicateDummyNames) {
        if (newKindsPermitted === void 0) { newKindsPermitted = ['constant', 'variable']; }
        if (permitDuplicateDummyNames === void 0) { permitDuplicateDummyNames = false; }
        var operators = language.operators;
        var _attemptTyping = function (topType, typingRule) {
            if (!operatorIsNew &&
                untypedExpression.top_kind_name !==
                    operators[untypedExpression.top_operator_name].kind) {
                throw new UserError('wrong_kind', {
                    operator: untypedExpression.top_operator_name,
                    expected_kind: operators[untypedExpression.top_operator_name].kind,
                    actual_kind: untypedExpression.top_kind_name,
                    amount_typed: []
                });
            }
            if (topType !== typingRule.output) {
                throw new UserError('wrong_type', {
                    operator: untypedExpression.top_operator_name,
                    expected_type: topType,
                    actual_type: typingRule.output,
                    amount_typed: []
                });
            }
            var _isNumber = function (n) {
                return !isNaN(parseFloat(n)) && isFinite(n);
            };
            var _isString = function (s) {
                return s[0] === '\'' && s[s.length - 1] === '\'';
            };
            if (language.types.hasOwnProperty('integer') &&
                _isNumber(untypedExpression.top_operator_name) &&
                untypedExpression.top_kind_name === 'constant' &&
                topType !== 'integer') {
                throw new UserError('wrong_type', {
                    operator: untypedExpression.top_operator_name,
                    expected_type: topType,
                    actual_type: 'integer',
                    amount_typed: []
                });
            }
            if (language.types.hasOwnProperty('string') &&
                _isString(untypedExpression.top_operator_name) &&
                untypedExpression.top_kind_name === 'constant' &&
                topType !== 'string') {
                throw new UserError('wrong_type', {
                    operator: untypedExpression.top_operator_name,
                    expected_type: topType,
                    actual_type: 'string',
                    amount_typed: []
                });
            }
            try {
                var argumentTypes = instantiateTypingElementArray(typingRule.arguments, untypedExpression.arguments.length);
            }
            catch (err) {
                err.parameters.operator = untypedExpression.top_operator_name;
                err.parameters.input_category = 'arguments';
                err.parameters.amount_typed = [];
                throw err;
            }
            try {
                var dummyTypes = instantiateTypingElementArray(typingRule.dummies, untypedExpression.dummies.length);
            }
            catch (err) {
                err.parameters.operator = untypedExpression.top_operator_name;
                err.parameters.input_category = 'dummies';
                err.parameters.amount_typed = [];
                throw err;
            }
            var updatedOperators = {};
            for (var key in operators) {
                updatedOperators[key] = operators[key];
            }
            if (operatorIsNew) {
                var _decorateTypes = function (types) {
                    var decoratedTypes = [];
                    for (var k = 0; k < types.length; k++) {
                        decoratedTypes.push({
                            type: types[k],
                            arbitrarily_many: false
                        });
                    }
                    return decoratedTypes;
                };
                updatedOperators[untypedExpression.top_operator_name] = {
                    kind: untypedExpression.top_kind_name,
                    typing: [{
                            arguments: _decorateTypes(argumentTypes),
                            dummies: _decorateTypes(dummyTypes),
                            output: topType
                        }]
                };
            }
            for (var n = 0; n < untypedExpression.dummies.length; n++) {
                if (!permitDuplicateDummyNames &&
                    updatedOperators.hasOwnProperty(untypedExpression.dummies[n].top_operator_name)) {
                    throw new UserError('duplicate_dummy_name', {
                        dummy: untypedExpression.dummies[n],
                        expression: untypedExpression,
                        amount_typed: []
                    });
                }
                else if (untypedExpression.dummies[n].top_kind_name !== 'variable') {
                    // The parser does not currently permit this to happen
                    throw new UserError('dummy_not_variable', {
                        dummy: untypedExpression.dummies[n],
                        expression: untypedExpression,
                        amount_typed: []
                    });
                }
            }
            return assignTypesToExpressionArray(untypedExpression.dummies.concat(untypedExpression.arguments), dummyTypes.concat(argumentTypes), {
                operators: updatedOperators,
                kinds: language.kinds,
                types: language.types
            }, newKindsPermitted, permitDuplicateDummyNames, untypedExpression.dummies.length);
        };
        var operatorIsNew = false;
        if (!operators.hasOwnProperty(untypedExpression.top_operator_name)) {
            if (newKindsPermitted.indexOf(untypedExpression.top_kind_name) === -1) {
                throw new UserError('unknown_operator', {
                    operator: untypedExpression.top_operator_name,
                    amount_typed: []
                });
            }
            else {
                operatorIsNew = true;
            }
        }
        var typingRules = (operatorIsNew) ?
            language.kinds[untypedExpression.top_kind_name].typing :
            operators[untypedExpression.top_operator_name].typing;
        var results = [];
        for (var i = 0; i < possibleTopTypes.length; i++) {
            for (var j = 0; j < typingRules.length; j++) {
                try {
                    var newAttempts = _attemptTyping(possibleTopTypes[i], typingRules[j]);
                    for (var k = 0; k < newAttempts.length; k++) {
                        var typedDummies = [];
                        for (var l = 0; l < untypedExpression.dummies.length; l++) {
                            typedDummies.push(newAttempts[k].typedArray[l]);
                            // These dummy variables should not be available outside this
                            // part of the untypedExpression.
                            if (!operators.hasOwnProperty(untypedExpression.dummies[l].top_operator_name)) {
                                delete newAttempts[k].operators[untypedExpression.dummies[l].top_operator_name];
                            }
                        }
                        var typedArguments = [];
                        for (var m = untypedExpression.dummies.length; m < untypedExpression.dummies.length +
                            untypedExpression.arguments.length; m++) {
                            typedArguments.push(newAttempts[k].typedArray[m]);
                        }
                        results.push({
                            typedExpression: {
                                top_operator_name: untypedExpression.top_operator_name,
                                top_kind_name: untypedExpression.top_kind_name,
                                arguments: typedArguments,
                                dummies: typedDummies,
                                type: possibleTopTypes[i]
                            },
                            operators: newAttempts[k].operators
                        });
                    }
                }
                catch (err) {
                    if (bestAttemptSoFar !== undefined &&
                        !bestAttemptSoFar.hasOwnProperty('parameters')) {
                        throw bestAttemptSoFar;
                    }
                    if (bestAttemptSoFar === undefined ||
                        greaterThanInLex(err.parameters.amount_typed, bestAttemptSoFar.parameters.amount_typed)) {
                        var bestAttemptSoFar = err;
                    }
                }
            }
        }
        if (results.length > 0) {
            return results;
        }
        else {
            throw bestAttemptSoFar;
        }
    };
    /** Companion function to assignTypesToExpression, with the following
     * modifications:
     * @param untypedArray: an array of expressions to type
     *  @param topTypes: an array of types that the expressions in the array must
     *        have (only one option for each).
     * @numDummies: the number of elements in the array (from the start) that are
     *              dummies rather than arguments.
     * @result: {
     *            typedArray: an array of TypedExpressions
     *            operators: the updated list of operators
     *          }
     * @raises: as before
     */
    var assignTypesToExpressionArray = function (untypedArray, topTypes, language, newKindsPermitted, isTemplate, numDummies) {
        if (newKindsPermitted === void 0) { newKindsPermitted = ['constant', 'variable']; }
        if (isTemplate === void 0) { isTemplate = false; }
        if (numDummies === void 0) { numDummies = 0; }
        var partiallyTypedArrays = [[[]]];
        var partiallyUpdatedOperators = [[{}]];
        for (var key in language.operators) {
            partiallyUpdatedOperators[0][0][key] = language.operators[key];
        }
        for (var i = 1; i <= untypedArray.length; i++) {
            partiallyTypedArrays.push([]);
            partiallyUpdatedOperators.push([]);
        }
        for (var i = 0; i < untypedArray.length; i++) {
            // This will only happen in pathological cases.
            if (partiallyTypedArrays[i].length > MAX_NUM_TYPINGS_PERMITTED) {
                throw new UserError('too_many_typings', {});
            }
            for (var j = 0; j < partiallyTypedArrays[i].length; j++) {
                // Dummies are always allowed to have previously unseen names
                var newKindsPermittedHere = (i < numDummies) ?
                    newKindsPermitted.concat(['variable']) :
                    newKindsPermitted;
                try {
                    var newResults = assignTypesToExpression(untypedArray[i], [topTypes[i]], {
                        operators: partiallyUpdatedOperators[i][j],
                        kinds: language.kinds,
                        types: language.types
                    }, newKindsPermittedHere, isTemplate);
                    for (var k = 0; k < newResults.length; k++) {
                        partiallyTypedArrays[i + 1].push(partiallyTypedArrays[i][j].concat([
                            newResults[k].typedExpression
                        ]));
                        partiallyUpdatedOperators[i + 1].push(newResults[k].operators);
                    }
                }
                catch (err) {
                    if (!err.hasOwnProperty('parameters')) {
                        throw err;
                    }
                    var amountTyped = [i].concat(err.parameters.amount_typed);
                    if (bestAttemptSoFar === undefined ||
                        greaterThanInLex(amountTyped, bestAttemptSoFar.parameters.amount_typed)) {
                        err.parameters.amount_typed = amountTyped;
                        var bestAttemptSoFar = err;
                    }
                }
            }
        }
        var fullyTypedArrays = partiallyTypedArrays[untypedArray.length];
        var fullyUpdatedOperatorss = partiallyUpdatedOperators[untypedArray.length];
        if (fullyTypedArrays.length > 0) {
            var result = [];
            for (var i = 0; i < fullyTypedArrays.length; i++) {
                result.push({
                    typedArray: fullyTypedArrays[i],
                    operators: fullyUpdatedOperatorss[i]
                });
            }
            return result;
        }
        else {
            throw bestAttemptSoFar;
        }
    };
    // UTILITIES
    // Expressions with different dummy variables are considered different
    var checkExpressionsAreEqual = function (expression1, expression2) {
        if (expression1.top_kind_name !== expression2.top_kind_name ||
            expression1.top_operator_name !== expression2.top_operator_name ||
            expression1.arguments.length !== expression2.arguments.length ||
            expression1.dummies.length !== expression2.dummies.length) {
            return false;
        }
        if (expression1.hasOwnProperty('type')) {
            if (expression1.type !== expression2.type) {
                return false;
            }
        }
        for (var i = 0; i < expression1.arguments.length + expression1.dummies.length; i++) {
            if (!checkExpressionsAreEqual((expression1.arguments.concat(expression1.dummies))[i], (expression2.arguments.concat(expression2.dummies))[i])) {
                return false;
            }
        }
        return true;
    };
    var checkExpressionIsInSet = function (expression, set) {
        for (var i = 0; i < set.length; i++) {
            if (checkExpressionsAreEqual(expression, set[i])) {
                return true;
            }
        }
        return false;
    };
    var checkSetsOfExpressionsAreEqual = function (set1, set2) {
        for (var i = 0; i < set1.length; i++) {
            if (!checkExpressionIsInSet(set1[i], set2)) {
                return false;
            }
        }
        for (var i = 0; i < set2.length; i++) {
            if (!checkExpressionIsInSet(set2[i], set1)) {
                return false;
            }
        }
        return true;
    };
    // Returns a list of all the names of operators in an expression. kinds is an
    // array specifying which kinds of operators to return; if it is not supplied
    // then all are returned
    var getOperatorsFromExpression = function (expression, kinds) {
        if (kinds === void 0) { kinds = null; }
        var output = getOperatorsFromExpressionArray(expression.arguments.concat(expression.dummies), kinds);
        return (output.indexOf(expression.top_operator_name) === -1 &&
            (kinds === null || kinds.indexOf(expression.top_kind_name) !== -1)) ?
            output.concat([expression.top_operator_name]) :
            output;
    };
    var getOperatorsFromExpressionArray = function (array, kinds) {
        if (kinds === void 0) { kinds = null; }
        var output = [];
        for (var i = 0; i < array.length; i++) {
            var newOutput = getOperatorsFromExpression(array[i], kinds);
            for (var j = 0; j < newOutput.length; j++) {
                if (output.indexOf(newOutput[j]) === -1) {
                    output = output.concat([newOutput[j]]);
                }
            }
        }
        return output;
    };
    // The expression should be typed; returns the type of operator (or throws an
    // error if not found). Does not check for inconsistent typing.
    // NOTE: treats dummy variables like free ones.
    var seekTypeInExpression = function (expression, operator) {
        return operator === expression.top_operator_name ? expression.type :
            seekTypeInExpressionArray(expression.arguments.concat(expression.dummies), operator);
    };
    var seekTypeInExpressionArray = function (array, operator) {
        for (var i = 0; i < array.length; i++) {
            try {
                return seekTypeInExpression(array[i], operator);
            }
            catch (err) { }
        }
        throw UserError('unknown_typing_error', {
            array: array
        });
    };
    // Returns whether LHS is larger than RHS in lexicographic ordering
    var greaterThanInLex = function (LHS, RHS) {
        for (var i = 0; i < LHS.length; i++) {
            if (i >= RHS.length) {
                return true;
            }
            else if (LHS[i] > RHS[i]) {
                return true;
            }
            else if (LHS[i] < RHS[i]) {
                return false;
            }
        }
        return false;
    };
    // Checks if the string contains the character
    var containsCharacter = function (string, character) {
        return (string.indexOf(character) !== -1);
    };
    // Checks if the string contains some character from the array
    var containsCharacterFromArray = function (string, array) {
        for (var i = 0; i < array.length; i++) {
            if (string.indexOf(array[i]) !== -1) {
                return true;
            }
        }
        return false;
    };
    return {
        UserError: UserError,
        PreRenderedUserError: PreRenderedUserError,
        renderError: renderError,
        displayExpression: displayExpression,
        displayExpressionArray: displayExpressionArray,
        preParseLineString: preParseLineString,
        parseLineString: parseLineString,
        instantiateTypingElementArray: instantiateTypingElementArray,
        assignTypesToExpression: assignTypesToExpression,
        assignTypesToExpressionArray: assignTypesToExpressionArray,
        checkExpressionsAreEqual: checkExpressionsAreEqual,
        checkExpressionIsInSet: checkExpressionIsInSet,
        checkSetsOfExpressionsAreEqual: checkSetsOfExpressionsAreEqual,
        getOperatorsFromExpression: getOperatorsFromExpression,
        getOperatorsFromExpressionArray: getOperatorsFromExpressionArray,
        seekTypeInExpression: seekTypeInExpression,
        greaterThanInLex: greaterThanInLex
    };
})();
exports.default = logicProofShared;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/student.ts":
/*!*****************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/student.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Components used by the LogicProof interaction reader.
 */
var shared_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/shared.ts */ "./extensions/interactions/LogicProof/static/js/shared.ts"));
var data_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/data.ts */ "./extensions/interactions/LogicProof/static/js/data.ts"));
var logicProofStudent = (function () {
    // BUILD INSTANCE
    // These evaluation rules must all return an object of their specified output
    // type (boolean, integer, string, formula or set_of_formulas) or throw an
    // error with message 'evaluation failed'. They will be used by evaluate()
    // when computing the value of an expression that contains these operators.
    // Evaluation strictness: if an error occurs at any point in a computation
    // then the entire computation will return an error; so for example
    // true||error evaluates as error rather than true. The exceptions to this
    // are bounded quantification and ranged functions; for these we will
    // evaluate until we reach an answer and then return without computing any
    // later values. So for example min{x<n|A(x)} where ~A(1)=false, A(2)=true
    // and A(3)=error will return true rather than error. The default control
    // functions rely heavily on this functionality and will need to be rewritten
    // if it is changed.
    var BASE_CONTROL_MODEL = {
        evaluation_rules: {
            and: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    for (var i = 0; i < args.length; i++) {
                        if (!args[i]) {
                            return false;
                        }
                    }
                    return true;
                }
            },
            or: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    for (var i = 0; i < args.length; i++) {
                        if (args[i]) {
                            return true;
                        }
                    }
                    return false;
                }
            },
            not: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return !args[0];
                }
            },
            implies: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return !args[0] || args[1];
                }
            },
            iff: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return (args[0] && args[1]) || (!args[0] && !args[1]);
                }
            },
            equals: {
                format: 'bottom_up',
                evaluateExpression: function (args, types) {
                    return (types[0] === 'formula') ?
                        shared_ts_1.default.checkExpressionsAreEqual(args[0], args[1]) :
                        (args[0].type === 'set_of_formulas') ?
                            shared_ts_1.default.checkSetsOfExpressionsAreEqual(args[0], args[1]) :
                            (args[0] === args[1]);
                }
            },
            not_equals: {
                format: 'bottom_up',
                evaluateExpression: function (args, types) {
                    return (types[0] === 'formula') ?
                        !shared_ts_1.default.checkExpressionsAreEqual(args[0], args[1]) :
                        (args[0].type === 'set_of_formulas') ?
                            !shared_ts_1.default.checkSetsOfExpressionsAreEqual(args[0], args[1]) :
                            (args[0] !== args[1]);
                }
            },
            less_than: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return (args[0] < args[1]);
                }
            },
            less_than_or_equals: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return (args[0] <= args[1]);
                }
            },
            greater_than: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return (args[0] > args[1]);
                }
            },
            greater_than_or_equals: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return (args[0] >= args[1]);
                }
            },
            is_in: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return shared_ts_1.default.checkExpressionIsInSet(args[0], args[1]);
                }
            },
            addition: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return args[0] + args[1];
                }
            },
            subtraction: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return args[0] - args[1];
                }
            },
            multiplication: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return args[0] * args[1];
                }
            },
            division: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return args[0] / args[1];
                }
            },
            exponentiation: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return args[0] ^ args[1];
                }
            },
            bounded_for_all: {
                format: 'top_down',
                evaluateExpression: function (expression, inputs, model, evaluationParameters, cache) {
                    var newInputs = {};
                    for (var key in inputs) {
                        newInputs[key] = inputs[key];
                    }
                    var bounder = evaluate(expression.arguments[0].arguments[1], inputs, model, evaluationParameters, cache);
                    if (expression.arguments[0].arguments[0].type === 'integer') {
                        var rangeEnd = (expression.arguments[0].top_operator_name === 'less_than') ?
                            bounder :
                            bounder + 1;
                        for (var i = 1; i < rangeEnd; i++) {
                            newInputs[expression.dummies[0].top_operator_name] = i;
                            if (!evaluate(expression.arguments[1], newInputs, model, evaluationParameters, cache)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    else {
                        // Here, the bounder is a set_of_formulas (so an array).
                        for (var i = 0; i < bounder.length; i++) {
                            newInputs[expression.dummies[0].top_operator_name] = bounder[i];
                            if (!evaluate(expression.arguments[1], newInputs, model, evaluationParameters, cache)) {
                                return false;
                            }
                        }
                        return true;
                    }
                }
            },
            bounded_exists: {
                format: 'top_down',
                evaluateExpression: function (expression, inputs, model, evaluationParameters, cache) {
                    var newInputs = {};
                    for (var key in inputs) {
                        newInputs[key] = inputs[key];
                    }
                    var bounder = evaluate(expression.arguments[0].arguments[1], inputs, model, evaluationParameters, cache);
                    if (expression.arguments[0].arguments[0].type === 'integer') {
                        var rangeEnd = (expression.arguments[0].top_operator_name === 'less_than') ?
                            bounder :
                            bounder + 1;
                        for (var i = 1; i < rangeEnd; i++) {
                            newInputs[expression.dummies[0].top_operator_name] = i;
                            if (evaluate(expression.arguments[1], newInputs, model, evaluationParameters, cache)) {
                                return true;
                            }
                        }
                        return false;
                    }
                    else {
                        // Here, the bounder is a set_of_formulas (so an array).
                        for (var i = 0; i < bounder.length; i++) {
                            newInputs[expression.dummies[0].top_operator_name] = bounder[i];
                            if (evaluate(expression.arguments[1], newInputs, model, evaluationParameters, cache)) {
                                return true;
                            }
                        }
                        return false;
                    }
                }
            },
            // Note that min{k<n|A(k)} will range over [1,..,n-1], throwing an error
            // if no match is found.
            // min{p∈antecedents(n)|A(p)} will range over antecedents(n), throwing
            // an error if no match is found.
            min: {
                format: 'top_down',
                evaluateExpression: function (expression, inputs, model, evaluationParameters, cache) {
                    var newInputs = {};
                    for (var key in inputs) {
                        newInputs[key] = inputs[key];
                    }
                    var bounder = evaluate(expression.arguments[0].arguments[1], inputs, model, evaluationParameters, cache);
                    if (expression.arguments[0].arguments[0].type === 'integer') {
                        var rangeEnd = (expression.arguments[0].top_operator_name === 'less_than') ?
                            bounder :
                            bounder + 1;
                        for (var i = 1; i < rangeEnd; i++) {
                            newInputs[expression.dummies[0].top_operator_name] = i;
                            if (evaluate(expression.arguments[1], newInputs, model, evaluationParameters, cache)) {
                                return i;
                            }
                        }
                        throw new Error('evaluation failed');
                    }
                    else {
                        for (var i = 0; i < bounder.length; i++) {
                            newInputs[expression.dummies[0].top_operator_name] = bounder[i];
                            if (evaluate(expression.arguments[1], newInputs, model, evaluationParameters, cache)) {
                                return bounder[i];
                            }
                        }
                        throw new Error('evaluation failed');
                    }
                }
            },
            max: {
                format: 'top_down',
                evaluateExpression: function (expression, inputs, model, evaluationParameters, cache) {
                    var newInputs = {};
                    for (var key in inputs) {
                        newInputs[key] = inputs[key];
                    }
                    var bounder = evaluate(expression.arguments[0].arguments[1], inputs, model, evaluationParameters, cache);
                    if (expression.arguments[0].arguments[0].type === 'integer') {
                        var rangeEnd = (expression.arguments[0].top_operator_name === 'less_than') ?
                            bounder :
                            bounder + 1;
                        for (var i = rangeEnd - 1; i > 0; i--) {
                            newInputs[expression.dummies[0].top_operator_name] = i;
                            if (evaluate(expression.arguments[1], newInputs, model, evaluationParameters, cache)) {
                                return i;
                            }
                        }
                        throw new Error('evaluation failed');
                    }
                    else {
                        for (var i = bounder.length - 1; i >= 0; i--) {
                            newInputs[expression.dummies[0].top_operator_name] = bounder[i];
                            if (evaluate(expression.arguments[1], newInputs, model, evaluationParameters, cache)) {
                                return bounder[i];
                            }
                        }
                        throw new Error('evaluation failed');
                    }
                }
            },
            // We subtract one for these because for the user proof lines are indexed
            // from 1.
            indentation: {
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    var line = evaluationParameters.proof.lines[args[0] - 1];
                    if (line === undefined) {
                        throw new Error('evaluation failed');
                    }
                    return line.indentation;
                }
            },
            template: {
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    var line = evaluationParameters.proof.lines[args[0] - 1];
                    if (line === undefined) {
                        throw new Error('evaluation failed');
                    }
                    return '\'' + line.template_name + '\'';
                }
            },
            antecedents: {
                // NOTE: assumes antecedents are given as formulas, not integers
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    var line = evaluationParameters.proof.lines[args[0] - 1];
                    if (line === undefined) {
                        throw new Error('evaluation failed');
                    }
                    var result = [];
                    for (var i = 0; i < line.antecedents.length; i++) {
                        result.push(line.antecedents[i].content);
                    }
                    return result;
                }
            },
            results: {
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    var line = evaluationParameters.proof.lines[args[0] - 1];
                    if (line === undefined) {
                        throw new Error('evaluation failed');
                    }
                    return line.results;
                }
            },
            variables: {
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    var line = evaluationParameters.proof.lines[args[0] - 1];
                    if (line === undefined) {
                        throw new Error('evaluation failed');
                    }
                    return line.variables;
                }
            },
            text: {
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    var line = evaluationParameters.proof.lines[args[0] - 1];
                    if (line === undefined) {
                        throw new Error('evaluation failed');
                    }
                    return line.text;
                }
            },
            element: {
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    // The name of the element is provided as a string such as \'R\', so
                    // we must strip the quotes.
                    var element = args[0].substr(1, args[0].length - 2);
                    var line = evaluationParameters.proof.lines[args[1] - 1];
                    if (line === undefined) {
                        throw new Error('evaluation failed');
                    }
                    var result = line.matchings[element];
                    if (result === undefined) {
                        throw new Error('evaluation failed');
                    }
                    return result;
                }
            },
            num_lines: {
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    return evaluationParameters.proof.lines.length;
                }
            },
            assumptions: {
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    return evaluationParameters.assumptions;
                }
            },
            target: {
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    return evaluationParameters.target;
                }
            },
            question_variables: {
                format: 'bottom_up',
                evaluateExpression: function (args, types, evaluationParameters) {
                    var names = shared_ts_1.default.getOperatorsFromExpressionArray(evaluationParameters.assumptions.concat([evaluationParameters.target]), ['variable']);
                    // This gives us the variables as strings, we convert them to
                    // expressions.
                    var result = [];
                    for (var i = 0; i < names.length; i++) {
                        result.push({
                            top_kind_name: 'variable',
                            top_operator_name: names[i],
                            args: [],
                            dummies: []
                        });
                    }
                    return result;
                }
            },
            entry: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    var result = args[1][args[0] - 1];
                    if (result === undefined) {
                        throw new Error('evaluation failed');
                    }
                    return result;
                }
            },
            // eslint-disable-next-line quote-props
            'if': {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    return args[0] ? args[1] : args[2];
                }
            },
            substitute: {
                format: 'bottom_up',
                evaluateExpression: function (args) {
                    var substitutions = {};
                    substitutions[args[1].top_operator_name] = args[2];
                    return substituteIntoExpression(args[0], substitutions);
                }
            }
        }
    };
    /**
     * This function is run when the state is loaded, it is top-level.
     * @param {Object} questionData - The information from the teacher specifying
     *        the question - this will be one of the keys of the interaction's
     *        customization_args.
     * @return {Object} A QuestionInstance object that will be used to build and
     *        check proofs from the student.
     */
    var buildInstance = function (questionData) {
        var evaluationRules = angular.copy(BASE_CONTROL_MODEL.evaluation_rules);
        var controlOperators = angular.copy(data_ts_1.default.BASE_CONTROL_LANGUAGE.operators);
        // NOTE: the javascript fails if we try to omit this function and define
        // evaluateExpression() directly inside the for loop. See
        // http://jslinterrors.com/dont-make-functions-within-a-loop
        var makeEvaluateExpression = function (definition, variables) {
            return function (expression, inputs, model, evaluationParameters, cache) {
                var argumentValues = {};
                for (var i = 0; i < variables.length; i++) {
                    argumentValues[variables[i].top_operator_name] = evaluate(expression.arguments[i], inputs, model, evaluationParameters, cache);
                }
                return evaluate(definition, argumentValues, model, evaluationParameters, cache);
            };
        };
        for (var i = 0; i < questionData.control_functions.length; i++) {
            evaluationRules[questionData.control_functions[i].name] = {
                format: 'definition',
                evaluateExpression: makeEvaluateExpression(questionData.control_functions[i].definition, questionData.control_functions[i].variables)
            };
            controlOperators[questionData.control_functions[i].name] = {
                kind: 'prefix_function',
                typing: questionData.control_functions[i].typing
            };
        }
        return {
            assumptions: questionData.assumptions,
            results: questionData.results,
            language: {
                types: data_ts_1.default.BASE_STUDENT_LANGUAGE.types,
                kinds: data_ts_1.default.BASE_STUDENT_LANGUAGE.kinds,
                operators: questionData.language.operators
            },
            line_templates: questionData.line_templates,
            vocabulary: questionData.vocabulary,
            general_messages: questionData.general_messages,
            mistake_table: questionData.mistake_table,
            control_language: {
                types: data_ts_1.default.BASE_CONTROL_LANGUAGE.types,
                kinds: data_ts_1.default.BASE_CONTROL_LANGUAGE.kinds,
                operators: controlOperators
            },
            control_model: {
                evaluation_rules: evaluationRules
            }
        };
    };
    // BUILD PROOF
    /**
     * This function identifies a way in which the expression is an instance of
     * template, or throws an error if it is not. Examples:
     * - A(x)∧t, p∧q, {} will return {p: A(x), q:t}
     * - A(x)∧t, p∧q, {q: s} will throw an error
     * - ∃y.R(y), ∃x.p, {} will return {x:y, p: R(y)} as dummies also matched
     * Only variables in the template can be matched to arbitrary expressions in
     * the expression; e.g. r∨s is not an instance of p∧q because ∧ is not a
     * variable and so needs to be matched exactly.
     * @param {Expression} expression - an Expression, which is to be matched
     * @param {Expression} template - the Expression against which we will match
     * @param {object} oldMatchings - variables potentially in the template whose
     *        corresponding sub-expressions in the expression we have previously
     *        identified.
     * @return {Object} a dictionary extending oldElements, that for new
     *   operators in template gives the corresponding operator in expression.
     * @throws If the expression cannot be viewed as an instance of the template.
     */
    var matchExpression = function (expression, template, oldMatchings) {
        var matchings = {};
        for (var key in oldMatchings) {
            matchings[key] = oldMatchings[key];
        }
        if (template.top_kind_name === 'variable') {
            if (oldMatchings.hasOwnProperty(template.top_operator_name)) {
                if (shared_ts_1.default.checkExpressionsAreEqual(expression, oldMatchings[template.top_operator_name])) {
                    return matchings;
                }
                else {
                    throw new shared_ts_1.default.UserError('unmatched_line', {});
                }
            }
            else {
                matchings[template.top_operator_name] = expression;
                return matchings;
            }
        }
        else if (expression.top_operator_name !== template.top_operator_name ||
            expression.top_kind_name !== template.top_kind_name ||
            expression.arguments.length !== template.arguments.length ||
            expression.dummies.length !== template.dummies.length) {
            throw new shared_ts_1.default.UserError('unmatched_line', {});
        }
        else {
            // For matching purposes arguments and dummies are equivalent
            var subExpressions = expression.arguments.concat(expression.dummies);
            var subTemplates = template.arguments.concat(template.dummies);
            return matchExpressionArray(subExpressions, subTemplates, matchings);
        }
    };
    // Companion of matchExpression.
    var matchExpressionArray = function (array, templateArray, matchings) {
        for (var i = 0; i < array.length; i++) {
            matchings = matchExpression(array[i], templateArray[i], matchings);
        }
        return matchings;
    };
    /**
     * @param {Expression} expression - an Expression into which we are
     *   substituting, e.g. x=y
     * @param {Object} substitutions - a dictionary of {string: Expression}
     *   specifying the substitions to perform (simultaneously), e.g
     *   {x:2, y:a+b}
     * @return {Expression} the substituted Expression, e.g. 2=a+b
     */
    var substituteIntoExpression = function (expression, substitutions) {
        // We ignore substitutions for dummy variables.
        var newSubstitutions = {};
        for (var key in substitutions) {
            var isDummy = false;
            for (var i = 0; i < expression.dummies.length; i++) {
                if (expression.dummies[i].top_operator_name === key) {
                    isDummy = true;
                }
            }
            if (!isDummy) {
                newSubstitutions[key] = substitutions[key];
            }
        }
        if (substitutions.hasOwnProperty(expression.top_operator_name)) {
            return substitutions[expression.top_operator_name];
        }
        else {
            return {
                top_operator_name: expression.top_operator_name,
                top_kind_name: expression.top_kind_name,
                arguments: substituteIntoExpressionArray(expression.arguments, newSubstitutions),
                dummies: substituteIntoExpressionArray(expression.dummies, newSubstitutions)
            };
        }
    };
    // Companion to substituteIntoExpression.
    var substituteIntoExpressionArray = function (array, substitutions) {
        var output = [];
        for (var i = 0; i < array.length; i++) {
            output.push(substituteIntoExpression(array[i], substitutions));
        }
        return output;
    };
    // Replaces all operators from expression (including dummies) that appear in
    // the dictionary 'matchings' with their values in matchings.
    var instantiateExpression = function (expression, matchings) {
        if (matchings.hasOwnProperty(expression.top_operator_name)) {
            return matchings[expression.top_operator_name];
        }
        else {
            var output = {
                top_operator_name: expression.top_operator_name,
                top_kind_name: expression.top_kind_name,
                arguments: instantiateExpressionArray(expression.arguments, matchings),
                dummies: instantiateExpressionArray(expression.dummies, matchings)
            };
            return output;
        }
    };
    var instantiateExpressionArray = function (array, matchings) {
        var output = [];
        for (var i = 0; i < array.length; i++) {
            output.push(instantiateExpression(array[i], matchings));
        }
        return output;
    };
    /**
     * @param {ExpressionTemplate} template - an ExpressionTemplate
     * @param {Object} matchings - a dictionary of {string: Expression}
     * @return {Expression}
     */
    var computeExpressionFromTemplate = function (template, matchings) {
        // E.g. template represents p[x -> a] and matchings represents
        // {p: A(y), x: y, a: 2}
        var newExpression = instantiateExpression(template.expression, matchings);
        var newSubstitutions = [];
        for (var i = 0; i < template.substitutions.length; i++) {
            var substitution = {};
            for (var key in template.substitutions[i]) {
                substitution[matchings[key].top_operator_name] = instantiateExpression(template.substitutions[i][key], matchings);
            }
            newSubstitutions.push(substitution);
        }
        // E.g. now new_expression is A(y) and new_subsitutions represents [y -> 2]
        for (var i = 0; i < newSubstitutions.length; i++) {
            newExpression = substituteIntoExpression(newExpression, newSubstitutions[i]);
        }
        return newExpression;
        // E.g. result is A(2)
    };
    var computeExpressionsFromTemplateArray = function (templateArray, matchings) {
        var output = [];
        for (var i = 0; i < templateArray.length; i++) {
            output.push(computeExpressionFromTemplate(templateArray[i], matchings));
        }
        return output;
    };
    /**
     * @param {Array.<LineMessages>} messages - an array of LineMessages, each of
     *        which describes the mistake the student has made by writing this
     *        sort of line.
     * @param {string} templateName - the name of the LineTemplate from which the
     *        messages come.
     * @param {object} matchings - a {string: Expression} dictionary deduced from
     *        comparing the line the student actually wrote to the LineTemplate
     *        provided by the techer of which it is an instance.
     * @param {object} operators - from the student Language and used for display
     *        purposes.
     * @throws This function throws a logicProofShared.UserError (with the
     *         'pre-rendered' code) that contains an array of strings describing
     *         the error, one of which will be chosen later to show to the
     *         student. If the messages list is empty (signifying that the line
     *         in question is a correct one) we do nothing.
     */
    var throwLineMessages = function (messages, templateName, matchings, operators) {
        if (messages.length > 0) {
            var renderedMessages = [];
            for (var i = 0; i < messages.length; i++) {
                renderedMessages.push('');
                for (var j = 0; j < messages[i].length; j++) {
                    if (messages[i][j].format === 'string') {
                        renderedMessages[i] += messages[i][j].content;
                    }
                    else {
                        renderedMessages[i] += shared_ts_1.default.displayExpression(computeExpressionFromTemplate(messages[i][j].content, matchings), operators);
                    }
                }
            }
            throw new shared_ts_1.default.PreRenderedUserError(renderedMessages, templateName);
        }
    };
    /**
     * Checks whether protoLine is an instance of template, in terms of both
     * expressions and phrases.
     * @param {array} protoLine - a ProtoLine, that is an array of phrases
     *        and expressions
     * @param {array} template - the value corresponding to the reader_view key
     *        of a LineTemplate, so an array of phrases and ExpressionTemplates.
     * @return {object} a dictionary of the form {string: Expression} that
     *        specifies what each variable / atom in the template corresponds to
     *        in the protoLine.
     * @throws If the line is not an instance of the template.
     */
    var matchLineToTemplate = function (protoLine, template) {
        // These witness that the protoLine is an instance of the template. For
        // example if the protoLine is 'we know A∧B' and the template is 'we know
        // p' then matchings would end up as {p: A∧B}.
        var matchings = {};
        // Check unsubstituted expressions agree
        if (protoLine.length !== template.length) {
            throw new shared_ts_1.default.UserError('unmatched_line', {});
        }
        for (var i = 0; i < protoLine.length; i++) {
            if (protoLine[i].format !== template[i].format) {
                throw new shared_ts_1.default.UserError('unmatched_line', {});
            }
            if (protoLine[i].format === 'expression') {
                // Only unsubstituted expression templates are useful in establishing
                // the matchings. e.g. if we are told simple the expression
                // corresponding to p[x->a] it will not be possible to discern p, x or
                // a, because there are many possible subsitutions that could have
                // produced the expression we see.
                if (template[i].content.substitutions.length === 0) {
                    matchings = matchExpression(protoLine[i].content, template[i].content.expression, matchings);
                }
            }
        }
        // Now, check the substituted expression templates agree.
        for (var i = 0; i < protoLine.length; i++) {
            if (protoLine[i].format === 'expression' &&
                template[i].content.substitutions.length > 0) {
                var expression = computeExpressionFromTemplate(template[i].content, matchings);
                if (!shared_ts_1.default.checkExpressionsAreEqual(protoLine[i].content, expression)) {
                    throw new shared_ts_1.default.UserError('unmatched_line', {});
                }
            }
        }
        // Finally check phrases agree.
        for (var i = 0; i < protoLine.length; i++) {
            if (protoLine[i].format === 'phrase' &&
                protoLine[i].content !== template[i].content) {
                throw new shared_ts_1.default.UserError('unmatched_line', {});
            }
        }
        return matchings;
    };
    /**
     * This is used by buildLine. It checks that the types of the line are
     * correct and at the top agree with those the template requires, and
     * likewise for the kinds of the line (if the template has an opinion).
     * @param {object} matchings - a dictionary of {string: Expression} that
     *        allows the line the student wrote to be deduced from the
     *        reader_view key of the LineTemplate in question.
     * @param {array} templateReaderView - the value of the reader_view key of a
     *        LineTemplate, so an array of phrases and ExpressionTemplates.
     * @param {object} language - a Language object giving the student language
     * @throws A typing error if the types are invalid.
     */
    var requireValidMatching = function (matchings, templateReaderView, language) {
        var expressionsToCheck = [];
        var typesRequired = [];
        for (var i = 0; i < templateReaderView.length; i++) {
            if (templateReaderView[i].format === 'expression') {
                var expression = computeExpressionFromTemplate(templateReaderView[i].content, matchings);
                if (templateReaderView[i].content.hasOwnProperty('kind') &&
                    templateReaderView[i].content.kind !== expression.top_kind_name) {
                    throw new shared_ts_1.default.UserError('wrong_kind_in_line', {
                        expression: expression,
                        expected_kind: templateReaderView[i].content.kind
                    });
                }
                expressionsToCheck.push(expression);
                typesRequired.push(templateReaderView[i].content.type);
            }
        }
        shared_ts_1.default.assignTypesToExpressionArray(expressionsToCheck, typesRequired, language, ['variable', 'constant']);
    };
    /**
     * This function is run on each line as the student types it, to make sure the
     * line is of a known type. It does not check for more sophisticated errors.
     * @param {string} lineString - one of the lines written by the student
     * @param {Array.<LineTemplate>} lineTemplates - as for buildLine()
     * @param {Language} language - as for buildLine()
     * @param {object} vocabulary - as for buildLine()
     * @param {object} generalMessages - a dictionary of GeneralMessages, used to
     *         render errors into human-readable messages.
     * @throws If the line cannot be identified, {
     *           message: a string describing the problem
     *         }
     */
    var requireIdentifiableLine = function (lineString, lineTemplates, language, vocabulary, generalMessages) {
        try {
            var protoLines = shared_ts_1.default.parseLineString(lineString.trim(), language.operators, vocabulary, false);
        }
        catch (err) {
            throw {
                message: shared_ts_1.default.renderError(err, generalMessages, language)
            };
        }
        var lineIdentified = false;
        for (var i = 0; i < protoLines.length; i++) {
            for (var j = 0; j < lineTemplates.length; j++) {
                try {
                    matchLineToTemplate(protoLines[i], lineTemplates[j].reader_view);
                    lineIdentified = true;
                }
                catch (err) {
                    if (errorMessage === undefined) {
                        var errorMessage = shared_ts_1.default.renderError(err, generalMessages, language);
                    }
                }
            }
        }
        if (!lineIdentified) {
            throw {
                message: errorMessage
            };
        }
    };
    /**
     * This is a top-level function that checks all lines of a proof match some
     * line template (or are blank), but nothing else. It is run as the student
     * types.
     * @param {string} proofString - the proof as written by the student
     * @param {object} questionInstance - the object representing the problem,
     *        which was constructed from the QuestionData by buildInstance().
     * @throws (if there is an unmatchable line) a dictionary {
     *           message: a message describing something that went wrong,
     *           line: the line in which the problem occurred (zero-indexed),
     *          }
     */
    var validateProof = function (proofString, questionInstance) {
        if (proofString.slice(-1) === '\n') {
            proofString = proofString.slice(0, proofString.length - 1);
        }
        var lineStrings = proofString.split('\n');
        for (var i = 0; i < lineStrings.length; i++) {
            if (lineStrings[i].split(' ').join('').length !== 0) {
                try {
                    requireIdentifiableLine(lineStrings[i], questionInstance.line_templates, questionInstance.language, questionInstance.vocabulary, questionInstance.general_messages);
                }
                catch (err) {
                    throw {
                        message: err.message,
                        line: i
                    };
                }
            }
        }
    };
    /**
     * @param {string} lineString - a line of text written by the student
     * @param {Array.<LineTemplate>} lineTemplates - an array of LineTemplates
     *        written by the teacher, that describe the sorts of lines a student
     *        might write; we try to find one of which the given line is an
     *        instance.
     * @param {Language} language - the student language (a Language object)
     * @param {object} vocabulary - the phrases available for the student to use.
     *        It is a dictionary with entries like
     *            satisfying: ['satisfying', 'such that']
     *        which indicates that the student can convey the concept of
     *        'satisfying' by writing either 'satisfying' or 'such that'.
     * @return {object} a Line object that is an abstract representation of the
     *          student's lineString, constructed from this string and one of the
     *          lineTemplates.
     * @throws an error representing the closest we got to understanding the line,
     *         generally 'unmatched line', a complaint about typing, or a
     *         LineMessage from the teacher if this is identified as an instance
     *         of an invalid deduction.
     */
    var buildLine = function (lineString, lineTemplates, language, vocabulary) {
        // Get list of possible parsings of line (usually there is only one)
        var n = 0;
        while (lineString[n] === ' ') {
            n++;
        }
        if (n % 2 !== 0) {
            throw new shared_ts_1.default.UserError('odd_number_spaces', {});
        }
        var indentation = n / 2;
        var protoLines = shared_ts_1.default.parseLineString(lineString.slice(n, lineString.length), language.operators, vocabulary, false);
        // At this stage we wish to return the 'best' matching with the following
        // priority list:
        // 1. A correctly typed matching to a 'correct' line template - i.e. one
        //    for a logically correct derivation. If we find one we return it
        //    immediately
        // 2. A correctly typed matching to an incorrect line template
        // 3. An incorrectly typed matching to a line template
        // Returns true iff error1 is a better attempt than error2
        var _isBetterAttempt = function (error1, error2) {
            return error2 === undefined ||
                (error1.code === 'pre-rendered' && error2.code !== 'pre-rendered') ||
                (error1.code !== 'unmatched_line' && error2.code === 'unmatched_line');
        };
        for (var i = 0; i < protoLines.length; i++) {
            for (var j = 0; j < lineTemplates.length; j++) {
                try {
                    var matchings = matchLineToTemplate(protoLines[i], lineTemplates[j].reader_view);
                    requireValidMatching(matchings, lineTemplates[j].reader_view, language);
                    throwLineMessages(lineTemplates[j].error, lineTemplates[j].name, matchings, language.operators);
                    var antecedents = [];
                    for (var k = 0; k < lineTemplates[j].antecedents.length; k++) {
                        antecedents.push({
                            format: 'expression',
                            content: computeExpressionFromTemplate(lineTemplates[j].antecedents[k], matchings)
                        });
                    }
                    return {
                        template_name: lineTemplates[j].name,
                        matchings: matchings,
                        antecedents: antecedents,
                        results: computeExpressionsFromTemplateArray(lineTemplates[j].results, matchings),
                        variables: instantiateExpressionArray(lineTemplates[j].variables, matchings),
                        indentation: indentation,
                        text: lineString
                    };
                }
                catch (err) {
                    if (_isBetterAttempt(err, bestAttemptSoFar)) {
                        var bestAttemptSoFar = err;
                    }
                }
            }
        }
        throw bestAttemptSoFar;
    };
    /**
     * This is one of the two main top-level student functions (with checkProof).
     * @param {string} proofString - the proof as written by the student
     * @param {object} questionInstance - the object representing the problem,
     *        which was constructed from the QuestionData by buildInstance().
     * @return {Proof} a Proof object built from the given proofString
     * @throws a dictionary {
     *           message: a message describing something that went wrong,
     *           line: the line in which the problem occurred (zero-indexed),
     *           code: the code of the error that occurred,
     *           category: either 'line', 'parsing' or 'typing'
     *          }
     */
    var buildProof = function (proofString, questionInstance) {
        var lineStrings = proofString.split('\n');
        // Ignore blank lines at the end
        var lastLineNum = lineStrings.length - 1;
        while (lastLineNum > 0 &&
            lineStrings[lastLineNum].replace(/ /g, '').length === 0) {
            lastLineNum--;
        }
        var builtLines = [];
        for (var i = 0; i <= lastLineNum; i++) {
            try {
                builtLines.push(buildLine(lineStrings[i], questionInstance.line_templates, questionInstance.language, questionInstance.vocabulary));
            }
            catch (err) {
                throw {
                    message: shared_ts_1.default.renderError(err, questionInstance.general_messages, questionInstance.language),
                    line: i,
                    code: err.code,
                    category: (err.name === 'PreRenderedUserError') ?
                        'line' :
                        questionInstance.general_messages[err.code].category
                };
            }
        }
        return {
            lines: builtLines
        };
    };
    // CHECK PROOF
    /**
     * This function is a core component of the program - it takes an expression
     * and returns its value (with respect to given inputs, model and parameters).
     * @param {TypedExpression} expression - the TypedExpression (in the control
     *        language) to be evaluated, e.g. n+2
     * @param {object} inputs - a dictionary with keys the free variables in the
     *        expression, giving for each the value they should be taken to have,
     *        e.g. {n:3}
     * @param {Model} model - a Model object that specifies how to evaluate
     *        functions, e.g., that '+' should be interpreted as the usual
     *        addition.
     * @param {object} evaluationRuleParameters - these are sent to all of the
     *        EvaluationRules occurring in the model, for them to make use of if
     *        they wish. e.g. here they would include the student's proof, and
     *        the function 'num_lines' would evaluate by examining this proof.
     * @param {object} cache - expressions, at particular inputs, that were
     *        already evaluated.
     * @return {*} the result of the expression with these inputs, e.g. 5
     * @throws an error if any part of the evaluation failed, for example by
     *         trying to access an element of an array beyond the array's length.
     */
    var evaluate = function (expression, inputs, model, evaluationRuleParameters, cache) {
        var cacheKey = JSON.stringify(expression) + '#' + JSON.stringify(inputs);
        if (cache.hasOwnProperty(cacheKey) && false) {
            return cache[cacheKey];
        }
        if (expression.top_kind_name === 'variable') {
            var answer = inputs[expression.top_operator_name];
        }
        else if (expression.top_kind_name === 'constant') {
            var answer = expression.top_operator_name;
        }
        else {
            var evaluationRule = model.evaluation_rules[expression.top_operator_name];
            if (evaluationRule.format === 'top_down') {
                var answer = evaluationRule.evaluateExpression(expression, inputs, model, evaluationRuleParameters, cache);
            }
            else if (evaluationRule.format === 'definition') {
                // Evaluate arguments (spec requires that the expression has no
                // dummies).
                if (expression.dummies.length > 0) {
                    throw new Error('evaluate() received ' +
                        expression.top_operator_name +
                        ' to be evaluated via a definition but it has dummies');
                }
                var answer = evaluationRule.evaluateExpression(expression, inputs, model, evaluationRuleParameters, cache);
            }
            else if (evaluationRule.format === 'bottom_up') {
                // Evaluate arguments (spec requires that there are no dummies).
                if (expression.dummies.length > 0) {
                    throw new Error('evaluate() received ' +
                        expression.top_operator_name +
                        ' to be evaluated bottom-up but it has dummies');
                }
                var argumentsList = [];
                for (var i = 0; i < expression.arguments.length; i++) {
                    argumentsList.push(evaluate(expression.arguments[i], inputs, model, evaluationRuleParameters, cache));
                }
                var types = [];
                for (var i = 0; i < expression.arguments.length; i++) {
                    types.push(expression.arguments[i].type);
                }
                var answer = evaluationRule.evaluateExpression(argumentsList, types, evaluationRuleParameters);
            }
            else {
                throw Error('Unknown evaluation rule format (' +
                    evaluationRule.format + ') sent to evaluate().');
            }
        }
        cache[cacheKey] = answer;
        return answer;
    };
    /**
     * @param {MistakeEntry} mistake - a MistakeEntry that describes when a
     *        mistake occurs, and if so what to say to the student.
     * @param {int} lineNumber - the number of the line in the proof in which the
     *        mistake was made (zero-indexed)
     * @param {Model} model - a Model object providing information on how to
     *        evaluate functions the teacher may have used.
     * @param {object} parameters - should be a dictionary of {
     *          proof: the student's proof in which the mistake was made
     *          assumptions: the assumptions allowed in the question
     *          target: what the student should prove (is
     *            questionInstance.result[0])
     *        }
     * @param {object} operators - from the student language, this is used to
     *        display expressions.
     * @throws This function will take the MistakeMessages given in the
     *         MistakeEntry and evaluate them to get strings describing the
     *         problem that could be shown to the student. It then throws a
     *         logicProofShared.UserError containing these strings.
     */
    var renderMistakeMessages = function (mistake, lineNumber, model, parameters, operators) {
        var renderedMessages = [];
        for (var i = 0; i < mistake.message.length; i++) {
            try {
                var message = mistake.message[i];
                var renderedMessage = '';
                for (var j = 0; j < message.length; j++) {
                    if (message[j].format === 'string') {
                        renderedMessage += message[j].content;
                    }
                    else {
                        var rawResult = evaluate(message[j].content, {
                            n: lineNumber + 1
                        }, model, parameters, {});
                        renderedMessage += (message[j].content.type === 'set_of_formulas') ?
                            shared_ts_1.default.displayExpressionArray(rawResult, operators) :
                            (message[j].content.type === 'formula') ?
                                shared_ts_1.default.displayExpression(rawResult, operators) :
                                rawResult;
                    }
                }
                renderedMessages.push(renderedMessage);
            }
            catch (err) {
                if (err.message !== 'evaluation failed') {
                    throw err;
                }
            }
        }
        return renderedMessages;
    };
    /**
     * This is the second top-level function for the student.
     * @param {Proof} proof - a Proof object constructed by buildProof()
     * @param {object} questionInstance - the object describing the problem built
     *        from the QuestionData (an argument of the interaction's
     *        customization_args) by buildInstance().
     * @throws if a mistake from the mistake_table has been
     *          made in the proof, {
     *            message: a human-readable description of the first mistake
     *              identified,
     *            line: the line (zero-indexed) the error occurred in,
     *            code: the name of the mistake that was made
     *            category: the MistakeSection that the mistake came from
     *          }
     */
    var checkProof = function (proof, questionInstance) {
        var evaluationCache = {};
        var parameters = {
            proof: proof,
            assumptions: questionInstance.assumptions,
            // Note that questionInstance.results is an array of expressions, to
            // allow for future questions in which the student has to prove more than
            // one thing, but for now we only permit one target per question.
            target: questionInstance.results[0]
        };
        // We check for all mistakes in the first mistake section (layout) first so
        // that formulas in subsequent sections can assume the layout is correct,
        // and so on with the subsequent sections.
        for (var i = 0; i < questionInstance.mistake_table.length; i++) {
            for (var lineNumber = 0; lineNumber < proof.lines.length; lineNumber++) {
                for (var j = 0; j < questionInstance.mistake_table[i].entries.length; j++) {
                    var mistake = questionInstance.mistake_table[i].entries[j];
                    // If the formula determining whether an error occurs cannot be
                    // evaluated then the error is deemed not to have occurred. This is
                    // so the teacher can write formulas like 'indentation(n-1)' and have
                    // it implicit that n>1.
                    var check = false;
                    try {
                        check = evaluate(mistake.occurs, {
                            n: lineNumber + 1
                        }, questionInstance.control_model, parameters, evaluationCache);
                    }
                    catch (err) {
                        if (err.message !== 'evaluation failed') {
                            throw err;
                        }
                    }
                    if (check) {
                        var mistakeMessages = renderMistakeMessages(mistake, lineNumber, questionInstance.control_model, parameters, questionInstance.language.operators);
                        // If the teacher has made a mistake and none of the messages they
                        // have provided can be evaluated then we try to return to the
                        // student as helpful a message as possible.
                        var error = (mistakeMessages.length > 0) ?
                            new shared_ts_1.default.PreRenderedUserError(mistakeMessages, mistake.name) :
                            new shared_ts_1.default.UserError('unspecified_mistake', {
                                section: questionInstance.mistake_table[i].name,
                                entry: mistake.name
                            });
                        throw {
                            message: shared_ts_1.default.renderError(error, questionInstance.general_messages, questionInstance.language),
                            line: lineNumber,
                            code: mistake.name,
                            category: questionInstance.mistake_table[i].name
                        };
                    }
                }
            }
        }
    };
    return {
        BASE_CONTROL_MODEL: BASE_CONTROL_MODEL,
        buildInstance: buildInstance,
        matchExpression: matchExpression,
        substituteIntoExpression: substituteIntoExpression,
        instantiateExpression: instantiateExpression,
        computeExpressionFromTemplate: computeExpressionFromTemplate,
        throwLineMessages: throwLineMessages,
        matchLineToTemplate: matchLineToTemplate,
        requireIdentifiableLine: requireIdentifiableLine,
        validateProof: validateProof,
        buildLine: buildLine,
        buildProof: buildProof,
        evaluate: evaluate,
        renderMistakeMessages: renderMistakeMessages,
        checkProof: checkProof
    };
})();
exports.default = logicProofStudent;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/js/teacher.ts":
/*!*****************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/js/teacher.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Components used by the LogicProof interaction editor.
 */
var shared_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/shared.ts */ "./extensions/interactions/LogicProof/static/js/shared.ts"));
var data_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/data.ts */ "./extensions/interactions/LogicProof/static/js/data.ts"));
var generatedParser_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/generatedParser.ts */ "./extensions/interactions/LogicProof/static/js/generatedParser.ts"));
var logicProofTeacher = (function () {
    // QUESTION
    /**
     * A question is composed of the formulas the student may assume and the
     * formula she must prove; it will be different for each state in which the
     * interaction is used.
     * @param {string} assumptionsString - typed by the teacher to describe the
     *        assumptions the student is allowed to make.
     * @param {string} targetString - typed by the teacher to describe what the
     *        student is supposed to prove.
     * @param {object} vocabulary - A vocabulary object, the words from which the
     *        teacher is not allowed to use as function names.
     * @returns {
     *           operators: the operators occurring in the question including both
     *             ordinary ones (like ∧) and specific ones (like f).
     *           assumptions: an array of Expressions, which will form the
     *             'assumptions' key in the interaction.
     *           results: an array of length one built from the targetString which
     *             will form the 'results' key in the interaction.
     *         }
     * @throws If the given strings cannot be parsed, or are mal-typed or use
     *         words that are reserved for the vocabulary.
     */
    var buildQuestion = function (assumptionsString, targetString, vocabulary) {
        var assumptions = null;
        if (assumptionsString.replace(/ /g, '') === '') {
            assumptions = [];
        }
        else {
            try {
                assumptions = generatedParser_ts_1.default.parse(assumptionsString.replace(/ /g, ''), 'listOfExpressions');
            }
            catch (err) {
                var error = new shared_ts_1.default.UserError('unparseable', {
                    field: 'assumptions'
                });
                throw {
                    message: shared_ts_1.default.renderError(error, TEACHER_ERROR_MESSAGES, data_ts_1.default.BASE_STUDENT_LANGUAGE)
                };
            }
        }
        try {
            var target = generatedParser_ts_1.default.parse(targetString.replace(/ /g, ''), 'expression');
        }
        catch (err) {
            var error = new shared_ts_1.default.UserError('unparseable', {
                field: 'target'
            });
            throw {
                message: shared_ts_1.default.renderError(error, TEACHER_ERROR_MESSAGES, data_ts_1.default.BASE_STUDENT_LANGUAGE)
            };
        }
        // All assumptions and the target must be booleans.
        var expressions = [];
        var topTypes = [];
        for (var i = 0; i < assumptions.length; i++) {
            expressions.push(assumptions[i]);
            topTypes.push('boolean');
        }
        expressions.push(target);
        topTypes.push('boolean');
        try {
            var typing = shared_ts_1.default.assignTypesToExpressionArray(expressions, topTypes, data_ts_1.default.BASE_STUDENT_LANGUAGE, ['variable', 'constant', 'prefix_function']);
            if (typing.length > 1) {
                throw new shared_ts_1.default.UserError('ambiguous_typing', {});
            }
            requireNoVocabularyWordsUsed(expressions, data_ts_1.default.BASE_STUDENT_LANGUAGE.operators, vocabulary);
        }
        catch (err) {
            throw {
                message: shared_ts_1.default.renderError(err, TEACHER_ERROR_MESSAGES, data_ts_1.default.BASE_STUDENT_LANGUAGE)
            };
        }
        return {
            operators: typing[0].operators,
            assumptions: assumptions,
            results: [target]
        };
    };
    // Throws an error if the given expression array uses an operator that is not
    // in knownOperators and whose name has length greater than one and occurs as
    // a word in the vocabulary.
    var requireNoVocabularyWordsUsed = function (expressionArray, knownOperators, vocabulary) {
        var _isMember = function (entry, array) {
            return (array.indexOf(entry) !== -1);
        };
        var vocabularyWords = [];
        for (var key in vocabulary) {
            for (var i = 0; i < vocabulary[key].length; i++) {
                var wordArray = vocabulary[key][i].split(' ');
                for (var j = 0; j < wordArray.length; j++) {
                    if (!_isMember(wordArray[j], vocabularyWords)) {
                        vocabularyWords.push(wordArray[j]);
                    }
                }
            }
        }
        var operatorNamesToCheck = shared_ts_1.default.getOperatorsFromExpressionArray(expressionArray);
        for (var i = 0; i < operatorNamesToCheck.length; i++) {
            if (_isMember(operatorNamesToCheck[i], vocabularyWords) &&
                operatorNamesToCheck[i].length > 1 &&
                !knownOperators.hasOwnProperty(operatorNamesToCheck[i])) {
                throw new shared_ts_1.default.UserError('forbidden_word', {
                    word: operatorNamesToCheck[i]
                });
            }
        }
    };
    // DATA
    var TEACHER_ERROR_MESSAGES = {
        unparseable: {
            templates: [[{
                        isFixed: true,
                        content: 'The '
                    }, {
                        isFixed: false,
                        content: 'field'
                    }, {
                        isFixed: true,
                        content: ' could not be parsed.'
                    }]],
            parameters: {
                field: {
                    format: 'string'
                }
            }
        },
        ambiguous_typing: {
            templates: [[{
                        isFixed: true,
                        content: ('Unfortunately this cannot be accepted as it has multiple possible ' +
                            'typings.')
                    }]],
            parameters: {}
        },
        hidden_operator: {
            templates: [[{
                        isFixed: true,
                        content: 'It will not be possible to uniquely identify '
                    }, {
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' from a line of this form.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                }
            }
        },
        duplicate_function_name: {
            templates: [[{
                        isFixed: true,
                        content: 'The function '
                    }, {
                        isFixed: false,
                        content: 'function'
                    }, {
                        isFixed: true,
                        content: ' has already been defined.'
                    }]],
            parameters: {
                // eslint-disable-next-line quote-props
                'function': {
                    format: 'string'
                }
            }
        },
        function_name_is_n: {
            templates: [[{
                        isFixed: true,
                        content: ('You cannot use n as a function name; it is reserved to refer to ' +
                            'line numbers')
                    }]]
        },
        argument_is_function_name: {
            templates: [[{
                        isFixed: true,
                        content: '\''
                    }, {
                        isFixed: false,
                        content: 'argument'
                    }, {
                        isFixed: true,
                        content: ('\' is the name of a function and so cannot be used as an argument.')
                    }]],
            parameters: {
                argument: {
                    format: 'string'
                }
            }
        },
        duplicate_argument: {
            templates: [[{
                        isFixed: true,
                        content: 'The variables used as arguments must all be distinct'
                    }]],
            parameters: {
                argument: {
                    format: 'string'
                }
            }
        },
        unused_argument: {
            templates: [[{
                        isFixed: true,
                        content: 'The argument \''
                    }, {
                        isFixed: false,
                        content: 'argument'
                    }, {
                        isFixed: true,
                        content: '\' does not occur in the definition.'
                    }]],
            parameters: {
                argument: {
                    format: 'string'
                }
            }
        },
        unknown_typing_error: {
            templates: [[{
                        isFixed: true,
                        content: 'A typing error has occurred with '
                    }, {
                        isFixed: false,
                        content: 'expression'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                expression: {
                    format: 'expression'
                }
            }
        },
        'unmatched_{{': {
            templates: [[{
                        isFixed: true,
                        content: 'This has an unmatched {{.'
                    }]],
            parameters: {}
        },
        unparseable_fragment: {
            templates: [[{
                        isFixed: true,
                        content: 'It was not possible to parse '
                    }, {
                        isFixed: false,
                        content: 'fragment'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                fragment: {
                    format: 'string'
                }
            }
        },
        ambiguous_parsing: {
            templates: [[{
                        isFixed: true,
                        content: 'The '
                    }, {
                        isFixed: false,
                        content: 'field'
                    }, {
                        isFixed: true,
                        content: (' can be understood in more than one way. Try using fewer ' +
                            'single-character words and variables so that it is easier to ' +
                            'distinguish between the two.')
                    }]],
            parameters: {
                field: {
                    format: 'string'
                }
            }
        },
        illegal_symbol: {
            templates: [[{
                        isFixed: true,
                        content: 'The symbol '
                    }, {
                        isFixed: false,
                        content: 'symbol'
                    }, {
                        isFixed: true,
                        content: ' was not recognised.'
                    }]],
            parameters: {
                symbol: {
                    format: 'string'
                }
            }
        },
        blank_line: {
            templates: [[{
                        isFixed: true,
                        content: 'This line is blank.'
                    }]],
            parameters: {}
        },
        unidentified_word: {
            templates: [[{
                        isFixed: true,
                        content: 'We could not identify \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: ('\'; please make sure you are using vocabulary from the given ' +
                            'list, and don\'t have two consecutive expressions.')
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            }
        },
        unidentified_words: {
            templates: [[{
                        isFixed: true,
                        content: 'We could not identify either of \''
                    }, {
                        isFixed: false,
                        content: 'word1'
                    }, {
                        isFixed: true,
                        content: '\' or \''
                    }, {
                        isFixed: false,
                        content: 'word2'
                    }, {
                        isFixed: true,
                        content: ('\' as words; please make sure you are using vocabulary from ' +
                            'the given list, and don\'t have two consecutive expressions.')
                    }]],
            parameters: {
                word1: {
                    format: 'string'
                },
                word2: {
                    format: 'string'
                }
            }
        },
        consecutive_expressions: {
            templates: [[{
                        isFixed: true,
                        content: 'This line has two expressions in a row ('
                    }, {
                        isFixed: false,
                        content: 'word1'
                    }, {
                        isFixed: true,
                        content: ' and '
                    }, {
                        isFixed: false,
                        content: 'word2'
                    }, {
                        isFixed: true,
                        content: ') which is not allowed.'
                    }]],
            parameters: {
                word1: {
                    format: 'string'
                },
                word2: {
                    format: 'string'
                }
            }
        },
        unidentified_phrase_starting_at: {
            templates: [[{
                        isFixed: true,
                        content: 'The phrase starting \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: ('\' could not be identified; please make sure you are only ' +
                            'using phrases from the given list of vocabulary.')
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            }
        },
        forbidden_word: {
            templates: [[{
                        isFixed: true,
                        content: 'The name \''
                    }, {
                        isFixed: false,
                        content: 'word'
                    }, {
                        isFixed: true,
                        content: '\' is reserved for vocabulary and so cannot be used here.'
                    }]],
            parameters: {
                word: {
                    format: 'string'
                }
            }
        },
        not_enough_inputs: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' must have at least '
                    }, {
                        isFixed: false,
                        content: 'num_needed'
                    }, {
                        isFixed: true,
                        content: ' '
                    }, {
                        isFixed: false,
                        content: 'input_category'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                num_needed: {
                    format: 'string'
                },
                input_category: {
                    format: 'string'
                },
                operator: {
                    format: 'string'
                }
            }
        },
        wrong_num_inputs: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' must have '
                    }, {
                        isFixed: false,
                        content: 'num_needed'
                    }, {
                        isFixed: true,
                        content: ' '
                    }, {
                        isFixed: false,
                        content: 'input_category'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                num_needed: {
                    format: 'string'
                },
                input_category: {
                    format: 'string'
                },
                operator: {
                    format: 'string'
                }
            }
        },
        wrong_kind: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' is supposed to be a '
                    }, {
                        isFixed: false,
                        content: 'expected_kind'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                },
                expected_kind: {
                    format: 'string'
                },
                actual_kind: {
                    format: 'string'
                }
            }
        },
        wrong_type: {
            templates: [[{
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' yields a '
                    }, {
                        isFixed: false,
                        content: 'actual_type'
                    }, {
                        isFixed: true,
                        content: ' but you are trying to use it to give a '
                    }, {
                        isFixed: false,
                        content: 'expected_type'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                },
                expected_type: {
                    format: 'string'
                },
                actual_type: {
                    format: 'string'
                }
            }
        },
        duplicate_dummy_name: {
            templates: [[{
                        isFixed: true,
                        content: 'The name \''
                    }, {
                        isFixed: false,
                        content: 'dummy'
                    }, {
                        isFixed: true,
                        content: '\' is already in use and so cannot be quantified over in '
                    }, {
                        isFixed: false,
                        content: 'expression'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                dummy: {
                    format: 'expression'
                },
                expression: {
                    format: 'expression'
                }
            }
        },
        dummy_not_variable: {
            templates: [[{
                        isFixed: true,
                        content: 'You can only quantify over variables, not  '
                    }, {
                        isFixed: false,
                        content: 'dummy'
                    }, {
                        isFixed: true,
                        content: '.'
                    }]],
            parameters: {
                dummy: {
                    format: 'expression'
                },
                expression: {
                    format: 'expression'
                }
            }
        },
        unknown_operator: {
            templates: [[{
                        isFixed: true,
                        content: 'The operator '
                    }, {
                        isFixed: false,
                        content: 'operator'
                    }, {
                        isFixed: true,
                        content: ' could not be identified.'
                    }]],
            parameters: {
                operator: {
                    format: 'string'
                }
            }
        },
        too_many_parsings: {
            templates: [[{
                        isFixed: true,
                        content: ('This can be parsed in too many different ways - try using ' +
                            'fewer words, especially single-character words.')
                    }]],
            parameters: {}
        },
        too_many_typings: {
            templates: [[{
                        isFixed: true,
                        content: ('This has too many possible typings - try using fewer variables.')
                    }]],
            parameters: {}
        }
    };
    return {
        buildQuestion: buildQuestion,
        TEACHER_ERROR_MESSAGES: TEACHER_ERROR_MESSAGES
    };
})();
exports.default = logicProofTeacher;


/***/ }),

/***/ "./extensions/interactions/LogicProof/static/logic_proof.css":
/*!*******************************************************************!*\
  !*** ./extensions/interactions/LogicProof/static/logic_proof.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./logic_proof.css */ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/LogicProof/static/logic_proof.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./extensions/interactions/MathExpressionInput/MathExpressionInput.ts":
/*!****************************************************************************!*\
  !*** ./extensions/interactions/MathExpressionInput/MathExpressionInput.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for MathExpressionInput interaction.
 */
__webpack_require__(/*! interactions/MathExpressionInput/directives/math-expression-input-rules.service.ts */ "./extensions/interactions/MathExpressionInput/directives/math-expression-input-rules.service.ts");
__webpack_require__(/*! interactions/MathExpressionInput/directives/math-expression-input-validation.service.ts */ "./extensions/interactions/MathExpressionInput/directives/math-expression-input-validation.service.ts");
__webpack_require__(/*! interactions/MathExpressionInput/directives/oppia-interactive-math-expression-input.directive.ts */ "./extensions/interactions/MathExpressionInput/directives/oppia-interactive-math-expression-input.directive.ts");
__webpack_require__(/*! interactions/MathExpressionInput/directives/oppia-response-math-expression-input.directive.ts */ "./extensions/interactions/MathExpressionInput/directives/oppia-response-math-expression-input.directive.ts");
__webpack_require__(/*! interactions/MathExpressionInput/directives/oppia-short-response-math-expression-input.directive.ts */ "./extensions/interactions/MathExpressionInput/directives/oppia-short-response-math-expression-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/MathExpressionInput/directives/math-expression-input-rules.service.ts":
/*!*******************************************************************************************************!*\
  !*** ./extensions/interactions/MathExpressionInput/directives/math-expression-input-rules.service.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Rules service for the interaction.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var MathExpressionInputRulesService = /** @class */ (function () {
    function MathExpressionInputRulesService() {
    }
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'answer' is a complex object having varying types. A general
    // type needs to be found. Same goes for 'inputs'.
    MathExpressionInputRulesService.prototype.IsMathematicallyEquivalentTo = function (answer, inputs) {
        try {
            MathExpression.fromLatex(answer.latex);
        }
        catch (e) {
            throw Error('Bad expression in answer.latex: ' + e.message() + ' inputs: ' +
                JSON.stringify(answer));
        }
        try {
            MathExpression.fromLatex(inputs.x);
        }
        catch (e) {
            throw Error('Bad expression in inputs.x: ' + e.message() + ' inputs: ' +
                JSON.stringify(inputs));
        }
        return (MathExpression.fromLatex(answer.latex).equals(MathExpression.fromLatex(inputs.x)));
    };
    MathExpressionInputRulesService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], MathExpressionInputRulesService);
    return MathExpressionInputRulesService;
}());
exports.MathExpressionInputRulesService = MathExpressionInputRulesService;
angular.module('oppia').factory('MathExpressionInputRulesService', static_1.downgradeInjectable(MathExpressionInputRulesService));


/***/ }),

/***/ "./extensions/interactions/MathExpressionInput/directives/math-expression-input-validation.service.ts":
/*!************************************************************************************************************!*\
  !*** ./extensions/interactions/MathExpressionInput/directives/math-expression-input-validation.service.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var MathExpressionInputValidationService = /** @class */ (function () {
    function MathExpressionInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    MathExpressionInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        // TODO(juansaba): Implement customization args validations.
        return [];
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    MathExpressionInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = [];
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        warningsList = warningsList.concat(this.baseInteractionValidationServiceInstance.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
        // Check that each rule has a valid math expression.
        for (var i = 0; i < answerGroups.length; i++) {
            var rules = answerGroups[i].rules;
            for (var j = 0; j < rules.length; j++) {
                try {
                    MathExpression.fromLatex(rules[j].inputs.x);
                }
                catch (e) {
                    warningsList.push({
                        type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                        message: ('The math expression used in rule ' + String(j + 1) +
                            ' in group ' + String(i + 1) + ' is invalid.')
                    });
                }
            }
        }
        return warningsList;
    };
    var _a;
    MathExpressionInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], MathExpressionInputValidationService);
    return MathExpressionInputValidationService;
}());
exports.MathExpressionInputValidationService = MathExpressionInputValidationService;
angular.module('oppia').factory('MathExpressionInputValidationService', static_1.downgradeInjectable(MathExpressionInputValidationService));


/***/ }),

/***/ "./extensions/interactions/MathExpressionInput/directives/oppia-interactive-math-expression-input.directive.ts":
/*!*********************************************************************************************************************!*\
  !*** ./extensions/interactions/MathExpressionInput/directives/oppia-interactive-math-expression-input.directive.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the MathExpressionInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/MathExpressionInput/directives/math-expression-input-rules.service.ts */ "./extensions/interactions/MathExpressionInput/directives/math-expression-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/contextual/DeviceInfoService.ts */ "./core/templates/dev/head/services/contextual/DeviceInfoService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/DebouncerService.ts */ "./core/templates/dev/head/services/DebouncerService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaInteractiveMathExpressionInput', [
    'MathExpressionInputRulesService',
    'UrlInterpolationService',
    function (MathExpressionInputRulesService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MathExpressionInput/directives/' +
                'math-expression-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$attrs', '$timeout', '$element', 'LABEL_FOR_CLEARING_FOCUS',
                'DebouncerService', 'DeviceInfoService', 'WindowDimensionsService',
                'CurrentInteractionService',
                function ($scope, $attrs, $timeout, $element, LABEL_FOR_CLEARING_FOCUS, DebouncerService, DeviceInfoService, WindowDimensionsService, CurrentInteractionService) {
                    var ctrl = this;
                    var guppyDivElt = $element[0].querySelector('.guppy-div');
                    // Dynamically assigns a unique id to the guppy-div
                    guppyDivElt.setAttribute('id', 'guppy_' + Math.floor(Math.random() * 100000000));
                    var guppyDivId = guppyDivElt.id;
                    /**
                     * Adds a button overlay and invisible text field used to bring up
                     * the keyboard on mobile devices.
                     *
                     * TODO(Oishikatta): On iOS/Safari, keyboard may only appear on first
                     * press. This may not be a significant issue as the
                     * MathExpressionInput is recreated if the given answer is incorrect.
                     */
                    var makeGuppyMobileFriendly = function () {
                        /**
                         * Checks if the guppy div has a width and height greater than 0,
                         * if not schedules a timeout to run again after 100ms. If the
                         * guppy div has a valid width/height, position the invisible
                         * button directly over the guppy div. For mobile browsers, focus()
                         * can only be called from within an onclick handler. Using a form
                         * element was more reliable than attaching the handler to the
                         * guppy div directly.
                         */
                        var positionButtonOverlay = function () {
                            var guppyOffset = $(guppyDivElt).position();
                            var guppySize = guppyDivElt.getBoundingClientRect();
                            // If the guppy div hasn't rendered yet, retry after 100ms.
                            if (guppySize.width === 0 || guppySize.height === 0) {
                                $timeout(positionButtonOverlay, 100);
                            }
                            else {
                                $('#startMathInputButton').css({
                                    top: guppyOffset.top,
                                    left: guppyOffset.left,
                                    width: guppySize.width,
                                    height: guppySize.height
                                });
                            }
                        };
                        positionButtonOverlay();
                        // The focus() call must be in a click event handler and on a text
                        // field to make the mobile keyboard appear.
                        ctrl.startMobileMathInput = function () {
                            guppyInstance.activate();
                            var fakeInputElement = document.querySelector('#fakeInputForMathExpression');
                            fakeInputElement.focus();
                            // Place the cursor at the end of the text input, so that the
                            // user can use backspace to delete.
                            fakeInputElement.setSelectionRange(fakeInputElement.value.length, fakeInputElement.value.length);
                        };
                        var setGuppyContentFromInput = function () {
                            // Clear the Guppy instance by setting its content to the
                            // output of get_content when empty.
                            guppyInstance.import_xml('<m><e></e></m>');
                            guppyInstance.render(true);
                            // Get content of the text input field as an array of characters.
                            var textContent = document
                                .querySelector('#fakeInputForMathExpression').value
                                .toLowerCase().split('');
                            // Replay key combination for each character on the document.
                            for (var i = 0; i < textContent.length; i++) {
                                // If the character is a space, send a 'right' to enable mobile
                                // users to complete expressions without arrow keys.
                                if (textContent[i] === ' ') {
                                    Mousetrap.trigger('right');
                                }
                                else {
                                    Mousetrap.trigger(textContent[i]);
                                }
                            }
                        };
                        // Debounce clear/refill cycles to 1 per 100ms.
                        $('#fakeInputForMathExpression').on('input change compositionupdate keydown', DebouncerService.debounce(function () {
                            setGuppyContentFromInput();
                        }, 100)).on('blur', function () {
                            guppyInstance.activate();
                            setGuppyContentFromInput();
                        });
                    };
                    var oppiaSymbolsUrl = UrlInterpolationService.getStaticAssetUrl('/overrides/guppy/oppia_symbols.json');
                    Guppy.init({
                        symbols: ['/third_party/static/guppy-b5055b/sym/symbols.json',
                            oppiaSymbolsUrl]
                    });
                    var guppyInstance = new Guppy(guppyDivId, {
                        settings: {
                            empty_content: ('\\color{grey}{\\text{\\small{Type a formula here.}}}'),
                            buttons: []
                        },
                        events: {
                            done: function (e) {
                                ctrl.submitAnswer();
                            },
                            change: function (e) {
                                // Need to manually trigger the digest cycle
                                // to make any 'watchers' aware of changes in answer.
                                $scope.$apply();
                            },
                            ready: function () {
                                if (DeviceInfoService.isMobileUserAgent() &&
                                    DeviceInfoService.hasTouchEvents()) {
                                    ctrl.mobileOverlayIsShown = true;
                                    // Wait for the scope change to apply. Since we interact with
                                    // the DOM elements, they need to be added by angular before
                                    // the function is called. Timeout of 0 to wait
                                    // until the end of the current digest cycle,
                                    // false to not start a new digest cycle.
                                    // A new cycle is not needed since no angular variables
                                    // are changed within the function.
                                    $timeout(makeGuppyMobileFriendly, 0, false);
                                }
                            }
                        }
                    });
                    guppyInstance.render();
                    var labelForFocusTarget = $attrs.labelForFocusTarget || null;
                    $scope.$on('focusOn', function (e, name) {
                        if (!labelForFocusTarget) {
                            return;
                        }
                        if (name === labelForFocusTarget) {
                            guppyInstance.activate();
                        }
                        else if (name === LABEL_FOR_CLEARING_FOCUS) {
                            guppyInstance.deactivate();
                        }
                    });
                    var answer = {
                        ascii: '',
                        latex: ''
                    };
                    ctrl.isCurrentAnswerValid = function () {
                        var latexAnswer = guppyInstance.latex();
                        try {
                            MathExpression.fromLatex(latexAnswer);
                        }
                        catch (e) {
                            return false;
                        }
                        return true;
                    };
                    ctrl.submitAnswer = function () {
                        if (!ctrl.isCurrentAnswerValid()) {
                            return;
                        }
                        answer.latex = guppyInstance.latex();
                        answer.ascii = guppyInstance.text();
                        CurrentInteractionService.onSubmit(answer, MathExpressionInputRulesService);
                    };
                    CurrentInteractionService.registerCurrentInteraction(ctrl.submitAnswer, ctrl.isCurrentAnswerValid);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MathExpressionInput/directives/oppia-response-math-expression-input.directive.ts":
/*!******************************************************************************************************************!*\
  !*** ./extensions/interactions/MathExpressionInput/directives/oppia-response-math-expression-input.directive.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the MathExpressionInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! directives/mathjax-bind.directive.ts */ "./core/templates/dev/head/directives/mathjax-bind.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseMathExpressionInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MathExpressionInput/directives/' +
                'math-expression-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.latexAnswer = HtmlEscaperService.escapedJsonToObj($attrs.answer).latex;
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MathExpressionInput/directives/oppia-short-response-math-expression-input.directive.ts":
/*!************************************************************************************************************************!*\
  !*** ./extensions/interactions/MathExpressionInput/directives/oppia-short-response-math-expression-input.directive.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the MathExpressionInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! directives/mathjax-bind.directive.ts */ "./core/templates/dev/head/directives/mathjax-bind.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseMathExpressionInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MathExpressionInput/directives/' +
                'math-expression-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.latexAnswer = HtmlEscaperService.escapedJsonToObj($attrs.answer).latex;
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/MultipleChoiceInput.ts":
/*!****************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/MultipleChoiceInput.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for MultipleChoiceInput interaction.
 */
__webpack_require__(/*! interactions/MultipleChoiceInput/static/multiple_choice_input.css */ "./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts */ "./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/multiple-choice-input-validation.service.ts */ "./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-validation.service.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/oppia-interactive-multiple-choice-input.directive.ts */ "./extensions/interactions/MultipleChoiceInput/directives/oppia-interactive-multiple-choice-input.directive.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/oppia-response-multiple-choice-input.directive.ts */ "./extensions/interactions/MultipleChoiceInput/directives/oppia-response-multiple-choice-input.directive.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/oppia-short-response-multiple-choice-input.directive.ts */ "./extensions/interactions/MultipleChoiceInput/directives/oppia-short-response-multiple-choice-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts":
/*!*******************************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
angular.module('oppia').factory('MultipleChoiceInputRulesService', [function () {
        return {
            Equals: function (answer, inputs) {
                return answer === inputs.x;
            }
        };
    }]);


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-validation.service.ts":
/*!************************************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-validation.service.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var MultipleChoiceInputValidationService = /** @class */ (function () {
    function MultipleChoiceInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    MultipleChoiceInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        var warningsList = [];
        this.baseInteractionValidationServiceInstance.requireCustomizationArguments(customizationArgs, ['choices']);
        var areAnyChoicesEmpty = false;
        var areAnyChoicesDuplicated = false;
        var seenChoices = [];
        var numChoices = customizationArgs.choices.value.length;
        for (var i = 0; i < customizationArgs.choices.value.length; i++) {
            var choice = customizationArgs.choices.value[i];
            if (choice.trim().length === 0) {
                areAnyChoicesEmpty = true;
            }
            if (seenChoices.indexOf(choice) !== -1) {
                areAnyChoicesDuplicated = true;
            }
            seenChoices.push(choice);
        }
        if (areAnyChoicesEmpty) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please ensure the choices are nonempty.'
            });
        }
        if (areAnyChoicesDuplicated) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please ensure the choices are unique.'
            });
        }
        return warningsList;
    };
    MultipleChoiceInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = [];
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        var numChoices = customizationArgs.choices.value.length;
        var selectedEqualsChoices = [];
        for (var i = 0; i < answerGroups.length; i++) {
            var rules = answerGroups[i].rules;
            for (var j = 0; j < rules.length; j++) {
                if (rules[j].type === 'Equals') {
                    var choicePreviouslySelected = (selectedEqualsChoices.indexOf(rules[j].inputs.x) !== -1);
                    if (!choicePreviouslySelected) {
                        selectedEqualsChoices.push(rules[j].inputs.x);
                    }
                    else {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                            message: 'Please ensure rule ' + String(j + 1) +
                                ' in group ' + String(i + 1) + ' is not equaling the ' +
                                'same multiple choice option as another rule.'
                        });
                    }
                    if (rules[j].inputs.x >= numChoices) {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                            message: 'Please ensure rule ' + String(j + 1) +
                                ' in group ' + String(i + 1) + ' refers to a valid choice.'
                        });
                    }
                }
            }
        }
        warningsList = warningsList.concat(this.baseInteractionValidationServiceInstance.getAnswerGroupWarnings(answerGroups, stateName));
        // Only require a default rule if some choices have not been taken care
        // of by rules.
        if (selectedEqualsChoices.length < numChoices) {
            if (!defaultOutcome || defaultOutcome.isConfusing(stateName)) {
                warningsList.push({
                    type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                    message: 'Please add something for Oppia to say in the ' +
                        '\"All other answers\" response.'
                });
            }
        }
        return warningsList;
    };
    var _a;
    MultipleChoiceInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], MultipleChoiceInputValidationService);
    return MultipleChoiceInputValidationService;
}());
exports.MultipleChoiceInputValidationService = MultipleChoiceInputValidationService;
angular.module('oppia').factory('MultipleChoiceInputValidationService', static_1.downgradeInjectable(MultipleChoiceInputValidationService));


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/directives/oppia-interactive-multiple-choice-input.directive.ts":
/*!*********************************************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/directives/oppia-interactive-multiple-choice-input.directive.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the MultipleChoiceInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts */ "./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaInteractiveMultipleChoiceInput', [
    'HtmlEscaperService', 'MultipleChoiceInputRulesService',
    'UrlInterpolationService',
    function (HtmlEscaperService, MultipleChoiceInputRulesService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MultipleChoiceInput/directives/' +
                'multiple-choice-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'CurrentInteractionService',
                function ($attrs, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.choices = HtmlEscaperService.escapedJsonToObj($attrs.choicesWithValue);
                    ctrl.answer = null;
                    ctrl.submitAnswer = function (answer) {
                        if (answer === null) {
                            return;
                        }
                        answer = parseInt(answer, 10);
                        CurrentInteractionService.onSubmit(answer, MultipleChoiceInputRulesService);
                    };
                    CurrentInteractionService.registerCurrentInteraction(null, null);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/directives/oppia-response-multiple-choice-input.directive.ts":
/*!******************************************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/directives/oppia-response-multiple-choice-input.directive.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the MultipleChoiceInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseMultipleChoiceInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MultipleChoiceInput/directives/' +
                'multiple-choice-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    var _choices = HtmlEscaperService.escapedJsonToObj($attrs.choices);
                    ctrl.response = _choices[_answer];
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/directives/oppia-short-response-multiple-choice-input.directive.ts":
/*!************************************************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/directives/oppia-short-response-multiple-choice-input.directive.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the MultipleChoiceInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! filters/string-utility-filters/convert-to-plain-text.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/convert-to-plain-text.filter.ts");
__webpack_require__(/*! filters/string-utility-filters/truncate-at-first-line.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseMultipleChoiceInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MultipleChoiceInput/directives/' +
                'multiple-choice-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', '$filter',
                function ($attrs, $filter) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    var _choices = HtmlEscaperService.escapedJsonToObj($attrs.choices);
                    var response = $filter('convertToPlainText')(_choices[_answer]);
                    ctrl.response = $filter('truncateAtFirstLine')(response);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css":
/*!**************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./multiple_choice_input.css */ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./extensions/interactions/MusicNotesInput/MusicNotesInput.ts":
/*!********************************************************************!*\
  !*** ./extensions/interactions/MusicNotesInput/MusicNotesInput.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for MusicNotesInput interaction.
 */
__webpack_require__(/*! interactions/MusicNotesInput/static/music_notes_input.css */ "./extensions/interactions/MusicNotesInput/static/music_notes_input.css");
__webpack_require__(/*! interactions/MusicNotesInput/directives/music-notes-input-rules.service.ts */ "./extensions/interactions/MusicNotesInput/directives/music-notes-input-rules.service.ts");
__webpack_require__(/*! interactions/MusicNotesInput/directives/music-notes-input-validation.service.ts */ "./extensions/interactions/MusicNotesInput/directives/music-notes-input-validation.service.ts");
__webpack_require__(/*! interactions/MusicNotesInput/directives/oppia-interactive-music-notes-input.directive.ts */ "./extensions/interactions/MusicNotesInput/directives/oppia-interactive-music-notes-input.directive.ts");
__webpack_require__(/*! interactions/MusicNotesInput/directives/oppia-response-music-notes-input.directive.ts */ "./extensions/interactions/MusicNotesInput/directives/oppia-response-music-notes-input.directive.ts");
__webpack_require__(/*! interactions/MusicNotesInput/directives/oppia-short-response-music-notes-input.directive.ts */ "./extensions/interactions/MusicNotesInput/directives/oppia-short-response-music-notes-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/MusicNotesInput/directives/music-notes-input-rules.service.ts":
/*!***********************************************************************************************!*\
  !*** ./extensions/interactions/MusicNotesInput/directives/music-notes-input-rules.service.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
// The below file is imported just for its constant.
__webpack_require__(/*! interactions/MusicNotesInput/directives/oppia-interactive-music-notes-input.directive.ts */ "./extensions/interactions/MusicNotesInput/directives/oppia-interactive-music-notes-input.directive.ts");
__webpack_require__(/*! interactions/interactions-extension.constants.ajs.ts */ "./extensions/interactions/interactions-extension.constants.ajs.ts");
angular.module('oppia').factory('MusicNotesInputRulesService', [
    'NOTE_NAMES_TO_MIDI_VALUES', function (NOTE_NAMES_TO_MIDI_VALUES) {
        var _getMidiNoteValue = function (note) {
            if (NOTE_NAMES_TO_MIDI_VALUES.hasOwnProperty(note.readableNoteName)) {
                return NOTE_NAMES_TO_MIDI_VALUES[note.readableNoteName];
            }
            else {
                throw new Error('Invalid music note ' + note);
            }
        };
        var _convertSequenceToMidi = function (sequence) {
            return sequence.map(function (note) {
                return _getMidiNoteValue(note);
            });
        };
        return {
            Equals: function (answer, inputs) {
                return angular.equals(_convertSequenceToMidi(answer), _convertSequenceToMidi(inputs.x));
            },
            IsLongerThan: function (answer, inputs) {
                return _convertSequenceToMidi(answer).length > inputs.k;
            },
            // TODO(wxy): validate that inputs.a <= inputs.b
            HasLengthInclusivelyBetween: function (answer, inputs) {
                var answerLength = _convertSequenceToMidi(answer).length;
                return answerLength >= inputs.a && answerLength <= inputs.b;
            },
            IsEqualToExceptFor: function (answer, inputs) {
                var targetSequence = _convertSequenceToMidi(inputs.x);
                var userSequence = _convertSequenceToMidi(answer);
                if (userSequence.length !== targetSequence.length) {
                    return false;
                }
                var numWrongNotes = 0;
                userSequence.map(function (noteValue, index) {
                    if (noteValue !== targetSequence[index]) {
                        numWrongNotes++;
                    }
                });
                return numWrongNotes <= inputs.k;
            },
            IsTranspositionOf: function (answer, inputs) {
                var targetSequence = _convertSequenceToMidi(inputs.x);
                var userSequence = _convertSequenceToMidi(answer);
                if (userSequence.length !== targetSequence.length) {
                    return false;
                }
                return userSequence.every(function (noteValue, index) {
                    return targetSequence[index] + inputs.y === noteValue;
                });
            },
            IsTranspositionOfExceptFor: function (answer, inputs) {
                var targetSequence = _convertSequenceToMidi(inputs.x);
                var userSequence = _convertSequenceToMidi(answer);
                if (userSequence.length !== targetSequence.length) {
                    return false;
                }
                var numWrongNotes = 0;
                userSequence.map(function (noteValue, index) {
                    if (targetSequence[index] + inputs.y !== noteValue) {
                        numWrongNotes++;
                    }
                });
                return numWrongNotes <= inputs.k;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MusicNotesInput/directives/music-notes-input-validation.service.ts":
/*!****************************************************************************************************!*\
  !*** ./extensions/interactions/MusicNotesInput/directives/music-notes-input-validation.service.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var MusicNotesInputValidationService = /** @class */ (function () {
    function MusicNotesInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    MusicNotesInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        // TODO(juansaba): Implement customization args validations.
        return [];
    };
    MusicNotesInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        return this.getCustomizationArgsWarnings(customizationArgs).concat(this.baseInteractionValidationServiceInstance.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
    };
    var _a;
    MusicNotesInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], MusicNotesInputValidationService);
    return MusicNotesInputValidationService;
}());
exports.MusicNotesInputValidationService = MusicNotesInputValidationService;
angular.module('oppia').factory('MusicNotesInputValidationService', static_1.downgradeInjectable(MusicNotesInputValidationService));


/***/ }),

/***/ "./extensions/interactions/MusicNotesInput/directives/music-phrase-player.service.ts":
/*!*******************************************************************************************!*\
  !*** ./extensions/interactions/MusicNotesInput/directives/music-phrase-player.service.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Player service for the interaction.
 */
angular.module('oppia').factory('MusicPhrasePlayerService', [
    '$timeout', function ($timeout) {
        var _MIDI_CHANNEL = 0;
        var _MIDI_VELOCITY = 127;
        var _SECS_TO_MILLISECS = 1000.0;
        var _playNote = function (midiValues, durationInSecs, delayInSecs) {
            $timeout(function () {
                MIDI.chordOn(_MIDI_CHANNEL, midiValues, _MIDI_VELOCITY, 0);
                MIDI.chordOff(_MIDI_CHANNEL, midiValues, durationInSecs);
            }, delayInSecs * _SECS_TO_MILLISECS);
        };
        /**
         * Plays a music phrase. The input is given as an Array of notes. Each
         * note is represented as an object with three key-value pairs:
         * - midiValue: Integer. The midi value of the note.
         * - duration: Float. A decimal number representing the length of the note,
         *     in seconds.
         * - start: Float. A decimal number representing the time offset (after the
         *     beginning of the phrase) at which to start playing the note.
         */
        var _playMusicPhrase = function (notes) {
            MIDI.Player.stop();
            for (var i = 0; i < notes.length; i++) {
                _playNote([notes[i].midiValue], notes[i].duration, notes[i].start);
            }
        };
        return {
            playMusicPhrase: function (notes) {
                _playMusicPhrase(notes);
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MusicNotesInput/directives/oppia-interactive-music-notes-input.directive.ts":
/*!*************************************************************************************************************!*\
  !*** ./extensions/interactions/MusicNotesInput/directives/oppia-interactive-music-notes-input.directive.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directives for the MusicNotesInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! interactions/MusicNotesInput/directives/music-notes-input-rules.service.ts */ "./extensions/interactions/MusicNotesInput/directives/music-notes-input-rules.service.ts");
__webpack_require__(/*! interactions/MusicNotesInput/directives/music-phrase-player.service.ts */ "./extensions/interactions/MusicNotesInput/directives/music-phrase-player.service.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! interactions/interactions-extension.constants.ajs.ts */ "./extensions/interactions/interactions-extension.constants.ajs.ts");
angular.module('oppia').directive('oppiaInteractiveMusicNotesInput', [
    'CurrentInteractionService', 'HtmlEscaperService',
    'MusicNotesInputRulesService', 'MusicPhrasePlayerService',
    'UrlInterpolationService',
    'EVENT_NEW_CARD_AVAILABLE', 'NOTE_NAMES_TO_MIDI_VALUES',
    function (CurrentInteractionService, HtmlEscaperService, MusicNotesInputRulesService, MusicPhrasePlayerService, UrlInterpolationService, EVENT_NEW_CARD_AVAILABLE, NOTE_NAMES_TO_MIDI_VALUES) {
        return {
            restrict: 'E',
            scope: {
                getLastAnswer: '&lastAnswer',
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MusicNotesInput/directives/' +
                'music-notes-input-interaction.directive.html'),
            link: function (scope, element, attrs) {
                // This is needed in order for the scope to be retrievable during Karma
                // unit testing. See http://stackoverflow.com/a/29833832 for more
                // details.
                element[0].getControllerScope = function () {
                    return scope;
                };
                scope.SOUNDFONT_URL =
                    '/third_party/static/midi-js-a8a842/examples/soundfont/';
                scope.sequenceToGuess = HtmlEscaperService.escapedJsonToObj(attrs.sequenceToGuessWithValue);
                scope.interactionIsActive = (scope.getLastAnswer() === null);
                scope.initialSequence = scope.interactionIsActive ?
                    HtmlEscaperService.escapedJsonToObj(attrs.initialSequenceWithValue) :
                    scope.getLastAnswer();
                scope.$on(EVENT_NEW_CARD_AVAILABLE, function () {
                    scope.interactionIsActive = false;
                    scope.initialSequence = scope.getLastAnswer();
                    scope.reinitStaff();
                });
                /**
                 * A note Object has a baseNoteMidiNumber and an offset property. For
                 * example, C#4 would be -> note = {baseNoteMidiNumber: 61, offset: 1};
                 *
                 * A readableNote Object has a readableNoteName property. For example,
                 * Gb5 would be -> readableNote = {readableNoteName: 'Gb5'};
                 */
                /**
                 * Array to hold the notes placed on staff. Notes are represented as
                 * objects with two keys: baseNoteMidiNumber and offset. The
                 * baseNoteMidiNumber is an integer value denoting the MIDI number of
                 * the staff-line the note is on, and the offset is either -1, 0 or 1,
                 * denoting a flat, natural or sharp respectively.
                 */
                scope.noteSequence = [];
                scope._addNoteToNoteSequence = function (note) {
                    scope.noteSequence.push({
                        note: note
                    });
                };
                // Remove a specific note with given noteId from noteSequence. If given
                // noteId is not in noteSequence, nothing will be removed.
                scope._removeNotesFromNoteSequenceWithId = function (noteId) {
                    for (var i = 0; i < scope.noteSequence.length; i++) {
                        if (scope.noteSequence[i].note.noteId === noteId) {
                            scope.noteSequence.splice(i, 1);
                        }
                    }
                };
                // Sorts noteSequence elements according to the return value of the
                // compareNoteStarts function.
                scope._sortNoteSequence = function () {
                    scope.noteSequence.sort(compareNoteStarts);
                };
                /**
                 * Counter to create unique id for each note dropped on staff.
                 */
                scope._currentNoteId = 0;
                scope.generateNoteId = function () {
                    scope._currentNoteId += 1;
                    return 'note_id_' + (scope._currentNoteId - 1);
                };
                var NOTE_TYPE_NATURAL = 0;
                // TODO(wagnerdmike): More notes types will be added to NOTE_TYPES.
                var NOTE_TYPES = [NOTE_TYPE_NATURAL];
                var NOTES_ON_LINES = ['E4', 'G4', 'B4', 'D5', 'F5'];
                var LEDGER_LINE_NOTES = ['C4', 'A5'];
                var verticalGridKeys = [
                    81, 79, 77, 76, 74, 72, 71, 69, 67, 65, 64, 62, 60
                ];
                // Highest number of notes that can fit on the staff at any given time.
                var MAXIMUM_NOTES_POSSIBLE = 8;
                var noteChoicesElt = element.find('.oppia-music-input-note-choices');
                var staffContainerElt = element.find('.oppia-music-input-staff');
                // Staff has to be reinitialized every time that the staff is resized or
                // displayed. The staffContainerElt and all subsequent measurements
                // must be recalculated in order for the grid to work properly.
                scope.reinitStaff = function () {
                    $('.oppia-music-input-valid-note-area').css('visibility', 'hidden');
                    setTimeout(function () {
                        $('.oppia-music-input-valid-note-area').css('visibility', 'visible');
                        scope.init();
                    }, 20);
                };
                // When page is in the smaller one card format, reinitialize staff after
                // the user navigates to the Interaction Panel. Otherwise the dimensions
                // for the staff will be incorrectly calculated.
                scope.$on('showInteraction', function () {
                    scope.reinitStaff();
                });
                // Creates draggable notes and droppable staff.
                scope.init = function () {
                    scope.CONTAINER_WIDTH = staffContainerElt.width();
                    scope.CONTAINER_HEIGHT = 0.2 * scope.CONTAINER_WIDTH;
                    // The grid rectangle dimensions defining the grid which the notes
                    // fall on.
                    scope.HORIZONTAL_GRID_SPACING = scope.CONTAINER_WIDTH /
                        (MAXIMUM_NOTES_POSSIBLE + 1);
                    scope.VERTICAL_GRID_SPACING = scope.CONTAINER_HEIGHT /
                        verticalGridKeys.length;
                    var staffTop = computeStaffTop();
                    var staffBottom = computeStaffBottom();
                    // The farthest edge of the staff. If a note is placed beyond this
                    // position, it will be discarded.
                    var RIGHT_EDGE_OF_STAFF_POSITION = element.find('.oppia-music-input-valid-note-area').width();
                    clearNotesFromStaff();
                    initPalette();
                    clearDroppableStaff();
                    buildDroppableStaff();
                    repaintNotes();
                };
                // Initial notes are placed on the staff at the
                // start of the exploration and can be removed by the learner.
                var initializeNoteSequence = function (initialNotesToAdd) {
                    for (var i = 0; i < initialNotesToAdd.length; i++) {
                        var initialNote = _convertReadableNoteToNote(initialNotesToAdd[i]);
                        initialNote = Object.assign(initialNote, {
                            noteId: scope.generateNoteId(),
                            noteStart: {
                                num: i,
                                den: 1
                            }
                        });
                        scope._addNoteToNoteSequence(initialNote);
                    }
                };
                // Gets the staff top by getting the first staff line's position and
                // subtracting one vertical grid space from it.
                var computeStaffTop = function () {
                    return (getStaffLinePositions()[verticalGridKeys[0]] -
                        scope.VERTICAL_GRID_SPACING);
                };
                // Gets the staff bottom position by adding the staff top position value
                // with the total sum of all the vertical grid spaces (staff lines).
                var computeStaffBottom = function () {
                    return computeStaffTop() + (scope.VERTICAL_GRID_SPACING * verticalGridKeys.length);
                };
                // Removes all notes from staff.
                var clearNotesFromStaff = function () {
                    element.find('.oppia-music-input-note-choices div').remove();
                };
                // Removes all droppable staff lines.
                var clearDroppableStaff = function () {
                    element.find('.oppia-music-input-staff div').remove();
                };
                // Returns an Object containing the baseNoteMidiValues (81, 79, 77...)
                // as keys and the vertical positions of the staff lines as values.
                var getStaffLinePositions = function () {
                    var staffLinePositionsArray = [];
                    var staffLinePositions = {};
                    element.find('.oppia-music-input-staff div.oppia-music-staff-position').each(function () {
                        staffLinePositionsArray.push($(this).position().top);
                    });
                    for (var i = 0; i < staffLinePositionsArray.length; i++) {
                        staffLinePositions[verticalGridKeys[i]] = (staffLinePositionsArray[i]);
                    }
                    return staffLinePositions;
                };
                // Creates the notes and helper-clone notes for the noteChoices div.
                var initPalette = function () {
                    var noteChoicesDiv = element.find('.oppia-music-input-note-choices');
                    var validNoteArea = element.find('.oppia-music-input-valid-note-area');
                    for (var i = 0; i < NOTE_TYPES.length; i++) {
                        var className = 'oppia-music-input-natural-note';
                        var innerDiv = $('<div></div>')
                            .data('noteType', NOTE_TYPES[i])
                            .addClass(function (index, currentClassName) {
                            var addedClass = null;
                            if ($(this).data('noteType') === NOTE_TYPE_NATURAL) {
                                addedClass = 'oppia-music-input-natural-note';
                                $(this).addClass('oppia-music-input-natural-note');
                            }
                            return addedClass;
                        });
                        if (scope.interactionIsActive) {
                            innerDiv.draggable({
                                // Keeps note from being placed on top of the clef.
                                containment: validNoteArea,
                                cursor: 'pointer',
                                helper: 'clone',
                                stack: '.oppia-music-input-note-choices div',
                                grid: [scope.HORIZONTAL_GRID_SPACING, 1],
                                stop: function (evt, ui) {
                                    if (!isCloneOffStaff($(ui.helper))) {
                                        // This makes the helper clone a new draggable note.
                                        var helperClone = $(ui.helper)
                                            // Retains original note type (e.g. natural, flat, sharp).
                                            .data('noteType', $(this).data('noteType'))
                                            .draggable({
                                            // The leftPosBeforeDrag helps with the sorting of user
                                            // sequence.
                                            start: function () {
                                                $(this).data('leftPosBeforeDrag', $(this).position().left);
                                            },
                                            containment: '.oppia-music-input-valid-note-area',
                                            cursor: 'pointer',
                                            grid: [scope.HORIZONTAL_GRID_SPACING, 1],
                                            // Stops helper clone from being cloned again.
                                            helper: 'original',
                                            stack: '.oppia-music-input-note-choices div',
                                            tolerance: 'intersect',
                                            revert: function () {
                                                var draggableOptions = $(this);
                                                // If note is out of droppable or off staff,
                                                // remove it.
                                                if (isCloneOffStaff(draggableOptions)) {
                                                    scope._removeNotesFromNoteSequenceWithId(draggableOptions.data('noteId'));
                                                    scope._sortNoteSequence();
                                                    draggableOptions.remove();
                                                }
                                            }
                                        });
                                    }
                                }
                            });
                        }
                        noteChoicesDiv.append(innerDiv);
                    }
                };
                var repaintNotes = function () {
                    var noteChoicesDiv = element.find('.oppia-music-input-note-choices');
                    for (var i = 0; i < scope.noteSequence.length; i++) {
                        var innerDiv = $('<div></div>')
                            .data('noteType', NOTE_TYPE_NATURAL)
                            .data('noteId', scope.noteSequence[i].note.noteId)
                            .addClass('oppia-music-input-natural-note')
                            .addClass('oppia-music-input-on-staff')
                            // Position notes horizontally by their noteStart positions and
                            // vertically by the midi value they hold.
                            .css({
                            top: getVerticalPosition(scope.noteSequence[i].note.baseNoteMidiNumber) -
                                scope.VERTICAL_GRID_SPACING / 2.0,
                            left: getHorizontalPosition(getNoteStartAsFloat(scope.noteSequence[i].note)),
                            position: 'absolute'
                        });
                        if (scope.interactionIsActive) {
                            innerDiv.draggable({
                                // Keeps note from being placed on top of the clef.
                                containment: '.oppia-music-input-valid-note-area',
                                cursor: 'pointer',
                                stack: '.oppia-music-input-note-choices div',
                                grid: [scope.HORIZONTAL_GRID_SPACING, 1],
                                start: function () {
                                    $(this).data('leftPosBeforeDrag', $(this).position().left);
                                },
                                revert: function () {
                                    var draggableOptions = $(this);
                                    // If note is out of droppable or off staff, remove it.
                                    if (isCloneOffStaff(draggableOptions)) {
                                        scope._removeNotesFromNoteSequenceWithId(draggableOptions.data('noteId'));
                                        scope._sortNoteSequence();
                                        draggableOptions.remove();
                                    }
                                }
                            });
                        }
                        noteChoicesDiv.append(innerDiv);
                    }
                    repaintLedgerLines();
                };
                // Creates a staff of droppable lines.
                var buildDroppableStaff = function () {
                    var lineValues = Object.keys(NOTE_NAMES_TO_MIDI_VALUES);
                    for (var i = 0; i < lineValues.length; i++) {
                        var staffLineDiv = $('<div></div>')
                            .addClass('oppia-music-staff-position')
                            .css('height', scope.VERTICAL_GRID_SPACING)
                            .data('lineValue', lineValues[i])
                            .droppable({
                            accept: '.oppia-music-input-note-choices div',
                            // Over and out are used to remove helper clone if
                            // note is not placed on staff.
                            over: function (evt, ui) {
                                var lineValue = $(evt.target).data('lineValue');
                                // Draws a ledger-line when note is hovering over staff-line.
                                if (isLedgerLineNote(lineValue)) {
                                    // Position of current dropped note.
                                    var leftPos = ui.helper.position().left;
                                    var topPos = $(evt.target).position().top;
                                    var noteId = $(ui.helper).data('noteId');
                                    if (noteId === undefined) {
                                        noteId = scope.generateNoteId();
                                        $(ui.helper).data('noteId', noteId);
                                    }
                                    drawLedgerLine(topPos, leftPos);
                                }
                            },
                            out: function () {
                                // Removes a ledger line when note is dragged out of
                                // droppable.
                                $('.oppia-music-input-ledger-line').last().hide();
                            },
                            hoverClass: 'oppia-music-input-hovered',
                            // Handles note drops and appends new note to noteSequence.
                            drop: function (evt, ui) {
                                // Makes helper clone not disappear when dropped on staff.
                                $.ui.ddmanager.current.cancelHelperRemoval = true;
                                $('.oppia-music-input-ledger-line').last().hide();
                                // Previous position of note or undefined.
                                var startPos = $(ui.helper).data('leftPosBeforeDrag');
                                // Position of current dropped note.
                                var leftPos = ui.helper.position().left;
                                var leftPosBeforeMove = leftPos;
                                var topPos = $(evt.target).position().top;
                                // The staff line's value.
                                var lineValue = $(this).data('lineValue');
                                var noteType = ui.draggable.data('noteType');
                                // A note that is dragged from noteChoices box
                                // has an undefined noteId. This sets the id.
                                // Otherwise, the note has an id.
                                var noteId = $(ui.helper).data('noteId');
                                if (noteId === undefined) {
                                    noteId = scope.generateNoteId();
                                    $(ui.helper).data('noteId', noteId);
                                }
                                // Creates a note object.
                                var note = {
                                    baseNoteMidiNumber: NOTE_NAMES_TO_MIDI_VALUES[lineValue],
                                    offset: parseInt(noteType, 10),
                                    noteId: noteId,
                                    noteStart: null
                                };
                                // When a note is moved, its previous state must be removed
                                // from the noteSequence. Otherwise, the sequence would
                                // erroneously hold notes that have been moved to other
                                // positions. Also this allows an on-staff note's position
                                // to be freed up if it is moved.
                                scope._removeNotesFromNoteSequenceWithId(note.noteId);
                                // Makes sure that a note can move vertically on it's
                                // position.
                                if (startPos !== leftPos) {
                                    // Moves the note to the next available spot on the staff.
                                    // If the staff is full, note is moved off staff,
                                    // and thus removed.
                                    while (checkIfNotePositionTaken(leftPos)) {
                                        leftPos += scope.HORIZONTAL_GRID_SPACING;
                                    }
                                    $(ui.helper).css({
                                        top: topPos,
                                        left: leftPos
                                    });
                                    if (Math.floor(leftPos) > Math.floor(getHorizontalPosition(MAXIMUM_NOTES_POSSIBLE - 1))) {
                                        $(ui.helper).remove();
                                        repaintLedgerLines();
                                        return;
                                    }
                                }
                                // Adjusts note so it is right on top of the staff line by
                                // calculating half of the VERTICAL_GRID_SPACING and
                                // subtracting that from its current top Position.
                                $(ui.helper).css({
                                    top: topPos - (scope.VERTICAL_GRID_SPACING / 2.0)
                                });
                                // Add noteStart property to note object.
                                if (getNoteStartFromLeftPos(leftPos) !== undefined) {
                                    note.noteStart =
                                        getNoteStartFromLeftPos(leftPos).note.noteStart;
                                }
                                else {
                                    repaintLedgerLines();
                                    return;
                                }
                                scope._addNoteToNoteSequence(note);
                                scope._sortNoteSequence();
                                // Sounds the note when it is dropped onto staff.
                                playSequence([[_convertNoteToMidiPitch(note)]]);
                                $(ui.helper).addClass('oppia-music-input-on-staff');
                                repaintLedgerLines();
                            }
                        });
                        element.find('.oppia-music-input-staff').append(staffLineDiv);
                        if (i === 0) {
                            scope.topPositionForCenterOfTopStaffLine =
                                $(staffLineDiv).position().top + scope.VERTICAL_GRID_SPACING;
                        }
                        var noteName = lineValues[i];
                        // Check if noteName is a valid staff line and if so, paint staff
                        // line.
                        if (NOTES_ON_LINES.indexOf(noteName) !== -1) {
                            staffLineDiv.append($('<div></div>')
                                // Positions and centers the staff line directly on top of its
                                // associated droppable.
                                .css('margin-top', scope.VERTICAL_GRID_SPACING / 2.5)
                                .addClass('oppia-music-staff-line'));
                        }
                    }
                };
                // When compareNoteStarts(a, b) returns less than 0, a is less than b.
                // When compareNoteStarts(a, b) returns 0, a is equal to b.
                // When compareNoteStarts(a, b) returns greater than 0, a is greater
                //   than b.
                var compareNoteStarts = function (a, b) {
                    if (a.note.noteStart && b.note.noteStart) {
                        return (a.note.noteStart.num * b.note.noteStart.den -
                            a.note.noteStart.den * b.note.noteStart.num) /
                            (a.note.noteStart.den * b.note.noteStart.den);
                    }
                };
                // If a note position is taken, return true,
                // otherwise the position is available
                var checkIfNotePositionTaken = function (leftPos) {
                    if (getNoteStartFromLeftPos(leftPos)) {
                        var newNoteToCheck = getNoteStartFromLeftPos(leftPos);
                        if (newNoteToCheck.note.noteStart !== undefined) {
                            for (var i = 0; i < scope.noteSequence.length; i++) {
                                var noteComparison = compareNoteStarts(scope.noteSequence[i], newNoteToCheck);
                                if (noteComparison === 0) {
                                    return true;
                                }
                            }
                            return false;
                        }
                    }
                    return false;
                };
                // Converts a note's leftPosition to a noteStart object by checking if
                // leftPos is close to available horizontal grid position. If there is
                // not a close match, return undefined.
                var getNoteStartFromLeftPos = function (leftPos) {
                    for (var i = 0; i < MAXIMUM_NOTES_POSSIBLE; i++) {
                        // If the difference between leftPos and a horizontalGrid Position
                        // is less than 2, then they are close enough to set a position.
                        // This gives some wiggle room for rounding differences.
                        if (Math.abs(leftPos - getHorizontalPosition(i)) < 2) {
                            var note = {
                                noteStart: {
                                    num: i,
                                    den: 1
                                }
                            };
                            return {
                                note: note
                            };
                        }
                    }
                    return undefined;
                };
                var getNoteStartAsFloat = function (note) {
                    return note.noteStart.num / note.noteStart.den;
                };
                // Clear noteSequence values and remove all notes
                // and Ledger Lines from the staff.
                scope.clearSequence = function () {
                    scope.noteSequence = [];
                    element.find('.oppia-music-input-on-staff').remove();
                    element.find('.oppia-music-input-ledger-line').remove();
                };
                // Converts the midiValue of a droppable line that a note is on
                // into a top position.
                var getVerticalPosition = function (baseNoteMidiNumber) {
                    return getStaffLinePositions()[baseNoteMidiNumber];
                };
                /**
                 * Gets a horizontal grid position based on the position of note-choices
                 * div. '.oppia-music-input-note-choices div:first-child' (the note that
                 * gets cloned to create all other subsequent notes) is the last
                 * horizontal position, so to determine the others values, we multiply
                 * the MAXIMUM_NOTES_POSSIBLE that will fit on the staff by the
                 * scope.HORIZONTAL_GRID_SPACING and subtract that from the last
                 * Horizontal Position value and return the result.
                 */
                var getHorizontalPosition = function (noteStartAsFloat) {
                    var lastHorizontalPositionOffset = element.find('.oppia-music-input-note-choices div:first-child').position().left;
                    var leftOffset = lastHorizontalPositionOffset - ((MAXIMUM_NOTES_POSSIBLE - 1) *
                        scope.HORIZONTAL_GRID_SPACING);
                    return leftOffset + (noteStartAsFloat * scope.HORIZONTAL_GRID_SPACING);
                };
                var isCloneOffStaff = function (helperClone) {
                    return (!(helperClone.position().top > scope.staffTop &&
                        helperClone.position().top < scope.staffBottom));
                };
                var isLedgerLineNote = function (lineValue) {
                    return LEDGER_LINE_NOTES.indexOf(lineValue) !== -1;
                };
                var drawLedgerLine = function (topPos, leftPos) {
                    var ledgerLineDiv = $('<div></div>')
                        .addClass('oppia-music-input-ledger-line oppia-music-input-natural-note')
                        .droppable({
                        accept: '.oppia-music-input-note-choices div',
                        // When a ledgerLine note is moved out of its droppable,
                        // remove ledger line.
                        out: function () {
                            $(this).hide();
                        },
                        hoverClass: 'oppia-music-input-hovered',
                        containment: '.oppia-music-input-valid-note-area'
                    })
                        // Adjust ledger line to be centered with the note.
                        .css({
                        left: leftPos - 1,
                        // 0.4 is a little less than half to allow for the height of the
                        // ledger line when considering its placement.
                        top: topPos + scope.VERTICAL_GRID_SPACING * 0.4
                    });
                    element.find('.oppia-music-input-staff').append(ledgerLineDiv);
                };
                var repaintLedgerLines = function () {
                    for (var i = 0; i < scope.noteSequence.length; i++) {
                        var note = scope.noteSequence[i].note;
                        var lineValue = _getCorrespondingNoteName(note.baseNoteMidiNumber);
                        if (isLedgerLineNote(lineValue)) {
                            drawLedgerLine(getVerticalPosition(note.baseNoteMidiNumber), getHorizontalPosition(getNoteStartAsFloat(note)));
                        }
                    }
                };
                var _getCorrespondingNoteName = function (midiNumber) {
                    var correspondingNoteName = null;
                    for (var noteName in NOTE_NAMES_TO_MIDI_VALUES) {
                        if (NOTE_NAMES_TO_MIDI_VALUES[noteName] === midiNumber) {
                            correspondingNoteName = noteName;
                            break;
                        }
                    }
                    if (correspondingNoteName === null) {
                        console.error('Invalid MIDI pitch: ' + midiNumber);
                    }
                    return correspondingNoteName;
                };
                /*
                 * Returns a note object with a readable note name, such as Eb5, A5 or
                 * F#4, given a note object with baseNoteMidiNumber and sharp/flat
                 * offset properties. For example, if note.baseNoteMidiNumber = 64 and
                 * note.offset = -1, this will return {'readableNoteName': 'Eb4'}
                 * (since 64 is the baseNoteMidiNumber for 'E', and -1 indicates a
                 * flat).
                 */
                var _convertNoteToReadableNote = function (note) {
                    if (note.offset !== -1 && note.offset !== 0 && note.offset !== 1) {
                        console.error('Invalid note offset: ' + note.offset);
                    }
                    var correspondingNoteName = _getCorrespondingNoteName(note.baseNoteMidiNumber);
                    var accidental = (note.offset === 1 ? '#' :
                        note.offset === 0 ? '' : 'b');
                    return {
                        readableNoteName: correspondingNoteName[0] + accidental + correspondingNoteName[1]
                    };
                };
                /*
                 * Returns a note object with a baseNoteMidiNumber and an
                 * offset property, given a note object with a readableNoteName
                 * property. For example, if note.readableNoteName = 'Eb4' this will
                 * return {'baseNoteMidiNumber': 64, 'offset': -1} (since 64 is the
                 * baseNoteMidiNumber for 'E', and -1 indicates a flat).
                 */
                var _convertReadableNoteToNote = function (readableNote) {
                    var readableNoteName = readableNote.readableNoteName;
                    if (readableNoteName.length === 2) {
                        // This is a natural note.
                        return {
                            baseNoteMidiNumber: NOTE_NAMES_TO_MIDI_VALUES[readableNoteName],
                            offset: 0
                        };
                    }
                    else if (readableNoteName.length === 3) {
                        // This is a note with an accidental.
                        var offset = (readableNoteName[1] === '#') ? 1 :
                            (readableNoteName[1] === 'b') ? -1 : null;
                        if (offset === null) {
                            console.error('Invalid readable note: ' + readableNoteName);
                        }
                        return {
                            baseNoteMidiNumber: NOTE_NAMES_TO_MIDI_VALUES[readableNoteName[0] + readableNoteName[2]],
                            offset: offset
                        };
                    }
                    else {
                        // This is not a valid readableNote.
                        console.error('Invalid readable note: ' + readableNote);
                    }
                };
                // For each note in a sequence, add a noteDuration property.
                // TODO(wagnerdmike): - add more options for note durations.
                var _makeAllNotesHaveDurationOne = function (noteArray) {
                    for (var i = 0; i < noteArray.length; i++) {
                        noteArray[i].noteDuration = {
                            num: 1,
                            den: 1
                        };
                    }
                    return noteArray;
                };
                scope.submitAnswer = function () {
                    var readableSequence = [];
                    for (var i = 0; i < scope.noteSequence.length; i++) {
                        readableSequence.push(_convertNoteToReadableNote(scope.noteSequence[i].note));
                    }
                    readableSequence = _makeAllNotesHaveDurationOne(readableSequence);
                    CurrentInteractionService.onSubmit(readableSequence, MusicNotesInputRulesService);
                };
                CurrentInteractionService.registerCurrentInteraction(scope.submitAnswer, null);
                /** *****************************************************************
                 * Functions involving MIDI playback.
                 ******************************************************************/
                scope.playSequenceToGuess = function () {
                    var noteSequenceToGuess = [];
                    for (var i = 0; i < scope.sequenceToGuess.length; i++) {
                        noteSequenceToGuess.push(_convertReadableNoteToNote(scope.sequenceToGuess[i]));
                    }
                    playSequence(convertSequenceToGuessToMidiSequence(noteSequenceToGuess));
                };
                scope.playCurrentSequence = function () {
                    playSequence(convertNoteSequenceToMidiSequence(scope.noteSequence));
                };
                // Takes an input > 0, converts to a noteStart object and returns a
                // float representation of the noteStart position.
                var getNoteStart = function (noteIndex) {
                    return getNoteStartAsFloat({
                        noteStart: {
                            num: noteIndex,
                            den: 1
                        }
                    });
                };
                // Input is a midiSequence, which is an array of arrays, in the form of
                // [[72], [62], [67, 71, 74]]. An inner array with more than one value
                // is treated like a chord and all its values are played back
                // simultaneously.
                var playSequence = function (midiSequence) {
                    var notes = [];
                    for (var i = 0; i < midiSequence.length; i++) {
                        for (var j = 0; j < midiSequence[i].length; j++) {
                            notes.push({
                                midiValue: midiSequence[i][j],
                                duration: 1.0,
                                start: getNoteStart(i)
                            });
                        }
                    }
                    MusicPhrasePlayerService.playMusicPhrase(notes);
                };
                // A MIDI pitch is the baseNoteMidiNumber of the note plus the offset.
                var _convertNoteToMidiPitch = function (note) {
                    return note.baseNoteMidiNumber + note.offset;
                };
                // Return the MIDI value for each note in the sequence.
                // TODO(wagnerdmike): - add chord functionality.
                var convertSequenceToGuessToMidiSequence = function (sequence) {
                    var midiSequence = [];
                    for (var i = 0; i < sequence.length; i++) {
                        if (sequence[i].hasOwnProperty('baseNoteMidiNumber')) {
                            midiSequence.push([_convertNoteToMidiPitch(sequence[i])]);
                        }
                        else {
                            console.error('Invalid note: ' + sequence[i]);
                        }
                    }
                    return midiSequence;
                };
                // Return the MIDI value for each note in the sequence.
                // TODO(wagnerdmike): - add chord functionality.
                var convertNoteSequenceToMidiSequence = function (sequence) {
                    var midiSequence = [];
                    for (var i = 0; i < sequence.length; i++) {
                        if (sequence[i].hasOwnProperty('note')) {
                            // Single note.
                            midiSequence.push([_convertNoteToMidiPitch(sequence[i].note)]);
                        }
                        else {
                            console.error('Invalid note: ' + sequence[i]);
                        }
                    }
                    return midiSequence;
                };
                // Initialization code.
                initializeNoteSequence(scope.initialSequence);
                scope.init();
                // Sets grid positions, displays the staff and note,
                // and then initializes the view after staff has loaded.
                $(document).ready(function () {
                    scope.reinitStaff();
                });
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MusicNotesInput/directives/oppia-response-music-notes-input.directive.ts":
/*!**********************************************************************************************************!*\
  !*** ./extensions/interactions/MusicNotesInput/directives/oppia-response-music-notes-input.directive.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directives for the MusicNotesInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseMusicNotesInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MusicNotesInput/directives/' +
                'music-notes-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    var _notes = [];
                    for (var i = 0; i < _answer.length; i++) {
                        if (_answer[i].readableNoteName) {
                            _notes.push(_answer[i].readableNoteName);
                        }
                    }
                    if (_notes.length > 0) {
                        ctrl.displayedAnswer = _notes.join(', ');
                    }
                    else {
                        ctrl.displayedAnswer = 'No answer given.';
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MusicNotesInput/directives/oppia-short-response-music-notes-input.directive.ts":
/*!****************************************************************************************************************!*\
  !*** ./extensions/interactions/MusicNotesInput/directives/oppia-short-response-music-notes-input.directive.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directives for the MusicNotesInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseMusicNotesInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MusicNotesInput/directives/' +
                'music-notes-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    var _notes = [];
                    for (var i = 0; i < _answer.length; i++) {
                        if (_answer[i].readableNoteName) {
                            _notes.push(_answer[i].readableNoteName);
                        }
                    }
                    if (_notes.length > 0) {
                        ctrl.displayedAnswer = _notes.join(', ');
                    }
                    else {
                        ctrl.displayedAnswer = 'No answer given.';
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MusicNotesInput/static/music_notes_input.css":
/*!******************************************************************************!*\
  !*** ./extensions/interactions/MusicNotesInput/static/music_notes_input.css ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./music_notes_input.css */ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/MusicNotesInput/static/music_notes_input.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./extensions/interactions/NumberWithUnits/NumberWithUnits.ts":
/*!********************************************************************!*\
  !*** ./extensions/interactions/NumberWithUnits/NumberWithUnits.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for NumberWithUnits interaction.
 */
__webpack_require__(/*! interactions/NumberWithUnits/directives/number-with-units-rules.service.ts */ "./extensions/interactions/NumberWithUnits/directives/number-with-units-rules.service.ts");
__webpack_require__(/*! interactions/NumberWithUnits/directives/number-with-units-validation.service.ts */ "./extensions/interactions/NumberWithUnits/directives/number-with-units-validation.service.ts");
__webpack_require__(/*! interactions/NumberWithUnits/directives/oppia-interactive-number-with-units.directive.ts */ "./extensions/interactions/NumberWithUnits/directives/oppia-interactive-number-with-units.directive.ts");
__webpack_require__(/*! interactions/NumberWithUnits/directives/oppia-response-number-with-units.directive.ts */ "./extensions/interactions/NumberWithUnits/directives/oppia-response-number-with-units.directive.ts");
__webpack_require__(/*! interactions/NumberWithUnits/directives/oppia-short-response-number-with-units.directive.ts */ "./extensions/interactions/NumberWithUnits/directives/oppia-short-response-number-with-units.directive.ts");


/***/ }),

/***/ "./extensions/interactions/NumberWithUnits/directives/number-with-units-rules.service.ts":
/*!***********************************************************************************************!*\
  !*** ./extensions/interactions/NumberWithUnits/directives/number-with-units-rules.service.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Rules service for the interaction.
 */
// TODO(#7403): Convert this to partial imports.
var mathjs_1 = __importDefault(__webpack_require__(/*! mathjs */ "./node_modules/mathjs/index.js"));
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
__webpack_require__(/*! domain/objects/NumberWithUnitsObjectFactory.ts */ "./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts");
// Rules service for number with units interaction.
angular.module('oppia').factory('NumberWithUnitsRulesService', [
    'NumberWithUnitsObjectFactory',
    function (NumberWithUnitsObjectFactory) {
        try {
            NumberWithUnitsObjectFactory.createCurrencyUnits();
        }
        catch (parsingError) { }
        return {
            IsEqualTo: function (answer, inputs) {
                // Returns true only if input is exactly equal to answer.
                answer = NumberWithUnitsObjectFactory.fromDict(answer);
                inputs = NumberWithUnitsObjectFactory.fromDict(inputs.f);
                var answerString = answer.toMathjsCompatibleString();
                var inputsString = inputs.toMathjsCompatibleString();
                var answerList = NumberWithUnitsObjectFactory.fromRawInputString(answerString).toDict();
                var inputsList = NumberWithUnitsObjectFactory.fromRawInputString(inputsString).toDict();
                return angular.equals(answerList, inputsList);
            },
            IsEquivalentTo: function (answer, inputs) {
                answer = NumberWithUnitsObjectFactory.fromDict(answer);
                inputs = NumberWithUnitsObjectFactory.fromDict(inputs.f);
                if (answer.type === 'fraction') {
                    answer.type = 'real';
                    answer.real = answer.fraction.toFloat();
                }
                if (inputs.type === 'fraction') {
                    inputs.type = 'real';
                    inputs.real = inputs.fraction.toFloat();
                }
                var answerString = answer.toMathjsCompatibleString();
                var inputsString = inputs.toMathjsCompatibleString();
                return mathjs_1.default.unit(answerString).equals(mathjs_1.default.unit(inputsString));
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/NumberWithUnits/directives/number-with-units-validation.service.ts":
/*!****************************************************************************************************!*\
  !*** ./extensions/interactions/NumberWithUnits/directives/number-with-units-validation.service.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the number with units interaction.
 */
// TODO(#7403): Convert this to partial imports.
var mathjs_1 = __importDefault(__webpack_require__(/*! mathjs */ "./node_modules/mathjs/index.js"));
__webpack_require__(/*! domain/objects/NumberWithUnitsObjectFactory.ts */ "./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts");
__webpack_require__(/*! interactions/base-interaction-validation.service.ts */ "./extensions/interactions/base-interaction-validation.service.ts");
angular.module('oppia').factory('NumberWithUnitsValidationService', [
    'NumberWithUnitsObjectFactory', 'baseInteractionValidationService',
    'WARNING_TYPES',
    function (NumberWithUnitsObjectFactory, baseInteractionValidationService, WARNING_TYPES) {
        return {
            getCustomizationArgsWarnings: function (customizationArgs) {
                return [];
            },
            getAllWarnings: function (stateName, customizationArgs, answerGroups, defaultOutcome) {
                var warningsList = [];
                warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
                try {
                    NumberWithUnitsObjectFactory.createCurrencyUnits();
                }
                catch (parsingError) { }
                var checkEquality = function (earlierRule, laterRule) {
                    var answer = NumberWithUnitsObjectFactory.fromDict(earlierRule.inputs.f);
                    var inputs = NumberWithUnitsObjectFactory.fromDict(laterRule.inputs.f);
                    var answerString = answer.toMathjsCompatibleString();
                    var inputsString = inputs.toMathjsCompatibleString();
                    var answerList = NumberWithUnitsObjectFactory.fromRawInputString(answerString).toDict();
                    var inputsList = NumberWithUnitsObjectFactory.fromRawInputString(inputsString).toDict();
                    return angular.equals(answerList, inputsList);
                };
                var checkEquivalency = function (earlierRule, laterRule) {
                    var earlierInput = NumberWithUnitsObjectFactory.fromDict(earlierRule.inputs.f);
                    var laterInput = NumberWithUnitsObjectFactory.fromDict(laterRule.inputs.f);
                    if (earlierInput.type === 'fraction') {
                        earlierInput.type = 'real';
                        earlierInput.real = earlierInput.fraction.toFloat();
                    }
                    if (laterInput.type === 'fraction') {
                        laterInput.type = 'real';
                        laterInput.real = laterInput.fraction.toFloat();
                    }
                    var earlierInputString = earlierInput.toMathjsCompatibleString();
                    var laterInputString = laterInput.toMathjsCompatibleString();
                    try {
                        return mathjs_1.default.unit(laterInputString).equals(mathjs_1.default.unit(earlierInputString));
                    }
                    catch (e) {
                        var additionalInfo = ('\nlaterInput: ' + JSON.stringify(laterInput.toDict()) +
                            '\nearlierInput: ' + JSON.stringify(earlierInput.toDict()));
                        e.message += additionalInfo;
                        throw e;
                    }
                };
                var ranges = [];
                for (var i = 0; i < answerGroups.length; i++) {
                    var rules = answerGroups[i].rules;
                    for (var j = 0; j < rules.length; j++) {
                        var rule = rules[j];
                        var range = {
                            answerGroupIndex: i + 1,
                            ruleIndex: j + 1,
                        };
                        for (var k = 0; k < ranges.length; k++) {
                            var earlierRule = answerGroups[ranges[k].answerGroupIndex - 1].
                                rules[ranges[k].ruleIndex - 1];
                            if (earlierRule.type === 'IsEqualTo' &&
                                rule.type === 'IsEqualTo') {
                                if (checkEquality(earlierRule, rule)) {
                                    warningsList.push({
                                        type: WARNING_TYPES.ERROR,
                                        message: ('Rule ' + (j + 1) + ' from answer group ' +
                                            (i + 1) + ' will never be matched because it ' +
                                            'is made redundant by rule ' + ranges[k].ruleIndex +
                                            ' from answer group ' + ranges[k].answerGroupIndex +
                                            '.')
                                    });
                                }
                            }
                            if (earlierRule.type === 'IsEquivalentTo') {
                                if (checkEquivalency(earlierRule, rule)) {
                                    warningsList.push({
                                        type: WARNING_TYPES.ERROR,
                                        message: ('Rule ' + (j + 1) + ' from answer group ' +
                                            (i + 1) + ' will never be matched because it ' +
                                            'is made redundant by rule ' + ranges[k].ruleIndex +
                                            ' from answer group ' + ranges[k].answerGroupIndex +
                                            '.')
                                    });
                                }
                            }
                        }
                        ranges.push(range);
                    }
                }
                warningsList = warningsList.concat(baseInteractionValidationService.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
                return warningsList;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/NumberWithUnits/directives/oppia-interactive-number-with-units.directive.ts":
/*!*************************************************************************************************************!*\
  !*** ./extensions/interactions/NumberWithUnits/directives/oppia-interactive-number-with-units.directive.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the NumberWithUnits interaction.
 */
__webpack_require__(/*! domain/objects/NumberWithUnitsObjectFactory.ts */ "./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! interactions/NumberWithUnits/directives/number-with-units-rules.service.ts */ "./extensions/interactions/NumberWithUnits/directives/number-with-units-rules.service.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaInteractiveNumberWithUnits', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/NumberWithUnits/directives/' +
                'number-with-units-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$attrs', '$uibModal', 'NumberWithUnitsObjectFactory',
                'NumberWithUnitsRulesService', 'NUMBER_WITH_UNITS_PARSING_ERRORS',
                'CurrentInteractionService', function ($scope, $attrs, $uibModal, NumberWithUnitsObjectFactory, NumberWithUnitsRulesService, NUMBER_WITH_UNITS_PARSING_ERRORS, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.answer = '';
                    ctrl.labelForFocusTarget = $attrs.labelForFocusTarget || null;
                    var errorMessage = '';
                    // Label for errors caused whilst parsing number with units.
                    var FORM_ERROR_TYPE = 'NUMBER_WITH_UNITS_FORMAT_ERROR';
                    ctrl.NUMBER_WITH_UNITS_FORM_SCHEMA = {
                        type: 'unicode',
                        ui_config: {}
                    };
                    ctrl.getWarningText = function () {
                        return errorMessage;
                    };
                    try {
                        NumberWithUnitsObjectFactory.createCurrencyUnits();
                    }
                    catch (parsingError) { }
                    $scope.$watch('$ctrl.answer', function (newValue) {
                        try {
                            var numberWithUnits = NumberWithUnitsObjectFactory.fromRawInputString(newValue);
                            errorMessage = '';
                            ctrl.NumberWithUnitsForm.answer.$setValidity(FORM_ERROR_TYPE, true);
                        }
                        catch (parsingError) {
                            errorMessage = parsingError.message;
                            ctrl.NumberWithUnitsForm.answer.$setValidity(FORM_ERROR_TYPE, false);
                        }
                    });
                    ctrl.submitAnswer = function (answer) {
                        try {
                            var numberWithUnits = NumberWithUnitsObjectFactory.fromRawInputString(answer);
                            CurrentInteractionService.onSubmit(numberWithUnits, NumberWithUnitsRulesService);
                        }
                        catch (parsingError) {
                            errorMessage = parsingError.message;
                            ctrl.NumberWithUnitsForm.answer.$setValidity(FORM_ERROR_TYPE, false);
                        }
                    };
                    ctrl.isAnswerValid = function () {
                        if (ctrl.NumberWithUnitsForm === undefined) {
                            return true;
                        }
                        return (!ctrl.NumberWithUnitsForm.$invalid &&
                            ctrl.answer !== '');
                    };
                    var submitAnswerFn = function () {
                        ctrl.submitAnswer(ctrl.answer);
                    };
                    CurrentInteractionService.registerCurrentInteraction(submitAnswerFn, ctrl.isAnswerValid);
                    ctrl.showHelp = function () {
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/NumberWithUnits/directives/' +
                                'number-with-units-help-modal.directive.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.close = function () {
                                        $uibModalInstance.close();
                                    };
                                }
                            ]
                        }).result.then(function () { });
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/NumberWithUnits/directives/oppia-response-number-with-units.directive.ts":
/*!**********************************************************************************************************!*\
  !*** ./extensions/interactions/NumberWithUnits/directives/oppia-response-number-with-units.directive.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the NumberWithUnits response.
 */
__webpack_require__(/*! domain/objects/NumberWithUnitsObjectFactory.ts */ "./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseNumberWithUnits', [
    'HtmlEscaperService', 'NumberWithUnitsObjectFactory',
    'UrlInterpolationService', function (HtmlEscaperService, NumberWithUnitsObjectFactory, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/NumberWithUnits/directives/' +
                'number-with-units-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.answer = NumberWithUnitsObjectFactory.fromDict(answer).toString();
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/NumberWithUnits/directives/oppia-short-response-number-with-units.directive.ts":
/*!****************************************************************************************************************!*\
  !*** ./extensions/interactions/NumberWithUnits/directives/oppia-short-response-number-with-units.directive.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the NumberWithUnits short response.
 */
__webpack_require__(/*! domain/objects/NumberWithUnitsObjectFactory.ts */ "./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseNumberWithUnits', [
    'HtmlEscaperService', 'NumberWithUnitsObjectFactory',
    'UrlInterpolationService', function (HtmlEscaperService, NumberWithUnitsObjectFactory, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/NumberWithUnits/directives/' +
                'number-with-units-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.answer = NumberWithUnitsObjectFactory.fromDict(answer).toString();
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/NumericInput/NumericInput.ts":
/*!**************************************************************!*\
  !*** ./extensions/interactions/NumericInput/NumericInput.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for NumericInput interaction.
 */
__webpack_require__(/*! interactions/NumericInput/directives/numeric-input-rules.service.ts */ "./extensions/interactions/NumericInput/directives/numeric-input-rules.service.ts");
__webpack_require__(/*! interactions/NumericInput/directives/numeric-input-validation.service.ts */ "./extensions/interactions/NumericInput/directives/numeric-input-validation.service.ts");
__webpack_require__(/*! interactions/NumericInput/directives/oppia-interactive-numeric-input.directive.ts */ "./extensions/interactions/NumericInput/directives/oppia-interactive-numeric-input.directive.ts");
__webpack_require__(/*! interactions/NumericInput/directives/oppia-response-numeric-input.directive.ts */ "./extensions/interactions/NumericInput/directives/oppia-response-numeric-input.directive.ts");
__webpack_require__(/*! interactions/NumericInput/directives/oppia-short-response-numeric-input.directive.ts */ "./extensions/interactions/NumericInput/directives/oppia-short-response-numeric-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/NumericInput/directives/numeric-input-rules.service.ts":
/*!****************************************************************************************!*\
  !*** ./extensions/interactions/NumericInput/directives/numeric-input-rules.service.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
angular.module('oppia').factory('NumericInputRulesService', [function () {
        return {
            Equals: function (answer, inputs) {
                return answer === inputs.x;
            },
            IsLessThan: function (answer, inputs) {
                return answer < inputs.x;
            },
            IsGreaterThan: function (answer, inputs) {
                return answer > inputs.x;
            },
            IsLessThanOrEqualTo: function (answer, inputs) {
                return answer <= inputs.x;
            },
            IsGreaterThanOrEqualTo: function (answer, inputs) {
                return answer >= inputs.x;
            },
            IsInclusivelyBetween: function (answer, inputs) {
                // TODO(wxy): have frontend validation at creation time to check that
                // inputs.a <= inputs.b
                return answer >= inputs.a && answer <= inputs.b;
            },
            IsWithinTolerance: function (answer, inputs) {
                return answer >= inputs.x - inputs.tol &&
                    answer <= inputs.x + inputs.tol;
            }
        };
    }]);


/***/ }),

/***/ "./extensions/interactions/NumericInput/directives/numeric-input-validation.service.ts":
/*!*********************************************************************************************!*\
  !*** ./extensions/interactions/NumericInput/directives/numeric-input-validation.service.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var NumericInputValidationService = /** @class */ (function () {
    function NumericInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    NumericInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        return [];
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    NumericInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = [];
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        /*
        Store an answer range for every rule, then check for redundant
        ranges. A range is an object of the form:
        {
          lb: float, lower bound
          ub: float, upper bound
          lbi: bool, is lower bound inclusive
          ubi: bool, is upper bound inclusive
        }
        */
        var setLowerAndUpperBounds = function (range, lb, ub, lbi, ubi) {
            range.lb = lb;
            range.ub = ub;
            range.lbi = lbi;
            range.ubi = ubi;
        };
        var isEnclosedBy = function (ra, rb) {
            // Checks if range ra is enclosed by range rb.
            var lowerBoundConditionIsSatisfied = (rb.lb < ra.lb) || (rb.lb === ra.lb && (!ra.lbi || rb.lbi));
            var upperBoundConditionIsSatisfied = (rb.ub > ra.ub) || (rb.ub === ra.ub && (!ra.ubi || rb.ubi));
            return lowerBoundConditionIsSatisfied &&
                upperBoundConditionIsSatisfied;
        };
        var ranges = [];
        for (var i = 0; i < answerGroups.length; i++) {
            var rules = answerGroups[i].rules;
            for (var j = 0; j < rules.length; j++) {
                var rule = rules[j];
                var range = {
                    answerGroupIndex: i + 1,
                    ruleIndex: j + 1,
                    lb: null,
                    ub: null,
                    lbi: false,
                    ubi: false,
                };
                switch (rule.type) {
                    case 'Equals':
                        var x = rule.inputs.x;
                        setLowerAndUpperBounds(range, x, x, true, true);
                        break;
                    case 'IsInclusivelyBetween':
                        var a = rule.inputs.a;
                        var b = rule.inputs.b;
                        setLowerAndUpperBounds(range, a, b, true, true);
                        break;
                    case 'IsGreaterThan':
                        var x = rule.inputs.x;
                        setLowerAndUpperBounds(range, x, Infinity, false, false);
                        break;
                    case 'IsGreaterThanOrEqualTo':
                        var x = rule.inputs.x;
                        setLowerAndUpperBounds(range, x, Infinity, true, false);
                        break;
                    case 'IsLessThan':
                        var x = rule.inputs.x;
                        setLowerAndUpperBounds(range, -Infinity, x, false, false);
                        break;
                    case 'IsLessThanOrEqualTo':
                        var x = rule.inputs.x;
                        setLowerAndUpperBounds(range, -Infinity, x, false, true);
                        break;
                    case 'IsWithinTolerance':
                        var x = rule.inputs.x;
                        var tol = rule.inputs.tol;
                        setLowerAndUpperBounds(range, x - tol, x + tol, true, true);
                        break;
                    default:
                }
                for (var k = 0; k < ranges.length; k++) {
                    if (isEnclosedBy(range, ranges[k])) {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                            message: ('Rule ' + (j + 1) + ' from answer group ' +
                                (i + 1) + ' will never be matched because it ' +
                                'is made redundant by rule ' + ranges[k].ruleIndex +
                                ' from answer group ' + ranges[k].answerGroupIndex + '.')
                        });
                    }
                }
                ranges.push(range);
            }
        }
        warningsList = warningsList.concat(this.baseInteractionValidationServiceInstance.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
        return warningsList;
    };
    var _a;
    NumericInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], NumericInputValidationService);
    return NumericInputValidationService;
}());
exports.NumericInputValidationService = NumericInputValidationService;
angular.module('oppia').factory('NumericInputValidationService', static_1.downgradeInjectable(NumericInputValidationService));


/***/ }),

/***/ "./extensions/interactions/NumericInput/directives/oppia-interactive-numeric-input.directive.ts":
/*!******************************************************************************************************!*\
  !*** ./extensions/interactions/NumericInput/directives/oppia-interactive-numeric-input.directive.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the NumericInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/NumericInput/directives/numeric-input-rules.service.ts */ "./extensions/interactions/NumericInput/directives/numeric-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
angular.module('oppia').directive('oppiaInteractiveNumericInput', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/NumericInput/directives/' +
                'numeric-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'FocusManagerService', 'NumericInputRulesService',
                'WindowDimensionsService', 'CurrentInteractionService',
                function ($attrs, FocusManagerService, NumericInputRulesService, WindowDimensionsService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.answer = '';
                    ctrl.labelForFocusTarget = $attrs.labelForFocusTarget || null;
                    ctrl.NUMERIC_INPUT_FORM_SCHEMA = {
                        type: 'float',
                        ui_config: {}
                    };
                    var isAnswerValid = function () {
                        return (ctrl.answer !== undefined &&
                            ctrl.answer !== null && ctrl.answer !== '');
                    };
                    ctrl.submitAnswer = function (answer) {
                        if (isAnswerValid()) {
                            CurrentInteractionService.onSubmit(answer, NumericInputRulesService);
                        }
                    };
                    var submitAnswerFn = function () {
                        ctrl.submitAnswer(ctrl.answer);
                    };
                    CurrentInteractionService.registerCurrentInteraction(submitAnswerFn, isAnswerValid);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/NumericInput/directives/oppia-response-numeric-input.directive.ts":
/*!***************************************************************************************************!*\
  !*** ./extensions/interactions/NumericInput/directives/oppia-response-numeric-input.directive.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the NumericInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseNumericInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/NumericInput/directives/' +
                'numeric-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    // If the answer is an integer, omit the fractional part.
                    if (ctrl.answer % 1 === 0) {
                        ctrl.answer = Math.round(ctrl.answer);
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/NumericInput/directives/oppia-short-response-numeric-input.directive.ts":
/*!*********************************************************************************************************!*\
  !*** ./extensions/interactions/NumericInput/directives/oppia-short-response-numeric-input.directive.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the NumericInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseNumericInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/NumericInput/directives/' +
                'numeric-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    // If the answer is an integer, omit the fractional part.
                    if (ctrl.answer % 1 === 0) {
                        ctrl.answer = Math.round(ctrl.answer);
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/PencilCodeEditor/PencilCodeEditor.ts":
/*!**********************************************************************!*\
  !*** ./extensions/interactions/PencilCodeEditor/PencilCodeEditor.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for PencilCodeEditor interaction.
 */
__webpack_require__(/*! interactions/PencilCodeEditor/directives/pencil-code-editor-rules.service.ts */ "./extensions/interactions/PencilCodeEditor/directives/pencil-code-editor-rules.service.ts");
__webpack_require__(/*! interactions/PencilCodeEditor/directives/pencil-code-editor-validation.service.ts */ "./extensions/interactions/PencilCodeEditor/directives/pencil-code-editor-validation.service.ts");
__webpack_require__(/*! interactions/PencilCodeEditor/directives/oppia-interactive-pencil-code-editor.directive.ts */ "./extensions/interactions/PencilCodeEditor/directives/oppia-interactive-pencil-code-editor.directive.ts");
__webpack_require__(/*! interactions/PencilCodeEditor/directives/oppia-response-pencil-code-editor.directive.ts */ "./extensions/interactions/PencilCodeEditor/directives/oppia-response-pencil-code-editor.directive.ts");
__webpack_require__(/*! interactions/PencilCodeEditor/directives/oppia-short-response-pencil-code-editor.directive.ts */ "./extensions/interactions/PencilCodeEditor/directives/oppia-short-response-pencil-code-editor.directive.ts");


/***/ }),

/***/ "./extensions/interactions/PencilCodeEditor/directives/oppia-interactive-pencil-code-editor.directive.ts":
/*!***************************************************************************************************************!*\
  !*** ./extensions/interactions/PencilCodeEditor/directives/oppia-interactive-pencil-code-editor.directive.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the PencilCodeEditor interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! interactions/PencilCodeEditor/directives/pencil-code-editor-rules.service.ts */ "./extensions/interactions/PencilCodeEditor/directives/pencil-code-editor-rules.service.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
angular.module('oppia').directive('oppiaInteractivePencilCodeEditor', [
    'HtmlEscaperService', 'UrlInterpolationService', 'EVENT_NEW_CARD_AVAILABLE',
    function (HtmlEscaperService, UrlInterpolationService, EVENT_NEW_CARD_AVAILABLE) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getLastAnswer: '&lastAnswer'
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/PencilCodeEditor/directives/' +
                'pencil-code-editor-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$attrs', '$element', '$timeout', '$uibModal',
                'FocusManagerService', 'PencilCodeEditorRulesService',
                'CurrentInteractionService',
                function ($scope, $attrs, $element, $timeout, $uibModal, FocusManagerService, PencilCodeEditorRulesService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.interactionIsActive = (ctrl.getLastAnswer() === null);
                    ctrl.initialCode = ctrl.interactionIsActive ?
                        HtmlEscaperService.escapedJsonToObj($attrs.initialCodeWithValue) :
                        ctrl.getLastAnswer().code;
                    var iframeDiv = $element.find('.pencil-code-editor-iframe').get(0);
                    var pce = new PencilCodeEmbed(iframeDiv);
                    pce.beginLoad(ctrl.initialCode);
                    $scope.$on(EVENT_NEW_CARD_AVAILABLE, function () {
                        ctrl.interactionIsActive = false;
                        pce.hideMiddleButton();
                        pce.hideToggleButton();
                        pce.setReadOnly();
                    });
                    pce.on('load', function () {
                        // Hides the error console at the bottom right, and prevents it
                        // from showing up even if the code has an error. Also, hides the
                        // turtle, and redefines say() to also write the text on the
                        // screen.
                        pce.setupScript([{
                                code: [
                                    'window.onerror = function() {',
                                    '  return true;',
                                    '};',
                                    'debug.hide();',
                                    'window.removeEventListener("error", debug)',
                                    '',
                                    'ht();',
                                    '',
                                    'oldsay = window.say',
                                    'say = function(x) {',
                                    '  write(x);',
                                    '  oldsay(x);',
                                    '};'
                                ].join('\n'),
                                type: 'text/javascript'
                            }]);
                        pce.showEditor();
                        pce.hideToggleButton();
                        if (ctrl.interactionIsActive) {
                            pce.setEditable();
                        }
                        else {
                            pce.hideMiddleButton();
                            pce.setReadOnly();
                        }
                        // Pencil Code automatically takes the focus on load, so we clear
                        // it.
                        FocusManagerService.clearFocus();
                    });
                    ctrl.reset = function () {
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/PencilCodeEditor/directives/' +
                                'pencil-code-reset-confirmation.directive.html'),
                            backdrop: 'static',
                            keyboard: false,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss();
                                    };
                                    $scope.resetCode = function () {
                                        $uibModalInstance.close();
                                    };
                                }
                            ]
                        }).result.then(function () {
                            pce.setCode(ctrl.initialCode);
                        });
                    };
                    var getNormalizedCode = function () {
                        // Converts tabs to spaces.
                        return pce.getCode().replace(/\t/g, '  ');
                    };
                    var errorIsHappening = false;
                    var hasSubmittedAnswer = false;
                    pce.on('startExecute', function () {
                        hasSubmittedAnswer = false;
                    });
                    pce.on('execute', function () {
                        if (errorIsHappening || hasSubmittedAnswer) {
                            return;
                        }
                        pce.eval('document.body.innerHTML', function (pencilCodeHtml) {
                            var normalizedCode = getNormalizedCode();
                            // Get all the divs, and extract their textual content.
                            var output = $.map($(pencilCodeHtml).filter('div'), function (elem) {
                                return $(elem).text();
                            }).join('\n');
                            hasSubmittedAnswer = true;
                            CurrentInteractionService.onSubmit({
                                code: normalizedCode,
                                output: output || '',
                                evaluation: '',
                                error: ''
                            }, PencilCodeEditorRulesService);
                        }, true);
                    });
                    pce.on('error', function (error) {
                        if (hasSubmittedAnswer) {
                            return;
                        }
                        var normalizedCode = getNormalizedCode();
                        errorIsHappening = true;
                        hasSubmittedAnswer = true;
                        CurrentInteractionService.onSubmit({
                            code: normalizedCode,
                            output: '',
                            evaluation: '',
                            error: error.message
                        }, PencilCodeEditorRulesService);
                        $timeout(function () {
                            errorIsHappening = false;
                        }, 1000);
                    });
                    CurrentInteractionService.registerCurrentInteraction(null, null);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/PencilCodeEditor/directives/oppia-response-pencil-code-editor.directive.ts":
/*!************************************************************************************************************!*\
  !*** ./extensions/interactions/PencilCodeEditor/directives/oppia-response-pencil-code-editor.directive.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the PencilCodeEditor response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponsePencilCodeEditor', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/PencilCodeEditor/directives/' +
                'pencil-code-editor-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answerCode = HtmlEscaperService.escapedJsonToObj($attrs.answer).code;
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/PencilCodeEditor/directives/oppia-short-response-pencil-code-editor.directive.ts":
/*!******************************************************************************************************************!*\
  !*** ./extensions/interactions/PencilCodeEditor/directives/oppia-short-response-pencil-code-editor.directive.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the PencilCodeEditor short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! filters/string-utility-filters/truncate-at-first-line.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponsePencilCodeEditor', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/PencilCodeEditor/directives/' +
                'pencil-code-editor-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answerCode = HtmlEscaperService.escapedJsonToObj($attrs.answer).code;
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/PencilCodeEditor/directives/pencil-code-editor-rules.service.ts":
/*!*************************************************************************************************!*\
  !*** ./extensions/interactions/PencilCodeEditor/directives/pencil-code-editor-rules.service.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts");
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace-punctuation-and-case.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace-punctuation-and-case.filter.ts");
__webpack_require__(/*! services/CodeNormalizerService.ts */ "./core/templates/dev/head/services/CodeNormalizerService.ts");
angular.module('oppia').factory('PencilCodeEditorRulesService', [
    '$filter', 'CodeNormalizerService',
    function ($filter, CodeNormalizerService) {
        return {
            CodeEquals: function (answer, inputs) {
                var normalizedCode = CodeNormalizerService.getNormalizedCode(answer.code);
                var normalizedExpectedCode = CodeNormalizerService.getNormalizedCode(inputs.x);
                return normalizedCode === normalizedExpectedCode;
            },
            CodeContains: function (answer, inputs) {
                var normalizedCode = CodeNormalizerService.getNormalizedCode(answer.code);
                var normalizedSnippet = CodeNormalizerService.getNormalizedCode(inputs.x);
                return normalizedCode.indexOf(normalizedSnippet) !== -1;
            },
            CodeDoesNotContain: function (answer, inputs) {
                var normalizedCode = CodeNormalizerService.getNormalizedCode(answer.code);
                var normalizedSnippet = CodeNormalizerService.getNormalizedCode(inputs.x);
                return normalizedCode.indexOf(normalizedSnippet) === -1;
            },
            OutputEquals: function (answer, inputs) {
                var normalizedOutput = $filter('normalizeWhitespace')(answer.output);
                var normalizedExpectedOutput = $filter('normalizeWhitespace')(inputs.x);
                return normalizedOutput === normalizedExpectedOutput;
            },
            OutputRoughlyEquals: function (answer, inputs) {
                var normalizedOutput = $filter('normalizeWhitespacePunctuationAndCase')(answer.output);
                var normalizedExpectedOutput = $filter('normalizeWhitespacePunctuationAndCase')(inputs.x);
                return normalizedOutput === normalizedExpectedOutput;
            },
            ResultsInError: function (answer) {
                return !!(answer.error.trim());
            },
            ErrorContains: function (answer, inputs) {
                var normalizedError = $filter('normalizeWhitespace')(answer.error);
                var normalizedSnippet = $filter('normalizeWhitespace')(inputs.x);
                return normalizedError.indexOf(normalizedSnippet) !== -1;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/PencilCodeEditor/directives/pencil-code-editor-validation.service.ts":
/*!******************************************************************************************************!*\
  !*** ./extensions/interactions/PencilCodeEditor/directives/pencil-code-editor-validation.service.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var PencilCodeEditorValidationService = /** @class */ (function () {
    function PencilCodeEditorValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    PencilCodeEditorValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        // TODO(juansaba): Implement customization args validations.
        return [];
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    PencilCodeEditorValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        return this.getCustomizationArgsWarnings(customizationArgs).concat(this.baseInteractionValidationServiceInstance.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
    };
    var _a;
    PencilCodeEditorValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], PencilCodeEditorValidationService);
    return PencilCodeEditorValidationService;
}());
exports.PencilCodeEditorValidationService = PencilCodeEditorValidationService;
angular.module('oppia').factory('PencilCodeEditorValidationService', static_1.downgradeInjectable(PencilCodeEditorValidationService));


/***/ }),

/***/ "./extensions/interactions/SetInput/SetInput.ts":
/*!******************************************************!*\
  !*** ./extensions/interactions/SetInput/SetInput.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for SetInput interaction.
 */
__webpack_require__(/*! interactions/SetInput/directives/set-input-rules.service.ts */ "./extensions/interactions/SetInput/directives/set-input-rules.service.ts");
__webpack_require__(/*! interactions/SetInput/directives/set-input-validation.service.ts */ "./extensions/interactions/SetInput/directives/set-input-validation.service.ts");
__webpack_require__(/*! interactions/SetInput/directives/oppia-interactive-set-input.directive.ts */ "./extensions/interactions/SetInput/directives/oppia-interactive-set-input.directive.ts");
__webpack_require__(/*! interactions/SetInput/directives/oppia-response-set-input.directive.ts */ "./extensions/interactions/SetInput/directives/oppia-response-set-input.directive.ts");
__webpack_require__(/*! interactions/SetInput/directives/oppia-short-response-set-input.directive.ts */ "./extensions/interactions/SetInput/directives/oppia-short-response-set-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/SetInput/directives/oppia-interactive-set-input.directive.ts":
/*!**********************************************************************************************!*\
  !*** ./extensions/interactions/SetInput/directives/oppia-interactive-set-input.directive.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the SetInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/SetInput/directives/set-input-rules.service.ts */ "./extensions/interactions/SetInput/directives/set-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
angular.module('oppia').directive('oppiaInteractiveSetInput', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/SetInput/directives/' +
                'set-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', '$translate', 'SetInputRulesService',
                'WindowDimensionsService', 'CurrentInteractionService',
                function ($attrs, $translate, SetInputRulesService, WindowDimensionsService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.schema = {
                        type: 'list',
                        items: {
                            type: 'unicode'
                        },
                        ui_config: {
                            // TODO(mili): Translate this in the HTML.
                            add_element_text: $translate.instant('I18N_INTERACTIONS_SET_INPUT_ADD_ITEM')
                        }
                    };
                    // Adds an input field by default
                    ctrl.answer = [''];
                    var hasDuplicates = function (answer) {
                        for (var i = 0; i < answer.length; i++) {
                            for (var j = 0; j < i; j++) {
                                if (angular.equals(answer[i], answer[j])) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    };
                    var hasBlankOption = function (answer) {
                        return answer.some(function (element) {
                            return (element === '');
                        });
                    };
                    ctrl.submitAnswer = function (answer) {
                        if (hasDuplicates(answer)) {
                            ctrl.errorMessage = ('I18N_INTERACTIONS_SET_INPUT_DUPLICATES_ERROR');
                        }
                        else {
                            ctrl.errorMessage = '';
                            CurrentInteractionService.onSubmit(answer, SetInputRulesService);
                        }
                    };
                    ctrl.isAnswerValid = function () {
                        return (ctrl.answer.length > 0 &&
                            !hasBlankOption(ctrl.answer));
                    };
                    var submitAnswerFn = function () {
                        ctrl.submitAnswer(ctrl.answer);
                    };
                    CurrentInteractionService.registerCurrentInteraction(submitAnswerFn, ctrl.isAnswerValid);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/SetInput/directives/oppia-response-set-input.directive.ts":
/*!*******************************************************************************************!*\
  !*** ./extensions/interactions/SetInput/directives/oppia-response-set-input.directive.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Set Input response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseSetInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/SetInput/directives/' +
                'set-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/SetInput/directives/oppia-short-response-set-input.directive.ts":
/*!*************************************************************************************************!*\
  !*** ./extensions/interactions/SetInput/directives/oppia-short-response-set-input.directive.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Set Input short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseSetInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/SetInput/directives/' +
                'set-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.displayedAnswer = (_answer.length > 0 ? _answer.join(', ') :
                        'I18N_INTERACTIONS_SET_INPUT_NO_ANSWER');
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/SetInput/directives/set-input-rules.service.ts":
/*!********************************************************************************!*\
  !*** ./extensions/interactions/SetInput/directives/set-input-rules.service.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
angular.module('oppia').factory('SetInputRulesService', [function () {
        return {
            Equals: function (answer, inputs) {
                return answer.length === inputs.x.length && inputs.x.every(function (val) {
                    return answer.indexOf(val) >= 0;
                });
            },
            IsSubsetOf: function (answer, inputs) {
                return answer.length < inputs.x.length && answer.every(function (val) {
                    return inputs.x.indexOf(val) >= 0;
                });
            },
            IsSupersetOf: function (answer, inputs) {
                return answer.length > inputs.x.length && inputs.x.every(function (val) {
                    return answer.indexOf(val) >= 0;
                });
            },
            HasElementsIn: function (answer, inputs) {
                return inputs.x.some(function (val) {
                    return answer.indexOf(val) >= 0;
                });
            },
            HasElementsNotIn: function (answer, inputs) {
                return answer.some(function (val) {
                    return inputs.x.indexOf(val) === -1;
                });
            },
            OmitsElementsIn: function (answer, inputs) {
                return inputs.x.some(function (val) {
                    return answer.indexOf(val) === -1;
                });
            },
            IsDisjointFrom: function (answer, inputs) {
                return inputs.x.every(function (val) {
                    return answer.indexOf(val) === -1;
                });
            }
        };
    }]);


/***/ }),

/***/ "./extensions/interactions/SetInput/directives/set-input-validation.service.ts":
/*!*************************************************************************************!*\
  !*** ./extensions/interactions/SetInput/directives/set-input-validation.service.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var SetInputValidationService = /** @class */ (function () {
    function SetInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    SetInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        // TODO(juansaba): Implement customization args validations.
        return [];
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    SetInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        return this.getCustomizationArgsWarnings(customizationArgs).concat(this.baseInteractionValidationServiceInstance.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
    };
    var _a;
    SetInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], SetInputValidationService);
    return SetInputValidationService;
}());
exports.SetInputValidationService = SetInputValidationService;
angular.module('oppia').factory('SetInputValidationService', static_1.downgradeInjectable(SetInputValidationService));


/***/ }),

/***/ "./extensions/interactions/TextInput/TextInput.ts":
/*!********************************************************!*\
  !*** ./extensions/interactions/TextInput/TextInput.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for TextInput interaction.
 */
__webpack_require__(/*! interactions/TextInput/text-input-prediction.service.ts */ "./extensions/interactions/TextInput/text-input-prediction.service.ts");
__webpack_require__(/*! interactions/TextInput/directives/text-input-rules.service.ts */ "./extensions/interactions/TextInput/directives/text-input-rules.service.ts");
__webpack_require__(/*! interactions/TextInput/directives/text-input-validation.service.ts */ "./extensions/interactions/TextInput/directives/text-input-validation.service.ts");
__webpack_require__(/*! interactions/TextInput/directives/oppia-interactive-text-input.directive.ts */ "./extensions/interactions/TextInput/directives/oppia-interactive-text-input.directive.ts");
__webpack_require__(/*! interactions/TextInput/directives/oppia-response-text-input.directive.ts */ "./extensions/interactions/TextInput/directives/oppia-response-text-input.directive.ts");
__webpack_require__(/*! interactions/TextInput/directives/oppia-short-response-text-input.directive.ts */ "./extensions/interactions/TextInput/directives/oppia-short-response-text-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/TextInput/directives/oppia-interactive-text-input.directive.ts":
/*!************************************************************************************************!*\
  !*** ./extensions/interactions/TextInput/directives/oppia-interactive-text-input.directive.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the TextInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/TextInput/directives/text-input-rules.service.ts */ "./extensions/interactions/TextInput/directives/text-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
angular.module('oppia').directive('oppiaInteractiveTextInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/TextInput/directives/' +
                'text-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'FocusManagerService', 'TextInputRulesService',
                'WindowDimensionsService', 'CurrentInteractionService',
                function ($attrs, FocusManagerService, TextInputRulesService, WindowDimensionsService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.placeholder = HtmlEscaperService.escapedJsonToObj($attrs.placeholderWithValue);
                    ctrl.rows = (HtmlEscaperService.escapedJsonToObj($attrs.rowsWithValue));
                    ctrl.answer = '';
                    ctrl.labelForFocusTarget = $attrs.labelForFocusTarget || null;
                    ctrl.schema = {
                        type: 'unicode',
                        ui_config: {}
                    };
                    if (ctrl.placeholder) {
                        ctrl.schema.ui_config.placeholder = ctrl.placeholder;
                    }
                    if (ctrl.rows && ctrl.rows !== 1) {
                        ctrl.schema.ui_config.rows = ctrl.rows;
                    }
                    ctrl.submitAnswer = function (answer) {
                        if (!answer) {
                            return;
                        }
                        CurrentInteractionService.onSubmit(answer, TextInputRulesService);
                    };
                    var submitAnswerFn = function () {
                        ctrl.submitAnswer(ctrl.answer);
                    };
                    var validityCheckFn = function () {
                        return ctrl.answer.length > 0;
                    };
                    CurrentInteractionService.registerCurrentInteraction(submitAnswerFn, validityCheckFn);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/directives/oppia-response-text-input.directive.ts":
/*!*********************************************************************************************!*\
  !*** ./extensions/interactions/TextInput/directives/oppia-response-text-input.directive.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the TextInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseTextInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/TextInput/directives/' +
                'text-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/directives/oppia-short-response-text-input.directive.ts":
/*!***************************************************************************************************!*\
  !*** ./extensions/interactions/TextInput/directives/oppia-short-response-text-input.directive.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the TextInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! filters/string-utility-filters/truncate-at-first-line.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseTextInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/TextInput/directives/' +
                'text-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/directives/text-input-rules.service.ts":
/*!**********************************************************************************!*\
  !*** ./extensions/interactions/TextInput/directives/text-input-rules.service.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts");
angular.module('oppia').factory('TextInputRulesService', [
    '$filter', function ($filter) {
        return {
            Equals: function (answer, inputs) {
                var normalizedAnswer = $filter('normalizeWhitespace')(answer);
                var normalizedInput = $filter('normalizeWhitespace')(inputs.x);
                return normalizedAnswer.toLowerCase() === normalizedInput.toLowerCase();
            },
            FuzzyEquals: function (answer, inputs) {
                var normalizedAnswer = $filter('normalizeWhitespace')(answer);
                var answerString = normalizedAnswer.toLowerCase();
                var normalizedInput = $filter('normalizeWhitespace')(inputs.x);
                var inputString = normalizedInput.toLowerCase();
                if (inputString === answerString) {
                    return true;
                }
                var editDistance = [];
                for (var i = 0; i <= inputString.length; i++) {
                    editDistance.push([i]);
                }
                for (var j = 1; j <= answerString.length; j++) {
                    editDistance[0].push(j);
                }
                for (var i = 1; i <= inputString.length; i++) {
                    for (var j = 1; j <= answerString.length; j++) {
                        if (inputString.charAt(i - 1) === answerString.charAt(j - 1)) {
                            editDistance[i][j] = editDistance[i - 1][j - 1];
                        }
                        else {
                            editDistance[i][j] = Math.min(editDistance[i - 1][j - 1], editDistance[i][j - 1], editDistance[i - 1][j]) + 1;
                        }
                    }
                }
                return editDistance[inputString.length][answerString.length] === 1;
            },
            CaseSensitiveEquals: function (answer, inputs) {
                var normalizedAnswer = $filter('normalizeWhitespace')(answer);
                var normalizedInput = $filter('normalizeWhitespace')(inputs.x);
                return normalizedAnswer === normalizedInput;
            },
            StartsWith: function (answer, inputs) {
                var normalizedAnswer = $filter('normalizeWhitespace')(answer);
                var normalizedInput = $filter('normalizeWhitespace')(inputs.x);
                return normalizedAnswer.toLowerCase().indexOf(normalizedInput.toLowerCase()) === 0;
            },
            Contains: function (answer, inputs) {
                var normalizedAnswer = $filter('normalizeWhitespace')(answer);
                var normalizedInput = $filter('normalizeWhitespace')(inputs.x);
                return normalizedAnswer.toLowerCase().indexOf(normalizedInput.toLowerCase()) !== -1;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/directives/text-input-validation.service.ts":
/*!***************************************************************************************!*\
  !*** ./extensions/interactions/TextInput/directives/text-input-validation.service.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Validator service for the interaction.
 */
__webpack_require__(/*! interactions/base-interaction-validation.service.ts */ "./extensions/interactions/base-interaction-validation.service.ts");
angular.module('oppia').factory('TextInputValidationService', [
    'baseInteractionValidationService', 'INTERACTION_SPECS', 'WARNING_TYPES',
    function (baseInteractionValidationService, INTERACTION_SPECS, WARNING_TYPES) {
        return {
            getCustomizationArgsWarnings: function (customizationArgs) {
                var warningsList = [];
                baseInteractionValidationService.requireCustomizationArguments(customizationArgs, ['placeholder', 'rows']);
                var placeholder = customizationArgs.placeholder.value;
                if (!angular.isString(placeholder)) {
                    warningsList.push({
                        type: WARNING_TYPES.ERROR,
                        message: ('Placeholder text must be a string.')
                    });
                }
                var isInt = function (n) {
                    return angular.isNumber(n) && n % 1 === 0;
                };
                var rows = customizationArgs.rows.value;
                if (isInt(rows)) {
                    var textSpecs = INTERACTION_SPECS.TextInput;
                    var customizationArgSpecs = textSpecs.customization_arg_specs;
                    var rowsSpecs = customizationArgSpecs[1];
                    var minRows = rowsSpecs.schema.validators[0].min_value;
                    var maxRows = rowsSpecs.schema.validators[1].max_value;
                    if (rows < minRows || rows > maxRows) {
                        warningsList.push({
                            type: WARNING_TYPES.ERROR,
                            message: ('Number of rows must be between ' + minRows + ' and ' +
                                maxRows + '.')
                        });
                    }
                }
                else {
                    warningsList.push({
                        type: WARNING_TYPES.ERROR,
                        message: ('Number of rows must be integral.')
                    });
                }
                return warningsList;
            },
            getAllWarnings: function (stateName, customizationArgs, answerGroups, defaultOutcome) {
                return this.getCustomizationArgsWarnings(customizationArgs).concat(baseInteractionValidationService.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/text-input-prediction.service.ts":
/*!****************************************************************************!*\
  !*** ./extensions/interactions/TextInput/text-input-prediction.service.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview TextInput interaction prediction functions.
 *
 * IMPORTANT NOTE: The prediction function uses the classifier data
 * of trained model (text classifier model) for inference. These functions
 * must be changed if there are any changes in corresponding classifier training
 * function on Oppia-ml.
 */
__webpack_require__(/*! classifiers/svm-prediction.service.ts */ "./extensions/classifiers/svm-prediction.service.ts");
__webpack_require__(/*! classifiers/text-input.tokenizer.ts */ "./extensions/classifiers/text-input.tokenizer.ts");
__webpack_require__(/*! classifiers/count-vectorizer.service.ts */ "./extensions/classifiers/count-vectorizer.service.ts");
__webpack_require__(/*! interactions/interactions-extension.constants.ajs.ts */ "./extensions/interactions/interactions-extension.constants.ajs.ts");
angular.module('oppia').factory('TextInputPredictionService', [
    'CountVectorizerService', 'SVMPredictionService',
    'TextInputTokenizer', 'TEXT_INPUT_PREDICTION_SERVICE_THRESHOLD', function (CountVectorizerService, SVMPredictionService, TextInputTokenizer, TEXT_INPUT_PREDICTION_SERVICE_THRESHOLD) {
        return {
            predict: function (classifierData, textInput) {
                var cvVocabulary = classifierData.cv_vocabulary;
                var svmData = classifierData.SVM;
                // Tokenize the text input.
                textInput = textInput.toLowerCase();
                var textInputTokens = TextInputTokenizer.generateTokens(textInput);
                var textVector = CountVectorizerService.vectorize(textInputTokens, cvVocabulary);
                var predictionResult = SVMPredictionService.predict(svmData, textVector);
                if (predictionResult.predictionConfidence >
                    TEXT_INPUT_PREDICTION_SERVICE_THRESHOLD) {
                    return predictionResult.predictionLabel;
                }
                return -1;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/base-interaction-validation.service.ts":
/*!************************************************************************!*\
  !*** ./extensions/interactions/base-interaction-validation.service.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Base validation service for interactions.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var baseInteractionValidationService = /** @class */ (function () {
    function baseInteractionValidationService() {
    }
    // 'argNames' is an array of top-level customization argument names (such
    // as 'chocies') used to verify the basic structure of the input
    // customization arguments object.
    baseInteractionValidationService.prototype.requireCustomizationArguments = function (customizationArguments, argNames) {
        var missingArgs = [];
        for (var i = 0; i < argNames.length; i++) {
            if (!customizationArguments.hasOwnProperty(argNames[i])) {
                missingArgs.push(argNames[i]);
            }
        }
        if (missingArgs.length > 0) {
            if (missingArgs.length === 1) {
                throw 'Expected customization arguments to have property: ' +
                    missingArgs[0];
            }
            else {
                throw 'Expected customization arguments to have properties: ' +
                    missingArgs.join(', ');
            }
        }
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'answerGroups' is an answer group domain object and can be
    // typed after AnswerGroupObjectFactory.ts is upgraded.
    baseInteractionValidationService.prototype.getAnswerGroupWarnings = function (answerGroups, stateName) {
        var partialWarningsList = [];
        // This does not check the default outcome.
        for (var i = 0; i < answerGroups.length; i++) {
            if (answerGroups[i].outcome.isConfusing(stateName)) {
                partialWarningsList.push({
                    type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                    message: ('Please specify what Oppia should do in answer group ' +
                        String(i + 1) + '.')
                });
            }
            if (answerGroups[i].outcome.dest === stateName &&
                answerGroups[i].outcome.labelledAsCorrect) {
                partialWarningsList.push({
                    type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                    message: ('In answer group ' + String(i + 1) + ', self-loops should ' +
                        'not be labelled as correct.')
                });
            }
        }
        return partialWarningsList;
    };
    baseInteractionValidationService.prototype.getDefaultOutcomeWarnings = function (defaultOutcome, stateName) {
        var partialWarningsList = [];
        if (defaultOutcome && defaultOutcome.isConfusing(stateName)) {
            partialWarningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: ('Please add feedback for the user in the [All other answers] ' +
                    'rule.')
            });
        }
        if (defaultOutcome && defaultOutcome.dest === stateName &&
            defaultOutcome.labelledAsCorrect) {
            partialWarningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: ('In the [All other answers] group, self-loops should not be ' +
                    'labelled as correct.')
            });
        }
        return partialWarningsList;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'answerGroups' is an answer group domain object and can be
    // typed after AnswerGroupObjectFactory.ts is upgraded.
    baseInteractionValidationService.prototype.getAllOutcomeWarnings = function (answerGroups, defaultOutcome, stateName) {
        return (this.getAnswerGroupWarnings(answerGroups, stateName).concat(this.getDefaultOutcomeWarnings(defaultOutcome, stateName)));
    };
    baseInteractionValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], baseInteractionValidationService);
    return baseInteractionValidationService;
}());
exports.baseInteractionValidationService = baseInteractionValidationService;
angular.module('oppia').factory('baseInteractionValidationService', static_1.downgradeInjectable(baseInteractionValidationService));


/***/ }),

/***/ "./extensions/interactions/interactions-extension.constants.ajs.ts":
/*!*************************************************************************!*\
  !*** ./extensions/interactions/interactions-extension.constants.ajs.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for interactions extensions.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var interactions_extension_constants_1 = __webpack_require__(/*! interactions/interactions-extension.constants */ "./extensions/interactions/interactions-extension.constants.ts");
// Minimum confidence required for a predicted answer group to be shown to user.
// Generally a threshold of 0.7-0.8 is assumed to be a good one in practice,
// however value need not be in those bounds.
angular.module('oppia').constant('CODE_REPL_PREDICTION_SERVICE_THRESHOLD', interactions_extension_constants_1.InteractionsExtensionsConstants.CODE_REPL_PREDICTION_SERVICE_THRESHOLD);
angular.module('oppia').constant('GRAPH_INPUT_LEFT_MARGIN', interactions_extension_constants_1.InteractionsExtensionsConstants.GRAPH_INPUT_LEFT_MARGIN);
// Gives the staff-lines human readable values.
angular.module('oppia').constant('NOTE_NAMES_TO_MIDI_VALUES', interactions_extension_constants_1.InteractionsExtensionsConstants.NOTE_NAMES_TO_MIDI_VALUES);
// Minimum confidence required for a predicted answer group to be shown to user.
// Generally a threshold of 0.7-0.8 is assumed to be a good one in practice,
// however value need not be in those bounds.
angular.module('oppia').constant('TEXT_INPUT_PREDICTION_SERVICE_THRESHOLD', interactions_extension_constants_1.InteractionsExtensionsConstants.TEXT_INPUT_PREDICTION_SERVICE_THRESHOLD);


/***/ }),

/***/ "./extensions/interactions/interactionsRequires.ts":
/*!*********************************************************!*\
  !*** ./extensions/interactions/interactionsRequires.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for all the interactions.
 */
__webpack_require__(/*! interactions/CodeRepl/CodeRepl.ts */ "./extensions/interactions/CodeRepl/CodeRepl.ts");
__webpack_require__(/*! interactions/Continue/Continue.ts */ "./extensions/interactions/Continue/Continue.ts");
__webpack_require__(/*! interactions/DragAndDropSortInput/DragAndDropSortInput.ts */ "./extensions/interactions/DragAndDropSortInput/DragAndDropSortInput.ts");
__webpack_require__(/*! interactions/EndExploration/EndExploration.ts */ "./extensions/interactions/EndExploration/EndExploration.ts");
__webpack_require__(/*! interactions/FractionInput/FractionInput.ts */ "./extensions/interactions/FractionInput/FractionInput.ts");
__webpack_require__(/*! interactions/GraphInput/GraphInput.ts */ "./extensions/interactions/GraphInput/GraphInput.ts");
__webpack_require__(/*! interactions/ImageClickInput/ImageClickInput.ts */ "./extensions/interactions/ImageClickInput/ImageClickInput.ts");
__webpack_require__(/*! interactions/InteractiveMap/InteractiveMap.ts */ "./extensions/interactions/InteractiveMap/InteractiveMap.ts");
__webpack_require__(/*! interactions/ItemSelectionInput/ItemSelectionInput.ts */ "./extensions/interactions/ItemSelectionInput/ItemSelectionInput.ts");
__webpack_require__(/*! interactions/LogicProof/LogicProof.ts */ "./extensions/interactions/LogicProof/LogicProof.ts");
__webpack_require__(/*! interactions/MathExpressionInput/MathExpressionInput.ts */ "./extensions/interactions/MathExpressionInput/MathExpressionInput.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/MultipleChoiceInput.ts */ "./extensions/interactions/MultipleChoiceInput/MultipleChoiceInput.ts");
__webpack_require__(/*! interactions/MusicNotesInput/MusicNotesInput.ts */ "./extensions/interactions/MusicNotesInput/MusicNotesInput.ts");
__webpack_require__(/*! interactions/NumberWithUnits/NumberWithUnits.ts */ "./extensions/interactions/NumberWithUnits/NumberWithUnits.ts");
__webpack_require__(/*! interactions/NumericInput/NumericInput.ts */ "./extensions/interactions/NumericInput/NumericInput.ts");
__webpack_require__(/*! interactions/PencilCodeEditor/PencilCodeEditor.ts */ "./extensions/interactions/PencilCodeEditor/PencilCodeEditor.ts");
__webpack_require__(/*! interactions/SetInput/SetInput.ts */ "./extensions/interactions/SetInput/SetInput.ts");
__webpack_require__(/*! interactions/TextInput/TextInput.ts */ "./extensions/interactions/TextInput/TextInput.ts");


/***/ }),

/***/ "./extensions/interactions/uiLeafletRequires.ts":
/*!******************************************************!*\
  !*** ./extensions/interactions/uiLeafletRequires.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Loads scripts needed for ui-leaflet.
 */
__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'static/leaflet-1.4.0/leaflet.js'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'static/angular-ui-leaflet-1.0.3/ui-leaflet.min.no-header.js'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'static/angular-simple-logger-0.1.7/angular-simple-logger.min.js'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));


/***/ }),

/***/ "./extensions/objects/objectComponentsRequires.ts":
/*!********************************************************!*\
  !*** ./extensions/objects/objectComponentsRequires.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for all the object templates.
 */
__webpack_require__(/*! objects/templates/boolean-editor.directive.ts */ "./extensions/objects/templates/boolean-editor.directive.ts");
__webpack_require__(/*! objects/templates/code-string-editor.directive.ts */ "./extensions/objects/templates/code-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/coord-two-dim-editor.directive.ts */ "./extensions/objects/templates/coord-two-dim-editor.directive.ts");
__webpack_require__(/*! objects/templates/drag-and-drop-html-string-editor.directive.ts */ "./extensions/objects/templates/drag-and-drop-html-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/drag-and-drop-positive-int-editor.directive.ts */ "./extensions/objects/templates/drag-and-drop-positive-int-editor.directive.ts");
__webpack_require__(/*! objects/templates/filepath-editor.directive.ts */ "./extensions/objects/templates/filepath-editor.directive.ts");
__webpack_require__(/*! objects/templates/fraction-editor.directive.ts */ "./extensions/objects/templates/fraction-editor.directive.ts");
__webpack_require__(/*! objects/templates/graph-editor.directive.ts */ "./extensions/objects/templates/graph-editor.directive.ts");
__webpack_require__(/*! objects/templates/graph-property-editor.directive.ts */ "./extensions/objects/templates/graph-property-editor.directive.ts");
__webpack_require__(/*! objects/templates/html-editor.directive.ts */ "./extensions/objects/templates/html-editor.directive.ts");
__webpack_require__(/*! objects/templates/image-with-regions-editor.directive.ts */ "./extensions/objects/templates/image-with-regions-editor.directive.ts");
__webpack_require__(/*! objects/templates/int-editor.directive.ts */ "./extensions/objects/templates/int-editor.directive.ts");
__webpack_require__(/*! objects/templates/list-of-sets-of-html-strings-editor.directive.ts */ "./extensions/objects/templates/list-of-sets-of-html-strings-editor.directive.ts");
__webpack_require__(/*! objects/templates/list-of-tabs-editor.directive.ts */ "./extensions/objects/templates/list-of-tabs-editor.directive.ts");
__webpack_require__(/*! objects/templates/list-of-unicode-string-editor.directive.ts */ "./extensions/objects/templates/list-of-unicode-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/logic-error-category-editor.directive.ts */ "./extensions/objects/templates/logic-error-category-editor.directive.ts");
__webpack_require__(/*! objects/templates/logic-question-editor.directive.ts */ "./extensions/objects/templates/logic-question-editor.directive.ts");
__webpack_require__(/*! objects/templates/math-latex-string-editor.directive.ts */ "./extensions/objects/templates/math-latex-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/music-phrase-editor.directive.ts */ "./extensions/objects/templates/music-phrase-editor.directive.ts");
__webpack_require__(/*! objects/templates/nonnegative-int-editor.directive.ts */ "./extensions/objects/templates/nonnegative-int-editor.directive.ts");
__webpack_require__(/*! objects/templates/normalized-string-editor.directive.ts */ "./extensions/objects/templates/normalized-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/number-with-units-editor.directive.ts */ "./extensions/objects/templates/number-with-units-editor.directive.ts");
__webpack_require__(/*! objects/templates/parameter-name-editor.directive.ts */ "./extensions/objects/templates/parameter-name-editor.directive.ts");
__webpack_require__(/*! objects/templates/real-editor.directive.ts */ "./extensions/objects/templates/real-editor.directive.ts");
__webpack_require__(/*! objects/templates/sanitized-url-editor.directive.ts */ "./extensions/objects/templates/sanitized-url-editor.directive.ts");
__webpack_require__(/*! objects/templates/set-of-html-string-editor.directive.ts */ "./extensions/objects/templates/set-of-html-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/set-of-unicode-string-editor.directive.ts */ "./extensions/objects/templates/set-of-unicode-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/unicode-string-editor.directive.ts */ "./extensions/objects/templates/unicode-string-editor.directive.ts");


/***/ }),

/***/ "./extensions/objects/templates/boolean-editor.directive.ts":
/*!******************************************************************!*\
  !*** ./extensions/objects/templates/boolean-editor.directive.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for boolean editor.
 */
// The value for this editor is always editable.
angular.module('oppia').directive('booleanEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function (newValue) {
                        ctrl.localValue = {
                            label: newValue || false
                        };
                    }, true);
                    $scope.$watch('$ctrl.localValue.label', function (newValue) {
                        ctrl.value = newValue;
                    });
                }],
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/boolean-editor.directive.html'),
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/code-string-editor.directive.ts":
/*!**********************************************************************!*\
  !*** ./extensions/objects/templates/code-string-editor.directive.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for code string editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('codeStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getAlwaysEditable: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/code-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.alwaysEditable = ctrl.getAlwaysEditable();
                    ctrl.getWarningText = function () {
                        if (ctrl.localValue.label.indexOf('\t') !== -1) {
                            return 'Code may not contain tab characters.';
                        }
                        return '';
                    };
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function () {
                        ctrl.localValue = {
                            label: ctrl.value || ''
                        };
                    }, true);
                    $scope.$watch('$ctrl.localValue.label', function (newValue) {
                        ctrl.value = newValue;
                    });
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/coord-two-dim-editor.directive.ts":
/*!************************************************************************!*\
  !*** ./extensions/objects/templates/coord-two-dim-editor.directive.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for coord two dim editor.
 */
angular.module('oppia').directive('coordTwoDimEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.mapCenter = {
                        lat: ctrl.value[0],
                        lng: ctrl.value[1],
                        zoom: 0
                    };
                    ctrl.mapMarkers = {
                        mainMarker: {
                            lat: ctrl.value[0],
                            lng: ctrl.value[1],
                            focus: true,
                            draggable: true,
                            icon: {
                                iconUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-icon.png'),
                                // The size of the icon image in pixels.
                                iconSize: [25, 41],
                                // The coordinates of the "tip" of the icon.
                                iconAnchor: [12, 41],
                                shadowUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-shadow.png'),
                                // The size of the shadow image in pixels.
                                shadowSize: [41, 41],
                                // The coordinates of the "tip" of the shadow.
                                shadowAnchor: [13, 41],
                                // The URL to a retina sized version of the icon image.
                                // Used for Retina screen devices.
                                iconRetinaUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-icon-2x.png'),
                                shadowRetinaUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/InteractiveMap/static/marker-shadow.png')
                            }
                        }
                    };
                    ctrl.mapEvents = {
                        map: {
                            enable: ['click'],
                            logic: 'emit'
                        },
                        markers: {
                            enable: ['dragend'],
                            logic: 'emit'
                        }
                    };
                    $scope.$on('leafletDirectiveMap.coordTwoDimEditor.click', function (evt, args) {
                        var newLat = args.leafletEvent.latlng.lat;
                        var newLng = args.leafletEvent.latlng.lng;
                        ctrl.value = [newLat, newLng];
                        updateMarker(newLat, newLng);
                    });
                    $scope.$on('leafletDirectiveMarker.coordTwoDimEditor.dragend', function (evt, args) {
                        ctrl.value = [args.model.lat, args.model.lng];
                    });
                    var updateMarker = function (lat, lng) {
                        ctrl.mapMarkers.mainMarker.lat = lat;
                        ctrl.mapMarkers.mainMarker.lng = lng;
                    };
                }],
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/coord-two-dim-editor.directive.html'),
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/drag-and-drop-html-string-editor.directive.ts":
/*!************************************************************************************!*\
  !*** ./extensions/objects/templates/drag-and-drop-html-string-editor.directive.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for drag and drop HTML string editor.
 */
angular.module('oppia').directive('dragAndDropHtmlStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/drag-and-drop-html-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.name = math.random().toString(36).substring(7);
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.choices = ctrl.initArgs.choices;
                    if (!ctrl.value || ctrl.value === '') {
                        ctrl.value = ctrl.choices[0].id;
                    }
                    ctrl.selectedItem = ctrl.value;
                    ctrl.selection = function (selectedItem) {
                        ctrl.value = selectedItem;
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/drag-and-drop-positive-int-editor.directive.ts":
/*!*************************************************************************************!*\
  !*** ./extensions/objects/templates/drag-and-drop-positive-int-editor.directive.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for drag and drop positive int editor.
 */
angular.module('oppia').directive('dragAndDropPositiveIntEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/drag_and_drop_positive_int-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    if (!parseInt(ctrl.value)) {
                        ctrl.value = 1;
                    }
                    if (!ctrl.selectedRank) {
                        ctrl.selectedRank = '';
                    }
                    ctrl.allowedRanks = [];
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.choices = ctrl.initArgs.choices;
                    for (var i = 0; i < ctrl.choices.length; i++) {
                        ctrl.allowedRanks.push(i + 1);
                    }
                    ctrl.selection = function (selectedRank) {
                        ctrl.value = parseInt(selectedRank);
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/filepath-editor.directive.ts":
/*!*******************************************************************!*\
  !*** ./extensions/objects/templates/filepath-editor.directive.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for filepath editor.
 */
// This directive can only be used in the context of an exploration.
__webpack_require__(/*! components/forms/custom-forms-directives/image-uploader.directive.ts */ "./core/templates/dev/head/components/forms/custom-forms-directives/image-uploader.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/AssetsBackendApiService.ts */ "./core/templates/dev/head/services/AssetsBackendApiService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/CsrfTokenService.ts */ "./core/templates/dev/head/services/CsrfTokenService.ts");
angular.module('oppia').directive('filepathEditor', [
    '$sce', 'AlertsService', 'AssetsBackendApiService',
    'ContextService', 'CsrfTokenService', 'UrlInterpolationService',
    function ($sce, AlertsService, AssetsBackendApiService, ContextService, CsrfTokenService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/filepath-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    var MODE_EMPTY = 1;
                    var MODE_UPLOADED = 2;
                    var MODE_SAVED = 3;
                    // We only use PNG format since that is what canvas can export to in
                    // all browsers.
                    // TODO(sll): See if we can add support for other image formats.
                    var OUTPUT_IMAGE_FORMAT = 'png';
                    var OUTPUT_IMAGE_MAX_WIDTH_PX = 490;
                    var CROP_BORDER_MARGIN_PX = 10;
                    var CROP_AREA_MIN_WIDTH_PX = 40;
                    var CROP_AREA_MIN_HEIGHT_PX = 40;
                    // Categorize mouse positions with respect to the crop area.
                    var MOUSE_TOP_LEFT = 1;
                    var MOUSE_TOP = 2;
                    var MOUSE_TOP_RIGHT = 3;
                    var MOUSE_RIGHT = 4;
                    var MOUSE_BOTTOM_RIGHT = 5;
                    var MOUSE_BOTTOM = 6;
                    var MOUSE_BOTTOM_LEFT = 7;
                    var MOUSE_LEFT = 8;
                    var MOUSE_INSIDE = 9;
                    // Define the cursors for the crop area.
                    var CROP_CURSORS = {};
                    CROP_CURSORS[MOUSE_TOP_LEFT] = 'nwse-resize';
                    CROP_CURSORS[MOUSE_TOP] = 'ns-resize';
                    CROP_CURSORS[MOUSE_TOP_RIGHT] = 'nesw-resize';
                    CROP_CURSORS[MOUSE_RIGHT] = 'ew-resize';
                    CROP_CURSORS[MOUSE_BOTTOM_RIGHT] = 'nwse-resize';
                    CROP_CURSORS[MOUSE_BOTTOM] = 'ns-resize';
                    CROP_CURSORS[MOUSE_BOTTOM_LEFT] = 'nesw-resize';
                    CROP_CURSORS[MOUSE_LEFT] = 'ew-resize';
                    CROP_CURSORS[MOUSE_INSIDE] = 'move';
                    /** Internal functions (not visible in the view) */
                    /**
                     * Resamples an image to the specified dimension.
                     *
                     * @param imageDataURI A DOMString containing the input image data URI.
                     * @param width The desired output width.
                     * @param height The desired output height.
                     * @return A DOMString containing the output image data URI.
                     */
                    var getResampledImageData = function (imageDataURI, width, height) {
                        // Create an Image object with the original data.
                        var img = new Image();
                        img.src = imageDataURI;
                        // Create a Canvas and draw the image on it, resampled.
                        var canvas = document.createElement('canvas');
                        canvas.width = width;
                        canvas.height = height;
                        var ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0, width, height);
                        return canvas.toDataURL('image/' + OUTPUT_IMAGE_FORMAT, 1);
                    };
                    /**
                     * Crops an image to the specified rectangular region.
                     *
                     * @param imageDataURI A DOMString containing the input image data URI.
                     * @param x The x coorinate of the top-left corner of the crop region.
                     * @param y The y coorinate of the top-left corner of the crop region.
                     * @param width The width of the crop region.
                     * @param height The height of the crop region.
                     * @return A DOMString containing the output image data URI.
                     */
                    var getCroppedImageData = function (imageDataURI, x, y, width, height) {
                        // Put the original image in a canvas.
                        var img = new Image();
                        img.src = imageDataURI;
                        var canvas = document.createElement('canvas');
                        canvas.width = x + width;
                        canvas.height = y + height;
                        var ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0);
                        // Get image data for a cropped selection.
                        var data = ctx.getImageData(x, y, width, height);
                        // Draw on a separate canvas and return the dataURL.
                        var cropCanvas = document.createElement('canvas');
                        cropCanvas.width = width;
                        cropCanvas.height = height;
                        var cropCtx = cropCanvas.getContext('2d');
                        cropCtx.putImageData(data, 0, 0);
                        return cropCanvas.toDataURL('image/' + OUTPUT_IMAGE_FORMAT, 1);
                    };
                    var convertImageDataToImageFile = function (dataURI) {
                        // Convert base64/URLEncoded data component to raw binary data
                        // held in a string.
                        var byteString = atob(dataURI.split(',')[1]);
                        // Separate out the mime component.
                        var mime = dataURI.split(',')[0].split(':')[1].split(';')[0];
                        // Write the bytes of the string to a typed array.
                        var ia = new Uint8Array(byteString.length);
                        for (var i = 0; i < byteString.length; i++) {
                            ia[i] = byteString.charCodeAt(i);
                        }
                        var blob = new Blob([ia], { type: mime });
                        if (blob.type.match('image') &&
                            blob.size > 0) {
                            return blob;
                        }
                        else {
                            return null;
                        }
                    };
                    var getEventCoorindatesRelativeToImageContainer = function (e) {
                        // Even though the event listeners are added to the image container,
                        // the events seem to be reported with 'target' set to the deepest
                        // element where the event occurred. In other words, if the event
                        // occurred outside of the crop area, then the (x, y) reported will be
                        // the one with respect to the image container, but if the event
                        // occurs inside the crop area, then the (x, y) reported will be the
                        // one with respect to the crop area itself. So this function does
                        // normalization on the (x, y) values so that they are always reported
                        // with respect to the image container (makes calculations easier).
                        var x = e.offsetX;
                        var y = e.offsetY;
                        var containerClass = 'filepath-editor-image-crop-container';
                        var node = e.target;
                        while (!node.classList.contains(containerClass)) {
                            x += node.offsetLeft;
                            y += node.offsetTop;
                            node = node.offsetParent;
                        }
                        return { x: x, y: y };
                    };
                    var clamp = function (value, min, max) {
                        return Math.min(Math.max(min, value), max);
                    };
                    var handleMouseMoveWhileDraggingCropArea = function (x, y) {
                        var xDown = ctrl.lastMouseDownEventCoordinates.x;
                        var yDown = ctrl.lastMouseDownEventCoordinates.y;
                        var x1WhenDown = ctrl.cropAreaXWhenLastDown;
                        var y1WhenDown = ctrl.cropAreaYWhenLastDown;
                        // Calculate new position of the crop area.
                        var x1 = x1WhenDown + (x - xDown);
                        var y1 = y1WhenDown + (y - yDown);
                        // Correct for boundaries.
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var cropWidth = ctrl.cropArea.x2 - ctrl.cropArea.x1;
                        var cropHeight = ctrl.cropArea.y2 - ctrl.cropArea.y1;
                        x1 = clamp(x1, 0, dimensions.width - cropWidth);
                        y1 = clamp(y1, 0, dimensions.height - cropHeight);
                        // Update crop area coordinates.
                        ctrl.cropArea.x1 = x1;
                        ctrl.cropArea.y1 = y1;
                        ctrl.cropArea.x2 = x1 + cropWidth;
                        ctrl.cropArea.y2 = y1 + cropHeight;
                    };
                    var handleMouseMoveWhileResizingCropArea = function (x, y) {
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var direction = ctrl.cropAreaResizeDirection;
                        var adjustResizeLeft = function (x) {
                            // Update crop area x1 value, correcting for boundaries.
                            ctrl.cropArea.x1 = clamp(x, 0, ctrl.cropArea.x2 - CROP_AREA_MIN_WIDTH_PX);
                        };
                        var adjustResizeRight = function (x) {
                            // Update crop area x2 value, correcting for boundaries.
                            ctrl.cropArea.x2 = clamp(x, CROP_AREA_MIN_WIDTH_PX + ctrl.cropArea.x1, dimensions.width);
                        };
                        var adjustResizeTop = function (y) {
                            // Update crop area y1 value, correcting for boundaries.
                            ctrl.cropArea.y1 = clamp(y, 0, ctrl.cropArea.y2 - CROP_AREA_MIN_HEIGHT_PX);
                        };
                        var adjustResizeBottom = function (y) {
                            // Update crop area y2 value, correcting for boundaries.
                            ctrl.cropArea.y2 = clamp(y, CROP_AREA_MIN_HEIGHT_PX + ctrl.cropArea.y1, dimensions.height);
                        };
                        switch (direction) {
                            case MOUSE_TOP_LEFT:
                                adjustResizeTop(y);
                                adjustResizeLeft(x);
                                break;
                            case MOUSE_TOP:
                                adjustResizeTop(y);
                                break;
                            case MOUSE_TOP_RIGHT:
                                adjustResizeTop(y);
                                adjustResizeRight(x);
                                break;
                            case MOUSE_RIGHT:
                                adjustResizeRight(x);
                                break;
                            case MOUSE_BOTTOM_RIGHT:
                                adjustResizeBottom(y);
                                adjustResizeRight(x);
                                break;
                            case MOUSE_BOTTOM:
                                adjustResizeBottom(y);
                                break;
                            case MOUSE_BOTTOM_LEFT:
                                adjustResizeBottom(y);
                                adjustResizeLeft(x);
                                break;
                            case MOUSE_LEFT:
                                adjustResizeLeft(x);
                                break;
                        }
                    };
                    var updatePositionWithinCropArea = function (x, y) {
                        var margin = CROP_BORDER_MARGIN_PX;
                        var cx1 = ctrl.cropArea.x1;
                        var cy1 = ctrl.cropArea.y1;
                        var cx2 = ctrl.cropArea.x2;
                        var cy2 = ctrl.cropArea.y2;
                        var xOnLeftBorder = x > cx1 - margin && x < cx1 + margin;
                        var xOnRightBorder = x > cx2 - margin && x < cx2 + margin;
                        var yOnTopBorder = y > cy1 - margin && y < cy1 + margin;
                        var yOnBottomBorder = y > cy2 - margin && y < cy2 + margin;
                        var xInside = x > cx1 && x < cx2;
                        var yInside = y > cy1 && y < cy2;
                        // It is important to check the pointer position for corners first,
                        // since the conditions overlap. In other words, the pointer can be
                        // at the top border and at the top-right corner at the same time, in
                        // which case we want to recognize the corner.
                        if (xOnLeftBorder && yOnTopBorder) {
                            // Upper left corner.
                            ctrl.mousePositionWithinCropArea = MOUSE_TOP_LEFT;
                        }
                        else if (xOnRightBorder && yOnTopBorder) {
                            // Upper right corner.
                            ctrl.mousePositionWithinCropArea = MOUSE_TOP_RIGHT;
                        }
                        else if (xOnLeftBorder && yOnBottomBorder) {
                            // Lower left corner.
                            ctrl.mousePositionWithinCropArea = MOUSE_BOTTOM_LEFT;
                        }
                        else if (xOnRightBorder && yOnBottomBorder) {
                            // Lower right corner.
                            ctrl.mousePositionWithinCropArea = MOUSE_BOTTOM_RIGHT;
                        }
                        else if (yOnTopBorder) {
                            // Top border.
                            ctrl.mousePositionWithinCropArea = MOUSE_TOP;
                        }
                        else if (xOnLeftBorder) {
                            // Left border.
                            ctrl.mousePositionWithinCropArea = MOUSE_LEFT;
                        }
                        else if (xOnRightBorder) {
                            // Right border.
                            ctrl.mousePositionWithinCropArea = MOUSE_RIGHT;
                        }
                        else if (yOnBottomBorder) {
                            // Bottom border.
                            ctrl.mousePositionWithinCropArea = MOUSE_BOTTOM;
                        }
                        else if (xInside && yInside) {
                            // Inside the crop area.
                            ctrl.mousePositionWithinCropArea = MOUSE_INSIDE;
                        }
                        else {
                            ctrl.mousePositionWithinCropArea = null;
                        }
                    };
                    var getTrustedResourceUrlForImageFileName = function (imageFileName) {
                        var encodedFilepath = window.encodeURIComponent(imageFileName);
                        return $sce.trustAsResourceUrl(AssetsBackendApiService.getImageUrlForPreview(ctrl.entityType, ctrl.entityId, encodedFilepath));
                    };
                    /** Scope variables and functions (visibles to the view) */
                    // Reset the component each time the value changes
                    // (e.g. if this is part of an editable list).
                    $scope.$watch('$ctrl.value', function (newValue) {
                        if (newValue) {
                            ctrl.setSavedImageFilename(newValue, false);
                        }
                    });
                    ctrl.resetFilePathEditor = function () {
                        ctrl.data = {
                            mode: MODE_EMPTY,
                            metadata: {}
                        };
                        ctrl.imageResizeRatio = 1;
                    };
                    ctrl.validate = function (data) {
                        return data.mode === MODE_SAVED &&
                            data.metadata.savedImageFilename &&
                            data.metadata.savedImageFilename.length > 0;
                    };
                    ctrl.isUserCropping = function () {
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var cropWidth = ctrl.cropArea.x2 - ctrl.cropArea.x1;
                        var cropHeight = ctrl.cropArea.y2 - ctrl.cropArea.y1;
                        return cropWidth < dimensions.width || cropHeight < dimensions.height;
                    };
                    ctrl.onMouseMoveOnImageArea = function (e) {
                        e.preventDefault();
                        var coords = getEventCoorindatesRelativeToImageContainer(e);
                        if (ctrl.userIsDraggingCropArea) {
                            handleMouseMoveWhileDraggingCropArea(coords.x, coords.y);
                        }
                        else if (ctrl.userIsResizingCropArea) {
                            handleMouseMoveWhileResizingCropArea(coords.x, coords.y);
                        }
                        else {
                            updatePositionWithinCropArea(coords.x, coords.y);
                        }
                        ctrl.mouseLastKnownCoordinates = { x: coords.x, y: coords.y };
                    };
                    ctrl.onMouseDownOnCropArea = function (e) {
                        e.preventDefault();
                        var coords = getEventCoorindatesRelativeToImageContainer(e);
                        var position = ctrl.mousePositionWithinCropArea;
                        if (position === MOUSE_INSIDE) {
                            ctrl.lastMouseDownEventCoordinates = { x: coords.x, y: coords.y };
                            ctrl.cropAreaXWhenLastDown = ctrl.cropArea.x1;
                            ctrl.cropAreaYWhenLastDown = ctrl.cropArea.y1;
                            ctrl.userIsDraggingCropArea = true;
                        }
                        else if (position !== null) {
                            ctrl.lastMouseDownEventCoordinates = { x: coords.x, y: coords.y };
                            ctrl.userIsResizingCropArea = true;
                            ctrl.cropAreaResizeDirection = position;
                        }
                    };
                    ctrl.onMouseUpOnCropArea = function (e) {
                        e.preventDefault();
                        ctrl.userIsDraggingCropArea = false;
                        ctrl.userIsResizingCropArea = false;
                    };
                    ctrl.getMainContainerDynamicStyles = function () {
                        var width = OUTPUT_IMAGE_MAX_WIDTH_PX;
                        return 'width: ' + width + 'px';
                    };
                    ctrl.getImageContainerDynamicStyles = function () {
                        if (ctrl.data.mode === MODE_EMPTY) {
                            return 'border: 1px dotted #888';
                        }
                        else {
                            return 'border: none';
                        }
                    };
                    ctrl.getToolbarDynamicStyles = function () {
                        if (ctrl.isUserCropping()) {
                            return 'visibility: hidden';
                        }
                        else {
                            return 'visibility: visible';
                        }
                    };
                    ctrl.getCropButtonBarDynamicStyles = function () {
                        return 'left: ' + ctrl.cropArea.x2 + 'px;' +
                            'top: ' + ctrl.cropArea.y1 + 'px;';
                    };
                    ctrl.getCropAreaDynamicStyles = function () {
                        var cropWidth = ctrl.cropArea.x2 - ctrl.cropArea.x1;
                        var cropHeight = ctrl.cropArea.y2 - ctrl.cropArea.y1;
                        var position = ctrl.mousePositionWithinCropArea;
                        // Position, size, cursor and background.
                        var styles = {
                            left: ctrl.cropArea.x1 + 'px',
                            top: ctrl.cropArea.y1 + 'px',
                            width: cropWidth + 'px',
                            height: cropHeight + 'px',
                            cursor: CROP_CURSORS[position],
                            background: null
                        };
                        if (!styles.cursor) {
                            styles.cursor = 'default';
                        }
                        // Translucent background layer.
                        if (ctrl.isUserCropping()) {
                            var data = 'url(' + ctrl.data.metadata.uploadedImageData + ')';
                            styles.background = data + ' no-repeat';
                            var x = ctrl.cropArea.x1 + 3; // Add crop area border.
                            var y = ctrl.cropArea.y1 + 3; // Add crop area border.
                            styles['background-position'] = '-' + x + 'px -' + y + 'px';
                            var dimensions = ctrl.calculateTargetImageDimensions();
                            styles['background-size'] = dimensions.width + 'px ' +
                                dimensions.height + 'px';
                        }
                        return Object.keys(styles).map(function (key) {
                            return key + ': ' + styles[key];
                        }).join('; ');
                    };
                    ctrl.getUploadedImageDynamicStyles = function () {
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var w = dimensions.width;
                        var h = dimensions.height;
                        return 'width: ' + w + 'px; height: ' + h + 'px;';
                    };
                    ctrl.confirmCropImage = function () {
                        // Find coordinates of the cropped area within original image scale.
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var r = ctrl.data.metadata.originalWidth / dimensions.width;
                        var x1 = ctrl.cropArea.x1 * r;
                        var y1 = ctrl.cropArea.y1 * r;
                        var width = (ctrl.cropArea.x2 - ctrl.cropArea.x1) * r;
                        var height = (ctrl.cropArea.y2 - ctrl.cropArea.y1) * r;
                        // Generate new image data and file.
                        var newImageData = getCroppedImageData(ctrl.data.metadata.uploadedImageData, x1, y1, width, height);
                        var newImageFile = convertImageDataToImageFile(newImageData);
                        // Update image data.
                        ctrl.data.metadata.uploadedFile = newImageFile;
                        ctrl.data.metadata.uploadedImageData = newImageData;
                        ctrl.data.metadata.originalWidth = width;
                        ctrl.data.metadata.originalHeight = height;
                        // Re-calculate the dimensions of the base image and reset the
                        // coordinates of the crop area to the boundaries of the image.
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        ctrl.cropArea = {
                            x1: 0,
                            y1: 0,
                            x2: dimensions.width,
                            y2: dimensions.height
                        };
                    };
                    ctrl.cancelCropImage = function () {
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        ctrl.cropArea.x1 = 0;
                        ctrl.cropArea.y1 = 0;
                        ctrl.cropArea.x2 = dimensions.width;
                        ctrl.cropArea.y2 = dimensions.height;
                    };
                    ctrl.getImageSizeHelp = function () {
                        var imageWidth = ctrl.data.metadata.originalWidth;
                        if (ctrl.imageResizeRatio === 1 &&
                            imageWidth > OUTPUT_IMAGE_MAX_WIDTH_PX) {
                            return 'This image has been automatically downsized to ensure ' +
                                'that it will fit in the card.';
                        }
                        return null;
                    };
                    ctrl.isNoImageUploaded = function () {
                        return ctrl.data.mode === MODE_EMPTY;
                    };
                    ctrl.isImageUploaded = function () {
                        return ctrl.data.mode === MODE_UPLOADED;
                    };
                    ctrl.isImageSaved = function () {
                        return ctrl.data.mode === MODE_SAVED;
                    };
                    ctrl.getCurrentResizePercent = function () {
                        return Math.round(100 * ctrl.imageResizeRatio);
                    };
                    ctrl.decreaseResizePercent = function (amount) {
                        // Do not allow to decrease size below 10%.
                        ctrl.imageResizeRatio = Math.max(0.1, ctrl.imageResizeRatio - amount / 100);
                    };
                    ctrl.increaseResizePercent = function (amount) {
                        // Do not allow to increase size above 100% (only downsize allowed).
                        ctrl.imageResizeRatio = Math.min(1, ctrl.imageResizeRatio + amount / 100);
                    };
                    ctrl.calculateTargetImageDimensions = function () {
                        var width = ctrl.data.metadata.originalWidth;
                        var height = ctrl.data.metadata.originalHeight;
                        if (width > OUTPUT_IMAGE_MAX_WIDTH_PX) {
                            var aspectRatio = width / height;
                            width = OUTPUT_IMAGE_MAX_WIDTH_PX;
                            height = width / aspectRatio;
                        }
                        return {
                            width: Math.round(width * ctrl.imageResizeRatio),
                            height: Math.round(height * ctrl.imageResizeRatio)
                        };
                    };
                    ctrl.setUploadedFile = function (file) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            var img = new Image();
                            img.onload = function () {
                                ctrl.data = {
                                    mode: MODE_UPLOADED,
                                    metadata: {
                                        uploadedFile: file,
                                        uploadedImageData: e.target.result,
                                        originalWidth: img.naturalWidth,
                                        originalHeight: img.naturalHeight
                                    }
                                };
                                var dimensions = ctrl.calculateTargetImageDimensions();
                                ctrl.cropArea = {
                                    x1: 0,
                                    y1: 0,
                                    x2: dimensions.width,
                                    y2: dimensions.height
                                };
                                $scope.$apply();
                            };
                            img.src = (e.target.result);
                        };
                        reader.readAsDataURL(file);
                    };
                    ctrl.setSavedImageFilename = function (filename, updateParent) {
                        ctrl.data = {
                            mode: MODE_SAVED,
                            metadata: {
                                savedImageFilename: filename,
                                savedImageUrl: getTrustedResourceUrlForImageFileName(filename)
                            }
                        };
                        if (updateParent) {
                            AlertsService.clearWarnings();
                            ctrl.value = filename;
                        }
                    };
                    ctrl.onFileChanged = function (file, filename) {
                        ctrl.setUploadedFile(file);
                        $scope.$apply();
                    };
                    ctrl.discardUploadedFile = function () {
                        ctrl.resetFilePathEditor();
                    };
                    ctrl.saveUploadedFile = function () {
                        AlertsService.clearWarnings();
                        if (!ctrl.data.metadata.uploadedFile) {
                            AlertsService.addWarning('No image file detected.');
                            return;
                        }
                        var dimensions = ctrl.calculateTargetImageDimensions();
                        var resampledImageData = getResampledImageData(ctrl.data.metadata.uploadedImageData, dimensions.width, dimensions.height);
                        var resampledFile = convertImageDataToImageFile(resampledImageData);
                        if (resampledFile === null) {
                            AlertsService.addWarning('Could not get resampled file.');
                            return;
                        }
                        var form = new FormData();
                        form.append('image', resampledFile);
                        form.append('payload', JSON.stringify({
                            filename: ctrl.generateImageFilename(dimensions.height, dimensions.width)
                        }));
                        var imageUploadUrlTemplate = '/createhandler/imageupload/' +
                            '<entity_type>/<entity_id>';
                        CsrfTokenService.getTokenAsync().then(function (token) {
                            form.append('csrf_token', token);
                            $.ajax({
                                url: UrlInterpolationService.interpolateUrl(imageUploadUrlTemplate, {
                                    entity_type: ctrl.entityType,
                                    entity_id: ctrl.entityId
                                }),
                                data: form,
                                processData: false,
                                contentType: false,
                                type: 'POST',
                                dataFilter: function (data) {
                                    // Remove the XSSI prefix.
                                    var transformedData = data.substring(5);
                                    return JSON.parse(transformedData);
                                },
                                dataType: 'text'
                            }).done(function (data) {
                                // Pre-load image before marking the image as saved.
                                var img = new Image();
                                img.onload = function () {
                                    ctrl.setSavedImageFilename(data.filename, true);
                                    $scope.$apply();
                                };
                                img.src = getTrustedResourceUrlForImageFileName(data.filename);
                            }).fail(function (data) {
                                // Remove the XSSI prefix.
                                var transformedData = data.responseText.substring(5);
                                var parsedResponse = JSON.parse(transformedData);
                                AlertsService.addWarning(parsedResponse.error || 'Error communicating with server.');
                                $scope.$apply();
                            });
                        });
                    };
                    ctrl.generateImageFilename = function (height, width) {
                        var date = new Date();
                        return 'img_' +
                            date.getFullYear() +
                            ('0' + (date.getMonth() + 1)).slice(-2) +
                            ('0' + date.getDate()).slice(-2) +
                            '_' +
                            ('0' + date.getHours()).slice(-2) +
                            ('0' + date.getMinutes()).slice(-2) +
                            ('0' + date.getSeconds()).slice(-2) +
                            '_' +
                            Math.random().toString(36).substr(2, 10) +
                            '_height_' + height +
                            '_width_' + width +
                            '.' + OUTPUT_IMAGE_FORMAT;
                    };
                    // This variable holds information about the image upload flow.
                    // It's always guaranteed to have the 'mode' and 'metadata' properties.
                    //
                    // See below a description of each mode.
                    //
                    // MODE_EMPTY:
                    //   The user has not uploaded an image yet.
                    //   In this mode, data.metadata will be an empty object:
                    //     {}
                    //
                    // MODE_UPLOADED:
                    //   The user has uploaded an image but it is not yet saved.
                    //   All the crop and resizing happens at this stage.
                    //   In this mode, data.metadata will contain the following info:
                    //     {
                    //       uploadedFile: <a File object>,
                    //       uploadedImageData: <binary data corresponding to the image>,
                    //       originalWidth: <original width of the uploaded image>,
                    //       originalHeight: <original height of the uploaded image>
                    //     }
                    //
                    // MODE_SAVED:
                    //   The user has saved the final image for use in Oppia.
                    //   At this stage, the user can click on the trash to start over.
                    //   In this mode, data.metadata will contain the following info:
                    //     {
                    //       savedImageFilename: <File name of the resource for the image>
                    //       savedImageUrl: <Trusted resource Url for the image>
                    //     }
                    ctrl.data = { mode: MODE_EMPTY, metadata: {} };
                    // Resizing properties.
                    ctrl.imageResizeRatio = 1;
                    // Cropping properties.
                    ctrl.cropArea = { x1: 0, y1: 0, x2: 0, y2: 0 };
                    ctrl.mousePositionWithinCropArea = null;
                    ctrl.mouseLastKnownCoordinates = { x: 0, y: 0 };
                    ctrl.lastMouseDownEventCoordinates = { x: 0, y: 0 };
                    ctrl.userIsDraggingCropArea = false;
                    ctrl.userIsResizingCropArea = false;
                    ctrl.cropAreaResizeDirection = null;
                    ctrl.entityId = ContextService.getEntityId();
                    ctrl.entityType = ContextService.getEntityType();
                    ctrl.resetFilePathEditor();
                    window.addEventListener('mouseup', function (e) {
                        e.preventDefault();
                        ctrl.userIsDraggingCropArea = false;
                        ctrl.userIsResizingCropArea = false;
                    }, false);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/fraction-editor.directive.ts":
/*!*******************************************************************!*\
  !*** ./extensions/objects/templates/fraction-editor.directive.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for fraction editor.
 */
angular.module('oppia').directive('fractionEditor', [
    'FractionObjectFactory', 'UrlInterpolationService',
    function (FractionObjectFactory, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/fraction-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    var errorMessage = '';
                    var fractionString = '0';
                    if (ctrl.value !== null) {
                        var defaultFraction = FractionObjectFactory.fromDict(ctrl.value);
                        fractionString = defaultFraction.toString();
                    }
                    ctrl.localValue = {
                        label: fractionString
                    };
                    $scope.$watch('$ctrl.localValue.label', function (newValue) {
                        try {
                            ctrl.value = FractionObjectFactory.fromRawInputString(newValue);
                            errorMessage = '';
                        }
                        catch (parsingError) {
                            errorMessage = parsingError.message;
                        }
                    });
                    ctrl.getWarningText = function () {
                        return errorMessage;
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/graph-editor.directive.ts":
/*!****************************************************************!*\
  !*** ./extensions/objects/templates/graph-editor.directive.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for graph editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('graphEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/graph-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.alwaysEditable = true;
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/graph-property-editor.directive.ts":
/*!*************************************************************************!*\
  !*** ./extensions/objects/templates/graph-property-editor.directive.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for graph property editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('graphPropertyEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/graph-property-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.alwaysEditable = true;
                    ctrl.graphProperties = [{
                            name: 'regular',
                            humanReadableName: 'regular'
                        }, {
                            name: 'acyclic',
                            humanReadableName: 'acyclic'
                        }, {
                            name: 'strongly_connected',
                            humanReadableName: 'strongly connected'
                        }, {
                            name: 'weakly_connected',
                            humanReadableName: 'weakly connected'
                        }];
                    ctrl.localValue = {
                        property: ctrl.graphProperties[0]
                    };
                    for (var i = 0; i < ctrl.graphProperties.length; i++) {
                        if (ctrl.graphProperties[i].name === ctrl.value) {
                            ctrl.localValue.property = ctrl.graphProperties[i];
                        }
                    }
                    $scope.$watch('$ctrl.localValue.property', function () {
                        ctrl.value = ctrl.localValue.property.name;
                    });
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/html-editor.directive.ts":
/*!***************************************************************!*\
  !*** ./extensions/objects/templates/html-editor.directive.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for HTML editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
//
// This directive is based on the UnicodeString directive.
angular.module('oppia').directive('htmlEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/html-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.schema = {
                        type: 'html'
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/image-with-regions-editor.directive.ts":
/*!*****************************************************************************!*\
  !*** ./extensions/objects/templates/image-with-regions-editor.directive.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for image with regions editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
// TODO(czx): Uniquify the labels of image regions
angular.module('oppia').directive('imageWithRegionsEditor', [
    'AssetsBackendApiService',
    'ContextService', 'UrlInterpolationService', 'ENTITY_TYPE',
    function (AssetsBackendApiService, ContextService, UrlInterpolationService, ENTITY_TYPE) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/image-with-regions-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$element', '$uibModal',
                function ($scope, $element, $uibModal) {
                    var ctrl = this;
                    ctrl.alwaysEditable = true;
                    // Dynamically defines the CSS style for the region rectangle.
                    ctrl.getRegionStyle = function (index) {
                        if (index === ctrl.selectedRegion) {
                            return 'fill: #00f; opacity: 0.5; stroke: #00d';
                        }
                        else {
                            return 'fill: white; opacity: 0.5; stroke: #ddd';
                        }
                    };
                    // Dynamically defines the CSS style for the region trash icon.
                    ctrl.getRegionTrashStyle = function (index) {
                        if (index === ctrl.selectedRegion) {
                            return 'fill: #eee; opacity: 0.7';
                        }
                        else {
                            return 'fill: #333; opacity: 0.7';
                        }
                    };
                    // Dynamically defines the CSS style for the region label.
                    ctrl.getRegionLabelStyle = function (index) {
                        var commonStyles = 'font-size: 14px; pointer-events: none;';
                        if (index === ctrl.selectedRegion) {
                            return commonStyles + ' fill: #eee; visibility: hidden;';
                        }
                        else {
                            return commonStyles + ' fill: #333; visibility: visible;';
                        }
                    };
                    // Dynamically defines the CSS style for the region label text input.
                    ctrl.getRegionLabelEditorStyle = function () {
                        if (ctrl.selectedRegion === null) {
                            return 'display: none';
                        }
                        var area = cornerAndDimensionsFromRegionArea(ctrl.value.labeledRegions[ctrl.selectedRegion].region.area);
                        return 'left: ' + (area.x + 6) + 'px; ' +
                            'top: ' + (area.y + 26) + 'px; ' +
                            'width: ' + (area.width - 12) + 'px;';
                    };
                    ctrl.initializeEditor = function () {
                        // All coordinates have origin at top-left,
                        // increasing in x to the right and increasing in y down
                        // Current mouse position in SVG coordinates
                        ctrl.mouseX = 0;
                        ctrl.mouseY = 0;
                        // Original mouse click position for rectangle drawing.
                        ctrl.originalMouseX = 0;
                        ctrl.originalMouseY = 0;
                        // Original position and dimensions for dragged rectangle.
                        ctrl.originalRectArea = {
                            x: 0,
                            y: 0,
                            width: 0,
                            height: 0
                        };
                        // Coordinates for currently drawn rectangle (when user is dragging)
                        ctrl.rectX = 0;
                        ctrl.rectY = 0;
                        ctrl.rectWidth = 0;
                        ctrl.rectHeight = 0;
                        // Is user currently drawing a new region?
                        ctrl.userIsCurrentlyDrawing = false;
                        // Is user currently dragging an existing region?
                        ctrl.userIsCurrentlyDragging = false;
                        // Is user currently resizing an existing region?
                        ctrl.userIsCurrentlyResizing = false;
                        // The horizontal direction along which user resize occurs.
                        // 1 -> Left     -1 -> Right     0 -> No resize
                        ctrl.xDirection = 0;
                        // The vertical direction along which user resize occurs.
                        // 1 -> Top     -1 -> Bottom     0 -> No resize
                        ctrl.yDirection = 0;
                        // Flags to check whether the direction changes while resizing.
                        ctrl.yDirectionToggled = false;
                        ctrl.xDirectionToggled = false;
                        // A boolean that is set whenever the cursor moves out of the
                        // rectangular region while resizing.
                        ctrl.movedOutOfRegion = false;
                        // The region along borders that will display the resize cursor.
                        ctrl.resizableBorderWidthPx = 10;
                        // Dimensions of original image.
                        ctrl.originalImageWidth = 0;
                        ctrl.originalImageHeight = 0;
                        // Index of region currently hovered over.
                        ctrl.hoveredRegion = null;
                        // Index of region currently selected.
                        ctrl.selectedRegion = null;
                        // Message to displaye when there is an error.
                        ctrl.errorText = '';
                    };
                    ctrl.initializeEditor();
                    // Calculates the dimensions of the image, assuming that the width
                    // of the image is scaled down to fit the svg element if necessary.
                    var _calculateImageDimensions = function () {
                        var svgElement = $($element).find('.oppia-image-with-regions-editor-svg');
                        var displayedImageWidth = Math.min(svgElement.width(), ctrl.originalImageWidth);
                        var scalingRatio = displayedImageWidth / ctrl.originalImageWidth;
                        // Note that scalingRatio may be NaN if ctrl.originalImageWidth is
                        // zero.
                        var displayedImageHeight = (ctrl.originalImageWidth === 0 ? 0.0 :
                            ctrl.originalImageHeight * scalingRatio);
                        return {
                            width: displayedImageWidth,
                            height: displayedImageHeight
                        };
                    };
                    // Use these two functions to get the calculated image width and
                    // height.
                    ctrl.getImageWidth = function () {
                        return _calculateImageDimensions().width;
                    };
                    ctrl.getImageHeight = function () {
                        return _calculateImageDimensions().height;
                    };
                    ctrl.getPreviewUrl = function (imageUrl) {
                        return AssetsBackendApiService.getImageUrlForPreview(ENTITY_TYPE.EXPLORATION, ContextService.getExplorationId(), encodeURIComponent(imageUrl));
                    };
                    // Called when the image is changed to calculate the required
                    // width and height, especially for large images.
                    $scope.$watch('$ctrl.value.imagePath', function (newVal) {
                        if (newVal !== '') {
                            // Loads the image in hanging <img> tag so as to get the
                            // width and height.
                            $('<img/>').attr('src', ctrl.getPreviewUrl(newVal)).on('load', function () {
                                ctrl.originalImageWidth = this.width;
                                ctrl.originalImageHeight = this.height;
                                $scope.$apply();
                            });
                        }
                    });
                    var hasDuplicates = function (originalArray) {
                        var array = originalArray.slice(0).sort();
                        for (var i = 1; i < array.length; i++) {
                            if (array[i - 1] === array[i]) {
                                return true;
                            }
                        }
                        return false;
                    };
                    ctrl.regionLabelGetterSetter = function (index) {
                        return function (label) {
                            if (angular.isDefined(label)) {
                                ctrl.value.labeledRegions[index].label = label;
                                var labels = ctrl.value.labeledRegions.map(function (region) {
                                    return region.label;
                                });
                                if (hasDuplicates(labels)) {
                                    ctrl.errorText = 'Warning: Label "' + label + '" already ' +
                                        'exists! Please use a different label.';
                                }
                                else {
                                    ctrl.errorText = '';
                                }
                            }
                            return ctrl.value.labeledRegions[index].label;
                        };
                    };
                    var convertCoordsToFraction = function (coords, dimensions) {
                        return [coords[0] / dimensions[0], coords[1] / dimensions[1]];
                    };
                    // Convert to and from region area (which is stored as a fraction of
                    // image width and height) and actual width and height.
                    var regionAreaFromCornerAndDimensions = function (x, y, width, height) {
                        return [
                            convertCoordsToFraction([x, y], [ctrl.getImageWidth(), ctrl.getImageHeight()]),
                            convertCoordsToFraction([x + width, y + height], [ctrl.getImageWidth(), ctrl.getImageHeight()])
                        ];
                    };
                    var cornerAndDimensionsFromRegionArea = function (area) {
                        return {
                            x: area[0][0] * ctrl.getImageWidth(),
                            y: area[0][1] * ctrl.getImageHeight(),
                            width: (area[1][0] - area[0][0]) * ctrl.getImageWidth(),
                            height: (area[1][1] - area[0][1]) * ctrl.getImageHeight()
                        };
                    };
                    var resizeRegion = function () {
                        var labeledRegions = ctrl.value.labeledRegions;
                        var resizedRegion = labeledRegions[ctrl.selectedRegion].region;
                        var deltaX = ctrl.mouseX - ctrl.originalMouseX;
                        var deltaY = ctrl.mouseY - ctrl.originalMouseY;
                        var x = ctrl.originalRectArea.x;
                        var y = ctrl.originalRectArea.y;
                        var width = ctrl.originalRectArea.width;
                        var height = ctrl.originalRectArea.height;
                        var newWidth = width - ctrl.xDirection * deltaX;
                        var newHeight = height - ctrl.yDirection * deltaY;
                        // The distance between where the mouse was first clicked to
                        // initiate the resize action and the left-most x co-ordinate of
                        // rectangle.
                        var marginX = Math.abs(ctrl.originalRectArea.x - ctrl.originalMouseX);
                        // The distance between where the mouse was first clicked to
                        // initiate the resize action and the top-most y co-ordinate of
                        // rectangle.
                        var marginY = Math.abs(ctrl.originalRectArea.y - ctrl.originalMouseY);
                        if (newHeight <= 0 && !ctrl.yDirectionToggled) {
                            ctrl.yDirectionToggled = true;
                        }
                        else if (newHeight >= 0 && ctrl.yDirectionToggled) {
                            ctrl.yDirectionToggled = false;
                        }
                        if (ctrl.yDirection === 1) {
                            y += ctrl.yDirectionToggled ? (height + marginY) : deltaY;
                        }
                        else if (ctrl.yDirection === -1) {
                            y += ctrl.yDirectionToggled * (deltaY + marginY);
                        }
                        if (newWidth <= 0 && !ctrl.xDirectionToggled) {
                            ctrl.xDirectionToggled = true;
                        }
                        else if (newWidth >= 0 && ctrl.xDirectionToggled) {
                            ctrl.xDirectionToggled = false;
                        }
                        if (ctrl.xDirection === 1) {
                            x += ctrl.xDirectionToggled ? (width + marginX) : deltaX;
                        }
                        else if (ctrl.xDirection === -1) {
                            x += ctrl.xDirectionToggled * (deltaX + marginX);
                        }
                        // Whenever the direction changes the value of newHeight and
                        // newWidth computed is negative, hence the absolute value is taken.
                        resizedRegion.area = regionAreaFromCornerAndDimensions(x, y, Math.abs(newWidth), Math.abs(newHeight));
                    };
                    ctrl.onSvgMouseMove = function (evt) {
                        var svgElement = $($element).find('.oppia-image-with-regions-editor-svg');
                        ctrl.mouseX = evt.pageX - svgElement.offset().left;
                        ctrl.mouseY = evt.pageY - svgElement.offset().top;
                        if (ctrl.userIsCurrentlyDrawing) {
                            ctrl.rectX = Math.min(ctrl.originalMouseX, ctrl.mouseX);
                            ctrl.rectY = Math.min(ctrl.originalMouseY, ctrl.mouseY);
                            ctrl.rectWidth = Math.abs(ctrl.originalMouseX - ctrl.mouseX);
                            ctrl.rectHeight = Math.abs(ctrl.originalMouseY - ctrl.mouseY);
                        }
                        else if (ctrl.userIsCurrentlyDragging) {
                            var labeledRegions = ctrl.value.labeledRegions;
                            var draggedRegion = labeledRegions[ctrl.selectedRegion].region;
                            var deltaX = ctrl.mouseX - ctrl.originalMouseX;
                            var deltaY = ctrl.mouseY - ctrl.originalMouseY;
                            var newX1 = ctrl.originalRectArea.x + deltaX;
                            var newY1 = ctrl.originalRectArea.y + deltaY;
                            var newX2 = newX1 + ctrl.originalRectArea.width;
                            var newY2 = newY1 + ctrl.originalRectArea.height;
                            if (newX1 < 0) {
                                newX1 = 0;
                                newX2 = ctrl.originalRectArea.width;
                            }
                            if (newY1 < 0) {
                                newY1 = 0;
                                newY2 = ctrl.originalRectArea.height;
                            }
                            if (newX2 > ctrl.getImageWidth()) {
                                newX2 = ctrl.getImageWidth();
                                newX1 = newX2 - ctrl.originalRectArea.width;
                            }
                            if (newY2 > ctrl.getImageHeight()) {
                                newY2 = ctrl.getImageHeight();
                                newY1 = newY2 - ctrl.originalRectArea.height;
                            }
                            draggedRegion.area = regionAreaFromCornerAndDimensions(newX1, newY1, ctrl.originalRectArea.width, ctrl.originalRectArea.height);
                        }
                        else if (ctrl.userIsCurrentlyResizing) {
                            resizeRegion();
                        }
                    };
                    ctrl.onSvgMouseDown = function (evt) {
                        evt.preventDefault();
                        ctrl.originalMouseX = ctrl.mouseX;
                        ctrl.originalMouseY = ctrl.mouseY;
                        if (ctrl.hoveredRegion === null) {
                            ctrl.rectWidth = ctrl.rectHeight = 0;
                            ctrl.userIsCurrentlyDrawing = true;
                        }
                    };
                    ctrl.onSvgMouseUp = function () {
                        if (ctrl.hoveredRegion === null) {
                            ctrl.selectedRegion = null;
                        }
                        if (ctrl.yDirectionToggled) {
                            ctrl.yDirection = (ctrl.yDirection === 1) ? -1 : 1;
                        }
                        if (ctrl.xDirectionToggled) {
                            ctrl.xDirection = (ctrl.xDirection === 1) ? -1 : 1;
                        }
                        if (ctrl.movedOutOfRegion) {
                            ctrl.xDirection = 0;
                            ctrl.yDirection = 0;
                        }
                        if (ctrl.userIsCurrentlyDrawing) {
                            if (ctrl.rectWidth !== 0 && ctrl.rectHeight !== 0) {
                                var labels = ctrl.value.labeledRegions.map(function (region) {
                                    return region.label;
                                });
                                // Searches numbers starting from 1 to find a valid label
                                // that doesn't overlap with currently existing labels.
                                var newLabel = null;
                                for (var i = 1; i <= labels.length + 1; i++) {
                                    var candidateLabel = 'Region' + i.toString();
                                    if (labels.indexOf(candidateLabel) === -1) {
                                        newLabel = candidateLabel;
                                        break;
                                    }
                                }
                                var newRegion = {
                                    label: newLabel,
                                    region: {
                                        regionType: 'Rectangle',
                                        area: regionAreaFromCornerAndDimensions(ctrl.rectX, ctrl.rectY, ctrl.rectWidth, ctrl.rectHeight)
                                    }
                                };
                                ctrl.value.labeledRegions.push(newRegion);
                                ctrl.selectedRegion = (ctrl.value.labeledRegions.length - 1);
                            }
                        }
                        ctrl.userIsCurrentlyDrawing = false;
                        ctrl.userIsCurrentlyDragging = false;
                        ctrl.userIsCurrentlyResizing = false;
                        ctrl.movedOutOfRegion = false;
                        ctrl.yDirectionToggled = false;
                        ctrl.xDirectionToggled = false;
                    };
                    ctrl.onMouseoverRegion = function (index) {
                        if (ctrl.hoveredRegion === null) {
                            ctrl.hoveredRegion = index;
                        }
                        ctrl.movedOutOfRegion = false;
                    };
                    ctrl.onMouseMoveRegion = function () {
                        if (ctrl.userIsCurrentlyDragging ||
                            ctrl.userIsCurrentlyResizing) {
                            return;
                        }
                        var region = cornerAndDimensionsFromRegionArea(ctrl.value.labeledRegions[ctrl.hoveredRegion].region.area);
                        if (!ctrl.xDirectionToggled && !ctrl.yDirectionToggled) {
                            if (ctrl.mouseY <= region.y + ctrl.resizableBorderWidthPx) {
                                ctrl.yDirection = 1;
                            }
                            else if (ctrl.mouseY >= region.height + region.y -
                                ctrl.resizableBorderWidthPx) {
                                ctrl.yDirection = -1;
                            }
                            else {
                                ctrl.yDirection = 0;
                            }
                            if (ctrl.mouseX <= region.x + ctrl.resizableBorderWidthPx) {
                                ctrl.xDirection = 1;
                            }
                            else if (ctrl.mouseX >= region.width + region.x -
                                ctrl.resizableBorderWidthPx) {
                                ctrl.xDirection = -1;
                            }
                            else {
                                ctrl.xDirection = 0;
                            }
                        }
                    };
                    ctrl.onMouseoutRegion = function (index) {
                        if (ctrl.hoveredRegion === index) {
                            ctrl.hoveredRegion = null;
                        }
                        if (!ctrl.userIsCurrentlyResizing) {
                            ctrl.xDirection = 0;
                            ctrl.yDirection = 0;
                        }
                        ctrl.movedOutOfRegion = true;
                    };
                    ctrl.onMousedownRegion = function () {
                        if (ctrl.xDirection || ctrl.yDirection) {
                            ctrl.userIsCurrentlyResizing = true;
                        }
                        else {
                            ctrl.userIsCurrentlyDragging = true;
                        }
                        ctrl.selectedRegion = ctrl.hoveredRegion;
                        ctrl.originalRectArea = cornerAndDimensionsFromRegionArea(ctrl.value.labeledRegions[ctrl.hoveredRegion].region.area);
                    };
                    ctrl.regionLabelEditorMouseUp = function () {
                        ctrl.userIsCurrentlyDragging = false;
                        ctrl.userIsCurrentlyResizing = false;
                    };
                    ctrl.getCursorStyle = function () {
                        var xDirectionCursor = '';
                        var yDirectionCursor = '';
                        if (ctrl.xDirection || ctrl.yDirection) {
                            // User is resizing, so we figure out the direction.
                            if ((ctrl.xDirection === 1 && !ctrl.xDirectionToggled) ||
                                (ctrl.xDirection === -1 && ctrl.xDirectionToggled)) {
                                xDirectionCursor = 'w';
                            }
                            else if ((ctrl.xDirection === -1 && !ctrl.xDirectionToggled) ||
                                (ctrl.xDirection === 1 && ctrl.xDirectionToggled)) {
                                xDirectionCursor = 'e';
                            }
                            else {
                                xDirectionCursor = '';
                            }
                            if ((ctrl.yDirection === 1 && !ctrl.yDirectionToggled) ||
                                (ctrl.yDirection === -1 && ctrl.yDirectionToggled)) {
                                yDirectionCursor = 'n';
                            }
                            else if ((ctrl.yDirection === -1 && !ctrl.yDirectionToggled) ||
                                (ctrl.yDirection === 1 && ctrl.yDirectionToggled)) {
                                yDirectionCursor = 's';
                            }
                            else {
                                yDirectionCursor = '';
                            }
                            return yDirectionCursor + xDirectionCursor + '-resize';
                        }
                        else if (ctrl.hoveredRegion !== null) {
                            // User is not resizing but cursor is over a region.
                            return 'pointer';
                        }
                        return 'crosshair';
                    };
                    ctrl.resetEditor = function () {
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/' +
                                'image-with-regions-reset-confirmation.directive.html'),
                            backdrop: 'static',
                            keyboard: false,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss();
                                    };
                                    $scope.confirmClear = function () {
                                        $uibModalInstance.close();
                                    };
                                }
                            ]
                        }).result.then(function () {
                            ctrl.value.imagePath = '';
                            ctrl.value.labeledRegions = [];
                            ctrl.initializeEditor();
                        });
                    };
                    ctrl.deleteRegion = function (index) {
                        if (ctrl.selectedRegion === index) {
                            ctrl.selectedRegion = null;
                        }
                        else if (ctrl.selectedRegion > index) {
                            ctrl.selectedRegion--;
                        }
                        if (ctrl.hoveredRegion === index) {
                            ctrl.hoveredRegion = null;
                        }
                        else if (ctrl.hoveredRegion > index) {
                            ctrl.hoveredRegion--;
                        }
                        ctrl.value.labeledRegions.splice(index, 1);
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/int-editor.directive.ts":
/*!**************************************************************!*\
  !*** ./extensions/objects/templates/int-editor.directive.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for int editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('intEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/int-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'int',
                        validators: [{
                                id: 'is_integer'
                            }]
                    };
                    if (!ctrl.value) {
                        ctrl.value = 0;
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/list-of-sets-of-html-strings-editor.directive.ts":
/*!***************************************************************************************!*\
  !*** ./extensions/objects/templates/list-of-sets-of-html-strings-editor.directive.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for list of sets of html strings editor.
 */
angular.module('oppia').directive('listOfSetsOfHtmlStringsEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/' +
                'list-of-sets-of-html-strings-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    var errorMessage = '';
                    if (!ctrl.selectedRank) {
                        ctrl.selectedRank = '';
                    }
                    if (!ctrl.maxPrevIndex) {
                        ctrl.maxPrevIndex = 1;
                    }
                    ctrl.initValues = [];
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.choices = ctrl.initArgs.choices;
                    // Initialize the default values.
                    if (ctrl.value[0] === undefined || ctrl.value[0].length === 0) {
                        ctrl.value = [[]];
                        for (var i = 0; i < ctrl.choices.length; i++) {
                            ctrl.value[0].push(ctrl.choices[i].id);
                            ctrl.initValues.push(1);
                        }
                    }
                    else {
                        for (var i = 0; i < ctrl.choices.length; i++) {
                            for (var j = 0; j < ctrl.value.length; j++) {
                                var choice = ctrl.choices[i].id;
                                if (ctrl.value[j].indexOf(choice) !== -1) {
                                    ctrl.initValues.push(j + 1);
                                    ctrl.maxPrevIndex = math.max(ctrl.maxPrevIndex, j + 1);
                                    break;
                                }
                            }
                        }
                    }
                    if (ctrl.selectedRank !== '') {
                        ctrl.maxPrevIndex = math.max(parseInt(ctrl.selectedRank), ctrl.maxPrevIndex);
                    }
                    ctrl.allowedChoices = function () {
                        var allowedList = [];
                        for (var i = 0; i <= math.min(ctrl.maxPrevIndex, ctrl.choices.length - 1); i++) {
                            allowedList.push(i + 1);
                        }
                        return allowedList;
                    };
                    ctrl.selectedItem = function (choiceListIndex, selectedRankString) {
                        var choiceHtml = ctrl.choices[choiceListIndex].id;
                        var selectedRank = parseInt(selectedRankString) - 1;
                        errorMessage = '';
                        // Reorder the ctrl.choices array to make it consistent with the
                        // selected rank.
                        // ctrl.choices.splice(selectedRank, 0, ctrl.choices.splice(
                        // choiceListIndex, 1)[0]);
                        var choiceHtmlHasBeenAdded = false;
                        ctrl.maxPrevIndex = math.max(selectedRank + 1, ctrl.maxPrevIndex);
                        for (var i = 0; i < ctrl.value.length; i++) {
                            choiceHtmlHasBeenAdded = false;
                            var choiceHtmlIndex = ctrl.value[i].indexOf(choiceHtml);
                            if (choiceHtmlIndex > -1) {
                                if (i !== selectedRank) {
                                    ctrl.value[i].splice(choiceHtmlIndex, 1);
                                    if (ctrl.value[selectedRank] === undefined) {
                                        ctrl.value[selectedRank] = [choiceHtml];
                                    }
                                    else {
                                        ctrl.value[selectedRank].push(choiceHtml);
                                    }
                                }
                                choiceHtmlHasBeenAdded = true;
                                break;
                            }
                        }
                        for (var i = 0; i < ctrl.value.length; i++) {
                            if (ctrl.value[i].length === 0) {
                                if (i === ctrl.value.length - 1) {
                                    // If it is empty list at the last, pop it out.
                                    ctrl.value.pop();
                                }
                                else {
                                    // Continuity error.
                                    errorMessage = ('No choice(s) is assigned at position ' +
                                        String(i + 1) + '. Please assign some choice at this ' +
                                        'position.');
                                }
                            }
                        }
                        if (!choiceHtmlHasBeenAdded) {
                            if (ctrl.value[selectedRank] === undefined) {
                                ctrl.value[selectedRank] = [choiceHtml];
                            }
                            else {
                                ctrl.value[selectedRank].push(choiceHtml);
                            }
                        }
                    };
                    ctrl.getWarningText = function () {
                        return errorMessage;
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/list-of-tabs-editor.directive.ts":
/*!***********************************************************************!*\
  !*** ./extensions/objects/templates/list-of-tabs-editor.directive.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS-IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for list of tabs editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('listOfTabsEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/list-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'list',
                        items: {
                            type: 'dict',
                            properties: [{
                                    name: 'title',
                                    description: 'Tab title',
                                    schema: {
                                        type: 'unicode',
                                        validators: [{
                                                id: 'is_nonempty'
                                            }]
                                    }
                                }, {
                                    name: 'content',
                                    description: 'Tab content',
                                    schema: {
                                        type: 'html',
                                        ui_config: {
                                            hide_complex_extensions: true
                                        }
                                    }
                                }]
                        },
                        ui_config: {
                            add_element_text: 'Add new tab'
                        }
                    };
                    if (!ctrl.value) {
                        ctrl.value = [];
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/list-of-unicode-string-editor.directive.ts":
/*!*********************************************************************************!*\
  !*** ./extensions/objects/templates/list-of-unicode-string-editor.directive.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for list of unicode string editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('listOfUnicodeStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/list-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'list',
                        items: {
                            type: 'unicode'
                        }
                    };
                    if (!ctrl.value) {
                        ctrl.value = [];
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/logic-error-category-editor.directive.ts":
/*!*******************************************************************************!*\
  !*** ./extensions/objects/templates/logic-error-category-editor.directive.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for logic error category editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('logicErrorCategoryEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/logic-error-category-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.alwaysEditable = true;
                    ctrl.errorCategories = [{
                            name: 'parsing',
                            humanReadable: 'Unparseable'
                        }, {
                            name: 'typing',
                            humanReadable: 'Ill-typed'
                        }, {
                            name: 'line',
                            humanReadable: 'Incorrect line'
                        }, {
                            name: 'layout',
                            humanReadable: 'Wrong indenting'
                        }, {
                            name: 'variables',
                            humanReadable: 'Variables error'
                        }, {
                            name: 'logic',
                            humanReadable: 'Invalid deduction'
                        }, {
                            name: 'target',
                            humanReadable: 'Target not proved'
                        }, {
                            name: 'mistake',
                            humanReadable: 'Unspecified'
                        }];
                    ctrl.localValue = {
                        category: ctrl.errorCategories[0]
                    };
                    for (var i = 0; i < ctrl.errorCategories.length; i++) {
                        if (ctrl.errorCategories[i].name === ctrl.value) {
                            ctrl.localValue.category = ctrl.errorCategories[i];
                        }
                    }
                    $scope.$watch('$ctrl.localValue.category', function () {
                        ctrl.value = ctrl.localValue.category.name;
                    });
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/logic-question-editor.directive.ts":
/*!*************************************************************************!*\
  !*** ./extensions/objects/templates/logic-question-editor.directive.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Directive for logic question editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
var shared_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/shared.ts */ "./extensions/interactions/LogicProof/static/js/shared.ts"));
var teacher_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/teacher.ts */ "./extensions/interactions/LogicProof/static/js/teacher.ts"));
var data_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/data.ts */ "./extensions/interactions/LogicProof/static/js/data.ts"));
var conversion_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/conversion.ts */ "./extensions/interactions/LogicProof/static/js/conversion.ts"));
var generatedDefaultData_ts_1 = __importDefault(__webpack_require__(/*! interactions/LogicProof/static/js/generatedDefaultData.ts */ "./extensions/interactions/LogicProof/static/js/generatedDefaultData.ts"));
angular.module('oppia').directive('logicQuestionEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/logic-question-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.alwaysEditable = true;
                    ctrl.localValue = {
                        assumptionsString: shared_ts_1.default.displayExpressionArray(ctrl.value.assumptions, data_ts_1.default.BASE_STUDENT_LANGUAGE.operators),
                        targetString: shared_ts_1.default.displayExpression(ctrl.value.results[0], data_ts_1.default.BASE_STUDENT_LANGUAGE.operators),
                        errorMessage: '',
                        proofString: ctrl.value.default_proof_string
                    };
                    // NOTE: we use ng-change rather than $watch because the latter runs in
                    // response to any change to the watched value, and we only want to
                    // respond to changes made by the user.
                    ctrl.changeAssumptions = function () {
                        ctrl.convertThenBuild('logicQuestionAssumptions', 'assumptionsString');
                    };
                    ctrl.changeTarget = function () {
                        ctrl.convertThenBuild('logicQuestionTarget', 'targetString');
                    };
                    ctrl.changeProof = function () {
                        ctrl.convertThenBuild('logicQuestionProof', 'proofString');
                    };
                    ctrl.convertThenBuild = function (elementID, nameOfString) {
                        var element = document.getElementById(elementID);
                        var cursorPosition = element.selectionEnd;
                        ctrl.localValue[nameOfString] =
                            conversion_ts_1.default.convertToLogicCharacters(ctrl.localValue[nameOfString]);
                        ctrl.buildQuestion();
                        // NOTE: angular will reset the position of the cursor after this
                        // function runs, so we need to delay our re-resetting.
                        setTimeout(function () {
                            element.selectionEnd = cursorPosition;
                        }, 2);
                    };
                    ctrl.buildQuestion = function () {
                        try {
                            var builtQuestion = angular.copy(teacher_ts_1.default.buildQuestion(ctrl.localValue.assumptionsString, ctrl.localValue.targetString, generatedDefaultData_ts_1.default.vocabulary));
                            ctrl.value = {
                                assumptions: builtQuestion.assumptions,
                                results: builtQuestion.results,
                                default_proof_string: ctrl.localValue.proofString
                            };
                            ctrl.localValue.errorMessage = '';
                        }
                        catch (err) {
                            ctrl.localValue.errorMessage = err.message;
                        }
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/math-latex-string-editor.directive.ts":
/*!****************************************************************************!*\
  !*** ./extensions/objects/templates/math-latex-string-editor.directive.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for math latex string editor.
 */
__webpack_require__(/*! directives/mathjax-bind.directive.ts */ "./core/templates/dev/head/directives/mathjax-bind.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('mathLatexStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getAlwaysEditable: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/math-latex-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.placeholderText = '\\frac{x}{y}';
                    ctrl.alwaysEditable = ctrl.getAlwaysEditable();
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function () {
                        ctrl.localValue = {
                            label: ctrl.value || ''
                        };
                    }, true);
                    if (ctrl.alwaysEditable) {
                        $scope.$watch('$ctrl.localValue.label', function (newValue) {
                            ctrl.value = newValue;
                        });
                    }
                    else {
                        ctrl.openEditor = function () {
                            ctrl.active = true;
                        };
                        ctrl.closeEditor = function () {
                            ctrl.active = false;
                        };
                        ctrl.replaceValue = function (newValue) {
                            ctrl.localValue = {
                                label: newValue
                            };
                            ctrl.value = newValue;
                            ctrl.closeEditor();
                        };
                        $scope.$on('externalSave', function () {
                            if (ctrl.active) {
                                ctrl.replaceValue(ctrl.localValue.label);
                                // The $scope.$apply() call is needed to propagate the replaced
                                // value.
                                $scope.$apply();
                            }
                        });
                        ctrl.closeEditor();
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/music-phrase-editor.directive.ts":
/*!***********************************************************************!*\
  !*** ./extensions/objects/templates/music-phrase-editor.directive.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2012 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for music phrase editor.
 */
// This directive is always editable.
angular.module('oppia').directive('musicPhraseEditor', [
    'AlertsService', 'UrlInterpolationService',
    function (AlertsService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/music-phrase-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    // The maximum number of notes allowed in a music phrase.
                    var _MAX_NOTES_IN_PHRASE = 8;
                    ctrl.schema = {
                        type: 'list',
                        items: {
                            type: 'unicode',
                            choices: [
                                'C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5', 'D5', 'E5', 'F5',
                                'G5', 'A5'
                            ]
                        },
                        ui_config: {
                            add_element_text: 'Add Note ♩'
                        },
                        validators: [{
                                id: 'has_length_at_most',
                                max_value: _MAX_NOTES_IN_PHRASE
                            }]
                    };
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function (newValue) {
                        // TODO(sll): Check that $ctrl.value is a list.
                        ctrl.localValue = [];
                        if (newValue) {
                            for (var i = 0; i < newValue.length; i++) {
                                ctrl.localValue.push(newValue[i].readableNoteName);
                            }
                        }
                    }, true);
                    $scope.$watch('$ctrl.localValue', function (newValue, oldValue) {
                        if (newValue && oldValue) {
                            if (newValue.length > _MAX_NOTES_IN_PHRASE) {
                                AlertsService.addWarning('There are too many notes on the staff.');
                            }
                            else {
                                var parentValues = [];
                                for (var i = 0; i < newValue.length; i++) {
                                    parentValues.push({
                                        readableNoteName: newValue[i],
                                        noteDuration: {
                                            num: 1,
                                            den: 1
                                        }
                                    });
                                }
                                ctrl.value = parentValues;
                            }
                        }
                    }, true);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/nonnegative-int-editor.directive.ts":
/*!**************************************************************************!*\
  !*** ./extensions/objects/templates/nonnegative-int-editor.directive.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2012 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for non negative int editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('nonnegativeIntEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/nonnegative-int-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'int',
                        validators: [{
                                id: 'is_at_least',
                                min_value: 0
                            }, {
                                id: 'is_integer'
                            }]
                    };
                    if (!ctrl.value) {
                        ctrl.value = 0;
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/normalized-string-editor.directive.ts":
/*!****************************************************************************!*\
  !*** ./extensions/objects/templates/normalized-string-editor.directive.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for normalized string editor.
 */
// This is a copy of the UnicodeStringEditor.
angular.module('oppia').directive('normalizedStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getAlwaysEditable: '&',
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/unicode-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.alwaysEditable = ctrl.getAlwaysEditable();
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.largeInput = false;
                    $scope.$watch('$ctrl.initArgs', function (newValue) {
                        ctrl.largeInput = false;
                        if (newValue && newValue.largeInput) {
                            ctrl.largeInput = newValue.largeInput;
                        }
                    });
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function () {
                        ctrl.localValue = {
                            label: ctrl.value || ''
                        };
                    }, true);
                    if (ctrl.alwaysEditable) {
                        $scope.$watch('$ctrl.localValue.label', function (newValue) {
                            ctrl.value = newValue;
                        });
                    }
                    else {
                        ctrl.openEditor = function () {
                            ctrl.active = true;
                        };
                        ctrl.closeEditor = function () {
                            ctrl.active = false;
                        };
                        ctrl.replaceValue = function (newValue) {
                            ctrl.localValue = {
                                label: newValue
                            };
                            ctrl.value = newValue;
                            ctrl.closeEditor();
                        };
                        $scope.$on('externalSave', function () {
                            if (ctrl.active) {
                                ctrl.replaceValue(ctrl.localValue.label);
                                // The $scope.$apply() call is needed to propagate the replaced
                                // value.
                                $scope.$apply();
                            }
                        });
                        ctrl.closeEditor();
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/number-with-units-editor.directive.ts":
/*!****************************************************************************!*\
  !*** ./extensions/objects/templates/number-with-units-editor.directive.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for number with units editor.
 */
angular.module('oppia').directive('numberWithUnitsEditor', [
    'NumberWithUnitsObjectFactory', 'UrlInterpolationService',
    function (NumberWithUnitsObjectFactory, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/number-with-units-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    var errorMessage = '';
                    var numberWithUnitsString = '';
                    if (ctrl.value !== null) {
                        var defaultNumberWithUnits = NumberWithUnitsObjectFactory.fromDict(ctrl.value);
                        numberWithUnitsString = defaultNumberWithUnits.toString();
                    }
                    ctrl.localValue = {
                        label: numberWithUnitsString
                    };
                    $scope.$watch('$ctrl.localValue.label', function (newValue) {
                        try {
                            var numberWithUnits = NumberWithUnitsObjectFactory.fromRawInputString(newValue);
                            ctrl.value = numberWithUnits;
                            errorMessage = '';
                        }
                        catch (parsingError) {
                            errorMessage = parsingError.message;
                        }
                    });
                    ctrl.getWarningText = function () {
                        return errorMessage;
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/parameter-name-editor.directive.ts":
/*!*************************************************************************!*\
  !*** ./extensions/objects/templates/parameter-name-editor.directive.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for parameter name editor.
 */
// NOTE TO DEVELOPERS: This editor requires ExplorationParamSpecsService to be
// available in the context in which it is used.
angular.module('oppia').directive('parameterNameEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/parameter-name-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$attrs', 'ExplorationParamSpecsService',
                function ($scope, $attrs, ExplorationParamSpecsService) {
                    var ctrl = this;
                    ctrl.availableParamNames =
                        ExplorationParamSpecsService.savedMemento.getParamNames();
                    if (ctrl.availableParamNames.length === 0) {
                        ctrl.localValue = null;
                    }
                    else {
                        ctrl.localValue = ctrl.availableParamNames[0];
                    }
                    ctrl.validate = function () {
                        return (ctrl.availableParamNames.length === 0) ? false : true;
                    };
                    ctrl.SCHEMA = {
                        type: 'unicode',
                        choices: ctrl.availableParamNames
                    };
                    // Reset the component each time the value changes (e.g. if this is
                    // part of an editable list).
                    $scope.$watch('$ctrl.value', function (newValue) {
                        if (newValue) {
                            ctrl.localValue = newValue;
                        }
                    }, true);
                    $scope.$watch('$ctrl.localValue', function (newValue) {
                        ctrl.value = newValue;
                    });
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/real-editor.directive.ts":
/*!***************************************************************!*\
  !*** ./extensions/objects/templates/real-editor.directive.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for real editor.
 */
angular.module('oppia').directive('realEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/real-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.schema = {
                        type: 'float'
                    };
                    $scope.$watch('$ctrl.value', function () {
                        if (ctrl.value === '') {
                            // A new rule
                            ctrl.value = 0.0;
                        }
                    });
                    if (ctrl.value === '') {
                        ctrl.value = 0.0;
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/sanitized-url-editor.directive.ts":
/*!************************************************************************!*\
  !*** ./extensions/objects/templates/sanitized-url-editor.directive.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for sanitized URL editor.
 */
angular.module('oppia').directive('sanitizedUrlEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        // Editable URL directive.
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/sanitized-url-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'unicode',
                        validators: [{
                                id: 'is_nonempty'
                            }],
                        ui_config: {
                            placeholder: 'https://www.example.com'
                        }
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/set-of-html-string-editor.directive.ts":
/*!*****************************************************************************!*\
  !*** ./extensions/objects/templates/set-of-html-string-editor.directive.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2012 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for set of HTML string editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('setOfHtmlStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/set-of-html-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'list',
                        items: {
                            type: 'html'
                        }
                    };
                    if (!ctrl.value) {
                        ctrl.value = [];
                    }
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.choices = ctrl.initArgs.choices;
                    ctrl.selections = ctrl.choices.map(function (choice) {
                        return ctrl.value.indexOf(choice.id) !== -1;
                    });
                    // The following function is necessary to insert elements into the
                    // answer groups for the Item Selection Widget.
                    ctrl.toggleSelection = function (choiceListIndex) {
                        var choiceHtml = ctrl.choices[choiceListIndex].id;
                        var selectedChoicesIndex = ctrl.value.indexOf(choiceHtml);
                        if (selectedChoicesIndex > -1) {
                            ctrl.value.splice(selectedChoicesIndex, 1);
                        }
                        else {
                            ctrl.value.push(choiceHtml);
                        }
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/set-of-unicode-string-editor.directive.ts":
/*!********************************************************************************!*\
  !*** ./extensions/objects/templates/set-of-unicode-string-editor.directive.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for set of unicode string editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('setOfUnicodeStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/list-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'list',
                        items: {
                            type: 'unicode'
                        },
                        validators: [{
                                id: 'is_uniquified'
                            }]
                    };
                    if (!ctrl.value) {
                        ctrl.value = [];
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/unicode-string-editor.directive.ts":
/*!*************************************************************************!*\
  !*** ./extensions/objects/templates/unicode-string-editor.directive.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for unicode string editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('unicodeStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getAlwaysEditable: '&',
                getInitArgs: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/unicode-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.alwaysEditable = ctrl.getAlwaysEditable();
                    ctrl.initArgs = ctrl.getInitArgs();
                    ctrl.largeInput = false;
                    $scope.$watch('$ctrl.initArgs', function (newValue) {
                        ctrl.largeInput = false;
                        if (newValue && newValue.largeInput) {
                            ctrl.largeInput = newValue.largeInput;
                        }
                    });
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function () {
                        ctrl.localValue = {
                            label: ctrl.value || ''
                        };
                    }, true);
                    if (ctrl.alwaysEditable) {
                        $scope.$watch('$ctrl.localValue.label', function (newValue) {
                            ctrl.value = newValue;
                        });
                    }
                    else {
                        ctrl.openEditor = function () {
                            ctrl.active = true;
                        };
                        ctrl.closeEditor = function () {
                            ctrl.active = false;
                        };
                        ctrl.replaceValue = function (newValue) {
                            ctrl.localValue = {
                                label: newValue
                            };
                            ctrl.value = newValue;
                            ctrl.closeEditor();
                        };
                        $scope.$on('externalSave', function () {
                            if (ctrl.active) {
                                ctrl.replaceValue(ctrl.localValue.label);
                                // The $scope.$apply() call is needed to propagate the replaced
                                // value.
                                $scope.$apply();
                            }
                        });
                        ctrl.closeEditor();
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/CodeRepl/static/code_repl.css":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./extensions/interactions/CodeRepl/static/code_repl.css ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".code-repl-input-box {\n  border: 1px solid #ccc;\n}\n.code-repl-language {\n  float: right;\n  font-size: 0.8em;\n  margin-top: 8px;\n}\n.code-repl-terminal {\n  background-color: #222;\n  color: white;\n  font-weight: bold;\n  max-height: 600px;\n}\n.code-repl-terminal-error {\n  background-color: #222;\n  color: red;\n  font-weight: bold;\n}\n.cm-s-preview.CodeMirror {\n  background-color: #eee;\n}\n.cm-s-preview .CodeMirror-linenumber {\n  /* Without this, Line-number in preview CodeRepl will be overlapped. */\n  white-space: nowrap;\n}\n.cm-s-preview .CodeMirror-code pre {\n  /* Without this, underscore characters are not visible. */\n  height: 1.04em;\n  width: 100%;\n}\n.cm-s-preview .CodeMirror-code .code-repl-noneditable-line {\n  background-color: #eee;\n  opacity: 0.8;\n}\n.CodeMirror-lines {\n  background-color: white;\n}\n.code-repl-container {\n  background: #fff;\n  padding: 8px;\n  width: 100%;\n}\n", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/ItemSelectionInput/static/item_selection_input.css":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./extensions/interactions/ItemSelectionInput/static/item_selection_input.css ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "/* The following is needed so that the radio button does not show. */\n.item-selection-input-radio-button {\n  display: none;\n}\n\n.item-selection-input-checkbox {\n  font-weight: normal;\n  margin: 2px;\n}\n\nmd-checkbox.item-selection-input-checkbox.md-default-theme .md-icon {\n  border-color: #0d48a1;\n  top: 2px;\n}\nmd-checkbox.item-selection-input-checkbox.md-default-theme.md-checked .md-icon {\n  background-color: rgba(102, 187, 106, 0.87);\n}\nmd-checkbox.item-selection-input-checkbox .md-label {\n  vertical-align: top;\n}\n\n.item-selection-input-form-container {\n  margin-top: -5px;\n}\n.item-selection-input-item {\n  background: none;\n  border: none;\n  color: #0d48a1;\n  margin: 0;\n  padding-left: 0;\n  text-align: left;\n  /* This is needed so that images stay bounded by the container in Firefox. */\n  width: 100%;\n}\n.item-selection-input-container {\n  padding-bottom: 5px;\n}\n\n.item-selection-input-container md-input-group.md-default-theme label {\n  border-bottom: 0px;\n}\n\n.item-selection-input-container img {\n  max-height: 200px;\n}\n\n.multiple-choice-option-container {\n  padding: 4px 0;\n}\n\n.multiple-choice-option {\n  background: none;\n  border: none;\n  color: #0D48A1;\n  text-align: left;\n  /* This is needed so that images stay bounded by the container in Firefox. */\n  width: 100%;\n}\n\n.multiple-choice-radio-button-container,\n.multiple-choice-content-container {\n  display: table-cell;\n}\n\n.multiple-choice-option:hover {\n  color: #115FD4;\n}\n\n.multiple-choice-option:hover .multiple-choice-inner-radio-button,\n.multiple-choice-option:focus .multiple-choice-inner-radio-button {\n  background-color: #115FD4;\n  border-radius: 50%;\n  display: block;\n  height: 8px;\n  margin: 2px;\n  width: 8px;\n}\n\n.multiple-choice-option:hover .multiple-choice-outer-adio-button {\n  border-color: #115FD4;\n}\n\n.multiple-choice-outer-radio-button {\n  border: 2px solid #0D48A1;\n  border-radius: 50%;\n  display: inline-block;\n  height: 16px;\n  margin-bottom: -7px;\n  margin-right: 12px;\n  width: 16px;\n}\n", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/LogicProof/static/logic_proof.css":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./extensions/interactions/LogicProof/static/logic_proof.css ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".logic-proof-input-box {\n  border: 1px solid #ccc;\n}\n.logic-proof-erroneous-line {\n  font-weight: bold;\n}\n.logic-proof-error-message {\n  color: red;\n}\n", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".multiple-choice-option-container {\n  padding: 4px 0;\n}\n\n.multiple-choice-option {\n  background: none;\n  border: none;\n  color: #0D48A1;\n  text-align: left;\n  /* This is needed so that images stay bounded by the container in Firefox. */\n  /* This also limits the selection area of the option to the text and radio button. */\n  width: auto;\n}\n\n.multiple-choice-radio-button-container {\n  display: table-cell;\n}\n\n.multiple-choice-content-container {\n  display: table-cell;\n  vertical-align: top;\n}\n\n.multiple-choice-option:hover {\n  color: #115FD4;\n}\n\n.multiple-choice-option:hover .multiple-choice-inner-radio-button,\n.multiple-choice-option:focus .multiple-choice-inner-radio-button {\n  background-color: #115FD4;\n  border-radius: 50%;\n  display: block;\n  height: 8px;\n  margin: 2px;\n  width: 8px;\n}\n\n.multiple-choice-option:hover .multiple-choice-outer-radio-button,\n.multiple-choice-option:focus .multiple-choice-outer-radio-button {\n  border-color: #115FD4;\n}\n\n.multiple-choice-outer-radio-button {\n  border: 2px solid #0D48A1;\n  border-radius: 50%;\n  display: inline-block;\n  height: 16px;\n  margin-bottom: -7px;\n  margin-right: 12px;\n  width: 16px;\n}\n", ""]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/MusicNotesInput/static/music_notes_input.css":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./extensions/interactions/MusicNotesInput/static/music_notes_input.css ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "/* The container around the staff and noteChoices.\n * This keeps the note from dropping on top of the clef.\n */\n\n.oppia-music-input-valid-note-area {\n  position: relative;\n  float:left;\n  margin: 0 0 0 11.0784%;\n  width: 87.34525%;\n  height: 43%;\n  /* Hide valid note area until page loads */\n  visibility: hidden;\n}\n\n/* The box around staff */\n\n.oppia-music-input-staff {\n  clear: both;\n  background: transparent;\n  max-width: 673px;\n}\n\n/* The box around note choices */\n\n.oppia-music-input-note-choices {\n  clear: both;\n  float: right;\n  background: rgba(0, 0, 0, 0.04); /* Color of noteChoices box */\n  width: 5%;\n  padding: 2.3% 9% 5.83% 1.1%;\n  margin-bottom: 15px;\n  border: 0.2em solid #333;\n  -moz-border-radius: 11%;\n  -webkit-border-radius: 11%;\n  border-radius: 11%;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n/* The invisible box around droppable staff */\n\n.oppia-music-input-staff {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  clear: both;\n  float: right;\n  width: 110.1%;\n  padding: 1.5% 0 3% 0;\n}\n\n/* The staff lines and ledger lines */\n\n.oppia-music-input-staff div.oppia-music-staff-position {\n  position: relative;\n  width: 100%;\n  margin: 0 0;\n  background: transparent;\n  color: transparent;\n  float: right;\n}\n\n.oppia-music-input-staff div.oppia-music-input-hovered {\n  background: #aaa;\n}\n\n.oppia-music-input-staff div.oppia-music-staff-line {\n  background: #000000;\n  height: 2px;\n  position: absolute;\n  width: 100%;\n}\n\n.oppia-music-input-staff {\n  background-image: url(/extensions/interactions/MusicNotesInput/static/images/treble_clef.png);\n  background-repeat: no-repeat;\n  background-position: 0.1% 62%;\n  background-size: 8.5% 89%;\n}\n\n/* Individual notes */\n\n.oppia-music-input-note-choices div {\n  width: 7.8%;\n  height: 9.2%;\n  position: relative;\n  background: transparent;\n}\n\n.oppia-music-input-note-choices div.oppia-music-input-natural-note {\n  float: left;\n  background-image: url(/extensions/interactions/MusicNotesInput/static/images/whole_note.png);\n  background-repeat: no-repeat;\n  background-size: 71%;\n  background-position: center;\n  position: absolute;\n}\n\n.oppia-music-input-staff .oppia-music-input-ledger-line {\n  position: absolute;\n  width: 8%;\n  padding-bottom: 0.35%;\n  background-color: #000000;\n}\n\n.oppia-music-input-on-staff {\n  position: absolute;\n  /* Maximum 14, otherwise it will be above\n     the tutorcard if viewport is less than 960 */\n  z-index: 14;\n}\n\n.oppia-music-input-control-buttons {\n  padding: 40% 0 5% 2%;\n}\n\n.oppia-music-input-btn {\n  padding: 6px 10px;\n}\n\n.oppia-music-input-play-btn {\n  margin-left: -55px;\n  margin-top: 0;\n}\n", ""]);


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,