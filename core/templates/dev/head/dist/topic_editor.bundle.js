/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"topic_editor": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./core/templates/dev/head/pages/topic-editor-page/topic-editor-page.controller.ts","about~admin~app~collection_editor~collection_player~contact~creator_dashboard~donate~email_dashboard~c1e50cc0","admin~app~collection_editor~creator_dashboard~exploration_editor~exploration_player~skill_editor~sto~7c5e036a","admin~creator_dashboard~exploration_editor~exploration_player~moderator~skill_editor~story_editor~to~3f6ef738","admin~app~collection_editor~creator_dashboard~exploration_editor~exploration_player~skill_editor~top~61bb2de1","admin~collection_editor~creator_dashboard~exploration_editor~exploration_player~skill_editor~topic_e~3a7281d0","collection_editor~creator_dashboard~exploration_editor~exploration_player~skill_editor~topic_editor","creator_dashboard~exploration_editor~exploration_player~skill_editor~story_editor~topic_editor","collection_editor~skill_editor~story_editor~topic_editor"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./core/templates/dev/head/components/StateGraphLayoutService.ts":
/*!***********************************************************************!*\
  !*** ./core/templates/dev/head/components/StateGraphLayoutService.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directives for reusable data visualization components.
 */
// Service for computing layout of state graph nodes.
oppia.factory('StateGraphLayoutService', [
    '$filter', '$log', 'MAX_NODES_PER_ROW',
    function ($filter, $log, MAX_NODES_PER_ROW) {
        var MAX_INDENTATION_LEVEL = 2.5;
        // The last result of a call to computeLayout(). Used for determining the
        // order in which to specify states in rules.
        var lastComputedArrangement = null;
        var getGraphAsAdjacencyLists = function (nodes, links) {
            var adjacencyLists = {};
            for (var nodeId in nodes) {
                adjacencyLists[nodeId] = [];
            }
            for (var i = 0; i < links.length; i++) {
                if (links[i].source !== links[i].target &&
                    adjacencyLists[links[i].source].indexOf(links[i].target) === -1) {
                    adjacencyLists[links[i].source].push(links[i].target);
                }
            }
            return adjacencyLists;
        };
        var getIndentationLevels = function (adjacencyLists, trunkNodeIds) {
            var indentationLevels = [];
            // Recursively find and indent the longest shortcut for the segment of
            // nodes ranging from trunkNodeIds[startInd] to trunkNodeIds[endInd]
            // (inclusive). It's possible that this shortcut starts from a trunk
            // node within this interval (A, say) and ends at a trunk node after
            // this interval, in which case we indent all nodes from A + 1 onwards.
            // NOTE: this mutates indentationLevels as a side-effect.
            var indentLongestShortcut = function (startInd, endInd) {
                if (startInd >= endInd ||
                    indentationLevels[startInd] >= MAX_INDENTATION_LEVEL) {
                    return;
                }
                var bestSourceInd = -1;
                var bestTargetInd = -1;
                for (var sourceInd = startInd; sourceInd < endInd; sourceInd++) {
                    var sourceNodeId = trunkNodeIds[sourceInd];
                    for (var i = 0; i < adjacencyLists[sourceNodeId].length; i++) {
                        var possibleTargetInd = trunkNodeIds.indexOf(adjacencyLists[sourceNodeId][i]);
                        if (possibleTargetInd !== -1 && sourceInd < possibleTargetInd) {
                            var targetInd = Math.min(possibleTargetInd, endInd + 1);
                            if (targetInd - sourceInd > bestTargetInd - bestSourceInd) {
                                bestSourceInd = sourceInd;
                                bestTargetInd = targetInd;
                            }
                        }
                    }
                }
                if (bestTargetInd - bestSourceInd > 1) {
                    // Indent nodes in [bestSourceInd + 1, bestTargetInd - 1].
                    for (var i = bestSourceInd + 1; i < bestTargetInd; i++) {
                        indentationLevels[i] += 0.5;
                    }
                    // Recursively attempt to indent nodes before, within and after this
                    // interval.
                    indentLongestShortcut(startInd, bestSourceInd);
                    indentLongestShortcut(bestSourceInd + 1, bestTargetInd - 1);
                    indentLongestShortcut(bestTargetInd, endInd);
                }
            };
            for (var i = 0; i < trunkNodeIds.length; i++) {
                indentationLevels.push(0);
            }
            indentLongestShortcut(0, trunkNodeIds.length - 1);
            return indentationLevels;
        };
        return {
            // Returns an object representing the nodes of the graph. The keys of the
            // object are the node labels. The corresponding values are objects with
            // the following keys:
            //   - x0: the x-position of the top-left corner of the node, measured
            //       as a fraction of the total width.
            //   - y0: the y-position of the top-left corner of the node, measured
            //       as a fraction of the total height.
            //   - width: the width of the node, measured as a fraction of the total
            //       width.
            //   - height: the height of the node, measured as a fraction of the total
            //       height.
            //   - xLabel: the x-position of the middle of the box containing
            //       the node label, measured as a fraction of the total width.
            //       The node label is centered horizontally within this box.
            //   - yLabel: the y-position of the middle of the box containing
            //       the node label, measured as a fraction of the total height.
            //       The node label is centered vertically within this box.
            //   - reachable: whether there is a path from the start node to this
            //       node.
            //   - reachableFromEnd: whether there is a path from this node to the
            //       END node.
            //   - id: a unique id for the node.
            //   - label: the full label of the node.
            computeLayout: function (nodes, links, initNodeId, finalNodeIds) {
                var adjacencyLists = getGraphAsAdjacencyLists(nodes, links);
                // Find a long path through the graph from the initial state to a
                // terminal state via simple backtracking. Limit the algorithm to a
                // constant number of calls in order to ensure that the calculation
                // does not take too long.
                var MAX_BACKTRACKING_CALLS = 1000;
                var numBacktrackingCalls = 0;
                var bestPath = [initNodeId];
                // Note that this is a 'global variable' for the purposes of the
                // backtracking computation.
                var currentPath = [];
                var backtrack = function (currentNodeId) {
                    currentPath.push(currentNodeId);
                    // If the current node leads to no other nodes, we consider it a
                    // 'terminal state'.
                    if (adjacencyLists[currentNodeId].length === 0) {
                        if (currentPath.length > bestPath.length) {
                            bestPath = angular.copy(currentPath);
                        }
                    }
                    else {
                        numBacktrackingCalls++;
                        if (numBacktrackingCalls <= MAX_BACKTRACKING_CALLS) {
                            for (var i = 0; i < adjacencyLists[currentNodeId].length; i++) {
                                if (currentPath.indexOf(adjacencyLists[currentNodeId][i]) === -1) {
                                    backtrack(adjacencyLists[currentNodeId][i]);
                                }
                            }
                        }
                    }
                    currentPath.pop();
                };
                backtrack(initNodeId);
                // In this implementation, nodes are aligned with a rectangular grid.
                // We calculate two additional internal variables for each node in
                // nodeData:
                //   - depth: its depth in the graph.
                //   - offset: its horizontal offset in the graph.
                // The depth and offset are measured in terms of grid squares.
                //
                // We first take the longest path through the graph (the 'trunk') and
                // find the longest possible shortcuts within that path, then indent
                // the nodes within those shortcuts and assign depths/offsets to them.
                // The indentation is done by only half a node width, so that the nodes
                // still feel 'close' together.
                //
                // After that, we traverse all remaining nodes via BFS and arrange them
                // such that nodes that are immediate descendants of nodes in the trunk
                // fall in the level just below their parent, and their children fall in
                // the next level, etc. All these nodes are placed to the right of the
                // trunk.
                //
                // NOTE: This algorithm does not work so well in clarifying articulation
                // points and 'subclusters' within a graph. For an illustration of this,
                // see the 'Parameterized Adventure' demo exploration.
                var SENTINEL_DEPTH = -1;
                var SENTINEL_OFFSET = -1;
                var nodeData = {};
                for (var nodeId in nodes) {
                    nodeData[nodeId] = {
                        depth: SENTINEL_DEPTH,
                        offset: SENTINEL_OFFSET,
                        reachable: false
                    };
                }
                var maxDepth = 0;
                var maxOffsetInEachLevel = {
                    0: 0
                };
                var trunkNodesIndentationLevels = getIndentationLevels(adjacencyLists, bestPath);
                for (var i = 0; i < bestPath.length; i++) {
                    nodeData[bestPath[i]].depth = maxDepth;
                    nodeData[bestPath[i]].offset = trunkNodesIndentationLevels[i];
                    nodeData[bestPath[i]].reachable = true;
                    maxOffsetInEachLevel[maxDepth] = trunkNodesIndentationLevels[i];
                    maxDepth++;
                }
                // Do a breadth-first search to calculate the depths and offsets for
                // other nodes.
                var seenNodes = [initNodeId];
                var queue = [initNodeId];
                while (queue.length > 0) {
                    var currNodeId = queue[0];
                    queue.shift();
                    nodeData[currNodeId].reachable = true;
                    for (var i = 0; i < adjacencyLists[currNodeId].length; i++) {
                        var linkTarget = adjacencyLists[currNodeId][i];
                        // If the target node is a trunk node, but isn't at the correct
                        // depth to process now, we ignore it for now and stick it back in
                        // the queue to be processed later.
                        if (bestPath.indexOf(linkTarget) !== -1 &&
                            nodeData[linkTarget].depth !== nodeData[currNodeId].depth + 1) {
                            if (seenNodes.indexOf(linkTarget) === -1 &&
                                queue.indexOf(linkTarget) === -1) {
                                queue.push(linkTarget);
                            }
                            continue;
                        }
                        // Assign depths and offsets to nodes only if we're processing them
                        // for the first time.
                        if (seenNodes.indexOf(linkTarget) === -1) {
                            seenNodes.push(linkTarget);
                            if (nodeData[linkTarget].depth === SENTINEL_DEPTH) {
                                nodeData[linkTarget].depth = nodeData[currNodeId].depth + 1;
                                nodeData[linkTarget].offset = (nodeData[linkTarget].depth in maxOffsetInEachLevel ?
                                    maxOffsetInEachLevel[nodeData[linkTarget].depth] + 1 : 0);
                                maxDepth = Math.max(maxDepth, nodeData[linkTarget].depth);
                                maxOffsetInEachLevel[nodeData[linkTarget].depth] = (nodeData[linkTarget].offset);
                            }
                            if (queue.indexOf(linkTarget) === -1) {
                                queue.push(linkTarget);
                            }
                        }
                    }
                }
                // Handle nodes that were not visited in the forward traversal.
                maxOffsetInEachLevel[maxDepth + 1] = 0;
                maxDepth += 1;
                var orphanedNodesExist = false;
                for (var nodeId in nodeData) {
                    if (nodeData[nodeId].depth === SENTINEL_DEPTH) {
                        orphanedNodesExist = true;
                        nodeData[nodeId].depth = maxDepth;
                        nodeData[nodeId].offset = maxOffsetInEachLevel[maxDepth];
                        maxOffsetInEachLevel[maxDepth] += 1;
                    }
                }
                if (orphanedNodesExist) {
                    maxDepth++;
                }
                // Build the 'inverse index' -- for each row, store the (offset, nodeId)
                // pairs in ascending order of offset.
                var nodePositionsToIds = [];
                for (var i = 0; i <= maxDepth; i++) {
                    nodePositionsToIds.push([]);
                }
                for (var nodeId in nodeData) {
                    if (nodeData[nodeId].depth !== SENTINEL_DEPTH) {
                        nodePositionsToIds[nodeData[nodeId].depth].push({
                            nodeId: nodeId,
                            offset: nodeData[nodeId].offset
                        });
                    }
                }
                for (var i = 0; i <= maxDepth; i++) {
                    nodePositionsToIds[i].sort(function (a, b) {
                        return a.offset - b.offset;
                    });
                }
                // Recalculate the node depths and offsets, taking into account
                // MAX_NODES_PER_ROW. If there are too many nodes in a row, we overflow
                // them into the next one.
                var currentDepth = 0;
                var currentLeftMargin = 0;
                var currentLeftOffset = 0;
                for (var i = 0; i <= maxDepth; i++) {
                    if (nodePositionsToIds[i].length > 0) {
                        // The offset of the leftmost node at this depth. If there are too
                        // many nodes in this depth, this variable is used to figure out
                        // which offset to start the continuation rows from.
                        currentLeftMargin = nodePositionsToIds[i][0].offset;
                        // The offset of the current node under consideration.
                        currentLeftOffset = currentLeftMargin;
                        for (var j = 0; j < nodePositionsToIds[i].length; j++) {
                            var computedOffset = currentLeftOffset;
                            if (computedOffset >= MAX_NODES_PER_ROW) {
                                currentDepth++;
                                computedOffset = currentLeftMargin + 1;
                                currentLeftOffset = computedOffset;
                            }
                            nodeData[nodePositionsToIds[i][j].nodeId].depth = currentDepth;
                            nodeData[nodePositionsToIds[i][j].nodeId].offset = (currentLeftOffset);
                            currentLeftOffset += 1;
                        }
                        currentDepth++;
                    }
                }
                // Calculate the width and height of each grid rectangle.
                var totalRows = currentDepth;
                // Set totalColumns to be MAX_NODES_PER_ROW, so that the width of the
                // graph visualization can be calculated based on a fixed constant,
                // MAX_NODES_PER_ROW. Otherwise, the width of the individual nodes is
                // dependent on the number of nodes in the longest row, and this makes
                // the nodes too wide if, e.g., the overall graph is just a single
                // column wide.
                var totalColumns = MAX_NODES_PER_ROW;
                // Horizontal padding between the graph and the edge of the graph
                // visualization, measured as a fraction of the entire height.
                var HORIZONTAL_EDGE_PADDING_FRACTION = 0.05;
                // Vertical edge padding between the graph and the edge of the graph
                // visualization, measured as a fraction of the entire height.
                var VERTICAL_EDGE_PADDING_FRACTION = 0.1;
                // The vertical padding, measured as a fraction of the height of a grid
                // rectangle, between the top of the grid rectangle and the top of the
                // node. An equivalent amount of padding will be used for the space
                // between the bottom of the grid rectangle and the bottom of the node.
                var GRID_NODE_Y_PADDING_FRACTION = 0.2;
                // As above, but for the horizontal padding.
                var GRID_NODE_X_PADDING_FRACTION = 0.1;
                // The vertical padding, measured as a fraction of the height of a grid
                // rectangle, between the top of the node and the top of the node label.
                // An equivalent amount of padding will be used for the space between
                // the bottom of the node and the bottom of the node label.
                var NODE_LABEL_Y_PADDING_FRACTION = 0.15;
                // As above, but for the horizontal padding.
                var NODE_LABEL_X_PADDING_FRACTION = 0.05;
                // Helper function that returns a horizontal position, in terms of a
                // fraction of the total width, given a horizontal offset in terms of
                // grid rectangles.
                var getHorizontalPosition = function (offsetInGridRectangles) {
                    var fractionalGridWidth = ((1.0 - HORIZONTAL_EDGE_PADDING_FRACTION * 2) / totalColumns);
                    return (HORIZONTAL_EDGE_PADDING_FRACTION +
                        fractionalGridWidth * offsetInGridRectangles);
                };
                // Helper function that returns a vertical position, in terms of a
                // fraction of the total height, given a vertical offset in terms of
                // grid rectangles.
                var getVerticalPosition = function (offsetInGridRectangles) {
                    var fractionalGridHeight = ((1.0 - VERTICAL_EDGE_PADDING_FRACTION * 2) / totalRows);
                    return (VERTICAL_EDGE_PADDING_FRACTION +
                        fractionalGridHeight * offsetInGridRectangles);
                };
                for (var nodeId in nodeData) {
                    nodeData[nodeId].y0 = getVerticalPosition(nodeData[nodeId].depth + GRID_NODE_Y_PADDING_FRACTION);
                    nodeData[nodeId].x0 = getHorizontalPosition(nodeData[nodeId].offset + GRID_NODE_X_PADDING_FRACTION);
                    nodeData[nodeId].yLabel = getVerticalPosition(nodeData[nodeId].depth + 0.5);
                    nodeData[nodeId].xLabel = getHorizontalPosition(nodeData[nodeId].offset + 0.5);
                    nodeData[nodeId].height = ((1.0 - VERTICAL_EDGE_PADDING_FRACTION * 2) / totalRows) * (1.0 - GRID_NODE_Y_PADDING_FRACTION * 2);
                    nodeData[nodeId].width = ((1.0 - HORIZONTAL_EDGE_PADDING_FRACTION * 2) / totalColumns) * (1.0 - GRID_NODE_X_PADDING_FRACTION * 2);
                }
                // Assign id and label to each node.
                for (var nodeId in nodeData) {
                    nodeData[nodeId].id = nodeId;
                    nodeData[nodeId].label = nodes[nodeId];
                }
                // Mark nodes that are reachable from any end state via backward links.
                queue = finalNodeIds;
                for (var i = 0; i < finalNodeIds.length; i++) {
                    nodeData[finalNodeIds[i]].reachableFromEnd = true;
                }
                while (queue.length > 0) {
                    var currNodeId = queue[0];
                    queue.shift();
                    for (var i = 0; i < links.length; i++) {
                        if (links[i].target === currNodeId &&
                            !nodeData[links[i].source].reachableFromEnd) {
                            nodeData[links[i].source].reachableFromEnd = true;
                            queue.push(links[i].source);
                        }
                    }
                }
                lastComputedArrangement = angular.copy(nodeData);
                return nodeData;
            },
            getLastComputedArrangement: function () {
                return angular.copy(lastComputedArrangement);
            },
            getGraphBoundaries: function (nodeData) {
                var INFINITY = 1e30;
                var BORDER_PADDING = 5;
                var leftEdge = INFINITY;
                var topEdge = INFINITY;
                var bottomEdge = -INFINITY;
                var rightEdge = -INFINITY;
                for (var nodeId in nodeData) {
                    leftEdge = Math.min(nodeData[nodeId].x0 - BORDER_PADDING, leftEdge);
                    topEdge = Math.min(nodeData[nodeId].y0 - BORDER_PADDING, topEdge);
                    rightEdge = Math.max(nodeData[nodeId].x0 + BORDER_PADDING + nodeData[nodeId].width, rightEdge);
                    bottomEdge = Math.max(nodeData[nodeId].y0 + BORDER_PADDING + nodeData[nodeId].height, bottomEdge);
                }
                return {
                    bottom: bottomEdge,
                    left: leftEdge,
                    right: rightEdge,
                    top: topEdge
                };
            },
            getAugmentedLinks: function (nodeData, nodeLinks) {
                var links = angular.copy(nodeLinks);
                var augmentedLinks = links.map(function (link) {
                    return {
                        source: angular.copy(nodeData[link.source]),
                        target: angular.copy(nodeData[link.target])
                    };
                });
                for (var i = 0; i < augmentedLinks.length; i++) {
                    var link = augmentedLinks[i];
                    if (link.source.label !== link.target.label) {
                        var sourcex = link.source.xLabel;
                        var sourcey = link.source.yLabel;
                        var targetx = link.target.xLabel;
                        var targety = link.target.yLabel;
                        if (sourcex === targetx && sourcey === targety) {
                            // TODO(sll): Investigate why this happens.
                            return;
                        }
                        var sourceWidth = link.source.width;
                        var sourceHeight = link.source.height;
                        var targetWidth = link.target.width;
                        var targetHeight = link.target.height;
                        var dx = targetx - sourcex;
                        var dy = targety - sourcey;
                        /* Fractional amount of truncation to be applied to the end of
                           each link. */
                        var startCutoff = (sourceWidth / 2) / Math.abs(dx);
                        var endCutoff = (targetWidth / 2) / Math.abs(dx);
                        if (dx === 0 || dy !== 0) {
                            startCutoff = ((dx === 0) ? (sourceHeight / 2) / Math.abs(dy) :
                                Math.min(startCutoff, (sourceHeight / 2) / Math.abs(dy)));
                            endCutoff = ((dx === 0) ? (targetHeight / 2) / Math.abs(dy) :
                                Math.min(endCutoff, (targetHeight / 2) / Math.abs(dy)));
                        }
                        var dxperp = targety - sourcey;
                        var dyperp = sourcex - targetx;
                        var norm = Math.sqrt(dxperp * dxperp + dyperp * dyperp);
                        dxperp /= norm;
                        dyperp /= norm;
                        var midx = sourcex + dx / 2 + dxperp * (sourceHeight / 4);
                        var midy = sourcey + dy / 2 + dyperp * (targetHeight / 4);
                        var startx = sourcex + startCutoff * dx;
                        var starty = sourcey + startCutoff * dy;
                        var endx = targetx - endCutoff * dx;
                        var endy = targety - endCutoff * dy;
                        // Draw a quadratic bezier curve.
                        augmentedLinks[i].d = ('M' + startx + ' ' + starty + ' Q ' + midx + ' ' + midy +
                            ' ' + endx + ' ' + endy);
                    }
                }
                return augmentedLinks;
            },
            modifyPositionValues: function (nodeData, graphWidth, graphHeight) {
                var HORIZONTAL_NODE_PROPERTIES = ['x0', 'width', 'xLabel'];
                var VERTICAL_NODE_PROPERTIES = ['y0', 'height', 'yLabel'];
                // Change the position values in nodeData to use pixels.
                for (var nodeId in nodeData) {
                    for (var i = 0; i < HORIZONTAL_NODE_PROPERTIES.length; i++) {
                        nodeData[nodeId][HORIZONTAL_NODE_PROPERTIES[i]] = (graphWidth *
                            nodeData[nodeId][HORIZONTAL_NODE_PROPERTIES[i]]);
                        nodeData[nodeId][VERTICAL_NODE_PROPERTIES[i]] = (graphHeight *
                            nodeData[nodeId][VERTICAL_NODE_PROPERTIES[i]]);
                    }
                }
                return nodeData;
            },
            getGraphWidth: function (maxNodesPerRow, maxNodeLabelLength) {
                // A rough upper bound for the width of a single letter, in pixels,
                // to use as a scaling factor to determine the width of graph nodes.
                // This is not an entirely accurate description because it also takes
                // into account the horizontal whitespace between graph nodes.
                var letterWidthInPixels = 10.5;
                return maxNodesPerRow * maxNodeLabelLength * letterWidthInPixels;
            },
            getGraphHeight: function (nodeData) {
                var maxDepth = 0;
                for (var nodeId in nodeData) {
                    maxDepth = Math.max(maxDepth, nodeData[nodeId].depth);
                }
                return 70.0 * (maxDepth + 1);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/ck-editor-helpers/ck-editor-rte/ck-editor-rte.directive.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/ck-editor-helpers/ck-editor-rte/ck-editor-rte.directive.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Modal and functionality for the create story button.
 */
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/RteHelperService.ts */ "./core/templates/dev/head/services/RteHelperService.ts");
angular.module('ckEditorRteModule').directive('ckEditorRte', [
    'ContextService', 'RteHelperService', 'PAGE_CONTEXT',
    function (ContextService, RteHelperService, PAGE_CONTEXT) {
        return {
            restrict: 'E',
            scope: {
                uiConfig: '&'
            },
            template: '<div><div></div>' +
                '<div contenteditable="true" class="oppia-rte">' +
                '</div></div>',
            require: '?ngModel',
            link: function (scope, el, attr, ngModel) {
                var _RICH_TEXT_COMPONENTS = RteHelperService.getRichTextComponents();
                var names = [];
                var icons = [];
                var canUseFs = ContextService.getPageContext() ===
                    PAGE_CONTEXT.EXPLORATION_EDITOR;
                _RICH_TEXT_COMPONENTS.forEach(function (componentDefn) {
                    if (!((scope.uiConfig() &&
                        scope.uiConfig().hide_complex_extensions &&
                        componentDefn.isComplex) ||
                        (!canUseFs && componentDefn.requiresFs))) {
                        names.push(componentDefn.id);
                        icons.push(componentDefn.iconDataUrl);
                    }
                });
                /**
                 * Create rules to whitelist all the rich text components and
                 * their wrappers and overlays.
                 * See format of filtering rules here:
                 * http://docs.ckeditor.com/#!/guide/dev_allowed_content_rules
                 */
                // Whitelist the component tags with any attributes and classes.
                var componentRule = names.map(function (name) {
                    return 'oppia-noninteractive-' + name;
                }).join(' ') + '(*)[*];';
                // Whitelist the inline component wrapper, which is a
                // span with a "type" attribute.
                var inlineWrapperRule = ' span[type];';
                // Whitelist the block component wrapper, which is a div
                // with a "type" attribute and a CSS class.
                var blockWrapperRule = ' div(oppia-rte-component-container)[type];';
                // Whitelist the transparent block component overlay, which is
                // a div with a CSS class.
                var blockOverlayRule = ' div(oppia-rte-component-overlay);';
                // Put all the rules together.
                var extraAllowedContentRules = componentRule +
                    inlineWrapperRule +
                    blockWrapperRule +
                    blockOverlayRule;
                var pluginNames = names.map(function (name) {
                    return 'oppia' + name;
                }).join(',');
                var buttonNames = [];
                names.forEach(function (name) {
                    buttonNames.push('Oppia' + name);
                    buttonNames.push('-');
                });
                buttonNames.pop();
                // All icons on the toolbar except the Rich Text components.
                var allIcons = ['undo', 'redo', 'bold', 'Italic', 'numberedList',
                    'bulletedList', 'pre', 'indent', 'outdent'];
                // Add external plugins.
                CKEDITOR.plugins.addExternal('sharedspace', '/third_party/static/ckeditor-sharedspace-4.9.2/', 'plugin.js');
                // Pre plugin is not available for 4.9.2 version of CKEditor. This is
                // a self created plugin (other plugins are provided by CKEditor).
                CKEDITOR.plugins.addExternal('pre', '/extensions/ckeditor_plugins/pre/', 'plugin.js');
                var startupFocusEnabled = true;
                if (scope.uiConfig() &&
                    scope.uiConfig().startupFocusEnabled !== undefined) {
                    startupFocusEnabled = scope.uiConfig().startupFocusEnabled;
                }
                // Initialize CKEditor.
                var ck = CKEDITOR.inline((el[0].children[0].children[1]), {
                    extraPlugins: 'pre,sharedspace,' + pluginNames,
                    startupFocus: startupFocusEnabled,
                    removePlugins: 'indentblock',
                    title: false,
                    floatSpaceDockedOffsetY: 15,
                    extraAllowedContent: extraAllowedContentRules,
                    sharedSpaces: {
                        top: el[0].children[0].children[0]
                    },
                    skin: 'bootstrapck,/third_party/static/ckeditor-bootstrapck-1.0/',
                    toolbar: [
                        {
                            name: 'basicstyles',
                            items: ['Bold', '-', 'Italic']
                        },
                        {
                            name: 'paragraph',
                            items: [
                                'NumberedList', '-',
                                'BulletedList', '-',
                                'Pre', '-',
                                'Blockquote', '-',
                                'Indent', '-',
                                'Outdent'
                            ]
                        },
                        {
                            name: 'rtecomponents',
                            items: buttonNames
                        },
                        {
                            name: 'document',
                            items: ['Source']
                        }
                    ]
                });
                // A RegExp for matching rich text components.
                var componentRe = (/(<(oppia-noninteractive-(.+?))\b[^>]*>)[\s\S]*?<\/\2>/g);
                /**
                 * Before data is loaded into CKEditor, we need to wrap every rte
                 * component in a span (inline) or div (block).
                 * For block elements, we add an overlay div as well.
                 */
                var wrapComponents = function (html) {
                    if (html === undefined) {
                        return html;
                    }
                    return html.replace(componentRe, function (match, p1, p2, p3) {
                        if (RteHelperService.isInlineComponent(p3)) {
                            return '<span type="oppia-noninteractive-' + p3 + '">' +
                                match + '</span>';
                        }
                        else {
                            return '<div type="oppia-noninteractive-' + p3 + '"' +
                                'class="oppia-rte-component-container">' + match +
                                '</div>';
                        }
                    });
                };
                ck.on('instanceReady', function () {
                    // Set the css and icons for each toolbar button.
                    names.forEach(function (name, index) {
                        var icon = icons[index];
                        var upperCasedName = name.charAt(0).toUpperCase() + name.slice(1);
                        $('.cke_button__oppia' + name)
                            .css('background-image', 'url("/extensions' + icon + '")')
                            .css('background-position', 'center')
                            .css('background-repeat', 'no-repeat')
                            .css('height', '24px')
                            .css('width', '24px')
                            .css('padding', '0px 0px');
                    });
                    $('.cke_toolbar_separator')
                        .css('height', '22px');
                    $('.cke_button_icon')
                        .css('height', '24px')
                        .css('width', '24px');
                    ck.setData(wrapComponents(ngModel.$viewValue));
                });
                // Angular rendering of components confuses CKEditor's undo system, so
                // we hide all of that stuff away from CKEditor.
                ck.on('getSnapshot', function (event) {
                    if (event.data === undefined) {
                        return;
                    }
                    event.data = event.data.replace(componentRe, function (match, p1, p2) {
                        return p1 + '</' + p2 + '>';
                    });
                }, null, null, 20);
                ck.on('change', function () {
                    var elt = $('<div>' + ck.getData() + '</div>');
                    var textElt = elt[0].childNodes;
                    for (var i = textElt.length; i > 0; i--) {
                        for (var j = textElt[i - 1].childNodes.length; j > 0; j--) {
                            if (textElt[i - 1].childNodes[j - 1].nodeName === 'BR' ||
                                (textElt[i - 1].childNodes[j - 1].nodeName === '#text' &&
                                    textElt[i - 1].childNodes[j - 1].nodeValue.trim() === '')) {
                                textElt[i - 1].childNodes[j - 1].remove();
                            }
                            else {
                                break;
                            }
                        }
                        if (textElt[i - 1].childNodes.length === 0) {
                            if (textElt[i - 1].nodeName === 'BR' ||
                                (textElt[i - 1].nodeName === '#text' &&
                                    textElt[i - 1].nodeValue.trim() === '') ||
                                textElt[i - 1].nodeName === 'P') {
                                textElt[i - 1].remove();
                                continue;
                            }
                        }
                        else {
                            break;
                        }
                    }
                    ngModel.$setViewValue(elt.html());
                });
                ngModel.$render = function () {
                    ck.setData(ngModel.$viewValue);
                };
                scope.$on('$destroy', function () {
                    // Clean up CKEditor instance when directive is removed.
                    ck.destroy();
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/ck-editor-helpers/ck-editor-widgets/ck-editor-widgets.initializer.ts":
/*!*****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/ck-editor-helpers/ck-editor-widgets/ck-editor-widgets.initializer.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Code to dynamically generate CKEditor widgets for the rich
 * text components.
 */
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/RteHelperService.ts */ "./core/templates/dev/head/services/RteHelperService.ts");
angular.module('ckEditorWidgetsModule').run([
    '$timeout', '$compile', '$rootScope', '$uibModal', 'RteHelperService',
    'HtmlEscaperService',
    function ($timeout, $compile, $rootScope, $uibModal, RteHelperService, HtmlEscaperService) {
        var _RICH_TEXT_COMPONENTS = RteHelperService.getRichTextComponents();
        _RICH_TEXT_COMPONENTS.forEach(function (componentDefn) {
            // The name of the CKEditor widget corresponding to this component.
            var ckName = 'oppia' + componentDefn.id;
            // Check to ensure that a plugin is not registered more than once.
            if (CKEDITOR.plugins.registered[ckName] !== undefined) {
                return;
            }
            var tagName = 'oppia-noninteractive-' + componentDefn.id;
            var customizationArgSpecs = componentDefn.customizationArgSpecs;
            var isInline = RteHelperService.isInlineComponent(componentDefn.id);
            // Inline components will be wrapped in a span, while block components
            // will be wrapped in a div.
            if (isInline) {
                var componentTemplate = '<span type="' + tagName + '">' +
                    '<' + tagName + '></' + tagName + '>' +
                    '</span>';
            }
            else {
                var componentTemplate = '<div class="oppia-rte-component-container" ' +
                    'type="' + tagName + '">' +
                    '<' + tagName + '></' + tagName + '>' +
                    '<div class="component-overlay"></div>' +
                    '</div>';
            }
            CKEDITOR.plugins.add(ckName, {
                init: function (editor) {
                    // Create the widget itself.
                    editor.widgets.add(ckName, {
                        button: componentDefn.tooltip,
                        inline: isInline,
                        template: componentTemplate,
                        draggable: false,
                        edit: function () {
                            editor.fire('lockSnapshot', {
                                dontUpdate: true
                            });
                            // Save this for creating the widget later.
                            var container = this.wrapper.getParent(true);
                            var that = this;
                            var customizationArgs = {};
                            customizationArgSpecs.forEach(function (spec) {
                                customizationArgs[spec.name] = that.data[spec.name] ||
                                    spec.default_value;
                            });
                            RteHelperService._openCustomizationModal(customizationArgSpecs, customizationArgs, function (customizationArgsDict) {
                                for (var arg in customizationArgsDict) {
                                    if (customizationArgsDict.hasOwnProperty(arg)) {
                                        that.setData(arg, customizationArgsDict[arg]);
                                    }
                                }
                                /**
                                * This checks whether the widget has already been inited
                                * and set up before (if we are editing a widget that
                                * has already been inserted into the RTE, we do not
                                * need to finalizeCreation again).
                                */
                                if (!that.isReady()) {
                                    // Actually create the widget, if we have not already.
                                    editor.widgets.finalizeCreation(container);
                                }
                                /**
                                 * Need to manually $compile so the directive renders.
                                 * Note that.element.$ is the native DOM object
                                 * represented by that.element. See:
                                 * http://docs.ckeditor.com/#!/api/CKEDITOR.dom.element
                                 */
                                $compile($(that.element.$).contents())($rootScope);
                                // $timeout ensures we do not take the undo snapshot until
                                // after angular finishes its changes to the component tags.
                                $timeout(function () {
                                    // For inline widgets, place the caret after the
                                    // widget so the user can continue typing immediately.
                                    if (isInline) {
                                        var range = editor.createRange();
                                        var widgetContainer = that.element.getParent();
                                        range.moveToPosition(widgetContainer, CKEDITOR.POSITION_AFTER_END);
                                        editor.getSelection().selectRanges([range]);
                                        // Another timeout needed so the undo snapshot is
                                        // not taken until the caret is in the right place.
                                        $timeout(function () {
                                            editor.fire('unlockSnapshot');
                                            editor.fire('saveSnapshot');
                                        });
                                    }
                                    else {
                                        editor.fire('unlockSnapshot');
                                        editor.fire('saveSnapshot');
                                    }
                                });
                            }, function () { }, function () { });
                        },
                        /**
                         * This is how the widget will be represented in the outputs source,
                         * so it is called when we call editor.getData().
                         */
                        downcast: function (element) {
                            // Clear the angular rendering content, which we don't
                            // want in the output.
                            element.children[0].setHtml('');
                            // Return just the rich text component, without its wrapper.
                            return element.children[0];
                        },
                        /**
                         * This is how a widget is recognized by CKEditor, for example
                         * when we first load data in. Returns a boolean,
                         * true iff "element" is an instance of this widget.
                         */
                        upcast: function (element) {
                            return (element.name !== 'p' &&
                                element.children.length > 0 &&
                                element.children[0].name === tagName);
                        },
                        data: function () {
                            var that = this;
                            // Set attributes of component according to data values.
                            customizationArgSpecs.forEach(function (spec) {
                                that.element.getChild(0).setAttribute(spec.name + '-with-value', HtmlEscaperService.objToEscapedJson(that.data[spec.name] || ''));
                            });
                        },
                        init: function () {
                            editor.fire('lockSnapshot', {
                                dontUpdate: true
                            });
                            var that = this;
                            var isMissingAttributes = false;
                            // On init, read values from component attributes and save them.
                            customizationArgSpecs.forEach(function (spec) {
                                var value = that.element.getChild(0).getAttribute(spec.name + '-with-value');
                                if (value) {
                                    that.setData(spec.name, HtmlEscaperService.escapedJsonToObj(value));
                                }
                                else {
                                    isMissingAttributes = true;
                                }
                            });
                            if (!isMissingAttributes) {
                                // Need to manually $compile so the directive renders.
                                $compile($(this.element.$).contents())($rootScope);
                            }
                            $timeout(function () {
                                editor.fire('unlockSnapshot');
                                editor.fire('saveSnapshot');
                            });
                        }
                    });
                }
            });
        });
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/common-layout-directives/loading-dots/loading-dots.directive.ts":
/*!************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/common-layout-directives/loading-dots/loading-dots.directive.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for displaying animated loading dots.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('loadingDotsModule').directive('loadingDots', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/common-layout-directives/loading-dots/' +
                'loading-dots.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () { }]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/entity-creation-services/question-creation/question-creation.service.ts":
/*!********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/entity-creation-services/question-creation/question-creation.service.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to create the question.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('entityCreationServicesModule').factory('QuestionCreationService', [
    '$http', '$q', 'UrlInterpolationService',
    function ($http, $q, UrlInterpolationService) {
        var QUESTION_CREATOR_URL = '/question_editor_handler/create_new';
        var _createNew = function (backendQuestionDict, successCallback, errorCallback) {
            var postData = {
                question_dict: backendQuestionDict
            };
            $http.post(QUESTION_CREATOR_URL, postData).then(function (response) {
                if (successCallback) {
                    successCallback();
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        return {
            createNew: function (backendQuestionDict) {
                return $q(function (resolve, reject) {
                    _createNew(backendQuestionDict, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/entity-creation-services/story-creation/story-creation.service.ts":
/*!**************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/entity-creation-services/story-creation/story-creation.service.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Modal and functionality for the create story button.
 */
__webpack_require__(/*! domain/topic/TopicUpdateService.ts */ "./core/templates/dev/head/domain/topic/TopicUpdateService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('entityCreationServicesModule').factory('StoryCreationService', [
    '$http', '$rootScope', '$timeout', '$uibModal', '$window', 'AlertsService',
    'TopicEditorStateService', 'TopicUpdateService', 'UrlInterpolationService',
    function ($http, $rootScope, $timeout, $uibModal, $window, AlertsService, TopicEditorStateService, TopicUpdateService, UrlInterpolationService) {
        var STORY_EDITOR_URL_TEMPLATE = '/story_editor/<topic_id>/<story_id>';
        var STORY_CREATOR_URL_TEMPLATE = '/topic_editor_story_handler/<topic_id>';
        var storyCreationInProgress = false;
        return {
            createNewCanonicalStory: function () {
                if (storyCreationInProgress) {
                    return;
                }
                var modalInstance = $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                        'new-story-title-editor.template.html'),
                    backdrop: true,
                    controller: [
                        '$scope', '$uibModalInstance',
                        function ($scope, $uibModalInstance) {
                            $scope.storyTitle = '';
                            $scope.isStoryTitleEmpty = function (storyTitle) {
                                return (storyTitle === '');
                            };
                            $scope.save = function (storyTitle) {
                                $uibModalInstance.close(storyTitle);
                            };
                            $scope.cancel = function () {
                                $uibModalInstance.dismiss('cancel');
                            };
                        }
                    ]
                });
                modalInstance.result.then(function (storyTitle) {
                    if (storyTitle === '') {
                        throw Error('Story title cannot be empty');
                    }
                    storyCreationInProgress = true;
                    AlertsService.clearWarnings();
                    var topic = TopicEditorStateService.getTopic();
                    $rootScope.loadingMessage = 'Creating story';
                    var createStoryUrl = UrlInterpolationService.interpolateUrl(STORY_CREATOR_URL_TEMPLATE, {
                        topic_id: topic.getId()
                    });
                    $http.post(createStoryUrl, { title: storyTitle })
                        .then(function (response) {
                        $timeout(function () {
                            TopicUpdateService.addCanonicalStoryId(topic, response.data.storyId);
                            TopicEditorStateService.saveTopic('Added canonical story with id ' + response.data.storyId, function () {
                                $window.location = UrlInterpolationService.interpolateUrl(STORY_EDITOR_URL_TEMPLATE, {
                                    topic_id: topic.getId(),
                                    story_id: response.data.storyId
                                });
                            });
                        }, 150);
                    }, function () {
                        $rootScope.loadingMessage = '';
                    });
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/forms-directives/image-uploader/image-uploader.directive.ts":
/*!**************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/forms-directives/image-uploader/image-uploader.directive.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for uploading images.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/IdGenerationService.ts */ "./core/templates/dev/head/services/IdGenerationService.ts");
angular.module('imageUploaderModule').directive('imageUploader', [
    'IdGenerationService', 'UrlInterpolationService',
    function (IdGenerationService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                height: '@',
                onFileChanged: '=',
                errorMessage: '@',
                width: '@'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/image_uploader_directive.html'),
            link: function (scope, elt) {
                var onDragEnd = function (e) {
                    e.preventDefault();
                    $('.image-uploader-drop-area').removeClass('image-uploader-is-active');
                };
                var validateUploadedFile = function (file, filename) {
                    if (!file || !file.size || !file.type.match('image.*')) {
                        return 'This file is not recognized as an image.';
                    }
                    if (!file.type.match('image.jpeg') &&
                        !file.type.match('image.gif') &&
                        !file.type.match('image.jpg') &&
                        !file.type.match('image.png')) {
                        return 'This image format is not supported.';
                    }
                    if ((file.type.match(/jp(e?)g$/) && !file.name.match(/\.jp(e?)g$/)) ||
                        (file.type.match(/gif$/) && !file.name.match(/\.gif$/)) ||
                        (file.type.match(/png$/) && !file.name.match(/\.png$/))) {
                        return 'This image format does not match the filename extension.';
                    }
                    var ONE_MB_IN_BYTES = 1048576;
                    if (file.size > ONE_MB_IN_BYTES) {
                        var currentSize = (file.size / ONE_MB_IN_BYTES).toFixed(1) + ' MB';
                        return 'The maximum allowed file size is 1 MB' +
                            ' (' + currentSize + ' given).';
                    }
                    return null;
                };
                $(elt).bind('drop', function (e) {
                    onDragEnd(e);
                    var file = e.originalEvent.dataTransfer.files[0];
                    scope.errorMessage = validateUploadedFile(file, file.name);
                    if (!scope.errorMessage) {
                        // Only fire this event if validations pass.
                        scope.onFileChanged(file, file.name);
                    }
                    scope.$apply();
                });
                $(elt).bind('dragover', function (e) {
                    e.preventDefault();
                    $('.image-uploader-drop-area').addClass('image-uploader-is-active');
                });
                $(elt).bind('dragleave', onDragEnd);
                // If the user accidentally drops an image outside of the image-uploader
                // we want to prevent the browser from applying normal drag-and-drop
                // logic, which is to load the image in the browser tab.
                $(window).bind('dragover', function (e) {
                    e.preventDefault();
                });
                $(window).bind('drop', function (e) {
                    e.preventDefault();
                });
                // We generate a random class name to distinguish this input from
                // others in the DOM.
                scope.fileInputClassName = ('image-uploader-file-input' + IdGenerationService.generateNewId());
                angular.element(document).on('change', '.' + scope.fileInputClassName, function (evt) {
                    var file = evt.currentTarget.files[0];
                    var filename = evt.target.value.split(/(\\|\/)/g).pop();
                    scope.errorMessage = validateUploadedFile(file, filename);
                    if (!scope.errorMessage) {
                        // Only fire this event if validations pass.
                        scope.onFileChanged(file, filename);
                    }
                    scope.$apply();
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/forms-directives/select2-dropdown/select2-dropdown.directive.ts":
/*!******************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/forms-directives/select2-dropdown/select2-dropdown.directive.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the select2 autocomplete component.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('select2DropdownModule').directive('select2Dropdown', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        // Directive for incorporating select2 dropdowns.
        return {
            restrict: 'E',
            scope: {
                // Whether to allow multiple choices. In order to do so, the value of
                // this attribute must be the exact string 'true'.
                allowMultipleChoices: '@',
                choices: '=',
                // An additional CSS class to add to the select2 dropdown. May be
                // undefined.
                dropdownCssClass: '@',
                // A function that formats a new selection. May be undefined.
                formatNewSelection: '=',
                // The message shown when an invalid search term is entered. May be
                // undefined, in which case this defaults to 'No matches found'.
                invalidSearchTermMessage: '@',
                item: '=',
                // The regex used to validate newly-entered choices that do not
                // already exist. If it is undefined then all new choices are rejected.
                newChoiceRegex: '@',
                onSelectionChange: '&',
                placeholder: '@',
                width: '@'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/forms-directives/select2-dropdown/' +
                'select2-dropdown.directive.html'),
            controller: ['$scope', '$element', function ($scope, $element) {
                    $scope.newChoiceValidator = new RegExp($scope.newChoiceRegex);
                    var select2Options = {
                        allowClear: false,
                        data: $scope.choices,
                        multiple: $scope.allowMultipleChoices === 'true',
                        tags: $scope.newChoiceRegex !== undefined,
                        placeholder: $scope.placeholder,
                        width: $scope.width || '250px',
                        dropdownCssClass: null,
                        createTag: function (params) {
                            return params.term.match($scope.newChoiceValidator) ? {
                                id: params.term,
                                text: params.term
                            } : null;
                        },
                        templateResult: function (queryResult) {
                            var doesChoiceMatchText = function (choice) {
                                return choice.id === queryResult.text;
                            };
                            if ($scope.choices && $scope.choices.some(doesChoiceMatchText)) {
                                return queryResult.text;
                            }
                            else {
                                if ($scope.formatNewSelection) {
                                    return $scope.formatNewSelection(queryResult.text);
                                }
                                else {
                                    return queryResult.text;
                                }
                            }
                        },
                        language: {
                            noResults: function () {
                                if ($scope.invalidSearchTermMessage) {
                                    return $scope.invalidSearchTermMessage;
                                }
                                else {
                                    return 'No matches found';
                                }
                            }
                        }
                    };
                    if ($scope.dropdownCssClass) {
                        select2Options.dropdownCssClass = $scope.dropdownCssClass;
                    }
                    var select2Node = $element[0].firstChild;
                    // Initialize the dropdown.
                    $(select2Node).select2(select2Options);
                    $(select2Node).val($scope.item).trigger('change');
                    // Update $scope.item when the selection changes.
                    $(select2Node).on('change', function () {
                        $scope.item = $(select2Node).val();
                        $scope.$apply();
                        $scope.onSelectionChange();
                    });
                    // Respond to external changes in $scope.item
                    $scope.$watch('item', function (newValue) {
                        $(select2Node).val(newValue);
                    });
                }]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state/answer-group-editor/answer-group-editor.directive.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state/answer-group-editor/answer-group-editor.directive.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the answer group editor.
 */
__webpack_require__(/*! components/state/outcome-editor/outcome-editor.directive.ts */ "./core/templates/dev/head/components/state/outcome-editor/outcome-editor.directive.ts");
__webpack_require__(/*! components/state/rule-editor/rule-editor.directive.ts */ "./core/templates/dev/head/components/state/rule-editor/rule-editor.directive.ts");
__webpack_require__(/*! directives/AngularHtmlBindDirective.ts */ "./core/templates/dev/head/directives/AngularHtmlBindDirective.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! domain/exploration/RuleObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/RuleObjectFactory.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data-editor-panel.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data-editor-panel.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('answerGroupEditorModule').directive('answerGroupEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                addState: '=',
                displayFeedback: '=',
                getOnSaveTaggedMisconception: '&onSaveTaggedMisconception',
                getOnSaveAnswerGroupDestFn: '&onSaveAnswerGroupDest',
                getOnSaveAnswerGroupFeedbackFn: '&onSaveAnswerGroupFeedback',
                getOnSaveAnswerGroupRulesFn: '&onSaveAnswerGroupRules',
                getOnSaveAnswerGroupCorrectnessLabelFn: ('&onSaveAnswerGroupCorrectnessLabel'),
                getTaggedMisconceptionId: '&taggedMisconceptionId',
                isEditable: '=',
                outcome: '=',
                rules: '=',
                showMarkAllAudioAsNeedingUpdateModalIfRequired: '=',
                suppressWarnings: '&'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/state/answer-group-editor/' +
                'answer-group-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$rootScope', '$uibModal', 'StateInteractionIdService',
                'AlertsService', 'INTERACTION_SPECS', 'StateEditorService',
                'RuleObjectFactory', 'TrainingDataEditorPanelService',
                'ENABLE_ML_CLASSIFIERS', 'ResponsesService',
                function ($scope, $rootScope, $uibModal, StateInteractionIdService, AlertsService, INTERACTION_SPECS, StateEditorService, RuleObjectFactory, TrainingDataEditorPanelService, ENABLE_ML_CLASSIFIERS, ResponsesService) {
                    var ctrl = this;
                    ctrl.rulesMemento = null;
                    ctrl.activeRuleIndex = ResponsesService.getActiveRuleIndex();
                    ctrl.editAnswerGroupForm = {};
                    ctrl.misconceptionName = null;
                    ctrl.misconceptions = StateEditorService.getMisconceptions();
                    var _getTaggedMisconceptionName = function (misconceptionId) {
                        for (var i = 0; i < ctrl.misconceptions.length; i++) {
                            if (ctrl.misconceptions[i].getId() === misconceptionId) {
                                ctrl.misconceptionName = ctrl.misconceptions[i].getName();
                            }
                        }
                    };
                    _getTaggedMisconceptionName(ctrl.getTaggedMisconceptionId());
                    ctrl.isInQuestionMode = function () {
                        return StateEditorService.isInQuestionMode();
                    };
                    ctrl.tagAnswerGroupWithMisconception = function () {
                        var modalInstance = $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                                'tag-misconception-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance', 'StateEditorService',
                                function ($scope, $uibModalInstance, StateEditorService) {
                                    $scope.misconceptions =
                                        StateEditorService.getMisconceptions();
                                    $scope.selectedMisconception = null;
                                    $scope.misconceptionFeedbackIsUsed = false;
                                    $scope.selectMisconception = function (misconception) {
                                        $scope.selectedMisconception = angular.copy(misconception);
                                    };
                                    $scope.toggleMisconceptionFeedbackUsage = function () {
                                        $scope.misconceptionFeedbackIsUsed =
                                            !$scope.misconceptionFeedbackIsUsed;
                                    };
                                    $scope.done = function () {
                                        $uibModalInstance.close({
                                            misconception: $scope.selectedMisconception,
                                            feedbackIsUsed: $scope.misconceptionFeedbackIsUsed
                                        });
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                }
                            ]
                        });
                        modalInstance.result.then(function (returnObject) {
                            var misconception = returnObject.misconception;
                            var feedbackIsUsed = returnObject.feedbackIsUsed;
                            var outcome = angular.copy(ctrl.outcome);
                            if (feedbackIsUsed) {
                                outcome.feedback.setHtml(misconception.getFeedback());
                                ctrl.getOnSaveAnswerGroupFeedbackFn()(outcome);
                                $rootScope.$broadcast('externalSave');
                            }
                            ctrl.getOnSaveTaggedMisconception()(misconception.getId());
                            _getTaggedMisconceptionName(misconception.getId());
                        });
                    };
                    ctrl.getAnswerChoices = function () {
                        return ResponsesService.getAnswerChoices();
                    };
                    ctrl.answerChoices = ctrl.getAnswerChoices();
                    // Updates answer choices when the interaction requires it -- e.g.,
                    // the rules for multiple choice need to refer to the multiple choice
                    // interaction's customization arguments.
                    // TODO(sll): Remove the need for this watcher, or make it less
                    // ad hoc.
                    $scope.$on('updateAnswerChoices', function () {
                        ctrl.answerChoices = ctrl.getAnswerChoices();
                    });
                    ctrl.getCurrentInteractionId = function () {
                        return StateInteractionIdService.savedMemento;
                    };
                    $scope.$on('externalSave', function () {
                        if (ctrl.isRuleEditorOpen()) {
                            ctrl.saveRules();
                        }
                    });
                    var getDefaultInputValue = function (varType) {
                        // TODO(bhenning): Typed objects in the backend should be required
                        // to provide a default value specific for their type.
                        switch (varType) {
                            default:
                            case 'Null':
                                return null;
                            case 'Boolean':
                                return false;
                            case 'Real':
                            case 'Int':
                            case 'NonnegativeInt':
                                return 0;
                            case 'CodeString':
                            case 'UnicodeString':
                            case 'NormalizedString':
                            case 'MathLatexString':
                            case 'Html':
                            case 'SanitizedUrl':
                            case 'Filepath':
                            case 'LogicErrorCategory':
                                return '';
                            case 'CodeEvaluation':
                                return {
                                    code: getDefaultInputValue('UnicodeString'),
                                    error: getDefaultInputValue('UnicodeString'),
                                    evaluation: getDefaultInputValue('UnicodeString'),
                                    output: getDefaultInputValue('UnicodeString')
                                };
                            case 'CoordTwoDim':
                                return [
                                    getDefaultInputValue('Real'),
                                    getDefaultInputValue('Real')
                                ];
                            case 'ListOfSetsOfHtmlStrings':
                            case 'ListOfUnicodeString':
                            case 'SetOfUnicodeString':
                            case 'SetOfHtmlString':
                                return [];
                            case 'MusicPhrase':
                                return [];
                            case 'CheckedProof':
                                return {
                                    assumptions_string: getDefaultInputValue('UnicodeString'),
                                    correct: getDefaultInputValue('Boolean'),
                                    proof_string: getDefaultInputValue('UnicodeString'),
                                    target_string: getDefaultInputValue('UnicodeString')
                                };
                            case 'LogicQuestion':
                                return {
                                    arguments: [],
                                    dummies: [],
                                    top_kind_name: getDefaultInputValue('UnicodeString'),
                                    top_operator_name: getDefaultInputValue('UnicodeString')
                                };
                            case 'Graph':
                                return {
                                    edges: [],
                                    isDirected: getDefaultInputValue('Boolean'),
                                    isLabeled: getDefaultInputValue('Boolean'),
                                    isWeighted: getDefaultInputValue('Boolean'),
                                    vertices: []
                                };
                            case 'NormalizedRectangle2D':
                                return [
                                    [getDefaultInputValue('Real'), getDefaultInputValue('Real')],
                                    [getDefaultInputValue('Real'), getDefaultInputValue('Real')]
                                ];
                            case 'ImageRegion':
                                return {
                                    area: getDefaultInputValue('NormalizedRectangle2D'),
                                    regionType: getDefaultInputValue('UnicodeString')
                                };
                            case 'ImageWithRegions':
                                return {
                                    imagePath: getDefaultInputValue('Filepath'),
                                    labeledRegions: []
                                };
                            case 'ClickOnImage':
                                return {
                                    clickPosition: [
                                        getDefaultInputValue('Real'), getDefaultInputValue('Real')
                                    ],
                                    clickedRegions: []
                                };
                        }
                    };
                    ctrl.addNewRule = function () {
                        // Build an initial blank set of inputs for the initial rule.
                        var interactionId = ctrl.getCurrentInteractionId();
                        var ruleDescriptions = (INTERACTION_SPECS[interactionId].rule_descriptions);
                        var ruleTypes = Object.keys(ruleDescriptions);
                        if (ruleTypes.length === 0) {
                            // This should never happen. An interaction must have at least
                            // one rule, as verified in a backend test suite:
                            //   extensions.interactions.base_test.InteractionUnitTests.
                            return;
                        }
                        var ruleType = ruleTypes[0];
                        var description = ruleDescriptions[ruleType];
                        var PATTERN = /\{\{\s*(\w+)\s*(\|\s*\w+\s*)?\}\}/;
                        var inputs = {};
                        while (description.match(PATTERN)) {
                            var varName = description.match(PATTERN)[1];
                            var varType = description.match(PATTERN)[2];
                            if (varType) {
                                varType = varType.substring(1);
                            }
                            inputs[varName] = getDefaultInputValue(varType);
                            description = description.replace(PATTERN, ' ');
                        }
                        // Save the state of the rules before adding a new one (in case the
                        // user cancels the addition).
                        ctrl.rulesMemento = angular.copy(ctrl.rules);
                        // TODO(bhenning): Should use functionality in ruleEditor.js, but
                        // move it to ResponsesService in StateResponses.js to properly
                        // form a new rule.
                        ctrl.rules.push(RuleObjectFactory.createNew(ruleType, inputs));
                        ctrl.changeActiveRuleIndex(ctrl.rules.length - 1);
                    };
                    ctrl.deleteRule = function (index) {
                        ctrl.rules.splice(index, 1);
                        ctrl.saveRules();
                        if (ctrl.rules.length === 0) {
                            AlertsService.addWarning('All answer groups must have at least one rule.');
                        }
                    };
                    ctrl.cancelActiveRuleEdit = function () {
                        ctrl.rules.splice(0, ctrl.rules.length);
                        for (var i = 0; i < ctrl.rulesMemento.length; i++) {
                            ctrl.rules.push(ctrl.rulesMemento[i]);
                        }
                        ctrl.saveRules();
                    };
                    ctrl.saveRules = function () {
                        ctrl.changeActiveRuleIndex(-1);
                        ctrl.rulesMemento = null;
                        ctrl.getOnSaveAnswerGroupRulesFn()(ctrl.rules);
                    };
                    ctrl.changeActiveRuleIndex = function (newIndex) {
                        ResponsesService.changeActiveRuleIndex(newIndex);
                        ctrl.activeRuleIndex = ResponsesService.getActiveRuleIndex();
                    };
                    ctrl.openRuleEditor = function (index) {
                        if (!ctrl.isEditable) {
                            // The rule editor may not be opened in a read-only editor view.
                            return;
                        }
                        ctrl.rulesMemento = angular.copy(ctrl.rules);
                        ctrl.changeActiveRuleIndex(index);
                    };
                    ctrl.isRuleEditorOpen = function () {
                        return ctrl.activeRuleIndex !== -1;
                    };
                    ctrl.isCurrentInteractionTrainable = function () {
                        var interactionId = ctrl.getCurrentInteractionId();
                        return INTERACTION_SPECS[interactionId].is_trainable;
                    };
                    ctrl.openTrainingDataEditor = function () {
                        TrainingDataEditorPanelService.openTrainingDataEditor();
                    };
                    ctrl.isMLEnabled = function () {
                        return ENABLE_ML_CLASSIFIERS;
                    };
                    $scope.$on('onInteractionIdChanged', function () {
                        if (ctrl.isRuleEditorOpen()) {
                            ctrl.saveRules();
                        }
                        $scope.$broadcast('updateAnswerGroupInteractionId');
                        ctrl.answerChoices = ctrl.getAnswerChoices();
                    });
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state/hint-editor/hint-editor.directive.ts":
/*!***************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state/hint-editor/hint-editor.directive.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the hint editor.
 */
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-editor.directive.ts");
__webpack_require__(/*! directives/AngularHtmlBindDirective.ts */ "./core/templates/dev/head/directives/AngularHtmlBindDirective.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
__webpack_require__(/*! services/EditabilityService.ts */ "./core/templates/dev/head/services/EditabilityService.ts");
angular.module('hintEditorModule').directive('hintEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                hint: '=',
                getIndexPlusOne: '&indexPlusOne',
                getOnSaveFn: '&onSave',
                showMarkAllAudioAsNeedingUpdateModalIfRequired: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/head/components/state/hint-editor/hint-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', 'EditabilityService', 'StateHintsService',
                function ($scope, EditabilityService, StateHintsService) {
                    var ctrl = this;
                    ctrl.isEditable = EditabilityService.isEditable();
                    ctrl.StateHintsService = StateHintsService;
                    ctrl.editHintForm = {};
                    ctrl.hintEditorIsOpen = false;
                    ctrl.HINT_FORM_SCHEMA = {
                        type: 'html',
                        ui_config: {}
                    };
                    ctrl.hintMemento = null;
                    ctrl.openHintEditor = function () {
                        if (ctrl.isEditable) {
                            ctrl.hintMemento = angular.copy(ctrl.hint);
                            ctrl.hintEditorIsOpen = true;
                        }
                    };
                    ctrl.saveThisHint = function () {
                        ctrl.hintEditorIsOpen = false;
                        var contentHasChanged = (ctrl.hintMemento.hintContent.getHtml() !==
                            ctrl.hint.hintContent.getHtml());
                        ctrl.hintMemento = null;
                        if (contentHasChanged) {
                            var hintContentId = ctrl.hint.hintContent.getContentId();
                            ctrl.showMarkAllAudioAsNeedingUpdateModalIfRequired(hintContentId);
                        }
                        ctrl.getOnSaveFn()();
                    };
                    ctrl.cancelThisHintEdit = function () {
                        ctrl.hint.hintContent =
                            angular.copy(ctrl.hintMemento.hintContent);
                        ctrl.hintMemento = null;
                        ctrl.hintEditorIsOpen = false;
                    };
                    $scope.$on('externalSave', function () {
                        if (ctrl.hintEditorIsOpen &&
                            ctrl.editHintForm.$valid) {
                            ctrl.saveThisHint();
                        }
                    });
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state/outcome-editor/outcome-destination-editor/outcome-destination-editor.directive.ts":
/*!************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state/outcome-editor/outcome-destination-editor/outcome-destination-editor.directive.ts ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directives for the outcome destination editor.
 */
__webpack_require__(/*! components/StateGraphLayoutService.ts */ "./core/templates/dev/head/components/StateGraphLayoutService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/editor-first-time-events.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/editor-first-time-events.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts");
__webpack_require__(/*! services/EditabilityService.ts */ "./core/templates/dev/head/services/EditabilityService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
angular.module('outcomeDestinationEditorModule').directive('outcomeDestinationEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                outcomeHasFeedback: '=',
                outcome: '=',
                addState: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/state/outcome-editor/outcome-destination-editor/' +
                'outcome-destination-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', 'EditorFirstTimeEventsService', 'FocusManagerService',
                'StateEditorService', 'StateGraphLayoutService', 'UserService',
                'EXPLORATION_AND_SKILL_ID_PATTERN', 'PLACEHOLDER_OUTCOME_DEST',
                function ($scope, EditorFirstTimeEventsService, FocusManagerService, StateEditorService, StateGraphLayoutService, UserService, EXPLORATION_AND_SKILL_ID_PATTERN, PLACEHOLDER_OUTCOME_DEST) {
                    var ctrl = this;
                    var currentStateName = null;
                    ctrl.canAddPrerequisiteSkill = (constants.ENABLE_NEW_STRUCTURE_EDITORS &&
                        constants.ENABLE_PREREQUISITE_SKILLS &&
                        StateEditorService.isExplorationWhitelisted());
                    $scope.$on('saveOutcomeDestDetails', function () {
                        // Create new state if specified.
                        if (ctrl.outcome.dest === PLACEHOLDER_OUTCOME_DEST) {
                            EditorFirstTimeEventsService
                                .registerFirstCreateSecondStateEvent();
                            var newStateName = ctrl.outcome.newStateName;
                            ctrl.outcome.dest = newStateName;
                            delete ctrl.outcome.newStateName;
                            ctrl.addState(newStateName);
                        }
                    });
                    ctrl.canEditRefresherExplorationId = null;
                    UserService.getUserInfoAsync().then(function (userInfo) {
                        // We restrict editing of refresher exploration IDs to
                        // admins/moderators for now, since the feature is still in
                        // development.
                        ctrl.canEditRefresherExplorationId = (userInfo.isAdmin() || userInfo.isModerator());
                    });
                    ctrl.explorationAndSkillIdPattern =
                        EXPLORATION_AND_SKILL_ID_PATTERN;
                    ctrl.isSelfLoop = function () {
                        return ctrl.outcome.dest === currentStateName;
                    };
                    ctrl.onDestSelectorChange = function () {
                        if (ctrl.outcome.dest === PLACEHOLDER_OUTCOME_DEST) {
                            FocusManagerService.setFocus('newStateNameInputField');
                        }
                    };
                    ctrl.isCreatingNewState = function (outcome) {
                        return outcome.dest === PLACEHOLDER_OUTCOME_DEST;
                    };
                    ctrl.newStateNamePattern = /^[a-zA-Z0-9.\s-]+$/;
                    ctrl.destChoices = [];
                    $scope.$watch(StateEditorService.getStateNames, function () {
                        currentStateName = StateEditorService.getActiveStateName();
                        var questionModeEnabled = StateEditorService.isInQuestionMode();
                        // This is a list of objects, each with an ID and name. These
                        // represent all states, as well as an option to create a
                        // new state.
                        ctrl.destChoices = [{
                                id: (questionModeEnabled ? null : currentStateName),
                                text: '(try again)'
                            }];
                        // Arrange the remaining states based on their order in the state
                        // graph.
                        var lastComputedArrangement = (StateGraphLayoutService.getLastComputedArrangement());
                        var allStateNames = StateEditorService.getStateNames();
                        // It is possible that lastComputedArrangement is null if the
                        // graph has never been rendered at the time this computation is
                        // being carried out.
                        var stateNames = angular.copy(allStateNames);
                        var stateName = null;
                        if (lastComputedArrangement) {
                            var maxDepth = 0;
                            var maxOffset = 0;
                            for (stateName in lastComputedArrangement) {
                                maxDepth = Math.max(maxDepth, lastComputedArrangement[stateName].depth);
                                maxOffset = Math.max(maxOffset, lastComputedArrangement[stateName].offset);
                            }
                            // Higher scores come later.
                            var allStateScores = {};
                            var unarrangedStateCount = 0;
                            for (var i = 0; i < allStateNames.length; i++) {
                                stateName = allStateNames[i];
                                if (lastComputedArrangement.hasOwnProperty(stateName)) {
                                    allStateScores[stateName] = (lastComputedArrangement[stateName].depth * (maxOffset + 1) +
                                        lastComputedArrangement[stateName].offset);
                                }
                                else {
                                    // States that have just been added in the rule 'create new'
                                    // modal are not yet included as part of
                                    // lastComputedArrangement so we account for them here.
                                    allStateScores[stateName] = ((maxDepth + 1) * (maxOffset + 1) + unarrangedStateCount);
                                    unarrangedStateCount++;
                                }
                            }
                            stateNames = allStateNames.sort(function (a, b) {
                                return allStateScores[a] - allStateScores[b];
                            });
                        }
                        for (var i = 0; i < stateNames.length; i++) {
                            if (stateNames[i] !== currentStateName) {
                                ctrl.destChoices.push({
                                    id: stateNames[i],
                                    text: stateNames[i]
                                });
                            }
                        }
                        if (!questionModeEnabled) {
                            ctrl.destChoices.push({
                                id: PLACEHOLDER_OUTCOME_DEST,
                                text: 'A New Card Called...'
                            });
                        }
                    }, true);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state/outcome-editor/outcome-editor.directive.ts":
/*!*********************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state/outcome-editor/outcome-editor.directive.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directives for the outcome editor.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
angular.module('outcomeEditorModule').directive('outcomeEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                isEditable: '&isEditable',
                displayFeedback: '=',
                getOnSaveDestFn: '&onSaveDest',
                getOnSaveFeedbackFn: '&onSaveFeedback',
                getOnSaveCorrectnessLabelFn: '&onSaveCorrectnessLabel',
                outcome: '=outcome',
                areWarningsSuppressed: '&warningsAreSuppressed',
                addState: '=',
                showMarkAllAudioAsNeedingUpdateModalIfRequired: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/state/outcome-editor/outcome-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', 'StateEditorService', 'StateInteractionIdService',
                'INTERACTION_SPECS',
                function ($scope, StateEditorService, StateInteractionIdService, INTERACTION_SPECS) {
                    var ctrl = this;
                    ctrl.editOutcomeForm = {};
                    ctrl.isInQuestionMode = StateEditorService.isInQuestionMode;
                    ctrl.canAddPrerequisiteSkill =
                        constants.ENABLE_NEW_STRUCTURE_EDITORS &&
                            constants.ENABLE_PREREQUISITE_SKILLS &&
                            StateEditorService.isExplorationWhitelisted();
                    ctrl.feedbackEditorIsOpen = false;
                    ctrl.destinationEditorIsOpen = false;
                    ctrl.correctnessLabelEditorIsOpen = false;
                    // TODO(sll): Investigate whether this line can be removed, due to
                    // ctrl.savedOutcome now being set in onExternalSave().
                    ctrl.savedOutcome = angular.copy(ctrl.outcome);
                    ctrl.getCurrentInteractionId = function () {
                        return StateInteractionIdService.savedMemento;
                    };
                    ctrl.isCorrectnessFeedbackEnabled = function () {
                        return StateEditorService.getCorrectnessFeedbackEnabled();
                    };
                    // This returns false if the current interaction ID is null.
                    ctrl.isCurrentInteractionLinear = function () {
                        var interactionId = ctrl.getCurrentInteractionId();
                        return interactionId && INTERACTION_SPECS[interactionId].is_linear;
                    };
                    var onExternalSave = function () {
                        // The reason for this guard is because, when the editor page for an
                        // exploration is first opened, the 'initializeAnswerGroups' event
                        // (which fires an 'externalSave' event) only fires after the
                        // ctrl.savedOutcome is set above. Until then, ctrl.savedOutcome
                        // is undefined.
                        if (ctrl.savedOutcome === undefined) {
                            ctrl.savedOutcome = angular.copy(ctrl.outcome);
                        }
                        if (ctrl.feedbackEditorIsOpen) {
                            if (ctrl.editOutcomeForm.editFeedbackForm.$valid &&
                                !ctrl.invalidStateAfterFeedbackSave()) {
                                ctrl.saveThisFeedback(false);
                            }
                            else {
                                ctrl.cancelThisFeedbackEdit();
                            }
                        }
                        if (ctrl.destinationEditorIsOpen) {
                            if (ctrl.editOutcomeForm.editDestForm.$valid &&
                                !ctrl.invalidStateAfterDestinationSave()) {
                                ctrl.saveThisDestination();
                            }
                            else {
                                ctrl.cancelThisDestinationEdit();
                            }
                        }
                    };
                    $scope.$on('externalSave', function () {
                        onExternalSave();
                    });
                    $scope.$on('onInteractionIdChanged', function () {
                        onExternalSave();
                    });
                    ctrl.isSelfLoop = function (outcome) {
                        return (outcome &&
                            outcome.dest === StateEditorService.getActiveStateName());
                    };
                    ctrl.getCurrentInteractionId = function () {
                        return StateInteractionIdService.savedMemento;
                    };
                    ctrl.isSelfLoopWithNoFeedback = function (outcome) {
                        if (!outcome) {
                            return false;
                        }
                        return ctrl.isSelfLoop(outcome) &&
                            !outcome.hasNonemptyFeedback();
                    };
                    ctrl.invalidStateAfterFeedbackSave = function () {
                        var tmpOutcome = angular.copy(ctrl.savedOutcome);
                        tmpOutcome.feedback = angular.copy(ctrl.outcome.feedback);
                        return ctrl.isSelfLoopWithNoFeedback(tmpOutcome);
                    };
                    ctrl.invalidStateAfterDestinationSave = function () {
                        var tmpOutcome = angular.copy(ctrl.savedOutcome);
                        tmpOutcome.dest = angular.copy(ctrl.outcome.dest);
                        return ctrl.isSelfLoopWithNoFeedback(tmpOutcome);
                    };
                    ctrl.openFeedbackEditor = function () {
                        if (ctrl.isEditable()) {
                            ctrl.feedbackEditorIsOpen = true;
                        }
                    };
                    ctrl.openDestinationEditor = function () {
                        if (ctrl.isEditable()) {
                            ctrl.destinationEditorIsOpen = true;
                        }
                    };
                    ctrl.saveThisFeedback = function (fromClickSaveFeedbackButton) {
                        $scope.$broadcast('saveOutcomeFeedbackDetails');
                        ctrl.feedbackEditorIsOpen = false;
                        var contentHasChanged = (ctrl.savedOutcome.feedback.getHtml() !==
                            ctrl.outcome.feedback.getHtml());
                        ctrl.savedOutcome.feedback = angular.copy(ctrl.outcome.feedback);
                        var feedbackContentId = ctrl.savedOutcome.feedback.getContentId();
                        if (fromClickSaveFeedbackButton && contentHasChanged) {
                            var contentId = ctrl.savedOutcome.feedback.getContentId();
                            ctrl.showMarkAllAudioAsNeedingUpdateModalIfRequired(contentId);
                        }
                        ctrl.getOnSaveFeedbackFn()(ctrl.savedOutcome);
                    };
                    ctrl.saveThisDestination = function () {
                        $scope.$broadcast('saveOutcomeDestDetails');
                        ctrl.destinationEditorIsOpen = false;
                        ctrl.savedOutcome.dest = angular.copy(ctrl.outcome.dest);
                        if (!ctrl.isSelfLoop(ctrl.outcome)) {
                            ctrl.outcome.refresherExplorationId = null;
                        }
                        ctrl.savedOutcome.refresherExplorationId = (ctrl.outcome.refresherExplorationId);
                        ctrl.savedOutcome.missingPrerequisiteSkillId =
                            ctrl.outcome.missingPrerequisiteSkillId;
                        ctrl.getOnSaveDestFn()(ctrl.savedOutcome);
                    };
                    ctrl.onChangeCorrectnessLabel = function () {
                        ctrl.savedOutcome.labelledAsCorrect = (ctrl.outcome.labelledAsCorrect);
                        ctrl.getOnSaveCorrectnessLabelFn()(ctrl.savedOutcome);
                    };
                    ctrl.cancelThisFeedbackEdit = function () {
                        ctrl.outcome.feedback = angular.copy(ctrl.savedOutcome.feedback);
                        ctrl.feedbackEditorIsOpen = false;
                    };
                    ctrl.cancelThisDestinationEdit = function () {
                        ctrl.outcome.dest = angular.copy(ctrl.savedOutcome.dest);
                        ctrl.outcome.refresherExplorationId = (ctrl.savedOutcome.refresherExplorationId);
                        ctrl.outcome.missingPrerequisiteSkillId =
                            ctrl.savedOutcome.missingPrerequisiteSkillId;
                        ctrl.destinationEditorIsOpen = false;
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state/outcome-editor/outcome-feedback-editor/outcome-feedback-editor.directive.ts":
/*!******************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state/outcome-editor/outcome-feedback-editor/outcome-feedback-editor.directive.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directives for the outcome feedback editor.
 */
__webpack_require__(/*! domain/exploration/SubtitledHtmlObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('outcomeFeedbackEditorModule').directive('outcomeFeedbackEditor', [
    'SubtitledHtmlObjectFactory', 'UrlInterpolationService',
    function (SubtitledHtmlObjectFactory, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                outcome: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/state/outcome-editor/outcome-feedback-editor/' +
                'outcome-feedback-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.OUTCOME_FEEDBACK_SCHEMA = {
                        type: 'html'
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state/response-header/response-header.directive.ts":
/*!***********************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state/response-header/response-header.directive.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the header of the response tiles.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
__webpack_require__(/*! services/EditabilityService.ts */ "./core/templates/dev/head/services/EditabilityService.ts");
angular.module('responseHeaderModule').directive('responseHeader', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getIndex: '&index',
                getOutcome: '&outcome',
                getSummary: '&summary',
                getShortSummary: '&shortSummary',
                isActive: '&isActive',
                getOnDeleteFn: '&onDeleteFn',
                getNumRules: '&numRules',
                isResponse: '&isResponse',
                showWarning: '&showWarning',
                navigateToState: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/state/response-header/response-header.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                'EditabilityService', 'StateEditorService',
                'PLACEHOLDER_OUTCOME_DEST',
                'StateInteractionIdService', 'INTERACTION_SPECS',
                function (EditabilityService, StateEditorService, PLACEHOLDER_OUTCOME_DEST, StateInteractionIdService, INTERACTION_SPECS) {
                    var ctrl = this;
                    ctrl.EditabilityService = EditabilityService;
                    ctrl.isInQuestionMode = StateEditorService.isInQuestionMode;
                    ctrl.getCurrentInteractionId = function () {
                        return StateInteractionIdService.savedMemento;
                    };
                    ctrl.isCorrectnessFeedbackEnabled = function () {
                        return StateEditorService.getCorrectnessFeedbackEnabled();
                    };
                    // This returns false if the current interaction ID is null.
                    ctrl.isCurrentInteractionLinear = function () {
                        var interactionId = ctrl.getCurrentInteractionId();
                        return interactionId && INTERACTION_SPECS[interactionId].is_linear;
                    };
                    ctrl.isCorrect = function () {
                        return ctrl.getOutcome() && ctrl.getOutcome().labelledAsCorrect;
                    };
                    ctrl.isOutcomeLooping = function () {
                        var outcome = ctrl.getOutcome();
                        var activeStateName = StateEditorService.getActiveStateName();
                        return outcome && (outcome.dest === activeStateName);
                    };
                    ctrl.isCreatingNewState = function () {
                        var outcome = ctrl.getOutcome();
                        return outcome && outcome.dest === PLACEHOLDER_OUTCOME_DEST;
                    };
                    ctrl.deleteResponse = function (evt) {
                        ctrl.getOnDeleteFn()(ctrl.getIndex(), evt);
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state/rule-editor/rule-editor.directive.ts":
/*!***************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state/rule-editor/rule-editor.directive.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the rule editor.
 */
__webpack_require__(/*! filters/string-utility-filters/truncate.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate.filter.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
__webpack_require__(/*! services/ValidatorsService.ts */ "./core/templates/dev/head/services/ValidatorsService.ts");
// This directive controls an editor for selecting the type and input parameters
// to a rule. It also includes 'Cancel' and 'Save Answer' buttons which call
// respective 'onCancelRuleEdit' and 'onSaveRule' callbacks when called. These
// buttons only show up if 'isEditingRuleInline' is true.
angular.module('ruleEditorModule').directive('ruleEditor', [
    '$log', 'UrlInterpolationService', function ($log, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                isEditable: '=',
                isEditingRuleInline: '&',
                onCancelRuleEdit: '&',
                onSaveRule: '&',
                rule: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/state/rule-editor/rule-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$timeout', 'StateEditorService',
                'ValidatorsService', 'INTERACTION_SPECS',
                'ResponsesService', 'StateInteractionIdService',
                function ($scope, $timeout, StateEditorService, ValidatorsService, INTERACTION_SPECS, ResponsesService, StateInteractionIdService) {
                    var ctrl = this;
                    var DEFAULT_OBJECT_VALUES = GLOBALS.DEFAULT_OBJECT_VALUES;
                    ctrl.currentInteractionId = StateInteractionIdService.savedMemento;
                    ctrl.editRuleForm = {};
                    // This returns the rule description string.
                    var computeRuleDescriptionFragments = function () {
                        if (!ctrl.rule.type) {
                            ctrl.ruleDescriptionFragments = [];
                            return '';
                        }
                        var ruleDescription = (INTERACTION_SPECS[ctrl.currentInteractionId].rule_descriptions[ctrl.rule.type]);
                        var PATTERN = /\{\{\s*(\w+)\s*\|\s*(\w+)\s*\}\}/;
                        var finalInputArray = ruleDescription.split(PATTERN);
                        if (finalInputArray.length % 3 !== 1) {
                            $log.error('Could not process rule description.');
                        }
                        var result = [];
                        for (var i = 0; i < finalInputArray.length; i += 3) {
                            result.push({
                                // Omit the leading noneditable string.
                                text: i !== 0 ? finalInputArray[i] : '',
                                type: 'noneditable'
                            });
                            if (i === finalInputArray.length - 1) {
                                break;
                            }
                            var answerChoices = ResponsesService.getAnswerChoices();
                            if (answerChoices) {
                                // This rule is for a multiple-choice, image-click, or item
                                // selection interaction.
                                // TODO(sll): Remove the need for this special case.
                                if (answerChoices.length > 0) {
                                    if (finalInputArray[2] === 'SetOfHtmlString') {
                                        ctrl.ruleDescriptionChoices = answerChoices.map(function (choice) {
                                            return {
                                                id: choice.label,
                                                val: choice.label
                                            };
                                        });
                                        result.push({
                                            type: 'checkboxes',
                                            varName: finalInputArray[i + 1]
                                        });
                                    }
                                    else if (finalInputArray[2] === 'ListOfSetsOfHtmlStrings') {
                                        ctrl.ruleDescriptionChoices = answerChoices.map(function (choice) {
                                            return {
                                                id: choice.label,
                                                val: choice.label
                                            };
                                        });
                                        result.push({
                                            type: 'dropdown',
                                            varName: finalInputArray[i + 1]
                                        });
                                    }
                                    else if (finalInputArray[i + 2] === 'DragAndDropHtmlString') {
                                        ctrl.ruleDescriptionChoices = answerChoices.map(function (choice) {
                                            return {
                                                id: choice.label,
                                                val: choice.label
                                            };
                                        });
                                        result.push({
                                            type: 'dragAndDropHtmlStringSelect',
                                            varName: finalInputArray[i + 1]
                                        });
                                    }
                                    else if (finalInputArray[i + 2] === 'DragAndDropPositiveInt') {
                                        ctrl.ruleDescriptionChoices = answerChoices.map(function (choice) {
                                            return {
                                                id: choice.label,
                                                val: choice.label
                                            };
                                        });
                                        result.push({
                                            type: 'dragAndDropPositiveIntSelect',
                                            varName: finalInputArray[i + 1]
                                        });
                                    }
                                    else {
                                        ctrl.ruleDescriptionChoices = answerChoices.map(function (choice) {
                                            return {
                                                id: choice.val,
                                                val: choice.label
                                            };
                                        });
                                        result.push({
                                            type: 'select',
                                            varName: finalInputArray[i + 1]
                                        });
                                        if (!ctrl.rule.inputs[finalInputArray[i + 1]]) {
                                            ctrl.rule.inputs[finalInputArray[i + 1]] = (ctrl.ruleDescriptionChoices[0].id);
                                        }
                                    }
                                }
                                else {
                                    ctrl.ruleDescriptionChoices = [];
                                    result.push({
                                        text: ' [Error: No choices available] ',
                                        type: 'noneditable'
                                    });
                                }
                            }
                            else {
                                result.push({
                                    type: finalInputArray[i + 2],
                                    varName: finalInputArray[i + 1]
                                });
                            }
                        }
                        // The following is necessary in order to ensure that the
                        // object-editor HTML tags load correctly when the rule type is
                        // changed. This is an issue for, e.g., the MusicNotesInput
                        // interaction, where the rule inputs can sometimes be integers and
                        // sometimes be lists of music notes.
                        ctrl.ruleDescriptionFragments = [];
                        $timeout(function () {
                            ctrl.ruleDescriptionFragments = result;
                        }, 10);
                        return ruleDescription;
                    };
                    $scope.$on('updateAnswerGroupInteractionId', function (evt, newInteractionId) {
                        ctrl.currentInteractionId = newInteractionId;
                    });
                    ctrl.onSelectNewRuleType = function (newRuleType) {
                        var oldRuleInputs = angular.copy(ctrl.rule.inputs) || {};
                        var oldRuleInputTypes = angular.copy(ctrl.rule.inputTypes) || {};
                        ctrl.rule.type = newRuleType;
                        ctrl.rule.inputs = {};
                        ctrl.rule.inputTypes = {};
                        var tmpRuleDescription = computeRuleDescriptionFragments();
                        // This provides the list of choices for the multiple-choice and
                        // image-click interactions.
                        var answerChoices = ResponsesService.getAnswerChoices();
                        // Finds the parameters and sets them in ctrl.rule.inputs.
                        var PATTERN = /\{\{\s*(\w+)\s*(\|\s*\w+\s*)?\}\}/;
                        while (true) {
                            if (!tmpRuleDescription.match(PATTERN)) {
                                break;
                            }
                            var varName = tmpRuleDescription.match(PATTERN)[1];
                            var varType = null;
                            if (tmpRuleDescription.match(PATTERN)[2]) {
                                varType = tmpRuleDescription.match(PATTERN)[2].substring(1);
                            }
                            ctrl.rule.inputTypes[varName] = varType;
                            // TODO(sll): Find a more robust way of doing this. For example,
                            // we could associate a particular varName with answerChoices
                            // depending on the interaction. This varName would take its
                            // default value from answerChoices, but other variables would
                            // take their default values from the DEFAULT_OBJECT_VALUES dict.
                            if (angular.equals(DEFAULT_OBJECT_VALUES[varType], [])) {
                                ctrl.rule.inputs[varName] = [];
                            }
                            else if (answerChoices) {
                                ctrl.rule.inputs[varName] = angular.copy(answerChoices[0].val);
                            }
                            else {
                                ctrl.rule.inputs[varName] = DEFAULT_OBJECT_VALUES[varType];
                            }
                            tmpRuleDescription = tmpRuleDescription.replace(PATTERN, ' ');
                        }
                        for (var key in ctrl.rule.inputs) {
                            if (oldRuleInputs.hasOwnProperty(key) &&
                                oldRuleInputTypes[key] === ctrl.rule.inputTypes[key]) {
                                ctrl.rule.inputs[key] = oldRuleInputs[key];
                            }
                        }
                    };
                    ctrl.cancelThisEdit = function () {
                        ctrl.onCancelRuleEdit();
                    };
                    ctrl.saveThisRule = function () {
                        ctrl.onSaveRule();
                    };
                    ctrl.init = function () {
                        // Select a default rule type, if one isn't already selected.
                        if (ctrl.rule.type === null) {
                            ctrl.onSelectNewRuleType(ctrl.rule.type);
                        }
                        computeRuleDescriptionFragments();
                    };
                    ctrl.init();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state/rule-type-selector/rule-type-selector.directive.ts":
/*!*****************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state/rule-type-selector/rule-type-selector.directive.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the rule type selector.
 */
__webpack_require__(/*! filters/string-utility-filters/replace-inputs-with-ellipses.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/replace-inputs-with-ellipses.filter.ts");
__webpack_require__(/*! filters/string-utility-filters/truncate-at-first-ellipsis.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-ellipsis.filter.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
angular.module('ruleTypeSelectorModule').directive('ruleTypeSelector', [function () {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                localValue: '@',
                onSelectionChange: '&'
            },
            template: '<select></select>',
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$element', '$rootScope', '$filter',
                'StateInteractionIdService', 'INTERACTION_SPECS',
                function ($scope, $element, $rootScope, $filter, StateInteractionIdService, INTERACTION_SPECS) {
                    var ctrl = this;
                    var choices = [];
                    var numberOfRuleTypes = 0;
                    var ruleTypesToDescriptions = INTERACTION_SPECS[StateInteractionIdService.savedMemento].rule_descriptions;
                    for (var ruleType in ruleTypesToDescriptions) {
                        numberOfRuleTypes++;
                        choices.push({
                            id: ruleType,
                            text: $filter('replaceInputsWithEllipses')(ruleTypesToDescriptions[ruleType])
                        });
                    }
                    // TODO(bhenning): The order of choices should be meaningful. E.g.,
                    // having "is equal to" for most interactions first makes sense. They
                    // should ideally be ordered based on likelihood of being used.
                    choices.sort(function (a, b) {
                        if (a.text < b.text) {
                            return -1;
                        }
                        else if (a.text > b.text) {
                            return 1;
                        }
                        else {
                            return 0;
                        }
                    });
                    var select2Node = $element[0].firstChild;
                    $(select2Node).select2({
                        allowClear: false,
                        data: choices,
                        // Suppress the search box.
                        minimumResultsForSearch: -1,
                        width: '350px',
                        dropdownParent: $('.rule-parent'),
                        templateSelection: function (object) {
                            return $filter('truncateAtFirstEllipsis')(object.text);
                        }
                    });
                    // Select the first choice by default.
                    if (!ctrl.localValue) {
                        ctrl.localValue = choices[0].id;
                        ctrl.onSelectionChange()(ctrl.localValue);
                    }
                    // Initialize the dropdown.
                    $(select2Node).val(ctrl.localValue).trigger('change');
                    $(select2Node).on('change', function (e) {
                        ctrl.onSelectionChange()($(select2Node).val());
                        // This is needed to propagate the change and display input fields
                        // for parameterizing the rule. Otherwise, the input fields do not
                        // get updated when the rule type is changed.
                        $scope.$apply();
                    });
                }
            ]
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/components/state/solution-editor/solution-editor.directive.ts":
/*!***********************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state/solution-editor/solution-editor.directive.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the solution editor.
 */
__webpack_require__(/*! components/state/solution-editor/solution-explanation-editor/solution-explanation-editor.directive.ts */ "./core/templates/dev/head/components/state/solution-editor/solution-explanation-editor/solution-explanation-editor.directive.ts");
__webpack_require__(/*! directives/AngularHtmlBindDirective.ts */ "./core/templates/dev/head/directives/AngularHtmlBindDirective.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! domain/exploration/SolutionObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/SolutionObjectFactory.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-verification/solution-verification.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-verification/solution-verification.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
angular.module('solutionEditorModule').directive('solutionEditor', [
    '$uibModal', 'AlertsService', 'ContextService',
    'ExplorationHtmlFormatterService', 'SolutionObjectFactory',
    'SolutionVerificationService', 'StateCustomizationArgsService',
    'StateEditorService', 'StateInteractionIdService',
    'StateSolutionService', 'UrlInterpolationService',
    function ($uibModal, AlertsService, ContextService, ExplorationHtmlFormatterService, SolutionObjectFactory, SolutionVerificationService, StateCustomizationArgsService, StateEditorService, StateInteractionIdService, StateSolutionService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getInteractionId: '&interactionId',
                onSaveSolution: '=',
                correctAnswerEditorHtml: '=',
                onOpenSolutionEditor: '&',
                showMarkAllAudioAsNeedingUpdateModalIfRequired: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/state/solution_editor_directive.html'),
            controllerAs: '$ctrl',
            controller: [
                'StateSolutionService',
                function (StateSolutionService) {
                    var ctrl = this;
                    ctrl.StateSolutionService = StateSolutionService;
                    ctrl.EXPLANATION_FORM_SCHEMA = {
                        type: 'html',
                        ui_config: {}
                    };
                    ctrl.getAnswerHtml = function () {
                        return ExplorationHtmlFormatterService.getAnswerHtml(StateSolutionService.savedMemento.correctAnswer, StateInteractionIdService.savedMemento, StateCustomizationArgsService.savedMemento);
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state/solution-editor/solution-explanation-editor/solution-explanation-editor.directive.ts":
/*!***************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state/solution-editor/solution-explanation-editor/solution-explanation-editor.directive.ts ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the solution explanation editor.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
__webpack_require__(/*! services/EditabilityService.ts */ "./core/templates/dev/head/services/EditabilityService.ts");
angular.module('solutionExplanationEditorModule').directive('solutionExplanationEditor', [
    'StateSolutionService', 'UrlInterpolationService',
    function (StateSolutionService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                onSaveSolution: '=',
                showMarkAllAudioAsNeedingUpdateModalIfRequired: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/state/solution-editor/solution-explanation-editor/' +
                'solution-explanation-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', 'EditabilityService', 'StateSolutionService',
                function ($scope, EditabilityService, StateSolutionService) {
                    var ctrl = this;
                    ctrl.isEditable = EditabilityService.isEditable();
                    ctrl.editSolutionForm = {};
                    ctrl.explanationEditorIsOpen = false;
                    ctrl.StateSolutionService = StateSolutionService;
                    ctrl.EXPLANATION_FORM_SCHEMA = {
                        type: 'html',
                        ui_config: {}
                    };
                    ctrl.openExplanationEditor = function () {
                        if (ctrl.isEditable) {
                            ctrl.explanationEditorIsOpen = true;
                        }
                    };
                    ctrl.saveThisExplanation = function () {
                        var contentHasChanged = (StateSolutionService.displayed.explanation.getHtml() !==
                            StateSolutionService.savedMemento.explanation.getHtml());
                        if (contentHasChanged) {
                            var solutionContentId = StateSolutionService.displayed
                                .explanation
                                .getContentId();
                            ctrl.showMarkAllAudioAsNeedingUpdateModalIfRequired(solutionContentId);
                        }
                        StateSolutionService.saveDisplayedValue();
                        ctrl.onSaveSolution(StateSolutionService.displayed);
                        ctrl.explanationEditorIsOpen = false;
                    };
                    ctrl.cancelThisExplanationEdit = function () {
                        ctrl.explanationEditorIsOpen = false;
                    };
                    $scope.$on('externalSave', function () {
                        if (ctrl.explanationEditorIsOpen &&
                            ctrl.editSolutionForm.$valid) {
                            ctrl.saveThisExplanation();
                        }
                    });
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/collection/GuestCollectionProgressObjectFactory.ts":
/*!*******************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/collection/GuestCollectionProgressObjectFactory.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating and mutating a domain object which
 * represents the progress of a guest playing through a collection.
 */
oppia.factory('GuestCollectionProgressObjectFactory', [
    function () {
        var GuestCollectionProgress = function (completedExplorationsMap) {
            this._completedExplorationsMap = completedExplorationsMap;
        };
        // Instance methods
        // Returns whether the guest has made any progress towards completing the
        // specified collection ID. Note that this does not account for whether the
        // completed explorations are still contained within that collection.
        GuestCollectionProgress.prototype.hasCompletionProgress = function (collectionId) {
            return this._completedExplorationsMap.hasOwnProperty(collectionId);
        };
        // Returns an array of exploration IDs which have been completed by the
        // specified collection ID, or empty if none have.
        GuestCollectionProgress.prototype.getCompletedExplorationIds = function (collectionId) {
            if (!this.hasCompletionProgress(collectionId)) {
                return [];
            }
            return angular.copy(this._completedExplorationsMap[collectionId]);
        };
        // Specifies that a specific exploration ID has been completed in the
        // context of the specified collection. Returns whether that exploration ID
        // was not previously registered as completed for the collection.
        GuestCollectionProgress.prototype.addCompletedExplorationId = function (collectionId, explorationId) {
            var completedExplorationIds = this.getCompletedExplorationIds(collectionId);
            if (completedExplorationIds.indexOf(explorationId) === -1) {
                completedExplorationIds.push(explorationId);
                this._completedExplorationsMap[collectionId] = completedExplorationIds;
                return true;
            }
            return false;
        };
        // Converts this object to JSON for storage.
        GuestCollectionProgress.prototype.toJson = function (collectionId, explorationIds) {
            return JSON.stringify(this._completedExplorationsMap);
        };
        // Static class methods. Note that "this" is not available in static
        // contexts.
        // This function takes a JSON string which represents a raw collection
        // object and returns a new GuestCollectionProgress domain object. A null or
        // undefined string indicates that an empty progress object should be
        // created.
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        GuestCollectionProgress['createFromJson'] = function (
        /* eslint-enable dot-notation */
        collectionProgressJson) {
            if (collectionProgressJson) {
                return new GuestCollectionProgress(JSON.parse(collectionProgressJson));
            }
            else {
                return new GuestCollectionProgress({});
            }
        };
        return GuestCollectionProgress;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/collection/GuestCollectionProgressService.ts":
/*!*************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/collection/GuestCollectionProgressService.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service that records progress guests make during a collection
 * playthrough. Note that this service does not currently support saving a
 * user's progress when they create an account.
 */
// TODO(bhenning): Move this to a service which stores shared state across the
// frontend in a way that can be persisted in the backend upon account
// creation, such as exploration progress.
// TODO(bhenning): This should be reset upon login, otherwise the progress will
// be different depending on the user's logged in/logged out state.
__webpack_require__(/*! domain/collection/GuestCollectionProgressObjectFactory.ts */ "./core/templates/dev/head/domain/collection/GuestCollectionProgressObjectFactory.ts");
oppia.factory('GuestCollectionProgressService', [
    '$window', 'GuestCollectionProgressObjectFactory',
    function ($window, GuestCollectionProgressObjectFactory) {
        var COLLECTION_STORAGE_KEY = 'collectionProgressStore_v1';
        var storeGuestCollectionProgress = function (guestCollectionProgress) {
            $window.localStorage[COLLECTION_STORAGE_KEY] = (guestCollectionProgress.toJson());
        };
        var loadGuestCollectionProgress = function () {
            return GuestCollectionProgressObjectFactory.createFromJson($window.localStorage[COLLECTION_STORAGE_KEY]);
        };
        var recordCompletedExploration = function (collectionId, explorationId) {
            var guestCollectionProgress = loadGuestCollectionProgress();
            var completedExplorationIdHasBeenAdded = (guestCollectionProgress.addCompletedExplorationId(collectionId, explorationId));
            if (completedExplorationIdHasBeenAdded) {
                storeGuestCollectionProgress(guestCollectionProgress);
            }
        };
        var getValidCompletedExplorationIds = function (collection) {
            var collectionId = collection.getId();
            var guestCollectionProgress = loadGuestCollectionProgress();
            var completedExplorationIds = (guestCollectionProgress.getCompletedExplorationIds(collectionId));
            // Filter the exploration IDs by whether they are contained within the
            // specified collection structure.
            return completedExplorationIds.filter(function (expId) {
                return collection.containsCollectionNode(expId);
            });
        };
        // This method corresponds to collection_domain.get_next_exploration_id.
        var _getNextExplorationId = function (collection, completedIds) {
            var explorationIds = collection.getExplorationIds();
            for (var i = 0; i < explorationIds.length; i++) {
                if (completedIds.indexOf(explorationIds[i]) === -1) {
                    return explorationIds[i];
                }
            }
            return null;
        };
        return {
            /**
             * Records that the specified exploration was completed in the context of
             * the specified collection, as a guest.
             */
            recordExplorationCompletedInCollection: function (collectionId, explorationId) {
                recordCompletedExploration(collectionId, explorationId);
            },
            /**
             * Returns whether the guest user has made any progress toward completing
             * the specified collection by completing at least one exploration related
             * to the collection. Note that this does not account for any completed
             * explorations which are no longer referenced by the collection;
             * getCompletedExplorationIds() should be used for that, instead.
             */
            hasCompletedSomeExploration: function (collectionId) {
                var guestCollectionProgress = loadGuestCollectionProgress();
                return guestCollectionProgress.hasCompletionProgress(collectionId);
            },
            /**
             * Given a collection object, returns the list of exploration IDs
             * completed by the guest user. The return list of exploration IDs will
             * not include any previously completed explorations for the given
             * collection that are no longer part of the collection.
             */
            getCompletedExplorationIds: function (collection) {
                return getValidCompletedExplorationIds(collection);
            },
            /**
             * Given a collection object a list of completed exploration IDs, returns
             * the next exploration ID the guest user can play as part of
             * completing the collection. If this method returns null, the
             * guest has completed the collection.
             */
            getNextExplorationId: function (collection, completedExplorationIds) {
                return _getNextExplorationId(collection, completedExplorationIds);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/editor/undo_redo/QuestionUndoRedoService.ts":
/*!************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/editor/undo_redo/QuestionUndoRedoService.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service which maintains a stack of changes to a Question
 * domain object.
 */
oppia.factory('QuestionUndoRedoService', [
    'BaseUndoRedoService', function (BaseUndoRedoService) {
        var child = Object.create(BaseUndoRedoService);
        child.init();
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/AnswerStatsObjectFactory.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/AnswerStatsObjectFactory.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for domain object which holds the statistics of a
 * particular answer from some particular state.
 */
oppia.factory('AnswerStatsObjectFactory', [function () {
        /**
         * @constructor
         * @param {*} answer - raw answer object.
         * @param {string} answerHtml - answer as renderable HTML.
         * @param {number} frequency - frequency at which the answer appears.
         * @param {boolean} isAddressed - whether this answer is addressed by the
         *    associated state's answer groups.
         */
        var AnswerStats = function (answer, answerHtml, frequency, isAddressed) {
            /** @type {*} */
            this.answer = angular.copy(answer);
            /** @type {string} */
            this.answerHtml = answerHtml;
            /** @type {number} */
            this.frequency = frequency;
            /** @type {boolean} */
            this.isAddressed = isAddressed;
        };
        /** @returns {answer, frequency: number} */
        AnswerStats.prototype.toBackendDict = function () {
            return {
                answer: angular.copy(this.answer),
                frequency: this.frequency
            };
        };
        /**
         * Returns a stale instance; specifically, {@link AnswerStats.isAddressed}
         * will always be false.
         * Use {@link StateTopAnswerStatsService#refreshStateStats} to keep these
         * instances fresh.
         *
         * @param {{answer, frequency: number}} backendDict
         * @returns {AnswerStats}
         */
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        AnswerStats['createFromBackendDict'] = function (backendDict) {
            /* eslint-enable dot-notation */
            // TODO(brianrodri): Use a proper service which takes the state's
            // interaction type into account for generating the answer's HTML.
            var answerHtml = (typeof backendDict.answer === 'string') ?
                backendDict.answer : angular.toJson(backendDict.answer);
            return new AnswerStats(backendDict.answer, answerHtml, backendDict.frequency, false);
        };
        return AnswerStats;
    }]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ExplorationDraftObjectFactory.ts":
/*!*************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ExplorationDraftObjectFactory.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating instances of ExplorationDraft
 * domain objects.
 */
oppia.factory('ExplorationDraftObjectFactory', [
    function () {
        var ExplorationDraft = function (draftChanges, draftChangeListId) {
            this.draftChanges = draftChanges;
            this.draftChangeListId = draftChangeListId;
        };
        /**
         * Checks whether the draft object has been overwritten by another
         * draft which has been committed to the back-end. If the supplied draft id
         * has a different value then a newer changeList must have been committed
         * to the back-end.
         * @param {Integer} - currentDraftId. The id of the draft changes whch was
         *  retrieved from the back-end.
         * @returns {Boolean} - True iff the currentDraftId is the same as the
         * draftChangeListId corresponding to this draft.
         */
        ExplorationDraft.prototype.isValid = function (currentDraftId) {
            return (currentDraftId === this.draftChangeListId);
        };
        ExplorationDraft.prototype.getChanges = function () {
            return this.draftChanges;
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ExplorationDraft['createFromLocalStorageDict'] = function (
        /* eslint-enable dot-notation */
        explorationDraftDict) {
            return new ExplorationDraft(explorationDraftDict.draftChanges, explorationDraftDict.draftChangeListId);
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ExplorationDraft['toLocalStorageDict'] = function (
        /* eslint-enable dot-notation */
        changeList, draftChangeListId) {
            return {
                draftChanges: changeList,
                draftChangeListId: draftChangeListId
            };
        };
        return ExplorationDraft;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ParamMetadataObjectFactory.ts":
/*!**********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ParamMetadataObjectFactory.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of ParamMetadata
 * domain objects.
 */
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/parameter-metadata.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/parameter-metadata.service.ts");
oppia.factory('ParamMetadataObjectFactory', [
    'PARAM_ACTION_GET', 'PARAM_ACTION_SET',
    function (PARAM_ACTION_GET, PARAM_ACTION_SET) {
        /**
         * @private @constructor
         * Provide metadata when a parameter is changed by a GET or SET action
         * @param {String} action - set or get
         * @param {String} paramName - parameter's name
         * @param {String} source - location where the parameter was defined
         * e.g. answer, content, feedback or param_changes (changing value of param)
         * @param {String} sourceInd - index of this parameter in a set of changes
         */
        var ParamMetadata = function (action, paramName, source, sourceInd) {
            this.action = action;
            this.paramName = paramName;
            this.source = source;
            this.sourceInd = sourceInd;
        };
        /**
         * Metadata about the SET action of a parameter
         * @param {String} paramName - parameter's name
         * @param {String} source - location where the parameter was defined
         * e.g. answer, content, feedback or param_changes (changing value of param)
         * @param {String} sourceInd - index of this parameter in a set of changes
         * @returns {ParamMetadata} - A new ParamMetadata instance
         */
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ParamMetadata['createWithSetAction'] = function (
        /* eslint-enable dot-notation */
        paramName, source, sourceInd) {
            return new ParamMetadata(PARAM_ACTION_SET, paramName, source, sourceInd);
        };
        /**
         * Metadata about the GET action of a parameter
         * @param {String} paramName - parameter's name
         * @param {String} source - location where the parameter was defined
         * e.g. answer, content, feedback or param_changes (changing value of param)
         * @param {String} sourceInd - index of this parameter in a set of changes
         * @returns {ParamMetadata} - A new ParamMetadata instance
         */
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ParamMetadata['createWithGetAction'] = function (
        /* eslint-enable dot-notation */
        paramName, source, sourceInd) {
            return new ParamMetadata(PARAM_ACTION_GET, paramName, source, sourceInd);
        };
        return ParamMetadata;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ParamSpecObjectFactory.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ParamSpecObjectFactory.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of ParamSpec
 * domain objects.
 */
__webpack_require__(/*! domain/exploration/ParamTypeObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ParamTypeObjectFactory.ts");
oppia.factory('ParamSpecObjectFactory', [
    'ParamTypeObjectFactory',
    function (ParamTypeObjectFactory) {
        /**
         * @constructor
         * @param {!ParamType} objType - The type of the parameter.
         */
        var ParamSpec = function (objType) {
            /** @member {ParamType} */
            this._objType = objType;
        };
        /** @returns {ParamType} - The type name of the parameter. */
        ParamSpec.prototype.getType = function () {
            return this._objType;
        };
        /** @returns {{obj_type: String}} - Basic dict for backend consumption. */
        ParamSpec.prototype.toBackendDict = function () {
            return {
                obj_type: this._objType.getName(),
            };
        };
        /**
         * @param {!{obj_type: String}} paramSpecBackendDict - Basic dict from
         *    backend.
         * @returns {ParamSpec} - A new ParamSpec instance.
         */
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ParamSpec['createFromBackendDict'] = function (paramSpecBackendDict) {
            /* eslint-enable dot-notation */
            return new ParamSpec(ParamTypeObjectFactory.getTypeFromBackendName(paramSpecBackendDict.obj_type));
        };
        /** @returns {ParamSpec} - A default instance for ParamSpec. */
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ParamSpec['createDefault'] = function () {
            /* eslint-enable dot-notation */
            return new ParamSpec(ParamTypeObjectFactory.getDefaultType());
        };
        return ParamSpec;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ParamTypeObjectFactory.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ParamTypeObjectFactory.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of ParamType
 * domain objects.
 */
oppia.factory('ParamTypeObjectFactory', [function () {
        /**
         * @private @constructor
         * Defines a specific type that a parameter can take.
         *
         * IMPORTANT: All new types must be created in this file and registered in the
         * {@link ParamType.registry}. See {@link ParamType.registry.UnicodeString}
         * for an example.
         *
         * @param {Function.<?, Boolean>} validateFunction - Returns true when a value
         *    is valid.
         * @param {?} defaultValue - simple value any parameter of this type can take.
         */
        var ParamType = function (typeDefinitionObject) {
            if (!typeDefinitionObject.validate(typeDefinitionObject.default_value)) {
                throw new Error('The default value is invalid according to validation function');
            }
            /** @member {String} */
            this._name = null;
            /** @member {Function.<?, Boolean>} */
            this.valueIsValid = typeDefinitionObject.validate;
            /** @member {?} */
            this.defaultValue = typeDefinitionObject.default_value;
        };
        // Instance methods.
        /** @returns {?} - A valid default value for this particular type. */
        ParamType.prototype.createDefaultValue = function () {
            return angular.copy(this.defaultValue);
        };
        /** @returns {String} - The display-name of this type. */
        ParamType.prototype.getName = function () {
            return this._name;
        };
        // Class methods.
        /**
         * @param {String} backendName - the name of the type to fetch.
         * @returns {ParamType} - The associated type, if any.
         * @throws {Error} - When the given type name isn't registered.
         */
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ParamType['getTypeFromBackendName'] = function (backendName) {
            /* eslint-enable dot-notation */
            // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
            /* eslint-disable dot-notation */
            if (!ParamType['registry'].hasOwnProperty(backendName)) {
                /* eslint-enable dot-notation */
                throw new Error(backendName + ' is not a registered parameter type.');
            }
            // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
            /* eslint-disable dot-notation */
            return ParamType['registry'][backendName];
            /* eslint-enable dot-notation */
        };
        /** @returns {ParamType} - Implementation-defined default parameter type. */
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ParamType['getDefaultType'] = function () {
            /* eslint-enable dot-notation */
            // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
            /* eslint-disable dot-notation */
            return ParamType['registry'].UnicodeString;
            /* eslint-enable dot-notation */
        };
        // Type registration.
        /** @type {Object.<String, ParamType>} */
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ParamType['registry'] = {
            /* eslint-enable dot-notation */
            UnicodeString: new ParamType({
                validate: function (value) {
                    return (typeof value === 'string' || value instanceof String);
                },
                default_value: ''
            })
        };
        // To finalize type registration, we encode the name of each type into their
        // definition, then freeze them from modifications.
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Object.keys(ParamType['registry']).forEach(function (paramTypeName) {
            /* eslint-enable dot-notation */
            // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
            /* eslint-disable dot-notation */
            var paramType = ParamType['registry'][paramTypeName];
            /* eslint-enable dot-notation */
            paramType._name = paramTypeName;
            Object.freeze(paramType);
        });
        // Finally, we freeze the registry itself.
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Object.freeze(ParamType['registry']);
        /* eslint-enable dot-notation */
        return ParamType;
    }]);


/***/ }),

/***/ "./core/templates/dev/head/domain/question/EditableQuestionBackendApiService.ts":
/*!**************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/question/EditableQuestionBackendApiService.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to send and receive changes to a question in the
 *  backend.
 */
__webpack_require__(/*! domain/collection/GuestCollectionProgressService.ts */ "./core/templates/dev/head/domain/collection/GuestCollectionProgressService.ts");
__webpack_require__(/*! domain/exploration/AnswerGroupObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/AnswerGroupObjectFactory.ts");
__webpack_require__(/*! domain/exploration/AudioTranslationObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/AudioTranslationObjectFactory.ts");
__webpack_require__(/*! domain/exploration/HintObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/HintObjectFactory.ts");
__webpack_require__(/*! domain/exploration/OutcomeObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/OutcomeObjectFactory.ts");
__webpack_require__(/*! domain/exploration/ParamSpecObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ParamSpecObjectFactory.ts");
__webpack_require__(/*! domain/exploration/WrittenTranslationObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/WrittenTranslationObjectFactory.ts");
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
oppia.constant('EDITABLE_QUESTION_DATA_URL_TEMPLATE', '/question_editor_handler/data/<question_id>');
oppia.constant('QUESTION_CREATION_URL', '/question_editor_handler/create_new/<skill_id>');
oppia.constant('QUESTION_SKILL_LINK_URL_TEMPLATE', '/manage_question_skill_link/<question_id>/<skill_id>');
oppia.factory('EditableQuestionBackendApiService', [
    '$http', '$q', 'UrlInterpolationService',
    'EDITABLE_QUESTION_DATA_URL_TEMPLATE', 'QUESTION_CREATION_URL',
    'QUESTION_SKILL_LINK_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, EDITABLE_QUESTION_DATA_URL_TEMPLATE, QUESTION_CREATION_URL, QUESTION_SKILL_LINK_URL_TEMPLATE) {
        var _createQuestion = function (skillId, questionDict, successCallback, errorCallback) {
            var questionCreationUrl = UrlInterpolationService.interpolateUrl(QUESTION_CREATION_URL, {
                skill_id: skillId
            });
            var postData = {
                question_dict: questionDict
            };
            $http.post(questionCreationUrl, postData).then(function (response) {
                if (successCallback) {
                    successCallback();
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _fetchQuestion = function (questionId, successCallback, errorCallback) {
            var questionDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_QUESTION_DATA_URL_TEMPLATE, {
                question_id: questionId
            });
            $http.get(questionDataUrl).then(function (response) {
                var data = angular.copy(response.data);
                if (successCallback) {
                    successCallback({
                        question_dict: data.question_dict,
                        associated_skill_dicts: data.associated_skill_dicts
                    });
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _updateQuestion = function (questionId, questionVersion, commitMessage, changeList, successCallback, errorCallback) {
            var editableQuestionDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_QUESTION_DATA_URL_TEMPLATE, {
                question_id: questionId
            });
            var putData = {
                version: questionVersion,
                commit_message: commitMessage,
                change_list: changeList
            };
            $http.put(editableQuestionDataUrl, putData).then(function (response) {
                // The returned data is an updated question dict.
                var questionDict = angular.copy(response.data.question_dict);
                if (successCallback) {
                    successCallback(questionDict);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        return {
            createQuestion: function (skillId, questionDict) {
                return $q(function (resolve, reject) {
                    _createQuestion(skillId, questionDict, resolve, reject);
                });
            },
            fetchQuestion: function (questionId) {
                return $q(function (resolve, reject) {
                    _fetchQuestion(questionId, resolve, reject);
                });
            },
            /**
             * Updates a question in the backend with the provided question ID.
             * The changes only apply to the question of the given version and the
             * request to update the question will fail if the provided question
             * version is older than the current version stored in the backend. Both
             * the changes and the message to associate with those changes are used
             * to commit a change to the question. The new question is passed to
             * the success callback, if one is provided to the returned promise
             * object. Errors are passed to the error callback, if one is provided.
             */
            updateQuestion: function (questionId, questionVersion, commitMessage, changeList) {
                return $q(function (resolve, reject) {
                    _updateQuestion(questionId, questionVersion, commitMessage, changeList, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/question/QuestionObjectFactory.ts":
/*!**************************************************************************!*\
  !*** ./core/templates/dev/head/domain/question/QuestionObjectFactory.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating and mutating instances of frontend
 * question domain objects.
 */
__webpack_require__(/*! domain/state/StateObjectFactory.ts */ "./core/templates/dev/head/domain/state/StateObjectFactory.ts");
oppia.factory('QuestionObjectFactory', [
    'StateObjectFactory', 'INTERACTION_SPECS',
    function (StateObjectFactory, INTERACTION_SPECS) {
        var Question = function (id, stateData, languageCode, version) {
            this._id = id;
            this._stateData = stateData;
            this._languageCode = languageCode;
            this._version = version;
        };
        // Instance methods
        Question.prototype.getId = function () {
            return this._id;
        };
        Question.prototype.getStateData = function () {
            return this._stateData;
        };
        Question.prototype.setStateData = function (newStateData) {
            this._stateData = angular.copy(newStateData);
        };
        Question.prototype.getLanguageCode = function () {
            return this._languageCode;
        };
        Question.prototype.setLanguageCode = function (languageCode) {
            this._languageCode = languageCode;
        };
        Question.prototype.getVersion = function () {
            return this._version;
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Question['createDefaultQuestion'] = function () {
            /* eslint-enable dot-notation */
            return new Question(null, StateObjectFactory.createDefaultState(null), constants.DEFAULT_LANGUAGE_CODE, 1);
        };
        Question.prototype.validate = function (misconceptions) {
            var interaction = this._stateData.interaction;
            if (interaction.id === null) {
                return 'An interaction must be specified';
            }
            if (interaction.hints.length === 0) {
                return 'At least 1 hint should be specfied';
            }
            if (!interaction.solution &&
                INTERACTION_SPECS[interaction.id].can_have_solution) {
                return 'A solution must be specified';
            }
            var answerGroups = this._stateData.interaction.answerGroups;
            var taggedMisconceptionIds = {};
            var atLeastOneAnswerCorrect = false;
            for (var i = 0; i < answerGroups.length; i++) {
                if (answerGroups[i].outcome.labelledAsCorrect) {
                    atLeastOneAnswerCorrect = true;
                    continue;
                }
                if (answerGroups[i].taggedMisconceptionId !== null) {
                    taggedMisconceptionIds[answerGroups[i].taggedMisconceptionId] = true;
                }
            }
            if (!atLeastOneAnswerCorrect) {
                return 'At least one answer should be marked correct';
            }
            var pendingMisconceptionNamesToTag = [];
            for (var i = 0; i < misconceptions.length; i++) {
                if (!taggedMisconceptionIds[misconceptions[i].getId()]) {
                    pendingMisconceptionNamesToTag.push(misconceptions[i].getName());
                }
            }
            if (pendingMisconceptionNamesToTag.length > 0) {
                var returnString = 'The following misconceptions should also be caught:';
                pendingMisconceptionNamesToTag.forEach(function (misconceptionName) {
                    returnString = returnString + ' ' + misconceptionName + ',';
                });
                returnString = returnString.slice(0, -1);
                returnString = returnString + '. Click on (or create) an answer ' +
                    'that is neither marked correct nor is a default answer (marked ' +
                    'above as [All other answers]) to tag a misconception to that ' +
                    'answer group.';
                return returnString;
            }
            return false;
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Question['createFromBackendDict'] = function (questionBackendDict) {
            /* eslint-enable dot-notation */
            return new Question(questionBackendDict.id, StateObjectFactory.createFromBackendDict('question', questionBackendDict.question_state_data), questionBackendDict.language_code, questionBackendDict.version);
        };
        Question.prototype.toBackendDict = function (isNewQuestion) {
            var questionBackendDict = {
                id: null,
                question_state_data: this._stateData.toBackendDict(),
                language_code: this._languageCode,
                version: 1
            };
            if (!isNewQuestion) {
                questionBackendDict.id = this._id;
                questionBackendDict.version = this._version;
            }
            return questionBackendDict;
        };
        return Question;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/question/QuestionUpdateService.ts":
/*!**************************************************************************!*\
  !*** ./core/templates/dev/head/domain/question/QuestionUpdateService.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
* @fileoverview Service to handle the updating of a question.
*/
__webpack_require__(/*! domain/editor/undo_redo/ChangeObjectFactory.ts */ "./core/templates/dev/head/domain/editor/undo_redo/ChangeObjectFactory.ts");
__webpack_require__(/*! domain/editor/undo_redo/QuestionUndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/QuestionUndoRedoService.ts");
__webpack_require__(/*! domain/editor/undo_redo/UndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/UndoRedoService.ts");
__webpack_require__(/*! domain/question/QuestionObjectFactory.ts */ "./core/templates/dev/head/domain/question/QuestionObjectFactory.ts");
oppia.constant('QUESTION_PROPERTY_LANGUAGE_CODE', 'language_code');
oppia.constant('QUESTION_PROPERTY_QUESTION_STATE_DATA', 'question_state_data');
oppia.constant('CMD_UPDATE_QUESTION_PROPERTY', 'update_question_property');
oppia.factory('QuestionUpdateService', [
    'ChangeObjectFactory', 'QuestionObjectFactory', 'QuestionUndoRedoService',
    'CMD_UPDATE_QUESTION_PROPERTY', 'QUESTION_PROPERTY_LANGUAGE_CODE',
    'QUESTION_PROPERTY_QUESTION_STATE_DATA',
    function (ChangeObjectFactory, QuestionObjectFactory, QuestionUndoRedoService, CMD_UPDATE_QUESTION_PROPERTY, QUESTION_PROPERTY_LANGUAGE_CODE, QUESTION_PROPERTY_QUESTION_STATE_DATA) {
        var _applyChange = function (question, command, params, apply, reverse) {
            var changeDict = angular.copy(params);
            changeDict.cmd = command;
            var changeObj = ChangeObjectFactory.create(changeDict, apply, reverse);
            QuestionUndoRedoService.applyChange(changeObj, question);
        };
        var _applyPropertyChange = function (question, propertyName, newValue, oldValue, apply, reverse) {
            _applyChange(question, CMD_UPDATE_QUESTION_PROPERTY, {
                property_name: propertyName,
                new_value: angular.copy(newValue),
                old_value: angular.copy(oldValue),
            }, apply, reverse);
        };
        var _getParameterFromChangeDict = function (changeDict, paramName) {
            return changeDict[paramName];
        };
        var _getNewPropertyValueFromChangeDict = function (changeDict) {
            return _getParameterFromChangeDict(changeDict, 'new_value');
        };
        var _getAllContentIds = function (state) {
            var allContentIdsSet = new Set();
            allContentIdsSet.add(state.content.getContentId());
            state.interaction.answerGroups.forEach(function (answerGroup) {
                allContentIdsSet.add(answerGroup.outcome.feedback.getContentId());
            });
            if (state.interaction.defaultOutcome) {
                allContentIdsSet.add(state.interaction.defaultOutcome.feedback.getContentId());
            }
            state.interaction.hints.forEach(function (hint) {
                allContentIdsSet.add(hint.hintContent.getContentId());
            });
            if (state.interaction.solution) {
                allContentIdsSet.add(state.interaction.solution.explanation.getContentId());
            }
            return allContentIdsSet;
        };
        var _getElementsInFirstSetButNotInSecond = function (setA, setB) {
            var diffList = Array.from(setA).filter(function (element) {
                return !setB.has(element);
            });
            return diffList;
        };
        var _updateContentIdsInAssets = function (newState, oldState) {
            var newContentIds = _getAllContentIds(newState);
            var oldContentIds = _getAllContentIds(oldState);
            var contentIdsToDelete = _getElementsInFirstSetButNotInSecond(oldContentIds, newContentIds);
            var contentIdsToAdd = _getElementsInFirstSetButNotInSecond(newContentIds, oldContentIds);
            contentIdsToDelete.forEach(function (contentId) {
                newState.recordedVoiceovers.deleteContentId(contentId);
                newState.writtenTranslations.deleteContentId(contentId);
            });
            contentIdsToAdd.forEach(function (contentId) {
                newState.recordedVoiceovers.addContentId(contentId);
                newState.writtenTranslations.addContentId(contentId);
            });
        };
        return {
            setQuestionLanguageCode: function (question, newLanguageCode) {
                var oldLanguageCode = angular.copy(question.getLanguageCode());
                _applyPropertyChange(question, QUESTION_PROPERTY_LANGUAGE_CODE, newLanguageCode, oldLanguageCode, function (changeDict, question) {
                    var languageCode = _getNewPropertyValueFromChangeDict(changeDict);
                    question.setLanguageCode(languageCode);
                }, function (changeDict, question) {
                    question.setLanguageCode(oldLanguageCode);
                });
            },
            setQuestionStateData: function (question, updateFunction) {
                var oldStateData = angular.copy(question.getStateData());
                // We update the question here before making the change,
                // so that we can obtain the new state to save to the backend via
                // the change list.
                //
                // We diverge slightly from the other models of update services because
                // a separate service (StateEditorService) is being used to update
                // the question, and we can't retrieve the new state data without
                // simultaneously updating it.
                //
                // The updating of the question in the client can't be deferred to
                // when the change in the change list is applied, because we would
                // have to defer the extraction of the new state data, which we need
                // for creating the change to send to the backend.
                updateFunction();
                var newStateData = question.getStateData();
                _updateContentIdsInAssets(newStateData, oldStateData);
                _applyPropertyChange(question, QUESTION_PROPERTY_QUESTION_STATE_DATA, newStateData.toBackendDict(), oldStateData.toBackendDict(), function (changeDict, question) {
                    // Unused (see comment above).
                }, function (changeDict, question) {
                    question.setStateData(oldStateData);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/skill/EditableSkillBackendApiService.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/skill/EditableSkillBackendApiService.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to send changes to a skill to the backend.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
oppia.constant('EDITABLE_SKILL_DATA_URL_TEMPLATE', '/skill_editor_handler/data/<skill_id>');
oppia.constant('SKILL_EDITOR_QUESTION_URL_TEMPLATE', '/skill_editor_question_handler/<skill_id>?cursor=<cursor>');
oppia.factory('EditableSkillBackendApiService', [
    '$http', '$q', 'UrlInterpolationService',
    'EDITABLE_SKILL_DATA_URL_TEMPLATE', 'SKILL_EDITOR_QUESTION_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, EDITABLE_SKILL_DATA_URL_TEMPLATE, SKILL_EDITOR_QUESTION_URL_TEMPLATE) {
        var _fetchSkill = function (skillId, successCallback, errorCallback) {
            var skillDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_SKILL_DATA_URL_TEMPLATE, {
                skill_id: skillId
            });
            $http.get(skillDataUrl).then(function (response) {
                var skill = angular.copy(response.data.skill);
                if (successCallback) {
                    successCallback(skill);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _updateSkill = function (skillId, skillVersion, commitMessage, changeList, successCallback, errorCallback) {
            var editableSkillDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_SKILL_DATA_URL_TEMPLATE, {
                skill_id: skillId
            });
            var putData = {
                version: skillVersion,
                commit_message: commitMessage,
                change_dicts: changeList
            };
            $http.put(editableSkillDataUrl, putData).then(function (response) {
                // The returned data is an updated skill dict.
                var skill = angular.copy(response.data.skill);
                if (successCallback) {
                    successCallback(skill);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _fetchQuestions = function (skillId, cursor, successCallback, errorCallback) {
            var questionsDataUrl = UrlInterpolationService.interpolateUrl(SKILL_EDITOR_QUESTION_URL_TEMPLATE, {
                skill_id: skillId,
                cursor: cursor ? cursor : ''
            });
            $http.get(questionsDataUrl).then(function (response) {
                var questionSummaries = angular.copy(response.data.question_summary_dicts);
                var nextCursor = response.data.next_start_cursor;
                if (successCallback) {
                    successCallback({
                        questionSummaries: questionSummaries,
                        nextCursor: nextCursor
                    });
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _deleteSkill = function (skillId, successCallback, errorCallback) {
            var skillDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_SKILL_DATA_URL_TEMPLATE, {
                skill_id: skillId
            });
            $http['delete'](skillDataUrl).then(function (response) {
                if (successCallback) {
                    successCallback(response.status);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        return {
            fetchSkill: function (skillId) {
                return $q(function (resolve, reject) {
                    _fetchSkill(skillId, resolve, reject);
                });
            },
            updateSkill: function (skillId, skillVersion, commitMessage, changeList) {
                return $q(function (resolve, reject) {
                    _updateSkill(skillId, skillVersion, commitMessage, changeList, resolve, reject);
                });
            },
            fetchQuestions: function (skillId, cursor) {
                return $q(function (resolve, reject) {
                    _fetchQuestions(skillId, cursor, resolve, reject);
                });
            },
            deleteSkill: function (skillId) {
                return $q(function (resolve, reject) {
                    _deleteSkill(skillId, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/skill/MisconceptionObjectFactory.ts":
/*!****************************************************************************!*\
  !*** ./core/templates/dev/head/domain/skill/MisconceptionObjectFactory.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Object factory for creating frontend instances of
 * misconceptions.
 */
oppia.factory('MisconceptionObjectFactory', [
    function () {
        var Misconception = function (id, name, notes, feedback) {
            this._id = id;
            this._name = name;
            this._notes = notes;
            this._feedback = feedback;
        };
        Misconception.prototype.toBackendDict = function () {
            return {
                id: this._id,
                name: this._name,
                notes: this._notes,
                feedback: this._feedback
            };
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Misconception['createFromBackendDict'] = function (
        /* eslint-enable dot-notation */
        misconceptionBackendDict) {
            return new Misconception(misconceptionBackendDict.id, misconceptionBackendDict.name, misconceptionBackendDict.notes, misconceptionBackendDict.feedback);
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Misconception['create'] = function (id, name, notes, feedback) {
            /* eslint-enable dot-notation */
            return new Misconception(id, name, notes, feedback);
        };
        Misconception.prototype.getId = function () {
            return this._id;
        };
        Misconception.prototype.getName = function () {
            return this._name;
        };
        Misconception.prototype.setName = function (newName) {
            this._name = newName;
        };
        Misconception.prototype.getNotes = function () {
            return this._notes;
        };
        Misconception.prototype.setNotes = function (newNotes) {
            this._notes = newNotes;
        };
        Misconception.prototype.getFeedback = function () {
            return this._feedback;
        };
        Misconception.prototype.setFeedback = function (newFeedback) {
            this._feedback = newFeedback;
        };
        return Misconception;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/skill/SkillSummaryObjectFactory.ts":
/*!***************************************************************************!*\
  !*** ./core/templates/dev/head/domain/skill/SkillSummaryObjectFactory.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating and mutating instances of frontend
 * skill summary domain objects.
 */
oppia.factory('SkillSummaryObjectFactory', [
    function () {
        var SkillSummary = function (skillId, skillDescription) {
            this._id = skillId;
            this._description = skillDescription;
        };
        // Instance methods
        SkillSummary.prototype.getId = function () {
            return this._id;
        };
        SkillSummary.prototype.getDescription = function () {
            return this._description;
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        SkillSummary['create'] = function (skillId, skillDescription) {
            /* eslint-enable dot-notation */
            return new SkillSummary(skillId, skillDescription);
        };
        return SkillSummary;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/story/EditableStoryBackendApiService.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/story/EditableStoryBackendApiService.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to send changes to a story to the backend.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
oppia.constant('EDITABLE_STORY_DATA_URL_TEMPLATE', '/story_editor_handler/data/<topic_id>/<story_id>');
oppia.factory('EditableStoryBackendApiService', [
    '$http', '$q', 'UrlInterpolationService',
    'EDITABLE_STORY_DATA_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, EDITABLE_STORY_DATA_URL_TEMPLATE) {
        var _fetchStory = function (topicId, storyId, successCallback, errorCallback) {
            var storyDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_STORY_DATA_URL_TEMPLATE, {
                topic_id: topicId,
                story_id: storyId
            });
            $http.get(storyDataUrl).then(function (response) {
                var story = angular.copy(response.data.story);
                var topicName = angular.copy(response.data.topic_name);
                if (successCallback) {
                    successCallback({
                        story: story,
                        topicName: topicName
                    });
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _updateStory = function (topicId, storyId, storyVersion, commitMessage, changeList, successCallback, errorCallback) {
            var editableStoryDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_STORY_DATA_URL_TEMPLATE, {
                topic_id: topicId,
                story_id: storyId
            });
            var putData = {
                version: storyVersion,
                commit_message: commitMessage,
                change_dicts: changeList
            };
            $http.put(editableStoryDataUrl, putData).then(function (response) {
                // The returned data is an updated story dict.
                var story = angular.copy(response.data.story);
                if (successCallback) {
                    successCallback(story);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _deleteStory = function (topicId, storyId, successCallback, errorCallback) {
            var storyDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_STORY_DATA_URL_TEMPLATE, {
                topic_id: topicId,
                story_id: storyId
            });
            $http['delete'](storyDataUrl).then(function (response) {
                if (successCallback) {
                    successCallback(response.status);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        return {
            fetchStory: function (topicId, storyId) {
                return $q(function (resolve, reject) {
                    _fetchStory(topicId, storyId, resolve, reject);
                });
            },
            /**
             * Updates a story in the backend with the provided story ID.
             * The changes only apply to the story of the given version and the
             * request to update the story will fail if the provided story
             * version is older than the current version stored in the backend. Both
             * the changes and the message to associate with those changes are used
             * to commit a change to the story. The new story is passed to
             * the success callback, if one is provided to the returned promise
             * object. Errors are passed to the error callback, if one is provided.
             */
            updateStory: function (topicId, storyId, storyVersion, commitMessage, changeList) {
                return $q(function (resolve, reject) {
                    _updateStory(topicId, storyId, storyVersion, commitMessage, changeList, resolve, reject);
                });
            },
            deleteStory: function (topicId, storyId) {
                return $q(function (resolve, reject) {
                    _deleteStory(topicId, storyId, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/suggestion/QuestionSuggestionObjectFactory.ts":
/*!**************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/suggestion/QuestionSuggestionObjectFactory.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of question
   suggestion domain objects.
 */
__webpack_require__(/*! domain/question/QuestionObjectFactory.ts */ "./core/templates/dev/head/domain/question/QuestionObjectFactory.ts");
oppia.factory('QuestionSuggestionObjectFactory', [
    'QuestionObjectFactory', function (QuestionObjectFactory) {
        var Suggestion = function (suggestionType, suggestionId, targetType, targetId, status, authorName, lastUpdated, question, skillId) {
            this.suggestionType = suggestionType;
            this.suggestionId = suggestionId;
            this.targetType = targetType;
            this.targetId = targetId;
            this.status = status;
            this.authorName = authorName;
            this.lastUpdated = lastUpdated;
            this.question = question;
            this.skillId = skillId;
        };
        Suggestion.prototype.getThreadId = function () {
            return this.suggestionId;
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Suggestion['createFromBackendDict'] = function (suggestionBackendDict) {
            /* eslint-enable dot-notation */
            var question = QuestionObjectFactory.createFromBackendDict(suggestionBackendDict.change.question_dict);
            return new Suggestion(suggestionBackendDict.suggestion_type, suggestionBackendDict.suggestion_id, suggestionBackendDict.target_type, suggestionBackendDict.target_id, suggestionBackendDict.status, suggestionBackendDict.author_name, suggestionBackendDict.last_updated, question, suggestionBackendDict.change.skill_id);
        };
        return Suggestion;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/suggestion/SuggestionObjectFactory.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/suggestion/SuggestionObjectFactory.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of suggestion
   domain objects.
 */
oppia.factory('SuggestionObjectFactory', [function () {
        var Suggestion = function (suggestionType, suggestionId, targetType, targetId, status, authorName, stateName, newValue, oldValue, lastUpdated) {
            this.suggestionType = suggestionType;
            this.suggestionId = suggestionId;
            this.targetType = targetType;
            this.targetId = targetId;
            this.status = status;
            this.authorName = authorName;
            this.stateName = stateName;
            this.newValue = newValue;
            this.oldValue = oldValue;
            this.lastUpdated = lastUpdated;
        };
        Suggestion.prototype.getThreadId = function () {
            return this.suggestionId;
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Suggestion['createFromBackendDict'] = function (suggestionBackendDict) {
            /* eslint-enable dot-notation */
            return new Suggestion(suggestionBackendDict.suggestion_type, suggestionBackendDict.suggestion_id, suggestionBackendDict.target_type, suggestionBackendDict.target_id, suggestionBackendDict.status, suggestionBackendDict.author_name, suggestionBackendDict.change.state_name, suggestionBackendDict.change.new_value, suggestionBackendDict.change.old_value, suggestionBackendDict.last_updated);
        };
        return Suggestion;
    }]);


/***/ }),

/***/ "./core/templates/dev/head/domain/suggestion/SuggestionThreadObjectFactory.ts":
/*!************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/suggestion/SuggestionThreadObjectFactory.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of suggestion
   thread domain objects.
 */
__webpack_require__(/*! domain/suggestion/QuestionSuggestionObjectFactory.ts */ "./core/templates/dev/head/domain/suggestion/QuestionSuggestionObjectFactory.ts");
__webpack_require__(/*! domain/suggestion/SuggestionObjectFactory.ts */ "./core/templates/dev/head/domain/suggestion/SuggestionObjectFactory.ts");
oppia.factory('SuggestionThreadObjectFactory', [
    'QuestionSuggestionObjectFactory', 'SuggestionObjectFactory',
    function (QuestionSuggestionObjectFactory, SuggestionObjectFactory) {
        var SuggestionThread = function (status, subject, summary, originalAuthorName, lastUpdated, messageCount, threadId, suggestion) {
            this.status = status;
            this.subject = subject;
            this.summary = summary;
            this.originalAuthorName = originalAuthorName;
            this.lastUpdated = lastUpdated;
            this.messageCount = messageCount;
            this.threadId = threadId;
            this.suggestion = suggestion;
            this.messages = [];
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        SuggestionThread['createFromBackendDicts'] = function (
        /* eslint-enable dot-notation */
        suggestionThreadBackendDict, suggestionBackendDict) {
            var suggestion;
            if (suggestionBackendDict.suggestion_type === 'add_question') {
                suggestion = QuestionSuggestionObjectFactory.createFromBackendDict(suggestionBackendDict);
            }
            else if (suggestionBackendDict.suggestion_type ===
                'edit_exploration_state_content') {
                suggestion = SuggestionObjectFactory.createFromBackendDict(suggestionBackendDict);
            }
            return new SuggestionThread(suggestionThreadBackendDict.status, suggestionThreadBackendDict.subject, suggestionThreadBackendDict.summary, suggestionThreadBackendDict.original_author_username, suggestionThreadBackendDict.last_updated, suggestionThreadBackendDict.message_count, suggestionThreadBackendDict.thread_id, suggestion);
        };
        SuggestionThread.prototype.setMessages = function (messages) {
            this.messages = messages;
        };
        SuggestionThread.prototype.isSuggestionHandled = function () {
            return this.suggestion.status !== 'review';
        };
        SuggestionThread.prototype.getSuggestionStateName = function () {
            return this.suggestion.stateName;
        };
        SuggestionThread.prototype.getSuggestionStatus = function () {
            return this.suggestion.status;
        };
        SuggestionThread.prototype.getReplacementHtmlFromSuggestion = function () {
            return this.suggestion.newValue.html;
        };
        SuggestionThread.prototype.isSuggestionThread = function () {
            return true;
        };
        SuggestionThread.prototype.getSuggestion = function () {
            return this.suggestion;
        };
        return SuggestionThread;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/topic/EditableTopicBackendApiService.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/topic/EditableTopicBackendApiService.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to send changes to a topic to the backend.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
oppia.constant('TOPIC_EDITOR_STORY_URL_TEMPLATE', '/topic_editor_story_handler/<topic_id>');
oppia.constant('TOPIC_EDITOR_QUESTION_URL_TEMPLATE', '/topic_editor_question_handler/<topic_id>?cursor=<cursor>');
oppia.factory('EditableTopicBackendApiService', [
    '$http', '$q', 'UrlInterpolationService',
    'EDITABLE_TOPIC_DATA_URL_TEMPLATE', 'SUBTOPIC_PAGE_EDITOR_DATA_URL_TEMPLATE',
    'TOPIC_EDITOR_QUESTION_URL_TEMPLATE', 'TOPIC_EDITOR_STORY_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, EDITABLE_TOPIC_DATA_URL_TEMPLATE, SUBTOPIC_PAGE_EDITOR_DATA_URL_TEMPLATE, TOPIC_EDITOR_QUESTION_URL_TEMPLATE, TOPIC_EDITOR_STORY_URL_TEMPLATE) {
        var _fetchTopic = function (topicId, successCallback, errorCallback) {
            var topicDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_TOPIC_DATA_URL_TEMPLATE, {
                topic_id: topicId
            });
            $http.get(topicDataUrl).then(function (response) {
                if (successCallback) {
                    // The response is passed as a dict with 2 fields and not as 2
                    // parameters, because the successCallback is called as the resolve
                    // callback function in $q in fetchTopic(), and according to its
                    // documentation (https://docs.angularjs.org/api/ng/service/$q),
                    // resolve or reject can have only a single parameter.
                    successCallback({
                        topicDict: angular.copy(response.data.topic_dict),
                        skillIdToDescriptionDict: angular.copy(response.data.skill_id_to_description_dict)
                    });
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _fetchStories = function (topicId, successCallback, errorCallback) {
            var storiesDataUrl = UrlInterpolationService.interpolateUrl(TOPIC_EDITOR_STORY_URL_TEMPLATE, {
                topic_id: topicId
            });
            $http.get(storiesDataUrl).then(function (response) {
                var canonicalStorySummaries = angular.copy(response.data.canonical_story_summary_dicts);
                if (successCallback) {
                    successCallback(canonicalStorySummaries);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _fetchQuestions = function (topicId, cursor, successCallback, errorCallback) {
            var questionsDataUrl = UrlInterpolationService.interpolateUrl(TOPIC_EDITOR_QUESTION_URL_TEMPLATE, {
                topic_id: topicId,
                cursor: cursor ? cursor : ''
            });
            $http.get(questionsDataUrl).then(function (response) {
                var questionSummaries = angular.copy(response.data.question_summary_dicts);
                var nextCursor = response.data.next_start_cursor;
                if (successCallback) {
                    successCallback({
                        questionSummaries: questionSummaries,
                        nextCursor: nextCursor
                    });
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _fetchSubtopicPage = function (topicId, subtopicId, successCallback, errorCallback) {
            var subtopicPageDataUrl = UrlInterpolationService.interpolateUrl(SUBTOPIC_PAGE_EDITOR_DATA_URL_TEMPLATE, {
                topic_id: topicId,
                subtopic_id: subtopicId.toString()
            });
            $http.get(subtopicPageDataUrl).then(function (response) {
                var topic = angular.copy(response.data.subtopic_page);
                if (successCallback) {
                    successCallback(topic);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _deleteTopic = function (topicId, successCallback, errorCallback) {
            var topicDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_TOPIC_DATA_URL_TEMPLATE, {
                topic_id: topicId
            });
            $http['delete'](topicDataUrl).then(function (response) {
                if (successCallback) {
                    successCallback(response.status);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _updateTopic = function (topicId, topicVersion, commitMessage, changeList, successCallback, errorCallback) {
            var editableTopicDataUrl = UrlInterpolationService.interpolateUrl(EDITABLE_TOPIC_DATA_URL_TEMPLATE, {
                topic_id: topicId
            });
            var putData = {
                version: topicVersion,
                commit_message: commitMessage,
                topic_and_subtopic_page_change_dicts: changeList
            };
            $http.put(editableTopicDataUrl, putData).then(function (response) {
                if (successCallback) {
                    // Here also, a dict with 2 fields are passed instead of just 2
                    // parameters, due to the same reason as written for _fetchTopic().
                    successCallback({
                        topicDict: angular.copy(response.data.topic_dict),
                        skillIdToDescriptionDict: angular.copy(response.data.skill_id_to_description_dict)
                    });
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        return {
            fetchTopic: function (topicId) {
                return $q(function (resolve, reject) {
                    _fetchTopic(topicId, resolve, reject);
                });
            },
            fetchStories: function (topicId) {
                return $q(function (resolve, reject) {
                    _fetchStories(topicId, resolve, reject);
                });
            },
            fetchQuestions: function (topicId, cursor) {
                return $q(function (resolve, reject) {
                    _fetchQuestions(topicId, cursor, resolve, reject);
                });
            },
            fetchSubtopicPage: function (topicId, subtopicId) {
                return $q(function (resolve, reject) {
                    _fetchSubtopicPage(topicId, subtopicId, resolve, reject);
                });
            },
            /**
             * Updates a topic in the backend with the provided topic ID.
             * The changes only apply to the topic of the given version and the
             * request to update the topic will fail if the provided topic
             * version is older than the current version stored in the backend. Both
             * the changes and the message to associate with those changes are used
             * to commit a change to the topic. The new topic is passed to
             * the success callback, if one is provided to the returned promise
             * object. Errors are passed to the error callback, if one is provided.
             */
            updateTopic: function (topicId, topicVersion, commitMessage, changeList) {
                return $q(function (resolve, reject) {
                    _updateTopic(topicId, topicVersion, commitMessage, changeList, resolve, reject);
                });
            },
            deleteTopic: function (topicId) {
                return $q(function (resolve, reject) {
                    _deleteTopic(topicId, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/topic/SubtopicObjectFactory.ts":
/*!***********************************************************************!*\
  !*** ./core/templates/dev/head/domain/topic/SubtopicObjectFactory.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating and mutating instances of frontend
 * subtopic domain objects.
 */
__webpack_require__(/*! domain/skill/SkillSummaryObjectFactory.ts */ "./core/templates/dev/head/domain/skill/SkillSummaryObjectFactory.ts");
oppia.factory('SubtopicObjectFactory', ['SkillSummaryObjectFactory',
    function (SkillSummaryObjectFactory) {
        var Subtopic = function (subtopicId, title, skillIds, skillIdToDescriptionMap) {
            this._id = subtopicId;
            this._title = title;
            this._skillSummaries = skillIds.map(function (skillId) {
                return SkillSummaryObjectFactory.create(skillId, skillIdToDescriptionMap[skillId]);
            });
        };
        // Instance methods
        // Returns the id of the subtopic.
        Subtopic.prototype.getId = function () {
            return this._id;
        };
        Subtopic.prototype.decrementId = function () {
            return --this._id;
        };
        Subtopic.prototype.incrementId = function () {
            return ++this._id;
        };
        // Returns the title of the subtopic.
        Subtopic.prototype.getTitle = function () {
            return this._title;
        };
        Subtopic.prototype.setTitle = function (title) {
            this._title = title;
        };
        Subtopic.prototype.validate = function () {
            var issues = [];
            if (this._title === '') {
                issues.push('Subtopic title should not be empty');
            }
            var skillIds = this._skillSummaries.map(function (skillSummary) {
                return skillSummary.getId();
            });
            for (var i = 0; i < skillIds.length; i++) {
                var skillId = skillIds[i];
                if (skillIds.indexOf(skillId) < skillIds.lastIndexOf(skillId)) {
                    issues.push('The skill with id ' + skillId + ' is duplicated in' +
                        ' subtopic with id ' + this._id);
                }
            }
            return issues;
        };
        // Returns the summaries of the skills in the subtopic.
        Subtopic.prototype.getSkillSummaries = function () {
            return this._skillSummaries.slice();
        };
        Subtopic.prototype.hasSkill = function (skillId) {
            return this._skillSummaries.some(function (skillSummary) {
                return skillSummary.getId() === skillId;
            });
        };
        Subtopic.prototype.addSkill = function (skillId, skillDescription) {
            if (!this.hasSkill(skillId)) {
                this._skillSummaries.push(SkillSummaryObjectFactory.create(skillId, skillDescription));
                return true;
            }
            return false;
        };
        Subtopic.prototype.removeSkill = function (skillId) {
            var index = this._skillSummaries.map(function (skillSummary) {
                return skillSummary.getId();
            }).indexOf(skillId);
            if (index > -1) {
                this._skillSummaries.splice(index, 1);
            }
            else {
                throw Error('The given skill doesn\'t exist in the subtopic');
            }
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Subtopic['create'] = function (
        /* eslint-enable dot-notation */
        subtopicBackendDict, skillIdToDescriptionMap) {
            return new Subtopic(subtopicBackendDict.id, subtopicBackendDict.title, subtopicBackendDict.skill_ids, skillIdToDescriptionMap);
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Subtopic['createFromTitle'] = function (subtopicId, title) {
            /* eslint-enable dot-notation */
            // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
            /* eslint-disable dot-notation */
            return Subtopic['create']({
                /* eslint-enable dot-notation */
                id: subtopicId,
                title: title,
                skill_ids: []
            }, {});
        };
        return Subtopic;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/topic/SubtopicPageContentsObjectFactory.ts":
/*!***********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/topic/SubtopicPageContentsObjectFactory.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating and mutating instances of frontend
 * subtopic page data domain objects.
 */
__webpack_require__(/*! domain/exploration/ContentIdsToAudioTranslationsObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ContentIdsToAudioTranslationsObjectFactory.ts");
__webpack_require__(/*! domain/exploration/SubtitledHtmlObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts");
oppia.factory('SubtopicPageContentsObjectFactory', [
    'ContentIdsToAudioTranslationsObjectFactory', 'SubtitledHtmlObjectFactory',
    function (ContentIdsToAudioTranslationsObjectFactory, SubtitledHtmlObjectFactory) {
        var SubtopicPageContents = function (subtitledHtml, contentIdsToAudioTranslations) {
            this._subtitledHtml = subtitledHtml;
            this._contentIdsToAudioTranslations =
                contentIdsToAudioTranslations;
        };
        SubtopicPageContents.prototype.getSubtitledHtml = function () {
            return this._subtitledHtml;
        };
        SubtopicPageContents.prototype.setSubtitledHtml = function (newSubtitledHtml) {
            this._subtitledHtml = angular.copy(newSubtitledHtml);
        };
        SubtopicPageContents.prototype.getHtml = function () {
            return this._subtitledHtml.getHtml();
        };
        SubtopicPageContents.prototype.setHtml = function (html) {
            this._subtitledHtml.setHtml(html);
        };
        SubtopicPageContents.prototype.getContentIdsToAudioTranslations =
            function () {
                return this._contentIdsToAudioTranslations;
            };
        SubtopicPageContents.prototype.setContentIdsToAudioTranslations =
            function (newContentIdsToAudioTranslations) {
                this._contentIdsToAudioTranslations =
                    angular.copy(newContentIdsToAudioTranslations);
            };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        SubtopicPageContents['createDefault'] = function () {
            /* eslint-enable dot-notation */
            var contentIdsToAudioTranslations = ContentIdsToAudioTranslationsObjectFactory.createEmpty();
            contentIdsToAudioTranslations.addContentId('content');
            return new SubtopicPageContents(SubtitledHtmlObjectFactory.createDefault('', 'content'), contentIdsToAudioTranslations);
        };
        SubtopicPageContents.prototype.toBackendDict = function () {
            return {
                subtitled_html: this._subtitledHtml.toBackendDict(),
                content_ids_to_audio_translations: this._contentIdsToAudioTranslations.toBackendDict()
            };
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        SubtopicPageContents['createFromBackendDict'] = function (backendDict) {
            /* eslint-enable dot-notation */
            return new SubtopicPageContents(SubtitledHtmlObjectFactory.createFromBackendDict(backendDict.subtitled_html), ContentIdsToAudioTranslationsObjectFactory.createFromBackendDict(backendDict.content_ids_to_audio_translations));
        };
        return SubtopicPageContents;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/topic/SubtopicPageObjectFactory.ts":
/*!***************************************************************************!*\
  !*** ./core/templates/dev/head/domain/topic/SubtopicPageObjectFactory.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating and mutating instances of frontend
 * subtopic page domain objects.
 */
__webpack_require__(/*! domain/topic/SubtopicPageContentsObjectFactory.ts */ "./core/templates/dev/head/domain/topic/SubtopicPageContentsObjectFactory.ts");
oppia.factory('SubtopicPageObjectFactory', [
    'SubtopicPageContentsObjectFactory',
    function (SubtopicPageContentsObjectFactory) {
        var SubtopicPage = function (subtopicPageId, topicId, pageContents, languageCode) {
            this._id = subtopicPageId;
            this._topicId = topicId;
            this._pageContents = pageContents;
            this._languageCode = languageCode;
        };
        var getSubtopicPageId = function (topicId, subtopicId) {
            return topicId + '-' + subtopicId.toString();
        };
        // Instance methods
        // Returns the id of the subtopic page.
        SubtopicPage.prototype.getId = function () {
            return this._id;
        };
        SubtopicPage.prototype.setId = function (id) {
            this._id = id;
        };
        // Returns the topic id that the subtopic page is linked to.
        SubtopicPage.prototype.getTopicId = function () {
            return this._topicId;
        };
        // Returns the page data for the subtopic page.
        SubtopicPage.prototype.getPageContents = function () {
            return this._pageContents;
        };
        // Sets the page data for the subtopic page.
        SubtopicPage.prototype.setPageContents = function (pageContents) {
            this._pageContents = angular.copy(pageContents);
        };
        // Returns the language code for the subtopic page.
        SubtopicPage.prototype.getLanguageCode = function () {
            return this._languageCode;
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        SubtopicPage['createFromBackendDict'] = function (subtopicPageBackendDict) {
            /* eslint-enable dot-notation */
            return new SubtopicPage(subtopicPageBackendDict.id, subtopicPageBackendDict.topic_id, SubtopicPageContentsObjectFactory.createFromBackendDict(subtopicPageBackendDict.page_contents), subtopicPageBackendDict.language_code);
        };
        SubtopicPage.prototype.copyFromSubtopicPage = function (otherSubtopicPage) {
            this._id = otherSubtopicPage.getId();
            this._topicId = otherSubtopicPage.getTopicId();
            this._pageContents = angular.copy(otherSubtopicPage.getPageContents());
            this._languageCode = otherSubtopicPage.getLanguageCode();
        };
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        SubtopicPage['createDefault'] = function (topicId, subtopicId) {
            /* eslint-enable dot-notation */
            return new SubtopicPage(getSubtopicPageId(topicId, subtopicId), topicId, SubtopicPageContentsObjectFactory.createDefault(), 'en');
        };
        // Create an interstitial subtopic page that would be displayed in the
        // editor until the actual subtopic page is fetched from the backend.
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        SubtopicPage['createInterstitialSubtopicPage'] = function () {
            /* eslint-enable dot-notation */
            return new SubtopicPage(null, null, null, 'en');
        };
        return SubtopicPage;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/topic/TopicObjectFactory.ts":
/*!********************************************************************!*\
  !*** ./core/templates/dev/head/domain/topic/TopicObjectFactory.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating and mutating instances of frontend
 * topic domain objects.
 */
__webpack_require__(/*! domain/skill/SkillSummaryObjectFactory.ts */ "./core/templates/dev/head/domain/skill/SkillSummaryObjectFactory.ts");
__webpack_require__(/*! domain/topic/SubtopicObjectFactory.ts */ "./core/templates/dev/head/domain/topic/SubtopicObjectFactory.ts");
oppia.factory('TopicObjectFactory', [
    'SkillSummaryObjectFactory', 'SubtopicObjectFactory',
    function (SkillSummaryObjectFactory, SubtopicObjectFactory) {
        var Topic = function (id, name, description, languageCode, canonicalStoryIds, additionalStoryIds, uncategorizedSkillIds, nextSubtopicId, version, subtopics, skillIdToDescriptionMap) {
            this._id = id;
            this._name = name;
            this._description = description;
            this._languageCode = languageCode;
            this._canonicalStoryIds = canonicalStoryIds;
            this._additionalStoryIds = additionalStoryIds;
            this._uncategorizedSkillSummaries = uncategorizedSkillIds.map(function (skillId) {
                return SkillSummaryObjectFactory.create(skillId, skillIdToDescriptionMap[skillId]);
            });
            this._nextSubtopicId = nextSubtopicId;
            this._version = version;
            this._subtopics = angular.copy(subtopics);
        };
        // Instance methods
        Topic.prototype.getId = function () {
            return this._id;
        };
        Topic.prototype.getName = function () {
            return this._name;
        };
        Topic.prototype.setName = function (name) {
            this._name = name;
        };
        Topic.prototype.getDescription = function () {
            return this._description;
        };
        Topic.prototype.getNextSubtopicId = function () {
            return this._nextSubtopicId;
        };
        Topic.prototype.setDescription = function (description) {
            this._description = description;
        };
        Topic.prototype.getLanguageCode = function () {
            return this._languageCode;
        };
        Topic.prototype.setLanguageCode = function (languageCode) {
            this._languageCode = languageCode;
        };
        Topic.prototype.getVersion = function () {
            return this._version;
        };
        Topic.prototype.validate = function () {
            var issues = [];
            if (this._name === '') {
                issues.push('Topic name should not be empty.');
            }
            var subtopics = this._subtopics;
            var canonicalStoryIds = this._canonicalStoryIds;
            var additionalStoryIds = this._additionalStoryIds;
            for (var i = 0; i < canonicalStoryIds.length; i++) {
                var storyId = canonicalStoryIds[i];
                if (canonicalStoryIds.indexOf(storyId) <
                    canonicalStoryIds.lastIndexOf(storyId)) {
                    issues.push('The canonical story with id ' + storyId + ' is duplicated in' +
                        ' the topic.');
                }
            }
            for (var i = 0; i < additionalStoryIds.length; i++) {
                var storyId = additionalStoryIds[i];
                if (additionalStoryIds.indexOf(storyId) <
                    additionalStoryIds.lastIndexOf(storyId)) {
                    issues.push('The additional story with id ' + storyId + ' is duplicated in' +
                        ' the topic.');
                }
            }
            for (var i = 0; i < canonicalStoryIds.length; i++) {
                if (additionalStoryIds.indexOf(canonicalStoryIds[i]) !== -1) {
                    issues.push('The story with id ' + canonicalStoryIds[i] +
                        ' is present in both canonical and additional stories.');
                }
            }
            var topicSkillIds = angular.copy(this._uncategorizedSkillSummaries.map(function (skillSummary) {
                return skillSummary.getId();
            }));
            for (var i = 0; i < subtopics.length; i++) {
                issues = issues.concat(subtopics[i].validate());
                var skillIds = subtopics[i].getSkillSummaries().map(function (skillSummary) {
                    return skillSummary.getId();
                });
                for (var j = 0; j < skillIds.length; j++) {
                    if (topicSkillIds.indexOf(skillIds[j]) === -1) {
                        topicSkillIds.push(skillIds[j]);
                    }
                    else {
                        issues.push('The skill with id ' + skillIds[j] +
                            ' is duplicated in the topic');
                    }
                }
            }
            return issues;
        };
        Topic.prototype.getSubtopicById = function (subtopicId) {
            for (var i = 0; i < this._subtopics.length; i++) {
                var id = this._subtopics[i].getId();
                if (id === subtopicId) {
                    return this._subtopics[i];
                }
            }
            return null;
        };
        // Adds a new frontend subtopic domain object to this topic.
        Topic.prototype.addSubtopic = function (title) {
            var newSubtopic = SubtopicObjectFactory.createFromTitle(this._nextSubtopicId, title);
            this._subtopics.push(newSubtopic);
            this._nextSubtopicId++;
        };
        // Attempts to remove a subtopic from this topic given the
        // subtopic ID.
        Topic.prototype.deleteSubtopic = function (subtopicId, isNewlyCreated) {
            var subtopicDeleted = false;
            for (var i = 0; i < this._subtopics.length; i++) {
                if (this._subtopics[i].getId() === subtopicId) {
                    // When a subtopic is deleted, all the skills in it are moved to
                    // uncategorized skill ids.
                    var skillSummaries = this._subtopics[i].getSkillSummaries();
                    for (var j = 0; j < skillSummaries.length; j++) {
                        var skillId = skillSummaries[j].getId();
                        var skillDescription = skillSummaries[j].getDescription();
                        if (!this.hasUncategorizedSkill(skillId)) {
                            this._uncategorizedSkillSummaries.push(SkillSummaryObjectFactory.create(skillId, skillDescription));
                        }
                    }
                    this._subtopics.splice(i, 1);
                    subtopicDeleted = true;
                    break;
                }
            }
            if (!subtopicDeleted) {
                throw Error('Subtopic to delete does not exist');
            }
            if (isNewlyCreated) {
                for (var i = 0; i < this._subtopics.length; i++) {
                    if (this._subtopics[i].getId() > subtopicId) {
                        this._subtopics[i].decrementId();
                    }
                }
                this._nextSubtopicId--;
            }
        };
        Topic.prototype.clearSubtopics = function () {
            this._subtopics.length = 0;
        };
        Topic.prototype.getSubtopics = function () {
            return this._subtopics.slice();
        };
        Topic.prototype.addCanonicalStoryId = function (storyId) {
            if (this._canonicalStoryIds.indexOf(storyId) !== -1) {
                throw Error('Given story id already present in canonical story ids.');
            }
            this._canonicalStoryIds.push(storyId);
        };
        Topic.prototype.removeCanonicalStoryId = function (storyId) {
            var index = this._canonicalStoryIds.indexOf(storyId);
            if (index === -1) {
                throw Error('Given story id not present in canonical story ids.');
            }
            this._canonicalStoryIds.splice(index, 1);
        };
        Topic.prototype.clearCanonicalStoryIds = function () {
            this._canonicalStoryIds.length = 0;
        };
        Topic.prototype.getCanonicalStoryIds = function () {
            return this._canonicalStoryIds.slice();
        };
        Topic.prototype.addAdditionalStoryId = function (storyId) {
            if (this._additionalStoryIds.indexOf(storyId) !== -1) {
                throw Error('Given story id already present in additional story ids.');
            }
            this._additionalStoryIds.push(storyId);
        };
        Topic.prototype.removeAdditionalStoryId = function (storyId) {
            var index = this._additionalStoryIds.indexOf(storyId);
            if (index === -1) {
                throw Error('Given story id not present in additional story ids.');
            }
            this._additionalStoryIds.splice(index, 1);
        };
        Topic.prototype.clearAdditionalStoryIds = function () {
            this._additionalStoryIds.length = 0;
        };
        Topic.prototype.getAdditionalStoryIds = function () {
            return this._additionalStoryIds.slice();
        };
        Topic.prototype.hasUncategorizedSkill = function (skillId) {
            return this._uncategorizedSkillSummaries.some(function (skillSummary) {
                return skillSummary.getId() === skillId;
            });
        };
        Topic.prototype.addUncategorizedSkill = function (skillId, skillDescription) {
            var skillIsPresentInSomeSubtopic = false;
            for (var i = 0; i < this._subtopics.length; i++) {
                if (this._subtopics[i].hasSkill(skillId)) {
                    skillIsPresentInSomeSubtopic = true;
                    break;
                }
            }
            if (skillIsPresentInSomeSubtopic) {
                throw Error('Given skillId is already present in a subtopic.');
            }
            if (this.hasUncategorizedSkill(skillId)) {
                throw Error('Given skillId is already an uncategorized skill.');
            }
            this._uncategorizedSkillSummaries.push(SkillSummaryObjectFactory.create(skillId, skillDescription));
        };
        Topic.prototype.removeUncategorizedSkill = function (skillId) {
            var index = this._uncategorizedSkillSummaries.map(function (skillSummary) {
                return skillSummary.getId();
            }).indexOf(skillId);
            if (index === -1) {
                throw Error('Given skillId is not an uncategorized skill.');
            }
            this._uncategorizedSkillSummaries.splice(index, 1);
        };
        Topic.prototype.clearUncategorizedSkills = function () {
            this._uncategorizedSkillSummaries.length = 0;
        };
        Topic.prototype.getUncategorizedSkillSummaries = function () {
            return this._uncategorizedSkillSummaries.slice();
        };
        // Reassigns all values within this topic to match the existing
        // topic. This is performed as a deep copy such that none of the
        // internal, bindable objects are changed within this topic.
        Topic.prototype.copyFromTopic = function (otherTopic) {
            this._id = otherTopic.getId();
            this.setName(otherTopic.getName());
            this.setDescription(otherTopic.getDescription());
            this.setLanguageCode(otherTopic.getLanguageCode());
            this._version = otherTopic.getVersion();
            this._nextSubtopicId = otherTopic.getNextSubtopicId();
            this.clearAdditionalStoryIds();
            this.clearCanonicalStoryIds();
            this.clearUncategorizedSkills();
            this.clearSubtopics();
            var canonicalStoryIds = otherTopic.getCanonicalStoryIds();
            for (var i = 0; i < canonicalStoryIds.length; i++) {
                this.addCanonicalStoryId(canonicalStoryIds[i]);
            }
            var additionalStoryIds = otherTopic.getAdditionalStoryIds();
            for (var i = 0; i < additionalStoryIds.length; i++) {
                this.addAdditionalStoryId(additionalStoryIds[i]);
            }
            var uncategorizedSkillSummaries = otherTopic.getUncategorizedSkillSummaries();
            for (var i = 0; i < uncategorizedSkillSummaries.length; i++) {
                this.addUncategorizedSkill(uncategorizedSkillSummaries[i].getId(), uncategorizedSkillSummaries[i].getDescription());
            }
            this._subtopics = angular.copy(otherTopic.getSubtopics());
        };
        // Static class methods. Note that "this" is not available in static
        // contexts. This function takes a JSON object which represents a backend
        // topic python dict.
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Topic['create'] = function (topicBackendDict, skillIdToDescriptionDict) {
            /* eslint-enable dot-notation */
            var subtopics = topicBackendDict.subtopics.map(function (subtopic) {
                return SubtopicObjectFactory.create(subtopic, skillIdToDescriptionDict);
            });
            return new Topic(topicBackendDict.id, topicBackendDict.name, topicBackendDict.description, topicBackendDict.language_code, topicBackendDict.canonical_story_ids, topicBackendDict.additional_story_ids, topicBackendDict.uncategorized_skill_ids, topicBackendDict.next_subtopic_id, topicBackendDict.version, subtopics, skillIdToDescriptionDict);
        };
        // Create an interstitial topic that would be displayed in the editor until
        // the actual topic is fetched from the backend.
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Topic['createInterstitialTopic'] = function () {
            /* eslint-enable dot-notation */
            return new Topic(null, 'Topic name loading', 'Topic description loading', 'en', [], [], [], 1, 1, [], {});
        };
        return Topic;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/topic/TopicRightsBackendApiService.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/topic/TopicRightsBackendApiService.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to change the rights of topic in the backend.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
oppia.factory('TopicRightsBackendApiService', [
    '$http', '$log', '$q', 'UrlInterpolationService',
    'TOPIC_MANAGER_RIGHTS_URL_TEMPLATE', 'TOPIC_RIGHTS_URL_TEMPLATE',
    function ($http, $log, $q, UrlInterpolationService, TOPIC_MANAGER_RIGHTS_URL_TEMPLATE, TOPIC_RIGHTS_URL_TEMPLATE) {
        // Maps previously loaded topic rights to their IDs.
        var topicRightsCache = {};
        var _fetchTopicRights = function (topicId, successCallback, errorCallback) {
            var topicRightsUrl = UrlInterpolationService.interpolateUrl(TOPIC_RIGHTS_URL_TEMPLATE, {
                topic_id: topicId
            });
            $http.get(topicRightsUrl).then(function (response) {
                if (successCallback) {
                    successCallback(response.data);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _setTopicStatus = function (topicId, publishStatus, successCallback, errorCallback) {
            var changeTopicStatusUrl = UrlInterpolationService.interpolateUrl('/rightshandler/change_topic_status/<topic_id>', {
                topic_id: topicId
            });
            var putParams = {
                publish_status: publishStatus
            };
            $http.put(changeTopicStatusUrl, putParams).then(function (response) {
                topicRightsCache[topicId] = response.data;
                if (successCallback) {
                    successCallback(response.data);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _sendMail = function (topicId, topicName, successCallback, errorCallback) {
            var sendMailUrl = UrlInterpolationService.interpolateUrl('/rightshandler/send_topic_publish_mail/<topic_id>', {
                topic_id: topicId
            });
            var putParams = {
                topic_name: topicName
            };
            $http.put(sendMailUrl, putParams).then(function (response) {
                if (successCallback) {
                    successCallback();
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _isCached = function (topicId) {
            return topicRightsCache.hasOwnProperty(topicId);
        };
        return {
            /**
             * Gets a topic's rights, given its ID.
             */
            fetchTopicRights: function (topicId) {
                return $q(function (resolve, reject) {
                    _fetchTopicRights(topicId, resolve, reject);
                });
            },
            /**
             * Behaves exactly as fetchTopicRights (including callback
             * behavior and returning a promise object), except this function will
             * attempt to see whether the given topic rights has been
             * cached. If it has not yet been cached, it will fetch the topic
             * rights from the backend. If it successfully retrieves the topic
             * rights from the backend, it will store it in the cache to avoid
             * requests from the backend in further function calls.
             */
            loadTopicRights: function (topicId) {
                return $q(function (resolve, reject) {
                    if (_isCached(topicId)) {
                        if (resolve) {
                            resolve(topicRightsCache[topicId]);
                        }
                    }
                    else {
                        _fetchTopicRights(topicId, function (topicRights) {
                            // Save the fetched topic rights to avoid future fetches.
                            topicRightsCache[topicId] = topicRights;
                            if (resolve) {
                                resolve(topicRightsCache[topicId]);
                            }
                        }, reject);
                    }
                });
            },
            /**
             * Returns whether the given topic rights is stored within the
             * local data cache or if it needs to be retrieved from the backend
             * upon a laod.
             */
            isCached: function (topicId) {
                return _isCached(topicId);
            },
            /**
             * Replaces the current topic rights in the cache given by the
             * specified topic ID with a new topic rights object.
             */
            cacheTopicRights: function (topicId, topicRights) {
                topicRightsCache[topicId] = angular.copy(topicRights);
            },
            /**
             * Publishes a topic.
             */
            publishTopic: function (topicId) {
                return $q(function (resolve, reject) {
                    _setTopicStatus(topicId, true, resolve, reject);
                });
            },
            sendMail: function (topicId, topicName) {
                return $q(function (resolve, reject) {
                    _sendMail(topicId, topicName, resolve, reject);
                });
            },
            /**
             * Unpublishes a topic.
             */
            unpublishTopic: function (topicId) {
                return $q(function (resolve, reject) {
                    _setTopicStatus(topicId, false, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/topic/TopicRightsObjectFactory.ts":
/*!**************************************************************************!*\
  !*** ./core/templates/dev/head/domain/topic/TopicRightsObjectFactory.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating and mutating instances of frontend
 * topic rights domain objects.
 */
oppia.factory('TopicRightsObjectFactory', [
    function () {
        var TopicRights = function (published, canPublishTopic, canEditTopic) {
            this._published = published;
            this._canPublishTopic = canPublishTopic;
            this._canEditTopic = canEditTopic;
        };
        // Instance methods
        TopicRights.prototype.canEditTopic = function () {
            return this._canEditTopic;
        };
        TopicRights.prototype.isPublished = function () {
            return this._published;
        };
        TopicRights.prototype.canPublishTopic = function () {
            return this._canPublishTopic;
        };
        // Currently only admins can publish/unpublish a topic or edit its name.
        TopicRights.prototype.canEditName = function () {
            return this._canPublishTopic;
        };
        // Sets _isPublished to true only if the user can publish the
        // corresponding topic.
        TopicRights.prototype.markTopicAsPublished = function () {
            if (this._canPublishTopic) {
                this._published = true;
            }
            else {
                throw new Error('User is not allowed to publish this topic.');
            }
        };
        // Sets _isPublished to false if user can unpublish the topic.
        TopicRights.prototype.markTopicAsUnpublished = function () {
            if (this._canPublishTopic) {
                this._published = false;
            }
            else {
                throw new Error('User is not allowed to unpublish this topic.');
            }
        };
        // This function takes a JSON object which represents a backend
        // topic python dict.
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        TopicRights['createFromBackendDict'] = function (topicRightsBackendObject) {
            /* eslint-enable dot-notation */
            return new TopicRights(topicRightsBackendObject.published, topicRightsBackendObject.can_publish_topic, topicRightsBackendObject.can_edit_topic);
        };
        // Reassigns all values within this topic to match the existing
        // topic rights. This is performed as a deep copy such that none of the
        // internal, bindable objects are changed within this topic rights.
        TopicRights.prototype.copyFromTopicRights = function (otherTopicRights) {
            this._published = otherTopicRights.isPublished();
            this._canEditTopic = otherTopicRights.canEditTopic();
            this._canPublishTopic = otherTopicRights.canPublishTopic();
        };
        // This creates an interstitial topic rights object which acts as a
        // placeholder until the actual topic rights object is fetched from
        // the backend. Since it is acting as a placeholder, it should be valid and
        // hence the most restrictive rights are given to the object.
        // TODO (ankita240796) Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        TopicRights['createInterstitialRights'] = function () {
            /* eslint-enable dot-notation */
            return new TopicRights(false, false, false);
        };
        return TopicRights;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/topic/TopicUpdateService.ts":
/*!********************************************************************!*\
  !*** ./core/templates/dev/head/domain/topic/TopicUpdateService.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to build changes to a topic. These changes may
 * then be used by other services, such as a backend API service to update the
 * topic in the backend. This service also registers all changes with the
 * undo/redo service.
 */
__webpack_require__(/*! domain/editor/undo_redo/ChangeObjectFactory.ts */ "./core/templates/dev/head/domain/editor/undo_redo/ChangeObjectFactory.ts");
__webpack_require__(/*! domain/editor/undo_redo/UndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/UndoRedoService.ts");
// These should match the constants defined in core.domain.topic_domain.
oppia.constant('CMD_ADD_SUBTOPIC', 'add_subtopic');
oppia.constant('CMD_DELETE_SUBTOPIC', 'delete_subtopic');
oppia.constant('CMD_ADD_UNCATEGORIZED_SKILL_ID', 'add_uncategorized_skill_id');
oppia.constant('CMD_REMOVE_UNCATEGORIZED_SKILL_ID', 'remove_uncategorized_skill_id');
oppia.constant('CMD_MOVE_SKILL_ID_TO_SUBTOPIC', 'move_skill_id_to_subtopic');
oppia.constant('CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC', 'remove_skill_id_from_subtopic');
oppia.constant('CMD_UPDATE_TOPIC_PROPERTY', 'update_topic_property');
oppia.constant('CMD_UPDATE_SUBTOPIC_PROPERTY', 'update_subtopic_property');
oppia.constant('CMD_UPDATE_SUBTOPIC_PAGE_PROPERTY', 'update_subtopic_page_property');
oppia.constant('TOPIC_PROPERTY_NAME', 'name');
oppia.constant('TOPIC_PROPERTY_DESCRIPTION', 'description');
oppia.constant('TOPIC_PROPERTY_CANONICAL_STORY_IDS', 'canonical_story_ids');
oppia.constant('TOPIC_PROPERTY_ADDITIONAL_STORY_IDS', 'additional_story_ids');
oppia.constant('TOPIC_PROPERTY_LANGUAGE_CODE', 'language_code');
oppia.constant('SUBTOPIC_PROPERTY_TITLE', 'title');
oppia.constant('SUBTOPIC_PAGE_PROPERTY_PAGE_CONTENTS_HTML', 'page_contents_html');
oppia.constant('SUBTOPIC_PAGE_PROPERTY_PAGE_CONTENTS_AUDIO', 'page_contents_audio');
oppia.factory('TopicUpdateService', [
    'ChangeObjectFactory', 'UndoRedoService',
    'CMD_ADD_SUBTOPIC', 'CMD_ADD_UNCATEGORIZED_SKILL_ID',
    'CMD_DELETE_SUBTOPIC', 'CMD_MOVE_SKILL_ID_TO_SUBTOPIC',
    'CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC', 'CMD_REMOVE_UNCATEGORIZED_SKILL_ID',
    'CMD_UPDATE_SUBTOPIC_PAGE_PROPERTY', 'CMD_UPDATE_SUBTOPIC_PROPERTY',
    'CMD_UPDATE_TOPIC_PROPERTY', 'SUBTOPIC_PAGE_PROPERTY_PAGE_CONTENTS_AUDIO',
    'SUBTOPIC_PAGE_PROPERTY_PAGE_CONTENTS_HTML', 'SUBTOPIC_PROPERTY_TITLE',
    'TOPIC_PROPERTY_ADDITIONAL_STORY_IDS', 'TOPIC_PROPERTY_CANONICAL_STORY_IDS',
    'TOPIC_PROPERTY_DESCRIPTION', 'TOPIC_PROPERTY_LANGUAGE_CODE',
    'TOPIC_PROPERTY_NAME', function (ChangeObjectFactory, UndoRedoService, CMD_ADD_SUBTOPIC, CMD_ADD_UNCATEGORIZED_SKILL_ID, CMD_DELETE_SUBTOPIC, CMD_MOVE_SKILL_ID_TO_SUBTOPIC, CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC, CMD_REMOVE_UNCATEGORIZED_SKILL_ID, CMD_UPDATE_SUBTOPIC_PAGE_PROPERTY, CMD_UPDATE_SUBTOPIC_PROPERTY, CMD_UPDATE_TOPIC_PROPERTY, SUBTOPIC_PAGE_PROPERTY_PAGE_CONTENTS_AUDIO, SUBTOPIC_PAGE_PROPERTY_PAGE_CONTENTS_HTML, SUBTOPIC_PROPERTY_TITLE, TOPIC_PROPERTY_ADDITIONAL_STORY_IDS, TOPIC_PROPERTY_CANONICAL_STORY_IDS, TOPIC_PROPERTY_DESCRIPTION, TOPIC_PROPERTY_LANGUAGE_CODE, TOPIC_PROPERTY_NAME) {
        // Creates a change using an apply function, reverse function, a change
        // command and related parameters. The change is applied to a given
        // topic.
        // entity can be a topic object or a subtopic page object.
        var _applyChange = function (entity, command, params, apply, reverse) {
            var changeDict = angular.copy(params);
            changeDict.cmd = command;
            var changeObj = ChangeObjectFactory.create(changeDict, apply, reverse);
            UndoRedoService.applyChange(changeObj, entity);
        };
        var _getParameterFromChangeDict = function (changeDict, paramName) {
            return changeDict[paramName];
        };
        // Applies a topic property change, specifically. See _applyChange()
        // for details on the other behavior of this function.
        var _applyTopicPropertyChange = function (topic, propertyName, newValue, oldValue, apply, reverse) {
            _applyChange(topic, CMD_UPDATE_TOPIC_PROPERTY, {
                property_name: propertyName,
                new_value: angular.copy(newValue),
                old_value: angular.copy(oldValue),
                change_affects_subtopic_page: false
            }, apply, reverse);
        };
        var _applySubtopicPropertyChange = function (topic, propertyName, subtopicId, newValue, oldValue, apply, reverse) {
            _applyChange(topic, CMD_UPDATE_SUBTOPIC_PROPERTY, {
                subtopic_id: subtopicId,
                property_name: propertyName,
                new_value: angular.copy(newValue),
                old_value: angular.copy(oldValue),
                change_affects_subtopic_page: false
            }, apply, reverse);
        };
        var _applySubtopicPagePropertyChange = function (subtopicPage, propertyName, subtopicId, newValue, oldValue, apply, reverse) {
            _applyChange(subtopicPage, CMD_UPDATE_SUBTOPIC_PAGE_PROPERTY, {
                subtopic_id: subtopicId,
                property_name: propertyName,
                new_value: angular.copy(newValue),
                old_value: angular.copy(oldValue),
                change_affects_subtopic_page: true
            }, apply, reverse);
        };
        var _getNewPropertyValueFromChangeDict = function (changeDict) {
            return _getParameterFromChangeDict(changeDict, 'new_value');
        };
        var _getSubtopicIdFromChangeDict = function (changeDict) {
            return _getParameterFromChangeDict(changeDict, 'subtopic_id');
        };
        // These functions are associated with updates available in
        // core.domain.topic_services.apply_change_list.
        return {
            /**
             * Changes the name of a topic and records the change in the
             * undo/redo service.
             */
            setTopicName: function (topic, name) {
                var oldName = angular.copy(topic.getName());
                _applyTopicPropertyChange(topic, TOPIC_PROPERTY_NAME, name, oldName, function (changeDict, topic) {
                    // Apply
                    var name = _getNewPropertyValueFromChangeDict(changeDict);
                    topic.setName(name);
                }, function (changeDict, topic) {
                    // Undo.
                    topic.setName(oldName);
                });
            },
            /**
             * Changes the description of a topic and records the change in the
             * undo/redo service.
             */
            setTopicDescription: function (topic, description) {
                var oldDescription = angular.copy(topic.getDescription());
                _applyTopicPropertyChange(topic, TOPIC_PROPERTY_DESCRIPTION, description, oldDescription, function (changeDict, topic) {
                    // Apply
                    var description = _getNewPropertyValueFromChangeDict(changeDict);
                    topic.setDescription(description);
                }, function (changeDict, topic) {
                    // Undo.
                    topic.setDescription(oldDescription);
                });
            },
            /**
             * Changes the language code of a topic and records the change in
             * the undo/redo service.
             */
            setTopicLanguageCode: function (topic, languageCode) {
                var oldLanguageCode = angular.copy(topic.getLanguageCode());
                _applyTopicPropertyChange(topic, TOPIC_PROPERTY_LANGUAGE_CODE, languageCode, oldLanguageCode, function (changeDict, topic) {
                    // Apply.
                    var languageCode = _getNewPropertyValueFromChangeDict(changeDict);
                    topic.setLanguageCode(languageCode);
                }, function (changeDict, topic) {
                    // Undo.
                    topic.setLanguageCode(oldLanguageCode);
                });
            },
            /**
             * Creates a subtopic and adds it to the topic and records the change in
             * the undo/redo service.
             */
            addSubtopic: function (topic, title) {
                var nextSubtopicId = topic.getNextSubtopicId();
                _applyChange(topic, CMD_ADD_SUBTOPIC, {
                    subtopic_id: nextSubtopicId,
                    title: title,
                    change_affects_subtopic_page: false
                }, function (changeDict, topic) {
                    // Apply.
                    topic.addSubtopic(title);
                }, function (changeDict, topic) {
                    // Undo.
                    var subtopicId = _getSubtopicIdFromChangeDict(changeDict);
                    topic.deleteSubtopic(subtopicId);
                });
            },
            /**
             * @param {Topic} topic - The topic object to be edited.
             * @param {number} subtopicId - The id of the subtopic to delete.
             */
            deleteSubtopic: function (topic, subtopicId) {
                var subtopic = topic.getSubtopicById(subtopicId);
                if (!subtopic) {
                    throw Error('Subtopic doesn\'t exist');
                }
                var newlyCreated = false;
                var changeList = UndoRedoService.getCommittableChangeList();
                for (var i = 0; i < changeList.length; i++) {
                    if (changeList[i].cmd === 'add_subtopic' &&
                        changeList[i].subtopic_id === subtopicId) {
                        newlyCreated = true;
                    }
                }
                if (newlyCreated) {
                    // Get the current change list.
                    var currentChangeList = UndoRedoService.getChangeList();
                    var indicesToDelete = [];
                    // Loop over the current changelist and handle all the cases where
                    // a skill moved into the subtopic or moved out of it.
                    for (var i = 0; i < currentChangeList.length; i++) {
                        var changeDict = currentChangeList[i].getBackendChangeObject();
                        if (changeDict.cmd === CMD_MOVE_SKILL_ID_TO_SUBTOPIC) {
                            // If a skill was moved into the subtopic, then that change is
                            // modified to have the skill move into the uncategorized section
                            // since after this delete, it would be as if this subtopic never
                            // existed.
                            if (changeDict.new_subtopic_id === subtopicId) {
                                // If the origin of the move operation was the uncategorized
                                // section itself, delete that change, since no change is to be
                                // done following the previous comment.
                                if (changeDict.old_subtopic_id === null) {
                                    indicesToDelete.push(i);
                                }
                                else {
                                    // Change the move operation to the deleted subtopic to a
                                    // remove operation, to move that skill into the uncategorized
                                    // section from its origin.
                                    changeDict.cmd = CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC;
                                    changeDict.subtopic_id = changeDict.old_subtopic_id;
                                    delete changeDict.old_subtopic_id;
                                    delete changeDict.new_subtopic_id;
                                }
                            }
                            else if (changeDict.old_subtopic_id === subtopicId) {
                                // Any operation where a skill was moved out of this subtopic
                                // would now be equivalent to a move out from the uncategorized
                                // section, as a newly created subtopic wouldn't have any skills
                                // of its own initially, and any skills moved into it have been
                                // shifted to the uncategorized section.
                                changeDict.old_subtopic_id = null;
                            }
                        }
                        else if (changeDict.cmd === CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC) {
                            // If a skill was removed from this subtopic, then that change
                            // should be deleted, since all skills moved into the subtopic
                            // have already been moved into the uncategorized section.
                            if (changeDict.subtopic_id === subtopicId) {
                                indicesToDelete.push(i);
                            }
                        }
                        currentChangeList[i].setBackendChangeObject(changeDict);
                    }
                    for (var i = 0; i < currentChangeList.length; i++) {
                        var backendChangeDict = currentChangeList[i].getBackendChangeObject();
                        if (backendChangeDict.hasOwnProperty('subtopic_id')) {
                            if (backendChangeDict.subtopic_id === subtopicId) {
                                // The indices in the change list corresponding to changes to
                                // the currently deleted and newly created subtopic are to be
                                // removed from the list.
                                indicesToDelete.push(i);
                                continue;
                            }
                            // When a newly created subtopic is deleted, the subtopics created
                            // after it would have their id reduced by 1.
                            if (backendChangeDict.subtopic_id > subtopicId) {
                                backendChangeDict.subtopic_id--;
                            }
                        }
                        if (backendChangeDict.hasOwnProperty('old_subtopic_id')) {
                            if (backendChangeDict.old_subtopic_id > subtopicId) {
                                backendChangeDict.old_subtopic_id--;
                            }
                        }
                        if (backendChangeDict.hasOwnProperty('new_subtopic_id')) {
                            if (backendChangeDict.new_subtopic_id > subtopicId) {
                                backendChangeDict.new_subtopic_id--;
                            }
                        }
                        // Apply the above id reduction changes to the backend change.
                        currentChangeList[i].setBackendChangeObject(backendChangeDict);
                    }
                    // The new change list is found by deleting the above found elements.
                    var newChangeList = currentChangeList.filter(function (change) {
                        var changeObjectIndex = currentChangeList.indexOf(change);
                        // Return all elements that were not deleted.
                        return (indicesToDelete.indexOf(changeObjectIndex) === -1);
                    });
                    // The new changelist is set.
                    UndoRedoService.setChangeList(newChangeList);
                    topic.deleteSubtopic(subtopicId, newlyCreated);
                    return;
                }
                _applyChange(topic, CMD_DELETE_SUBTOPIC, {
                    subtopic_id: subtopicId,
                    change_affects_subtopic_page: false
                }, function (changeDict, topic) {
                    // Apply.
                    topic.deleteSubtopic(subtopicId, newlyCreated);
                }, function (changeDict, topic) {
                    // Undo.
                    throw Error('A deleted subtopic cannot be restored');
                });
            },
            /**
             * Moves a skill to a subtopic from either another subtopic or
             * uncategorized skills and records the change in the undo/redo service.
             */
            moveSkillToSubtopic: function (topic, oldSubtopicId, newSubtopicId, skillSummary) {
                if (newSubtopicId === null) {
                    throw Error('New subtopic cannot be null');
                }
                if (oldSubtopicId !== null) {
                    var oldSubtopic = topic.getSubtopicById(oldSubtopicId);
                }
                var newSubtopic = topic.getSubtopicById(newSubtopicId);
                _applyChange(topic, CMD_MOVE_SKILL_ID_TO_SUBTOPIC, {
                    old_subtopic_id: oldSubtopicId,
                    new_subtopic_id: newSubtopicId,
                    skill_id: skillSummary.getId(),
                    change_affects_subtopic_page: false
                }, function (changeDict, topic) {
                    // Apply.
                    if (oldSubtopicId === null) {
                        topic.removeUncategorizedSkill(skillSummary.getId());
                    }
                    else {
                        oldSubtopic.removeSkill(skillSummary.getId());
                    }
                    newSubtopic.addSkill(skillSummary.getId(), skillSummary.getDescription());
                }, function (changeDict, topic) {
                    // Undo.
                    newSubtopic.removeSkill(skillSummary.getId());
                    if (oldSubtopicId === null) {
                        topic.addUncategorizedSkill(skillSummary.getId(), skillSummary.getDescription());
                    }
                    else {
                        oldSubtopic.addSkill(skillSummary.getId(), skillSummary.getDescription());
                    }
                });
            },
            /**
             * Moves a skill from a subtopic to uncategorized skills
             * and records the change in the undo/redo service.
             */
            removeSkillFromSubtopic: function (topic, subtopicId, skillSummary) {
                var subtopic = topic.getSubtopicById(subtopicId);
                _applyChange(topic, CMD_REMOVE_SKILL_ID_FROM_SUBTOPIC, {
                    subtopic_id: subtopicId,
                    skill_id: skillSummary.getId(),
                    change_affects_subtopic_page: false
                }, function (changeDict, topic) {
                    // Apply.
                    subtopic.removeSkill(skillSummary.getId());
                    if (!topic.hasUncategorizedSkill(skillSummary.getId())) {
                        topic.addUncategorizedSkill(skillSummary.getId(), skillSummary.getDescription());
                    }
                }, function (changeDict, topic) {
                    // Undo.
                    subtopic.addSkill(skillSummary.getId(), skillSummary.getDescription());
                    topic.removeUncategorizedSkill(skillSummary.getId());
                });
            },
            /**
             * Changes the title of a subtopic and records the change in
             * the undo/redo service.
             */
            setSubtopicTitle: function (topic, subtopicId, title) {
                var subtopic = topic.getSubtopicById(subtopicId);
                if (!subtopic) {
                    throw Error('Subtopic doesn\'t exist');
                }
                var oldTitle = angular.copy(subtopic.getTitle());
                _applySubtopicPropertyChange(topic, SUBTOPIC_PROPERTY_TITLE, subtopicId, title, oldTitle, function (changeDict, topic) {
                    // Apply.
                    var title = _getNewPropertyValueFromChangeDict(changeDict);
                    subtopic.setTitle(title);
                }, function (changeDict, topic) {
                    // Undo.
                    subtopic.setTitle(oldTitle);
                });
            },
            setSubtopicPageContentsHtml: function (subtopicPage, subtopicId, newSubtitledHtml) {
                var oldSubtitledHtml = angular.copy(subtopicPage.getPageContents().getSubtitledHtml());
                _applySubtopicPagePropertyChange(subtopicPage, SUBTOPIC_PAGE_PROPERTY_PAGE_CONTENTS_HTML, subtopicId, newSubtitledHtml.toBackendDict(), oldSubtitledHtml.toBackendDict(), function (changeDict, subtopicPage) {
                    // Apply.
                    subtopicPage.getPageContents().setSubtitledHtml(newSubtitledHtml);
                }, function (changeDict, subtopicPage) {
                    // Undo.
                    subtopicPage.getPageContents().setSubtitledHtml(oldSubtitledHtml);
                });
            },
            setSubtopicPageContentsAudio: function (subtopicPage, subtopicId, newContentIdsToAudioTranslations) {
                var oldContentIdsToAudioTranslations = angular.copy(subtopicPage.getPageContents().getContentIdsToAudioTranslations());
                _applySubtopicPagePropertyChange(subtopicPage, SUBTOPIC_PAGE_PROPERTY_PAGE_CONTENTS_AUDIO, subtopicId, newContentIdsToAudioTranslations.toBackendDict(), oldContentIdsToAudioTranslations.toBackendDict(), function (changeDict, subtopicPage) {
                    // Apply.
                    subtopicPage.getPageContents().setContentIdsToAudioTranslations(newContentIdsToAudioTranslations);
                }, function (changeDict, subtopicPage) {
                    // Undo.
                    subtopicPage.getPageContents().setContentIdsToAudioTranslations(oldContentIdsToAudioTranslations);
                });
            },
            /**
             * Adds an additional story id to a topic and records the change
             * in the undo/redo service.
             */
            addAdditionalStoryId: function (topic, storyId) {
                var oldAdditionalStoryIdsList = angular.copy(topic.getAdditionalStoryIds());
                var newAdditionalStoryIdsList = angular.copy(oldAdditionalStoryIdsList);
                newAdditionalStoryIdsList.push(storyId);
                _applyTopicPropertyChange(topic, TOPIC_PROPERTY_ADDITIONAL_STORY_IDS, newAdditionalStoryIdsList, oldAdditionalStoryIdsList, function (changeDict, topic) {
                    // Apply.
                    topic.addAdditionalStoryId(storyId);
                }, function (changeDict, topic) {
                    // Undo.
                    topic.removeAdditionalStoryId(storyId);
                });
            },
            /**
             * Removes an additional story id from a topic and records the change
             * in the undo/redo service.
             */
            removeAdditionalStoryId: function (topic, storyId) {
                var oldAdditionalStoryIdsList = angular.copy(topic.getAdditionalStoryIds());
                var newAdditionalStoryIdsList = angular.copy(oldAdditionalStoryIdsList);
                var index = newAdditionalStoryIdsList.indexOf(storyId);
                if (index === -1) {
                    throw Error('Given story id is not present in additional stories of topic.');
                }
                newAdditionalStoryIdsList.splice(index, 1);
                _applyTopicPropertyChange(topic, TOPIC_PROPERTY_ADDITIONAL_STORY_IDS, newAdditionalStoryIdsList, oldAdditionalStoryIdsList, function (changeDict, topic) {
                    // Apply.
                    topic.removeAdditionalStoryId(storyId);
                }, function (changeDict, topic) {
                    // Undo.
                    topic.addAdditionalStoryId(storyId);
                });
            },
            /**
             * Adds a canonical story id to a topic and records the change
             * in the undo/redo service.
             */
            addCanonicalStoryId: function (topic, storyId) {
                var oldCanonicalStoryIdsList = angular.copy(topic.getCanonicalStoryIds());
                var newCanonicalStoryIdsList = angular.copy(oldCanonicalStoryIdsList);
                newCanonicalStoryIdsList.push(storyId);
                _applyTopicPropertyChange(topic, TOPIC_PROPERTY_CANONICAL_STORY_IDS, newCanonicalStoryIdsList, oldCanonicalStoryIdsList, function (changeDict, topic) {
                    // Apply.
                    topic.addCanonicalStoryId(storyId);
                }, function (changeDict, topic) {
                    // Undo.
                    topic.removeCanonicalStoryId(storyId);
                });
            },
            /**
             * Removes an canonical story id from a topic and records the change
             * in the undo/redo service.
             */
            removeCanonicalStoryId: function (topic, storyId) {
                var oldCanonicalStoryIdsList = angular.copy(topic.getCanonicalStoryIds());
                var newCanonicalStoryIdsList = angular.copy(oldCanonicalStoryIdsList);
                var index = newCanonicalStoryIdsList.indexOf(storyId);
                if (index === -1) {
                    throw Error('Given story id is not present in additional stories of topic.');
                }
                newCanonicalStoryIdsList.splice(index, 1);
                _applyTopicPropertyChange(topic, TOPIC_PROPERTY_CANONICAL_STORY_IDS, newCanonicalStoryIdsList, oldCanonicalStoryIdsList, function (changeDict, topic) {
                    // Apply.
                    topic.removeCanonicalStoryId(storyId);
                }, function (changeDict, topic) {
                    // Undo.
                    topic.addCanonicalStoryId(storyId);
                });
            },
            /**
             * Adds an uncategorized skill to a topic and records the change
             * in the undo/redo service.
             */
            addUncategorizedSkill: function (topic, skillSummary) {
                _applyChange(topic, CMD_ADD_UNCATEGORIZED_SKILL_ID, {
                    new_uncategorized_skill_id: skillSummary.getId(),
                    change_affects_subtopic_page: false
                }, function (changeDict, topic) {
                    // Apply.
                    var newSkillId = _getParameterFromChangeDict(changeDict, 'new_uncategorized_skill_id');
                    topic.addUncategorizedSkill(newSkillId, skillSummary.getDescription());
                }, function (changeDict, topic) {
                    // Undo.
                    var newSkillId = _getParameterFromChangeDict(changeDict, 'new_uncategorized_skill_id');
                    topic.removeUncategorizedSkill(newSkillId);
                });
            },
            /**
             * Removes an uncategorized skill from a topic and records the change
             * in the undo/redo service.
             */
            removeUncategorizedSkill: function (topic, skillSummary) {
                _applyChange(topic, CMD_REMOVE_UNCATEGORIZED_SKILL_ID, {
                    uncategorized_skill_id: skillSummary.getId(),
                    change_affects_subtopic_page: false
                }, function (changeDict, topic) {
                    // Apply.
                    var newSkillId = _getParameterFromChangeDict(changeDict, 'uncategorized_skill_id');
                    topic.removeUncategorizedSkill(newSkillId);
                }, function (changeDict, topic) {
                    // Undo.
                    var newSkillId = _getParameterFromChangeDict(changeDict, 'uncategorized_skill_id');
                    topic.addUncategorizedSkill(newSkillId, skillSummary.getDescription());
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/expressions/ExpressionEvaluatorService.ts":
/*!***************************************************************************!*\
  !*** ./core/templates/dev/head/expressions/ExpressionEvaluatorService.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This file defines the evaluation engine as well as the system operators.
// The evaluator takes the output of the parser (i.e. parse tree) as defined in
// parser.pegjs and produces a javaScript primitive value when the evaluation is
// performed correctly.
// Two cases that can throw an exception (i.e. an Error object):
// - Variable look-up ('#' operator) failure. (ExprUndefinedVarError)
// - Wrong number of arguments in the node for the given operator.
//   (ExprWrongNumArgsError)
// Both errors are children of ExpressionError, so caller can use
// ExpressionError to catch only these expected error cases.
//
// An expression is evaluated in a context consisting of predefined system
// variables, system operators, and system functions. In the input language,
// operators are predefined set of characters in infix, postfix, or ternary
// format (there is currently no postfix operators) while functions have the
// form of function calls (e.g. "abs(10)"). In the parse tree, there is no
// difference between operators and functions. User defined parameters may
// override the meaning of system variables and functions (but not operators).
// Users also can define parameters with new names. Referencing a variable which
// is not defined as a system variable, system function, or user parameter will
// result in ExprUndefinedVarError to be thrown.
//
// All system variables, system operators, and system functions are defined
// as 'system' variable in this file.
//
// TODO(kashida): Split the following section into two:
//     - A general overview of operators (including some concrete examples)
//     - A numbered sequence of steps which a new contributor should follow in
//         order to define a new operator.
// Defining new operators and functions:
// Operators and functions are given an array of arguments which are already all
// evaluated. E.g. for an expression "1 + 2 * 3", the "+" plus operator receives
// values 1 and 6 (i.e. "2 * 3" already evaluated).
// The operators and functions should verify that the argument array
// has the required number of arguments. Operators and functions can coerse the
// input arguments to the desired typed values, or throw an exception if wrong
// type of argument is given.
// type of inputs. This does not prevent operators to eror on wrong parameter
// values (e.g. getting negative number for an index).
// When successful, operators and functions may return any valid JavaScript
// values. In general, an operator always returns the same type of value, but
// there are exceptions (e.g. "+" operator may return a number or a string
// depending on the types of the input arguments).
// Constraints on the input arguments (number, types, and any other
// constraints) as well as the output value and type should be documented.
__webpack_require__(/*! expressions/ExpressionParserService.js */ "./core/templates/dev/head/expressions/ExpressionParserService.js");
__webpack_require__(/*! expressions/ExpressionSyntaxTreeService.ts */ "./core/templates/dev/head/expressions/ExpressionSyntaxTreeService.ts");
// Service for expression evaluation.
oppia.factory('ExpressionEvaluatorService', [
    '$log', 'ExpressionParserService', 'ExpressionSyntaxTreeService',
    function ($log, ExpressionParserService, ExpressionSyntaxTreeService) {
        var evaluateExpression = function (expression, envs) {
            return ExpressionSyntaxTreeService.applyFunctionToParseTree(ExpressionParserService.parse(expression), envs, evaluate);
        };
        /**
         * @param {*} parsed Parse output from the parser. See parser.pegjs for
         *     the data structure.
         * @param {!Array.<!Object>} envs Represents a nested name space
         *     environment to look up the name in. The first element is looked up
         *     first (i.e. has higher precedence).
         */
        var evaluate = function (parsed, envs) {
            // The intermediate nodes of the parse tree are arrays. The terminal
            // nodes are JavaScript primitives (as described in the "Parser output"
            // section of parser.pegjs).
            if (parsed instanceof Array) {
                if (parsed.length === 0) {
                    throw 'Parser generated an intermediate node with zero children';
                }
                if (parsed[0] === '#') {
                    return ExpressionSyntaxTreeService.lookupEnvs(parsed[1], envs);
                }
                // Evaluate rest of the elements, i.e. the arguments.
                var args = parsed.slice(1).map(function (item) {
                    return evaluate(item, envs);
                });
                // The first element should be a function name.
                return ExpressionSyntaxTreeService.lookupEnvs(parsed[0], envs).eval(args);
            }
            // This should be a terminal node with the actual value.
            return parsed;
        };
        return {
            evaluate: evaluate,
            evaluateExpression: evaluateExpression,
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/expressions/ExpressionInterpolationService.ts":
/*!*******************************************************************************!*\
  !*** ./core/templates/dev/head/expressions/ExpressionInterpolationService.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for interpolating expressions.
 */
__webpack_require__(/*! components/forms/forms-unicode-filters/convert-html-to-unicode.filter.ts */ "./core/templates/dev/head/components/forms/forms-unicode-filters/convert-html-to-unicode.filter.ts");
__webpack_require__(/*! expressions/ExpressionEvaluatorService.ts */ "./core/templates/dev/head/expressions/ExpressionEvaluatorService.ts");
__webpack_require__(/*! expressions/ExpressionParserService.js */ "./core/templates/dev/head/expressions/ExpressionParserService.js");
__webpack_require__(/*! expressions/ExpressionSyntaxTreeService.ts */ "./core/templates/dev/head/expressions/ExpressionSyntaxTreeService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
// Interpolates an HTML or a unicode string containing expressions.
// The input value is evaluated against the supplied environments.
//
// Examples:
//   processHtml('abc{{a}}', [{'a': 'b'}]) gives 'abcb'.
//   processHtml('abc{{a}}', [{}]) returns null.
//   processHtml('abc', [{}]) returns 'abc'.
//   processHtml('{[a}}', [{'a': '<button></button>'}])
//     returns '&lt;button&gt;&lt;/button&gt;'.
//   processUnicode('abc{{a}}', [{'a': 'b'}]) gives 'abcb'.
//   processUnicode('abc{{a}}', [{}]) returns null.
//   processUnicode('{[a}}', [{'a': '<button></button>'}]) returns
//     '<button></button>'.
oppia.factory('ExpressionInterpolationService', [
    '$filter', 'ExpressionEvaluatorService', 'ExpressionParserService',
    'ExpressionSyntaxTreeService', 'HtmlEscaperService',
    function ($filter, ExpressionEvaluatorService, ExpressionParserService, ExpressionSyntaxTreeService, HtmlEscaperService) {
        return {
            // This method should only be used if its result would immediately be
            // displayed on the screen without passing through further computation.
            // It differs from other methods in this service in that it
            // auto-escapes the returned HTML, and returns an 'error' label if the
            // evaluation fails.
            processHtml: function (sourceHtml, envs) {
                return sourceHtml.replace(/{{([^}]*)}}/g, function (match, p1) {
                    try {
                        // TODO(sll): Remove the call to $filter once we have a
                        // custom UI for entering expressions. It is only needed because
                        // expressions are currently input inline via the RTE.
                        return HtmlEscaperService.unescapedStrToEscapedStr(ExpressionEvaluatorService.evaluateExpression($filter('convertHtmlToUnicode')(p1), envs));
                    }
                    catch (e) {
                        var EXPRESSION_ERROR_TAG = ('<oppia-expression-error-tag></oppia-expression-error-tag>');
                        if ((e instanceof ExpressionParserService.SyntaxError) ||
                            (e instanceof ExpressionSyntaxTreeService.ExpressionError)) {
                            return EXPRESSION_ERROR_TAG;
                        }
                        throw e;
                    }
                });
            },
            // Returns null if the evaluation fails.
            processUnicode: function (sourceUnicode, envs) {
                try {
                    return sourceUnicode.replace(/{{([^}]*)}}/g, function (match, p1) {
                        // TODO(sll): Remove the call to $filter once we have a
                        // custom UI for entering expressions. It is only needed because
                        // expressions are currently input inline via the RTE.
                        return ExpressionEvaluatorService.evaluateExpression($filter('convertHtmlToUnicode')(p1), envs);
                    });
                }
                catch (e) {
                    if ((e instanceof ExpressionParserService.SyntaxError) ||
                        (e instanceof ExpressionSyntaxTreeService.ExpressionError)) {
                        return null;
                    }
                    throw e;
                }
            },
            // This works for both unicode and HTML.
            getParamsFromString: function (sourceString) {
                var matches = sourceString.match(/{{([^}]*)}}/g) || [];
                var allParams = [];
                for (var i = 0; i < matches.length; i++) {
                    // Trim the '{{' and '}}'.
                    matches[i] = matches[i].substring(2, matches[i].length - 2);
                    var params = ExpressionSyntaxTreeService.getParamsUsedInExpression($filter('convertHtmlToUnicode')(matches[i]));
                    for (var j = 0; j < params.length; j++) {
                        if (allParams.indexOf(params[j]) === -1) {
                            allParams.push(params[j]);
                        }
                    }
                }
                return allParams.sort();
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/expressions/ExpressionParserService.js":
/*!************************************************************************!*\
  !*** ./core/templates/dev/head/expressions/ExpressionParserService.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

oppia.factory('ExpressionParserService', ['$log', function($log) {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = function(expression) { return expression; },
        peg$c2 = { type: "any", description: "any character" },
        peg$c3 = { type: "other", description: "whitespace" },
        peg$c4 = /^[\t\x0B\f \xA0\uFEFF]/,
        peg$c5 = { type: "class", value: "[\\t\\x0B\\f \\xA0\\uFEFF]", description: "[\\t\\x0B\\f \\xA0\\uFEFF]" },
        peg$c6 = { type: "other", description: "identifier" },
        peg$c7 = void 0,
        peg$c8 = function(name) { return name; },
        peg$c9 = [],
        peg$c10 = function(start, parts) {
              return start + parts.join("");
            },
        peg$c11 = "$",
        peg$c12 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c13 = "_",
        peg$c14 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c15 = "\\",
        peg$c16 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c17 = function(sequence) { return sequence; },
        peg$c18 = "\u200C",
        peg$c19 = { type: "literal", value: "\u200C", description: "\"\\u200C\"" },
        peg$c20 = function() { return "\u200C"; },
        peg$c21 = "\u200D",
        peg$c22 = { type: "literal", value: "\u200D", description: "\"\\u200D\"" },
        peg$c23 = function() { return "\u200D"; },
        peg$c24 = "null",
        peg$c25 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c26 = function() { return null; },
        peg$c27 = "false",
        peg$c28 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c29 = function() { return false; },
        peg$c30 = "true",
        peg$c31 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c32 = function() { return true; },
        peg$c33 = { type: "other", description: "number" },
        peg$c34 = function(literal) {
              return literal;
            },
        peg$c35 = ".",
        peg$c36 = { type: "literal", value: ".", description: "\".\"" },
        peg$c37 = null,
        peg$c38 = function(parts) {
              return parseFloat(parts);
            },
        peg$c39 = function(parts) { return parseFloat(parts); },
        peg$c40 = "0",
        peg$c41 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c42 = /^[0-9]/,
        peg$c43 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c44 = /^[1-9]/,
        peg$c45 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c46 = /^[eE]/,
        peg$c47 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c48 = /^[\-+]/,
        peg$c49 = { type: "class", value: "[\\-+]", description: "[\\-+]" },
        peg$c50 = /^[xX]/,
        peg$c51 = { type: "class", value: "[xX]", description: "[xX]" },
        peg$c52 = function(digits) { return parseInt(digits, 16); },
        peg$c53 = /^[0-9a-fA-F]/,
        peg$c54 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c55 = { type: "other", description: "string" },
        peg$c56 = "\"",
        peg$c57 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c58 = "'",
        peg$c59 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c60 = function(parts) {
              return parts[1];
            },
        peg$c61 = function(chars) { return chars.join(""); },
        peg$c62 = function(char_) { return char_;     },
        peg$c63 = function(sequence) { return sequence;  },
        peg$c64 = function() { return "\0"; },
        peg$c65 = /^['"\\bfnrtv]/,
        peg$c66 = { type: "class", value: "['\"\\\\bfnrtv]", description: "['\"\\\\bfnrtv]" },
        peg$c67 = function(char_) {
              return char_
                .replace("b", "\b")
                .replace("f", "\f")
                .replace("n", "\n")
                .replace("r", "\r")
                .replace("t", "\t")
                .replace("v", "\x0B") // IE does not recognize "\v".
            },
        peg$c68 = function(char_) { return char_; },
        peg$c69 = "x",
        peg$c70 = { type: "literal", value: "x", description: "\"x\"" },
        peg$c71 = "u",
        peg$c72 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c73 = function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        peg$c74 = /^[abcdefghijklmnopqrstuvwxyz\xAA\xB5\xBA\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E\u017F\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199\u019A\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD\u01BE\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233\u0234\u0235\u0236\u0237\u0238\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F\u0250\u0251\u0252\u0253\u0254\u0255\u0256\u0257\u0258\u0259\u025A\u025B\u025C\u025D\u025E\u025F\u0260\u0261\u0262\u0263\u0264\u0265\u0266\u0267\u0268\u0269\u026A\u026B\u026C\u026D\u026E\u026F\u0270\u0271\u0272\u0273\u0274\u0275\u0276\u0277\u0278\u0279\u027A\u027B\u027C\u027D\u027E\u027F\u0280\u0281\u0282\u0283\u0284\u0285\u0286\u0287\u0288\u0289\u028A\u028B\u028C\u028D\u028E\u028F\u0290\u0291\u0292\u0293\u0295\u0296\u0297\u0298\u0299\u029A\u029B\u029C\u029D\u029E\u029F\u02A0\u02A1\u02A2\u02A3\u02A4\u02A5\u02A6\u02A7\u02A8\u02A9\u02AA\u02AB\u02AC\u02AD\u02AE\u02AF\u0371\u0373\u0377\u037B\u037C\u037D\u0390\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\u03D0\u03D1\u03D5\u03D6\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF\u03F0\u03F1\u03F2\u03F3\u03F5\u03F8\u03FB\u03FC\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0450\u0451\u0452\u0453\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\u045D\u045E\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0561\u0562\u0563\u0564\u0565\u0566\u0567\u0568\u0569\u056A\u056B\u056C\u056D\u056E\u056F\u0570\u0571\u0572\u0573\u0574\u0575\u0576\u0577\u0578\u0579\u057A\u057B\u057C\u057D\u057E\u057F\u0580\u0581\u0582\u0583\u0584\u0585\u0586\u0587\u1D00\u1D01\u1D02\u1D03\u1D04\u1D05\u1D06\u1D07\u1D08\u1D09\u1D0A\u1D0B\u1D0C\u1D0D\u1D0E\u1D0F\u1D10\u1D11\u1D12\u1D13\u1D14\u1D15\u1D16\u1D17\u1D18\u1D19\u1D1A\u1D1B\u1D1C\u1D1D\u1D1E\u1D1F\u1D20\u1D21\u1D22\u1D23\u1D24\u1D25\u1D26\u1D27\u1D28\u1D29\u1D2A\u1D2B\u1D62\u1D63\u1D64\u1D65\u1D66\u1D67\u1D68\u1D69\u1D6A\u1D6B\u1D6C\u1D6D\u1D6E\u1D6F\u1D70\u1D71\u1D72\u1D73\u1D74\u1D75\u1D76\u1D77\u1D79\u1D7A\u1D7B\u1D7C\u1D7D\u1D7E\u1D7F\u1D80\u1D81\u1D82\u1D83\u1D84\u1D85\u1D86\u1D87\u1D88\u1D89\u1D8A\u1D8B\u1D8C\u1D8D\u1D8E\u1D8F\u1D90\u1D91\u1D92\u1D93\u1D94\u1D95\u1D96\u1D97\u1D98\u1D99\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95\u1E96\u1E97\u1E98\u1E99\u1E9A\u1E9B\u1E9C\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF\u1F00\u1F01\u1F02\u1F03\u1F04\u1F05\u1F06\u1F07\u1F10\u1F11\u1F12\u1F13\u1F14\u1F15\u1F20\u1F21\u1F22\u1F23\u1F24\u1F25\u1F26\u1F27\u1F30\u1F31\u1F32\u1F33\u1F34\u1F35\u1F36\u1F37\u1F40\u1F41\u1F42\u1F43\u1F44\u1F45\u1F50\u1F51\u1F52\u1F53\u1F54\u1F55\u1F56\u1F57\u1F60\u1F61\u1F62\u1F63\u1F64\u1F65\u1F66\u1F67\u1F70\u1F71\u1F72\u1F73\u1F74\u1F75\u1F76\u1F77\u1F78\u1F79\u1F7A\u1F7B\u1F7C\u1F7D\u1F80\u1F81\u1F82\u1F83\u1F84\u1F85\u1F86\u1F87\u1F90\u1F91\u1F92\u1F93\u1F94\u1F95\u1F96\u1F97\u1FA0\u1FA1\u1FA2\u1FA3\u1FA4\u1FA5\u1FA6\u1FA7\u1FB0\u1FB1\u1FB2\u1FB3\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2\u1FC3\u1FC4\u1FC6\u1FC7\u1FD0\u1FD1\u1FD2\u1FD3\u1FD6\u1FD7\u1FE0\u1FE1\u1FE2\u1FE3\u1FE4\u1FE5\u1FE6\u1FE7\u1FF2\u1FF3\u1FF4\u1FF6\u1FF7\u2071\u207F\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146\u2147\u2148\u2149\u214E\u2184\u2C30\u2C31\u2C32\u2C33\u2C34\u2C35\u2C36\u2C37\u2C38\u2C39\u2C3A\u2C3B\u2C3C\u2C3D\u2C3E\u2C3F\u2C40\u2C41\u2C42\u2C43\u2C44\u2C45\u2C46\u2C47\u2C48\u2C49\u2C4A\u2C4B\u2C4C\u2C4D\u2C4E\u2C4F\u2C50\u2C51\u2C52\u2C53\u2C54\u2C55\u2C56\u2C57\u2C58\u2C59\u2C5A\u2C5B\u2C5C\u2C5D\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76\u2C77\u2C78\u2C79\u2C7A\u2C7B\u2C7C\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2D00\u2D01\u2D02\u2D03\u2D04\u2D05\u2D06\u2D07\u2D08\u2D09\u2D0A\u2D0B\u2D0C\u2D0D\u2D0E\u2D0F\u2D10\u2D11\u2D12\u2D13\u2D14\u2D15\u2D16\u2D17\u2D18\u2D19\u2D1A\u2D1B\u2D1C\u2D1D\u2D1E\u2D1F\u2D20\u2D21\u2D22\u2D23\u2D24\u2D25\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F\uA730\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771\uA772\uA773\uA774\uA775\uA776\uA777\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uFB00\uFB01\uFB02\uFB03\uFB04\uFB05\uFB06\uFB13\uFB14\uFB15\uFB16\uFB17\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A]/,
        peg$c75 = { type: "class", value: "[abcdefghijklmnopqrstuvwxyz\\xAA\\xB5\\xBA\\xDF\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\xE6\\xE7\\xE8\\xE9\\xEA\\xEB\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF6\\xF8\\xF9\\xFA\\xFB\\xFC\\xFD\\xFE\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E\\u017F\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199\\u019A\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD\\u01BE\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233\\u0234\\u0235\\u0236\\u0237\\u0238\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F\\u0250\\u0251\\u0252\\u0253\\u0254\\u0255\\u0256\\u0257\\u0258\\u0259\\u025A\\u025B\\u025C\\u025D\\u025E\\u025F\\u0260\\u0261\\u0262\\u0263\\u0264\\u0265\\u0266\\u0267\\u0268\\u0269\\u026A\\u026B\\u026C\\u026D\\u026E\\u026F\\u0270\\u0271\\u0272\\u0273\\u0274\\u0275\\u0276\\u0277\\u0278\\u0279\\u027A\\u027B\\u027C\\u027D\\u027E\\u027F\\u0280\\u0281\\u0282\\u0283\\u0284\\u0285\\u0286\\u0287\\u0288\\u0289\\u028A\\u028B\\u028C\\u028D\\u028E\\u028F\\u0290\\u0291\\u0292\\u0293\\u0295\\u0296\\u0297\\u0298\\u0299\\u029A\\u029B\\u029C\\u029D\\u029E\\u029F\\u02A0\\u02A1\\u02A2\\u02A3\\u02A4\\u02A5\\u02A6\\u02A7\\u02A8\\u02A9\\u02AA\\u02AB\\u02AC\\u02AD\\u02AE\\u02AF\\u0371\\u0373\\u0377\\u037B\\u037C\\u037D\\u0390\\u03AC\\u03AD\\u03AE\\u03AF\\u03B0\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03CA\\u03CB\\u03CC\\u03CD\\u03CE\\u03D0\\u03D1\\u03D5\\u03D6\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043A\\u043B\\u043C\\u043D\\u043E\\u043F\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044A\\u044B\\u044C\\u044D\\u044E\\u044F\\u0450\\u0451\\u0452\\u0453\\u0454\\u0455\\u0456\\u0457\\u0458\\u0459\\u045A\\u045B\\u045C\\u045D\\u045E\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0561\\u0562\\u0563\\u0564\\u0565\\u0566\\u0567\\u0568\\u0569\\u056A\\u056B\\u056C\\u056D\\u056E\\u056F\\u0570\\u0571\\u0572\\u0573\\u0574\\u0575\\u0576\\u0577\\u0578\\u0579\\u057A\\u057B\\u057C\\u057D\\u057E\\u057F\\u0580\\u0581\\u0582\\u0583\\u0584\\u0585\\u0586\\u0587\\u1D00\\u1D01\\u1D02\\u1D03\\u1D04\\u1D05\\u1D06\\u1D07\\u1D08\\u1D09\\u1D0A\\u1D0B\\u1D0C\\u1D0D\\u1D0E\\u1D0F\\u1D10\\u1D11\\u1D12\\u1D13\\u1D14\\u1D15\\u1D16\\u1D17\\u1D18\\u1D19\\u1D1A\\u1D1B\\u1D1C\\u1D1D\\u1D1E\\u1D1F\\u1D20\\u1D21\\u1D22\\u1D23\\u1D24\\u1D25\\u1D26\\u1D27\\u1D28\\u1D29\\u1D2A\\u1D2B\\u1D62\\u1D63\\u1D64\\u1D65\\u1D66\\u1D67\\u1D68\\u1D69\\u1D6A\\u1D6B\\u1D6C\\u1D6D\\u1D6E\\u1D6F\\u1D70\\u1D71\\u1D72\\u1D73\\u1D74\\u1D75\\u1D76\\u1D77\\u1D79\\u1D7A\\u1D7B\\u1D7C\\u1D7D\\u1D7E\\u1D7F\\u1D80\\u1D81\\u1D82\\u1D83\\u1D84\\u1D85\\u1D86\\u1D87\\u1D88\\u1D89\\u1D8A\\u1D8B\\u1D8C\\u1D8D\\u1D8E\\u1D8F\\u1D90\\u1D91\\u1D92\\u1D93\\u1D94\\u1D95\\u1D96\\u1D97\\u1D98\\u1D99\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95\\u1E96\\u1E97\\u1E98\\u1E99\\u1E9A\\u1E9B\\u1E9C\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF\\u1F00\\u1F01\\u1F02\\u1F03\\u1F04\\u1F05\\u1F06\\u1F07\\u1F10\\u1F11\\u1F12\\u1F13\\u1F14\\u1F15\\u1F20\\u1F21\\u1F22\\u1F23\\u1F24\\u1F25\\u1F26\\u1F27\\u1F30\\u1F31\\u1F32\\u1F33\\u1F34\\u1F35\\u1F36\\u1F37\\u1F40\\u1F41\\u1F42\\u1F43\\u1F44\\u1F45\\u1F50\\u1F51\\u1F52\\u1F53\\u1F54\\u1F55\\u1F56\\u1F57\\u1F60\\u1F61\\u1F62\\u1F63\\u1F64\\u1F65\\u1F66\\u1F67\\u1F70\\u1F71\\u1F72\\u1F73\\u1F74\\u1F75\\u1F76\\u1F77\\u1F78\\u1F79\\u1F7A\\u1F7B\\u1F7C\\u1F7D\\u1F80\\u1F81\\u1F82\\u1F83\\u1F84\\u1F85\\u1F86\\u1F87\\u1F90\\u1F91\\u1F92\\u1F93\\u1F94\\u1F95\\u1F96\\u1F97\\u1FA0\\u1FA1\\u1FA2\\u1FA3\\u1FA4\\u1FA5\\u1FA6\\u1FA7\\u1FB0\\u1FB1\\u1FB2\\u1FB3\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2\\u1FC3\\u1FC4\\u1FC6\\u1FC7\\u1FD0\\u1FD1\\u1FD2\\u1FD3\\u1FD6\\u1FD7\\u1FE0\\u1FE1\\u1FE2\\u1FE3\\u1FE4\\u1FE5\\u1FE6\\u1FE7\\u1FF2\\u1FF3\\u1FF4\\u1FF6\\u1FF7\\u2071\\u207F\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146\\u2147\\u2148\\u2149\\u214E\\u2184\\u2C30\\u2C31\\u2C32\\u2C33\\u2C34\\u2C35\\u2C36\\u2C37\\u2C38\\u2C39\\u2C3A\\u2C3B\\u2C3C\\u2C3D\\u2C3E\\u2C3F\\u2C40\\u2C41\\u2C42\\u2C43\\u2C44\\u2C45\\u2C46\\u2C47\\u2C48\\u2C49\\u2C4A\\u2C4B\\u2C4C\\u2C4D\\u2C4E\\u2C4F\\u2C50\\u2C51\\u2C52\\u2C53\\u2C54\\u2C55\\u2C56\\u2C57\\u2C58\\u2C59\\u2C5A\\u2C5B\\u2C5C\\u2C5D\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76\\u2C77\\u2C78\\u2C79\\u2C7A\\u2C7B\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2D00\\u2D01\\u2D02\\u2D03\\u2D04\\u2D05\\u2D06\\u2D07\\u2D08\\u2D09\\u2D0A\\u2D0B\\u2D0C\\u2D0D\\u2D0E\\u2D0F\\u2D10\\u2D11\\u2D12\\u2D13\\u2D14\\u2D15\\u2D16\\u2D17\\u2D18\\u2D19\\u2D1A\\u2D1B\\u2D1C\\u2D1D\\u2D1E\\u2D1F\\u2D20\\u2D21\\u2D22\\u2D23\\u2D24\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F\\uA730\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771\\uA772\\uA773\\uA774\\uA775\\uA776\\uA777\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uFB00\\uFB01\\uFB02\\uFB03\\uFB04\\uFB05\\uFB06\\uFB13\\uFB14\\uFB15\\uFB16\\uFB17\\uFF41\\uFF42\\uFF43\\uFF44\\uFF45\\uFF46\\uFF47\\uFF48\\uFF49\\uFF4A\\uFF4B\\uFF4C\\uFF4D\\uFF4E\\uFF4F\\uFF50\\uFF51\\uFF52\\uFF53\\uFF54\\uFF55\\uFF56\\uFF57\\uFF58\\uFF59\\uFF5A]", description: "[abcdefghijklmnopqrstuvwxyz\\xAA\\xB5\\xBA\\xDF\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\xE6\\xE7\\xE8\\xE9\\xEA\\xEB\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF6\\xF8\\xF9\\xFA\\xFB\\xFC\\xFD\\xFE\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E\\u017F\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199\\u019A\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD\\u01BE\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233\\u0234\\u0235\\u0236\\u0237\\u0238\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F\\u0250\\u0251\\u0252\\u0253\\u0254\\u0255\\u0256\\u0257\\u0258\\u0259\\u025A\\u025B\\u025C\\u025D\\u025E\\u025F\\u0260\\u0261\\u0262\\u0263\\u0264\\u0265\\u0266\\u0267\\u0268\\u0269\\u026A\\u026B\\u026C\\u026D\\u026E\\u026F\\u0270\\u0271\\u0272\\u0273\\u0274\\u0275\\u0276\\u0277\\u0278\\u0279\\u027A\\u027B\\u027C\\u027D\\u027E\\u027F\\u0280\\u0281\\u0282\\u0283\\u0284\\u0285\\u0286\\u0287\\u0288\\u0289\\u028A\\u028B\\u028C\\u028D\\u028E\\u028F\\u0290\\u0291\\u0292\\u0293\\u0295\\u0296\\u0297\\u0298\\u0299\\u029A\\u029B\\u029C\\u029D\\u029E\\u029F\\u02A0\\u02A1\\u02A2\\u02A3\\u02A4\\u02A5\\u02A6\\u02A7\\u02A8\\u02A9\\u02AA\\u02AB\\u02AC\\u02AD\\u02AE\\u02AF\\u0371\\u0373\\u0377\\u037B\\u037C\\u037D\\u0390\\u03AC\\u03AD\\u03AE\\u03AF\\u03B0\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03CA\\u03CB\\u03CC\\u03CD\\u03CE\\u03D0\\u03D1\\u03D5\\u03D6\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043A\\u043B\\u043C\\u043D\\u043E\\u043F\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044A\\u044B\\u044C\\u044D\\u044E\\u044F\\u0450\\u0451\\u0452\\u0453\\u0454\\u0455\\u0456\\u0457\\u0458\\u0459\\u045A\\u045B\\u045C\\u045D\\u045E\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0561\\u0562\\u0563\\u0564\\u0565\\u0566\\u0567\\u0568\\u0569\\u056A\\u056B\\u056C\\u056D\\u056E\\u056F\\u0570\\u0571\\u0572\\u0573\\u0574\\u0575\\u0576\\u0577\\u0578\\u0579\\u057A\\u057B\\u057C\\u057D\\u057E\\u057F\\u0580\\u0581\\u0582\\u0583\\u0584\\u0585\\u0586\\u0587\\u1D00\\u1D01\\u1D02\\u1D03\\u1D04\\u1D05\\u1D06\\u1D07\\u1D08\\u1D09\\u1D0A\\u1D0B\\u1D0C\\u1D0D\\u1D0E\\u1D0F\\u1D10\\u1D11\\u1D12\\u1D13\\u1D14\\u1D15\\u1D16\\u1D17\\u1D18\\u1D19\\u1D1A\\u1D1B\\u1D1C\\u1D1D\\u1D1E\\u1D1F\\u1D20\\u1D21\\u1D22\\u1D23\\u1D24\\u1D25\\u1D26\\u1D27\\u1D28\\u1D29\\u1D2A\\u1D2B\\u1D62\\u1D63\\u1D64\\u1D65\\u1D66\\u1D67\\u1D68\\u1D69\\u1D6A\\u1D6B\\u1D6C\\u1D6D\\u1D6E\\u1D6F\\u1D70\\u1D71\\u1D72\\u1D73\\u1D74\\u1D75\\u1D76\\u1D77\\u1D79\\u1D7A\\u1D7B\\u1D7C\\u1D7D\\u1D7E\\u1D7F\\u1D80\\u1D81\\u1D82\\u1D83\\u1D84\\u1D85\\u1D86\\u1D87\\u1D88\\u1D89\\u1D8A\\u1D8B\\u1D8C\\u1D8D\\u1D8E\\u1D8F\\u1D90\\u1D91\\u1D92\\u1D93\\u1D94\\u1D95\\u1D96\\u1D97\\u1D98\\u1D99\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95\\u1E96\\u1E97\\u1E98\\u1E99\\u1E9A\\u1E9B\\u1E9C\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF\\u1F00\\u1F01\\u1F02\\u1F03\\u1F04\\u1F05\\u1F06\\u1F07\\u1F10\\u1F11\\u1F12\\u1F13\\u1F14\\u1F15\\u1F20\\u1F21\\u1F22\\u1F23\\u1F24\\u1F25\\u1F26\\u1F27\\u1F30\\u1F31\\u1F32\\u1F33\\u1F34\\u1F35\\u1F36\\u1F37\\u1F40\\u1F41\\u1F42\\u1F43\\u1F44\\u1F45\\u1F50\\u1F51\\u1F52\\u1F53\\u1F54\\u1F55\\u1F56\\u1F57\\u1F60\\u1F61\\u1F62\\u1F63\\u1F64\\u1F65\\u1F66\\u1F67\\u1F70\\u1F71\\u1F72\\u1F73\\u1F74\\u1F75\\u1F76\\u1F77\\u1F78\\u1F79\\u1F7A\\u1F7B\\u1F7C\\u1F7D\\u1F80\\u1F81\\u1F82\\u1F83\\u1F84\\u1F85\\u1F86\\u1F87\\u1F90\\u1F91\\u1F92\\u1F93\\u1F94\\u1F95\\u1F96\\u1F97\\u1FA0\\u1FA1\\u1FA2\\u1FA3\\u1FA4\\u1FA5\\u1FA6\\u1FA7\\u1FB0\\u1FB1\\u1FB2\\u1FB3\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2\\u1FC3\\u1FC4\\u1FC6\\u1FC7\\u1FD0\\u1FD1\\u1FD2\\u1FD3\\u1FD6\\u1FD7\\u1FE0\\u1FE1\\u1FE2\\u1FE3\\u1FE4\\u1FE5\\u1FE6\\u1FE7\\u1FF2\\u1FF3\\u1FF4\\u1FF6\\u1FF7\\u2071\\u207F\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146\\u2147\\u2148\\u2149\\u214E\\u2184\\u2C30\\u2C31\\u2C32\\u2C33\\u2C34\\u2C35\\u2C36\\u2C37\\u2C38\\u2C39\\u2C3A\\u2C3B\\u2C3C\\u2C3D\\u2C3E\\u2C3F\\u2C40\\u2C41\\u2C42\\u2C43\\u2C44\\u2C45\\u2C46\\u2C47\\u2C48\\u2C49\\u2C4A\\u2C4B\\u2C4C\\u2C4D\\u2C4E\\u2C4F\\u2C50\\u2C51\\u2C52\\u2C53\\u2C54\\u2C55\\u2C56\\u2C57\\u2C58\\u2C59\\u2C5A\\u2C5B\\u2C5C\\u2C5D\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76\\u2C77\\u2C78\\u2C79\\u2C7A\\u2C7B\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2D00\\u2D01\\u2D02\\u2D03\\u2D04\\u2D05\\u2D06\\u2D07\\u2D08\\u2D09\\u2D0A\\u2D0B\\u2D0C\\u2D0D\\u2D0E\\u2D0F\\u2D10\\u2D11\\u2D12\\u2D13\\u2D14\\u2D15\\u2D16\\u2D17\\u2D18\\u2D19\\u2D1A\\u2D1B\\u2D1C\\u2D1D\\u2D1E\\u2D1F\\u2D20\\u2D21\\u2D22\\u2D23\\u2D24\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F\\uA730\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771\\uA772\\uA773\\uA774\\uA775\\uA776\\uA777\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uFB00\\uFB01\\uFB02\\uFB03\\uFB04\\uFB05\\uFB06\\uFB13\\uFB14\\uFB15\\uFB16\\uFB17\\uFF41\\uFF42\\uFF43\\uFF44\\uFF45\\uFF46\\uFF47\\uFF48\\uFF49\\uFF4A\\uFF4B\\uFF4C\\uFF4D\\uFF4E\\uFF4F\\uFF50\\uFF51\\uFF52\\uFF53\\uFF54\\uFF55\\uFF56\\uFF57\\uFF58\\uFF59\\uFF5A]" },
        peg$c76 = /^[\u02B0\u02B1\u02B2\u02B3\u02B4\u02B5\u02B6\u02B7\u02B8\u02B9\u02BA\u02BB\u02BC\u02BD\u02BE\u02BF\u02C0\u02C1\u02C6\u02C7\u02C8\u02C9\u02CA\u02CB\u02CC\u02CD\u02CE\u02CF\u02D0\u02D1\u02E0\u02E1\u02E2\u02E3\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1C78\u1C79\u1C7A\u1C7B\u1C7C\u1C7D\u1D2C\u1D2D\u1D2E\u1D2F\u1D30\u1D31\u1D32\u1D33\u1D34\u1D35\u1D36\u1D37\u1D38\u1D39\u1D3A\u1D3B\u1D3C\u1D3D\u1D3E\u1D3F\u1D40\u1D41\u1D42\u1D43\u1D44\u1D45\u1D46\u1D47\u1D48\u1D49\u1D4A\u1D4B\u1D4C\u1D4D\u1D4E\u1D4F\u1D50\u1D51\u1D52\u1D53\u1D54\u1D55\u1D56\u1D57\u1D58\u1D59\u1D5A\u1D5B\u1D5C\u1D5D\u1D5E\u1D5F\u1D60\u1D61\u1D78\u1D9B\u1D9C\u1D9D\u1D9E\u1D9F\u1DA0\u1DA1\u1DA2\u1DA3\u1DA4\u1DA5\u1DA6\u1DA7\u1DA8\u1DA9\u1DAA\u1DAB\u1DAC\u1DAD\u1DAE\u1DAF\u1DB0\u1DB1\u1DB2\u1DB3\u1DB4\u1DB5\u1DB6\u1DB7\u1DB8\u1DB9\u1DBA\u1DBB\u1DBC\u1DBD\u1DBE\u1DBF\u2090\u2091\u2092\u2093\u2094\u2C7D\u2D6F\u2E2F\u3005\u3031\u3032\u3033\u3034\u3035\u303B\u309D\u309E\u30FC\u30FD\u30FE\uA015\uA60C\uA67F\uA717\uA718\uA719\uA71A\uA71B\uA71C\uA71D\uA71E\uA71F\uA770\uA788\uFF70\uFF9E\uFF9F]/,
        peg$c77 = { type: "class", value: "[\\u02B0\\u02B1\\u02B2\\u02B3\\u02B4\\u02B5\\u02B6\\u02B7\\u02B8\\u02B9\\u02BA\\u02BB\\u02BC\\u02BD\\u02BE\\u02BF\\u02C0\\u02C1\\u02C6\\u02C7\\u02C8\\u02C9\\u02CA\\u02CB\\u02CC\\u02CD\\u02CE\\u02CF\\u02D0\\u02D1\\u02E0\\u02E1\\u02E2\\u02E3\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1C78\\u1C79\\u1C7A\\u1C7B\\u1C7C\\u1C7D\\u1D2C\\u1D2D\\u1D2E\\u1D2F\\u1D30\\u1D31\\u1D32\\u1D33\\u1D34\\u1D35\\u1D36\\u1D37\\u1D38\\u1D39\\u1D3A\\u1D3B\\u1D3C\\u1D3D\\u1D3E\\u1D3F\\u1D40\\u1D41\\u1D42\\u1D43\\u1D44\\u1D45\\u1D46\\u1D47\\u1D48\\u1D49\\u1D4A\\u1D4B\\u1D4C\\u1D4D\\u1D4E\\u1D4F\\u1D50\\u1D51\\u1D52\\u1D53\\u1D54\\u1D55\\u1D56\\u1D57\\u1D58\\u1D59\\u1D5A\\u1D5B\\u1D5C\\u1D5D\\u1D5E\\u1D5F\\u1D60\\u1D61\\u1D78\\u1D9B\\u1D9C\\u1D9D\\u1D9E\\u1D9F\\u1DA0\\u1DA1\\u1DA2\\u1DA3\\u1DA4\\u1DA5\\u1DA6\\u1DA7\\u1DA8\\u1DA9\\u1DAA\\u1DAB\\u1DAC\\u1DAD\\u1DAE\\u1DAF\\u1DB0\\u1DB1\\u1DB2\\u1DB3\\u1DB4\\u1DB5\\u1DB6\\u1DB7\\u1DB8\\u1DB9\\u1DBA\\u1DBB\\u1DBC\\u1DBD\\u1DBE\\u1DBF\\u2090\\u2091\\u2092\\u2093\\u2094\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031\\u3032\\u3033\\u3034\\u3035\\u303B\\u309D\\u309E\\u30FC\\u30FD\\u30FE\\uA015\\uA60C\\uA67F\\uA717\\uA718\\uA719\\uA71A\\uA71B\\uA71C\\uA71D\\uA71E\\uA71F\\uA770\\uA788\\uFF70\\uFF9E\\uFF9F]", description: "[\\u02B0\\u02B1\\u02B2\\u02B3\\u02B4\\u02B5\\u02B6\\u02B7\\u02B8\\u02B9\\u02BA\\u02BB\\u02BC\\u02BD\\u02BE\\u02BF\\u02C0\\u02C1\\u02C6\\u02C7\\u02C8\\u02C9\\u02CA\\u02CB\\u02CC\\u02CD\\u02CE\\u02CF\\u02D0\\u02D1\\u02E0\\u02E1\\u02E2\\u02E3\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1C78\\u1C79\\u1C7A\\u1C7B\\u1C7C\\u1C7D\\u1D2C\\u1D2D\\u1D2E\\u1D2F\\u1D30\\u1D31\\u1D32\\u1D33\\u1D34\\u1D35\\u1D36\\u1D37\\u1D38\\u1D39\\u1D3A\\u1D3B\\u1D3C\\u1D3D\\u1D3E\\u1D3F\\u1D40\\u1D41\\u1D42\\u1D43\\u1D44\\u1D45\\u1D46\\u1D47\\u1D48\\u1D49\\u1D4A\\u1D4B\\u1D4C\\u1D4D\\u1D4E\\u1D4F\\u1D50\\u1D51\\u1D52\\u1D53\\u1D54\\u1D55\\u1D56\\u1D57\\u1D58\\u1D59\\u1D5A\\u1D5B\\u1D5C\\u1D5D\\u1D5E\\u1D5F\\u1D60\\u1D61\\u1D78\\u1D9B\\u1D9C\\u1D9D\\u1D9E\\u1D9F\\u1DA0\\u1DA1\\u1DA2\\u1DA3\\u1DA4\\u1DA5\\u1DA6\\u1DA7\\u1DA8\\u1DA9\\u1DAA\\u1DAB\\u1DAC\\u1DAD\\u1DAE\\u1DAF\\u1DB0\\u1DB1\\u1DB2\\u1DB3\\u1DB4\\u1DB5\\u1DB6\\u1DB7\\u1DB8\\u1DB9\\u1DBA\\u1DBB\\u1DBC\\u1DBD\\u1DBE\\u1DBF\\u2090\\u2091\\u2092\\u2093\\u2094\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031\\u3032\\u3033\\u3034\\u3035\\u303B\\u309D\\u309E\\u30FC\\u30FD\\u30FE\\uA015\\uA60C\\uA67F\\uA717\\uA718\\uA719\\uA71A\\uA71B\\uA71C\\uA71D\\uA71E\\uA71F\\uA770\\uA788\\uFF70\\uFF9E\\uFF9F]" },
        peg$c78 = /^[\u01BB\u01C0\u01C1\u01C2\u01C3\u0294\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\u05F0\u05F1\u05F2\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\u063B\u063C\u063D\u063E\u063F\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u066E\u066F\u0671\u0672\u0673\u0674\u0675\u0676\u0677\u0678\u0679\u067A\u067B\u067C\u067D\u067E\u067F\u0680\u0681\u0682\u0683\u0684\u0685\u0686\u0687\u0688\u0689\u068A\u068B\u068C\u068D\u068E\u068F\u0690\u0691\u0692\u0693\u0694\u0695\u0696\u0697\u0698\u0699\u069A\u069B\u069C\u069D\u069E\u069F\u06A0\u06A1\u06A2\u06A3\u06A4\u06A5\u06A6\u06A7\u06A8\u06A9\u06AA\u06AB\u06AC\u06AD\u06AE\u06AF\u06B0\u06B1\u06B2\u06B3\u06B4\u06B5\u06B6\u06B7\u06B8\u06B9\u06BA\u06BB\u06BC\u06BD\u06BE\u06BF\u06C0\u06C1\u06C2\u06C3\u06C4\u06C5\u06C6\u06C7\u06C8\u06C9\u06CA\u06CB\u06CC\u06CD\u06CE\u06CF\u06D0\u06D1\u06D2\u06D3\u06D5\u06EE\u06EF\u06FA\u06FB\u06FC\u06FF\u0710\u0712\u0713\u0714\u0715\u0716\u0717\u0718\u0719\u071A\u071B\u071C\u071D\u071E\u071F\u0720\u0721\u0722\u0723\u0724\u0725\u0726\u0727\u0728\u0729\u072A\u072B\u072C\u072D\u072E\u072F\u074D\u074E\u074F\u0750\u0751\u0752\u0753\u0754\u0755\u0756\u0757\u0758\u0759\u075A\u075B\u075C\u075D\u075E\u075F\u0760\u0761\u0762\u0763\u0764\u0765\u0766\u0767\u0768\u0769\u076A\u076B\u076C\u076D\u076E\u076F\u0770\u0771\u0772\u0773\u0774\u0775\u0776\u0777\u0778\u0779\u077A\u077B\u077C\u077D\u077E\u077F\u0780\u0781\u0782\u0783\u0784\u0785\u0786\u0787\u0788\u0789\u078A\u078B\u078C\u078D\u078E\u078F\u0790\u0791\u0792\u0793\u0794\u0795\u0796\u0797\u0798\u0799\u079A\u079B\u079C\u079D\u079E\u079F\u07A0\u07A1\u07A2\u07A3\u07A4\u07A5\u07B1\u07CA\u07CB\u07CC\u07CD\u07CE\u07CF\u07D0\u07D1\u07D2\u07D3\u07D4\u07D5\u07D6\u07D7\u07D8\u07D9\u07DA\u07DB\u07DC\u07DD\u07DE\u07DF\u07E0\u07E1\u07E2\u07E3\u07E4\u07E5\u07E6\u07E7\u07E8\u07E9\u07EA\u0904\u0905\u0906\u0907\u0908\u0909\u090A\u090B\u090C\u090D\u090E\u090F\u0910\u0911\u0912\u0913\u0914\u0915\u0916\u0917\u0918\u0919\u091A\u091B\u091C\u091D\u091E\u091F\u0920\u0921\u0922\u0923\u0924\u0925\u0926\u0927\u0928\u0929\u092A\u092B\u092C\u092D\u092E\u092F\u0930\u0931\u0932\u0933\u0934\u0935\u0936\u0937\u0938\u0939\u093D\u0950\u0958\u0959\u095A\u095B\u095C\u095D\u095E\u095F\u0960\u0961\u0972\u097B\u097C\u097D\u097E\u097F\u0985\u0986\u0987\u0988\u0989\u098A\u098B\u098C\u098F\u0990\u0993\u0994\u0995\u0996\u0997\u0998\u0999\u099A\u099B\u099C\u099D\u099E\u099F\u09A0\u09A1\u09A2\u09A3\u09A4\u09A5\u09A6\u09A7\u09A8\u09AA\u09AB\u09AC\u09AD\u09AE\u09AF\u09B0\u09B2\u09B6\u09B7\u09B8\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF\u09E0\u09E1\u09F0\u09F1\u0A05\u0A06\u0A07\u0A08\u0A09\u0A0A\u0A0F\u0A10\u0A13\u0A14\u0A15\u0A16\u0A17\u0A18\u0A19\u0A1A\u0A1B\u0A1C\u0A1D\u0A1E\u0A1F\u0A20\u0A21\u0A22\u0A23\u0A24\u0A25\u0A26\u0A27\u0A28\u0A2A\u0A2B\u0A2C\u0A2D\u0A2E\u0A2F\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59\u0A5A\u0A5B\u0A5C\u0A5E\u0A72\u0A73\u0A74\u0A85\u0A86\u0A87\u0A88\u0A89\u0A8A\u0A8B\u0A8C\u0A8D\u0A8F\u0A90\u0A91\u0A93\u0A94\u0A95\u0A96\u0A97\u0A98\u0A99\u0A9A\u0A9B\u0A9C\u0A9D\u0A9E\u0A9F\u0AA0\u0AA1\u0AA2\u0AA3\u0AA4\u0AA5\u0AA6\u0AA7\u0AA8\u0AAA\u0AAB\u0AAC\u0AAD\u0AAE\u0AAF\u0AB0\u0AB2\u0AB3\u0AB5\u0AB6\u0AB7\u0AB8\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05\u0B06\u0B07\u0B08\u0B09\u0B0A\u0B0B\u0B0C\u0B0F\u0B10\u0B13\u0B14\u0B15\u0B16\u0B17\u0B18\u0B19\u0B1A\u0B1B\u0B1C\u0B1D\u0B1E\u0B1F\u0B20\u0B21\u0B22\u0B23\u0B24\u0B25\u0B26\u0B27\u0B28\u0B2A\u0B2B\u0B2C\u0B2D\u0B2E\u0B2F\u0B30\u0B32\u0B33\u0B35\u0B36\u0B37\u0B38\u0B39\u0B3D\u0B5C\u0B5D\u0B5F\u0B60\u0B61\u0B71\u0B83\u0B85\u0B86\u0B87\u0B88\u0B89\u0B8A\u0B8E\u0B8F\u0B90\u0B92\u0B93\u0B94\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8\u0BA9\u0BAA\u0BAE\u0BAF\u0BB0\u0BB1\u0BB2\u0BB3\u0BB4\u0BB5\u0BB6\u0BB7\u0BB8\u0BB9\u0BD0\u0C05\u0C06\u0C07\u0C08\u0C09\u0C0A\u0C0B\u0C0C\u0C0E\u0C0F\u0C10\u0C12\u0C13\u0C14\u0C15\u0C16\u0C17\u0C18\u0C19\u0C1A\u0C1B\u0C1C\u0C1D\u0C1E\u0C1F\u0C20\u0C21\u0C22\u0C23\u0C24\u0C25\u0C26\u0C27\u0C28\u0C2A\u0C2B\u0C2C\u0C2D\u0C2E\u0C2F\u0C30\u0C31\u0C32\u0C33\u0C35\u0C36\u0C37\u0C38\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85\u0C86\u0C87\u0C88\u0C89\u0C8A\u0C8B\u0C8C\u0C8E\u0C8F\u0C90\u0C92\u0C93\u0C94\u0C95\u0C96\u0C97\u0C98\u0C99\u0C9A\u0C9B\u0C9C\u0C9D\u0C9E\u0C9F\u0CA0\u0CA1\u0CA2\u0CA3\u0CA4\u0CA5\u0CA6\u0CA7\u0CA8\u0CAA\u0CAB\u0CAC\u0CAD\u0CAE\u0CAF\u0CB0\u0CB1\u0CB2\u0CB3\u0CB5\u0CB6\u0CB7\u0CB8\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0D05\u0D06\u0D07\u0D08\u0D09\u0D0A\u0D0B\u0D0C\u0D0E\u0D0F\u0D10\u0D12\u0D13\u0D14\u0D15\u0D16\u0D17\u0D18\u0D19\u0D1A\u0D1B\u0D1C\u0D1D\u0D1E\u0D1F\u0D20\u0D21\u0D22\u0D23\u0D24\u0D25\u0D26\u0D27\u0D28\u0D2A\u0D2B\u0D2C\u0D2D\u0D2E\u0D2F\u0D30\u0D31\u0D32\u0D33\u0D34\u0D35\u0D36\u0D37\u0D38\u0D39\u0D3D\u0D60\u0D61\u0D7A\u0D7B\u0D7C\u0D7D\u0D7E\u0D7F\u0D85\u0D86\u0D87\u0D88\u0D89\u0D8A\u0D8B\u0D8C\u0D8D\u0D8E\u0D8F\u0D90\u0D91\u0D92\u0D93\u0D94\u0D95\u0D96\u0D9A\u0D9B\u0D9C\u0D9D\u0D9E\u0D9F\u0DA0\u0DA1\u0DA2\u0DA3\u0DA4\u0DA5\u0DA6\u0DA7\u0DA8\u0DA9\u0DAA\u0DAB\u0DAC\u0DAD\u0DAE\u0DAF\u0DB0\u0DB1\u0DB3\u0DB4\u0DB5\u0DB6\u0DB7\u0DB8\u0DB9\u0DBA\u0DBB\u0DBD\u0DC0\u0DC1\u0DC2\u0DC3\u0DC4\u0DC5\u0DC6\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E32\u0E33\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94\u0E95\u0E96\u0E97\u0E99\u0E9A\u0E9B\u0E9C\u0E9D\u0E9E\u0E9F\u0EA1\u0EA2\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD\u0EAE\u0EAF\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0\u0EC1\u0EC2\u0EC3\u0EC4\u0EDC\u0EDD\u0F00\u0F40\u0F41\u0F42\u0F43\u0F44\u0F45\u0F46\u0F47\u0F49\u0F4A\u0F4B\u0F4C\u0F4D\u0F4E\u0F4F\u0F50\u0F51\u0F52\u0F53\u0F54\u0F55\u0F56\u0F57\u0F58\u0F59\u0F5A\u0F5B\u0F5C\u0F5D\u0F5E\u0F5F\u0F60\u0F61\u0F62\u0F63\u0F64\u0F65\u0F66\u0F67\u0F68\u0F69\u0F6A\u0F6B\u0F6C\u0F88\u0F89\u0F8A\u0F8B\u1000\u1001\u1002\u1003\u1004\u1005\u1006\u1007\u1008\u1009\u100A\u100B\u100C\u100D\u100E\u100F\u1010\u1011\u1012\u1013\u1014\u1015\u1016\u1017\u1018\u1019\u101A\u101B\u101C\u101D\u101E\u101F\u1020\u1021\u1022\u1023\u1024\u1025\u1026\u1027\u1028\u1029\u102A\u103F\u1050\u1051\u1052\u1053\u1054\u1055\u105A\u105B\u105C\u105D\u1061\u1065\u1066\u106E\u106F\u1070\u1075\u1076\u1077\u1078\u1079\u107A\u107B\u107C\u107D\u107E\u107F\u1080\u1081\u108E\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10EF\u10F0\u10F1\u10F2\u10F3\u10F4\u10F5\u10F6\u10F7\u10F8\u10F9\u10FA\u1100\u1101\u1102\u1103\u1104\u1105\u1106\u1107\u1108\u1109\u110A\u110B\u110C\u110D\u110E\u110F\u1110\u1111\u1112\u1113\u1114\u1115\u1116\u1117\u1118\u1119\u111A\u111B\u111C\u111D\u111E\u111F\u1120\u1121\u1122\u1123\u1124\u1125\u1126\u1127\u1128\u1129\u112A\u112B\u112C\u112D\u112E\u112F\u1130\u1131\u1132\u1133\u1134\u1135\u1136\u1137\u1138\u1139\u113A\u113B\u113C\u113D\u113E\u113F\u1140\u1141\u1142\u1143\u1144\u1145\u1146\u1147\u1148\u1149\u114A\u114B\u114C\u114D\u114E\u114F\u1150\u1151\u1152\u1153\u1154\u1155\u1156\u1157\u1158\u1159\u115F\u1160\u1161\u1162\u1163\u1164\u1165\u1166\u1167\u1168\u1169\u116A\u116B\u116C\u116D\u116E\u116F\u1170\u1171\u1172\u1173\u1174\u1175\u1176\u1177\u1178\u1179\u117A\u117B\u117C\u117D\u117E\u117F\u1180\u1181\u1182\u1183\u1184\u1185\u1186\u1187\u1188\u1189\u118A\u118B\u118C\u118D\u118E\u118F\u1190\u1191\u1192\u1193\u1194\u1195\u1196\u1197\u1198\u1199\u119A\u119B\u119C\u119D\u119E\u119F\u11A0\u11A1\u11A2\u11A8\u11A9\u11AA\u11AB\u11AC\u11AD\u11AE\u11AF\u11B0\u11B1\u11B2\u11B3\u11B4\u11B5\u11B6\u11B7\u11B8\u11B9\u11BA\u11BB\u11BC\u11BD\u11BE\u11BF\u11C0\u11C1\u11C2\u11C3\u11C4\u11C5\u11C6\u11C7\u11C8\u11C9\u11CA\u11CB\u11CC\u11CD\u11CE\u11CF\u11D0\u11D1\u11D2\u11D3\u11D4\u11D5\u11D6\u11D7\u11D8\u11D9\u11DA\u11DB\u11DC\u11DD\u11DE\u11DF\u11E0\u11E1\u11E2\u11E3\u11E4\u11E5\u11E6\u11E7\u11E8\u11E9\u11EA\u11EB\u11EC\u11ED\u11EE\u11EF\u11F0\u11F1\u11F2\u11F3\u11F4\u11F5\u11F6\u11F7\u11F8\u11F9\u1200\u1201\u1202\u1203\u1204\u1205\u1206\u1207\u1208\u1209\u120A\u120B\u120C\u120D\u120E\u120F\u1210\u1211\u1212\u1213\u1214\u1215\u1216\u1217\u1218\u1219\u121A\u121B\u121C\u121D\u121E\u121F\u1220\u1221\u1222\u1223\u1224\u1225\u1226\u1227\u1228\u1229\u122A\u122B\u122C\u122D\u122E\u122F\u1230\u1231\u1232\u1233\u1234\u1235\u1236\u1237\u1238\u1239\u123A\u123B\u123C\u123D\u123E\u123F\u1240\u1241\u1242\u1243\u1244\u1245\u1246\u1247\u1248\u124A\u124B\u124C\u124D\u1250\u1251\u1252\u1253\u1254\u1255\u1256\u1258\u125A\u125B\u125C\u125D\u1260\u1261\u1262\u1263\u1264\u1265\u1266\u1267\u1268\u1269\u126A\u126B\u126C\u126D\u126E\u126F\u1270\u1271\u1272\u1273\u1274\u1275\u1276\u1277\u1278\u1279\u127A\u127B\u127C\u127D\u127E\u127F\u1280\u1281\u1282\u1283\u1284\u1285\u1286\u1287\u1288\u128A\u128B\u128C\u128D\u1290\u1291\u1292\u1293\u1294\u1295\u1296\u1297\u1298\u1299\u129A\u129B\u129C\u129D\u129E\u129F\u12A0\u12A1\u12A2\u12A3\u12A4\u12A5\u12A6\u12A7\u12A8\u12A9\u12AA\u12AB\u12AC\u12AD\u12AE\u12AF\u12B0\u12B2\u12B3\u12B4\u12B5\u12B8\u12B9\u12BA\u12BB\u12BC\u12BD\u12BE\u12C0\u12C2\u12C3\u12C4\u12C5\u12C8\u12C9\u12CA\u12CB\u12CC\u12CD\u12CE\u12CF\u12D0\u12D1\u12D2\u12D3\u12D4\u12D5\u12D6\u12D8\u12D9\u12DA\u12DB\u12DC\u12DD\u12DE\u12DF\u12E0\u12E1\u12E2\u12E3\u12E4\u12E5\u12E6\u12E7\u12E8\u12E9\u12EA\u12EB\u12EC\u12ED\u12EE\u12EF\u12F0\u12F1\u12F2\u12F3\u12F4\u12F5\u12F6\u12F7\u12F8\u12F9\u12FA\u12FB\u12FC\u12FD\u12FE\u12FF\u1300\u1301\u1302\u1303\u1304\u1305\u1306\u1307\u1308\u1309\u130A\u130B\u130C\u130D\u130E\u130F\u1310\u1312\u1313\u1314\u1315\u1318\u1319\u131A\u131B\u131C\u131D\u131E\u131F\u1320\u1321\u1322\u1323\u1324\u1325\u1326\u1327\u1328\u1329\u132A\u132B\u132C\u132D\u132E\u132F\u1330\u1331\u1332\u1333\u1334\u1335\u1336\u1337\u1338\u1339\u133A\u133B\u133C\u133D\u133E\u133F\u1340\u1341\u1342\u1343\u1344\u1345\u1346\u1347\u1348\u1349\u134A\u134B\u134C\u134D\u134E\u134F\u1350\u1351\u1352\u1353\u1354\u1355\u1356\u1357\u1358\u1359\u135A\u1380\u1381\u1382\u1383\u1384\u1385\u1386\u1387\u1388\u1389\u138A\u138B\u138C\u138D\u138E\u138F\u13A0\u13A1\u13A2\u13A3\u13A4\u13A5\u13A6\u13A7\u13A8\u13A9\u13AA\u13AB\u13AC\u13AD\u13AE\u13AF\u13B0\u13B1\u13B2\u13B3\u13B4\u13B5\u13B6\u13B7\u13B8\u13B9\u13BA\u13BB\u13BC\u13BD\u13BE\u13BF\u13C0\u13C1\u13C2\u13C3\u13C4\u13C5\u13C6\u13C7\u13C8\u13C9\u13CA\u13CB\u13CC\u13CD\u13CE\u13CF\u13D0\u13D1\u13D2\u13D3\u13D4\u13D5\u13D6\u13D7\u13D8\u13D9\u13DA\u13DB\u13DC\u13DD\u13DE\u13DF\u13E0\u13E1\u13E2\u13E3\u13E4\u13E5\u13E6\u13E7\u13E8\u13E9\u13EA\u13EB\u13EC\u13ED\u13EE\u13EF\u13F0\u13F1\u13F2\u13F3\u13F4\u1401\u1402\u1403\u1404\u1405\u1406\u1407\u1408\u1409\u140A\u140B\u140C\u140D\u140E\u140F\u1410\u1411\u1412\u1413\u1414\u1415\u1416\u1417\u1418\u1419\u141A\u141B\u141C\u141D\u141E\u141F\u1420\u1421\u1422\u1423\u1424\u1425\u1426\u1427\u1428\u1429\u142A\u142B\u142C\u142D\u142E\u142F\u1430\u1431\u1432\u1433\u1434\u1435\u1436\u1437\u1438\u1439\u143A\u143B\u143C\u143D\u143E\u143F\u1440\u1441\u1442\u1443\u1444\u1445\u1446\u1447\u1448\u1449\u144A\u144B\u144C\u144D\u144E\u144F\u1450\u1451\u1452\u1453\u1454\u1455\u1456\u1457\u1458\u1459\u145A\u145B\u145C\u145D\u145E\u145F\u1460\u1461\u1462\u1463\u1464\u1465\u1466\u1467\u1468\u1469\u146A\u146B\u146C\u146D\u146E\u146F\u1470\u1471\u1472\u1473\u1474\u1475\u1476\u1477\u1478\u1479\u147A\u147B\u147C\u147D\u147E\u147F\u1480\u1481\u1482\u1483\u1484\u1485\u1486\u1487\u1488\u1489\u148A\u148B\u148C\u148D\u148E\u148F\u1490\u1491\u1492\u1493\u1494\u1495\u1496\u1497\u1498\u1499\u149A\u149B\u149C\u149D\u149E\u149F\u14A0\u14A1\u14A2\u14A3\u14A4\u14A5\u14A6\u14A7\u14A8\u14A9\u14AA\u14AB\u14AC\u14AD\u14AE\u14AF\u14B0\u14B1\u14B2\u14B3\u14B4\u14B5\u14B6\u14B7\u14B8\u14B9\u14BA\u14BB\u14BC\u14BD\u14BE\u14BF\u14C0\u14C1\u14C2\u14C3\u14C4\u14C5\u14C6\u14C7\u14C8\u14C9\u14CA\u14CB\u14CC\u14CD\u14CE\u14CF\u14D0\u14D1\u14D2\u14D3\u14D4\u14D5\u14D6\u14D7\u14D8\u14D9\u14DA\u14DB\u14DC\u14DD\u14DE\u14DF\u14E0\u14E1\u14E2\u14E3\u14E4\u14E5\u14E6\u14E7\u14E8\u14E9\u14EA\u14EB\u14EC\u14ED\u14EE\u14EF\u14F0\u14F1\u14F2\u14F3\u14F4\u14F5\u14F6\u14F7\u14F8\u14F9\u14FA\u14FB\u14FC\u14FD\u14FE\u14FF\u1500\u1501\u1502\u1503\u1504\u1505\u1506\u1507\u1508\u1509\u150A\u150B\u150C\u150D\u150E\u150F\u1510\u1511\u1512\u1513\u1514\u1515\u1516\u1517\u1518\u1519\u151A\u151B\u151C\u151D\u151E\u151F\u1520\u1521\u1522\u1523\u1524\u1525\u1526\u1527\u1528\u1529\u152A\u152B\u152C\u152D\u152E\u152F\u1530\u1531\u1532\u1533\u1534\u1535\u1536\u1537\u1538\u1539\u153A\u153B\u153C\u153D\u153E\u153F\u1540\u1541\u1542\u1543\u1544\u1545\u1546\u1547\u1548\u1549\u154A\u154B\u154C\u154D\u154E\u154F\u1550\u1551\u1552\u1553\u1554\u1555\u1556\u1557\u1558\u1559\u155A\u155B\u155C\u155D\u155E\u155F\u1560\u1561\u1562\u1563\u1564\u1565\u1566\u1567\u1568\u1569\u156A\u156B\u156C\u156D\u156E\u156F\u1570\u1571\u1572\u1573\u1574\u1575\u1576\u1577\u1578\u1579\u157A\u157B\u157C\u157D\u157E\u157F\u1580\u1581\u1582\u1583\u1584\u1585\u1586\u1587\u1588\u1589\u158A\u158B\u158C\u158D\u158E\u158F\u1590\u1591\u1592\u1593\u1594\u1595\u1596\u1597\u1598\u1599\u159A\u159B\u159C\u159D\u159E\u159F\u15A0\u15A1\u15A2\u15A3\u15A4\u15A5\u15A6\u15A7\u15A8\u15A9\u15AA\u15AB\u15AC\u15AD\u15AE\u15AF\u15B0\u15B1\u15B2\u15B3\u15B4\u15B5\u15B6\u15B7\u15B8\u15B9\u15BA\u15BB\u15BC\u15BD\u15BE\u15BF\u15C0\u15C1\u15C2\u15C3\u15C4\u15C5\u15C6\u15C7\u15C8\u15C9\u15CA\u15CB\u15CC\u15CD\u15CE\u15CF\u15D0\u15D1\u15D2\u15D3\u15D4\u15D5\u15D6\u15D7\u15D8\u15D9\u15DA\u15DB\u15DC\u15DD\u15DE\u15DF\u15E0\u15E1\u15E2\u15E3\u15E4\u15E5\u15E6\u15E7\u15E8\u15E9\u15EA\u15EB\u15EC\u15ED\u15EE\u15EF\u15F0\u15F1\u15F2\u15F3\u15F4\u15F5\u15F6\u15F7\u15F8\u15F9\u15FA\u15FB\u15FC\u15FD\u15FE\u15FF\u1600\u1601\u1602\u1603\u1604\u1605\u1606\u1607\u1608\u1609\u160A\u160B\u160C\u160D\u160E\u160F\u1610\u1611\u1612\u1613\u1614\u1615\u1616\u1617\u1618\u1619\u161A\u161B\u161C\u161D\u161E\u161F\u1620\u1621\u1622\u1623\u1624\u1625\u1626\u1627\u1628\u1629\u162A\u162B\u162C\u162D\u162E\u162F\u1630\u1631\u1632\u1633\u1634\u1635\u1636\u1637\u1638\u1639\u163A\u163B\u163C\u163D\u163E\u163F\u1640\u1641\u1642\u1643\u1644\u1645\u1646\u1647\u1648\u1649\u164A\u164B\u164C\u164D\u164E\u164F\u1650\u1651\u1652\u1653\u1654\u1655\u1656\u1657\u1658\u1659\u165A\u165B\u165C\u165D\u165E\u165F\u1660\u1661\u1662\u1663\u1664\u1665\u1666\u1667\u1668\u1669\u166A\u166B\u166C\u166F\u1670\u1671\u1672\u1673\u1674\u1675\u1676\u1681\u1682\u1683\u1684\u1685\u1686\u1687\u1688\u1689\u168A\u168B\u168C\u168D\u168E\u168F\u1690\u1691\u1692\u1693\u1694\u1695\u1696\u1697\u1698\u1699\u169A\u16A0\u16A1\u16A2\u16A3\u16A4\u16A5\u16A6\u16A7\u16A8\u16A9\u16AA\u16AB\u16AC\u16AD\u16AE\u16AF\u16B0\u16B1\u16B2\u16B3\u16B4\u16B5\u16B6\u16B7\u16B8\u16B9\u16BA\u16BB\u16BC\u16BD\u16BE\u16BF\u16C0\u16C1\u16C2\u16C3\u16C4\u16C5\u16C6\u16C7\u16C8\u16C9\u16CA\u16CB\u16CC\u16CD\u16CE\u16CF\u16D0\u16D1\u16D2\u16D3\u16D4\u16D5\u16D6\u16D7\u16D8\u16D9\u16DA\u16DB\u16DC\u16DD\u16DE\u16DF\u16E0\u16E1\u16E2\u16E3\u16E4\u16E5\u16E6\u16E7\u16E8\u16E9\u16EA\u1700\u1701\u1702\u1703\u1704\u1705\u1706\u1707\u1708\u1709\u170A\u170B\u170C\u170E\u170F\u1710\u1711\u1720\u1721\u1722\u1723\u1724\u1725\u1726\u1727\u1728\u1729\u172A\u172B\u172C\u172D\u172E\u172F\u1730\u1731\u1740\u1741\u1742\u1743\u1744\u1745\u1746\u1747\u1748\u1749\u174A\u174B\u174C\u174D\u174E\u174F\u1750\u1751\u1760\u1761\u1762\u1763\u1764\u1765\u1766\u1767\u1768\u1769\u176A\u176B\u176C\u176E\u176F\u1770\u1780\u1781\u1782\u1783\u1784\u1785\u1786\u1787\u1788\u1789\u178A\u178B\u178C\u178D\u178E\u178F\u1790\u1791\u1792\u1793\u1794\u1795\u1796\u1797\u1798\u1799\u179A\u179B\u179C\u179D\u179E\u179F\u17A0\u17A1\u17A2\u17A3\u17A4\u17A5\u17A6\u17A7\u17A8\u17A9\u17AA\u17AB\u17AC\u17AD\u17AE\u17AF\u17B0\u17B1\u17B2\u17B3\u17DC\u1820\u1821\u1822\u1823\u1824\u1825\u1826\u1827\u1828\u1829\u182A\u182B\u182C\u182D\u182E\u182F\u1830\u1831\u1832\u1833\u1834\u1835\u1836\u1837\u1838\u1839\u183A\u183B\u183C\u183D\u183E\u183F\u1840\u1841\u1842\u1844\u1845\u1846\u1847\u1848\u1849\u184A\u184B\u184C\u184D\u184E\u184F\u1850\u1851\u1852\u1853\u1854\u1855\u1856\u1857\u1858\u1859\u185A\u185B\u185C\u185D\u185E\u185F\u1860\u1861\u1862\u1863\u1864\u1865\u1866\u1867\u1868\u1869\u186A\u186B\u186C\u186D\u186E\u186F\u1870\u1871\u1872\u1873\u1874\u1875\u1876\u1877\u1880\u1881\u1882\u1883\u1884\u1885\u1886\u1887\u1888\u1889\u188A\u188B\u188C\u188D\u188E\u188F\u1890\u1891\u1892\u1893\u1894\u1895\u1896\u1897\u1898\u1899\u189A\u189B\u189C\u189D\u189E\u189F\u18A0\u18A1\u18A2\u18A3\u18A4\u18A5\u18A6\u18A7\u18A8\u18AA\u1900\u1901\u1902\u1903\u1904\u1905\u1906\u1907\u1908\u1909\u190A\u190B\u190C\u190D\u190E\u190F\u1910\u1911\u1912\u1913\u1914\u1915\u1916\u1917\u1918\u1919\u191A\u191B\u191C\u1950\u1951\u1952\u1953\u1954\u1955\u1956\u1957\u1958\u1959\u195A\u195B\u195C\u195D\u195E\u195F\u1960\u1961\u1962\u1963\u1964\u1965\u1966\u1967\u1968\u1969\u196A\u196B\u196C\u196D\u1970\u1971\u1972\u1973\u1974\u1980\u1981\u1982\u1983\u1984\u1985\u1986\u1987\u1988\u1989\u198A\u198B\u198C\u198D\u198E\u198F\u1990\u1991\u1992\u1993\u1994\u1995\u1996\u1997\u1998\u1999\u199A\u199B\u199C\u199D\u199E\u199F\u19A0\u19A1\u19A2\u19A3\u19A4\u19A5\u19A6\u19A7\u19A8\u19A9\u19C1\u19C2\u19C3\u19C4\u19C5\u19C6\u19C7\u1A00\u1A01\u1A02\u1A03\u1A04\u1A05\u1A06\u1A07\u1A08\u1A09\u1A0A\u1A0B\u1A0C\u1A0D\u1A0E\u1A0F\u1A10\u1A11\u1A12\u1A13\u1A14\u1A15\u1A16\u1B05\u1B06\u1B07\u1B08\u1B09\u1B0A\u1B0B\u1B0C\u1B0D\u1B0E\u1B0F\u1B10\u1B11\u1B12\u1B13\u1B14\u1B15\u1B16\u1B17\u1B18\u1B19\u1B1A\u1B1B\u1B1C\u1B1D\u1B1E\u1B1F\u1B20\u1B21\u1B22\u1B23\u1B24\u1B25\u1B26\u1B27\u1B28\u1B29\u1B2A\u1B2B\u1B2C\u1B2D\u1B2E\u1B2F\u1B30\u1B31\u1B32\u1B33\u1B45\u1B46\u1B47\u1B48\u1B49\u1B4A\u1B4B\u1B83\u1B84\u1B85\u1B86\u1B87\u1B88\u1B89\u1B8A\u1B8B\u1B8C\u1B8D\u1B8E\u1B8F\u1B90\u1B91\u1B92\u1B93\u1B94\u1B95\u1B96\u1B97\u1B98\u1B99\u1B9A\u1B9B\u1B9C\u1B9D\u1B9E\u1B9F\u1BA0\u1BAE\u1BAF\u1C00\u1C01\u1C02\u1C03\u1C04\u1C05\u1C06\u1C07\u1C08\u1C09\u1C0A\u1C0B\u1C0C\u1C0D\u1C0E\u1C0F\u1C10\u1C11\u1C12\u1C13\u1C14\u1C15\u1C16\u1C17\u1C18\u1C19\u1C1A\u1C1B\u1C1C\u1C1D\u1C1E\u1C1F\u1C20\u1C21\u1C22\u1C23\u1C4D\u1C4E\u1C4F\u1C5A\u1C5B\u1C5C\u1C5D\u1C5E\u1C5F\u1C60\u1C61\u1C62\u1C63\u1C64\u1C65\u1C66\u1C67\u1C68\u1C69\u1C6A\u1C6B\u1C6C\u1C6D\u1C6E\u1C6F\u1C70\u1C71\u1C72\u1C73\u1C74\u1C75\u1C76\u1C77\u2135\u2136\u2137\u2138\u2D30\u2D31\u2D32\u2D33\u2D34\u2D35\u2D36\u2D37\u2D38\u2D39\u2D3A\u2D3B\u2D3C\u2D3D\u2D3E\u2D3F\u2D40\u2D41\u2D42\u2D43\u2D44\u2D45\u2D46\u2D47\u2D48\u2D49\u2D4A\u2D4B\u2D4C\u2D4D\u2D4E\u2D4F\u2D50\u2D51\u2D52\u2D53\u2D54\u2D55\u2D56\u2D57\u2D58\u2D59\u2D5A\u2D5B\u2D5C\u2D5D\u2D5E\u2D5F\u2D60\u2D61\u2D62\u2D63\u2D64\u2D65\u2D80\u2D81\u2D82\u2D83\u2D84\u2D85\u2D86\u2D87\u2D88\u2D89\u2D8A\u2D8B\u2D8C\u2D8D\u2D8E\u2D8F\u2D90\u2D91\u2D92\u2D93\u2D94\u2D95\u2D96\u2DA0\u2DA1\u2DA2\u2DA3\u2DA4\u2DA5\u2DA6\u2DA8\u2DA9\u2DAA\u2DAB\u2DAC\u2DAD\u2DAE\u2DB0\u2DB1\u2DB2\u2DB3\u2DB4\u2DB5\u2DB6\u2DB8\u2DB9\u2DBA\u2DBB\u2DBC\u2DBD\u2DBE\u2DC0\u2DC1\u2DC2\u2DC3\u2DC4\u2DC5\u2DC6\u2DC8\u2DC9\u2DCA\u2DCB\u2DCC\u2DCD\u2DCE\u2DD0\u2DD1\u2DD2\u2DD3\u2DD4\u2DD5\u2DD6\u2DD8\u2DD9\u2DDA\u2DDB\u2DDC\u2DDD\u2DDE\u3006\u303C\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309F\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\u30F7\u30F8\u30F9\u30FA\u30FF\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\u312A\u312B\u312C\u312D\u3131\u3132\u3133\u3134\u3135\u3136\u3137\u3138\u3139\u313A\u313B\u313C\u313D\u313E\u313F\u3140\u3141\u3142\u3143\u3144\u3145\u3146\u3147\u3148\u3149\u314A\u314B\u314C\u314D\u314E\u314F\u3150\u3151\u3152\u3153\u3154\u3155\u3156\u3157\u3158\u3159\u315A\u315B\u315C\u315D\u315E\u315F\u3160\u3161\u3162\u3163\u3164\u3165\u3166\u3167\u3168\u3169\u316A\u316B\u316C\u316D\u316E\u316F\u3170\u3171\u3172\u3173\u3174\u3175\u3176\u3177\u3178\u3179\u317A\u317B\u317C\u317D\u317E\u317F\u3180\u3181\u3182\u3183\u3184\u3185\u3186\u3187\u3188\u3189\u318A\u318B\u318C\u318D\u318E\u31A0\u31A1\u31A2\u31A3\u31A4\u31A5\u31A6\u31A7\u31A8\u31A9\u31AA\u31AB\u31AC\u31AD\u31AE\u31AF\u31B0\u31B1\u31B2\u31B3\u31B4\u31B5\u31B6\u31B7\u31F0\u31F1\u31F2\u31F3\u31F4\u31F5\u31F6\u31F7\u31F8\u31F9\u31FA\u31FB\u31FC\u31FD\u31FE\u31FF\u3400\u4DB5\u4E00\u9FC3\uA000\uA001\uA002\uA003\uA004\uA005\uA006\uA007\uA008\uA009\uA00A\uA00B\uA00C\uA00D\uA00E\uA00F\uA010\uA011\uA012\uA013\uA014\uA016\uA017\uA018\uA019\uA01A\uA01B\uA01C\uA01D\uA01E\uA01F\uA020\uA021\uA022\uA023\uA024\uA025\uA026\uA027\uA028\uA029\uA02A\uA02B\uA02C\uA02D\uA02E\uA02F\uA030\uA031\uA032\uA033\uA034\uA035\uA036\uA037\uA038\uA039\uA03A\uA03B\uA03C\uA03D\uA03E\uA03F\uA040\uA041\uA042\uA043\uA044\uA045\uA046\uA047\uA048\uA049\uA04A\uA04B\uA04C\uA04D\uA04E\uA04F\uA050\uA051\uA052\uA053\uA054\uA055\uA056\uA057\uA058\uA059\uA05A\uA05B\uA05C\uA05D\uA05E\uA05F\uA060\uA061\uA062\uA063\uA064\uA065\uA066\uA067\uA068\uA069\uA06A\uA06B\uA06C\uA06D\uA06E\uA06F\uA070\uA071\uA072\uA073\uA074\uA075\uA076\uA077\uA078\uA079\uA07A\uA07B\uA07C\uA07D\uA07E\uA07F\uA080\uA081\uA082\uA083\uA084\uA085\uA086\uA087\uA088\uA089\uA08A\uA08B\uA08C\uA08D\uA08E\uA08F\uA090\uA091\uA092\uA093\uA094\uA095\uA096\uA097\uA098\uA099\uA09A\uA09B\uA09C\uA09D\uA09E\uA09F\uA0A0\uA0A1\uA0A2\uA0A3\uA0A4\uA0A5\uA0A6\uA0A7\uA0A8\uA0A9\uA0AA\uA0AB\uA0AC\uA0AD\uA0AE\uA0AF\uA0B0\uA0B1\uA0B2\uA0B3\uA0B4\uA0B5\uA0B6\uA0B7\uA0B8\uA0B9\uA0BA\uA0BB\uA0BC\uA0BD\uA0BE\uA0BF\uA0C0\uA0C1\uA0C2\uA0C3\uA0C4\uA0C5\uA0C6\uA0C7\uA0C8\uA0C9\uA0CA\uA0CB\uA0CC\uA0CD\uA0CE\uA0CF\uA0D0\uA0D1\uA0D2\uA0D3\uA0D4\uA0D5\uA0D6\uA0D7\uA0D8\uA0D9\uA0DA\uA0DB\uA0DC\uA0DD\uA0DE\uA0DF\uA0E0\uA0E1\uA0E2\uA0E3\uA0E4\uA0E5\uA0E6\uA0E7\uA0E8\uA0E9\uA0EA\uA0EB\uA0EC\uA0ED\uA0EE\uA0EF\uA0F0\uA0F1\uA0F2\uA0F3\uA0F4\uA0F5\uA0F6\uA0F7\uA0F8\uA0F9\uA0FA\uA0FB\uA0FC\uA0FD\uA0FE\uA0FF\uA100\uA101\uA102\uA103\uA104\uA105\uA106\uA107\uA108\uA109\uA10A\uA10B\uA10C\uA10D\uA10E\uA10F\uA110\uA111\uA112\uA113\uA114\uA115\uA116\uA117\uA118\uA119\uA11A\uA11B\uA11C\uA11D\uA11E\uA11F\uA120\uA121\uA122\uA123\uA124\uA125\uA126\uA127\uA128\uA129\uA12A\uA12B\uA12C\uA12D\uA12E\uA12F\uA130\uA131\uA132\uA133\uA134\uA135\uA136\uA137\uA138\uA139\uA13A\uA13B\uA13C\uA13D\uA13E\uA13F\uA140\uA141\uA142\uA143\uA144\uA145\uA146\uA147\uA148\uA149\uA14A\uA14B\uA14C\uA14D\uA14E\uA14F\uA150\uA151\uA152\uA153\uA154\uA155\uA156\uA157\uA158\uA159\uA15A\uA15B\uA15C\uA15D\uA15E\uA15F\uA160\uA161\uA162\uA163\uA164\uA165\uA166\uA167\uA168\uA169\uA16A\uA16B\uA16C\uA16D\uA16E\uA16F\uA170\uA171\uA172\uA173\uA174\uA175\uA176\uA177\uA178\uA179\uA17A\uA17B\uA17C\uA17D\uA17E\uA17F\uA180\uA181\uA182\uA183\uA184\uA185\uA186\uA187\uA188\uA189\uA18A\uA18B\uA18C\uA18D\uA18E\uA18F\uA190\uA191\uA192\uA193\uA194\uA195\uA196\uA197\uA198\uA199\uA19A\uA19B\uA19C\uA19D\uA19E\uA19F\uA1A0\uA1A1\uA1A2\uA1A3\uA1A4\uA1A5\uA1A6\uA1A7\uA1A8\uA1A9\uA1AA\uA1AB\uA1AC\uA1AD\uA1AE\uA1AF\uA1B0\uA1B1\uA1B2\uA1B3\uA1B4\uA1B5\uA1B6\uA1B7\uA1B8\uA1B9\uA1BA\uA1BB\uA1BC\uA1BD\uA1BE\uA1BF\uA1C0\uA1C1\uA1C2\uA1C3\uA1C4\uA1C5\uA1C6\uA1C7\uA1C8\uA1C9\uA1CA\uA1CB\uA1CC\uA1CD\uA1CE\uA1CF\uA1D0\uA1D1\uA1D2\uA1D3\uA1D4\uA1D5\uA1D6\uA1D7\uA1D8\uA1D9\uA1DA\uA1DB\uA1DC\uA1DD\uA1DE\uA1DF\uA1E0\uA1E1\uA1E2\uA1E3\uA1E4\uA1E5\uA1E6\uA1E7\uA1E8\uA1E9\uA1EA\uA1EB\uA1EC\uA1ED\uA1EE\uA1EF\uA1F0\uA1F1\uA1F2\uA1F3\uA1F4\uA1F5\uA1F6\uA1F7\uA1F8\uA1F9\uA1FA\uA1FB\uA1FC\uA1FD\uA1FE\uA1FF\uA200\uA201\uA202\uA203\uA204\uA205\uA206\uA207\uA208\uA209\uA20A\uA20B\uA20C\uA20D\uA20E\uA20F\uA210\uA211\uA212\uA213\uA214\uA215\uA216\uA217\uA218\uA219\uA21A\uA21B\uA21C\uA21D\uA21E\uA21F\uA220\uA221\uA222\uA223\uA224\uA225\uA226\uA227\uA228\uA229\uA22A\uA22B\uA22C\uA22D\uA22E\uA22F\uA230\uA231\uA232\uA233\uA234\uA235\uA236\uA237\uA238\uA239\uA23A\uA23B\uA23C\uA23D\uA23E\uA23F\uA240\uA241\uA242\uA243\uA244\uA245\uA246\uA247\uA248\uA249\uA24A\uA24B\uA24C\uA24D\uA24E\uA24F\uA250\uA251\uA252\uA253\uA254\uA255\uA256\uA257\uA258\uA259\uA25A\uA25B\uA25C\uA25D\uA25E\uA25F\uA260\uA261\uA262\uA263\uA264\uA265\uA266\uA267\uA268\uA269\uA26A\uA26B\uA26C\uA26D\uA26E\uA26F\uA270\uA271\uA272\uA273\uA274\uA275\uA276\uA277\uA278\uA279\uA27A\uA27B\uA27C\uA27D\uA27E\uA27F\uA280\uA281\uA282\uA283\uA284\uA285\uA286\uA287\uA288\uA289\uA28A\uA28B\uA28C\uA28D\uA28E\uA28F\uA290\uA291\uA292\uA293\uA294\uA295\uA296\uA297\uA298\uA299\uA29A\uA29B\uA29C\uA29D\uA29E\uA29F\uA2A0\uA2A1\uA2A2\uA2A3\uA2A4\uA2A5\uA2A6\uA2A7\uA2A8\uA2A9\uA2AA\uA2AB\uA2AC\uA2AD\uA2AE\uA2AF\uA2B0\uA2B1\uA2B2\uA2B3\uA2B4\uA2B5\uA2B6\uA2B7\uA2B8\uA2B9\uA2BA\uA2BB\uA2BC\uA2BD\uA2BE\uA2BF\uA2C0\uA2C1\uA2C2\uA2C3\uA2C4\uA2C5\uA2C6\uA2C7\uA2C8\uA2C9\uA2CA\uA2CB\uA2CC\uA2CD\uA2CE\uA2CF\uA2D0\uA2D1\uA2D2\uA2D3\uA2D4\uA2D5\uA2D6\uA2D7\uA2D8\uA2D9\uA2DA\uA2DB\uA2DC\uA2DD\uA2DE\uA2DF\uA2E0\uA2E1\uA2E2\uA2E3\uA2E4\uA2E5\uA2E6\uA2E7\uA2E8\uA2E9\uA2EA\uA2EB\uA2EC\uA2ED\uA2EE\uA2EF\uA2F0\uA2F1\uA2F2\uA2F3\uA2F4\uA2F5\uA2F6\uA2F7\uA2F8\uA2F9\uA2FA\uA2FB\uA2FC\uA2FD\uA2FE\uA2FF\uA300\uA301\uA302\uA303\uA304\uA305\uA306\uA307\uA308\uA309\uA30A\uA30B\uA30C\uA30D\uA30E\uA30F\uA310\uA311\uA312\uA313\uA314\uA315\uA316\uA317\uA318\uA319\uA31A\uA31B\uA31C\uA31D\uA31E\uA31F\uA320\uA321\uA322\uA323\uA324\uA325\uA326\uA327\uA328\uA329\uA32A\uA32B\uA32C\uA32D\uA32E\uA32F\uA330\uA331\uA332\uA333\uA334\uA335\uA336\uA337\uA338\uA339\uA33A\uA33B\uA33C\uA33D\uA33E\uA33F\uA340\uA341\uA342\uA343\uA344\uA345\uA346\uA347\uA348\uA349\uA34A\uA34B\uA34C\uA34D\uA34E\uA34F\uA350\uA351\uA352\uA353\uA354\uA355\uA356\uA357\uA358\uA359\uA35A\uA35B\uA35C\uA35D\uA35E\uA35F\uA360\uA361\uA362\uA363\uA364\uA365\uA366\uA367\uA368\uA369\uA36A\uA36B\uA36C\uA36D\uA36E\uA36F\uA370\uA371\uA372\uA373\uA374\uA375\uA376\uA377\uA378\uA379\uA37A\uA37B\uA37C\uA37D\uA37E\uA37F\uA380\uA381\uA382\uA383\uA384\uA385\uA386\uA387\uA388\uA389\uA38A\uA38B\uA38C\uA38D\uA38E\uA38F\uA390\uA391\uA392\uA393\uA394\uA395\uA396\uA397\uA398\uA399\uA39A\uA39B\uA39C\uA39D\uA39E\uA39F\uA3A0\uA3A1\uA3A2\uA3A3\uA3A4\uA3A5\uA3A6\uA3A7\uA3A8\uA3A9\uA3AA\uA3AB\uA3AC\uA3AD\uA3AE\uA3AF\uA3B0\uA3B1\uA3B2\uA3B3\uA3B4\uA3B5\uA3B6\uA3B7\uA3B8\uA3B9\uA3BA\uA3BB\uA3BC\uA3BD\uA3BE\uA3BF\uA3C0\uA3C1\uA3C2\uA3C3\uA3C4\uA3C5\uA3C6\uA3C7\uA3C8\uA3C9\uA3CA\uA3CB\uA3CC\uA3CD\uA3CE\uA3CF\uA3D0\uA3D1\uA3D2\uA3D3\uA3D4\uA3D5\uA3D6\uA3D7\uA3D8\uA3D9\uA3DA\uA3DB\uA3DC\uA3DD\uA3DE\uA3DF\uA3E0\uA3E1\uA3E2\uA3E3\uA3E4\uA3E5\uA3E6\uA3E7\uA3E8\uA3E9\uA3EA\uA3EB\uA3EC\uA3ED\uA3EE\uA3EF\uA3F0\uA3F1\uA3F2\uA3F3\uA3F4\uA3F5\uA3F6\uA3F7\uA3F8\uA3F9\uA3FA\uA3FB\uA3FC\uA3FD\uA3FE\uA3FF\uA400\uA401\uA402\uA403\uA404\uA405\uA406\uA407\uA408\uA409\uA40A\uA40B\uA40C\uA40D\uA40E\uA40F\uA410\uA411\uA412\uA413\uA414\uA415\uA416\uA417\uA418\uA419\uA41A\uA41B\uA41C\uA41D\uA41E\uA41F\uA420\uA421\uA422\uA423\uA424\uA425\uA426\uA427\uA428\uA429\uA42A\uA42B\uA42C\uA42D\uA42E\uA42F\uA430\uA431\uA432\uA433\uA434\uA435\uA436\uA437\uA438\uA439\uA43A\uA43B\uA43C\uA43D\uA43E\uA43F\uA440\uA441\uA442\uA443\uA444\uA445\uA446\uA447\uA448\uA449\uA44A\uA44B\uA44C\uA44D\uA44E\uA44F\uA450\uA451\uA452\uA453\uA454\uA455\uA456\uA457\uA458\uA459\uA45A\uA45B\uA45C\uA45D\uA45E\uA45F\uA460\uA461\uA462\uA463\uA464\uA465\uA466\uA467\uA468\uA469\uA46A\uA46B\uA46C\uA46D\uA46E\uA46F\uA470\uA471\uA472\uA473\uA474\uA475\uA476\uA477\uA478\uA479\uA47A\uA47B\uA47C\uA47D\uA47E\uA47F\uA480\uA481\uA482\uA483\uA484\uA485\uA486\uA487\uA488\uA489\uA48A\uA48B\uA48C\uA500\uA501\uA502\uA503\uA504\uA505\uA506\uA507\uA508\uA509\uA50A\uA50B\uA50C\uA50D\uA50E\uA50F\uA510\uA511\uA512\uA513\uA514\uA515\uA516\uA517\uA518\uA519\uA51A\uA51B\uA51C\uA51D\uA51E\uA51F\uA520\uA521\uA522\uA523\uA524\uA525\uA526\uA527\uA528\uA529\uA52A\uA52B\uA52C\uA52D\uA52E\uA52F\uA530\uA531\uA532\uA533\uA534\uA535\uA536\uA537\uA538\uA539\uA53A\uA53B\uA53C\uA53D\uA53E\uA53F\uA540\uA541\uA542\uA543\uA544\uA545\uA546\uA547\uA548\uA549\uA54A\uA54B\uA54C\uA54D\uA54E\uA54F\uA550\uA551\uA552\uA553\uA554\uA555\uA556\uA557\uA558\uA559\uA55A\uA55B\uA55C\uA55D\uA55E\uA55F\uA560\uA561\uA562\uA563\uA564\uA565\uA566\uA567\uA568\uA569\uA56A\uA56B\uA56C\uA56D\uA56E\uA56F\uA570\uA571\uA572\uA573\uA574\uA575\uA576\uA577\uA578\uA579\uA57A\uA57B\uA57C\uA57D\uA57E\uA57F\uA580\uA581\uA582\uA583\uA584\uA585\uA586\uA587\uA588\uA589\uA58A\uA58B\uA58C\uA58D\uA58E\uA58F\uA590\uA591\uA592\uA593\uA594\uA595\uA596\uA597\uA598\uA599\uA59A\uA59B\uA59C\uA59D\uA59E\uA59F\uA5A0\uA5A1\uA5A2\uA5A3\uA5A4\uA5A5\uA5A6\uA5A7\uA5A8\uA5A9\uA5AA\uA5AB\uA5AC\uA5AD\uA5AE\uA5AF\uA5B0\uA5B1\uA5B2\uA5B3\uA5B4\uA5B5\uA5B6\uA5B7\uA5B8\uA5B9\uA5BA\uA5BB\uA5BC\uA5BD\uA5BE\uA5BF\uA5C0\uA5C1\uA5C2\uA5C3\uA5C4\uA5C5\uA5C6\uA5C7\uA5C8\uA5C9\uA5CA\uA5CB\uA5CC\uA5CD\uA5CE\uA5CF\uA5D0\uA5D1\uA5D2\uA5D3\uA5D4\uA5D5\uA5D6\uA5D7\uA5D8\uA5D9\uA5DA\uA5DB\uA5DC\uA5DD\uA5DE\uA5DF\uA5E0\uA5E1\uA5E2\uA5E3\uA5E4\uA5E5\uA5E6\uA5E7\uA5E8\uA5E9\uA5EA\uA5EB\uA5EC\uA5ED\uA5EE\uA5EF\uA5F0\uA5F1\uA5F2\uA5F3\uA5F4\uA5F5\uA5F6\uA5F7\uA5F8\uA5F9\uA5FA\uA5FB\uA5FC\uA5FD\uA5FE\uA5FF\uA600\uA601\uA602\uA603\uA604\uA605\uA606\uA607\uA608\uA609\uA60A\uA60B\uA610\uA611\uA612\uA613\uA614\uA615\uA616\uA617\uA618\uA619\uA61A\uA61B\uA61C\uA61D\uA61E\uA61F\uA62A\uA62B\uA66E\uA7FB\uA7FC\uA7FD\uA7FE\uA7FF\uA800\uA801\uA803\uA804\uA805\uA807\uA808\uA809\uA80A\uA80C\uA80D\uA80E\uA80F\uA810\uA811\uA812\uA813\uA814\uA815\uA816\uA817\uA818\uA819\uA81A\uA81B\uA81C\uA81D\uA81E\uA81F\uA820\uA821\uA822\uA840\uA841\uA842\uA843\uA844\uA845\uA846\uA847\uA848\uA849\uA84A\uA84B\uA84C\uA84D\uA84E\uA84F\uA850\uA851\uA852\uA853\uA854\uA855\uA856\uA857\uA858\uA859\uA85A\uA85B\uA85C\uA85D\uA85E\uA85F\uA860\uA861\uA862\uA863\uA864\uA865\uA866\uA867\uA868\uA869\uA86A\uA86B\uA86C\uA86D\uA86E\uA86F\uA870\uA871\uA872\uA873\uA882\uA883\uA884\uA885\uA886\uA887\uA888\uA889\uA88A\uA88B\uA88C\uA88D\uA88E\uA88F\uA890\uA891\uA892\uA893\uA894\uA895\uA896\uA897\uA898\uA899\uA89A\uA89B\uA89C\uA89D\uA89E\uA89F\uA8A0\uA8A1\uA8A2\uA8A3\uA8A4\uA8A5\uA8A6\uA8A7\uA8A8\uA8A9\uA8AA\uA8AB\uA8AC\uA8AD\uA8AE\uA8AF\uA8B0\uA8B1\uA8B2\uA8B3\uA90A\uA90B\uA90C\uA90D\uA90E\uA90F\uA910\uA911\uA912\uA913\uA914\uA915\uA916\uA917\uA918\uA919\uA91A\uA91B\uA91C\uA91D\uA91E\uA91F\uA920\uA921\uA922\uA923\uA924\uA925\uA930\uA931\uA932\uA933\uA934\uA935\uA936\uA937\uA938\uA939\uA93A\uA93B\uA93C\uA93D\uA93E\uA93F\uA940\uA941\uA942\uA943\uA944\uA945\uA946\uAA00\uAA01\uAA02\uAA03\uAA04\uAA05\uAA06\uAA07\uAA08\uAA09\uAA0A\uAA0B\uAA0C\uAA0D\uAA0E\uAA0F\uAA10\uAA11\uAA12\uAA13\uAA14\uAA15\uAA16\uAA17\uAA18\uAA19\uAA1A\uAA1B\uAA1C\uAA1D\uAA1E\uAA1F\uAA20\uAA21\uAA22\uAA23\uAA24\uAA25\uAA26\uAA27\uAA28\uAA40\uAA41\uAA42\uAA44\uAA45\uAA46\uAA47\uAA48\uAA49\uAA4A\uAA4B\uAC00\uD7A3\uF900\uF901\uF902\uF903\uF904\uF905\uF906\uF907\uF908\uF909\uF90A\uF90B\uF90C\uF90D\uF90E\uF90F\uF910\uF911\uF912\uF913\uF914\uF915\uF916\uF917\uF918\uF919\uF91A\uF91B\uF91C\uF91D\uF91E\uF91F\uF920\uF921\uF922\uF923\uF924\uF925\uF926\uF927\uF928\uF929\uF92A\uF92B\uF92C\uF92D\uF92E\uF92F\uF930\uF931\uF932\uF933\uF934\uF935\uF936\uF937\uF938\uF939\uF93A\uF93B\uF93C\uF93D\uF93E\uF93F\uF940\uF941\uF942\uF943\uF944\uF945\uF946\uF947\uF948\uF949\uF94A\uF94B\uF94C\uF94D\uF94E\uF94F\uF950\uF951\uF952\uF953\uF954\uF955\uF956\uF957\uF958\uF959\uF95A\uF95B\uF95C\uF95D\uF95E\uF95F\uF960\uF961\uF962\uF963\uF964\uF965\uF966\uF967\uF968\uF969\uF96A\uF96B\uF96C\uF96D\uF96E\uF96F\uF970\uF971\uF972\uF973\uF974\uF975\uF976\uF977\uF978\uF979\uF97A\uF97B\uF97C\uF97D\uF97E\uF97F\uF980\uF981\uF982\uF983\uF984\uF985\uF986\uF987\uF988\uF989\uF98A\uF98B\uF98C\uF98D\uF98E\uF98F\uF990\uF991\uF992\uF993\uF994\uF995\uF996\uF997\uF998\uF999\uF99A\uF99B\uF99C\uF99D\uF99E\uF99F\uF9A0\uF9A1\uF9A2\uF9A3\uF9A4\uF9A5\uF9A6\uF9A7\uF9A8\uF9A9\uF9AA\uF9AB\uF9AC\uF9AD\uF9AE\uF9AF\uF9B0\uF9B1\uF9B2\uF9B3\uF9B4\uF9B5\uF9B6\uF9B7\uF9B8\uF9B9\uF9BA\uF9BB\uF9BC\uF9BD\uF9BE\uF9BF\uF9C0\uF9C1\uF9C2\uF9C3\uF9C4\uF9C5\uF9C6\uF9C7\uF9C8\uF9C9\uF9CA\uF9CB\uF9CC\uF9CD\uF9CE\uF9CF\uF9D0\uF9D1\uF9D2\uF9D3\uF9D4\uF9D5\uF9D6\uF9D7\uF9D8\uF9D9\uF9DA\uF9DB\uF9DC\uF9DD\uF9DE\uF9DF\uF9E0\uF9E1\uF9E2\uF9E3\uF9E4\uF9E5\uF9E6\uF9E7\uF9E8\uF9E9\uF9EA\uF9EB\uF9EC\uF9ED\uF9EE\uF9EF\uF9F0\uF9F1\uF9F2\uF9F3\uF9F4\uF9F5\uF9F6\uF9F7\uF9F8\uF9F9\uF9FA\uF9FB\uF9FC\uF9FD\uF9FE\uF9FF\uFA00\uFA01\uFA02\uFA03\uFA04\uFA05\uFA06\uFA07\uFA08\uFA09\uFA0A\uFA0B\uFA0C\uFA0D\uFA0E\uFA0F\uFA10\uFA11\uFA12\uFA13\uFA14\uFA15\uFA16\uFA17\uFA18\uFA19\uFA1A\uFA1B\uFA1C\uFA1D\uFA1E\uFA1F\uFA20\uFA21\uFA22\uFA23\uFA24\uFA25\uFA26\uFA27\uFA28\uFA29\uFA2A\uFA2B\uFA2C\uFA2D\uFA30\uFA31\uFA32\uFA33\uFA34\uFA35\uFA36\uFA37\uFA38\uFA39\uFA3A\uFA3B\uFA3C\uFA3D\uFA3E\uFA3F\uFA40\uFA41\uFA42\uFA43\uFA44\uFA45\uFA46\uFA47\uFA48\uFA49\uFA4A\uFA4B\uFA4C\uFA4D\uFA4E\uFA4F\uFA50\uFA51\uFA52\uFA53\uFA54\uFA55\uFA56\uFA57\uFA58\uFA59\uFA5A\uFA5B\uFA5C\uFA5D\uFA5E\uFA5F\uFA60\uFA61\uFA62\uFA63\uFA64\uFA65\uFA66\uFA67\uFA68\uFA69\uFA6A\uFA70\uFA71\uFA72\uFA73\uFA74\uFA75\uFA76\uFA77\uFA78\uFA79\uFA7A\uFA7B\uFA7C\uFA7D\uFA7E\uFA7F\uFA80\uFA81\uFA82\uFA83\uFA84\uFA85\uFA86\uFA87\uFA88\uFA89\uFA8A\uFA8B\uFA8C\uFA8D\uFA8E\uFA8F\uFA90\uFA91\uFA92\uFA93\uFA94\uFA95\uFA96\uFA97\uFA98\uFA99\uFA9A\uFA9B\uFA9C\uFA9D\uFA9E\uFA9F\uFAA0\uFAA1\uFAA2\uFAA3\uFAA4\uFAA5\uFAA6\uFAA7\uFAA8\uFAA9\uFAAA\uFAAB\uFAAC\uFAAD\uFAAE\uFAAF\uFAB0\uFAB1\uFAB2\uFAB3\uFAB4\uFAB5\uFAB6\uFAB7\uFAB8\uFAB9\uFABA\uFABB\uFABC\uFABD\uFABE\uFABF\uFAC0\uFAC1\uFAC2\uFAC3\uFAC4\uFAC5\uFAC6\uFAC7\uFAC8\uFAC9\uFACA\uFACB\uFACC\uFACD\uFACE\uFACF\uFAD0\uFAD1\uFAD2\uFAD3\uFAD4\uFAD5\uFAD6\uFAD7\uFAD8\uFAD9\uFB1D\uFB1F\uFB20\uFB21\uFB22\uFB23\uFB24\uFB25\uFB26\uFB27\uFB28\uFB2A\uFB2B\uFB2C\uFB2D\uFB2E\uFB2F\uFB30\uFB31\uFB32\uFB33\uFB34\uFB35\uFB36\uFB38\uFB39\uFB3A\uFB3B\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46\uFB47\uFB48\uFB49\uFB4A\uFB4B\uFB4C\uFB4D\uFB4E\uFB4F\uFB50\uFB51\uFB52\uFB53\uFB54\uFB55\uFB56\uFB57\uFB58\uFB59\uFB5A\uFB5B\uFB5C\uFB5D\uFB5E\uFB5F\uFB60\uFB61\uFB62\uFB63\uFB64\uFB65\uFB66\uFB67\uFB68\uFB69\uFB6A\uFB6B\uFB6C\uFB6D\uFB6E\uFB6F\uFB70\uFB71\uFB72\uFB73\uFB74\uFB75\uFB76\uFB77\uFB78\uFB79\uFB7A\uFB7B\uFB7C\uFB7D\uFB7E\uFB7F\uFB80\uFB81\uFB82\uFB83\uFB84\uFB85\uFB86\uFB87\uFB88\uFB89\uFB8A\uFB8B\uFB8C\uFB8D\uFB8E\uFB8F\uFB90\uFB91\uFB92\uFB93\uFB94\uFB95\uFB96\uFB97\uFB98\uFB99\uFB9A\uFB9B\uFB9C\uFB9D\uFB9E\uFB9F\uFBA0\uFBA1\uFBA2\uFBA3\uFBA4\uFBA5\uFBA6\uFBA7\uFBA8\uFBA9\uFBAA\uFBAB\uFBAC\uFBAD\uFBAE\uFBAF\uFBB0\uFBB1\uFBD3\uFBD4\uFBD5\uFBD6\uFBD7\uFBD8\uFBD9\uFBDA\uFBDB\uFBDC\uFBDD\uFBDE\uFBDF\uFBE0\uFBE1\uFBE2\uFBE3\uFBE4\uFBE5\uFBE6\uFBE7\uFBE8\uFBE9\uFBEA\uFBEB\uFBEC\uFBED\uFBEE\uFBEF\uFBF0\uFBF1\uFBF2\uFBF3\uFBF4\uFBF5\uFBF6\uFBF7\uFBF8\uFBF9\uFBFA\uFBFB\uFBFC\uFBFD\uFBFE\uFBFF\uFC00\uFC01\uFC02\uFC03\uFC04\uFC05\uFC06\uFC07\uFC08\uFC09\uFC0A\uFC0B\uFC0C\uFC0D\uFC0E\uFC0F\uFC10\uFC11\uFC12\uFC13\uFC14\uFC15\uFC16\uFC17\uFC18\uFC19\uFC1A\uFC1B\uFC1C\uFC1D\uFC1E\uFC1F\uFC20\uFC21\uFC22\uFC23\uFC24\uFC25\uFC26\uFC27\uFC28\uFC29\uFC2A\uFC2B\uFC2C\uFC2D\uFC2E\uFC2F\uFC30\uFC31\uFC32\uFC33\uFC34\uFC35\uFC36\uFC37\uFC38\uFC39\uFC3A\uFC3B\uFC3C\uFC3D\uFC3E\uFC3F\uFC40\uFC41\uFC42\uFC43\uFC44\uFC45\uFC46\uFC47\uFC48\uFC49\uFC4A\uFC4B\uFC4C\uFC4D\uFC4E\uFC4F\uFC50\uFC51\uFC52\uFC53\uFC54\uFC55\uFC56\uFC57\uFC58\uFC59\uFC5A\uFC5B\uFC5C\uFC5D\uFC5E\uFC5F\uFC60\uFC61\uFC62\uFC63\uFC64\uFC65\uFC66\uFC67\uFC68\uFC69\uFC6A\uFC6B\uFC6C\uFC6D\uFC6E\uFC6F\uFC70\uFC71\uFC72\uFC73\uFC74\uFC75\uFC76\uFC77\uFC78\uFC79\uFC7A\uFC7B\uFC7C\uFC7D\uFC7E\uFC7F\uFC80\uFC81\uFC82\uFC83\uFC84\uFC85\uFC86\uFC87\uFC88\uFC89\uFC8A\uFC8B\uFC8C\uFC8D\uFC8E\uFC8F\uFC90\uFC91\uFC92\uFC93\uFC94\uFC95\uFC96\uFC97\uFC98\uFC99\uFC9A\uFC9B\uFC9C\uFC9D\uFC9E\uFC9F\uFCA0\uFCA1\uFCA2\uFCA3\uFCA4\uFCA5\uFCA6\uFCA7\uFCA8\uFCA9\uFCAA\uFCAB\uFCAC\uFCAD\uFCAE\uFCAF\uFCB0\uFCB1\uFCB2\uFCB3\uFCB4\uFCB5\uFCB6\uFCB7\uFCB8\uFCB9\uFCBA\uFCBB\uFCBC\uFCBD\uFCBE\uFCBF\uFCC0\uFCC1\uFCC2\uFCC3\uFCC4\uFCC5\uFCC6\uFCC7\uFCC8\uFCC9\uFCCA\uFCCB\uFCCC\uFCCD\uFCCE\uFCCF\uFCD0\uFCD1\uFCD2\uFCD3\uFCD4\uFCD5\uFCD6\uFCD7\uFCD8\uFCD9\uFCDA\uFCDB\uFCDC\uFCDD\uFCDE\uFCDF\uFCE0\uFCE1\uFCE2\uFCE3\uFCE4\uFCE5\uFCE6\uFCE7\uFCE8\uFCE9\uFCEA\uFCEB\uFCEC\uFCED\uFCEE\uFCEF\uFCF0\uFCF1\uFCF2\uFCF3\uFCF4\uFCF5\uFCF6\uFCF7\uFCF8\uFCF9\uFCFA\uFCFB\uFCFC\uFCFD\uFCFE\uFCFF\uFD00\uFD01\uFD02\uFD03\uFD04\uFD05\uFD06\uFD07\uFD08\uFD09\uFD0A\uFD0B\uFD0C\uFD0D\uFD0E\uFD0F\uFD10\uFD11\uFD12\uFD13\uFD14\uFD15\uFD16\uFD17\uFD18\uFD19\uFD1A\uFD1B\uFD1C\uFD1D\uFD1E\uFD1F\uFD20\uFD21\uFD22\uFD23\uFD24\uFD25\uFD26\uFD27\uFD28\uFD29\uFD2A\uFD2B\uFD2C\uFD2D\uFD2E\uFD2F\uFD30\uFD31\uFD32\uFD33\uFD34\uFD35\uFD36\uFD37\uFD38\uFD39\uFD3A\uFD3B\uFD3C\uFD3D\uFD50\uFD51\uFD52\uFD53\uFD54\uFD55\uFD56\uFD57\uFD58\uFD59\uFD5A\uFD5B\uFD5C\uFD5D\uFD5E\uFD5F\uFD60\uFD61\uFD62\uFD63\uFD64\uFD65\uFD66\uFD67\uFD68\uFD69\uFD6A\uFD6B\uFD6C\uFD6D\uFD6E\uFD6F\uFD70\uFD71\uFD72\uFD73\uFD74\uFD75\uFD76\uFD77\uFD78\uFD79\uFD7A\uFD7B\uFD7C\uFD7D\uFD7E\uFD7F\uFD80\uFD81\uFD82\uFD83\uFD84\uFD85\uFD86\uFD87\uFD88\uFD89\uFD8A\uFD8B\uFD8C\uFD8D\uFD8E\uFD8F\uFD92\uFD93\uFD94\uFD95\uFD96\uFD97\uFD98\uFD99\uFD9A\uFD9B\uFD9C\uFD9D\uFD9E\uFD9F\uFDA0\uFDA1\uFDA2\uFDA3\uFDA4\uFDA5\uFDA6\uFDA7\uFDA8\uFDA9\uFDAA\uFDAB\uFDAC\uFDAD\uFDAE\uFDAF\uFDB0\uFDB1\uFDB2\uFDB3\uFDB4\uFDB5\uFDB6\uFDB7\uFDB8\uFDB9\uFDBA\uFDBB\uFDBC\uFDBD\uFDBE\uFDBF\uFDC0\uFDC1\uFDC2\uFDC3\uFDC4\uFDC5\uFDC6\uFDC7\uFDF0\uFDF1\uFDF2\uFDF3\uFDF4\uFDF5\uFDF6\uFDF7\uFDF8\uFDF9\uFDFA\uFDFB\uFE70\uFE71\uFE72\uFE73\uFE74\uFE76\uFE77\uFE78\uFE79\uFE7A\uFE7B\uFE7C\uFE7D\uFE7E\uFE7F\uFE80\uFE81\uFE82\uFE83\uFE84\uFE85\uFE86\uFE87\uFE88\uFE89\uFE8A\uFE8B\uFE8C\uFE8D\uFE8E\uFE8F\uFE90\uFE91\uFE92\uFE93\uFE94\uFE95\uFE96\uFE97\uFE98\uFE99\uFE9A\uFE9B\uFE9C\uFE9D\uFE9E\uFE9F\uFEA0\uFEA1\uFEA2\uFEA3\uFEA4\uFEA5\uFEA6\uFEA7\uFEA8\uFEA9\uFEAA\uFEAB\uFEAC\uFEAD\uFEAE\uFEAF\uFEB0\uFEB1\uFEB2\uFEB3\uFEB4\uFEB5\uFEB6\uFEB7\uFEB8\uFEB9\uFEBA\uFEBB\uFEBC\uFEBD\uFEBE\uFEBF\uFEC0\uFEC1\uFEC2\uFEC3\uFEC4\uFEC5\uFEC6\uFEC7\uFEC8\uFEC9\uFECA\uFECB\uFECC\uFECD\uFECE\uFECF\uFED0\uFED1\uFED2\uFED3\uFED4\uFED5\uFED6\uFED7\uFED8\uFED9\uFEDA\uFEDB\uFEDC\uFEDD\uFEDE\uFEDF\uFEE0\uFEE1\uFEE2\uFEE3\uFEE4\uFEE5\uFEE6\uFEE7\uFEE8\uFEE9\uFEEA\uFEEB\uFEEC\uFEED\uFEEE\uFEEF\uFEF0\uFEF1\uFEF2\uFEF3\uFEF4\uFEF5\uFEF6\uFEF7\uFEF8\uFEF9\uFEFA\uFEFB\uFEFC\uFF66\uFF67\uFF68\uFF69\uFF6A\uFF6B\uFF6C\uFF6D\uFF6E\uFF6F\uFF71\uFF72\uFF73\uFF74\uFF75\uFF76\uFF77\uFF78\uFF79\uFF7A\uFF7B\uFF7C\uFF7D\uFF7E\uFF7F\uFF80\uFF81\uFF82\uFF83\uFF84\uFF85\uFF86\uFF87\uFF88\uFF89\uFF8A\uFF8B\uFF8C\uFF8D\uFF8E\uFF8F\uFF90\uFF91\uFF92\uFF93\uFF94\uFF95\uFF96\uFF97\uFF98\uFF99\uFF9A\uFF9B\uFF9C\uFF9D\uFFA0\uFFA1\uFFA2\uFFA3\uFFA4\uFFA5\uFFA6\uFFA7\uFFA8\uFFA9\uFFAA\uFFAB\uFFAC\uFFAD\uFFAE\uFFAF\uFFB0\uFFB1\uFFB2\uFFB3\uFFB4\uFFB5\uFFB6\uFFB7\uFFB8\uFFB9\uFFBA\uFFBB\uFFBC\uFFBD\uFFBE\uFFC2\uFFC3\uFFC4\uFFC5\uFFC6\uFFC7\uFFCA\uFFCB\uFFCC\uFFCD\uFFCE\uFFCF\uFFD2\uFFD3\uFFD4\uFFD5\uFFD6\uFFD7\uFFDA\uFFDB\uFFDC]/,
        peg$c79 = { type: "class", value: "[\\u01BB\\u01C0\\u01C1\\u01C2\\u01C3\\u0294\\u05D0\\u05D1\\u05D2\\u05D3\\u05D4\\u05D5\\u05D6\\u05D7\\u05D8\\u05D9\\u05DA\\u05DB\\u05DC\\u05DD\\u05DE\\u05DF\\u05E0\\u05E1\\u05E2\\u05E3\\u05E4\\u05E5\\u05E6\\u05E7\\u05E8\\u05E9\\u05EA\\u05F0\\u05F1\\u05F2\\u0621\\u0622\\u0623\\u0624\\u0625\\u0626\\u0627\\u0628\\u0629\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u0630\\u0631\\u0632\\u0633\\u0634\\u0635\\u0636\\u0637\\u0638\\u0639\\u063A\\u063B\\u063C\\u063D\\u063E\\u063F\\u0641\\u0642\\u0643\\u0644\\u0645\\u0646\\u0647\\u0648\\u0649\\u064A\\u066E\\u066F\\u0671\\u0672\\u0673\\u0674\\u0675\\u0676\\u0677\\u0678\\u0679\\u067A\\u067B\\u067C\\u067D\\u067E\\u067F\\u0680\\u0681\\u0682\\u0683\\u0684\\u0685\\u0686\\u0687\\u0688\\u0689\\u068A\\u068B\\u068C\\u068D\\u068E\\u068F\\u0690\\u0691\\u0692\\u0693\\u0694\\u0695\\u0696\\u0697\\u0698\\u0699\\u069A\\u069B\\u069C\\u069D\\u069E\\u069F\\u06A0\\u06A1\\u06A2\\u06A3\\u06A4\\u06A5\\u06A6\\u06A7\\u06A8\\u06A9\\u06AA\\u06AB\\u06AC\\u06AD\\u06AE\\u06AF\\u06B0\\u06B1\\u06B2\\u06B3\\u06B4\\u06B5\\u06B6\\u06B7\\u06B8\\u06B9\\u06BA\\u06BB\\u06BC\\u06BD\\u06BE\\u06BF\\u06C0\\u06C1\\u06C2\\u06C3\\u06C4\\u06C5\\u06C6\\u06C7\\u06C8\\u06C9\\u06CA\\u06CB\\u06CC\\u06CD\\u06CE\\u06CF\\u06D0\\u06D1\\u06D2\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA\\u06FB\\u06FC\\u06FF\\u0710\\u0712\\u0713\\u0714\\u0715\\u0716\\u0717\\u0718\\u0719\\u071A\\u071B\\u071C\\u071D\\u071E\\u071F\\u0720\\u0721\\u0722\\u0723\\u0724\\u0725\\u0726\\u0727\\u0728\\u0729\\u072A\\u072B\\u072C\\u072D\\u072E\\u072F\\u074D\\u074E\\u074F\\u0750\\u0751\\u0752\\u0753\\u0754\\u0755\\u0756\\u0757\\u0758\\u0759\\u075A\\u075B\\u075C\\u075D\\u075E\\u075F\\u0760\\u0761\\u0762\\u0763\\u0764\\u0765\\u0766\\u0767\\u0768\\u0769\\u076A\\u076B\\u076C\\u076D\\u076E\\u076F\\u0770\\u0771\\u0772\\u0773\\u0774\\u0775\\u0776\\u0777\\u0778\\u0779\\u077A\\u077B\\u077C\\u077D\\u077E\\u077F\\u0780\\u0781\\u0782\\u0783\\u0784\\u0785\\u0786\\u0787\\u0788\\u0789\\u078A\\u078B\\u078C\\u078D\\u078E\\u078F\\u0790\\u0791\\u0792\\u0793\\u0794\\u0795\\u0796\\u0797\\u0798\\u0799\\u079A\\u079B\\u079C\\u079D\\u079E\\u079F\\u07A0\\u07A1\\u07A2\\u07A3\\u07A4\\u07A5\\u07B1\\u07CA\\u07CB\\u07CC\\u07CD\\u07CE\\u07CF\\u07D0\\u07D1\\u07D2\\u07D3\\u07D4\\u07D5\\u07D6\\u07D7\\u07D8\\u07D9\\u07DA\\u07DB\\u07DC\\u07DD\\u07DE\\u07DF\\u07E0\\u07E1\\u07E2\\u07E3\\u07E4\\u07E5\\u07E6\\u07E7\\u07E8\\u07E9\\u07EA\\u0904\\u0905\\u0906\\u0907\\u0908\\u0909\\u090A\\u090B\\u090C\\u090D\\u090E\\u090F\\u0910\\u0911\\u0912\\u0913\\u0914\\u0915\\u0916\\u0917\\u0918\\u0919\\u091A\\u091B\\u091C\\u091D\\u091E\\u091F\\u0920\\u0921\\u0922\\u0923\\u0924\\u0925\\u0926\\u0927\\u0928\\u0929\\u092A\\u092B\\u092C\\u092D\\u092E\\u092F\\u0930\\u0931\\u0932\\u0933\\u0934\\u0935\\u0936\\u0937\\u0938\\u0939\\u093D\\u0950\\u0958\\u0959\\u095A\\u095B\\u095C\\u095D\\u095E\\u095F\\u0960\\u0961\\u0972\\u097B\\u097C\\u097D\\u097E\\u097F\\u0985\\u0986\\u0987\\u0988\\u0989\\u098A\\u098B\\u098C\\u098F\\u0990\\u0993\\u0994\\u0995\\u0996\\u0997\\u0998\\u0999\\u099A\\u099B\\u099C\\u099D\\u099E\\u099F\\u09A0\\u09A1\\u09A2\\u09A3\\u09A4\\u09A5\\u09A6\\u09A7\\u09A8\\u09AA\\u09AB\\u09AC\\u09AD\\u09AE\\u09AF\\u09B0\\u09B2\\u09B6\\u09B7\\u09B8\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF\\u09E0\\u09E1\\u09F0\\u09F1\\u0A05\\u0A06\\u0A07\\u0A08\\u0A09\\u0A0A\\u0A0F\\u0A10\\u0A13\\u0A14\\u0A15\\u0A16\\u0A17\\u0A18\\u0A19\\u0A1A\\u0A1B\\u0A1C\\u0A1D\\u0A1E\\u0A1F\\u0A20\\u0A21\\u0A22\\u0A23\\u0A24\\u0A25\\u0A26\\u0A27\\u0A28\\u0A2A\\u0A2B\\u0A2C\\u0A2D\\u0A2E\\u0A2F\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59\\u0A5A\\u0A5B\\u0A5C\\u0A5E\\u0A72\\u0A73\\u0A74\\u0A85\\u0A86\\u0A87\\u0A88\\u0A89\\u0A8A\\u0A8B\\u0A8C\\u0A8D\\u0A8F\\u0A90\\u0A91\\u0A93\\u0A94\\u0A95\\u0A96\\u0A97\\u0A98\\u0A99\\u0A9A\\u0A9B\\u0A9C\\u0A9D\\u0A9E\\u0A9F\\u0AA0\\u0AA1\\u0AA2\\u0AA3\\u0AA4\\u0AA5\\u0AA6\\u0AA7\\u0AA8\\u0AAA\\u0AAB\\u0AAC\\u0AAD\\u0AAE\\u0AAF\\u0AB0\\u0AB2\\u0AB3\\u0AB5\\u0AB6\\u0AB7\\u0AB8\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05\\u0B06\\u0B07\\u0B08\\u0B09\\u0B0A\\u0B0B\\u0B0C\\u0B0F\\u0B10\\u0B13\\u0B14\\u0B15\\u0B16\\u0B17\\u0B18\\u0B19\\u0B1A\\u0B1B\\u0B1C\\u0B1D\\u0B1E\\u0B1F\\u0B20\\u0B21\\u0B22\\u0B23\\u0B24\\u0B25\\u0B26\\u0B27\\u0B28\\u0B2A\\u0B2B\\u0B2C\\u0B2D\\u0B2E\\u0B2F\\u0B30\\u0B32\\u0B33\\u0B35\\u0B36\\u0B37\\u0B38\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F\\u0B60\\u0B61\\u0B71\\u0B83\\u0B85\\u0B86\\u0B87\\u0B88\\u0B89\\u0B8A\\u0B8E\\u0B8F\\u0B90\\u0B92\\u0B93\\u0B94\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8\\u0BA9\\u0BAA\\u0BAE\\u0BAF\\u0BB0\\u0BB1\\u0BB2\\u0BB3\\u0BB4\\u0BB5\\u0BB6\\u0BB7\\u0BB8\\u0BB9\\u0BD0\\u0C05\\u0C06\\u0C07\\u0C08\\u0C09\\u0C0A\\u0C0B\\u0C0C\\u0C0E\\u0C0F\\u0C10\\u0C12\\u0C13\\u0C14\\u0C15\\u0C16\\u0C17\\u0C18\\u0C19\\u0C1A\\u0C1B\\u0C1C\\u0C1D\\u0C1E\\u0C1F\\u0C20\\u0C21\\u0C22\\u0C23\\u0C24\\u0C25\\u0C26\\u0C27\\u0C28\\u0C2A\\u0C2B\\u0C2C\\u0C2D\\u0C2E\\u0C2F\\u0C30\\u0C31\\u0C32\\u0C33\\u0C35\\u0C36\\u0C37\\u0C38\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85\\u0C86\\u0C87\\u0C88\\u0C89\\u0C8A\\u0C8B\\u0C8C\\u0C8E\\u0C8F\\u0C90\\u0C92\\u0C93\\u0C94\\u0C95\\u0C96\\u0C97\\u0C98\\u0C99\\u0C9A\\u0C9B\\u0C9C\\u0C9D\\u0C9E\\u0C9F\\u0CA0\\u0CA1\\u0CA2\\u0CA3\\u0CA4\\u0CA5\\u0CA6\\u0CA7\\u0CA8\\u0CAA\\u0CAB\\u0CAC\\u0CAD\\u0CAE\\u0CAF\\u0CB0\\u0CB1\\u0CB2\\u0CB3\\u0CB5\\u0CB6\\u0CB7\\u0CB8\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0D05\\u0D06\\u0D07\\u0D08\\u0D09\\u0D0A\\u0D0B\\u0D0C\\u0D0E\\u0D0F\\u0D10\\u0D12\\u0D13\\u0D14\\u0D15\\u0D16\\u0D17\\u0D18\\u0D19\\u0D1A\\u0D1B\\u0D1C\\u0D1D\\u0D1E\\u0D1F\\u0D20\\u0D21\\u0D22\\u0D23\\u0D24\\u0D25\\u0D26\\u0D27\\u0D28\\u0D2A\\u0D2B\\u0D2C\\u0D2D\\u0D2E\\u0D2F\\u0D30\\u0D31\\u0D32\\u0D33\\u0D34\\u0D35\\u0D36\\u0D37\\u0D38\\u0D39\\u0D3D\\u0D60\\u0D61\\u0D7A\\u0D7B\\u0D7C\\u0D7D\\u0D7E\\u0D7F\\u0D85\\u0D86\\u0D87\\u0D88\\u0D89\\u0D8A\\u0D8B\\u0D8C\\u0D8D\\u0D8E\\u0D8F\\u0D90\\u0D91\\u0D92\\u0D93\\u0D94\\u0D95\\u0D96\\u0D9A\\u0D9B\\u0D9C\\u0D9D\\u0D9E\\u0D9F\\u0DA0\\u0DA1\\u0DA2\\u0DA3\\u0DA4\\u0DA5\\u0DA6\\u0DA7\\u0DA8\\u0DA9\\u0DAA\\u0DAB\\u0DAC\\u0DAD\\u0DAE\\u0DAF\\u0DB0\\u0DB1\\u0DB3\\u0DB4\\u0DB5\\u0DB6\\u0DB7\\u0DB8\\u0DB9\\u0DBA\\u0DBB\\u0DBD\\u0DC0\\u0DC1\\u0DC2\\u0DC3\\u0DC4\\u0DC5\\u0DC6\\u0E01\\u0E02\\u0E03\\u0E04\\u0E05\\u0E06\\u0E07\\u0E08\\u0E09\\u0E0A\\u0E0B\\u0E0C\\u0E0D\\u0E0E\\u0E0F\\u0E10\\u0E11\\u0E12\\u0E13\\u0E14\\u0E15\\u0E16\\u0E17\\u0E18\\u0E19\\u0E1A\\u0E1B\\u0E1C\\u0E1D\\u0E1E\\u0E1F\\u0E20\\u0E21\\u0E22\\u0E23\\u0E24\\u0E25\\u0E26\\u0E27\\u0E28\\u0E29\\u0E2A\\u0E2B\\u0E2C\\u0E2D\\u0E2E\\u0E2F\\u0E30\\u0E32\\u0E33\\u0E40\\u0E41\\u0E42\\u0E43\\u0E44\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94\\u0E95\\u0E96\\u0E97\\u0E99\\u0E9A\\u0E9B\\u0E9C\\u0E9D\\u0E9E\\u0E9F\\u0EA1\\u0EA2\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD\\u0EAE\\u0EAF\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0\\u0EC1\\u0EC2\\u0EC3\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40\\u0F41\\u0F42\\u0F43\\u0F44\\u0F45\\u0F46\\u0F47\\u0F49\\u0F4A\\u0F4B\\u0F4C\\u0F4D\\u0F4E\\u0F4F\\u0F50\\u0F51\\u0F52\\u0F53\\u0F54\\u0F55\\u0F56\\u0F57\\u0F58\\u0F59\\u0F5A\\u0F5B\\u0F5C\\u0F5D\\u0F5E\\u0F5F\\u0F60\\u0F61\\u0F62\\u0F63\\u0F64\\u0F65\\u0F66\\u0F67\\u0F68\\u0F69\\u0F6A\\u0F6B\\u0F6C\\u0F88\\u0F89\\u0F8A\\u0F8B\\u1000\\u1001\\u1002\\u1003\\u1004\\u1005\\u1006\\u1007\\u1008\\u1009\\u100A\\u100B\\u100C\\u100D\\u100E\\u100F\\u1010\\u1011\\u1012\\u1013\\u1014\\u1015\\u1016\\u1017\\u1018\\u1019\\u101A\\u101B\\u101C\\u101D\\u101E\\u101F\\u1020\\u1021\\u1022\\u1023\\u1024\\u1025\\u1026\\u1027\\u1028\\u1029\\u102A\\u103F\\u1050\\u1051\\u1052\\u1053\\u1054\\u1055\\u105A\\u105B\\u105C\\u105D\\u1061\\u1065\\u1066\\u106E\\u106F\\u1070\\u1075\\u1076\\u1077\\u1078\\u1079\\u107A\\u107B\\u107C\\u107D\\u107E\\u107F\\u1080\\u1081\\u108E\\u10D0\\u10D1\\u10D2\\u10D3\\u10D4\\u10D5\\u10D6\\u10D7\\u10D8\\u10D9\\u10DA\\u10DB\\u10DC\\u10DD\\u10DE\\u10DF\\u10E0\\u10E1\\u10E2\\u10E3\\u10E4\\u10E5\\u10E6\\u10E7\\u10E8\\u10E9\\u10EA\\u10EB\\u10EC\\u10ED\\u10EE\\u10EF\\u10F0\\u10F1\\u10F2\\u10F3\\u10F4\\u10F5\\u10F6\\u10F7\\u10F8\\u10F9\\u10FA\\u1100\\u1101\\u1102\\u1103\\u1104\\u1105\\u1106\\u1107\\u1108\\u1109\\u110A\\u110B\\u110C\\u110D\\u110E\\u110F\\u1110\\u1111\\u1112\\u1113\\u1114\\u1115\\u1116\\u1117\\u1118\\u1119\\u111A\\u111B\\u111C\\u111D\\u111E\\u111F\\u1120\\u1121\\u1122\\u1123\\u1124\\u1125\\u1126\\u1127\\u1128\\u1129\\u112A\\u112B\\u112C\\u112D\\u112E\\u112F\\u1130\\u1131\\u1132\\u1133\\u1134\\u1135\\u1136\\u1137\\u1138\\u1139\\u113A\\u113B\\u113C\\u113D\\u113E\\u113F\\u1140\\u1141\\u1142\\u1143\\u1144\\u1145\\u1146\\u1147\\u1148\\u1149\\u114A\\u114B\\u114C\\u114D\\u114E\\u114F\\u1150\\u1151\\u1152\\u1153\\u1154\\u1155\\u1156\\u1157\\u1158\\u1159\\u115F\\u1160\\u1161\\u1162\\u1163\\u1164\\u1165\\u1166\\u1167\\u1168\\u1169\\u116A\\u116B\\u116C\\u116D\\u116E\\u116F\\u1170\\u1171\\u1172\\u1173\\u1174\\u1175\\u1176\\u1177\\u1178\\u1179\\u117A\\u117B\\u117C\\u117D\\u117E\\u117F\\u1180\\u1181\\u1182\\u1183\\u1184\\u1185\\u1186\\u1187\\u1188\\u1189\\u118A\\u118B\\u118C\\u118D\\u118E\\u118F\\u1190\\u1191\\u1192\\u1193\\u1194\\u1195\\u1196\\u1197\\u1198\\u1199\\u119A\\u119B\\u119C\\u119D\\u119E\\u119F\\u11A0\\u11A1\\u11A2\\u11A8\\u11A9\\u11AA\\u11AB\\u11AC\\u11AD\\u11AE\\u11AF\\u11B0\\u11B1\\u11B2\\u11B3\\u11B4\\u11B5\\u11B6\\u11B7\\u11B8\\u11B9\\u11BA\\u11BB\\u11BC\\u11BD\\u11BE\\u11BF\\u11C0\\u11C1\\u11C2\\u11C3\\u11C4\\u11C5\\u11C6\\u11C7\\u11C8\\u11C9\\u11CA\\u11CB\\u11CC\\u11CD\\u11CE\\u11CF\\u11D0\\u11D1\\u11D2\\u11D3\\u11D4\\u11D5\\u11D6\\u11D7\\u11D8\\u11D9\\u11DA\\u11DB\\u11DC\\u11DD\\u11DE\\u11DF\\u11E0\\u11E1\\u11E2\\u11E3\\u11E4\\u11E5\\u11E6\\u11E7\\u11E8\\u11E9\\u11EA\\u11EB\\u11EC\\u11ED\\u11EE\\u11EF\\u11F0\\u11F1\\u11F2\\u11F3\\u11F4\\u11F5\\u11F6\\u11F7\\u11F8\\u11F9\\u1200\\u1201\\u1202\\u1203\\u1204\\u1205\\u1206\\u1207\\u1208\\u1209\\u120A\\u120B\\u120C\\u120D\\u120E\\u120F\\u1210\\u1211\\u1212\\u1213\\u1214\\u1215\\u1216\\u1217\\u1218\\u1219\\u121A\\u121B\\u121C\\u121D\\u121E\\u121F\\u1220\\u1221\\u1222\\u1223\\u1224\\u1225\\u1226\\u1227\\u1228\\u1229\\u122A\\u122B\\u122C\\u122D\\u122E\\u122F\\u1230\\u1231\\u1232\\u1233\\u1234\\u1235\\u1236\\u1237\\u1238\\u1239\\u123A\\u123B\\u123C\\u123D\\u123E\\u123F\\u1240\\u1241\\u1242\\u1243\\u1244\\u1245\\u1246\\u1247\\u1248\\u124A\\u124B\\u124C\\u124D\\u1250\\u1251\\u1252\\u1253\\u1254\\u1255\\u1256\\u1258\\u125A\\u125B\\u125C\\u125D\\u1260\\u1261\\u1262\\u1263\\u1264\\u1265\\u1266\\u1267\\u1268\\u1269\\u126A\\u126B\\u126C\\u126D\\u126E\\u126F\\u1270\\u1271\\u1272\\u1273\\u1274\\u1275\\u1276\\u1277\\u1278\\u1279\\u127A\\u127B\\u127C\\u127D\\u127E\\u127F\\u1280\\u1281\\u1282\\u1283\\u1284\\u1285\\u1286\\u1287\\u1288\\u128A\\u128B\\u128C\\u128D\\u1290\\u1291\\u1292\\u1293\\u1294\\u1295\\u1296\\u1297\\u1298\\u1299\\u129A\\u129B\\u129C\\u129D\\u129E\\u129F\\u12A0\\u12A1\\u12A2\\u12A3\\u12A4\\u12A5\\u12A6\\u12A7\\u12A8\\u12A9\\u12AA\\u12AB\\u12AC\\u12AD\\u12AE\\u12AF\\u12B0\\u12B2\\u12B3\\u12B4\\u12B5\\u12B8\\u12B9\\u12BA\\u12BB\\u12BC\\u12BD\\u12BE\\u12C0\\u12C2\\u12C3\\u12C4\\u12C5\\u12C8\\u12C9\\u12CA\\u12CB\\u12CC\\u12CD\\u12CE\\u12CF\\u12D0\\u12D1\\u12D2\\u12D3\\u12D4\\u12D5\\u12D6\\u12D8\\u12D9\\u12DA\\u12DB\\u12DC\\u12DD\\u12DE\\u12DF\\u12E0\\u12E1\\u12E2\\u12E3\\u12E4\\u12E5\\u12E6\\u12E7\\u12E8\\u12E9\\u12EA\\u12EB\\u12EC\\u12ED\\u12EE\\u12EF\\u12F0\\u12F1\\u12F2\\u12F3\\u12F4\\u12F5\\u12F6\\u12F7\\u12F8\\u12F9\\u12FA\\u12FB\\u12FC\\u12FD\\u12FE\\u12FF\\u1300\\u1301\\u1302\\u1303\\u1304\\u1305\\u1306\\u1307\\u1308\\u1309\\u130A\\u130B\\u130C\\u130D\\u130E\\u130F\\u1310\\u1312\\u1313\\u1314\\u1315\\u1318\\u1319\\u131A\\u131B\\u131C\\u131D\\u131E\\u131F\\u1320\\u1321\\u1322\\u1323\\u1324\\u1325\\u1326\\u1327\\u1328\\u1329\\u132A\\u132B\\u132C\\u132D\\u132E\\u132F\\u1330\\u1331\\u1332\\u1333\\u1334\\u1335\\u1336\\u1337\\u1338\\u1339\\u133A\\u133B\\u133C\\u133D\\u133E\\u133F\\u1340\\u1341\\u1342\\u1343\\u1344\\u1345\\u1346\\u1347\\u1348\\u1349\\u134A\\u134B\\u134C\\u134D\\u134E\\u134F\\u1350\\u1351\\u1352\\u1353\\u1354\\u1355\\u1356\\u1357\\u1358\\u1359\\u135A\\u1380\\u1381\\u1382\\u1383\\u1384\\u1385\\u1386\\u1387\\u1388\\u1389\\u138A\\u138B\\u138C\\u138D\\u138E\\u138F\\u13A0\\u13A1\\u13A2\\u13A3\\u13A4\\u13A5\\u13A6\\u13A7\\u13A8\\u13A9\\u13AA\\u13AB\\u13AC\\u13AD\\u13AE\\u13AF\\u13B0\\u13B1\\u13B2\\u13B3\\u13B4\\u13B5\\u13B6\\u13B7\\u13B8\\u13B9\\u13BA\\u13BB\\u13BC\\u13BD\\u13BE\\u13BF\\u13C0\\u13C1\\u13C2\\u13C3\\u13C4\\u13C5\\u13C6\\u13C7\\u13C8\\u13C9\\u13CA\\u13CB\\u13CC\\u13CD\\u13CE\\u13CF\\u13D0\\u13D1\\u13D2\\u13D3\\u13D4\\u13D5\\u13D6\\u13D7\\u13D8\\u13D9\\u13DA\\u13DB\\u13DC\\u13DD\\u13DE\\u13DF\\u13E0\\u13E1\\u13E2\\u13E3\\u13E4\\u13E5\\u13E6\\u13E7\\u13E8\\u13E9\\u13EA\\u13EB\\u13EC\\u13ED\\u13EE\\u13EF\\u13F0\\u13F1\\u13F2\\u13F3\\u13F4\\u1401\\u1402\\u1403\\u1404\\u1405\\u1406\\u1407\\u1408\\u1409\\u140A\\u140B\\u140C\\u140D\\u140E\\u140F\\u1410\\u1411\\u1412\\u1413\\u1414\\u1415\\u1416\\u1417\\u1418\\u1419\\u141A\\u141B\\u141C\\u141D\\u141E\\u141F\\u1420\\u1421\\u1422\\u1423\\u1424\\u1425\\u1426\\u1427\\u1428\\u1429\\u142A\\u142B\\u142C\\u142D\\u142E\\u142F\\u1430\\u1431\\u1432\\u1433\\u1434\\u1435\\u1436\\u1437\\u1438\\u1439\\u143A\\u143B\\u143C\\u143D\\u143E\\u143F\\u1440\\u1441\\u1442\\u1443\\u1444\\u1445\\u1446\\u1447\\u1448\\u1449\\u144A\\u144B\\u144C\\u144D\\u144E\\u144F\\u1450\\u1451\\u1452\\u1453\\u1454\\u1455\\u1456\\u1457\\u1458\\u1459\\u145A\\u145B\\u145C\\u145D\\u145E\\u145F\\u1460\\u1461\\u1462\\u1463\\u1464\\u1465\\u1466\\u1467\\u1468\\u1469\\u146A\\u146B\\u146C\\u146D\\u146E\\u146F\\u1470\\u1471\\u1472\\u1473\\u1474\\u1475\\u1476\\u1477\\u1478\\u1479\\u147A\\u147B\\u147C\\u147D\\u147E\\u147F\\u1480\\u1481\\u1482\\u1483\\u1484\\u1485\\u1486\\u1487\\u1488\\u1489\\u148A\\u148B\\u148C\\u148D\\u148E\\u148F\\u1490\\u1491\\u1492\\u1493\\u1494\\u1495\\u1496\\u1497\\u1498\\u1499\\u149A\\u149B\\u149C\\u149D\\u149E\\u149F\\u14A0\\u14A1\\u14A2\\u14A3\\u14A4\\u14A5\\u14A6\\u14A7\\u14A8\\u14A9\\u14AA\\u14AB\\u14AC\\u14AD\\u14AE\\u14AF\\u14B0\\u14B1\\u14B2\\u14B3\\u14B4\\u14B5\\u14B6\\u14B7\\u14B8\\u14B9\\u14BA\\u14BB\\u14BC\\u14BD\\u14BE\\u14BF\\u14C0\\u14C1\\u14C2\\u14C3\\u14C4\\u14C5\\u14C6\\u14C7\\u14C8\\u14C9\\u14CA\\u14CB\\u14CC\\u14CD\\u14CE\\u14CF\\u14D0\\u14D1\\u14D2\\u14D3\\u14D4\\u14D5\\u14D6\\u14D7\\u14D8\\u14D9\\u14DA\\u14DB\\u14DC\\u14DD\\u14DE\\u14DF\\u14E0\\u14E1\\u14E2\\u14E3\\u14E4\\u14E5\\u14E6\\u14E7\\u14E8\\u14E9\\u14EA\\u14EB\\u14EC\\u14ED\\u14EE\\u14EF\\u14F0\\u14F1\\u14F2\\u14F3\\u14F4\\u14F5\\u14F6\\u14F7\\u14F8\\u14F9\\u14FA\\u14FB\\u14FC\\u14FD\\u14FE\\u14FF\\u1500\\u1501\\u1502\\u1503\\u1504\\u1505\\u1506\\u1507\\u1508\\u1509\\u150A\\u150B\\u150C\\u150D\\u150E\\u150F\\u1510\\u1511\\u1512\\u1513\\u1514\\u1515\\u1516\\u1517\\u1518\\u1519\\u151A\\u151B\\u151C\\u151D\\u151E\\u151F\\u1520\\u1521\\u1522\\u1523\\u1524\\u1525\\u1526\\u1527\\u1528\\u1529\\u152A\\u152B\\u152C\\u152D\\u152E\\u152F\\u1530\\u1531\\u1532\\u1533\\u1534\\u1535\\u1536\\u1537\\u1538\\u1539\\u153A\\u153B\\u153C\\u153D\\u153E\\u153F\\u1540\\u1541\\u1542\\u1543\\u1544\\u1545\\u1546\\u1547\\u1548\\u1549\\u154A\\u154B\\u154C\\u154D\\u154E\\u154F\\u1550\\u1551\\u1552\\u1553\\u1554\\u1555\\u1556\\u1557\\u1558\\u1559\\u155A\\u155B\\u155C\\u155D\\u155E\\u155F\\u1560\\u1561\\u1562\\u1563\\u1564\\u1565\\u1566\\u1567\\u1568\\u1569\\u156A\\u156B\\u156C\\u156D\\u156E\\u156F\\u1570\\u1571\\u1572\\u1573\\u1574\\u1575\\u1576\\u1577\\u1578\\u1579\\u157A\\u157B\\u157C\\u157D\\u157E\\u157F\\u1580\\u1581\\u1582\\u1583\\u1584\\u1585\\u1586\\u1587\\u1588\\u1589\\u158A\\u158B\\u158C\\u158D\\u158E\\u158F\\u1590\\u1591\\u1592\\u1593\\u1594\\u1595\\u1596\\u1597\\u1598\\u1599\\u159A\\u159B\\u159C\\u159D\\u159E\\u159F\\u15A0\\u15A1\\u15A2\\u15A3\\u15A4\\u15A5\\u15A6\\u15A7\\u15A8\\u15A9\\u15AA\\u15AB\\u15AC\\u15AD\\u15AE\\u15AF\\u15B0\\u15B1\\u15B2\\u15B3\\u15B4\\u15B5\\u15B6\\u15B7\\u15B8\\u15B9\\u15BA\\u15BB\\u15BC\\u15BD\\u15BE\\u15BF\\u15C0\\u15C1\\u15C2\\u15C3\\u15C4\\u15C5\\u15C6\\u15C7\\u15C8\\u15C9\\u15CA\\u15CB\\u15CC\\u15CD\\u15CE\\u15CF\\u15D0\\u15D1\\u15D2\\u15D3\\u15D4\\u15D5\\u15D6\\u15D7\\u15D8\\u15D9\\u15DA\\u15DB\\u15DC\\u15DD\\u15DE\\u15DF\\u15E0\\u15E1\\u15E2\\u15E3\\u15E4\\u15E5\\u15E6\\u15E7\\u15E8\\u15E9\\u15EA\\u15EB\\u15EC\\u15ED\\u15EE\\u15EF\\u15F0\\u15F1\\u15F2\\u15F3\\u15F4\\u15F5\\u15F6\\u15F7\\u15F8\\u15F9\\u15FA\\u15FB\\u15FC\\u15FD\\u15FE\\u15FF\\u1600\\u1601\\u1602\\u1603\\u1604\\u1605\\u1606\\u1607\\u1608\\u1609\\u160A\\u160B\\u160C\\u160D\\u160E\\u160F\\u1610\\u1611\\u1612\\u1613\\u1614\\u1615\\u1616\\u1617\\u1618\\u1619\\u161A\\u161B\\u161C\\u161D\\u161E\\u161F\\u1620\\u1621\\u1622\\u1623\\u1624\\u1625\\u1626\\u1627\\u1628\\u1629\\u162A\\u162B\\u162C\\u162D\\u162E\\u162F\\u1630\\u1631\\u1632\\u1633\\u1634\\u1635\\u1636\\u1637\\u1638\\u1639\\u163A\\u163B\\u163C\\u163D\\u163E\\u163F\\u1640\\u1641\\u1642\\u1643\\u1644\\u1645\\u1646\\u1647\\u1648\\u1649\\u164A\\u164B\\u164C\\u164D\\u164E\\u164F\\u1650\\u1651\\u1652\\u1653\\u1654\\u1655\\u1656\\u1657\\u1658\\u1659\\u165A\\u165B\\u165C\\u165D\\u165E\\u165F\\u1660\\u1661\\u1662\\u1663\\u1664\\u1665\\u1666\\u1667\\u1668\\u1669\\u166A\\u166B\\u166C\\u166F\\u1670\\u1671\\u1672\\u1673\\u1674\\u1675\\u1676\\u1681\\u1682\\u1683\\u1684\\u1685\\u1686\\u1687\\u1688\\u1689\\u168A\\u168B\\u168C\\u168D\\u168E\\u168F\\u1690\\u1691\\u1692\\u1693\\u1694\\u1695\\u1696\\u1697\\u1698\\u1699\\u169A\\u16A0\\u16A1\\u16A2\\u16A3\\u16A4\\u16A5\\u16A6\\u16A7\\u16A8\\u16A9\\u16AA\\u16AB\\u16AC\\u16AD\\u16AE\\u16AF\\u16B0\\u16B1\\u16B2\\u16B3\\u16B4\\u16B5\\u16B6\\u16B7\\u16B8\\u16B9\\u16BA\\u16BB\\u16BC\\u16BD\\u16BE\\u16BF\\u16C0\\u16C1\\u16C2\\u16C3\\u16C4\\u16C5\\u16C6\\u16C7\\u16C8\\u16C9\\u16CA\\u16CB\\u16CC\\u16CD\\u16CE\\u16CF\\u16D0\\u16D1\\u16D2\\u16D3\\u16D4\\u16D5\\u16D6\\u16D7\\u16D8\\u16D9\\u16DA\\u16DB\\u16DC\\u16DD\\u16DE\\u16DF\\u16E0\\u16E1\\u16E2\\u16E3\\u16E4\\u16E5\\u16E6\\u16E7\\u16E8\\u16E9\\u16EA\\u1700\\u1701\\u1702\\u1703\\u1704\\u1705\\u1706\\u1707\\u1708\\u1709\\u170A\\u170B\\u170C\\u170E\\u170F\\u1710\\u1711\\u1720\\u1721\\u1722\\u1723\\u1724\\u1725\\u1726\\u1727\\u1728\\u1729\\u172A\\u172B\\u172C\\u172D\\u172E\\u172F\\u1730\\u1731\\u1740\\u1741\\u1742\\u1743\\u1744\\u1745\\u1746\\u1747\\u1748\\u1749\\u174A\\u174B\\u174C\\u174D\\u174E\\u174F\\u1750\\u1751\\u1760\\u1761\\u1762\\u1763\\u1764\\u1765\\u1766\\u1767\\u1768\\u1769\\u176A\\u176B\\u176C\\u176E\\u176F\\u1770\\u1780\\u1781\\u1782\\u1783\\u1784\\u1785\\u1786\\u1787\\u1788\\u1789\\u178A\\u178B\\u178C\\u178D\\u178E\\u178F\\u1790\\u1791\\u1792\\u1793\\u1794\\u1795\\u1796\\u1797\\u1798\\u1799\\u179A\\u179B\\u179C\\u179D\\u179E\\u179F\\u17A0\\u17A1\\u17A2\\u17A3\\u17A4\\u17A5\\u17A6\\u17A7\\u17A8\\u17A9\\u17AA\\u17AB\\u17AC\\u17AD\\u17AE\\u17AF\\u17B0\\u17B1\\u17B2\\u17B3\\u17DC\\u1820\\u1821\\u1822\\u1823\\u1824\\u1825\\u1826\\u1827\\u1828\\u1829\\u182A\\u182B\\u182C\\u182D\\u182E\\u182F\\u1830\\u1831\\u1832\\u1833\\u1834\\u1835\\u1836\\u1837\\u1838\\u1839\\u183A\\u183B\\u183C\\u183D\\u183E\\u183F\\u1840\\u1841\\u1842\\u1844\\u1845\\u1846\\u1847\\u1848\\u1849\\u184A\\u184B\\u184C\\u184D\\u184E\\u184F\\u1850\\u1851\\u1852\\u1853\\u1854\\u1855\\u1856\\u1857\\u1858\\u1859\\u185A\\u185B\\u185C\\u185D\\u185E\\u185F\\u1860\\u1861\\u1862\\u1863\\u1864\\u1865\\u1866\\u1867\\u1868\\u1869\\u186A\\u186B\\u186C\\u186D\\u186E\\u186F\\u1870\\u1871\\u1872\\u1873\\u1874\\u1875\\u1876\\u1877\\u1880\\u1881\\u1882\\u1883\\u1884\\u1885\\u1886\\u1887\\u1888\\u1889\\u188A\\u188B\\u188C\\u188D\\u188E\\u188F\\u1890\\u1891\\u1892\\u1893\\u1894\\u1895\\u1896\\u1897\\u1898\\u1899\\u189A\\u189B\\u189C\\u189D\\u189E\\u189F\\u18A0\\u18A1\\u18A2\\u18A3\\u18A4\\u18A5\\u18A6\\u18A7\\u18A8\\u18AA\\u1900\\u1901\\u1902\\u1903\\u1904\\u1905\\u1906\\u1907\\u1908\\u1909\\u190A\\u190B\\u190C\\u190D\\u190E\\u190F\\u1910\\u1911\\u1912\\u1913\\u1914\\u1915\\u1916\\u1917\\u1918\\u1919\\u191A\\u191B\\u191C\\u1950\\u1951\\u1952\\u1953\\u1954\\u1955\\u1956\\u1957\\u1958\\u1959\\u195A\\u195B\\u195C\\u195D\\u195E\\u195F\\u1960\\u1961\\u1962\\u1963\\u1964\\u1965\\u1966\\u1967\\u1968\\u1969\\u196A\\u196B\\u196C\\u196D\\u1970\\u1971\\u1972\\u1973\\u1974\\u1980\\u1981\\u1982\\u1983\\u1984\\u1985\\u1986\\u1987\\u1988\\u1989\\u198A\\u198B\\u198C\\u198D\\u198E\\u198F\\u1990\\u1991\\u1992\\u1993\\u1994\\u1995\\u1996\\u1997\\u1998\\u1999\\u199A\\u199B\\u199C\\u199D\\u199E\\u199F\\u19A0\\u19A1\\u19A2\\u19A3\\u19A4\\u19A5\\u19A6\\u19A7\\u19A8\\u19A9\\u19C1\\u19C2\\u19C3\\u19C4\\u19C5\\u19C6\\u19C7\\u1A00\\u1A01\\u1A02\\u1A03\\u1A04\\u1A05\\u1A06\\u1A07\\u1A08\\u1A09\\u1A0A\\u1A0B\\u1A0C\\u1A0D\\u1A0E\\u1A0F\\u1A10\\u1A11\\u1A12\\u1A13\\u1A14\\u1A15\\u1A16\\u1B05\\u1B06\\u1B07\\u1B08\\u1B09\\u1B0A\\u1B0B\\u1B0C\\u1B0D\\u1B0E\\u1B0F\\u1B10\\u1B11\\u1B12\\u1B13\\u1B14\\u1B15\\u1B16\\u1B17\\u1B18\\u1B19\\u1B1A\\u1B1B\\u1B1C\\u1B1D\\u1B1E\\u1B1F\\u1B20\\u1B21\\u1B22\\u1B23\\u1B24\\u1B25\\u1B26\\u1B27\\u1B28\\u1B29\\u1B2A\\u1B2B\\u1B2C\\u1B2D\\u1B2E\\u1B2F\\u1B30\\u1B31\\u1B32\\u1B33\\u1B45\\u1B46\\u1B47\\u1B48\\u1B49\\u1B4A\\u1B4B\\u1B83\\u1B84\\u1B85\\u1B86\\u1B87\\u1B88\\u1B89\\u1B8A\\u1B8B\\u1B8C\\u1B8D\\u1B8E\\u1B8F\\u1B90\\u1B91\\u1B92\\u1B93\\u1B94\\u1B95\\u1B96\\u1B97\\u1B98\\u1B99\\u1B9A\\u1B9B\\u1B9C\\u1B9D\\u1B9E\\u1B9F\\u1BA0\\u1BAE\\u1BAF\\u1C00\\u1C01\\u1C02\\u1C03\\u1C04\\u1C05\\u1C06\\u1C07\\u1C08\\u1C09\\u1C0A\\u1C0B\\u1C0C\\u1C0D\\u1C0E\\u1C0F\\u1C10\\u1C11\\u1C12\\u1C13\\u1C14\\u1C15\\u1C16\\u1C17\\u1C18\\u1C19\\u1C1A\\u1C1B\\u1C1C\\u1C1D\\u1C1E\\u1C1F\\u1C20\\u1C21\\u1C22\\u1C23\\u1C4D\\u1C4E\\u1C4F\\u1C5A\\u1C5B\\u1C5C\\u1C5D\\u1C5E\\u1C5F\\u1C60\\u1C61\\u1C62\\u1C63\\u1C64\\u1C65\\u1C66\\u1C67\\u1C68\\u1C69\\u1C6A\\u1C6B\\u1C6C\\u1C6D\\u1C6E\\u1C6F\\u1C70\\u1C71\\u1C72\\u1C73\\u1C74\\u1C75\\u1C76\\u1C77\\u2135\\u2136\\u2137\\u2138\\u2D30\\u2D31\\u2D32\\u2D33\\u2D34\\u2D35\\u2D36\\u2D37\\u2D38\\u2D39\\u2D3A\\u2D3B\\u2D3C\\u2D3D\\u2D3E\\u2D3F\\u2D40\\u2D41\\u2D42\\u2D43\\u2D44\\u2D45\\u2D46\\u2D47\\u2D48\\u2D49\\u2D4A\\u2D4B\\u2D4C\\u2D4D\\u2D4E\\u2D4F\\u2D50\\u2D51\\u2D52\\u2D53\\u2D54\\u2D55\\u2D56\\u2D57\\u2D58\\u2D59\\u2D5A\\u2D5B\\u2D5C\\u2D5D\\u2D5E\\u2D5F\\u2D60\\u2D61\\u2D62\\u2D63\\u2D64\\u2D65\\u2D80\\u2D81\\u2D82\\u2D83\\u2D84\\u2D85\\u2D86\\u2D87\\u2D88\\u2D89\\u2D8A\\u2D8B\\u2D8C\\u2D8D\\u2D8E\\u2D8F\\u2D90\\u2D91\\u2D92\\u2D93\\u2D94\\u2D95\\u2D96\\u2DA0\\u2DA1\\u2DA2\\u2DA3\\u2DA4\\u2DA5\\u2DA6\\u2DA8\\u2DA9\\u2DAA\\u2DAB\\u2DAC\\u2DAD\\u2DAE\\u2DB0\\u2DB1\\u2DB2\\u2DB3\\u2DB4\\u2DB5\\u2DB6\\u2DB8\\u2DB9\\u2DBA\\u2DBB\\u2DBC\\u2DBD\\u2DBE\\u2DC0\\u2DC1\\u2DC2\\u2DC3\\u2DC4\\u2DC5\\u2DC6\\u2DC8\\u2DC9\\u2DCA\\u2DCB\\u2DCC\\u2DCD\\u2DCE\\u2DD0\\u2DD1\\u2DD2\\u2DD3\\u2DD4\\u2DD5\\u2DD6\\u2DD8\\u2DD9\\u2DDA\\u2DDB\\u2DDC\\u2DDD\\u2DDE\\u3006\\u303C\\u3041\\u3042\\u3043\\u3044\\u3045\\u3046\\u3047\\u3048\\u3049\\u304A\\u304B\\u304C\\u304D\\u304E\\u304F\\u3050\\u3051\\u3052\\u3053\\u3054\\u3055\\u3056\\u3057\\u3058\\u3059\\u305A\\u305B\\u305C\\u305D\\u305E\\u305F\\u3060\\u3061\\u3062\\u3063\\u3064\\u3065\\u3066\\u3067\\u3068\\u3069\\u306A\\u306B\\u306C\\u306D\\u306E\\u306F\\u3070\\u3071\\u3072\\u3073\\u3074\\u3075\\u3076\\u3077\\u3078\\u3079\\u307A\\u307B\\u307C\\u307D\\u307E\\u307F\\u3080\\u3081\\u3082\\u3083\\u3084\\u3085\\u3086\\u3087\\u3088\\u3089\\u308A\\u308B\\u308C\\u308D\\u308E\\u308F\\u3090\\u3091\\u3092\\u3093\\u3094\\u3095\\u3096\\u309F\\u30A1\\u30A2\\u30A3\\u30A4\\u30A5\\u30A6\\u30A7\\u30A8\\u30A9\\u30AA\\u30AB\\u30AC\\u30AD\\u30AE\\u30AF\\u30B0\\u30B1\\u30B2\\u30B3\\u30B4\\u30B5\\u30B6\\u30B7\\u30B8\\u30B9\\u30BA\\u30BB\\u30BC\\u30BD\\u30BE\\u30BF\\u30C0\\u30C1\\u30C2\\u30C3\\u30C4\\u30C5\\u30C6\\u30C7\\u30C8\\u30C9\\u30CA\\u30CB\\u30CC\\u30CD\\u30CE\\u30CF\\u30D0\\u30D1\\u30D2\\u30D3\\u30D4\\u30D5\\u30D6\\u30D7\\u30D8\\u30D9\\u30DA\\u30DB\\u30DC\\u30DD\\u30DE\\u30DF\\u30E0\\u30E1\\u30E2\\u30E3\\u30E4\\u30E5\\u30E6\\u30E7\\u30E8\\u30E9\\u30EA\\u30EB\\u30EC\\u30ED\\u30EE\\u30EF\\u30F0\\u30F1\\u30F2\\u30F3\\u30F4\\u30F5\\u30F6\\u30F7\\u30F8\\u30F9\\u30FA\\u30FF\\u3105\\u3106\\u3107\\u3108\\u3109\\u310A\\u310B\\u310C\\u310D\\u310E\\u310F\\u3110\\u3111\\u3112\\u3113\\u3114\\u3115\\u3116\\u3117\\u3118\\u3119\\u311A\\u311B\\u311C\\u311D\\u311E\\u311F\\u3120\\u3121\\u3122\\u3123\\u3124\\u3125\\u3126\\u3127\\u3128\\u3129\\u312A\\u312B\\u312C\\u312D\\u3131\\u3132\\u3133\\u3134\\u3135\\u3136\\u3137\\u3138\\u3139\\u313A\\u313B\\u313C\\u313D\\u313E\\u313F\\u3140\\u3141\\u3142\\u3143\\u3144\\u3145\\u3146\\u3147\\u3148\\u3149\\u314A\\u314B\\u314C\\u314D\\u314E\\u314F\\u3150\\u3151\\u3152\\u3153\\u3154\\u3155\\u3156\\u3157\\u3158\\u3159\\u315A\\u315B\\u315C\\u315D\\u315E\\u315F\\u3160\\u3161\\u3162\\u3163\\u3164\\u3165\\u3166\\u3167\\u3168\\u3169\\u316A\\u316B\\u316C\\u316D\\u316E\\u316F\\u3170\\u3171\\u3172\\u3173\\u3174\\u3175\\u3176\\u3177\\u3178\\u3179\\u317A\\u317B\\u317C\\u317D\\u317E\\u317F\\u3180\\u3181\\u3182\\u3183\\u3184\\u3185\\u3186\\u3187\\u3188\\u3189\\u318A\\u318B\\u318C\\u318D\\u318E\\u31A0\\u31A1\\u31A2\\u31A3\\u31A4\\u31A5\\u31A6\\u31A7\\u31A8\\u31A9\\u31AA\\u31AB\\u31AC\\u31AD\\u31AE\\u31AF\\u31B0\\u31B1\\u31B2\\u31B3\\u31B4\\u31B5\\u31B6\\u31B7\\u31F0\\u31F1\\u31F2\\u31F3\\u31F4\\u31F5\\u31F6\\u31F7\\u31F8\\u31F9\\u31FA\\u31FB\\u31FC\\u31FD\\u31FE\\u31FF\\u3400\\u4DB5\\u4E00\\u9FC3\\uA000\\uA001\\uA002\\uA003\\uA004\\uA005\\uA006\\uA007\\uA008\\uA009\\uA00A\\uA00B\\uA00C\\uA00D\\uA00E\\uA00F\\uA010\\uA011\\uA012\\uA013\\uA014\\uA016\\uA017\\uA018\\uA019\\uA01A\\uA01B\\uA01C\\uA01D\\uA01E\\uA01F\\uA020\\uA021\\uA022\\uA023\\uA024\\uA025\\uA026\\uA027\\uA028\\uA029\\uA02A\\uA02B\\uA02C\\uA02D\\uA02E\\uA02F\\uA030\\uA031\\uA032\\uA033\\uA034\\uA035\\uA036\\uA037\\uA038\\uA039\\uA03A\\uA03B\\uA03C\\uA03D\\uA03E\\uA03F\\uA040\\uA041\\uA042\\uA043\\uA044\\uA045\\uA046\\uA047\\uA048\\uA049\\uA04A\\uA04B\\uA04C\\uA04D\\uA04E\\uA04F\\uA050\\uA051\\uA052\\uA053\\uA054\\uA055\\uA056\\uA057\\uA058\\uA059\\uA05A\\uA05B\\uA05C\\uA05D\\uA05E\\uA05F\\uA060\\uA061\\uA062\\uA063\\uA064\\uA065\\uA066\\uA067\\uA068\\uA069\\uA06A\\uA06B\\uA06C\\uA06D\\uA06E\\uA06F\\uA070\\uA071\\uA072\\uA073\\uA074\\uA075\\uA076\\uA077\\uA078\\uA079\\uA07A\\uA07B\\uA07C\\uA07D\\uA07E\\uA07F\\uA080\\uA081\\uA082\\uA083\\uA084\\uA085\\uA086\\uA087\\uA088\\uA089\\uA08A\\uA08B\\uA08C\\uA08D\\uA08E\\uA08F\\uA090\\uA091\\uA092\\uA093\\uA094\\uA095\\uA096\\uA097\\uA098\\uA099\\uA09A\\uA09B\\uA09C\\uA09D\\uA09E\\uA09F\\uA0A0\\uA0A1\\uA0A2\\uA0A3\\uA0A4\\uA0A5\\uA0A6\\uA0A7\\uA0A8\\uA0A9\\uA0AA\\uA0AB\\uA0AC\\uA0AD\\uA0AE\\uA0AF\\uA0B0\\uA0B1\\uA0B2\\uA0B3\\uA0B4\\uA0B5\\uA0B6\\uA0B7\\uA0B8\\uA0B9\\uA0BA\\uA0BB\\uA0BC\\uA0BD\\uA0BE\\uA0BF\\uA0C0\\uA0C1\\uA0C2\\uA0C3\\uA0C4\\uA0C5\\uA0C6\\uA0C7\\uA0C8\\uA0C9\\uA0CA\\uA0CB\\uA0CC\\uA0CD\\uA0CE\\uA0CF\\uA0D0\\uA0D1\\uA0D2\\uA0D3\\uA0D4\\uA0D5\\uA0D6\\uA0D7\\uA0D8\\uA0D9\\uA0DA\\uA0DB\\uA0DC\\uA0DD\\uA0DE\\uA0DF\\uA0E0\\uA0E1\\uA0E2\\uA0E3\\uA0E4\\uA0E5\\uA0E6\\uA0E7\\uA0E8\\uA0E9\\uA0EA\\uA0EB\\uA0EC\\uA0ED\\uA0EE\\uA0EF\\uA0F0\\uA0F1\\uA0F2\\uA0F3\\uA0F4\\uA0F5\\uA0F6\\uA0F7\\uA0F8\\uA0F9\\uA0FA\\uA0FB\\uA0FC\\uA0FD\\uA0FE\\uA0FF\\uA100\\uA101\\uA102\\uA103\\uA104\\uA105\\uA106\\uA107\\uA108\\uA109\\uA10A\\uA10B\\uA10C\\uA10D\\uA10E\\uA10F\\uA110\\uA111\\uA112\\uA113\\uA114\\uA115\\uA116\\uA117\\uA118\\uA119\\uA11A\\uA11B\\uA11C\\uA11D\\uA11E\\uA11F\\uA120\\uA121\\uA122\\uA123\\uA124\\uA125\\uA126\\uA127\\uA128\\uA129\\uA12A\\uA12B\\uA12C\\uA12D\\uA12E\\uA12F\\uA130\\uA131\\uA132\\uA133\\uA134\\uA135\\uA136\\uA137\\uA138\\uA139\\uA13A\\uA13B\\uA13C\\uA13D\\uA13E\\uA13F\\uA140\\uA141\\uA142\\uA143\\uA144\\uA145\\uA146\\uA147\\uA148\\uA149\\uA14A\\uA14B\\uA14C\\uA14D\\uA14E\\uA14F\\uA150\\uA151\\uA152\\uA153\\uA154\\uA155\\uA156\\uA157\\uA158\\uA159\\uA15A\\uA15B\\uA15C\\uA15D\\uA15E\\uA15F\\uA160\\uA161\\uA162\\uA163\\uA164\\uA165\\uA166\\uA167\\uA168\\uA169\\uA16A\\uA16B\\uA16C\\uA16D\\uA16E\\uA16F\\uA170\\uA171\\uA172\\uA173\\uA174\\uA175\\uA176\\uA177\\uA178\\uA179\\uA17A\\uA17B\\uA17C\\uA17D\\uA17E\\uA17F\\uA180\\uA181\\uA182\\uA183\\uA184\\uA185\\uA186\\uA187\\uA188\\uA189\\uA18A\\uA18B\\uA18C\\uA18D\\uA18E\\uA18F\\uA190\\uA191\\uA192\\uA193\\uA194\\uA195\\uA196\\uA197\\uA198\\uA199\\uA19A\\uA19B\\uA19C\\uA19D\\uA19E\\uA19F\\uA1A0\\uA1A1\\uA1A2\\uA1A3\\uA1A4\\uA1A5\\uA1A6\\uA1A7\\uA1A8\\uA1A9\\uA1AA\\uA1AB\\uA1AC\\uA1AD\\uA1AE\\uA1AF\\uA1B0\\uA1B1\\uA1B2\\uA1B3\\uA1B4\\uA1B5\\uA1B6\\uA1B7\\uA1B8\\uA1B9\\uA1BA\\uA1BB\\uA1BC\\uA1BD\\uA1BE\\uA1BF\\uA1C0\\uA1C1\\uA1C2\\uA1C3\\uA1C4\\uA1C5\\uA1C6\\uA1C7\\uA1C8\\uA1C9\\uA1CA\\uA1CB\\uA1CC\\uA1CD\\uA1CE\\uA1CF\\uA1D0\\uA1D1\\uA1D2\\uA1D3\\uA1D4\\uA1D5\\uA1D6\\uA1D7\\uA1D8\\uA1D9\\uA1DA\\uA1DB\\uA1DC\\uA1DD\\uA1DE\\uA1DF\\uA1E0\\uA1E1\\uA1E2\\uA1E3\\uA1E4\\uA1E5\\uA1E6\\uA1E7\\uA1E8\\uA1E9\\uA1EA\\uA1EB\\uA1EC\\uA1ED\\uA1EE\\uA1EF\\uA1F0\\uA1F1\\uA1F2\\uA1F3\\uA1F4\\uA1F5\\uA1F6\\uA1F7\\uA1F8\\uA1F9\\uA1FA\\uA1FB\\uA1FC\\uA1FD\\uA1FE\\uA1FF\\uA200\\uA201\\uA202\\uA203\\uA204\\uA205\\uA206\\uA207\\uA208\\uA209\\uA20A\\uA20B\\uA20C\\uA20D\\uA20E\\uA20F\\uA210\\uA211\\uA212\\uA213\\uA214\\uA215\\uA216\\uA217\\uA218\\uA219\\uA21A\\uA21B\\uA21C\\uA21D\\uA21E\\uA21F\\uA220\\uA221\\uA222\\uA223\\uA224\\uA225\\uA226\\uA227\\uA228\\uA229\\uA22A\\uA22B\\uA22C\\uA22D\\uA22E\\uA22F\\uA230\\uA231\\uA232\\uA233\\uA234\\uA235\\uA236\\uA237\\uA238\\uA239\\uA23A\\uA23B\\uA23C\\uA23D\\uA23E\\uA23F\\uA240\\uA241\\uA242\\uA243\\uA244\\uA245\\uA246\\uA247\\uA248\\uA249\\uA24A\\uA24B\\uA24C\\uA24D\\uA24E\\uA24F\\uA250\\uA251\\uA252\\uA253\\uA254\\uA255\\uA256\\uA257\\uA258\\uA259\\uA25A\\uA25B\\uA25C\\uA25D\\uA25E\\uA25F\\uA260\\uA261\\uA262\\uA263\\uA264\\uA265\\uA266\\uA267\\uA268\\uA269\\uA26A\\uA26B\\uA26C\\uA26D\\uA26E\\uA26F\\uA270\\uA271\\uA272\\uA273\\uA274\\uA275\\uA276\\uA277\\uA278\\uA279\\uA27A\\uA27B\\uA27C\\uA27D\\uA27E\\uA27F\\uA280\\uA281\\uA282\\uA283\\uA284\\uA285\\uA286\\uA287\\uA288\\uA289\\uA28A\\uA28B\\uA28C\\uA28D\\uA28E\\uA28F\\uA290\\uA291\\uA292\\uA293\\uA294\\uA295\\uA296\\uA297\\uA298\\uA299\\uA29A\\uA29B\\uA29C\\uA29D\\uA29E\\uA29F\\uA2A0\\uA2A1\\uA2A2\\uA2A3\\uA2A4\\uA2A5\\uA2A6\\uA2A7\\uA2A8\\uA2A9\\uA2AA\\uA2AB\\uA2AC\\uA2AD\\uA2AE\\uA2AF\\uA2B0\\uA2B1\\uA2B2\\uA2B3\\uA2B4\\uA2B5\\uA2B6\\uA2B7\\uA2B8\\uA2B9\\uA2BA\\uA2BB\\uA2BC\\uA2BD\\uA2BE\\uA2BF\\uA2C0\\uA2C1\\uA2C2\\uA2C3\\uA2C4\\uA2C5\\uA2C6\\uA2C7\\uA2C8\\uA2C9\\uA2CA\\uA2CB\\uA2CC\\uA2CD\\uA2CE\\uA2CF\\uA2D0\\uA2D1\\uA2D2\\uA2D3\\uA2D4\\uA2D5\\uA2D6\\uA2D7\\uA2D8\\uA2D9\\uA2DA\\uA2DB\\uA2DC\\uA2DD\\uA2DE\\uA2DF\\uA2E0\\uA2E1\\uA2E2\\uA2E3\\uA2E4\\uA2E5\\uA2E6\\uA2E7\\uA2E8\\uA2E9\\uA2EA\\uA2EB\\uA2EC\\uA2ED\\uA2EE\\uA2EF\\uA2F0\\uA2F1\\uA2F2\\uA2F3\\uA2F4\\uA2F5\\uA2F6\\uA2F7\\uA2F8\\uA2F9\\uA2FA\\uA2FB\\uA2FC\\uA2FD\\uA2FE\\uA2FF\\uA300\\uA301\\uA302\\uA303\\uA304\\uA305\\uA306\\uA307\\uA308\\uA309\\uA30A\\uA30B\\uA30C\\uA30D\\uA30E\\uA30F\\uA310\\uA311\\uA312\\uA313\\uA314\\uA315\\uA316\\uA317\\uA318\\uA319\\uA31A\\uA31B\\uA31C\\uA31D\\uA31E\\uA31F\\uA320\\uA321\\uA322\\uA323\\uA324\\uA325\\uA326\\uA327\\uA328\\uA329\\uA32A\\uA32B\\uA32C\\uA32D\\uA32E\\uA32F\\uA330\\uA331\\uA332\\uA333\\uA334\\uA335\\uA336\\uA337\\uA338\\uA339\\uA33A\\uA33B\\uA33C\\uA33D\\uA33E\\uA33F\\uA340\\uA341\\uA342\\uA343\\uA344\\uA345\\uA346\\uA347\\uA348\\uA349\\uA34A\\uA34B\\uA34C\\uA34D\\uA34E\\uA34F\\uA350\\uA351\\uA352\\uA353\\uA354\\uA355\\uA356\\uA357\\uA358\\uA359\\uA35A\\uA35B\\uA35C\\uA35D\\uA35E\\uA35F\\uA360\\uA361\\uA362\\uA363\\uA364\\uA365\\uA366\\uA367\\uA368\\uA369\\uA36A\\uA36B\\uA36C\\uA36D\\uA36E\\uA36F\\uA370\\uA371\\uA372\\uA373\\uA374\\uA375\\uA376\\uA377\\uA378\\uA379\\uA37A\\uA37B\\uA37C\\uA37D\\uA37E\\uA37F\\uA380\\uA381\\uA382\\uA383\\uA384\\uA385\\uA386\\uA387\\uA388\\uA389\\uA38A\\uA38B\\uA38C\\uA38D\\uA38E\\uA38F\\uA390\\uA391\\uA392\\uA393\\uA394\\uA395\\uA396\\uA397\\uA398\\uA399\\uA39A\\uA39B\\uA39C\\uA39D\\uA39E\\uA39F\\uA3A0\\uA3A1\\uA3A2\\uA3A3\\uA3A4\\uA3A5\\uA3A6\\uA3A7\\uA3A8\\uA3A9\\uA3AA\\uA3AB\\uA3AC\\uA3AD\\uA3AE\\uA3AF\\uA3B0\\uA3B1\\uA3B2\\uA3B3\\uA3B4\\uA3B5\\uA3B6\\uA3B7\\uA3B8\\uA3B9\\uA3BA\\uA3BB\\uA3BC\\uA3BD\\uA3BE\\uA3BF\\uA3C0\\uA3C1\\uA3C2\\uA3C3\\uA3C4\\uA3C5\\uA3C6\\uA3C7\\uA3C8\\uA3C9\\uA3CA\\uA3CB\\uA3CC\\uA3CD\\uA3CE\\uA3CF\\uA3D0\\uA3D1\\uA3D2\\uA3D3\\uA3D4\\uA3D5\\uA3D6\\uA3D7\\uA3D8\\uA3D9\\uA3DA\\uA3DB\\uA3DC\\uA3DD\\uA3DE\\uA3DF\\uA3E0\\uA3E1\\uA3E2\\uA3E3\\uA3E4\\uA3E5\\uA3E6\\uA3E7\\uA3E8\\uA3E9\\uA3EA\\uA3EB\\uA3EC\\uA3ED\\uA3EE\\uA3EF\\uA3F0\\uA3F1\\uA3F2\\uA3F3\\uA3F4\\uA3F5\\uA3F6\\uA3F7\\uA3F8\\uA3F9\\uA3FA\\uA3FB\\uA3FC\\uA3FD\\uA3FE\\uA3FF\\uA400\\uA401\\uA402\\uA403\\uA404\\uA405\\uA406\\uA407\\uA408\\uA409\\uA40A\\uA40B\\uA40C\\uA40D\\uA40E\\uA40F\\uA410\\uA411\\uA412\\uA413\\uA414\\uA415\\uA416\\uA417\\uA418\\uA419\\uA41A\\uA41B\\uA41C\\uA41D\\uA41E\\uA41F\\uA420\\uA421\\uA422\\uA423\\uA424\\uA425\\uA426\\uA427\\uA428\\uA429\\uA42A\\uA42B\\uA42C\\uA42D\\uA42E\\uA42F\\uA430\\uA431\\uA432\\uA433\\uA434\\uA435\\uA436\\uA437\\uA438\\uA439\\uA43A\\uA43B\\uA43C\\uA43D\\uA43E\\uA43F\\uA440\\uA441\\uA442\\uA443\\uA444\\uA445\\uA446\\uA447\\uA448\\uA449\\uA44A\\uA44B\\uA44C\\uA44D\\uA44E\\uA44F\\uA450\\uA451\\uA452\\uA453\\uA454\\uA455\\uA456\\uA457\\uA458\\uA459\\uA45A\\uA45B\\uA45C\\uA45D\\uA45E\\uA45F\\uA460\\uA461\\uA462\\uA463\\uA464\\uA465\\uA466\\uA467\\uA468\\uA469\\uA46A\\uA46B\\uA46C\\uA46D\\uA46E\\uA46F\\uA470\\uA471\\uA472\\uA473\\uA474\\uA475\\uA476\\uA477\\uA478\\uA479\\uA47A\\uA47B\\uA47C\\uA47D\\uA47E\\uA47F\\uA480\\uA481\\uA482\\uA483\\uA484\\uA485\\uA486\\uA487\\uA488\\uA489\\uA48A\\uA48B\\uA48C\\uA500\\uA501\\uA502\\uA503\\uA504\\uA505\\uA506\\uA507\\uA508\\uA509\\uA50A\\uA50B\\uA50C\\uA50D\\uA50E\\uA50F\\uA510\\uA511\\uA512\\uA513\\uA514\\uA515\\uA516\\uA517\\uA518\\uA519\\uA51A\\uA51B\\uA51C\\uA51D\\uA51E\\uA51F\\uA520\\uA521\\uA522\\uA523\\uA524\\uA525\\uA526\\uA527\\uA528\\uA529\\uA52A\\uA52B\\uA52C\\uA52D\\uA52E\\uA52F\\uA530\\uA531\\uA532\\uA533\\uA534\\uA535\\uA536\\uA537\\uA538\\uA539\\uA53A\\uA53B\\uA53C\\uA53D\\uA53E\\uA53F\\uA540\\uA541\\uA542\\uA543\\uA544\\uA545\\uA546\\uA547\\uA548\\uA549\\uA54A\\uA54B\\uA54C\\uA54D\\uA54E\\uA54F\\uA550\\uA551\\uA552\\uA553\\uA554\\uA555\\uA556\\uA557\\uA558\\uA559\\uA55A\\uA55B\\uA55C\\uA55D\\uA55E\\uA55F\\uA560\\uA561\\uA562\\uA563\\uA564\\uA565\\uA566\\uA567\\uA568\\uA569\\uA56A\\uA56B\\uA56C\\uA56D\\uA56E\\uA56F\\uA570\\uA571\\uA572\\uA573\\uA574\\uA575\\uA576\\uA577\\uA578\\uA579\\uA57A\\uA57B\\uA57C\\uA57D\\uA57E\\uA57F\\uA580\\uA581\\uA582\\uA583\\uA584\\uA585\\uA586\\uA587\\uA588\\uA589\\uA58A\\uA58B\\uA58C\\uA58D\\uA58E\\uA58F\\uA590\\uA591\\uA592\\uA593\\uA594\\uA595\\uA596\\uA597\\uA598\\uA599\\uA59A\\uA59B\\uA59C\\uA59D\\uA59E\\uA59F\\uA5A0\\uA5A1\\uA5A2\\uA5A3\\uA5A4\\uA5A5\\uA5A6\\uA5A7\\uA5A8\\uA5A9\\uA5AA\\uA5AB\\uA5AC\\uA5AD\\uA5AE\\uA5AF\\uA5B0\\uA5B1\\uA5B2\\uA5B3\\uA5B4\\uA5B5\\uA5B6\\uA5B7\\uA5B8\\uA5B9\\uA5BA\\uA5BB\\uA5BC\\uA5BD\\uA5BE\\uA5BF\\uA5C0\\uA5C1\\uA5C2\\uA5C3\\uA5C4\\uA5C5\\uA5C6\\uA5C7\\uA5C8\\uA5C9\\uA5CA\\uA5CB\\uA5CC\\uA5CD\\uA5CE\\uA5CF\\uA5D0\\uA5D1\\uA5D2\\uA5D3\\uA5D4\\uA5D5\\uA5D6\\uA5D7\\uA5D8\\uA5D9\\uA5DA\\uA5DB\\uA5DC\\uA5DD\\uA5DE\\uA5DF\\uA5E0\\uA5E1\\uA5E2\\uA5E3\\uA5E4\\uA5E5\\uA5E6\\uA5E7\\uA5E8\\uA5E9\\uA5EA\\uA5EB\\uA5EC\\uA5ED\\uA5EE\\uA5EF\\uA5F0\\uA5F1\\uA5F2\\uA5F3\\uA5F4\\uA5F5\\uA5F6\\uA5F7\\uA5F8\\uA5F9\\uA5FA\\uA5FB\\uA5FC\\uA5FD\\uA5FE\\uA5FF\\uA600\\uA601\\uA602\\uA603\\uA604\\uA605\\uA606\\uA607\\uA608\\uA609\\uA60A\\uA60B\\uA610\\uA611\\uA612\\uA613\\uA614\\uA615\\uA616\\uA617\\uA618\\uA619\\uA61A\\uA61B\\uA61C\\uA61D\\uA61E\\uA61F\\uA62A\\uA62B\\uA66E\\uA7FB\\uA7FC\\uA7FD\\uA7FE\\uA7FF\\uA800\\uA801\\uA803\\uA804\\uA805\\uA807\\uA808\\uA809\\uA80A\\uA80C\\uA80D\\uA80E\\uA80F\\uA810\\uA811\\uA812\\uA813\\uA814\\uA815\\uA816\\uA817\\uA818\\uA819\\uA81A\\uA81B\\uA81C\\uA81D\\uA81E\\uA81F\\uA820\\uA821\\uA822\\uA840\\uA841\\uA842\\uA843\\uA844\\uA845\\uA846\\uA847\\uA848\\uA849\\uA84A\\uA84B\\uA84C\\uA84D\\uA84E\\uA84F\\uA850\\uA851\\uA852\\uA853\\uA854\\uA855\\uA856\\uA857\\uA858\\uA859\\uA85A\\uA85B\\uA85C\\uA85D\\uA85E\\uA85F\\uA860\\uA861\\uA862\\uA863\\uA864\\uA865\\uA866\\uA867\\uA868\\uA869\\uA86A\\uA86B\\uA86C\\uA86D\\uA86E\\uA86F\\uA870\\uA871\\uA872\\uA873\\uA882\\uA883\\uA884\\uA885\\uA886\\uA887\\uA888\\uA889\\uA88A\\uA88B\\uA88C\\uA88D\\uA88E\\uA88F\\uA890\\uA891\\uA892\\uA893\\uA894\\uA895\\uA896\\uA897\\uA898\\uA899\\uA89A\\uA89B\\uA89C\\uA89D\\uA89E\\uA89F\\uA8A0\\uA8A1\\uA8A2\\uA8A3\\uA8A4\\uA8A5\\uA8A6\\uA8A7\\uA8A8\\uA8A9\\uA8AA\\uA8AB\\uA8AC\\uA8AD\\uA8AE\\uA8AF\\uA8B0\\uA8B1\\uA8B2\\uA8B3\\uA90A\\uA90B\\uA90C\\uA90D\\uA90E\\uA90F\\uA910\\uA911\\uA912\\uA913\\uA914\\uA915\\uA916\\uA917\\uA918\\uA919\\uA91A\\uA91B\\uA91C\\uA91D\\uA91E\\uA91F\\uA920\\uA921\\uA922\\uA923\\uA924\\uA925\\uA930\\uA931\\uA932\\uA933\\uA934\\uA935\\uA936\\uA937\\uA938\\uA939\\uA93A\\uA93B\\uA93C\\uA93D\\uA93E\\uA93F\\uA940\\uA941\\uA942\\uA943\\uA944\\uA945\\uA946\\uAA00\\uAA01\\uAA02\\uAA03\\uAA04\\uAA05\\uAA06\\uAA07\\uAA08\\uAA09\\uAA0A\\uAA0B\\uAA0C\\uAA0D\\uAA0E\\uAA0F\\uAA10\\uAA11\\uAA12\\uAA13\\uAA14\\uAA15\\uAA16\\uAA17\\uAA18\\uAA19\\uAA1A\\uAA1B\\uAA1C\\uAA1D\\uAA1E\\uAA1F\\uAA20\\uAA21\\uAA22\\uAA23\\uAA24\\uAA25\\uAA26\\uAA27\\uAA28\\uAA40\\uAA41\\uAA42\\uAA44\\uAA45\\uAA46\\uAA47\\uAA48\\uAA49\\uAA4A\\uAA4B\\uAC00\\uD7A3\\uF900\\uF901\\uF902\\uF903\\uF904\\uF905\\uF906\\uF907\\uF908\\uF909\\uF90A\\uF90B\\uF90C\\uF90D\\uF90E\\uF90F\\uF910\\uF911\\uF912\\uF913\\uF914\\uF915\\uF916\\uF917\\uF918\\uF919\\uF91A\\uF91B\\uF91C\\uF91D\\uF91E\\uF91F\\uF920\\uF921\\uF922\\uF923\\uF924\\uF925\\uF926\\uF927\\uF928\\uF929\\uF92A\\uF92B\\uF92C\\uF92D\\uF92E\\uF92F\\uF930\\uF931\\uF932\\uF933\\uF934\\uF935\\uF936\\uF937\\uF938\\uF939\\uF93A\\uF93B\\uF93C\\uF93D\\uF93E\\uF93F\\uF940\\uF941\\uF942\\uF943\\uF944\\uF945\\uF946\\uF947\\uF948\\uF949\\uF94A\\uF94B\\uF94C\\uF94D\\uF94E\\uF94F\\uF950\\uF951\\uF952\\uF953\\uF954\\uF955\\uF956\\uF957\\uF958\\uF959\\uF95A\\uF95B\\uF95C\\uF95D\\uF95E\\uF95F\\uF960\\uF961\\uF962\\uF963\\uF964\\uF965\\uF966\\uF967\\uF968\\uF969\\uF96A\\uF96B\\uF96C\\uF96D\\uF96E\\uF96F\\uF970\\uF971\\uF972\\uF973\\uF974\\uF975\\uF976\\uF977\\uF978\\uF979\\uF97A\\uF97B\\uF97C\\uF97D\\uF97E\\uF97F\\uF980\\uF981\\uF982\\uF983\\uF984\\uF985\\uF986\\uF987\\uF988\\uF989\\uF98A\\uF98B\\uF98C\\uF98D\\uF98E\\uF98F\\uF990\\uF991\\uF992\\uF993\\uF994\\uF995\\uF996\\uF997\\uF998\\uF999\\uF99A\\uF99B\\uF99C\\uF99D\\uF99E\\uF99F\\uF9A0\\uF9A1\\uF9A2\\uF9A3\\uF9A4\\uF9A5\\uF9A6\\uF9A7\\uF9A8\\uF9A9\\uF9AA\\uF9AB\\uF9AC\\uF9AD\\uF9AE\\uF9AF\\uF9B0\\uF9B1\\uF9B2\\uF9B3\\uF9B4\\uF9B5\\uF9B6\\uF9B7\\uF9B8\\uF9B9\\uF9BA\\uF9BB\\uF9BC\\uF9BD\\uF9BE\\uF9BF\\uF9C0\\uF9C1\\uF9C2\\uF9C3\\uF9C4\\uF9C5\\uF9C6\\uF9C7\\uF9C8\\uF9C9\\uF9CA\\uF9CB\\uF9CC\\uF9CD\\uF9CE\\uF9CF\\uF9D0\\uF9D1\\uF9D2\\uF9D3\\uF9D4\\uF9D5\\uF9D6\\uF9D7\\uF9D8\\uF9D9\\uF9DA\\uF9DB\\uF9DC\\uF9DD\\uF9DE\\uF9DF\\uF9E0\\uF9E1\\uF9E2\\uF9E3\\uF9E4\\uF9E5\\uF9E6\\uF9E7\\uF9E8\\uF9E9\\uF9EA\\uF9EB\\uF9EC\\uF9ED\\uF9EE\\uF9EF\\uF9F0\\uF9F1\\uF9F2\\uF9F3\\uF9F4\\uF9F5\\uF9F6\\uF9F7\\uF9F8\\uF9F9\\uF9FA\\uF9FB\\uF9FC\\uF9FD\\uF9FE\\uF9FF\\uFA00\\uFA01\\uFA02\\uFA03\\uFA04\\uFA05\\uFA06\\uFA07\\uFA08\\uFA09\\uFA0A\\uFA0B\\uFA0C\\uFA0D\\uFA0E\\uFA0F\\uFA10\\uFA11\\uFA12\\uFA13\\uFA14\\uFA15\\uFA16\\uFA17\\uFA18\\uFA19\\uFA1A\\uFA1B\\uFA1C\\uFA1D\\uFA1E\\uFA1F\\uFA20\\uFA21\\uFA22\\uFA23\\uFA24\\uFA25\\uFA26\\uFA27\\uFA28\\uFA29\\uFA2A\\uFA2B\\uFA2C\\uFA2D\\uFA30\\uFA31\\uFA32\\uFA33\\uFA34\\uFA35\\uFA36\\uFA37\\uFA38\\uFA39\\uFA3A\\uFA3B\\uFA3C\\uFA3D\\uFA3E\\uFA3F\\uFA40\\uFA41\\uFA42\\uFA43\\uFA44\\uFA45\\uFA46\\uFA47\\uFA48\\uFA49\\uFA4A\\uFA4B\\uFA4C\\uFA4D\\uFA4E\\uFA4F\\uFA50\\uFA51\\uFA52\\uFA53\\uFA54\\uFA55\\uFA56\\uFA57\\uFA58\\uFA59\\uFA5A\\uFA5B\\uFA5C\\uFA5D\\uFA5E\\uFA5F\\uFA60\\uFA61\\uFA62\\uFA63\\uFA64\\uFA65\\uFA66\\uFA67\\uFA68\\uFA69\\uFA6A\\uFA70\\uFA71\\uFA72\\uFA73\\uFA74\\uFA75\\uFA76\\uFA77\\uFA78\\uFA79\\uFA7A\\uFA7B\\uFA7C\\uFA7D\\uFA7E\\uFA7F\\uFA80\\uFA81\\uFA82\\uFA83\\uFA84\\uFA85\\uFA86\\uFA87\\uFA88\\uFA89\\uFA8A\\uFA8B\\uFA8C\\uFA8D\\uFA8E\\uFA8F\\uFA90\\uFA91\\uFA92\\uFA93\\uFA94\\uFA95\\uFA96\\uFA97\\uFA98\\uFA99\\uFA9A\\uFA9B\\uFA9C\\uFA9D\\uFA9E\\uFA9F\\uFAA0\\uFAA1\\uFAA2\\uFAA3\\uFAA4\\uFAA5\\uFAA6\\uFAA7\\uFAA8\\uFAA9\\uFAAA\\uFAAB\\uFAAC\\uFAAD\\uFAAE\\uFAAF\\uFAB0\\uFAB1\\uFAB2\\uFAB3\\uFAB4\\uFAB5\\uFAB6\\uFAB7\\uFAB8\\uFAB9\\uFABA\\uFABB\\uFABC\\uFABD\\uFABE\\uFABF\\uFAC0\\uFAC1\\uFAC2\\uFAC3\\uFAC4\\uFAC5\\uFAC6\\uFAC7\\uFAC8\\uFAC9\\uFACA\\uFACB\\uFACC\\uFACD\\uFACE\\uFACF\\uFAD0\\uFAD1\\uFAD2\\uFAD3\\uFAD4\\uFAD5\\uFAD6\\uFAD7\\uFAD8\\uFAD9\\uFB1D\\uFB1F\\uFB20\\uFB21\\uFB22\\uFB23\\uFB24\\uFB25\\uFB26\\uFB27\\uFB28\\uFB2A\\uFB2B\\uFB2C\\uFB2D\\uFB2E\\uFB2F\\uFB30\\uFB31\\uFB32\\uFB33\\uFB34\\uFB35\\uFB36\\uFB38\\uFB39\\uFB3A\\uFB3B\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46\\uFB47\\uFB48\\uFB49\\uFB4A\\uFB4B\\uFB4C\\uFB4D\\uFB4E\\uFB4F\\uFB50\\uFB51\\uFB52\\uFB53\\uFB54\\uFB55\\uFB56\\uFB57\\uFB58\\uFB59\\uFB5A\\uFB5B\\uFB5C\\uFB5D\\uFB5E\\uFB5F\\uFB60\\uFB61\\uFB62\\uFB63\\uFB64\\uFB65\\uFB66\\uFB67\\uFB68\\uFB69\\uFB6A\\uFB6B\\uFB6C\\uFB6D\\uFB6E\\uFB6F\\uFB70\\uFB71\\uFB72\\uFB73\\uFB74\\uFB75\\uFB76\\uFB77\\uFB78\\uFB79\\uFB7A\\uFB7B\\uFB7C\\uFB7D\\uFB7E\\uFB7F\\uFB80\\uFB81\\uFB82\\uFB83\\uFB84\\uFB85\\uFB86\\uFB87\\uFB88\\uFB89\\uFB8A\\uFB8B\\uFB8C\\uFB8D\\uFB8E\\uFB8F\\uFB90\\uFB91\\uFB92\\uFB93\\uFB94\\uFB95\\uFB96\\uFB97\\uFB98\\uFB99\\uFB9A\\uFB9B\\uFB9C\\uFB9D\\uFB9E\\uFB9F\\uFBA0\\uFBA1\\uFBA2\\uFBA3\\uFBA4\\uFBA5\\uFBA6\\uFBA7\\uFBA8\\uFBA9\\uFBAA\\uFBAB\\uFBAC\\uFBAD\\uFBAE\\uFBAF\\uFBB0\\uFBB1\\uFBD3\\uFBD4\\uFBD5\\uFBD6\\uFBD7\\uFBD8\\uFBD9\\uFBDA\\uFBDB\\uFBDC\\uFBDD\\uFBDE\\uFBDF\\uFBE0\\uFBE1\\uFBE2\\uFBE3\\uFBE4\\uFBE5\\uFBE6\\uFBE7\\uFBE8\\uFBE9\\uFBEA\\uFBEB\\uFBEC\\uFBED\\uFBEE\\uFBEF\\uFBF0\\uFBF1\\uFBF2\\uFBF3\\uFBF4\\uFBF5\\uFBF6\\uFBF7\\uFBF8\\uFBF9\\uFBFA\\uFBFB\\uFBFC\\uFBFD\\uFBFE\\uFBFF\\uFC00\\uFC01\\uFC02\\uFC03\\uFC04\\uFC05\\uFC06\\uFC07\\uFC08\\uFC09\\uFC0A\\uFC0B\\uFC0C\\uFC0D\\uFC0E\\uFC0F\\uFC10\\uFC11\\uFC12\\uFC13\\uFC14\\uFC15\\uFC16\\uFC17\\uFC18\\uFC19\\uFC1A\\uFC1B\\uFC1C\\uFC1D\\uFC1E\\uFC1F\\uFC20\\uFC21\\uFC22\\uFC23\\uFC24\\uFC25\\uFC26\\uFC27\\uFC28\\uFC29\\uFC2A\\uFC2B\\uFC2C\\uFC2D\\uFC2E\\uFC2F\\uFC30\\uFC31\\uFC32\\uFC33\\uFC34\\uFC35\\uFC36\\uFC37\\uFC38\\uFC39\\uFC3A\\uFC3B\\uFC3C\\uFC3D\\uFC3E\\uFC3F\\uFC40\\uFC41\\uFC42\\uFC43\\uFC44\\uFC45\\uFC46\\uFC47\\uFC48\\uFC49\\uFC4A\\uFC4B\\uFC4C\\uFC4D\\uFC4E\\uFC4F\\uFC50\\uFC51\\uFC52\\uFC53\\uFC54\\uFC55\\uFC56\\uFC57\\uFC58\\uFC59\\uFC5A\\uFC5B\\uFC5C\\uFC5D\\uFC5E\\uFC5F\\uFC60\\uFC61\\uFC62\\uFC63\\uFC64\\uFC65\\uFC66\\uFC67\\uFC68\\uFC69\\uFC6A\\uFC6B\\uFC6C\\uFC6D\\uFC6E\\uFC6F\\uFC70\\uFC71\\uFC72\\uFC73\\uFC74\\uFC75\\uFC76\\uFC77\\uFC78\\uFC79\\uFC7A\\uFC7B\\uFC7C\\uFC7D\\uFC7E\\uFC7F\\uFC80\\uFC81\\uFC82\\uFC83\\uFC84\\uFC85\\uFC86\\uFC87\\uFC88\\uFC89\\uFC8A\\uFC8B\\uFC8C\\uFC8D\\uFC8E\\uFC8F\\uFC90\\uFC91\\uFC92\\uFC93\\uFC94\\uFC95\\uFC96\\uFC97\\uFC98\\uFC99\\uFC9A\\uFC9B\\uFC9C\\uFC9D\\uFC9E\\uFC9F\\uFCA0\\uFCA1\\uFCA2\\uFCA3\\uFCA4\\uFCA5\\uFCA6\\uFCA7\\uFCA8\\uFCA9\\uFCAA\\uFCAB\\uFCAC\\uFCAD\\uFCAE\\uFCAF\\uFCB0\\uFCB1\\uFCB2\\uFCB3\\uFCB4\\uFCB5\\uFCB6\\uFCB7\\uFCB8\\uFCB9\\uFCBA\\uFCBB\\uFCBC\\uFCBD\\uFCBE\\uFCBF\\uFCC0\\uFCC1\\uFCC2\\uFCC3\\uFCC4\\uFCC5\\uFCC6\\uFCC7\\uFCC8\\uFCC9\\uFCCA\\uFCCB\\uFCCC\\uFCCD\\uFCCE\\uFCCF\\uFCD0\\uFCD1\\uFCD2\\uFCD3\\uFCD4\\uFCD5\\uFCD6\\uFCD7\\uFCD8\\uFCD9\\uFCDA\\uFCDB\\uFCDC\\uFCDD\\uFCDE\\uFCDF\\uFCE0\\uFCE1\\uFCE2\\uFCE3\\uFCE4\\uFCE5\\uFCE6\\uFCE7\\uFCE8\\uFCE9\\uFCEA\\uFCEB\\uFCEC\\uFCED\\uFCEE\\uFCEF\\uFCF0\\uFCF1\\uFCF2\\uFCF3\\uFCF4\\uFCF5\\uFCF6\\uFCF7\\uFCF8\\uFCF9\\uFCFA\\uFCFB\\uFCFC\\uFCFD\\uFCFE\\uFCFF\\uFD00\\uFD01\\uFD02\\uFD03\\uFD04\\uFD05\\uFD06\\uFD07\\uFD08\\uFD09\\uFD0A\\uFD0B\\uFD0C\\uFD0D\\uFD0E\\uFD0F\\uFD10\\uFD11\\uFD12\\uFD13\\uFD14\\uFD15\\uFD16\\uFD17\\uFD18\\uFD19\\uFD1A\\uFD1B\\uFD1C\\uFD1D\\uFD1E\\uFD1F\\uFD20\\uFD21\\uFD22\\uFD23\\uFD24\\uFD25\\uFD26\\uFD27\\uFD28\\uFD29\\uFD2A\\uFD2B\\uFD2C\\uFD2D\\uFD2E\\uFD2F\\uFD30\\uFD31\\uFD32\\uFD33\\uFD34\\uFD35\\uFD36\\uFD37\\uFD38\\uFD39\\uFD3A\\uFD3B\\uFD3C\\uFD3D\\uFD50\\uFD51\\uFD52\\uFD53\\uFD54\\uFD55\\uFD56\\uFD57\\uFD58\\uFD59\\uFD5A\\uFD5B\\uFD5C\\uFD5D\\uFD5E\\uFD5F\\uFD60\\uFD61\\uFD62\\uFD63\\uFD64\\uFD65\\uFD66\\uFD67\\uFD68\\uFD69\\uFD6A\\uFD6B\\uFD6C\\uFD6D\\uFD6E\\uFD6F\\uFD70\\uFD71\\uFD72\\uFD73\\uFD74\\uFD75\\uFD76\\uFD77\\uFD78\\uFD79\\uFD7A\\uFD7B\\uFD7C\\uFD7D\\uFD7E\\uFD7F\\uFD80\\uFD81\\uFD82\\uFD83\\uFD84\\uFD85\\uFD86\\uFD87\\uFD88\\uFD89\\uFD8A\\uFD8B\\uFD8C\\uFD8D\\uFD8E\\uFD8F\\uFD92\\uFD93\\uFD94\\uFD95\\uFD96\\uFD97\\uFD98\\uFD99\\uFD9A\\uFD9B\\uFD9C\\uFD9D\\uFD9E\\uFD9F\\uFDA0\\uFDA1\\uFDA2\\uFDA3\\uFDA4\\uFDA5\\uFDA6\\uFDA7\\uFDA8\\uFDA9\\uFDAA\\uFDAB\\uFDAC\\uFDAD\\uFDAE\\uFDAF\\uFDB0\\uFDB1\\uFDB2\\uFDB3\\uFDB4\\uFDB5\\uFDB6\\uFDB7\\uFDB8\\uFDB9\\uFDBA\\uFDBB\\uFDBC\\uFDBD\\uFDBE\\uFDBF\\uFDC0\\uFDC1\\uFDC2\\uFDC3\\uFDC4\\uFDC5\\uFDC6\\uFDC7\\uFDF0\\uFDF1\\uFDF2\\uFDF3\\uFDF4\\uFDF5\\uFDF6\\uFDF7\\uFDF8\\uFDF9\\uFDFA\\uFDFB\\uFE70\\uFE71\\uFE72\\uFE73\\uFE74\\uFE76\\uFE77\\uFE78\\uFE79\\uFE7A\\uFE7B\\uFE7C\\uFE7D\\uFE7E\\uFE7F\\uFE80\\uFE81\\uFE82\\uFE83\\uFE84\\uFE85\\uFE86\\uFE87\\uFE88\\uFE89\\uFE8A\\uFE8B\\uFE8C\\uFE8D\\uFE8E\\uFE8F\\uFE90\\uFE91\\uFE92\\uFE93\\uFE94\\uFE95\\uFE96\\uFE97\\uFE98\\uFE99\\uFE9A\\uFE9B\\uFE9C\\uFE9D\\uFE9E\\uFE9F\\uFEA0\\uFEA1\\uFEA2\\uFEA3\\uFEA4\\uFEA5\\uFEA6\\uFEA7\\uFEA8\\uFEA9\\uFEAA\\uFEAB\\uFEAC\\uFEAD\\uFEAE\\uFEAF\\uFEB0\\uFEB1\\uFEB2\\uFEB3\\uFEB4\\uFEB5\\uFEB6\\uFEB7\\uFEB8\\uFEB9\\uFEBA\\uFEBB\\uFEBC\\uFEBD\\uFEBE\\uFEBF\\uFEC0\\uFEC1\\uFEC2\\uFEC3\\uFEC4\\uFEC5\\uFEC6\\uFEC7\\uFEC8\\uFEC9\\uFECA\\uFECB\\uFECC\\uFECD\\uFECE\\uFECF\\uFED0\\uFED1\\uFED2\\uFED3\\uFED4\\uFED5\\uFED6\\uFED7\\uFED8\\uFED9\\uFEDA\\uFEDB\\uFEDC\\uFEDD\\uFEDE\\uFEDF\\uFEE0\\uFEE1\\uFEE2\\uFEE3\\uFEE4\\uFEE5\\uFEE6\\uFEE7\\uFEE8\\uFEE9\\uFEEA\\uFEEB\\uFEEC\\uFEED\\uFEEE\\uFEEF\\uFEF0\\uFEF1\\uFEF2\\uFEF3\\uFEF4\\uFEF5\\uFEF6\\uFEF7\\uFEF8\\uFEF9\\uFEFA\\uFEFB\\uFEFC\\uFF66\\uFF67\\uFF68\\uFF69\\uFF6A\\uFF6B\\uFF6C\\uFF6D\\uFF6E\\uFF6F\\uFF71\\uFF72\\uFF73\\uFF74\\uFF75\\uFF76\\uFF77\\uFF78\\uFF79\\uFF7A\\uFF7B\\uFF7C\\uFF7D\\uFF7E\\uFF7F\\uFF80\\uFF81\\uFF82\\uFF83\\uFF84\\uFF85\\uFF86\\uFF87\\uFF88\\uFF89\\uFF8A\\uFF8B\\uFF8C\\uFF8D\\uFF8E\\uFF8F\\uFF90\\uFF91\\uFF92\\uFF93\\uFF94\\uFF95\\uFF96\\uFF97\\uFF98\\uFF99\\uFF9A\\uFF9B\\uFF9C\\uFF9D\\uFFA0\\uFFA1\\uFFA2\\uFFA3\\uFFA4\\uFFA5\\uFFA6\\uFFA7\\uFFA8\\uFFA9\\uFFAA\\uFFAB\\uFFAC\\uFFAD\\uFFAE\\uFFAF\\uFFB0\\uFFB1\\uFFB2\\uFFB3\\uFFB4\\uFFB5\\uFFB6\\uFFB7\\uFFB8\\uFFB9\\uFFBA\\uFFBB\\uFFBC\\uFFBD\\uFFBE\\uFFC2\\uFFC3\\uFFC4\\uFFC5\\uFFC6\\uFFC7\\uFFCA\\uFFCB\\uFFCC\\uFFCD\\uFFCE\\uFFCF\\uFFD2\\uFFD3\\uFFD4\\uFFD5\\uFFD6\\uFFD7\\uFFDA\\uFFDB\\uFFDC]", description: "[\\u01BB\\u01C0\\u01C1\\u01C2\\u01C3\\u0294\\u05D0\\u05D1\\u05D2\\u05D3\\u05D4\\u05D5\\u05D6\\u05D7\\u05D8\\u05D9\\u05DA\\u05DB\\u05DC\\u05DD\\u05DE\\u05DF\\u05E0\\u05E1\\u05E2\\u05E3\\u05E4\\u05E5\\u05E6\\u05E7\\u05E8\\u05E9\\u05EA\\u05F0\\u05F1\\u05F2\\u0621\\u0622\\u0623\\u0624\\u0625\\u0626\\u0627\\u0628\\u0629\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u0630\\u0631\\u0632\\u0633\\u0634\\u0635\\u0636\\u0637\\u0638\\u0639\\u063A\\u063B\\u063C\\u063D\\u063E\\u063F\\u0641\\u0642\\u0643\\u0644\\u0645\\u0646\\u0647\\u0648\\u0649\\u064A\\u066E\\u066F\\u0671\\u0672\\u0673\\u0674\\u0675\\u0676\\u0677\\u0678\\u0679\\u067A\\u067B\\u067C\\u067D\\u067E\\u067F\\u0680\\u0681\\u0682\\u0683\\u0684\\u0685\\u0686\\u0687\\u0688\\u0689\\u068A\\u068B\\u068C\\u068D\\u068E\\u068F\\u0690\\u0691\\u0692\\u0693\\u0694\\u0695\\u0696\\u0697\\u0698\\u0699\\u069A\\u069B\\u069C\\u069D\\u069E\\u069F\\u06A0\\u06A1\\u06A2\\u06A3\\u06A4\\u06A5\\u06A6\\u06A7\\u06A8\\u06A9\\u06AA\\u06AB\\u06AC\\u06AD\\u06AE\\u06AF\\u06B0\\u06B1\\u06B2\\u06B3\\u06B4\\u06B5\\u06B6\\u06B7\\u06B8\\u06B9\\u06BA\\u06BB\\u06BC\\u06BD\\u06BE\\u06BF\\u06C0\\u06C1\\u06C2\\u06C3\\u06C4\\u06C5\\u06C6\\u06C7\\u06C8\\u06C9\\u06CA\\u06CB\\u06CC\\u06CD\\u06CE\\u06CF\\u06D0\\u06D1\\u06D2\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA\\u06FB\\u06FC\\u06FF\\u0710\\u0712\\u0713\\u0714\\u0715\\u0716\\u0717\\u0718\\u0719\\u071A\\u071B\\u071C\\u071D\\u071E\\u071F\\u0720\\u0721\\u0722\\u0723\\u0724\\u0725\\u0726\\u0727\\u0728\\u0729\\u072A\\u072B\\u072C\\u072D\\u072E\\u072F\\u074D\\u074E\\u074F\\u0750\\u0751\\u0752\\u0753\\u0754\\u0755\\u0756\\u0757\\u0758\\u0759\\u075A\\u075B\\u075C\\u075D\\u075E\\u075F\\u0760\\u0761\\u0762\\u0763\\u0764\\u0765\\u0766\\u0767\\u0768\\u0769\\u076A\\u076B\\u076C\\u076D\\u076E\\u076F\\u0770\\u0771\\u0772\\u0773\\u0774\\u0775\\u0776\\u0777\\u0778\\u0779\\u077A\\u077B\\u077C\\u077D\\u077E\\u077F\\u0780\\u0781\\u0782\\u0783\\u0784\\u0785\\u0786\\u0787\\u0788\\u0789\\u078A\\u078B\\u078C\\u078D\\u078E\\u078F\\u0790\\u0791\\u0792\\u0793\\u0794\\u0795\\u0796\\u0797\\u0798\\u0799\\u079A\\u079B\\u079C\\u079D\\u079E\\u079F\\u07A0\\u07A1\\u07A2\\u07A3\\u07A4\\u07A5\\u07B1\\u07CA\\u07CB\\u07CC\\u07CD\\u07CE\\u07CF\\u07D0\\u07D1\\u07D2\\u07D3\\u07D4\\u07D5\\u07D6\\u07D7\\u07D8\\u07D9\\u07DA\\u07DB\\u07DC\\u07DD\\u07DE\\u07DF\\u07E0\\u07E1\\u07E2\\u07E3\\u07E4\\u07E5\\u07E6\\u07E7\\u07E8\\u07E9\\u07EA\\u0904\\u0905\\u0906\\u0907\\u0908\\u0909\\u090A\\u090B\\u090C\\u090D\\u090E\\u090F\\u0910\\u0911\\u0912\\u0913\\u0914\\u0915\\u0916\\u0917\\u0918\\u0919\\u091A\\u091B\\u091C\\u091D\\u091E\\u091F\\u0920\\u0921\\u0922\\u0923\\u0924\\u0925\\u0926\\u0927\\u0928\\u0929\\u092A\\u092B\\u092C\\u092D\\u092E\\u092F\\u0930\\u0931\\u0932\\u0933\\u0934\\u0935\\u0936\\u0937\\u0938\\u0939\\u093D\\u0950\\u0958\\u0959\\u095A\\u095B\\u095C\\u095D\\u095E\\u095F\\u0960\\u0961\\u0972\\u097B\\u097C\\u097D\\u097E\\u097F\\u0985\\u0986\\u0987\\u0988\\u0989\\u098A\\u098B\\u098C\\u098F\\u0990\\u0993\\u0994\\u0995\\u0996\\u0997\\u0998\\u0999\\u099A\\u099B\\u099C\\u099D\\u099E\\u099F\\u09A0\\u09A1\\u09A2\\u09A3\\u09A4\\u09A5\\u09A6\\u09A7\\u09A8\\u09AA\\u09AB\\u09AC\\u09AD\\u09AE\\u09AF\\u09B0\\u09B2\\u09B6\\u09B7\\u09B8\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF\\u09E0\\u09E1\\u09F0\\u09F1\\u0A05\\u0A06\\u0A07\\u0A08\\u0A09\\u0A0A\\u0A0F\\u0A10\\u0A13\\u0A14\\u0A15\\u0A16\\u0A17\\u0A18\\u0A19\\u0A1A\\u0A1B\\u0A1C\\u0A1D\\u0A1E\\u0A1F\\u0A20\\u0A21\\u0A22\\u0A23\\u0A24\\u0A25\\u0A26\\u0A27\\u0A28\\u0A2A\\u0A2B\\u0A2C\\u0A2D\\u0A2E\\u0A2F\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59\\u0A5A\\u0A5B\\u0A5C\\u0A5E\\u0A72\\u0A73\\u0A74\\u0A85\\u0A86\\u0A87\\u0A88\\u0A89\\u0A8A\\u0A8B\\u0A8C\\u0A8D\\u0A8F\\u0A90\\u0A91\\u0A93\\u0A94\\u0A95\\u0A96\\u0A97\\u0A98\\u0A99\\u0A9A\\u0A9B\\u0A9C\\u0A9D\\u0A9E\\u0A9F\\u0AA0\\u0AA1\\u0AA2\\u0AA3\\u0AA4\\u0AA5\\u0AA6\\u0AA7\\u0AA8\\u0AAA\\u0AAB\\u0AAC\\u0AAD\\u0AAE\\u0AAF\\u0AB0\\u0AB2\\u0AB3\\u0AB5\\u0AB6\\u0AB7\\u0AB8\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05\\u0B06\\u0B07\\u0B08\\u0B09\\u0B0A\\u0B0B\\u0B0C\\u0B0F\\u0B10\\u0B13\\u0B14\\u0B15\\u0B16\\u0B17\\u0B18\\u0B19\\u0B1A\\u0B1B\\u0B1C\\u0B1D\\u0B1E\\u0B1F\\u0B20\\u0B21\\u0B22\\u0B23\\u0B24\\u0B25\\u0B26\\u0B27\\u0B28\\u0B2A\\u0B2B\\u0B2C\\u0B2D\\u0B2E\\u0B2F\\u0B30\\u0B32\\u0B33\\u0B35\\u0B36\\u0B37\\u0B38\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F\\u0B60\\u0B61\\u0B71\\u0B83\\u0B85\\u0B86\\u0B87\\u0B88\\u0B89\\u0B8A\\u0B8E\\u0B8F\\u0B90\\u0B92\\u0B93\\u0B94\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8\\u0BA9\\u0BAA\\u0BAE\\u0BAF\\u0BB0\\u0BB1\\u0BB2\\u0BB3\\u0BB4\\u0BB5\\u0BB6\\u0BB7\\u0BB8\\u0BB9\\u0BD0\\u0C05\\u0C06\\u0C07\\u0C08\\u0C09\\u0C0A\\u0C0B\\u0C0C\\u0C0E\\u0C0F\\u0C10\\u0C12\\u0C13\\u0C14\\u0C15\\u0C16\\u0C17\\u0C18\\u0C19\\u0C1A\\u0C1B\\u0C1C\\u0C1D\\u0C1E\\u0C1F\\u0C20\\u0C21\\u0C22\\u0C23\\u0C24\\u0C25\\u0C26\\u0C27\\u0C28\\u0C2A\\u0C2B\\u0C2C\\u0C2D\\u0C2E\\u0C2F\\u0C30\\u0C31\\u0C32\\u0C33\\u0C35\\u0C36\\u0C37\\u0C38\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85\\u0C86\\u0C87\\u0C88\\u0C89\\u0C8A\\u0C8B\\u0C8C\\u0C8E\\u0C8F\\u0C90\\u0C92\\u0C93\\u0C94\\u0C95\\u0C96\\u0C97\\u0C98\\u0C99\\u0C9A\\u0C9B\\u0C9C\\u0C9D\\u0C9E\\u0C9F\\u0CA0\\u0CA1\\u0CA2\\u0CA3\\u0CA4\\u0CA5\\u0CA6\\u0CA7\\u0CA8\\u0CAA\\u0CAB\\u0CAC\\u0CAD\\u0CAE\\u0CAF\\u0CB0\\u0CB1\\u0CB2\\u0CB3\\u0CB5\\u0CB6\\u0CB7\\u0CB8\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0D05\\u0D06\\u0D07\\u0D08\\u0D09\\u0D0A\\u0D0B\\u0D0C\\u0D0E\\u0D0F\\u0D10\\u0D12\\u0D13\\u0D14\\u0D15\\u0D16\\u0D17\\u0D18\\u0D19\\u0D1A\\u0D1B\\u0D1C\\u0D1D\\u0D1E\\u0D1F\\u0D20\\u0D21\\u0D22\\u0D23\\u0D24\\u0D25\\u0D26\\u0D27\\u0D28\\u0D2A\\u0D2B\\u0D2C\\u0D2D\\u0D2E\\u0D2F\\u0D30\\u0D31\\u0D32\\u0D33\\u0D34\\u0D35\\u0D36\\u0D37\\u0D38\\u0D39\\u0D3D\\u0D60\\u0D61\\u0D7A\\u0D7B\\u0D7C\\u0D7D\\u0D7E\\u0D7F\\u0D85\\u0D86\\u0D87\\u0D88\\u0D89\\u0D8A\\u0D8B\\u0D8C\\u0D8D\\u0D8E\\u0D8F\\u0D90\\u0D91\\u0D92\\u0D93\\u0D94\\u0D95\\u0D96\\u0D9A\\u0D9B\\u0D9C\\u0D9D\\u0D9E\\u0D9F\\u0DA0\\u0DA1\\u0DA2\\u0DA3\\u0DA4\\u0DA5\\u0DA6\\u0DA7\\u0DA8\\u0DA9\\u0DAA\\u0DAB\\u0DAC\\u0DAD\\u0DAE\\u0DAF\\u0DB0\\u0DB1\\u0DB3\\u0DB4\\u0DB5\\u0DB6\\u0DB7\\u0DB8\\u0DB9\\u0DBA\\u0DBB\\u0DBD\\u0DC0\\u0DC1\\u0DC2\\u0DC3\\u0DC4\\u0DC5\\u0DC6\\u0E01\\u0E02\\u0E03\\u0E04\\u0E05\\u0E06\\u0E07\\u0E08\\u0E09\\u0E0A\\u0E0B\\u0E0C\\u0E0D\\u0E0E\\u0E0F\\u0E10\\u0E11\\u0E12\\u0E13\\u0E14\\u0E15\\u0E16\\u0E17\\u0E18\\u0E19\\u0E1A\\u0E1B\\u0E1C\\u0E1D\\u0E1E\\u0E1F\\u0E20\\u0E21\\u0E22\\u0E23\\u0E24\\u0E25\\u0E26\\u0E27\\u0E28\\u0E29\\u0E2A\\u0E2B\\u0E2C\\u0E2D\\u0E2E\\u0E2F\\u0E30\\u0E32\\u0E33\\u0E40\\u0E41\\u0E42\\u0E43\\u0E44\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94\\u0E95\\u0E96\\u0E97\\u0E99\\u0E9A\\u0E9B\\u0E9C\\u0E9D\\u0E9E\\u0E9F\\u0EA1\\u0EA2\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD\\u0EAE\\u0EAF\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0\\u0EC1\\u0EC2\\u0EC3\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40\\u0F41\\u0F42\\u0F43\\u0F44\\u0F45\\u0F46\\u0F47\\u0F49\\u0F4A\\u0F4B\\u0F4C\\u0F4D\\u0F4E\\u0F4F\\u0F50\\u0F51\\u0F52\\u0F53\\u0F54\\u0F55\\u0F56\\u0F57\\u0F58\\u0F59\\u0F5A\\u0F5B\\u0F5C\\u0F5D\\u0F5E\\u0F5F\\u0F60\\u0F61\\u0F62\\u0F63\\u0F64\\u0F65\\u0F66\\u0F67\\u0F68\\u0F69\\u0F6A\\u0F6B\\u0F6C\\u0F88\\u0F89\\u0F8A\\u0F8B\\u1000\\u1001\\u1002\\u1003\\u1004\\u1005\\u1006\\u1007\\u1008\\u1009\\u100A\\u100B\\u100C\\u100D\\u100E\\u100F\\u1010\\u1011\\u1012\\u1013\\u1014\\u1015\\u1016\\u1017\\u1018\\u1019\\u101A\\u101B\\u101C\\u101D\\u101E\\u101F\\u1020\\u1021\\u1022\\u1023\\u1024\\u1025\\u1026\\u1027\\u1028\\u1029\\u102A\\u103F\\u1050\\u1051\\u1052\\u1053\\u1054\\u1055\\u105A\\u105B\\u105C\\u105D\\u1061\\u1065\\u1066\\u106E\\u106F\\u1070\\u1075\\u1076\\u1077\\u1078\\u1079\\u107A\\u107B\\u107C\\u107D\\u107E\\u107F\\u1080\\u1081\\u108E\\u10D0\\u10D1\\u10D2\\u10D3\\u10D4\\u10D5\\u10D6\\u10D7\\u10D8\\u10D9\\u10DA\\u10DB\\u10DC\\u10DD\\u10DE\\u10DF\\u10E0\\u10E1\\u10E2\\u10E3\\u10E4\\u10E5\\u10E6\\u10E7\\u10E8\\u10E9\\u10EA\\u10EB\\u10EC\\u10ED\\u10EE\\u10EF\\u10F0\\u10F1\\u10F2\\u10F3\\u10F4\\u10F5\\u10F6\\u10F7\\u10F8\\u10F9\\u10FA\\u1100\\u1101\\u1102\\u1103\\u1104\\u1105\\u1106\\u1107\\u1108\\u1109\\u110A\\u110B\\u110C\\u110D\\u110E\\u110F\\u1110\\u1111\\u1112\\u1113\\u1114\\u1115\\u1116\\u1117\\u1118\\u1119\\u111A\\u111B\\u111C\\u111D\\u111E\\u111F\\u1120\\u1121\\u1122\\u1123\\u1124\\u1125\\u1126\\u1127\\u1128\\u1129\\u112A\\u112B\\u112C\\u112D\\u112E\\u112F\\u1130\\u1131\\u1132\\u1133\\u1134\\u1135\\u1136\\u1137\\u1138\\u1139\\u113A\\u113B\\u113C\\u113D\\u113E\\u113F\\u1140\\u1141\\u1142\\u1143\\u1144\\u1145\\u1146\\u1147\\u1148\\u1149\\u114A\\u114B\\u114C\\u114D\\u114E\\u114F\\u1150\\u1151\\u1152\\u1153\\u1154\\u1155\\u1156\\u1157\\u1158\\u1159\\u115F\\u1160\\u1161\\u1162\\u1163\\u1164\\u1165\\u1166\\u1167\\u1168\\u1169\\u116A\\u116B\\u116C\\u116D\\u116E\\u116F\\u1170\\u1171\\u1172\\u1173\\u1174\\u1175\\u1176\\u1177\\u1178\\u1179\\u117A\\u117B\\u117C\\u117D\\u117E\\u117F\\u1180\\u1181\\u1182\\u1183\\u1184\\u1185\\u1186\\u1187\\u1188\\u1189\\u118A\\u118B\\u118C\\u118D\\u118E\\u118F\\u1190\\u1191\\u1192\\u1193\\u1194\\u1195\\u1196\\u1197\\u1198\\u1199\\u119A\\u119B\\u119C\\u119D\\u119E\\u119F\\u11A0\\u11A1\\u11A2\\u11A8\\u11A9\\u11AA\\u11AB\\u11AC\\u11AD\\u11AE\\u11AF\\u11B0\\u11B1\\u11B2\\u11B3\\u11B4\\u11B5\\u11B6\\u11B7\\u11B8\\u11B9\\u11BA\\u11BB\\u11BC\\u11BD\\u11BE\\u11BF\\u11C0\\u11C1\\u11C2\\u11C3\\u11C4\\u11C5\\u11C6\\u11C7\\u11C8\\u11C9\\u11CA\\u11CB\\u11CC\\u11CD\\u11CE\\u11CF\\u11D0\\u11D1\\u11D2\\u11D3\\u11D4\\u11D5\\u11D6\\u11D7\\u11D8\\u11D9\\u11DA\\u11DB\\u11DC\\u11DD\\u11DE\\u11DF\\u11E0\\u11E1\\u11E2\\u11E3\\u11E4\\u11E5\\u11E6\\u11E7\\u11E8\\u11E9\\u11EA\\u11EB\\u11EC\\u11ED\\u11EE\\u11EF\\u11F0\\u11F1\\u11F2\\u11F3\\u11F4\\u11F5\\u11F6\\u11F7\\u11F8\\u11F9\\u1200\\u1201\\u1202\\u1203\\u1204\\u1205\\u1206\\u1207\\u1208\\u1209\\u120A\\u120B\\u120C\\u120D\\u120E\\u120F\\u1210\\u1211\\u1212\\u1213\\u1214\\u1215\\u1216\\u1217\\u1218\\u1219\\u121A\\u121B\\u121C\\u121D\\u121E\\u121F\\u1220\\u1221\\u1222\\u1223\\u1224\\u1225\\u1226\\u1227\\u1228\\u1229\\u122A\\u122B\\u122C\\u122D\\u122E\\u122F\\u1230\\u1231\\u1232\\u1233\\u1234\\u1235\\u1236\\u1237\\u1238\\u1239\\u123A\\u123B\\u123C\\u123D\\u123E\\u123F\\u1240\\u1241\\u1242\\u1243\\u1244\\u1245\\u1246\\u1247\\u1248\\u124A\\u124B\\u124C\\u124D\\u1250\\u1251\\u1252\\u1253\\u1254\\u1255\\u1256\\u1258\\u125A\\u125B\\u125C\\u125D\\u1260\\u1261\\u1262\\u1263\\u1264\\u1265\\u1266\\u1267\\u1268\\u1269\\u126A\\u126B\\u126C\\u126D\\u126E\\u126F\\u1270\\u1271\\u1272\\u1273\\u1274\\u1275\\u1276\\u1277\\u1278\\u1279\\u127A\\u127B\\u127C\\u127D\\u127E\\u127F\\u1280\\u1281\\u1282\\u1283\\u1284\\u1285\\u1286\\u1287\\u1288\\u128A\\u128B\\u128C\\u128D\\u1290\\u1291\\u1292\\u1293\\u1294\\u1295\\u1296\\u1297\\u1298\\u1299\\u129A\\u129B\\u129C\\u129D\\u129E\\u129F\\u12A0\\u12A1\\u12A2\\u12A3\\u12A4\\u12A5\\u12A6\\u12A7\\u12A8\\u12A9\\u12AA\\u12AB\\u12AC\\u12AD\\u12AE\\u12AF\\u12B0\\u12B2\\u12B3\\u12B4\\u12B5\\u12B8\\u12B9\\u12BA\\u12BB\\u12BC\\u12BD\\u12BE\\u12C0\\u12C2\\u12C3\\u12C4\\u12C5\\u12C8\\u12C9\\u12CA\\u12CB\\u12CC\\u12CD\\u12CE\\u12CF\\u12D0\\u12D1\\u12D2\\u12D3\\u12D4\\u12D5\\u12D6\\u12D8\\u12D9\\u12DA\\u12DB\\u12DC\\u12DD\\u12DE\\u12DF\\u12E0\\u12E1\\u12E2\\u12E3\\u12E4\\u12E5\\u12E6\\u12E7\\u12E8\\u12E9\\u12EA\\u12EB\\u12EC\\u12ED\\u12EE\\u12EF\\u12F0\\u12F1\\u12F2\\u12F3\\u12F4\\u12F5\\u12F6\\u12F7\\u12F8\\u12F9\\u12FA\\u12FB\\u12FC\\u12FD\\u12FE\\u12FF\\u1300\\u1301\\u1302\\u1303\\u1304\\u1305\\u1306\\u1307\\u1308\\u1309\\u130A\\u130B\\u130C\\u130D\\u130E\\u130F\\u1310\\u1312\\u1313\\u1314\\u1315\\u1318\\u1319\\u131A\\u131B\\u131C\\u131D\\u131E\\u131F\\u1320\\u1321\\u1322\\u1323\\u1324\\u1325\\u1326\\u1327\\u1328\\u1329\\u132A\\u132B\\u132C\\u132D\\u132E\\u132F\\u1330\\u1331\\u1332\\u1333\\u1334\\u1335\\u1336\\u1337\\u1338\\u1339\\u133A\\u133B\\u133C\\u133D\\u133E\\u133F\\u1340\\u1341\\u1342\\u1343\\u1344\\u1345\\u1346\\u1347\\u1348\\u1349\\u134A\\u134B\\u134C\\u134D\\u134E\\u134F\\u1350\\u1351\\u1352\\u1353\\u1354\\u1355\\u1356\\u1357\\u1358\\u1359\\u135A\\u1380\\u1381\\u1382\\u1383\\u1384\\u1385\\u1386\\u1387\\u1388\\u1389\\u138A\\u138B\\u138C\\u138D\\u138E\\u138F\\u13A0\\u13A1\\u13A2\\u13A3\\u13A4\\u13A5\\u13A6\\u13A7\\u13A8\\u13A9\\u13AA\\u13AB\\u13AC\\u13AD\\u13AE\\u13AF\\u13B0\\u13B1\\u13B2\\u13B3\\u13B4\\u13B5\\u13B6\\u13B7\\u13B8\\u13B9\\u13BA\\u13BB\\u13BC\\u13BD\\u13BE\\u13BF\\u13C0\\u13C1\\u13C2\\u13C3\\u13C4\\u13C5\\u13C6\\u13C7\\u13C8\\u13C9\\u13CA\\u13CB\\u13CC\\u13CD\\u13CE\\u13CF\\u13D0\\u13D1\\u13D2\\u13D3\\u13D4\\u13D5\\u13D6\\u13D7\\u13D8\\u13D9\\u13DA\\u13DB\\u13DC\\u13DD\\u13DE\\u13DF\\u13E0\\u13E1\\u13E2\\u13E3\\u13E4\\u13E5\\u13E6\\u13E7\\u13E8\\u13E9\\u13EA\\u13EB\\u13EC\\u13ED\\u13EE\\u13EF\\u13F0\\u13F1\\u13F2\\u13F3\\u13F4\\u1401\\u1402\\u1403\\u1404\\u1405\\u1406\\u1407\\u1408\\u1409\\u140A\\u140B\\u140C\\u140D\\u140E\\u140F\\u1410\\u1411\\u1412\\u1413\\u1414\\u1415\\u1416\\u1417\\u1418\\u1419\\u141A\\u141B\\u141C\\u141D\\u141E\\u141F\\u1420\\u1421\\u1422\\u1423\\u1424\\u1425\\u1426\\u1427\\u1428\\u1429\\u142A\\u142B\\u142C\\u142D\\u142E\\u142F\\u1430\\u1431\\u1432\\u1433\\u1434\\u1435\\u1436\\u1437\\u1438\\u1439\\u143A\\u143B\\u143C\\u143D\\u143E\\u143F\\u1440\\u1441\\u1442\\u1443\\u1444\\u1445\\u1446\\u1447\\u1448\\u1449\\u144A\\u144B\\u144C\\u144D\\u144E\\u144F\\u1450\\u1451\\u1452\\u1453\\u1454\\u1455\\u1456\\u1457\\u1458\\u1459\\u145A\\u145B\\u145C\\u145D\\u145E\\u145F\\u1460\\u1461\\u1462\\u1463\\u1464\\u1465\\u1466\\u1467\\u1468\\u1469\\u146A\\u146B\\u146C\\u146D\\u146E\\u146F\\u1470\\u1471\\u1472\\u1473\\u1474\\u1475\\u1476\\u1477\\u1478\\u1479\\u147A\\u147B\\u147C\\u147D\\u147E\\u147F\\u1480\\u1481\\u1482\\u1483\\u1484\\u1485\\u1486\\u1487\\u1488\\u1489\\u148A\\u148B\\u148C\\u148D\\u148E\\u148F\\u1490\\u1491\\u1492\\u1493\\u1494\\u1495\\u1496\\u1497\\u1498\\u1499\\u149A\\u149B\\u149C\\u149D\\u149E\\u149F\\u14A0\\u14A1\\u14A2\\u14A3\\u14A4\\u14A5\\u14A6\\u14A7\\u14A8\\u14A9\\u14AA\\u14AB\\u14AC\\u14AD\\u14AE\\u14AF\\u14B0\\u14B1\\u14B2\\u14B3\\u14B4\\u14B5\\u14B6\\u14B7\\u14B8\\u14B9\\u14BA\\u14BB\\u14BC\\u14BD\\u14BE\\u14BF\\u14C0\\u14C1\\u14C2\\u14C3\\u14C4\\u14C5\\u14C6\\u14C7\\u14C8\\u14C9\\u14CA\\u14CB\\u14CC\\u14CD\\u14CE\\u14CF\\u14D0\\u14D1\\u14D2\\u14D3\\u14D4\\u14D5\\u14D6\\u14D7\\u14D8\\u14D9\\u14DA\\u14DB\\u14DC\\u14DD\\u14DE\\u14DF\\u14E0\\u14E1\\u14E2\\u14E3\\u14E4\\u14E5\\u14E6\\u14E7\\u14E8\\u14E9\\u14EA\\u14EB\\u14EC\\u14ED\\u14EE\\u14EF\\u14F0\\u14F1\\u14F2\\u14F3\\u14F4\\u14F5\\u14F6\\u14F7\\u14F8\\u14F9\\u14FA\\u14FB\\u14FC\\u14FD\\u14FE\\u14FF\\u1500\\u1501\\u1502\\u1503\\u1504\\u1505\\u1506\\u1507\\u1508\\u1509\\u150A\\u150B\\u150C\\u150D\\u150E\\u150F\\u1510\\u1511\\u1512\\u1513\\u1514\\u1515\\u1516\\u1517\\u1518\\u1519\\u151A\\u151B\\u151C\\u151D\\u151E\\u151F\\u1520\\u1521\\u1522\\u1523\\u1524\\u1525\\u1526\\u1527\\u1528\\u1529\\u152A\\u152B\\u152C\\u152D\\u152E\\u152F\\u1530\\u1531\\u1532\\u1533\\u1534\\u1535\\u1536\\u1537\\u1538\\u1539\\u153A\\u153B\\u153C\\u153D\\u153E\\u153F\\u1540\\u1541\\u1542\\u1543\\u1544\\u1545\\u1546\\u1547\\u1548\\u1549\\u154A\\u154B\\u154C\\u154D\\u154E\\u154F\\u1550\\u1551\\u1552\\u1553\\u1554\\u1555\\u1556\\u1557\\u1558\\u1559\\u155A\\u155B\\u155C\\u155D\\u155E\\u155F\\u1560\\u1561\\u1562\\u1563\\u1564\\u1565\\u1566\\u1567\\u1568\\u1569\\u156A\\u156B\\u156C\\u156D\\u156E\\u156F\\u1570\\u1571\\u1572\\u1573\\u1574\\u1575\\u1576\\u1577\\u1578\\u1579\\u157A\\u157B\\u157C\\u157D\\u157E\\u157F\\u1580\\u1581\\u1582\\u1583\\u1584\\u1585\\u1586\\u1587\\u1588\\u1589\\u158A\\u158B\\u158C\\u158D\\u158E\\u158F\\u1590\\u1591\\u1592\\u1593\\u1594\\u1595\\u1596\\u1597\\u1598\\u1599\\u159A\\u159B\\u159C\\u159D\\u159E\\u159F\\u15A0\\u15A1\\u15A2\\u15A3\\u15A4\\u15A5\\u15A6\\u15A7\\u15A8\\u15A9\\u15AA\\u15AB\\u15AC\\u15AD\\u15AE\\u15AF\\u15B0\\u15B1\\u15B2\\u15B3\\u15B4\\u15B5\\u15B6\\u15B7\\u15B8\\u15B9\\u15BA\\u15BB\\u15BC\\u15BD\\u15BE\\u15BF\\u15C0\\u15C1\\u15C2\\u15C3\\u15C4\\u15C5\\u15C6\\u15C7\\u15C8\\u15C9\\u15CA\\u15CB\\u15CC\\u15CD\\u15CE\\u15CF\\u15D0\\u15D1\\u15D2\\u15D3\\u15D4\\u15D5\\u15D6\\u15D7\\u15D8\\u15D9\\u15DA\\u15DB\\u15DC\\u15DD\\u15DE\\u15DF\\u15E0\\u15E1\\u15E2\\u15E3\\u15E4\\u15E5\\u15E6\\u15E7\\u15E8\\u15E9\\u15EA\\u15EB\\u15EC\\u15ED\\u15EE\\u15EF\\u15F0\\u15F1\\u15F2\\u15F3\\u15F4\\u15F5\\u15F6\\u15F7\\u15F8\\u15F9\\u15FA\\u15FB\\u15FC\\u15FD\\u15FE\\u15FF\\u1600\\u1601\\u1602\\u1603\\u1604\\u1605\\u1606\\u1607\\u1608\\u1609\\u160A\\u160B\\u160C\\u160D\\u160E\\u160F\\u1610\\u1611\\u1612\\u1613\\u1614\\u1615\\u1616\\u1617\\u1618\\u1619\\u161A\\u161B\\u161C\\u161D\\u161E\\u161F\\u1620\\u1621\\u1622\\u1623\\u1624\\u1625\\u1626\\u1627\\u1628\\u1629\\u162A\\u162B\\u162C\\u162D\\u162E\\u162F\\u1630\\u1631\\u1632\\u1633\\u1634\\u1635\\u1636\\u1637\\u1638\\u1639\\u163A\\u163B\\u163C\\u163D\\u163E\\u163F\\u1640\\u1641\\u1642\\u1643\\u1644\\u1645\\u1646\\u1647\\u1648\\u1649\\u164A\\u164B\\u164C\\u164D\\u164E\\u164F\\u1650\\u1651\\u1652\\u1653\\u1654\\u1655\\u1656\\u1657\\u1658\\u1659\\u165A\\u165B\\u165C\\u165D\\u165E\\u165F\\u1660\\u1661\\u1662\\u1663\\u1664\\u1665\\u1666\\u1667\\u1668\\u1669\\u166A\\u166B\\u166C\\u166F\\u1670\\u1671\\u1672\\u1673\\u1674\\u1675\\u1676\\u1681\\u1682\\u1683\\u1684\\u1685\\u1686\\u1687\\u1688\\u1689\\u168A\\u168B\\u168C\\u168D\\u168E\\u168F\\u1690\\u1691\\u1692\\u1693\\u1694\\u1695\\u1696\\u1697\\u1698\\u1699\\u169A\\u16A0\\u16A1\\u16A2\\u16A3\\u16A4\\u16A5\\u16A6\\u16A7\\u16A8\\u16A9\\u16AA\\u16AB\\u16AC\\u16AD\\u16AE\\u16AF\\u16B0\\u16B1\\u16B2\\u16B3\\u16B4\\u16B5\\u16B6\\u16B7\\u16B8\\u16B9\\u16BA\\u16BB\\u16BC\\u16BD\\u16BE\\u16BF\\u16C0\\u16C1\\u16C2\\u16C3\\u16C4\\u16C5\\u16C6\\u16C7\\u16C8\\u16C9\\u16CA\\u16CB\\u16CC\\u16CD\\u16CE\\u16CF\\u16D0\\u16D1\\u16D2\\u16D3\\u16D4\\u16D5\\u16D6\\u16D7\\u16D8\\u16D9\\u16DA\\u16DB\\u16DC\\u16DD\\u16DE\\u16DF\\u16E0\\u16E1\\u16E2\\u16E3\\u16E4\\u16E5\\u16E6\\u16E7\\u16E8\\u16E9\\u16EA\\u1700\\u1701\\u1702\\u1703\\u1704\\u1705\\u1706\\u1707\\u1708\\u1709\\u170A\\u170B\\u170C\\u170E\\u170F\\u1710\\u1711\\u1720\\u1721\\u1722\\u1723\\u1724\\u1725\\u1726\\u1727\\u1728\\u1729\\u172A\\u172B\\u172C\\u172D\\u172E\\u172F\\u1730\\u1731\\u1740\\u1741\\u1742\\u1743\\u1744\\u1745\\u1746\\u1747\\u1748\\u1749\\u174A\\u174B\\u174C\\u174D\\u174E\\u174F\\u1750\\u1751\\u1760\\u1761\\u1762\\u1763\\u1764\\u1765\\u1766\\u1767\\u1768\\u1769\\u176A\\u176B\\u176C\\u176E\\u176F\\u1770\\u1780\\u1781\\u1782\\u1783\\u1784\\u1785\\u1786\\u1787\\u1788\\u1789\\u178A\\u178B\\u178C\\u178D\\u178E\\u178F\\u1790\\u1791\\u1792\\u1793\\u1794\\u1795\\u1796\\u1797\\u1798\\u1799\\u179A\\u179B\\u179C\\u179D\\u179E\\u179F\\u17A0\\u17A1\\u17A2\\u17A3\\u17A4\\u17A5\\u17A6\\u17A7\\u17A8\\u17A9\\u17AA\\u17AB\\u17AC\\u17AD\\u17AE\\u17AF\\u17B0\\u17B1\\u17B2\\u17B3\\u17DC\\u1820\\u1821\\u1822\\u1823\\u1824\\u1825\\u1826\\u1827\\u1828\\u1829\\u182A\\u182B\\u182C\\u182D\\u182E\\u182F\\u1830\\u1831\\u1832\\u1833\\u1834\\u1835\\u1836\\u1837\\u1838\\u1839\\u183A\\u183B\\u183C\\u183D\\u183E\\u183F\\u1840\\u1841\\u1842\\u1844\\u1845\\u1846\\u1847\\u1848\\u1849\\u184A\\u184B\\u184C\\u184D\\u184E\\u184F\\u1850\\u1851\\u1852\\u1853\\u1854\\u1855\\u1856\\u1857\\u1858\\u1859\\u185A\\u185B\\u185C\\u185D\\u185E\\u185F\\u1860\\u1861\\u1862\\u1863\\u1864\\u1865\\u1866\\u1867\\u1868\\u1869\\u186A\\u186B\\u186C\\u186D\\u186E\\u186F\\u1870\\u1871\\u1872\\u1873\\u1874\\u1875\\u1876\\u1877\\u1880\\u1881\\u1882\\u1883\\u1884\\u1885\\u1886\\u1887\\u1888\\u1889\\u188A\\u188B\\u188C\\u188D\\u188E\\u188F\\u1890\\u1891\\u1892\\u1893\\u1894\\u1895\\u1896\\u1897\\u1898\\u1899\\u189A\\u189B\\u189C\\u189D\\u189E\\u189F\\u18A0\\u18A1\\u18A2\\u18A3\\u18A4\\u18A5\\u18A6\\u18A7\\u18A8\\u18AA\\u1900\\u1901\\u1902\\u1903\\u1904\\u1905\\u1906\\u1907\\u1908\\u1909\\u190A\\u190B\\u190C\\u190D\\u190E\\u190F\\u1910\\u1911\\u1912\\u1913\\u1914\\u1915\\u1916\\u1917\\u1918\\u1919\\u191A\\u191B\\u191C\\u1950\\u1951\\u1952\\u1953\\u1954\\u1955\\u1956\\u1957\\u1958\\u1959\\u195A\\u195B\\u195C\\u195D\\u195E\\u195F\\u1960\\u1961\\u1962\\u1963\\u1964\\u1965\\u1966\\u1967\\u1968\\u1969\\u196A\\u196B\\u196C\\u196D\\u1970\\u1971\\u1972\\u1973\\u1974\\u1980\\u1981\\u1982\\u1983\\u1984\\u1985\\u1986\\u1987\\u1988\\u1989\\u198A\\u198B\\u198C\\u198D\\u198E\\u198F\\u1990\\u1991\\u1992\\u1993\\u1994\\u1995\\u1996\\u1997\\u1998\\u1999\\u199A\\u199B\\u199C\\u199D\\u199E\\u199F\\u19A0\\u19A1\\u19A2\\u19A3\\u19A4\\u19A5\\u19A6\\u19A7\\u19A8\\u19A9\\u19C1\\u19C2\\u19C3\\u19C4\\u19C5\\u19C6\\u19C7\\u1A00\\u1A01\\u1A02\\u1A03\\u1A04\\u1A05\\u1A06\\u1A07\\u1A08\\u1A09\\u1A0A\\u1A0B\\u1A0C\\u1A0D\\u1A0E\\u1A0F\\u1A10\\u1A11\\u1A12\\u1A13\\u1A14\\u1A15\\u1A16\\u1B05\\u1B06\\u1B07\\u1B08\\u1B09\\u1B0A\\u1B0B\\u1B0C\\u1B0D\\u1B0E\\u1B0F\\u1B10\\u1B11\\u1B12\\u1B13\\u1B14\\u1B15\\u1B16\\u1B17\\u1B18\\u1B19\\u1B1A\\u1B1B\\u1B1C\\u1B1D\\u1B1E\\u1B1F\\u1B20\\u1B21\\u1B22\\u1B23\\u1B24\\u1B25\\u1B26\\u1B27\\u1B28\\u1B29\\u1B2A\\u1B2B\\u1B2C\\u1B2D\\u1B2E\\u1B2F\\u1B30\\u1B31\\u1B32\\u1B33\\u1B45\\u1B46\\u1B47\\u1B48\\u1B49\\u1B4A\\u1B4B\\u1B83\\u1B84\\u1B85\\u1B86\\u1B87\\u1B88\\u1B89\\u1B8A\\u1B8B\\u1B8C\\u1B8D\\u1B8E\\u1B8F\\u1B90\\u1B91\\u1B92\\u1B93\\u1B94\\u1B95\\u1B96\\u1B97\\u1B98\\u1B99\\u1B9A\\u1B9B\\u1B9C\\u1B9D\\u1B9E\\u1B9F\\u1BA0\\u1BAE\\u1BAF\\u1C00\\u1C01\\u1C02\\u1C03\\u1C04\\u1C05\\u1C06\\u1C07\\u1C08\\u1C09\\u1C0A\\u1C0B\\u1C0C\\u1C0D\\u1C0E\\u1C0F\\u1C10\\u1C11\\u1C12\\u1C13\\u1C14\\u1C15\\u1C16\\u1C17\\u1C18\\u1C19\\u1C1A\\u1C1B\\u1C1C\\u1C1D\\u1C1E\\u1C1F\\u1C20\\u1C21\\u1C22\\u1C23\\u1C4D\\u1C4E\\u1C4F\\u1C5A\\u1C5B\\u1C5C\\u1C5D\\u1C5E\\u1C5F\\u1C60\\u1C61\\u1C62\\u1C63\\u1C64\\u1C65\\u1C66\\u1C67\\u1C68\\u1C69\\u1C6A\\u1C6B\\u1C6C\\u1C6D\\u1C6E\\u1C6F\\u1C70\\u1C71\\u1C72\\u1C73\\u1C74\\u1C75\\u1C76\\u1C77\\u2135\\u2136\\u2137\\u2138\\u2D30\\u2D31\\u2D32\\u2D33\\u2D34\\u2D35\\u2D36\\u2D37\\u2D38\\u2D39\\u2D3A\\u2D3B\\u2D3C\\u2D3D\\u2D3E\\u2D3F\\u2D40\\u2D41\\u2D42\\u2D43\\u2D44\\u2D45\\u2D46\\u2D47\\u2D48\\u2D49\\u2D4A\\u2D4B\\u2D4C\\u2D4D\\u2D4E\\u2D4F\\u2D50\\u2D51\\u2D52\\u2D53\\u2D54\\u2D55\\u2D56\\u2D57\\u2D58\\u2D59\\u2D5A\\u2D5B\\u2D5C\\u2D5D\\u2D5E\\u2D5F\\u2D60\\u2D61\\u2D62\\u2D63\\u2D64\\u2D65\\u2D80\\u2D81\\u2D82\\u2D83\\u2D84\\u2D85\\u2D86\\u2D87\\u2D88\\u2D89\\u2D8A\\u2D8B\\u2D8C\\u2D8D\\u2D8E\\u2D8F\\u2D90\\u2D91\\u2D92\\u2D93\\u2D94\\u2D95\\u2D96\\u2DA0\\u2DA1\\u2DA2\\u2DA3\\u2DA4\\u2DA5\\u2DA6\\u2DA8\\u2DA9\\u2DAA\\u2DAB\\u2DAC\\u2DAD\\u2DAE\\u2DB0\\u2DB1\\u2DB2\\u2DB3\\u2DB4\\u2DB5\\u2DB6\\u2DB8\\u2DB9\\u2DBA\\u2DBB\\u2DBC\\u2DBD\\u2DBE\\u2DC0\\u2DC1\\u2DC2\\u2DC3\\u2DC4\\u2DC5\\u2DC6\\u2DC8\\u2DC9\\u2DCA\\u2DCB\\u2DCC\\u2DCD\\u2DCE\\u2DD0\\u2DD1\\u2DD2\\u2DD3\\u2DD4\\u2DD5\\u2DD6\\u2DD8\\u2DD9\\u2DDA\\u2DDB\\u2DDC\\u2DDD\\u2DDE\\u3006\\u303C\\u3041\\u3042\\u3043\\u3044\\u3045\\u3046\\u3047\\u3048\\u3049\\u304A\\u304B\\u304C\\u304D\\u304E\\u304F\\u3050\\u3051\\u3052\\u3053\\u3054\\u3055\\u3056\\u3057\\u3058\\u3059\\u305A\\u305B\\u305C\\u305D\\u305E\\u305F\\u3060\\u3061\\u3062\\u3063\\u3064\\u3065\\u3066\\u3067\\u3068\\u3069\\u306A\\u306B\\u306C\\u306D\\u306E\\u306F\\u3070\\u3071\\u3072\\u3073\\u3074\\u3075\\u3076\\u3077\\u3078\\u3079\\u307A\\u307B\\u307C\\u307D\\u307E\\u307F\\u3080\\u3081\\u3082\\u3083\\u3084\\u3085\\u3086\\u3087\\u3088\\u3089\\u308A\\u308B\\u308C\\u308D\\u308E\\u308F\\u3090\\u3091\\u3092\\u3093\\u3094\\u3095\\u3096\\u309F\\u30A1\\u30A2\\u30A3\\u30A4\\u30A5\\u30A6\\u30A7\\u30A8\\u30A9\\u30AA\\u30AB\\u30AC\\u30AD\\u30AE\\u30AF\\u30B0\\u30B1\\u30B2\\u30B3\\u30B4\\u30B5\\u30B6\\u30B7\\u30B8\\u30B9\\u30BA\\u30BB\\u30BC\\u30BD\\u30BE\\u30BF\\u30C0\\u30C1\\u30C2\\u30C3\\u30C4\\u30C5\\u30C6\\u30C7\\u30C8\\u30C9\\u30CA\\u30CB\\u30CC\\u30CD\\u30CE\\u30CF\\u30D0\\u30D1\\u30D2\\u30D3\\u30D4\\u30D5\\u30D6\\u30D7\\u30D8\\u30D9\\u30DA\\u30DB\\u30DC\\u30DD\\u30DE\\u30DF\\u30E0\\u30E1\\u30E2\\u30E3\\u30E4\\u30E5\\u30E6\\u30E7\\u30E8\\u30E9\\u30EA\\u30EB\\u30EC\\u30ED\\u30EE\\u30EF\\u30F0\\u30F1\\u30F2\\u30F3\\u30F4\\u30F5\\u30F6\\u30F7\\u30F8\\u30F9\\u30FA\\u30FF\\u3105\\u3106\\u3107\\u3108\\u3109\\u310A\\u310B\\u310C\\u310D\\u310E\\u310F\\u3110\\u3111\\u3112\\u3113\\u3114\\u3115\\u3116\\u3117\\u3118\\u3119\\u311A\\u311B\\u311C\\u311D\\u311E\\u311F\\u3120\\u3121\\u3122\\u3123\\u3124\\u3125\\u3126\\u3127\\u3128\\u3129\\u312A\\u312B\\u312C\\u312D\\u3131\\u3132\\u3133\\u3134\\u3135\\u3136\\u3137\\u3138\\u3139\\u313A\\u313B\\u313C\\u313D\\u313E\\u313F\\u3140\\u3141\\u3142\\u3143\\u3144\\u3145\\u3146\\u3147\\u3148\\u3149\\u314A\\u314B\\u314C\\u314D\\u314E\\u314F\\u3150\\u3151\\u3152\\u3153\\u3154\\u3155\\u3156\\u3157\\u3158\\u3159\\u315A\\u315B\\u315C\\u315D\\u315E\\u315F\\u3160\\u3161\\u3162\\u3163\\u3164\\u3165\\u3166\\u3167\\u3168\\u3169\\u316A\\u316B\\u316C\\u316D\\u316E\\u316F\\u3170\\u3171\\u3172\\u3173\\u3174\\u3175\\u3176\\u3177\\u3178\\u3179\\u317A\\u317B\\u317C\\u317D\\u317E\\u317F\\u3180\\u3181\\u3182\\u3183\\u3184\\u3185\\u3186\\u3187\\u3188\\u3189\\u318A\\u318B\\u318C\\u318D\\u318E\\u31A0\\u31A1\\u31A2\\u31A3\\u31A4\\u31A5\\u31A6\\u31A7\\u31A8\\u31A9\\u31AA\\u31AB\\u31AC\\u31AD\\u31AE\\u31AF\\u31B0\\u31B1\\u31B2\\u31B3\\u31B4\\u31B5\\u31B6\\u31B7\\u31F0\\u31F1\\u31F2\\u31F3\\u31F4\\u31F5\\u31F6\\u31F7\\u31F8\\u31F9\\u31FA\\u31FB\\u31FC\\u31FD\\u31FE\\u31FF\\u3400\\u4DB5\\u4E00\\u9FC3\\uA000\\uA001\\uA002\\uA003\\uA004\\uA005\\uA006\\uA007\\uA008\\uA009\\uA00A\\uA00B\\uA00C\\uA00D\\uA00E\\uA00F\\uA010\\uA011\\uA012\\uA013\\uA014\\uA016\\uA017\\uA018\\uA019\\uA01A\\uA01B\\uA01C\\uA01D\\uA01E\\uA01F\\uA020\\uA021\\uA022\\uA023\\uA024\\uA025\\uA026\\uA027\\uA028\\uA029\\uA02A\\uA02B\\uA02C\\uA02D\\uA02E\\uA02F\\uA030\\uA031\\uA032\\uA033\\uA034\\uA035\\uA036\\uA037\\uA038\\uA039\\uA03A\\uA03B\\uA03C\\uA03D\\uA03E\\uA03F\\uA040\\uA041\\uA042\\uA043\\uA044\\uA045\\uA046\\uA047\\uA048\\uA049\\uA04A\\uA04B\\uA04C\\uA04D\\uA04E\\uA04F\\uA050\\uA051\\uA052\\uA053\\uA054\\uA055\\uA056\\uA057\\uA058\\uA059\\uA05A\\uA05B\\uA05C\\uA05D\\uA05E\\uA05F\\uA060\\uA061\\uA062\\uA063\\uA064\\uA065\\uA066\\uA067\\uA068\\uA069\\uA06A\\uA06B\\uA06C\\uA06D\\uA06E\\uA06F\\uA070\\uA071\\uA072\\uA073\\uA074\\uA075\\uA076\\uA077\\uA078\\uA079\\uA07A\\uA07B\\uA07C\\uA07D\\uA07E\\uA07F\\uA080\\uA081\\uA082\\uA083\\uA084\\uA085\\uA086\\uA087\\uA088\\uA089\\uA08A\\uA08B\\uA08C\\uA08D\\uA08E\\uA08F\\uA090\\uA091\\uA092\\uA093\\uA094\\uA095\\uA096\\uA097\\uA098\\uA099\\uA09A\\uA09B\\uA09C\\uA09D\\uA09E\\uA09F\\uA0A0\\uA0A1\\uA0A2\\uA0A3\\uA0A4\\uA0A5\\uA0A6\\uA0A7\\uA0A8\\uA0A9\\uA0AA\\uA0AB\\uA0AC\\uA0AD\\uA0AE\\uA0AF\\uA0B0\\uA0B1\\uA0B2\\uA0B3\\uA0B4\\uA0B5\\uA0B6\\uA0B7\\uA0B8\\uA0B9\\uA0BA\\uA0BB\\uA0BC\\uA0BD\\uA0BE\\uA0BF\\uA0C0\\uA0C1\\uA0C2\\uA0C3\\uA0C4\\uA0C5\\uA0C6\\uA0C7\\uA0C8\\uA0C9\\uA0CA\\uA0CB\\uA0CC\\uA0CD\\uA0CE\\uA0CF\\uA0D0\\uA0D1\\uA0D2\\uA0D3\\uA0D4\\uA0D5\\uA0D6\\uA0D7\\uA0D8\\uA0D9\\uA0DA\\uA0DB\\uA0DC\\uA0DD\\uA0DE\\uA0DF\\uA0E0\\uA0E1\\uA0E2\\uA0E3\\uA0E4\\uA0E5\\uA0E6\\uA0E7\\uA0E8\\uA0E9\\uA0EA\\uA0EB\\uA0EC\\uA0ED\\uA0EE\\uA0EF\\uA0F0\\uA0F1\\uA0F2\\uA0F3\\uA0F4\\uA0F5\\uA0F6\\uA0F7\\uA0F8\\uA0F9\\uA0FA\\uA0FB\\uA0FC\\uA0FD\\uA0FE\\uA0FF\\uA100\\uA101\\uA102\\uA103\\uA104\\uA105\\uA106\\uA107\\uA108\\uA109\\uA10A\\uA10B\\uA10C\\uA10D\\uA10E\\uA10F\\uA110\\uA111\\uA112\\uA113\\uA114\\uA115\\uA116\\uA117\\uA118\\uA119\\uA11A\\uA11B\\uA11C\\uA11D\\uA11E\\uA11F\\uA120\\uA121\\uA122\\uA123\\uA124\\uA125\\uA126\\uA127\\uA128\\uA129\\uA12A\\uA12B\\uA12C\\uA12D\\uA12E\\uA12F\\uA130\\uA131\\uA132\\uA133\\uA134\\uA135\\uA136\\uA137\\uA138\\uA139\\uA13A\\uA13B\\uA13C\\uA13D\\uA13E\\uA13F\\uA140\\uA141\\uA142\\uA143\\uA144\\uA145\\uA146\\uA147\\uA148\\uA149\\uA14A\\uA14B\\uA14C\\uA14D\\uA14E\\uA14F\\uA150\\uA151\\uA152\\uA153\\uA154\\uA155\\uA156\\uA157\\uA158\\uA159\\uA15A\\uA15B\\uA15C\\uA15D\\uA15E\\uA15F\\uA160\\uA161\\uA162\\uA163\\uA164\\uA165\\uA166\\uA167\\uA168\\uA169\\uA16A\\uA16B\\uA16C\\uA16D\\uA16E\\uA16F\\uA170\\uA171\\uA172\\uA173\\uA174\\uA175\\uA176\\uA177\\uA178\\uA179\\uA17A\\uA17B\\uA17C\\uA17D\\uA17E\\uA17F\\uA180\\uA181\\uA182\\uA183\\uA184\\uA185\\uA186\\uA187\\uA188\\uA189\\uA18A\\uA18B\\uA18C\\uA18D\\uA18E\\uA18F\\uA190\\uA191\\uA192\\uA193\\uA194\\uA195\\uA196\\uA197\\uA198\\uA199\\uA19A\\uA19B\\uA19C\\uA19D\\uA19E\\uA19F\\uA1A0\\uA1A1\\uA1A2\\uA1A3\\uA1A4\\uA1A5\\uA1A6\\uA1A7\\uA1A8\\uA1A9\\uA1AA\\uA1AB\\uA1AC\\uA1AD\\uA1AE\\uA1AF\\uA1B0\\uA1B1\\uA1B2\\uA1B3\\uA1B4\\uA1B5\\uA1B6\\uA1B7\\uA1B8\\uA1B9\\uA1BA\\uA1BB\\uA1BC\\uA1BD\\uA1BE\\uA1BF\\uA1C0\\uA1C1\\uA1C2\\uA1C3\\uA1C4\\uA1C5\\uA1C6\\uA1C7\\uA1C8\\uA1C9\\uA1CA\\uA1CB\\uA1CC\\uA1CD\\uA1CE\\uA1CF\\uA1D0\\uA1D1\\uA1D2\\uA1D3\\uA1D4\\uA1D5\\uA1D6\\uA1D7\\uA1D8\\uA1D9\\uA1DA\\uA1DB\\uA1DC\\uA1DD\\uA1DE\\uA1DF\\uA1E0\\uA1E1\\uA1E2\\uA1E3\\uA1E4\\uA1E5\\uA1E6\\uA1E7\\uA1E8\\uA1E9\\uA1EA\\uA1EB\\uA1EC\\uA1ED\\uA1EE\\uA1EF\\uA1F0\\uA1F1\\uA1F2\\uA1F3\\uA1F4\\uA1F5\\uA1F6\\uA1F7\\uA1F8\\uA1F9\\uA1FA\\uA1FB\\uA1FC\\uA1FD\\uA1FE\\uA1FF\\uA200\\uA201\\uA202\\uA203\\uA204\\uA205\\uA206\\uA207\\uA208\\uA209\\uA20A\\uA20B\\uA20C\\uA20D\\uA20E\\uA20F\\uA210\\uA211\\uA212\\uA213\\uA214\\uA215\\uA216\\uA217\\uA218\\uA219\\uA21A\\uA21B\\uA21C\\uA21D\\uA21E\\uA21F\\uA220\\uA221\\uA222\\uA223\\uA224\\uA225\\uA226\\uA227\\uA228\\uA229\\uA22A\\uA22B\\uA22C\\uA22D\\uA22E\\uA22F\\uA230\\uA231\\uA232\\uA233\\uA234\\uA235\\uA236\\uA237\\uA238\\uA239\\uA23A\\uA23B\\uA23C\\uA23D\\uA23E\\uA23F\\uA240\\uA241\\uA242\\uA243\\uA244\\uA245\\uA246\\uA247\\uA248\\uA249\\uA24A\\uA24B\\uA24C\\uA24D\\uA24E\\uA24F\\uA250\\uA251\\uA252\\uA253\\uA254\\uA255\\uA256\\uA257\\uA258\\uA259\\uA25A\\uA25B\\uA25C\\uA25D\\uA25E\\uA25F\\uA260\\uA261\\uA262\\uA263\\uA264\\uA265\\uA266\\uA267\\uA268\\uA269\\uA26A\\uA26B\\uA26C\\uA26D\\uA26E\\uA26F\\uA270\\uA271\\uA272\\uA273\\uA274\\uA275\\uA276\\uA277\\uA278\\uA279\\uA27A\\uA27B\\uA27C\\uA27D\\uA27E\\uA27F\\uA280\\uA281\\uA282\\uA283\\uA284\\uA285\\uA286\\uA287\\uA288\\uA289\\uA28A\\uA28B\\uA28C\\uA28D\\uA28E\\uA28F\\uA290\\uA291\\uA292\\uA293\\uA294\\uA295\\uA296\\uA297\\uA298\\uA299\\uA29A\\uA29B\\uA29C\\uA29D\\uA29E\\uA29F\\uA2A0\\uA2A1\\uA2A2\\uA2A3\\uA2A4\\uA2A5\\uA2A6\\uA2A7\\uA2A8\\uA2A9\\uA2AA\\uA2AB\\uA2AC\\uA2AD\\uA2AE\\uA2AF\\uA2B0\\uA2B1\\uA2B2\\uA2B3\\uA2B4\\uA2B5\\uA2B6\\uA2B7\\uA2B8\\uA2B9\\uA2BA\\uA2BB\\uA2BC\\uA2BD\\uA2BE\\uA2BF\\uA2C0\\uA2C1\\uA2C2\\uA2C3\\uA2C4\\uA2C5\\uA2C6\\uA2C7\\uA2C8\\uA2C9\\uA2CA\\uA2CB\\uA2CC\\uA2CD\\uA2CE\\uA2CF\\uA2D0\\uA2D1\\uA2D2\\uA2D3\\uA2D4\\uA2D5\\uA2D6\\uA2D7\\uA2D8\\uA2D9\\uA2DA\\uA2DB\\uA2DC\\uA2DD\\uA2DE\\uA2DF\\uA2E0\\uA2E1\\uA2E2\\uA2E3\\uA2E4\\uA2E5\\uA2E6\\uA2E7\\uA2E8\\uA2E9\\uA2EA\\uA2EB\\uA2EC\\uA2ED\\uA2EE\\uA2EF\\uA2F0\\uA2F1\\uA2F2\\uA2F3\\uA2F4\\uA2F5\\uA2F6\\uA2F7\\uA2F8\\uA2F9\\uA2FA\\uA2FB\\uA2FC\\uA2FD\\uA2FE\\uA2FF\\uA300\\uA301\\uA302\\uA303\\uA304\\uA305\\uA306\\uA307\\uA308\\uA309\\uA30A\\uA30B\\uA30C\\uA30D\\uA30E\\uA30F\\uA310\\uA311\\uA312\\uA313\\uA314\\uA315\\uA316\\uA317\\uA318\\uA319\\uA31A\\uA31B\\uA31C\\uA31D\\uA31E\\uA31F\\uA320\\uA321\\uA322\\uA323\\uA324\\uA325\\uA326\\uA327\\uA328\\uA329\\uA32A\\uA32B\\uA32C\\uA32D\\uA32E\\uA32F\\uA330\\uA331\\uA332\\uA333\\uA334\\uA335\\uA336\\uA337\\uA338\\uA339\\uA33A\\uA33B\\uA33C\\uA33D\\uA33E\\uA33F\\uA340\\uA341\\uA342\\uA343\\uA344\\uA345\\uA346\\uA347\\uA348\\uA349\\uA34A\\uA34B\\uA34C\\uA34D\\uA34E\\uA34F\\uA350\\uA351\\uA352\\uA353\\uA354\\uA355\\uA356\\uA357\\uA358\\uA359\\uA35A\\uA35B\\uA35C\\uA35D\\uA35E\\uA35F\\uA360\\uA361\\uA362\\uA363\\uA364\\uA365\\uA366\\uA367\\uA368\\uA369\\uA36A\\uA36B\\uA36C\\uA36D\\uA36E\\uA36F\\uA370\\uA371\\uA372\\uA373\\uA374\\uA375\\uA376\\uA377\\uA378\\uA379\\uA37A\\uA37B\\uA37C\\uA37D\\uA37E\\uA37F\\uA380\\uA381\\uA382\\uA383\\uA384\\uA385\\uA386\\uA387\\uA388\\uA389\\uA38A\\uA38B\\uA38C\\uA38D\\uA38E\\uA38F\\uA390\\uA391\\uA392\\uA393\\uA394\\uA395\\uA396\\uA397\\uA398\\uA399\\uA39A\\uA39B\\uA39C\\uA39D\\uA39E\\uA39F\\uA3A0\\uA3A1\\uA3A2\\uA3A3\\uA3A4\\uA3A5\\uA3A6\\uA3A7\\uA3A8\\uA3A9\\uA3AA\\uA3AB\\uA3AC\\uA3AD\\uA3AE\\uA3AF\\uA3B0\\uA3B1\\uA3B2\\uA3B3\\uA3B4\\uA3B5\\uA3B6\\uA3B7\\uA3B8\\uA3B9\\uA3BA\\uA3BB\\uA3BC\\uA3BD\\uA3BE\\uA3BF\\uA3C0\\uA3C1\\uA3C2\\uA3C3\\uA3C4\\uA3C5\\uA3C6\\uA3C7\\uA3C8\\uA3C9\\uA3CA\\uA3CB\\uA3CC\\uA3CD\\uA3CE\\uA3CF\\uA3D0\\uA3D1\\uA3D2\\uA3D3\\uA3D4\\uA3D5\\uA3D6\\uA3D7\\uA3D8\\uA3D9\\uA3DA\\uA3DB\\uA3DC\\uA3DD\\uA3DE\\uA3DF\\uA3E0\\uA3E1\\uA3E2\\uA3E3\\uA3E4\\uA3E5\\uA3E6\\uA3E7\\uA3E8\\uA3E9\\uA3EA\\uA3EB\\uA3EC\\uA3ED\\uA3EE\\uA3EF\\uA3F0\\uA3F1\\uA3F2\\uA3F3\\uA3F4\\uA3F5\\uA3F6\\uA3F7\\uA3F8\\uA3F9\\uA3FA\\uA3FB\\uA3FC\\uA3FD\\uA3FE\\uA3FF\\uA400\\uA401\\uA402\\uA403\\uA404\\uA405\\uA406\\uA407\\uA408\\uA409\\uA40A\\uA40B\\uA40C\\uA40D\\uA40E\\uA40F\\uA410\\uA411\\uA412\\uA413\\uA414\\uA415\\uA416\\uA417\\uA418\\uA419\\uA41A\\uA41B\\uA41C\\uA41D\\uA41E\\uA41F\\uA420\\uA421\\uA422\\uA423\\uA424\\uA425\\uA426\\uA427\\uA428\\uA429\\uA42A\\uA42B\\uA42C\\uA42D\\uA42E\\uA42F\\uA430\\uA431\\uA432\\uA433\\uA434\\uA435\\uA436\\uA437\\uA438\\uA439\\uA43A\\uA43B\\uA43C\\uA43D\\uA43E\\uA43F\\uA440\\uA441\\uA442\\uA443\\uA444\\uA445\\uA446\\uA447\\uA448\\uA449\\uA44A\\uA44B\\uA44C\\uA44D\\uA44E\\uA44F\\uA450\\uA451\\uA452\\uA453\\uA454\\uA455\\uA456\\uA457\\uA458\\uA459\\uA45A\\uA45B\\uA45C\\uA45D\\uA45E\\uA45F\\uA460\\uA461\\uA462\\uA463\\uA464\\uA465\\uA466\\uA467\\uA468\\uA469\\uA46A\\uA46B\\uA46C\\uA46D\\uA46E\\uA46F\\uA470\\uA471\\uA472\\uA473\\uA474\\uA475\\uA476\\uA477\\uA478\\uA479\\uA47A\\uA47B\\uA47C\\uA47D\\uA47E\\uA47F\\uA480\\uA481\\uA482\\uA483\\uA484\\uA485\\uA486\\uA487\\uA488\\uA489\\uA48A\\uA48B\\uA48C\\uA500\\uA501\\uA502\\uA503\\uA504\\uA505\\uA506\\uA507\\uA508\\uA509\\uA50A\\uA50B\\uA50C\\uA50D\\uA50E\\uA50F\\uA510\\uA511\\uA512\\uA513\\uA514\\uA515\\uA516\\uA517\\uA518\\uA519\\uA51A\\uA51B\\uA51C\\uA51D\\uA51E\\uA51F\\uA520\\uA521\\uA522\\uA523\\uA524\\uA525\\uA526\\uA527\\uA528\\uA529\\uA52A\\uA52B\\uA52C\\uA52D\\uA52E\\uA52F\\uA530\\uA531\\uA532\\uA533\\uA534\\uA535\\uA536\\uA537\\uA538\\uA539\\uA53A\\uA53B\\uA53C\\uA53D\\uA53E\\uA53F\\uA540\\uA541\\uA542\\uA543\\uA544\\uA545\\uA546\\uA547\\uA548\\uA549\\uA54A\\uA54B\\uA54C\\uA54D\\uA54E\\uA54F\\uA550\\uA551\\uA552\\uA553\\uA554\\uA555\\uA556\\uA557\\uA558\\uA559\\uA55A\\uA55B\\uA55C\\uA55D\\uA55E\\uA55F\\uA560\\uA561\\uA562\\uA563\\uA564\\uA565\\uA566\\uA567\\uA568\\uA569\\uA56A\\uA56B\\uA56C\\uA56D\\uA56E\\uA56F\\uA570\\uA571\\uA572\\uA573\\uA574\\uA575\\uA576\\uA577\\uA578\\uA579\\uA57A\\uA57B\\uA57C\\uA57D\\uA57E\\uA57F\\uA580\\uA581\\uA582\\uA583\\uA584\\uA585\\uA586\\uA587\\uA588\\uA589\\uA58A\\uA58B\\uA58C\\uA58D\\uA58E\\uA58F\\uA590\\uA591\\uA592\\uA593\\uA594\\uA595\\uA596\\uA597\\uA598\\uA599\\uA59A\\uA59B\\uA59C\\uA59D\\uA59E\\uA59F\\uA5A0\\uA5A1\\uA5A2\\uA5A3\\uA5A4\\uA5A5\\uA5A6\\uA5A7\\uA5A8\\uA5A9\\uA5AA\\uA5AB\\uA5AC\\uA5AD\\uA5AE\\uA5AF\\uA5B0\\uA5B1\\uA5B2\\uA5B3\\uA5B4\\uA5B5\\uA5B6\\uA5B7\\uA5B8\\uA5B9\\uA5BA\\uA5BB\\uA5BC\\uA5BD\\uA5BE\\uA5BF\\uA5C0\\uA5C1\\uA5C2\\uA5C3\\uA5C4\\uA5C5\\uA5C6\\uA5C7\\uA5C8\\uA5C9\\uA5CA\\uA5CB\\uA5CC\\uA5CD\\uA5CE\\uA5CF\\uA5D0\\uA5D1\\uA5D2\\uA5D3\\uA5D4\\uA5D5\\uA5D6\\uA5D7\\uA5D8\\uA5D9\\uA5DA\\uA5DB\\uA5DC\\uA5DD\\uA5DE\\uA5DF\\uA5E0\\uA5E1\\uA5E2\\uA5E3\\uA5E4\\uA5E5\\uA5E6\\uA5E7\\uA5E8\\uA5E9\\uA5EA\\uA5EB\\uA5EC\\uA5ED\\uA5EE\\uA5EF\\uA5F0\\uA5F1\\uA5F2\\uA5F3\\uA5F4\\uA5F5\\uA5F6\\uA5F7\\uA5F8\\uA5F9\\uA5FA\\uA5FB\\uA5FC\\uA5FD\\uA5FE\\uA5FF\\uA600\\uA601\\uA602\\uA603\\uA604\\uA605\\uA606\\uA607\\uA608\\uA609\\uA60A\\uA60B\\uA610\\uA611\\uA612\\uA613\\uA614\\uA615\\uA616\\uA617\\uA618\\uA619\\uA61A\\uA61B\\uA61C\\uA61D\\uA61E\\uA61F\\uA62A\\uA62B\\uA66E\\uA7FB\\uA7FC\\uA7FD\\uA7FE\\uA7FF\\uA800\\uA801\\uA803\\uA804\\uA805\\uA807\\uA808\\uA809\\uA80A\\uA80C\\uA80D\\uA80E\\uA80F\\uA810\\uA811\\uA812\\uA813\\uA814\\uA815\\uA816\\uA817\\uA818\\uA819\\uA81A\\uA81B\\uA81C\\uA81D\\uA81E\\uA81F\\uA820\\uA821\\uA822\\uA840\\uA841\\uA842\\uA843\\uA844\\uA845\\uA846\\uA847\\uA848\\uA849\\uA84A\\uA84B\\uA84C\\uA84D\\uA84E\\uA84F\\uA850\\uA851\\uA852\\uA853\\uA854\\uA855\\uA856\\uA857\\uA858\\uA859\\uA85A\\uA85B\\uA85C\\uA85D\\uA85E\\uA85F\\uA860\\uA861\\uA862\\uA863\\uA864\\uA865\\uA866\\uA867\\uA868\\uA869\\uA86A\\uA86B\\uA86C\\uA86D\\uA86E\\uA86F\\uA870\\uA871\\uA872\\uA873\\uA882\\uA883\\uA884\\uA885\\uA886\\uA887\\uA888\\uA889\\uA88A\\uA88B\\uA88C\\uA88D\\uA88E\\uA88F\\uA890\\uA891\\uA892\\uA893\\uA894\\uA895\\uA896\\uA897\\uA898\\uA899\\uA89A\\uA89B\\uA89C\\uA89D\\uA89E\\uA89F\\uA8A0\\uA8A1\\uA8A2\\uA8A3\\uA8A4\\uA8A5\\uA8A6\\uA8A7\\uA8A8\\uA8A9\\uA8AA\\uA8AB\\uA8AC\\uA8AD\\uA8AE\\uA8AF\\uA8B0\\uA8B1\\uA8B2\\uA8B3\\uA90A\\uA90B\\uA90C\\uA90D\\uA90E\\uA90F\\uA910\\uA911\\uA912\\uA913\\uA914\\uA915\\uA916\\uA917\\uA918\\uA919\\uA91A\\uA91B\\uA91C\\uA91D\\uA91E\\uA91F\\uA920\\uA921\\uA922\\uA923\\uA924\\uA925\\uA930\\uA931\\uA932\\uA933\\uA934\\uA935\\uA936\\uA937\\uA938\\uA939\\uA93A\\uA93B\\uA93C\\uA93D\\uA93E\\uA93F\\uA940\\uA941\\uA942\\uA943\\uA944\\uA945\\uA946\\uAA00\\uAA01\\uAA02\\uAA03\\uAA04\\uAA05\\uAA06\\uAA07\\uAA08\\uAA09\\uAA0A\\uAA0B\\uAA0C\\uAA0D\\uAA0E\\uAA0F\\uAA10\\uAA11\\uAA12\\uAA13\\uAA14\\uAA15\\uAA16\\uAA17\\uAA18\\uAA19\\uAA1A\\uAA1B\\uAA1C\\uAA1D\\uAA1E\\uAA1F\\uAA20\\uAA21\\uAA22\\uAA23\\uAA24\\uAA25\\uAA26\\uAA27\\uAA28\\uAA40\\uAA41\\uAA42\\uAA44\\uAA45\\uAA46\\uAA47\\uAA48\\uAA49\\uAA4A\\uAA4B\\uAC00\\uD7A3\\uF900\\uF901\\uF902\\uF903\\uF904\\uF905\\uF906\\uF907\\uF908\\uF909\\uF90A\\uF90B\\uF90C\\uF90D\\uF90E\\uF90F\\uF910\\uF911\\uF912\\uF913\\uF914\\uF915\\uF916\\uF917\\uF918\\uF919\\uF91A\\uF91B\\uF91C\\uF91D\\uF91E\\uF91F\\uF920\\uF921\\uF922\\uF923\\uF924\\uF925\\uF926\\uF927\\uF928\\uF929\\uF92A\\uF92B\\uF92C\\uF92D\\uF92E\\uF92F\\uF930\\uF931\\uF932\\uF933\\uF934\\uF935\\uF936\\uF937\\uF938\\uF939\\uF93A\\uF93B\\uF93C\\uF93D\\uF93E\\uF93F\\uF940\\uF941\\uF942\\uF943\\uF944\\uF945\\uF946\\uF947\\uF948\\uF949\\uF94A\\uF94B\\uF94C\\uF94D\\uF94E\\uF94F\\uF950\\uF951\\uF952\\uF953\\uF954\\uF955\\uF956\\uF957\\uF958\\uF959\\uF95A\\uF95B\\uF95C\\uF95D\\uF95E\\uF95F\\uF960\\uF961\\uF962\\uF963\\uF964\\uF965\\uF966\\uF967\\uF968\\uF969\\uF96A\\uF96B\\uF96C\\uF96D\\uF96E\\uF96F\\uF970\\uF971\\uF972\\uF973\\uF974\\uF975\\uF976\\uF977\\uF978\\uF979\\uF97A\\uF97B\\uF97C\\uF97D\\uF97E\\uF97F\\uF980\\uF981\\uF982\\uF983\\uF984\\uF985\\uF986\\uF987\\uF988\\uF989\\uF98A\\uF98B\\uF98C\\uF98D\\uF98E\\uF98F\\uF990\\uF991\\uF992\\uF993\\uF994\\uF995\\uF996\\uF997\\uF998\\uF999\\uF99A\\uF99B\\uF99C\\uF99D\\uF99E\\uF99F\\uF9A0\\uF9A1\\uF9A2\\uF9A3\\uF9A4\\uF9A5\\uF9A6\\uF9A7\\uF9A8\\uF9A9\\uF9AA\\uF9AB\\uF9AC\\uF9AD\\uF9AE\\uF9AF\\uF9B0\\uF9B1\\uF9B2\\uF9B3\\uF9B4\\uF9B5\\uF9B6\\uF9B7\\uF9B8\\uF9B9\\uF9BA\\uF9BB\\uF9BC\\uF9BD\\uF9BE\\uF9BF\\uF9C0\\uF9C1\\uF9C2\\uF9C3\\uF9C4\\uF9C5\\uF9C6\\uF9C7\\uF9C8\\uF9C9\\uF9CA\\uF9CB\\uF9CC\\uF9CD\\uF9CE\\uF9CF\\uF9D0\\uF9D1\\uF9D2\\uF9D3\\uF9D4\\uF9D5\\uF9D6\\uF9D7\\uF9D8\\uF9D9\\uF9DA\\uF9DB\\uF9DC\\uF9DD\\uF9DE\\uF9DF\\uF9E0\\uF9E1\\uF9E2\\uF9E3\\uF9E4\\uF9E5\\uF9E6\\uF9E7\\uF9E8\\uF9E9\\uF9EA\\uF9EB\\uF9EC\\uF9ED\\uF9EE\\uF9EF\\uF9F0\\uF9F1\\uF9F2\\uF9F3\\uF9F4\\uF9F5\\uF9F6\\uF9F7\\uF9F8\\uF9F9\\uF9FA\\uF9FB\\uF9FC\\uF9FD\\uF9FE\\uF9FF\\uFA00\\uFA01\\uFA02\\uFA03\\uFA04\\uFA05\\uFA06\\uFA07\\uFA08\\uFA09\\uFA0A\\uFA0B\\uFA0C\\uFA0D\\uFA0E\\uFA0F\\uFA10\\uFA11\\uFA12\\uFA13\\uFA14\\uFA15\\uFA16\\uFA17\\uFA18\\uFA19\\uFA1A\\uFA1B\\uFA1C\\uFA1D\\uFA1E\\uFA1F\\uFA20\\uFA21\\uFA22\\uFA23\\uFA24\\uFA25\\uFA26\\uFA27\\uFA28\\uFA29\\uFA2A\\uFA2B\\uFA2C\\uFA2D\\uFA30\\uFA31\\uFA32\\uFA33\\uFA34\\uFA35\\uFA36\\uFA37\\uFA38\\uFA39\\uFA3A\\uFA3B\\uFA3C\\uFA3D\\uFA3E\\uFA3F\\uFA40\\uFA41\\uFA42\\uFA43\\uFA44\\uFA45\\uFA46\\uFA47\\uFA48\\uFA49\\uFA4A\\uFA4B\\uFA4C\\uFA4D\\uFA4E\\uFA4F\\uFA50\\uFA51\\uFA52\\uFA53\\uFA54\\uFA55\\uFA56\\uFA57\\uFA58\\uFA59\\uFA5A\\uFA5B\\uFA5C\\uFA5D\\uFA5E\\uFA5F\\uFA60\\uFA61\\uFA62\\uFA63\\uFA64\\uFA65\\uFA66\\uFA67\\uFA68\\uFA69\\uFA6A\\uFA70\\uFA71\\uFA72\\uFA73\\uFA74\\uFA75\\uFA76\\uFA77\\uFA78\\uFA79\\uFA7A\\uFA7B\\uFA7C\\uFA7D\\uFA7E\\uFA7F\\uFA80\\uFA81\\uFA82\\uFA83\\uFA84\\uFA85\\uFA86\\uFA87\\uFA88\\uFA89\\uFA8A\\uFA8B\\uFA8C\\uFA8D\\uFA8E\\uFA8F\\uFA90\\uFA91\\uFA92\\uFA93\\uFA94\\uFA95\\uFA96\\uFA97\\uFA98\\uFA99\\uFA9A\\uFA9B\\uFA9C\\uFA9D\\uFA9E\\uFA9F\\uFAA0\\uFAA1\\uFAA2\\uFAA3\\uFAA4\\uFAA5\\uFAA6\\uFAA7\\uFAA8\\uFAA9\\uFAAA\\uFAAB\\uFAAC\\uFAAD\\uFAAE\\uFAAF\\uFAB0\\uFAB1\\uFAB2\\uFAB3\\uFAB4\\uFAB5\\uFAB6\\uFAB7\\uFAB8\\uFAB9\\uFABA\\uFABB\\uFABC\\uFABD\\uFABE\\uFABF\\uFAC0\\uFAC1\\uFAC2\\uFAC3\\uFAC4\\uFAC5\\uFAC6\\uFAC7\\uFAC8\\uFAC9\\uFACA\\uFACB\\uFACC\\uFACD\\uFACE\\uFACF\\uFAD0\\uFAD1\\uFAD2\\uFAD3\\uFAD4\\uFAD5\\uFAD6\\uFAD7\\uFAD8\\uFAD9\\uFB1D\\uFB1F\\uFB20\\uFB21\\uFB22\\uFB23\\uFB24\\uFB25\\uFB26\\uFB27\\uFB28\\uFB2A\\uFB2B\\uFB2C\\uFB2D\\uFB2E\\uFB2F\\uFB30\\uFB31\\uFB32\\uFB33\\uFB34\\uFB35\\uFB36\\uFB38\\uFB39\\uFB3A\\uFB3B\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46\\uFB47\\uFB48\\uFB49\\uFB4A\\uFB4B\\uFB4C\\uFB4D\\uFB4E\\uFB4F\\uFB50\\uFB51\\uFB52\\uFB53\\uFB54\\uFB55\\uFB56\\uFB57\\uFB58\\uFB59\\uFB5A\\uFB5B\\uFB5C\\uFB5D\\uFB5E\\uFB5F\\uFB60\\uFB61\\uFB62\\uFB63\\uFB64\\uFB65\\uFB66\\uFB67\\uFB68\\uFB69\\uFB6A\\uFB6B\\uFB6C\\uFB6D\\uFB6E\\uFB6F\\uFB70\\uFB71\\uFB72\\uFB73\\uFB74\\uFB75\\uFB76\\uFB77\\uFB78\\uFB79\\uFB7A\\uFB7B\\uFB7C\\uFB7D\\uFB7E\\uFB7F\\uFB80\\uFB81\\uFB82\\uFB83\\uFB84\\uFB85\\uFB86\\uFB87\\uFB88\\uFB89\\uFB8A\\uFB8B\\uFB8C\\uFB8D\\uFB8E\\uFB8F\\uFB90\\uFB91\\uFB92\\uFB93\\uFB94\\uFB95\\uFB96\\uFB97\\uFB98\\uFB99\\uFB9A\\uFB9B\\uFB9C\\uFB9D\\uFB9E\\uFB9F\\uFBA0\\uFBA1\\uFBA2\\uFBA3\\uFBA4\\uFBA5\\uFBA6\\uFBA7\\uFBA8\\uFBA9\\uFBAA\\uFBAB\\uFBAC\\uFBAD\\uFBAE\\uFBAF\\uFBB0\\uFBB1\\uFBD3\\uFBD4\\uFBD5\\uFBD6\\uFBD7\\uFBD8\\uFBD9\\uFBDA\\uFBDB\\uFBDC\\uFBDD\\uFBDE\\uFBDF\\uFBE0\\uFBE1\\uFBE2\\uFBE3\\uFBE4\\uFBE5\\uFBE6\\uFBE7\\uFBE8\\uFBE9\\uFBEA\\uFBEB\\uFBEC\\uFBED\\uFBEE\\uFBEF\\uFBF0\\uFBF1\\uFBF2\\uFBF3\\uFBF4\\uFBF5\\uFBF6\\uFBF7\\uFBF8\\uFBF9\\uFBFA\\uFBFB\\uFBFC\\uFBFD\\uFBFE\\uFBFF\\uFC00\\uFC01\\uFC02\\uFC03\\uFC04\\uFC05\\uFC06\\uFC07\\uFC08\\uFC09\\uFC0A\\uFC0B\\uFC0C\\uFC0D\\uFC0E\\uFC0F\\uFC10\\uFC11\\uFC12\\uFC13\\uFC14\\uFC15\\uFC16\\uFC17\\uFC18\\uFC19\\uFC1A\\uFC1B\\uFC1C\\uFC1D\\uFC1E\\uFC1F\\uFC20\\uFC21\\uFC22\\uFC23\\uFC24\\uFC25\\uFC26\\uFC27\\uFC28\\uFC29\\uFC2A\\uFC2B\\uFC2C\\uFC2D\\uFC2E\\uFC2F\\uFC30\\uFC31\\uFC32\\uFC33\\uFC34\\uFC35\\uFC36\\uFC37\\uFC38\\uFC39\\uFC3A\\uFC3B\\uFC3C\\uFC3D\\uFC3E\\uFC3F\\uFC40\\uFC41\\uFC42\\uFC43\\uFC44\\uFC45\\uFC46\\uFC47\\uFC48\\uFC49\\uFC4A\\uFC4B\\uFC4C\\uFC4D\\uFC4E\\uFC4F\\uFC50\\uFC51\\uFC52\\uFC53\\uFC54\\uFC55\\uFC56\\uFC57\\uFC58\\uFC59\\uFC5A\\uFC5B\\uFC5C\\uFC5D\\uFC5E\\uFC5F\\uFC60\\uFC61\\uFC62\\uFC63\\uFC64\\uFC65\\uFC66\\uFC67\\uFC68\\uFC69\\uFC6A\\uFC6B\\uFC6C\\uFC6D\\uFC6E\\uFC6F\\uFC70\\uFC71\\uFC72\\uFC73\\uFC74\\uFC75\\uFC76\\uFC77\\uFC78\\uFC79\\uFC7A\\uFC7B\\uFC7C\\uFC7D\\uFC7E\\uFC7F\\uFC80\\uFC81\\uFC82\\uFC83\\uFC84\\uFC85\\uFC86\\uFC87\\uFC88\\uFC89\\uFC8A\\uFC8B\\uFC8C\\uFC8D\\uFC8E\\uFC8F\\uFC90\\uFC91\\uFC92\\uFC93\\uFC94\\uFC95\\uFC96\\uFC97\\uFC98\\uFC99\\uFC9A\\uFC9B\\uFC9C\\uFC9D\\uFC9E\\uFC9F\\uFCA0\\uFCA1\\uFCA2\\uFCA3\\uFCA4\\uFCA5\\uFCA6\\uFCA7\\uFCA8\\uFCA9\\uFCAA\\uFCAB\\uFCAC\\uFCAD\\uFCAE\\uFCAF\\uFCB0\\uFCB1\\uFCB2\\uFCB3\\uFCB4\\uFCB5\\uFCB6\\uFCB7\\uFCB8\\uFCB9\\uFCBA\\uFCBB\\uFCBC\\uFCBD\\uFCBE\\uFCBF\\uFCC0\\uFCC1\\uFCC2\\uFCC3\\uFCC4\\uFCC5\\uFCC6\\uFCC7\\uFCC8\\uFCC9\\uFCCA\\uFCCB\\uFCCC\\uFCCD\\uFCCE\\uFCCF\\uFCD0\\uFCD1\\uFCD2\\uFCD3\\uFCD4\\uFCD5\\uFCD6\\uFCD7\\uFCD8\\uFCD9\\uFCDA\\uFCDB\\uFCDC\\uFCDD\\uFCDE\\uFCDF\\uFCE0\\uFCE1\\uFCE2\\uFCE3\\uFCE4\\uFCE5\\uFCE6\\uFCE7\\uFCE8\\uFCE9\\uFCEA\\uFCEB\\uFCEC\\uFCED\\uFCEE\\uFCEF\\uFCF0\\uFCF1\\uFCF2\\uFCF3\\uFCF4\\uFCF5\\uFCF6\\uFCF7\\uFCF8\\uFCF9\\uFCFA\\uFCFB\\uFCFC\\uFCFD\\uFCFE\\uFCFF\\uFD00\\uFD01\\uFD02\\uFD03\\uFD04\\uFD05\\uFD06\\uFD07\\uFD08\\uFD09\\uFD0A\\uFD0B\\uFD0C\\uFD0D\\uFD0E\\uFD0F\\uFD10\\uFD11\\uFD12\\uFD13\\uFD14\\uFD15\\uFD16\\uFD17\\uFD18\\uFD19\\uFD1A\\uFD1B\\uFD1C\\uFD1D\\uFD1E\\uFD1F\\uFD20\\uFD21\\uFD22\\uFD23\\uFD24\\uFD25\\uFD26\\uFD27\\uFD28\\uFD29\\uFD2A\\uFD2B\\uFD2C\\uFD2D\\uFD2E\\uFD2F\\uFD30\\uFD31\\uFD32\\uFD33\\uFD34\\uFD35\\uFD36\\uFD37\\uFD38\\uFD39\\uFD3A\\uFD3B\\uFD3C\\uFD3D\\uFD50\\uFD51\\uFD52\\uFD53\\uFD54\\uFD55\\uFD56\\uFD57\\uFD58\\uFD59\\uFD5A\\uFD5B\\uFD5C\\uFD5D\\uFD5E\\uFD5F\\uFD60\\uFD61\\uFD62\\uFD63\\uFD64\\uFD65\\uFD66\\uFD67\\uFD68\\uFD69\\uFD6A\\uFD6B\\uFD6C\\uFD6D\\uFD6E\\uFD6F\\uFD70\\uFD71\\uFD72\\uFD73\\uFD74\\uFD75\\uFD76\\uFD77\\uFD78\\uFD79\\uFD7A\\uFD7B\\uFD7C\\uFD7D\\uFD7E\\uFD7F\\uFD80\\uFD81\\uFD82\\uFD83\\uFD84\\uFD85\\uFD86\\uFD87\\uFD88\\uFD89\\uFD8A\\uFD8B\\uFD8C\\uFD8D\\uFD8E\\uFD8F\\uFD92\\uFD93\\uFD94\\uFD95\\uFD96\\uFD97\\uFD98\\uFD99\\uFD9A\\uFD9B\\uFD9C\\uFD9D\\uFD9E\\uFD9F\\uFDA0\\uFDA1\\uFDA2\\uFDA3\\uFDA4\\uFDA5\\uFDA6\\uFDA7\\uFDA8\\uFDA9\\uFDAA\\uFDAB\\uFDAC\\uFDAD\\uFDAE\\uFDAF\\uFDB0\\uFDB1\\uFDB2\\uFDB3\\uFDB4\\uFDB5\\uFDB6\\uFDB7\\uFDB8\\uFDB9\\uFDBA\\uFDBB\\uFDBC\\uFDBD\\uFDBE\\uFDBF\\uFDC0\\uFDC1\\uFDC2\\uFDC3\\uFDC4\\uFDC5\\uFDC6\\uFDC7\\uFDF0\\uFDF1\\uFDF2\\uFDF3\\uFDF4\\uFDF5\\uFDF6\\uFDF7\\uFDF8\\uFDF9\\uFDFA\\uFDFB\\uFE70\\uFE71\\uFE72\\uFE73\\uFE74\\uFE76\\uFE77\\uFE78\\uFE79\\uFE7A\\uFE7B\\uFE7C\\uFE7D\\uFE7E\\uFE7F\\uFE80\\uFE81\\uFE82\\uFE83\\uFE84\\uFE85\\uFE86\\uFE87\\uFE88\\uFE89\\uFE8A\\uFE8B\\uFE8C\\uFE8D\\uFE8E\\uFE8F\\uFE90\\uFE91\\uFE92\\uFE93\\uFE94\\uFE95\\uFE96\\uFE97\\uFE98\\uFE99\\uFE9A\\uFE9B\\uFE9C\\uFE9D\\uFE9E\\uFE9F\\uFEA0\\uFEA1\\uFEA2\\uFEA3\\uFEA4\\uFEA5\\uFEA6\\uFEA7\\uFEA8\\uFEA9\\uFEAA\\uFEAB\\uFEAC\\uFEAD\\uFEAE\\uFEAF\\uFEB0\\uFEB1\\uFEB2\\uFEB3\\uFEB4\\uFEB5\\uFEB6\\uFEB7\\uFEB8\\uFEB9\\uFEBA\\uFEBB\\uFEBC\\uFEBD\\uFEBE\\uFEBF\\uFEC0\\uFEC1\\uFEC2\\uFEC3\\uFEC4\\uFEC5\\uFEC6\\uFEC7\\uFEC8\\uFEC9\\uFECA\\uFECB\\uFECC\\uFECD\\uFECE\\uFECF\\uFED0\\uFED1\\uFED2\\uFED3\\uFED4\\uFED5\\uFED6\\uFED7\\uFED8\\uFED9\\uFEDA\\uFEDB\\uFEDC\\uFEDD\\uFEDE\\uFEDF\\uFEE0\\uFEE1\\uFEE2\\uFEE3\\uFEE4\\uFEE5\\uFEE6\\uFEE7\\uFEE8\\uFEE9\\uFEEA\\uFEEB\\uFEEC\\uFEED\\uFEEE\\uFEEF\\uFEF0\\uFEF1\\uFEF2\\uFEF3\\uFEF4\\uFEF5\\uFEF6\\uFEF7\\uFEF8\\uFEF9\\uFEFA\\uFEFB\\uFEFC\\uFF66\\uFF67\\uFF68\\uFF69\\uFF6A\\uFF6B\\uFF6C\\uFF6D\\uFF6E\\uFF6F\\uFF71\\uFF72\\uFF73\\uFF74\\uFF75\\uFF76\\uFF77\\uFF78\\uFF79\\uFF7A\\uFF7B\\uFF7C\\uFF7D\\uFF7E\\uFF7F\\uFF80\\uFF81\\uFF82\\uFF83\\uFF84\\uFF85\\uFF86\\uFF87\\uFF88\\uFF89\\uFF8A\\uFF8B\\uFF8C\\uFF8D\\uFF8E\\uFF8F\\uFF90\\uFF91\\uFF92\\uFF93\\uFF94\\uFF95\\uFF96\\uFF97\\uFF98\\uFF99\\uFF9A\\uFF9B\\uFF9C\\uFF9D\\uFFA0\\uFFA1\\uFFA2\\uFFA3\\uFFA4\\uFFA5\\uFFA6\\uFFA7\\uFFA8\\uFFA9\\uFFAA\\uFFAB\\uFFAC\\uFFAD\\uFFAE\\uFFAF\\uFFB0\\uFFB1\\uFFB2\\uFFB3\\uFFB4\\uFFB5\\uFFB6\\uFFB7\\uFFB8\\uFFB9\\uFFBA\\uFFBB\\uFFBC\\uFFBD\\uFFBE\\uFFC2\\uFFC3\\uFFC4\\uFFC5\\uFFC6\\uFFC7\\uFFCA\\uFFCB\\uFFCC\\uFFCD\\uFFCE\\uFFCF\\uFFD2\\uFFD3\\uFFD4\\uFFD5\\uFFD6\\uFFD7\\uFFDA\\uFFDB\\uFFDC]" },
        peg$c80 = /^[\u01C5\u01C8\u01CB\u01F2\u1F88\u1F89\u1F8A\u1F8B\u1F8C\u1F8D\u1F8E\u1F8F\u1F98\u1F99\u1F9A\u1F9B\u1F9C\u1F9D\u1F9E\u1F9F\u1FA8\u1FA9\u1FAA\u1FAB\u1FAC\u1FAD\u1FAE\u1FAF\u1FBC\u1FCC\u1FFC]/,
        peg$c81 = { type: "class", value: "[\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88\\u1F89\\u1F8A\\u1F8B\\u1F8C\\u1F8D\\u1F8E\\u1F8F\\u1F98\\u1F99\\u1F9A\\u1F9B\\u1F9C\\u1F9D\\u1F9E\\u1F9F\\u1FA8\\u1FA9\\u1FAA\\u1FAB\\u1FAC\\u1FAD\\u1FAE\\u1FAF\\u1FBC\\u1FCC\\u1FFC]", description: "[\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88\\u1F89\\u1F8A\\u1F8B\\u1F8C\\u1F8D\\u1F8E\\u1F8F\\u1F98\\u1F99\\u1F9A\\u1F9B\\u1F9C\\u1F9D\\u1F9E\\u1F9F\\u1FA8\\u1FA9\\u1FAA\\u1FAB\\u1FAC\\u1FAD\\u1FAE\\u1FAF\\u1FBC\\u1FCC\\u1FFC]" },
        peg$c82 = /^[ABCDEFGHIJKLMNOPQRSTUVWXYZ\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189\u018A\u018B\u018E\u018F\u0190\u0191\u0193\u0194\u0196\u0197\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1\u01B2\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6\u01F7\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243\u0244\u0245\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388\u0389\u038A\u038C\u038E\u038F\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03CF\u03D2\u03D3\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD\u03FE\u03FF\u0400\u0401\u0402\u0403\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\u040D\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0531\u0532\u0533\u0534\u0535\u0536\u0537\u0538\u0539\u053A\u053B\u053C\u053D\u053E\u053F\u0540\u0541\u0542\u0543\u0544\u0545\u0546\u0547\u0548\u0549\u054A\u054B\u054C\u054D\u054E\u054F\u0550\u0551\u0552\u0553\u0554\u0555\u0556\u10A0\u10A1\u10A2\u10A3\u10A4\u10A5\u10A6\u10A7\u10A8\u10A9\u10AA\u10AB\u10AC\u10AD\u10AE\u10AF\u10B0\u10B1\u10B2\u10B3\u10B4\u10B5\u10B6\u10B7\u10B8\u10B9\u10BA\u10BB\u10BC\u10BD\u10BE\u10BF\u10C0\u10C1\u10C2\u10C3\u10C4\u10C5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08\u1F09\u1F0A\u1F0B\u1F0C\u1F0D\u1F0E\u1F0F\u1F18\u1F19\u1F1A\u1F1B\u1F1C\u1F1D\u1F28\u1F29\u1F2A\u1F2B\u1F2C\u1F2D\u1F2E\u1F2F\u1F38\u1F39\u1F3A\u1F3B\u1F3C\u1F3D\u1F3E\u1F3F\u1F48\u1F49\u1F4A\u1F4B\u1F4C\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68\u1F69\u1F6A\u1F6B\u1F6C\u1F6D\u1F6E\u1F6F\u1FB8\u1FB9\u1FBA\u1FBB\u1FC8\u1FC9\u1FCA\u1FCB\u1FD8\u1FD9\u1FDA\u1FDB\u1FE8\u1FE9\u1FEA\u1FEB\u1FEC\u1FF8\u1FF9\u1FFA\u1FFB\u2102\u2107\u210B\u210C\u210D\u2110\u2111\u2112\u2115\u2119\u211A\u211B\u211C\u211D\u2124\u2126\u2128\u212A\u212B\u212C\u212D\u2130\u2131\u2132\u2133\u213E\u213F\u2145\u2183\u2C00\u2C01\u2C02\u2C03\u2C04\u2C05\u2C06\u2C07\u2C08\u2C09\u2C0A\u2C0B\u2C0C\u2C0D\u2C0E\u2C0F\u2C10\u2C11\u2C12\u2C13\u2C14\u2C15\u2C16\u2C17\u2C18\u2C19\u2C1A\u2C1B\u2C1C\u2C1D\u2C1E\u2C1F\u2C20\u2C21\u2C22\u2C23\u2C24\u2C25\u2C26\u2C27\u2C28\u2C29\u2C2A\u2C2B\u2C2C\u2C2D\u2C2E\u2C60\u2C62\u2C63\u2C64\u2C67\u2C69\u2C6B\u2C6D\u2C6E\u2C6F\u2C72\u2C75\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A]/,
        peg$c83 = { type: "class", value: "[ABCDEFGHIJKLMNOPQRSTUVWXYZ\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\xC6\\xC7\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\\xD2\\xD3\\xD4\\xD5\\xD6\\xD8\\xD9\\xDA\\xDB\\xDC\\xDD\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189\\u018A\\u018B\\u018E\\u018F\\u0190\\u0191\\u0193\\u0194\\u0196\\u0197\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1\\u01B2\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6\\u01F7\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243\\u0244\\u0245\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388\\u0389\\u038A\\u038C\\u038E\\u038F\\u0391\\u0392\\u0393\\u0394\\u0395\\u0396\\u0397\\u0398\\u0399\\u039A\\u039B\\u039C\\u039D\\u039E\\u039F\\u03A0\\u03A1\\u03A3\\u03A4\\u03A5\\u03A6\\u03A7\\u03A8\\u03A9\\u03AA\\u03AB\\u03CF\\u03D2\\u03D3\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041A\\u041B\\u041C\\u041D\\u041E\\u041F\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042A\\u042B\\u042C\\u042D\\u042E\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0531\\u0532\\u0533\\u0534\\u0535\\u0536\\u0537\\u0538\\u0539\\u053A\\u053B\\u053C\\u053D\\u053E\\u053F\\u0540\\u0541\\u0542\\u0543\\u0544\\u0545\\u0546\\u0547\\u0548\\u0549\\u054A\\u054B\\u054C\\u054D\\u054E\\u054F\\u0550\\u0551\\u0552\\u0553\\u0554\\u0555\\u0556\\u10A0\\u10A1\\u10A2\\u10A3\\u10A4\\u10A5\\u10A6\\u10A7\\u10A8\\u10A9\\u10AA\\u10AB\\u10AC\\u10AD\\u10AE\\u10AF\\u10B0\\u10B1\\u10B2\\u10B3\\u10B4\\u10B5\\u10B6\\u10B7\\u10B8\\u10B9\\u10BA\\u10BB\\u10BC\\u10BD\\u10BE\\u10BF\\u10C0\\u10C1\\u10C2\\u10C3\\u10C4\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08\\u1F09\\u1F0A\\u1F0B\\u1F0C\\u1F0D\\u1F0E\\u1F0F\\u1F18\\u1F19\\u1F1A\\u1F1B\\u1F1C\\u1F1D\\u1F28\\u1F29\\u1F2A\\u1F2B\\u1F2C\\u1F2D\\u1F2E\\u1F2F\\u1F38\\u1F39\\u1F3A\\u1F3B\\u1F3C\\u1F3D\\u1F3E\\u1F3F\\u1F48\\u1F49\\u1F4A\\u1F4B\\u1F4C\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68\\u1F69\\u1F6A\\u1F6B\\u1F6C\\u1F6D\\u1F6E\\u1F6F\\u1FB8\\u1FB9\\u1FBA\\u1FBB\\u1FC8\\u1FC9\\u1FCA\\u1FCB\\u1FD8\\u1FD9\\u1FDA\\u1FDB\\u1FE8\\u1FE9\\u1FEA\\u1FEB\\u1FEC\\u1FF8\\u1FF9\\u1FFA\\u1FFB\\u2102\\u2107\\u210B\\u210C\\u210D\\u2110\\u2111\\u2112\\u2115\\u2119\\u211A\\u211B\\u211C\\u211D\\u2124\\u2126\\u2128\\u212A\\u212B\\u212C\\u212D\\u2130\\u2131\\u2132\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00\\u2C01\\u2C02\\u2C03\\u2C04\\u2C05\\u2C06\\u2C07\\u2C08\\u2C09\\u2C0A\\u2C0B\\u2C0C\\u2C0D\\u2C0E\\u2C0F\\u2C10\\u2C11\\u2C12\\u2C13\\u2C14\\u2C15\\u2C16\\u2C17\\u2C18\\u2C19\\u2C1A\\u2C1B\\u2C1C\\u2C1D\\u2C1E\\u2C1F\\u2C20\\u2C21\\u2C22\\u2C23\\u2C24\\u2C25\\u2C26\\u2C27\\u2C28\\u2C29\\u2C2A\\u2C2B\\u2C2C\\u2C2D\\u2C2E\\u2C60\\u2C62\\u2C63\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D\\u2C6E\\u2C6F\\u2C72\\u2C75\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uFF21\\uFF22\\uFF23\\uFF24\\uFF25\\uFF26\\uFF27\\uFF28\\uFF29\\uFF2A\\uFF2B\\uFF2C\\uFF2D\\uFF2E\\uFF2F\\uFF30\\uFF31\\uFF32\\uFF33\\uFF34\\uFF35\\uFF36\\uFF37\\uFF38\\uFF39\\uFF3A]", description: "[ABCDEFGHIJKLMNOPQRSTUVWXYZ\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\xC6\\xC7\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\\xD2\\xD3\\xD4\\xD5\\xD6\\xD8\\xD9\\xDA\\xDB\\xDC\\xDD\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189\\u018A\\u018B\\u018E\\u018F\\u0190\\u0191\\u0193\\u0194\\u0196\\u0197\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1\\u01B2\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6\\u01F7\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243\\u0244\\u0245\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388\\u0389\\u038A\\u038C\\u038E\\u038F\\u0391\\u0392\\u0393\\u0394\\u0395\\u0396\\u0397\\u0398\\u0399\\u039A\\u039B\\u039C\\u039D\\u039E\\u039F\\u03A0\\u03A1\\u03A3\\u03A4\\u03A5\\u03A6\\u03A7\\u03A8\\u03A9\\u03AA\\u03AB\\u03CF\\u03D2\\u03D3\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041A\\u041B\\u041C\\u041D\\u041E\\u041F\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042A\\u042B\\u042C\\u042D\\u042E\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0531\\u0532\\u0533\\u0534\\u0535\\u0536\\u0537\\u0538\\u0539\\u053A\\u053B\\u053C\\u053D\\u053E\\u053F\\u0540\\u0541\\u0542\\u0543\\u0544\\u0545\\u0546\\u0547\\u0548\\u0549\\u054A\\u054B\\u054C\\u054D\\u054E\\u054F\\u0550\\u0551\\u0552\\u0553\\u0554\\u0555\\u0556\\u10A0\\u10A1\\u10A2\\u10A3\\u10A4\\u10A5\\u10A6\\u10A7\\u10A8\\u10A9\\u10AA\\u10AB\\u10AC\\u10AD\\u10AE\\u10AF\\u10B0\\u10B1\\u10B2\\u10B3\\u10B4\\u10B5\\u10B6\\u10B7\\u10B8\\u10B9\\u10BA\\u10BB\\u10BC\\u10BD\\u10BE\\u10BF\\u10C0\\u10C1\\u10C2\\u10C3\\u10C4\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08\\u1F09\\u1F0A\\u1F0B\\u1F0C\\u1F0D\\u1F0E\\u1F0F\\u1F18\\u1F19\\u1F1A\\u1F1B\\u1F1C\\u1F1D\\u1F28\\u1F29\\u1F2A\\u1F2B\\u1F2C\\u1F2D\\u1F2E\\u1F2F\\u1F38\\u1F39\\u1F3A\\u1F3B\\u1F3C\\u1F3D\\u1F3E\\u1F3F\\u1F48\\u1F49\\u1F4A\\u1F4B\\u1F4C\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68\\u1F69\\u1F6A\\u1F6B\\u1F6C\\u1F6D\\u1F6E\\u1F6F\\u1FB8\\u1FB9\\u1FBA\\u1FBB\\u1FC8\\u1FC9\\u1FCA\\u1FCB\\u1FD8\\u1FD9\\u1FDA\\u1FDB\\u1FE8\\u1FE9\\u1FEA\\u1FEB\\u1FEC\\u1FF8\\u1FF9\\u1FFA\\u1FFB\\u2102\\u2107\\u210B\\u210C\\u210D\\u2110\\u2111\\u2112\\u2115\\u2119\\u211A\\u211B\\u211C\\u211D\\u2124\\u2126\\u2128\\u212A\\u212B\\u212C\\u212D\\u2130\\u2131\\u2132\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00\\u2C01\\u2C02\\u2C03\\u2C04\\u2C05\\u2C06\\u2C07\\u2C08\\u2C09\\u2C0A\\u2C0B\\u2C0C\\u2C0D\\u2C0E\\u2C0F\\u2C10\\u2C11\\u2C12\\u2C13\\u2C14\\u2C15\\u2C16\\u2C17\\u2C18\\u2C19\\u2C1A\\u2C1B\\u2C1C\\u2C1D\\u2C1E\\u2C1F\\u2C20\\u2C21\\u2C22\\u2C23\\u2C24\\u2C25\\u2C26\\u2C27\\u2C28\\u2C29\\u2C2A\\u2C2B\\u2C2C\\u2C2D\\u2C2E\\u2C60\\u2C62\\u2C63\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D\\u2C6E\\u2C6F\\u2C72\\u2C75\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uFF21\\uFF22\\uFF23\\uFF24\\uFF25\\uFF26\\uFF27\\uFF28\\uFF29\\uFF2A\\uFF2B\\uFF2C\\uFF2D\\uFF2E\\uFF2F\\uFF30\\uFF31\\uFF32\\uFF33\\uFF34\\uFF35\\uFF36\\uFF37\\uFF38\\uFF39\\uFF3A]" },
        peg$c84 = /^[\u0903\u093E\u093F\u0940\u0949\u094A\u094B\u094C\u0982\u0983\u09BE\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E\u0A3F\u0A40\u0A83\u0ABE\u0ABF\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6\u0BC7\u0BC8\u0BCA\u0BCB\u0BCC\u0BD7\u0C01\u0C02\u0C03\u0C41\u0C42\u0C43\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC2\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E\u0D3F\u0D40\u0D46\u0D47\u0D48\u0D4A\u0D4B\u0D4C\u0D57\u0D82\u0D83\u0DCF\u0DD0\u0DD1\u0DD8\u0DD9\u0DDA\u0DDB\u0DDC\u0DDD\u0DDE\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062\u1063\u1064\u1067\u1068\u1069\u106A\u106B\u106C\u106D\u1083\u1084\u1087\u1088\u1089\u108A\u108B\u108C\u108F\u17B6\u17BE\u17BF\u17C0\u17C1\u17C2\u17C3\u17C4\u17C5\u17C7\u17C8\u1923\u1924\u1925\u1926\u1929\u192A\u192B\u1930\u1931\u1933\u1934\u1935\u1936\u1937\u1938\u19B0\u19B1\u19B2\u19B3\u19B4\u19B5\u19B6\u19B7\u19B8\u19B9\u19BA\u19BB\u19BC\u19BD\u19BE\u19BF\u19C0\u19C8\u19C9\u1A19\u1A1A\u1A1B\u1B04\u1B35\u1B3B\u1B3D\u1B3E\u1B3F\u1B40\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1C24\u1C25\u1C26\u1C27\u1C28\u1C29\u1C2A\u1C2B\u1C34\u1C35\uA823\uA824\uA827\uA880\uA881\uA8B4\uA8B5\uA8B6\uA8B7\uA8B8\uA8B9\uA8BA\uA8BB\uA8BC\uA8BD\uA8BE\uA8BF\uA8C0\uA8C1\uA8C2\uA8C3\uA952\uA953\uAA2F\uAA30\uAA33\uAA34\uAA4D]/,
        peg$c85 = { type: "class", value: "[\\u0903\\u093E\\u093F\\u0940\\u0949\\u094A\\u094B\\u094C\\u0982\\u0983\\u09BE\\u09BF\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E\\u0A3F\\u0A40\\u0A83\\u0ABE\\u0ABF\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6\\u0BC7\\u0BC8\\u0BCA\\u0BCB\\u0BCC\\u0BD7\\u0C01\\u0C02\\u0C03\\u0C41\\u0C42\\u0C43\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0\\u0CC1\\u0CC2\\u0CC3\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E\\u0D3F\\u0D40\\u0D46\\u0D47\\u0D48\\u0D4A\\u0D4B\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF\\u0DD0\\u0DD1\\u0DD8\\u0DD9\\u0DDA\\u0DDB\\u0DDC\\u0DDD\\u0DDE\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062\\u1063\\u1064\\u1067\\u1068\\u1069\\u106A\\u106B\\u106C\\u106D\\u1083\\u1084\\u1087\\u1088\\u1089\\u108A\\u108B\\u108C\\u108F\\u17B6\\u17BE\\u17BF\\u17C0\\u17C1\\u17C2\\u17C3\\u17C4\\u17C5\\u17C7\\u17C8\\u1923\\u1924\\u1925\\u1926\\u1929\\u192A\\u192B\\u1930\\u1931\\u1933\\u1934\\u1935\\u1936\\u1937\\u1938\\u19B0\\u19B1\\u19B2\\u19B3\\u19B4\\u19B5\\u19B6\\u19B7\\u19B8\\u19B9\\u19BA\\u19BB\\u19BC\\u19BD\\u19BE\\u19BF\\u19C0\\u19C8\\u19C9\\u1A19\\u1A1A\\u1A1B\\u1B04\\u1B35\\u1B3B\\u1B3D\\u1B3E\\u1B3F\\u1B40\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1C24\\u1C25\\u1C26\\u1C27\\u1C28\\u1C29\\u1C2A\\u1C2B\\u1C34\\u1C35\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4\\uA8B5\\uA8B6\\uA8B7\\uA8B8\\uA8B9\\uA8BA\\uA8BB\\uA8BC\\uA8BD\\uA8BE\\uA8BF\\uA8C0\\uA8C1\\uA8C2\\uA8C3\\uA952\\uA953\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D]", description: "[\\u0903\\u093E\\u093F\\u0940\\u0949\\u094A\\u094B\\u094C\\u0982\\u0983\\u09BE\\u09BF\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E\\u0A3F\\u0A40\\u0A83\\u0ABE\\u0ABF\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6\\u0BC7\\u0BC8\\u0BCA\\u0BCB\\u0BCC\\u0BD7\\u0C01\\u0C02\\u0C03\\u0C41\\u0C42\\u0C43\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0\\u0CC1\\u0CC2\\u0CC3\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E\\u0D3F\\u0D40\\u0D46\\u0D47\\u0D48\\u0D4A\\u0D4B\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF\\u0DD0\\u0DD1\\u0DD8\\u0DD9\\u0DDA\\u0DDB\\u0DDC\\u0DDD\\u0DDE\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062\\u1063\\u1064\\u1067\\u1068\\u1069\\u106A\\u106B\\u106C\\u106D\\u1083\\u1084\\u1087\\u1088\\u1089\\u108A\\u108B\\u108C\\u108F\\u17B6\\u17BE\\u17BF\\u17C0\\u17C1\\u17C2\\u17C3\\u17C4\\u17C5\\u17C7\\u17C8\\u1923\\u1924\\u1925\\u1926\\u1929\\u192A\\u192B\\u1930\\u1931\\u1933\\u1934\\u1935\\u1936\\u1937\\u1938\\u19B0\\u19B1\\u19B2\\u19B3\\u19B4\\u19B5\\u19B6\\u19B7\\u19B8\\u19B9\\u19BA\\u19BB\\u19BC\\u19BD\\u19BE\\u19BF\\u19C0\\u19C8\\u19C9\\u1A19\\u1A1A\\u1A1B\\u1B04\\u1B35\\u1B3B\\u1B3D\\u1B3E\\u1B3F\\u1B40\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1C24\\u1C25\\u1C26\\u1C27\\u1C28\\u1C29\\u1C2A\\u1C2B\\u1C34\\u1C35\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4\\uA8B5\\uA8B6\\uA8B7\\uA8B8\\uA8B9\\uA8BA\\uA8BB\\uA8BC\\uA8BD\\uA8BE\\uA8BF\\uA8C0\\uA8C1\\uA8C2\\uA8C3\\uA952\\uA953\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D]" },
        peg$c86 = /^[\u0300\u0301\u0302\u0303\u0304\u0305\u0306\u0307\u0308\u0309\u030A\u030B\u030C\u030D\u030E\u030F\u0310\u0311\u0312\u0313\u0314\u0315\u0316\u0317\u0318\u0319\u031A\u031B\u031C\u031D\u031E\u031F\u0320\u0321\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u032A\u032B\u032C\u032D\u032E\u032F\u0330\u0331\u0332\u0333\u0334\u0335\u0336\u0337\u0338\u0339\u033A\u033B\u033C\u033D\u033E\u033F\u0340\u0341\u0342\u0343\u0344\u0345\u0346\u0347\u0348\u0349\u034A\u034B\u034C\u034D\u034E\u034F\u0350\u0351\u0352\u0353\u0354\u0355\u0356\u0357\u0358\u0359\u035A\u035B\u035C\u035D\u035E\u035F\u0360\u0361\u0362\u0363\u0364\u0365\u0366\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u0483\u0484\u0485\u0486\u0487\u0591\u0592\u0593\u0594\u0595\u0596\u0597\u0598\u0599\u059A\u059B\u059C\u059D\u059E\u059F\u05A0\u05A1\u05A2\u05A3\u05A4\u05A5\u05A6\u05A7\u05A8\u05A9\u05AA\u05AB\u05AC\u05AD\u05AE\u05AF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\u05BA\u05BB\u05BC\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610\u0611\u0612\u0613\u0614\u0615\u0616\u0617\u0618\u0619\u061A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\u0653\u0654\u0655\u0656\u0657\u0658\u0659\u065A\u065B\u065C\u065D\u065E\u0670\u06D6\u06D7\u06D8\u06D9\u06DA\u06DB\u06DC\u06DF\u06E0\u06E1\u06E2\u06E3\u06E4\u06E7\u06E8\u06EA\u06EB\u06EC\u06ED\u0711\u0730\u0731\u0732\u0733\u0734\u0735\u0736\u0737\u0738\u0739\u073A\u073B\u073C\u073D\u073E\u073F\u0740\u0741\u0742\u0743\u0744\u0745\u0746\u0747\u0748\u0749\u074A\u07A6\u07A7\u07A8\u07A9\u07AA\u07AB\u07AC\u07AD\u07AE\u07AF\u07B0\u07EB\u07EC\u07ED\u07EE\u07EF\u07F0\u07F1\u07F2\u07F3\u0901\u0902\u093C\u0941\u0942\u0943\u0944\u0945\u0946\u0947\u0948\u094D\u0951\u0952\u0953\u0954\u0962\u0963\u0981\u09BC\u09C1\u09C2\u09C3\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1\u0AC2\u0AC3\u0AC4\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41\u0B42\u0B43\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C3E\u0C3F\u0C40\u0C46\u0C47\u0C48\u0C4A\u0C4B\u0C4C\u0C4D\u0C55\u0C56\u0C62\u0C63\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D41\u0D42\u0D43\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2\u0DD3\u0DD4\u0DD6\u0E31\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0EB1\u0EB4\u0EB5\u0EB6\u0EB7\u0EB8\u0EB9\u0EBB\u0EBC\u0EC8\u0EC9\u0ECA\u0ECB\u0ECC\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71\u0F72\u0F73\u0F74\u0F75\u0F76\u0F77\u0F78\u0F79\u0F7A\u0F7B\u0F7C\u0F7D\u0F7E\u0F80\u0F81\u0F82\u0F83\u0F84\u0F86\u0F87\u0F90\u0F91\u0F92\u0F93\u0F94\u0F95\u0F96\u0F97\u0F99\u0F9A\u0F9B\u0F9C\u0F9D\u0F9E\u0F9F\u0FA0\u0FA1\u0FA2\u0FA3\u0FA4\u0FA5\u0FA6\u0FA7\u0FA8\u0FA9\u0FAA\u0FAB\u0FAC\u0FAD\u0FAE\u0FAF\u0FB0\u0FB1\u0FB2\u0FB3\u0FB4\u0FB5\u0FB6\u0FB7\u0FB8\u0FB9\u0FBA\u0FBB\u0FBC\u0FC6\u102D\u102E\u102F\u1030\u1032\u1033\u1034\u1035\u1036\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E\u105F\u1060\u1071\u1072\u1073\u1074\u1082\u1085\u1086\u108D\u135F\u1712\u1713\u1714\u1732\u1733\u1734\u1752\u1753\u1772\u1773\u17B7\u17B8\u17B9\u17BA\u17BB\u17BC\u17BD\u17C6\u17C9\u17CA\u17CB\u17CC\u17CD\u17CE\u17CF\u17D0\u17D1\u17D2\u17D3\u17DD\u180B\u180C\u180D\u18A9\u1920\u1921\u1922\u1927\u1928\u1932\u1939\u193A\u193B\u1A17\u1A18\u1B00\u1B01\u1B02\u1B03\u1B34\u1B36\u1B37\u1B38\u1B39\u1B3A\u1B3C\u1B42\u1B6B\u1B6C\u1B6D\u1B6E\u1B6F\u1B70\u1B71\u1B72\u1B73\u1B80\u1B81\u1BA2\u1BA3\u1BA4\u1BA5\u1BA8\u1BA9\u1C2C\u1C2D\u1C2E\u1C2F\u1C30\u1C31\u1C32\u1C33\u1C36\u1C37\u1DC0\u1DC1\u1DC2\u1DC3\u1DC4\u1DC5\u1DC6\u1DC7\u1DC8\u1DC9\u1DCA\u1DCB\u1DCC\u1DCD\u1DCE\u1DCF\u1DD0\u1DD1\u1DD2\u1DD3\u1DD4\u1DD5\u1DD6\u1DD7\u1DD8\u1DD9\u1DDA\u1DDB\u1DDC\u1DDD\u1DDE\u1DDF\u1DE0\u1DE1\u1DE2\u1DE3\u1DE4\u1DE5\u1DE6\u1DFE\u1DFF\u20D0\u20D1\u20D2\u20D3\u20D4\u20D5\u20D6\u20D7\u20D8\u20D9\u20DA\u20DB\u20DC\u20E1\u20E5\u20E6\u20E7\u20E8\u20E9\u20EA\u20EB\u20EC\u20ED\u20EE\u20EF\u20F0\u2DE0\u2DE1\u2DE2\u2DE3\u2DE4\u2DE5\u2DE6\u2DE7\u2DE8\u2DE9\u2DEA\u2DEB\u2DEC\u2DED\u2DEE\u2DEF\u2DF0\u2DF1\u2DF2\u2DF3\u2DF4\u2DF5\u2DF6\u2DF7\u2DF8\u2DF9\u2DFA\u2DFB\u2DFC\u2DFD\u2DFE\u2DFF\u302A\u302B\u302C\u302D\u302E\u302F\u3099\u309A\uA66F\uA67C\uA67D\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA926\uA927\uA928\uA929\uA92A\uA92B\uA92C\uA92D\uA947\uA948\uA949\uA94A\uA94B\uA94C\uA94D\uA94E\uA94F\uA950\uA951\uAA29\uAA2A\uAA2B\uAA2C\uAA2D\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uFB1E\uFE00\uFE01\uFE02\uFE03\uFE04\uFE05\uFE06\uFE07\uFE08\uFE09\uFE0A\uFE0B\uFE0C\uFE0D\uFE0E\uFE0F\uFE20\uFE21\uFE22\uFE23\uFE24\uFE25\uFE26]/,
        peg$c87 = { type: "class", value: "[\\u0300\\u0301\\u0302\\u0303\\u0304\\u0305\\u0306\\u0307\\u0308\\u0309\\u030A\\u030B\\u030C\\u030D\\u030E\\u030F\\u0310\\u0311\\u0312\\u0313\\u0314\\u0315\\u0316\\u0317\\u0318\\u0319\\u031A\\u031B\\u031C\\u031D\\u031E\\u031F\\u0320\\u0321\\u0322\\u0323\\u0324\\u0325\\u0326\\u0327\\u0328\\u0329\\u032A\\u032B\\u032C\\u032D\\u032E\\u032F\\u0330\\u0331\\u0332\\u0333\\u0334\\u0335\\u0336\\u0337\\u0338\\u0339\\u033A\\u033B\\u033C\\u033D\\u033E\\u033F\\u0340\\u0341\\u0342\\u0343\\u0344\\u0345\\u0346\\u0347\\u0348\\u0349\\u034A\\u034B\\u034C\\u034D\\u034E\\u034F\\u0350\\u0351\\u0352\\u0353\\u0354\\u0355\\u0356\\u0357\\u0358\\u0359\\u035A\\u035B\\u035C\\u035D\\u035E\\u035F\\u0360\\u0361\\u0362\\u0363\\u0364\\u0365\\u0366\\u0367\\u0368\\u0369\\u036A\\u036B\\u036C\\u036D\\u036E\\u036F\\u0483\\u0484\\u0485\\u0486\\u0487\\u0591\\u0592\\u0593\\u0594\\u0595\\u0596\\u0597\\u0598\\u0599\\u059A\\u059B\\u059C\\u059D\\u059E\\u059F\\u05A0\\u05A1\\u05A2\\u05A3\\u05A4\\u05A5\\u05A6\\u05A7\\u05A8\\u05A9\\u05AA\\u05AB\\u05AC\\u05AD\\u05AE\\u05AF\\u05B0\\u05B1\\u05B2\\u05B3\\u05B4\\u05B5\\u05B6\\u05B7\\u05B8\\u05B9\\u05BA\\u05BB\\u05BC\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610\\u0611\\u0612\\u0613\\u0614\\u0615\\u0616\\u0617\\u0618\\u0619\\u061A\\u064B\\u064C\\u064D\\u064E\\u064F\\u0650\\u0651\\u0652\\u0653\\u0654\\u0655\\u0656\\u0657\\u0658\\u0659\\u065A\\u065B\\u065C\\u065D\\u065E\\u0670\\u06D6\\u06D7\\u06D8\\u06D9\\u06DA\\u06DB\\u06DC\\u06DF\\u06E0\\u06E1\\u06E2\\u06E3\\u06E4\\u06E7\\u06E8\\u06EA\\u06EB\\u06EC\\u06ED\\u0711\\u0730\\u0731\\u0732\\u0733\\u0734\\u0735\\u0736\\u0737\\u0738\\u0739\\u073A\\u073B\\u073C\\u073D\\u073E\\u073F\\u0740\\u0741\\u0742\\u0743\\u0744\\u0745\\u0746\\u0747\\u0748\\u0749\\u074A\\u07A6\\u07A7\\u07A8\\u07A9\\u07AA\\u07AB\\u07AC\\u07AD\\u07AE\\u07AF\\u07B0\\u07EB\\u07EC\\u07ED\\u07EE\\u07EF\\u07F0\\u07F1\\u07F2\\u07F3\\u0901\\u0902\\u093C\\u0941\\u0942\\u0943\\u0944\\u0945\\u0946\\u0947\\u0948\\u094D\\u0951\\u0952\\u0953\\u0954\\u0962\\u0963\\u0981\\u09BC\\u09C1\\u09C2\\u09C3\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1\\u0AC2\\u0AC3\\u0AC4\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41\\u0B42\\u0B43\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E\\u0C3F\\u0C40\\u0C46\\u0C47\\u0C48\\u0C4A\\u0C4B\\u0C4C\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41\\u0D42\\u0D43\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2\\u0DD3\\u0DD4\\u0DD6\\u0E31\\u0E34\\u0E35\\u0E36\\u0E37\\u0E38\\u0E39\\u0E3A\\u0E47\\u0E48\\u0E49\\u0E4A\\u0E4B\\u0E4C\\u0E4D\\u0E4E\\u0EB1\\u0EB4\\u0EB5\\u0EB6\\u0EB7\\u0EB8\\u0EB9\\u0EBB\\u0EBC\\u0EC8\\u0EC9\\u0ECA\\u0ECB\\u0ECC\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71\\u0F72\\u0F73\\u0F74\\u0F75\\u0F76\\u0F77\\u0F78\\u0F79\\u0F7A\\u0F7B\\u0F7C\\u0F7D\\u0F7E\\u0F80\\u0F81\\u0F82\\u0F83\\u0F84\\u0F86\\u0F87\\u0F90\\u0F91\\u0F92\\u0F93\\u0F94\\u0F95\\u0F96\\u0F97\\u0F99\\u0F9A\\u0F9B\\u0F9C\\u0F9D\\u0F9E\\u0F9F\\u0FA0\\u0FA1\\u0FA2\\u0FA3\\u0FA4\\u0FA5\\u0FA6\\u0FA7\\u0FA8\\u0FA9\\u0FAA\\u0FAB\\u0FAC\\u0FAD\\u0FAE\\u0FAF\\u0FB0\\u0FB1\\u0FB2\\u0FB3\\u0FB4\\u0FB5\\u0FB6\\u0FB7\\u0FB8\\u0FB9\\u0FBA\\u0FBB\\u0FBC\\u0FC6\\u102D\\u102E\\u102F\\u1030\\u1032\\u1033\\u1034\\u1035\\u1036\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E\\u105F\\u1060\\u1071\\u1072\\u1073\\u1074\\u1082\\u1085\\u1086\\u108D\\u135F\\u1712\\u1713\\u1714\\u1732\\u1733\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7\\u17B8\\u17B9\\u17BA\\u17BB\\u17BC\\u17BD\\u17C6\\u17C9\\u17CA\\u17CB\\u17CC\\u17CD\\u17CE\\u17CF\\u17D0\\u17D1\\u17D2\\u17D3\\u17DD\\u180B\\u180C\\u180D\\u18A9\\u1920\\u1921\\u1922\\u1927\\u1928\\u1932\\u1939\\u193A\\u193B\\u1A17\\u1A18\\u1B00\\u1B01\\u1B02\\u1B03\\u1B34\\u1B36\\u1B37\\u1B38\\u1B39\\u1B3A\\u1B3C\\u1B42\\u1B6B\\u1B6C\\u1B6D\\u1B6E\\u1B6F\\u1B70\\u1B71\\u1B72\\u1B73\\u1B80\\u1B81\\u1BA2\\u1BA3\\u1BA4\\u1BA5\\u1BA8\\u1BA9\\u1C2C\\u1C2D\\u1C2E\\u1C2F\\u1C30\\u1C31\\u1C32\\u1C33\\u1C36\\u1C37\\u1DC0\\u1DC1\\u1DC2\\u1DC3\\u1DC4\\u1DC5\\u1DC6\\u1DC7\\u1DC8\\u1DC9\\u1DCA\\u1DCB\\u1DCC\\u1DCD\\u1DCE\\u1DCF\\u1DD0\\u1DD1\\u1DD2\\u1DD3\\u1DD4\\u1DD5\\u1DD6\\u1DD7\\u1DD8\\u1DD9\\u1DDA\\u1DDB\\u1DDC\\u1DDD\\u1DDE\\u1DDF\\u1DE0\\u1DE1\\u1DE2\\u1DE3\\u1DE4\\u1DE5\\u1DE6\\u1DFE\\u1DFF\\u20D0\\u20D1\\u20D2\\u20D3\\u20D4\\u20D5\\u20D6\\u20D7\\u20D8\\u20D9\\u20DA\\u20DB\\u20DC\\u20E1\\u20E5\\u20E6\\u20E7\\u20E8\\u20E9\\u20EA\\u20EB\\u20EC\\u20ED\\u20EE\\u20EF\\u20F0\\u2DE0\\u2DE1\\u2DE2\\u2DE3\\u2DE4\\u2DE5\\u2DE6\\u2DE7\\u2DE8\\u2DE9\\u2DEA\\u2DEB\\u2DEC\\u2DED\\u2DEE\\u2DEF\\u2DF0\\u2DF1\\u2DF2\\u2DF3\\u2DF4\\u2DF5\\u2DF6\\u2DF7\\u2DF8\\u2DF9\\u2DFA\\u2DFB\\u2DFC\\u2DFD\\u2DFE\\u2DFF\\u302A\\u302B\\u302C\\u302D\\u302E\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA926\\uA927\\uA928\\uA929\\uA92A\\uA92B\\uA92C\\uA92D\\uA947\\uA948\\uA949\\uA94A\\uA94B\\uA94C\\uA94D\\uA94E\\uA94F\\uA950\\uA951\\uAA29\\uAA2A\\uAA2B\\uAA2C\\uAA2D\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uFB1E\\uFE00\\uFE01\\uFE02\\uFE03\\uFE04\\uFE05\\uFE06\\uFE07\\uFE08\\uFE09\\uFE0A\\uFE0B\\uFE0C\\uFE0D\\uFE0E\\uFE0F\\uFE20\\uFE21\\uFE22\\uFE23\\uFE24\\uFE25\\uFE26]", description: "[\\u0300\\u0301\\u0302\\u0303\\u0304\\u0305\\u0306\\u0307\\u0308\\u0309\\u030A\\u030B\\u030C\\u030D\\u030E\\u030F\\u0310\\u0311\\u0312\\u0313\\u0314\\u0315\\u0316\\u0317\\u0318\\u0319\\u031A\\u031B\\u031C\\u031D\\u031E\\u031F\\u0320\\u0321\\u0322\\u0323\\u0324\\u0325\\u0326\\u0327\\u0328\\u0329\\u032A\\u032B\\u032C\\u032D\\u032E\\u032F\\u0330\\u0331\\u0332\\u0333\\u0334\\u0335\\u0336\\u0337\\u0338\\u0339\\u033A\\u033B\\u033C\\u033D\\u033E\\u033F\\u0340\\u0341\\u0342\\u0343\\u0344\\u0345\\u0346\\u0347\\u0348\\u0349\\u034A\\u034B\\u034C\\u034D\\u034E\\u034F\\u0350\\u0351\\u0352\\u0353\\u0354\\u0355\\u0356\\u0357\\u0358\\u0359\\u035A\\u035B\\u035C\\u035D\\u035E\\u035F\\u0360\\u0361\\u0362\\u0363\\u0364\\u0365\\u0366\\u0367\\u0368\\u0369\\u036A\\u036B\\u036C\\u036D\\u036E\\u036F\\u0483\\u0484\\u0485\\u0486\\u0487\\u0591\\u0592\\u0593\\u0594\\u0595\\u0596\\u0597\\u0598\\u0599\\u059A\\u059B\\u059C\\u059D\\u059E\\u059F\\u05A0\\u05A1\\u05A2\\u05A3\\u05A4\\u05A5\\u05A6\\u05A7\\u05A8\\u05A9\\u05AA\\u05AB\\u05AC\\u05AD\\u05AE\\u05AF\\u05B0\\u05B1\\u05B2\\u05B3\\u05B4\\u05B5\\u05B6\\u05B7\\u05B8\\u05B9\\u05BA\\u05BB\\u05BC\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610\\u0611\\u0612\\u0613\\u0614\\u0615\\u0616\\u0617\\u0618\\u0619\\u061A\\u064B\\u064C\\u064D\\u064E\\u064F\\u0650\\u0651\\u0652\\u0653\\u0654\\u0655\\u0656\\u0657\\u0658\\u0659\\u065A\\u065B\\u065C\\u065D\\u065E\\u0670\\u06D6\\u06D7\\u06D8\\u06D9\\u06DA\\u06DB\\u06DC\\u06DF\\u06E0\\u06E1\\u06E2\\u06E3\\u06E4\\u06E7\\u06E8\\u06EA\\u06EB\\u06EC\\u06ED\\u0711\\u0730\\u0731\\u0732\\u0733\\u0734\\u0735\\u0736\\u0737\\u0738\\u0739\\u073A\\u073B\\u073C\\u073D\\u073E\\u073F\\u0740\\u0741\\u0742\\u0743\\u0744\\u0745\\u0746\\u0747\\u0748\\u0749\\u074A\\u07A6\\u07A7\\u07A8\\u07A9\\u07AA\\u07AB\\u07AC\\u07AD\\u07AE\\u07AF\\u07B0\\u07EB\\u07EC\\u07ED\\u07EE\\u07EF\\u07F0\\u07F1\\u07F2\\u07F3\\u0901\\u0902\\u093C\\u0941\\u0942\\u0943\\u0944\\u0945\\u0946\\u0947\\u0948\\u094D\\u0951\\u0952\\u0953\\u0954\\u0962\\u0963\\u0981\\u09BC\\u09C1\\u09C2\\u09C3\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1\\u0AC2\\u0AC3\\u0AC4\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41\\u0B42\\u0B43\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E\\u0C3F\\u0C40\\u0C46\\u0C47\\u0C48\\u0C4A\\u0C4B\\u0C4C\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41\\u0D42\\u0D43\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2\\u0DD3\\u0DD4\\u0DD6\\u0E31\\u0E34\\u0E35\\u0E36\\u0E37\\u0E38\\u0E39\\u0E3A\\u0E47\\u0E48\\u0E49\\u0E4A\\u0E4B\\u0E4C\\u0E4D\\u0E4E\\u0EB1\\u0EB4\\u0EB5\\u0EB6\\u0EB7\\u0EB8\\u0EB9\\u0EBB\\u0EBC\\u0EC8\\u0EC9\\u0ECA\\u0ECB\\u0ECC\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71\\u0F72\\u0F73\\u0F74\\u0F75\\u0F76\\u0F77\\u0F78\\u0F79\\u0F7A\\u0F7B\\u0F7C\\u0F7D\\u0F7E\\u0F80\\u0F81\\u0F82\\u0F83\\u0F84\\u0F86\\u0F87\\u0F90\\u0F91\\u0F92\\u0F93\\u0F94\\u0F95\\u0F96\\u0F97\\u0F99\\u0F9A\\u0F9B\\u0F9C\\u0F9D\\u0F9E\\u0F9F\\u0FA0\\u0FA1\\u0FA2\\u0FA3\\u0FA4\\u0FA5\\u0FA6\\u0FA7\\u0FA8\\u0FA9\\u0FAA\\u0FAB\\u0FAC\\u0FAD\\u0FAE\\u0FAF\\u0FB0\\u0FB1\\u0FB2\\u0FB3\\u0FB4\\u0FB5\\u0FB6\\u0FB7\\u0FB8\\u0FB9\\u0FBA\\u0FBB\\u0FBC\\u0FC6\\u102D\\u102E\\u102F\\u1030\\u1032\\u1033\\u1034\\u1035\\u1036\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E\\u105F\\u1060\\u1071\\u1072\\u1073\\u1074\\u1082\\u1085\\u1086\\u108D\\u135F\\u1712\\u1713\\u1714\\u1732\\u1733\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7\\u17B8\\u17B9\\u17BA\\u17BB\\u17BC\\u17BD\\u17C6\\u17C9\\u17CA\\u17CB\\u17CC\\u17CD\\u17CE\\u17CF\\u17D0\\u17D1\\u17D2\\u17D3\\u17DD\\u180B\\u180C\\u180D\\u18A9\\u1920\\u1921\\u1922\\u1927\\u1928\\u1932\\u1939\\u193A\\u193B\\u1A17\\u1A18\\u1B00\\u1B01\\u1B02\\u1B03\\u1B34\\u1B36\\u1B37\\u1B38\\u1B39\\u1B3A\\u1B3C\\u1B42\\u1B6B\\u1B6C\\u1B6D\\u1B6E\\u1B6F\\u1B70\\u1B71\\u1B72\\u1B73\\u1B80\\u1B81\\u1BA2\\u1BA3\\u1BA4\\u1BA5\\u1BA8\\u1BA9\\u1C2C\\u1C2D\\u1C2E\\u1C2F\\u1C30\\u1C31\\u1C32\\u1C33\\u1C36\\u1C37\\u1DC0\\u1DC1\\u1DC2\\u1DC3\\u1DC4\\u1DC5\\u1DC6\\u1DC7\\u1DC8\\u1DC9\\u1DCA\\u1DCB\\u1DCC\\u1DCD\\u1DCE\\u1DCF\\u1DD0\\u1DD1\\u1DD2\\u1DD3\\u1DD4\\u1DD5\\u1DD6\\u1DD7\\u1DD8\\u1DD9\\u1DDA\\u1DDB\\u1DDC\\u1DDD\\u1DDE\\u1DDF\\u1DE0\\u1DE1\\u1DE2\\u1DE3\\u1DE4\\u1DE5\\u1DE6\\u1DFE\\u1DFF\\u20D0\\u20D1\\u20D2\\u20D3\\u20D4\\u20D5\\u20D6\\u20D7\\u20D8\\u20D9\\u20DA\\u20DB\\u20DC\\u20E1\\u20E5\\u20E6\\u20E7\\u20E8\\u20E9\\u20EA\\u20EB\\u20EC\\u20ED\\u20EE\\u20EF\\u20F0\\u2DE0\\u2DE1\\u2DE2\\u2DE3\\u2DE4\\u2DE5\\u2DE6\\u2DE7\\u2DE8\\u2DE9\\u2DEA\\u2DEB\\u2DEC\\u2DED\\u2DEE\\u2DEF\\u2DF0\\u2DF1\\u2DF2\\u2DF3\\u2DF4\\u2DF5\\u2DF6\\u2DF7\\u2DF8\\u2DF9\\u2DFA\\u2DFB\\u2DFC\\u2DFD\\u2DFE\\u2DFF\\u302A\\u302B\\u302C\\u302D\\u302E\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA926\\uA927\\uA928\\uA929\\uA92A\\uA92B\\uA92C\\uA92D\\uA947\\uA948\\uA949\\uA94A\\uA94B\\uA94C\\uA94D\\uA94E\\uA94F\\uA950\\uA951\\uAA29\\uAA2A\\uAA2B\\uAA2C\\uAA2D\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uFB1E\\uFE00\\uFE01\\uFE02\\uFE03\\uFE04\\uFE05\\uFE06\\uFE07\\uFE08\\uFE09\\uFE0A\\uFE0B\\uFE0C\\uFE0D\\uFE0E\\uFE0F\\uFE20\\uFE21\\uFE22\\uFE23\\uFE24\\uFE25\\uFE26]" },
        peg$c88 = /^[0123456789\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9\u07C0\u07C1\u07C2\u07C3\u07C4\u07C5\u07C6\u07C7\u07C8\u07C9\u0966\u0967\u0968\u0969\u096A\u096B\u096C\u096D\u096E\u096F\u09E6\u09E7\u09E8\u09E9\u09EA\u09EB\u09EC\u09ED\u09EE\u09EF\u0A66\u0A67\u0A68\u0A69\u0A6A\u0A6B\u0A6C\u0A6D\u0A6E\u0A6F\u0AE6\u0AE7\u0AE8\u0AE9\u0AEA\u0AEB\u0AEC\u0AED\u0AEE\u0AEF\u0B66\u0B67\u0B68\u0B69\u0B6A\u0B6B\u0B6C\u0B6D\u0B6E\u0B6F\u0BE6\u0BE7\u0BE8\u0BE9\u0BEA\u0BEB\u0BEC\u0BED\u0BEE\u0BEF\u0C66\u0C67\u0C68\u0C69\u0C6A\u0C6B\u0C6C\u0C6D\u0C6E\u0C6F\u0CE6\u0CE7\u0CE8\u0CE9\u0CEA\u0CEB\u0CEC\u0CED\u0CEE\u0CEF\u0D66\u0D67\u0D68\u0D69\u0D6A\u0D6B\u0D6C\u0D6D\u0D6E\u0D6F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0ED0\u0ED1\u0ED2\u0ED3\u0ED4\u0ED5\u0ED6\u0ED7\u0ED8\u0ED9\u0F20\u0F21\u0F22\u0F23\u0F24\u0F25\u0F26\u0F27\u0F28\u0F29\u1040\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1090\u1091\u1092\u1093\u1094\u1095\u1096\u1097\u1098\u1099\u17E0\u17E1\u17E2\u17E3\u17E4\u17E5\u17E6\u17E7\u17E8\u17E9\u1810\u1811\u1812\u1813\u1814\u1815\u1816\u1817\u1818\u1819\u1946\u1947\u1948\u1949\u194A\u194B\u194C\u194D\u194E\u194F\u19D0\u19D1\u19D2\u19D3\u19D4\u19D5\u19D6\u19D7\u19D8\u19D9\u1B50\u1B51\u1B52\u1B53\u1B54\u1B55\u1B56\u1B57\u1B58\u1B59\u1BB0\u1BB1\u1BB2\u1BB3\u1BB4\u1BB5\u1BB6\u1BB7\u1BB8\u1BB9\u1C40\u1C41\u1C42\u1C43\u1C44\u1C45\u1C46\u1C47\u1C48\u1C49\u1C50\u1C51\u1C52\u1C53\u1C54\u1C55\u1C56\u1C57\u1C58\u1C59\uA620\uA621\uA622\uA623\uA624\uA625\uA626\uA627\uA628\uA629\uA8D0\uA8D1\uA8D2\uA8D3\uA8D4\uA8D5\uA8D6\uA8D7\uA8D8\uA8D9\uA900\uA901\uA902\uA903\uA904\uA905\uA906\uA907\uA908\uA909\uAA50\uAA51\uAA52\uAA53\uAA54\uAA55\uAA56\uAA57\uAA58\uAA59\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19]/,
        peg$c89 = { type: "class", value: "[0123456789\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\\u06F0\\u06F1\\u06F2\\u06F3\\u06F4\\u06F5\\u06F6\\u06F7\\u06F8\\u06F9\\u07C0\\u07C1\\u07C2\\u07C3\\u07C4\\u07C5\\u07C6\\u07C7\\u07C8\\u07C9\\u0966\\u0967\\u0968\\u0969\\u096A\\u096B\\u096C\\u096D\\u096E\\u096F\\u09E6\\u09E7\\u09E8\\u09E9\\u09EA\\u09EB\\u09EC\\u09ED\\u09EE\\u09EF\\u0A66\\u0A67\\u0A68\\u0A69\\u0A6A\\u0A6B\\u0A6C\\u0A6D\\u0A6E\\u0A6F\\u0AE6\\u0AE7\\u0AE8\\u0AE9\\u0AEA\\u0AEB\\u0AEC\\u0AED\\u0AEE\\u0AEF\\u0B66\\u0B67\\u0B68\\u0B69\\u0B6A\\u0B6B\\u0B6C\\u0B6D\\u0B6E\\u0B6F\\u0BE6\\u0BE7\\u0BE8\\u0BE9\\u0BEA\\u0BEB\\u0BEC\\u0BED\\u0BEE\\u0BEF\\u0C66\\u0C67\\u0C68\\u0C69\\u0C6A\\u0C6B\\u0C6C\\u0C6D\\u0C6E\\u0C6F\\u0CE6\\u0CE7\\u0CE8\\u0CE9\\u0CEA\\u0CEB\\u0CEC\\u0CED\\u0CEE\\u0CEF\\u0D66\\u0D67\\u0D68\\u0D69\\u0D6A\\u0D6B\\u0D6C\\u0D6D\\u0D6E\\u0D6F\\u0E50\\u0E51\\u0E52\\u0E53\\u0E54\\u0E55\\u0E56\\u0E57\\u0E58\\u0E59\\u0ED0\\u0ED1\\u0ED2\\u0ED3\\u0ED4\\u0ED5\\u0ED6\\u0ED7\\u0ED8\\u0ED9\\u0F20\\u0F21\\u0F22\\u0F23\\u0F24\\u0F25\\u0F26\\u0F27\\u0F28\\u0F29\\u1040\\u1041\\u1042\\u1043\\u1044\\u1045\\u1046\\u1047\\u1048\\u1049\\u1090\\u1091\\u1092\\u1093\\u1094\\u1095\\u1096\\u1097\\u1098\\u1099\\u17E0\\u17E1\\u17E2\\u17E3\\u17E4\\u17E5\\u17E6\\u17E7\\u17E8\\u17E9\\u1810\\u1811\\u1812\\u1813\\u1814\\u1815\\u1816\\u1817\\u1818\\u1819\\u1946\\u1947\\u1948\\u1949\\u194A\\u194B\\u194C\\u194D\\u194E\\u194F\\u19D0\\u19D1\\u19D2\\u19D3\\u19D4\\u19D5\\u19D6\\u19D7\\u19D8\\u19D9\\u1B50\\u1B51\\u1B52\\u1B53\\u1B54\\u1B55\\u1B56\\u1B57\\u1B58\\u1B59\\u1BB0\\u1BB1\\u1BB2\\u1BB3\\u1BB4\\u1BB5\\u1BB6\\u1BB7\\u1BB8\\u1BB9\\u1C40\\u1C41\\u1C42\\u1C43\\u1C44\\u1C45\\u1C46\\u1C47\\u1C48\\u1C49\\u1C50\\u1C51\\u1C52\\u1C53\\u1C54\\u1C55\\u1C56\\u1C57\\u1C58\\u1C59\\uA620\\uA621\\uA622\\uA623\\uA624\\uA625\\uA626\\uA627\\uA628\\uA629\\uA8D0\\uA8D1\\uA8D2\\uA8D3\\uA8D4\\uA8D5\\uA8D6\\uA8D7\\uA8D8\\uA8D9\\uA900\\uA901\\uA902\\uA903\\uA904\\uA905\\uA906\\uA907\\uA908\\uA909\\uAA50\\uAA51\\uAA52\\uAA53\\uAA54\\uAA55\\uAA56\\uAA57\\uAA58\\uAA59\\uFF10\\uFF11\\uFF12\\uFF13\\uFF14\\uFF15\\uFF16\\uFF17\\uFF18\\uFF19]", description: "[0123456789\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\\u06F0\\u06F1\\u06F2\\u06F3\\u06F4\\u06F5\\u06F6\\u06F7\\u06F8\\u06F9\\u07C0\\u07C1\\u07C2\\u07C3\\u07C4\\u07C5\\u07C6\\u07C7\\u07C8\\u07C9\\u0966\\u0967\\u0968\\u0969\\u096A\\u096B\\u096C\\u096D\\u096E\\u096F\\u09E6\\u09E7\\u09E8\\u09E9\\u09EA\\u09EB\\u09EC\\u09ED\\u09EE\\u09EF\\u0A66\\u0A67\\u0A68\\u0A69\\u0A6A\\u0A6B\\u0A6C\\u0A6D\\u0A6E\\u0A6F\\u0AE6\\u0AE7\\u0AE8\\u0AE9\\u0AEA\\u0AEB\\u0AEC\\u0AED\\u0AEE\\u0AEF\\u0B66\\u0B67\\u0B68\\u0B69\\u0B6A\\u0B6B\\u0B6C\\u0B6D\\u0B6E\\u0B6F\\u0BE6\\u0BE7\\u0BE8\\u0BE9\\u0BEA\\u0BEB\\u0BEC\\u0BED\\u0BEE\\u0BEF\\u0C66\\u0C67\\u0C68\\u0C69\\u0C6A\\u0C6B\\u0C6C\\u0C6D\\u0C6E\\u0C6F\\u0CE6\\u0CE7\\u0CE8\\u0CE9\\u0CEA\\u0CEB\\u0CEC\\u0CED\\u0CEE\\u0CEF\\u0D66\\u0D67\\u0D68\\u0D69\\u0D6A\\u0D6B\\u0D6C\\u0D6D\\u0D6E\\u0D6F\\u0E50\\u0E51\\u0E52\\u0E53\\u0E54\\u0E55\\u0E56\\u0E57\\u0E58\\u0E59\\u0ED0\\u0ED1\\u0ED2\\u0ED3\\u0ED4\\u0ED5\\u0ED6\\u0ED7\\u0ED8\\u0ED9\\u0F20\\u0F21\\u0F22\\u0F23\\u0F24\\u0F25\\u0F26\\u0F27\\u0F28\\u0F29\\u1040\\u1041\\u1042\\u1043\\u1044\\u1045\\u1046\\u1047\\u1048\\u1049\\u1090\\u1091\\u1092\\u1093\\u1094\\u1095\\u1096\\u1097\\u1098\\u1099\\u17E0\\u17E1\\u17E2\\u17E3\\u17E4\\u17E5\\u17E6\\u17E7\\u17E8\\u17E9\\u1810\\u1811\\u1812\\u1813\\u1814\\u1815\\u1816\\u1817\\u1818\\u1819\\u1946\\u1947\\u1948\\u1949\\u194A\\u194B\\u194C\\u194D\\u194E\\u194F\\u19D0\\u19D1\\u19D2\\u19D3\\u19D4\\u19D5\\u19D6\\u19D7\\u19D8\\u19D9\\u1B50\\u1B51\\u1B52\\u1B53\\u1B54\\u1B55\\u1B56\\u1B57\\u1B58\\u1B59\\u1BB0\\u1BB1\\u1BB2\\u1BB3\\u1BB4\\u1BB5\\u1BB6\\u1BB7\\u1BB8\\u1BB9\\u1C40\\u1C41\\u1C42\\u1C43\\u1C44\\u1C45\\u1C46\\u1C47\\u1C48\\u1C49\\u1C50\\u1C51\\u1C52\\u1C53\\u1C54\\u1C55\\u1C56\\u1C57\\u1C58\\u1C59\\uA620\\uA621\\uA622\\uA623\\uA624\\uA625\\uA626\\uA627\\uA628\\uA629\\uA8D0\\uA8D1\\uA8D2\\uA8D3\\uA8D4\\uA8D5\\uA8D6\\uA8D7\\uA8D8\\uA8D9\\uA900\\uA901\\uA902\\uA903\\uA904\\uA905\\uA906\\uA907\\uA908\\uA909\\uAA50\\uAA51\\uAA52\\uAA53\\uAA54\\uAA55\\uAA56\\uAA57\\uAA58\\uAA59\\uFF10\\uFF11\\uFF12\\uFF13\\uFF14\\uFF15\\uFF16\\uFF17\\uFF18\\uFF19]" },
        peg$c90 = /^[\u16EE\u16EF\u16F0\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u216A\u216B\u216C\u216D\u216E\u216F\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\u217A\u217B\u217C\u217D\u217E\u217F\u2180\u2181\u2182\u2185\u2186\u2187\u2188\u3007\u3021\u3022\u3023\u3024\u3025\u3026\u3027\u3028\u3029\u3038\u3039\u303A]/,
        peg$c91 = { type: "class", value: "[\\u16EE\\u16EF\\u16F0\\u2160\\u2161\\u2162\\u2163\\u2164\\u2165\\u2166\\u2167\\u2168\\u2169\\u216A\\u216B\\u216C\\u216D\\u216E\\u216F\\u2170\\u2171\\u2172\\u2173\\u2174\\u2175\\u2176\\u2177\\u2178\\u2179\\u217A\\u217B\\u217C\\u217D\\u217E\\u217F\\u2180\\u2181\\u2182\\u2185\\u2186\\u2187\\u2188\\u3007\\u3021\\u3022\\u3023\\u3024\\u3025\\u3026\\u3027\\u3028\\u3029\\u3038\\u3039\\u303A]", description: "[\\u16EE\\u16EF\\u16F0\\u2160\\u2161\\u2162\\u2163\\u2164\\u2165\\u2166\\u2167\\u2168\\u2169\\u216A\\u216B\\u216C\\u216D\\u216E\\u216F\\u2170\\u2171\\u2172\\u2173\\u2174\\u2175\\u2176\\u2177\\u2178\\u2179\\u217A\\u217B\\u217C\\u217D\\u217E\\u217F\\u2180\\u2181\\u2182\\u2185\\u2186\\u2187\\u2188\\u3007\\u3021\\u3022\\u3023\\u3024\\u3025\\u3026\\u3027\\u3028\\u3029\\u3038\\u3039\\u303A]" },
        peg$c92 = /^[_\u203F\u2040\u2054\uFE33\uFE34\uFE4D\uFE4E\uFE4F\uFF3F]/,
        peg$c93 = { type: "class", value: "[_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D\\uFE4E\\uFE4F\\uFF3F]", description: "[_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D\\uFE4E\\uFE4F\\uFF3F]" },
        peg$c94 = /^[ \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]/,
        peg$c95 = { type: "class", value: "[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]", description: "[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]" },
        peg$c96 = function(name) { return ['#', name]; },
        peg$c97 = "(",
        peg$c98 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c99 = ")",
        peg$c100 = { type: "literal", value: ")", description: "\")\"" },
        peg$c101 = function(name, args) {
            var result = [name].concat(args.shift());
            while (args.length > 0) {
              result = [result].concat(args.shift());
            }
            return result;
          },
        peg$c102 = function(args) {
            return args !== null ? args : [];
          },
        peg$c103 = ",",
        peg$c104 = { type: "literal", value: ",", description: "\",\"" },
        peg$c105 = function(head, tail) {
            var result = [head];
            for (var i = 0; i < tail.length; i++) {
              result.push(tail[i][3]);
            }
            return result;
          },
        peg$c106 = function(operator, expression) {
              return [operator, expression];
            },
        peg$c107 = "+",
        peg$c108 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c109 = "-",
        peg$c110 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c111 = "!",
        peg$c112 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c113 = function(head, tail) {
              var result = head;
              for (var i = 0; i < tail.length; i++) {
                result = [tail[i][1], result, tail[i][3]];
              }
              return result;
            },
        peg$c114 = "*",
        peg$c115 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c116 = "/",
        peg$c117 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c118 = "%",
        peg$c119 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c120 = "=",
        peg$c121 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c122 = function(operator) { return operator; },
        peg$c123 = function() { return "+"; },
        peg$c124 = function() { return "-"; },
        peg$c125 = "<=",
        peg$c126 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c127 = ">=",
        peg$c128 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c129 = "<",
        peg$c130 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c131 = ">",
        peg$c132 = { type: "literal", value: ">", description: "\">\"" },
        peg$c133 = "==",
        peg$c134 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c135 = "!=",
        peg$c136 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c137 = "&&",
        peg$c138 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c139 = function() { return "&&"; },
        peg$c140 = "||",
        peg$c141 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c142 = function() { return "||"; },
        peg$c143 = "if",
        peg$c144 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c145 = "then",
        peg$c146 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c147 = "else",
        peg$c148 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c149 = function(condition, trueExpression, falseExpression) {
              return ['if', condition, trueExpression, falseExpression];
            },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c1(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSourceCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }

      return s0;
    }

    function peg$parseWhiteSpace() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c4.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseZs();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseReservedWord();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c7;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifierName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c8(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }

      return s0;
    }

    function peg$parseIdentifierName() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseIdentifierStart();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseIdentifierPart();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseIdentifierPart();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c10(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }

      return s0;
    }

    function peg$parseIdentifierStart() {
      var s0, s1, s2;

      s0 = peg$parseUnicodeLetter();
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s0 = peg$c11;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s0 = peg$c13;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c15;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseUnicodeEscapeSequence();
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c17(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseIdentifierPart() {
      var s0, s1;

      s0 = peg$parseIdentifierStart();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnicodeCombiningMark();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNd();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePc();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 8204) {
                s1 = peg$c18;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c20();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 8205) {
                  s1 = peg$c21;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c23();
                }
                s0 = s1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnicodeLetter() {
      var s0;

      s0 = peg$parseLu();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLl();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLm();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLo();
              if (s0 === peg$FAILED) {
                s0 = peg$parseNl();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnicodeCombiningMark() {
      var s0;

      s0 = peg$parseMn();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMc();
      }

      return s0;
    }

    function peg$parseReservedWord() {
      var s0;

      s0 = peg$parseNullLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBooleanLiteral();
      }

      return s0;
    }

    function peg$parseLiteral() {
      var s0;

      s0 = peg$parseNullLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBooleanLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumericLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStringLiteral();
          }
        }
      }

      return s0;
    }

    function peg$parseNullLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c24) {
        s1 = peg$c24;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c26();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBooleanLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c27) {
        s1 = peg$c27;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c29();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c30) {
          s1 = peg$c30;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseIdentifierPart();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c7;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c32();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseNumericLiteral() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseHexIntegerLiteral();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDecimalLiteral();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierStart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c34(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }

      return s0;
    }

    function peg$parseDecimalLiteral() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseDecimalIntegerLiteral();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c35;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDecimalDigits();
          if (s5 === peg$FAILED) {
            s5 = peg$c37;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseExponentPart();
            if (s6 === peg$FAILED) {
              s6 = peg$c37;
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c38(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDecimalDigits();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExponentPart();
            if (s5 === peg$FAILED) {
              s5 = peg$c37;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s2 = input.substring(s1, peg$currPos);
        }
        s1 = s2;
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c39(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          s3 = peg$parseDecimalIntegerLiteral();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExponentPart();
            if (s4 === peg$FAILED) {
              s4 = peg$c37;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s2 = input.substring(s1, peg$currPos);
          }
          s1 = s2;
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c39(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseDecimalIntegerLiteral() {
      var s0, s1, s2;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c40;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNonZeroDigit();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDecimalDigits();
          if (s2 === peg$FAILED) {
            s2 = peg$c37;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseDecimalDigits() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseDecimalDigit();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseDecimalDigit();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDecimalDigit() {
      var s0;

      if (peg$c42.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }

      return s0;
    }

    function peg$parseNonZeroDigit() {
      var s0;

      if (peg$c44.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }

      return s0;
    }

    function peg$parseExponentPart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseExponentIndicator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSignedInteger();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseExponentIndicator() {
      var s0;

      if (peg$c46.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }

      return s0;
    }

    function peg$parseSignedInteger() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c48.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c37;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHexIntegerLiteral() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c40;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c50.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseHexDigit();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseHexDigit();
            }
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s4 = input.substring(s3, peg$currPos);
          }
          s3 = s4;
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c52(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHexDigit() {
      var s0;

      if (peg$c53.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }

      return s0;
    }

    function peg$parseStringLiteral() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c56;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDoubleStringCharacters();
        if (s3 === peg$FAILED) {
          s3 = peg$c37;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s4 = peg$c56;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c57); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c58;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c59); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSingleStringCharacters();
          if (s3 === peg$FAILED) {
            s3 = peg$c37;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s4 = peg$c58;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c60(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }

      return s0;
    }

    function peg$parseDoubleStringCharacters() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDoubleStringCharacter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseDoubleStringCharacter();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c61(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSingleStringCharacters() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseSingleStringCharacter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseSingleStringCharacter();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c61(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDoubleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c56;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c15;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c7;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c15;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c63(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseSingleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c58;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c15;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c7;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c15;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c63(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseEscapeSequence() {
      var s0, s1, s2, s3;

      s0 = peg$parseCharacterEscapeSequence();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c40;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseDecimalDigit();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c7;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c64();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseHexEscapeSequence();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUnicodeEscapeSequence();
          }
        }
      }

      return s0;
    }

    function peg$parseCharacterEscapeSequence() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNonEscapeCharacter();
      }

      return s0;
    }

    function peg$parseSingleEscapeCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c65.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c67(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNonEscapeCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseEscapeCharacter();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c7;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c68(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEscapeCharacter() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 120) {
            s0 = peg$c69;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 117) {
              s0 = peg$c71;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseHexEscapeSequence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 120) {
        s1 = peg$c69;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseUnicodeEscapeSequence() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 117) {
        s1 = peg$c71;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseHexDigit();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseHexDigit();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLl() {
      var s0;

      if (peg$c74.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }

      return s0;
    }

    function peg$parseLm() {
      var s0;

      if (peg$c76.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }

      return s0;
    }

    function peg$parseLo() {
      var s0;

      if (peg$c78.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }

      return s0;
    }

    function peg$parseLt() {
      var s0;

      if (peg$c80.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }

      return s0;
    }

    function peg$parseLu() {
      var s0;

      if (peg$c82.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }

      return s0;
    }

    function peg$parseMc() {
      var s0;

      if (peg$c84.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }

      return s0;
    }

    function peg$parseMn() {
      var s0;

      if (peg$c86.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }

      return s0;
    }

    function peg$parseNd() {
      var s0;

      if (peg$c88.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      return s0;
    }

    function peg$parseNl() {
      var s0;

      if (peg$c90.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }

      return s0;
    }

    function peg$parsePc() {
      var s0;

      if (peg$c92.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }

      return s0;
    }

    function peg$parseZs() {
      var s0;

      if (peg$c94.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseWhiteSpace();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();
      }

      return s0;
    }

    function peg$parsePrimaryExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c96(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c97;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c98); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseExpression();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s5 = peg$c99;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c100); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c1(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseCallExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseArguments();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseArguments();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c101(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseArguments() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c97;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseArgumentList();
          if (s3 === peg$FAILED) {
            s3 = peg$c37;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c99;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c100); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c102(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseArgumentList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c103;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c104); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c103;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c104); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c105(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseUnaryExpression() {
      var s0, s1, s2, s3;

      s0 = peg$parseCallExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePrimaryExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseUnaryOperator();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseUnaryExpression();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c106(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseUnaryOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c107;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c109;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c110); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s0 = peg$c111;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
        }
      }

      return s0;
    }

    function peg$parseMultiplicativeExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseMultiplicativeOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseUnaryExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseMultiplicativeOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseUnaryExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMultiplicativeOperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c114;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s1 = peg$c116;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c117); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 37) {
            s1 = peg$c118;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c119); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c120;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c122(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAdditiveExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseMultiplicativeExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAdditiveOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseMultiplicativeExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAdditiveOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseMultiplicativeExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAdditiveOperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c107;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 43) {
          s3 = peg$c107;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c108); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c120;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c123();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c109;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c110); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 45) {
            s3 = peg$c109;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c110); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c120;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c7;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c124();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseRelationalExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseAdditiveExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRelationalOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseAdditiveExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRelationalOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAdditiveExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRelationalOperator() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c125) {
        s0 = peg$c125;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c127) {
          s0 = peg$c127;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c128); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s0 = peg$c129;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c130); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s0 = peg$c131;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c132); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseEqualityExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseRelationalExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseEqualityOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseRelationalExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEqualityOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseRelationalExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEqualityOperator() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c133) {
        s0 = peg$c133;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c135) {
          s0 = peg$c135;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c136); }
        }
      }

      return s0;
    }

    function peg$parseLogicalANDExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseEqualityExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLogicalANDOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseEqualityExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLogicalANDOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseEqualityExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLogicalANDOperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c137) {
        s1 = peg$c137;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c120;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c139();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLogicalORExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLogicalANDExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLogicalOROperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseLogicalANDExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLogicalOROperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseLogicalANDExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLogicalOROperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c140) {
        s1 = peg$c140;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c120;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c142();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c143) {
        s1 = peg$c143;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLogicalORExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c145) {
                s5 = peg$c145;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c146); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseExpression();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c147) {
                        s9 = peg$c147;
                        peg$currPos += 4;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c148); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse__();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseExpression();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c149(s3, s7, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLogicalORExpression();
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
}]);


/***/ }),

/***/ "./core/templates/dev/head/expressions/ExpressionSyntaxTreeService.ts":
/*!****************************************************************************!*\
  !*** ./core/templates/dev/head/expressions/ExpressionSyntaxTreeService.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
__webpack_require__(/*! expressions/ExpressionParserService.js */ "./core/templates/dev/head/expressions/ExpressionParserService.js");
oppia.factory('ExpressionSyntaxTreeService', [
    '$log', 'ExpressionParserService', 'PARAMETER_TYPES',
    function ($log, ExpressionParserService, PARAMETER_TYPES) {
        // Exceptions that can be thrown from the evaluation of expressions.
        var ExpressionError = function () {
        };
        ExpressionError.prototype = new Error();
        ExpressionError.prototype.constructor = ExpressionError;
        var ExprUndefinedVarError = function (varname, envs) {
            this.varname = varname;
            this.envs = envs;
        };
        ExprUndefinedVarError.prototype = new ExpressionError();
        ExprUndefinedVarError.prototype.constructor = ExprUndefinedVarError;
        ExprUndefinedVarError.prototype.name = 'ExprUndefinedVarError';
        ExprUndefinedVarError.prototype.toString = function () {
            return this.name + ': ' + this.varname + ' not found in ' + this.envs;
        };
        var ExprWrongNumArgsError = function (args, expectedMin, expectedMax) {
            this.args = args;
            this.expectedMin = expectedMin;
            this.expectedMax = expectedMax;
        };
        ExprWrongNumArgsError.prototype = new ExpressionError();
        ExprWrongNumArgsError.prototype.constructor = ExprWrongNumArgsError;
        ExprWrongNumArgsError.prototype.name = 'ExprWrongNumArgsError';
        ExprWrongNumArgsError.prototype.toString = function () {
            return this.name + ': {' + this.args + '} not in range [' +
                this.expectedMin + ',' + this.expectedMax + ']';
        };
        var ExprWrongArgTypeError = function (arg, actualType, expectedType) {
            this.arg = arg;
            this.actualType = actualType;
            this.expectedType = expectedType;
        };
        ExprWrongArgTypeError.prototype = new ExpressionError();
        ExprWrongArgTypeError.prototype.constructor = ExprWrongArgTypeError;
        ExprWrongArgTypeError.prototype.name = 'ExprWrongArgTypeError';
        ExprWrongArgTypeError.prototype.toString = function () {
            if (this.arg === null) {
                return this.name + ': Type ' + this.actualType +
                    ' does not match expected type ' + this.expectedType;
            }
            return this.name + ': ' + this.arg + ' has type ' + this.actualType +
                ' which does not match expected type ' + this.expectedType;
        };
        var getParamsUsedInExpression = function (expression) {
            var _findParams = function (parseTree) {
                var paramsFound = [];
                if (parseTree instanceof Array) {
                    if (parseTree[0] === '#') {
                        paramsFound.push(parseTree[1]);
                    }
                    else {
                        for (var i = 1; i < parseTree.length; i++) {
                            paramsFound = paramsFound.concat(_findParams(parseTree[i]));
                        }
                    }
                }
                var uniqueParams = [];
                for (var i = 0; i < paramsFound.length; i++) {
                    if (uniqueParams.indexOf(paramsFound[i]) === -1) {
                        uniqueParams.push(paramsFound[i]);
                    }
                }
                return uniqueParams.sort();
            };
            var parsed = ExpressionParserService.parse(expression);
            return _findParams(parsed);
        };
        // Checks if the args array has the expectedNum number of elements and
        // throws an error if not. If optional expectedMax is specified, it
        // verifies the number of args is in [expectedNum, expectedMax] range
        // inclusive.
        var verifyNumArgs = function (args, expectedNum, expectedMax) {
            if (expectedMax === void 0) { expectedMax = expectedNum; }
            if (expectedMax === undefined) {
                expectedMax = expectedNum;
            }
            if (args.length >= expectedNum && args.length <= expectedMax) {
                return;
            }
            throw new ExprWrongNumArgsError(args, expectedNum, expectedMax);
        };
        var _verifyArgTypesMatchExpectedType = function (argTypes, expectedType) {
            for (var i = 0; i < argTypes.length; i++) {
                if (argTypes[i] !== expectedType) {
                    throw new ExprWrongArgTypeError(null, argTypes[i], expectedType);
                }
            }
            return true;
        };
        var _verifyArgTypesMatch = function (argType1, argType2) {
            if (argType1 !== argType2) {
                throw new ExprWrongArgTypeError(null, argType1, argType2);
            }
            return true;
        };
        var applyFunctionToParseTree = function (parsed, envs, func) {
            return func(parsed, envs.concat(system));
        };
        /**
         * Looks up a variable of the given name in the env. Here the variable
         * can be system or user defined functions and parameters, as well as
         * system operators.
         * @param {string} name The name to look up.
         * @param {!Array.<!Object>} envs Represents a nested name space
         *     environment to look up the name in. The first element is looked up
         *     first (i.e. has higher precedence).
         * @throws {ExprUndefinedVarError} The named variable was not found in
         *     the given environment.
         */
        var lookupEnvs = function (name, envs) {
            // Parameter value look up.
            var value;
            if (envs.some(function (env) {
                if (env.hasOwnProperty(name)) {
                    value = env[name];
                    return true;
                }
                return false;
            })) {
                return value;
            }
            throw new ExprUndefinedVarError(name, envs);
        };
        // Coerces the argument to a Number, and throws an error if the result
        // is NaN.
        var _coerceToNumber = function (originalValue) {
            var coercedValue = (+originalValue);
            if (!isNaN(coercedValue)) {
                return coercedValue;
            }
            throw new ExprWrongArgTypeError(originalValue, typeof originalValue, 'Number');
        };
        // Coerces all values in the given argument array to Number, and throws
        // an error if the result is NaN.
        var _coerceAllArgsToNumber = function (args) {
            for (var i = 0; i < args.length; i++) {
                args[i] = _coerceToNumber(args[i]);
            }
            return args;
        };
        // NOTE TO DEVELOPERS: When adding a new reserved word to this object,
        //   please first ensure that existing explorations do not use this
        //   parameter name. Also, to prevent future explorations using it,
        //   modify feconf.INVALID_PARAMETER_NAMES accordingly.
        // TODO(kashida): Document all operators input and output contracts.
        // Arguments:
        // args: for eval(): list of values of the evaluated sub-expression
        //       for getType(): list of types of the evaluated sub-expression
        var system = {
            '+': {
                eval: function (args) {
                    verifyNumArgs(args, 1, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs.length === 1 ? numericArgs[0] :
                        numericArgs[0] + numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 1, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            '-': {
                eval: function (args) {
                    verifyNumArgs(args, 1, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs.length === 1 ? -numericArgs[0] :
                        numericArgs[0] - numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 1, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            '*': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] * numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            '/': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] / numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            '%': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] % numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            '<=': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] <= numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '>=': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] >= numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '<': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] < numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '>': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] > numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '!': {
                eval: function (args) {
                    verifyNumArgs(args, 1);
                    return !args[0];
                },
                getType: function (args) {
                    verifyNumArgs(args, 1);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.UNICODE_STRING);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '==': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    return args[0] === args[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '!=': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    return args[0] !== args[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '&&': {
                eval: function (args) {
                    // TODO(kashida): Make this short-circuit.
                    verifyNumArgs(args, 2);
                    return Boolean(args[0] && args[1]);
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.UNICODE_STRING);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '||': {
                eval: function (args) {
                    // TODO(kashida): Make this short-circuit.
                    verifyNumArgs(args, 2);
                    return Boolean(args[0] || args[1]);
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.UNICODE_STRING);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            // Note that removing quotation marks from this key causes issues with
            // minification (when running the deployment scripts).
            /* eslint-disable quote-props */
            'if': {
                eval: function (args) {
                    // TODO(kashida): Make this short-circuit.
                    verifyNumArgs(args, 3);
                    return args[0] ? args[1] : args[2];
                },
                getType: function (args) {
                    verifyNumArgs(args, 3);
                    _verifyArgTypesMatchExpectedType([args[0]], PARAMETER_TYPES.UNICODE_STRING);
                    _verifyArgTypesMatch(args[1], args[2]);
                    return args[1];
                }
            },
            'floor': {
                eval: function (args) {
                    verifyNumArgs(args, 1);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return Math.floor(numericArgs[0]);
                },
                getType: function (args) {
                    verifyNumArgs(args, 1);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            'pow': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return Math.pow(args[0], args[1]);
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            'log': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    var preciseAns = Math.log(numericArgs[0]) / Math.log(numericArgs[1]);
                    // We round answers to 9 decimal places, so that we don't run into
                    // issues like log(9, 3) = 2.0000000000004.
                    return Math.round(preciseAns * Math.pow(10, 9)) / Math.pow(10, 9);
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            'abs': {
                eval: function (args) {
                    verifyNumArgs(args, 1);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return Math.abs(numericArgs[0]);
                },
                getType: function (args) {
                    verifyNumArgs(args, 1);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            }
            /* eslint-enable quote-props */
        };
        return {
            ExpressionError: ExpressionError,
            ExprUndefinedVarError: ExprUndefinedVarError,
            ExprWrongNumArgsError: ExprWrongNumArgsError,
            ExprWrongArgTypeError: ExprWrongArgTypeError,
            applyFunctionToParseTree: applyFunctionToParseTree,
            getParamsUsedInExpression: getParamsUsedInExpression,
            lookupEnvs: lookupEnvs
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/format-rte-preview.filter.ts":
/*!**********************************************************************!*\
  !*** ./core/templates/dev/head/filters/format-rte-preview.filter.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview FormatRtePreview filter for Oppia.
 */
/* The following filter replaces each RTE element occurrence in the input html
   by its corresponding name in square brackets and returns a string
   which contains the name in the same location as in the input html.
   eg: <p>Sample1 <oppia-noninteractive-math></oppia-noninteractive-math>
        Sample2 </p>
   will give as output: Sample1 [Math] Sample2 */
angular.module('filtersModule').filter('formatRtePreview', ['$filter', function ($filter) {
        return function (html) {
            html = html.replace(/&nbsp;/ig, ' ');
            html = html.replace(/&quot;/ig, '');
            // Replace all html tags other than <oppia-noninteractive-**> ones to ''.
            html = html.replace(/<(?!oppia-noninteractive\s*?)[^>]+>/g, '');
            var formattedOutput = html.replace(/(<([^>]+)>)/g, function (rteTag) {
                var replaceString = $filter('capitalize')(rteTag.split('-')[2].split(' ')[0]);
                if (replaceString[replaceString.length - 1] === '>') {
                    replaceString = replaceString.slice(0, -1);
                }
                return ' [' + replaceString + '] ';
            });
            return formattedOutput.trim();
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/parameterize-rule-description.filter.ts":
/*!*********************************************************************************!*\
  !*** ./core/templates/dev/head/filters/parameterize-rule-description.filter.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview ParameterizeRuleDescription filter for Oppia.
 */
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
__webpack_require__(/*! domain/objects/NumberWithUnitsObjectFactory.ts */ "./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts");
__webpack_require__(/*! filters/format-rte-preview.filter.ts */ "./core/templates/dev/head/filters/format-rte-preview.filter.ts");
// Filter that changes {{...}} tags into the corresponding parameter input
// values. Note that this returns an HTML string to accommodate the case of
// multiple-choice input and image-click input.
angular.module('filtersModule').filter('parameterizeRuleDescription', [
    '$filter', 'INTERACTION_SPECS', 'FractionObjectFactory',
    'NumberWithUnitsObjectFactory', function ($filter, INTERACTION_SPECS, FractionObjectFactory, NumberWithUnitsObjectFactory) {
        return function (rule, interactionId, choices) {
            if (!rule) {
                return '';
            }
            if (!INTERACTION_SPECS.hasOwnProperty(interactionId)) {
                console.error('Cannot find interaction with id ' + interactionId);
                return '';
            }
            var description = INTERACTION_SPECS[interactionId].rule_descriptions[rule.type];
            if (!description) {
                console.error('Cannot find description for rule ' + rule.type +
                    ' for interaction ' + interactionId);
                return '';
            }
            var inputs = rule.inputs;
            var finalDescription = description;
            var PATTERN = /\{\{\s*(\w+)\s*(\|\s*\w+\s*)?\}\}/;
            var iter = 0;
            while (true) {
                if (!description.match(PATTERN) || iter === 100) {
                    break;
                }
                iter++;
                var varName = description.match(PATTERN)[1];
                var varType = description.match(PATTERN)[2];
                if (varType) {
                    varType = varType.substring(1);
                }
                var replacementText = '[INVALID]';
                // Special case for MultipleChoiceInput, ImageClickInput, and
                // ItemSelectionInput.
                if (choices) {
                    if (varType === 'SetOfHtmlString') {
                        replacementText = '[';
                        var key = inputs[varName];
                        for (var i = 0; i < key.length; i++) {
                            replacementText += $filter('formatRtePreview')(key[i]);
                            if (i < key.length - 1) {
                                replacementText += ',';
                            }
                        }
                        replacementText += ']';
                    }
                    else if (varType === 'ListOfSetsOfHtmlStrings') {
                        replacementText = '[';
                        var key = inputs[varName];
                        for (var i = 0; i < key.length; i++) {
                            replacementText += '[';
                            for (var j = 0; j < key[i].length; j++) {
                                replacementText += $filter('formatRtePreview')(key[i][j]);
                                if (j < key[i].length - 1) {
                                    replacementText += ',';
                                }
                            }
                            replacementText += ']';
                            if (i < key.length - 1) {
                                replacementText += ',';
                            }
                        }
                        replacementText += ']';
                    }
                    else if (varType === 'DragAndDropPositiveInt') {
                        replacementText = inputs[varName] + '';
                    }
                    else {
                        // The following case is for MultipleChoiceInput and
                        // DragAndDropHtmlString.
                        for (var i = 0; i < choices.length; i++) {
                            if (choices[i].val === inputs[varName]) {
                                var filteredLabelText = $filter('formatRtePreview')(choices[i].label);
                                replacementText = '\'' + filteredLabelText + '\'';
                            }
                        }
                    }
                    // TODO(sll): Generalize this to use the inline string representation
                    // of an object type.
                }
                else if (varType === 'MusicPhrase') {
                    replacementText = '[';
                    for (var i = 0; i < inputs[varName].length; i++) {
                        if (i !== 0) {
                            replacementText += ', ';
                        }
                        replacementText += inputs[varName][i].readableNoteName;
                    }
                    replacementText += ']';
                }
                else if (varType === 'CoordTwoDim') {
                    var latitude = inputs[varName][0] || 0.0;
                    var longitude = inputs[varName][1] || 0.0;
                    replacementText = '(';
                    replacementText += (inputs[varName][0] >= 0.0 ?
                        latitude.toFixed(2) + '°N' :
                        -latitude.toFixed(2) + '°S');
                    replacementText += ', ';
                    replacementText += (inputs[varName][1] >= 0.0 ?
                        longitude.toFixed(2) + '°E' :
                        -longitude.toFixed(2) + '°W');
                    replacementText += ')';
                }
                else if (varType === 'NormalizedString') {
                    replacementText = '"' + inputs[varName] + '"';
                }
                else if (varType === 'Graph') {
                    replacementText = '[reference graph]';
                }
                else if (varType === 'Fraction') {
                    replacementText = FractionObjectFactory
                        .fromDict(inputs[varName]).toString();
                }
                else if (varType === 'NumberWithUnits') {
                    replacementText = NumberWithUnitsObjectFactory
                        .fromDict(inputs[varName]).toString();
                }
                else if (varType === 'SetOfUnicodeString' ||
                    varType === 'SetOfNormalizedString') {
                    replacementText = '[';
                    for (var i = 0; i < inputs[varName].length; i++) {
                        if (i !== 0) {
                            replacementText += ', ';
                        }
                        replacementText += inputs[varName][i];
                    }
                    replacementText += ']';
                }
                else if (varType === 'Real' || varType === 'NonnegativeInt' ||
                    varType === 'Int') {
                    replacementText = inputs[varName] + '';
                }
                else if (varType === 'CodeString' || varType === 'UnicodeString' ||
                    varType === 'LogicErrorCategory' || varType === 'NormalizedString') {
                    replacementText = inputs[varName];
                }
                else if (varType === 'ListOfCodeEvaluation') {
                    replacementText = '[';
                    for (var i = 0; i < inputs[varName].length; i++) {
                        if (i !== 0) {
                            replacementText += ', ';
                        }
                        replacementText += inputs[varName][i].code;
                    }
                    replacementText += ']';
                }
                else {
                    throw Error('Unknown variable type in rule description');
                }
                // Replaces all occurances of $ with $$.
                // This makes sure that the next regex matching will yield
                // the same $ sign pattern as the input.
                replacementText = replacementText.split('$').join('$$');
                description = description.replace(PATTERN, ' ');
                finalDescription = finalDescription.replace(PATTERN, replacementText);
            }
            return finalDescription;
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/replace-inputs-with-ellipses.filter.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/replace-inputs-with-ellipses.filter.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview ReplaceInputsWithEllipses filter for Oppia.
 */
// Filter that replaces all {{...}} in a string with '...'.
angular.module('stringUtilityFiltersModule').filter('replaceInputsWithEllipses', [function () {
        var pattern = /\{\{\s*(\w+)\s*(\|\s*\w+\s*)?\}\}/g;
        return function (input) {
            return input ? input.replace(pattern, '...') : '';
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-ellipsis.filter.ts":
/*!*****************************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-ellipsis.filter.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview TruncateAtFirstEllipsis filter for Oppia.
 */
// Filter that truncates a string at the first '...'.
angular.module('stringUtilityFiltersModule').filter('truncateAtFirstEllipsis', [function () {
        var pattern = /\.\.\./g;
        return function (input) {
            if (!input) {
                return '';
            }
            var matchLocation = input.search(pattern);
            return matchLocation === -1 ? input : (input.substring(0, matchLocation));
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/truncate.filter.ts":
/*!***********************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/truncate.filter.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Truncate filter for Oppia.
 */
__webpack_require__(/*! filters/string-utility-filters/convert-to-plain-text.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/convert-to-plain-text.filter.ts");
// Filter that truncates long descriptors.
angular.module('stringUtilityFiltersModule').filter('truncate', ['$filter', function ($filter) {
        return function (input, length, suffix) {
            if (!input) {
                return '';
            }
            if (isNaN(length)) {
                length = 70;
            }
            if (suffix === undefined) {
                suffix = '...';
            }
            if (!angular.isString(input)) {
                input = String(input);
            }
            input = $filter('convertToPlainText')(input);
            return (input.length <= length ? input : (input.substring(0, length - suffix.length) + suffix));
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/wrap-text-with-ellipsis.filter.ts":
/*!**************************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/wrap-text-with-ellipsis.filter.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview WrapTextWithEllipsis filter for Oppia.
 */
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts");
__webpack_require__(/*! services/UtilsService.ts */ "./core/templates/dev/head/services/UtilsService.ts");
angular.module('stringUtilityFiltersModule').filter('wrapTextWithEllipsis', [
    '$filter', 'UtilsService', function ($filter, UtilsService) {
        return function (input, characterCount) {
            if (UtilsService.isString(input)) {
                input = $filter('normalizeWhitespace')(input);
                if (input.length <= characterCount || characterCount < 3) {
                    // String fits within the criteria; no wrapping is necessary.
                    return input;
                }
                // Replace characters counting backwards from character count with an
                // ellipsis, then trim the string.
                return input.substr(0, characterCount - 3).trim() + '...';
            }
            else {
                return input;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts":
/*!*************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A service that maps IDs to Angular names.
 */
angular.module('explorationEditorPageModule').factory('AngularNameService', [function () {
        var angularName = null;
        return {
            getNameOfInteractionRulesService: function (interactionId) {
                angularName = interactionId.charAt(0) +
                    interactionId.slice(1) + 'RulesService';
                return angularName;
            }
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/autosave-info-modals.service.ts":
/*!********************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/autosave-info-modals.service.ts ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for displaying different types of modals depending
 * on the type of response received as a result of the autosaving request.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/changes-in-human-readable-form.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/changes-in-human-readable-form.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-data/exploration-data.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-data/exploration-data.service.ts");
__webpack_require__(/*! services/LocalStorageService.ts */ "./core/templates/dev/head/services/LocalStorageService.ts");
angular.module('explorationEditorPageModule').factory('AutosaveInfoModalsService', [
    '$log', '$timeout', '$uibModal', '$window',
    'ChangesInHumanReadableFormService', 'ExplorationDataService',
    'LocalStorageService', 'UrlInterpolationService',
    function ($log, $timeout, $uibModal, $window, ChangesInHumanReadableFormService, ExplorationDataService, LocalStorageService, UrlInterpolationService) {
        var _isModalOpen = false;
        var _refreshPage = function (delay) {
            $timeout(function () {
                $window.location.reload();
            }, delay);
        };
        return {
            showNonStrictValidationFailModal: function () {
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/' +
                        'exploration-editor-page-templates/' +
                        'save-validation-fail-modal.template.html'),
                    // Prevent modal from closing when the user clicks outside it.
                    backdrop: 'static',
                    controller: [
                        '$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
                            $scope.closeAndRefresh = function () {
                                $uibModalInstance.dismiss('cancel');
                                _refreshPage(20);
                            };
                        }
                    ]
                }).result.then(function () {
                    _isModalOpen = false;
                }, function () {
                    _isModalOpen = false;
                });
                _isModalOpen = true;
            },
            isModalOpen: function () {
                return _isModalOpen;
            },
            showVersionMismatchModal: function (lostChanges) {
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/' +
                        'exploration-editor-page-templates/' +
                        'save-version-mismatch-modal.template.html'),
                    // Prevent modal from closing when the user clicks outside it.
                    backdrop: 'static',
                    controller: ['$scope', function ($scope) {
                            // When the user clicks on discard changes button, signal backend
                            // to discard the draft and reload the page thereafter.
                            $scope.discardChanges = function () {
                                ExplorationDataService.discardDraft(function () {
                                    _refreshPage(20);
                                });
                            };
                            $scope.hasLostChanges = (lostChanges && lostChanges.length > 0);
                            if ($scope.hasLostChanges) {
                                // TODO(sll): This should also include changes to exploration
                                // properties (such as the exploration title, category, etc.).
                                $scope.lostChangesHtml = (ChangesInHumanReadableFormService.makeHumanReadable(lostChanges).html());
                                $log.error('Lost changes: ' + JSON.stringify(lostChanges));
                            }
                        }],
                    windowClass: 'oppia-autosave-version-mismatch-modal'
                }).result.then(function () {
                    _isModalOpen = false;
                }, function () {
                    _isModalOpen = false;
                });
                _isModalOpen = true;
            },
            showLostChangesModal: function (lostChanges, explorationId) {
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/' +
                        'exploration-editor-page-templates/' +
                        'lost-changes-modal.template.html'),
                    // Prevent modal from closing when the user clicks outside it.
                    backdrop: 'static',
                    controller: ['$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
                            // When the user clicks on discard changes button, signal backend
                            // to discard the draft and reload the page thereafter.
                            $scope.close = function () {
                                LocalStorageService.removeExplorationDraft(explorationId);
                                $uibModalInstance.dismiss('cancel');
                            };
                            $scope.lostChangesHtml = (ChangesInHumanReadableFormService.makeHumanReadable(lostChanges).html());
                            $log.error('Lost changes: ' + JSON.stringify(lostChanges));
                        }],
                    windowClass: 'oppia-lost-changes-modal'
                }).result.then(function () {
                    _isModalOpen = false;
                }, function () {
                    _isModalOpen = false;
                });
                _isModalOpen = true;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/change-list.service.ts":
/*!***********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/change-list.service.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A service that maintains a provisional list of changes to be
 * committed to the server.
 */
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/autosave-info-modals.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/autosave-info-modals.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-data/exploration-data.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-data/exploration-data.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('explorationEditorPageModule').factory('ChangeListService', [
    '$log', '$rootScope', 'AlertsService', 'AutosaveInfoModalsService',
    'ExplorationDataService',
    function ($log, $rootScope, AlertsService, AutosaveInfoModalsService, ExplorationDataService) {
        // TODO(sll): Implement undo, redo functionality. Show a message on each
        // step saying what the step is doing.
        // TODO(sll): Allow the user to view the list of changes made so far, as
        // well as the list of changes in the undo stack.
        // Temporary buffer for changes made to the exploration.
        var explorationChangeList = [];
        // Stack for storing undone changes. The last element is the most recently
        // undone change.
        var undoneChangeStack = [];
        // All these constants should correspond to those in exp_domain.py.
        // TODO(sll): Enforce this in code.
        var CMD_ADD_STATE = 'add_state';
        var CMD_RENAME_STATE = 'rename_state';
        var CMD_DELETE_STATE = 'delete_state';
        var CMD_EDIT_STATE_PROPERTY = 'edit_state_property';
        var CMD_EDIT_EXPLORATION_PROPERTY = 'edit_exploration_property';
        var ALLOWED_EXPLORATION_BACKEND_NAMES = {
            category: true,
            init_state_name: true,
            language_code: true,
            objective: true,
            param_changes: true,
            param_specs: true,
            tags: true,
            title: true,
            auto_tts_enabled: true,
            correctness_feedback_enabled: true
        };
        var ALLOWED_STATE_BACKEND_NAMES = {
            answer_groups: true,
            confirmed_unclassified_answers: true,
            content: true,
            recorded_voiceovers: true,
            default_outcome: true,
            hints: true,
            param_changes: true,
            param_specs: true,
            solution: true,
            state_name: true,
            widget_customization_args: true,
            widget_id: true,
            written_translations: true
        };
        var autosaveChangeListOnChange = function (explorationChangeList) {
            // Asynchronously send an autosave request, and check for errors in the
            // response:
            // If error is present -> Check for the type of error occurred
            // (Display the corresponding modals in both cases, if not already
            // opened):
            // - Version Mismatch.
            // - Non-strict Validation Fail.
            ExplorationDataService.autosaveChangeList(explorationChangeList, function (response) {
                if (!response.data.is_version_of_draft_valid) {
                    if (!AutosaveInfoModalsService.isModalOpen()) {
                        AutosaveInfoModalsService.showVersionMismatchModal(explorationChangeList);
                    }
                }
            }, function () {
                AlertsService.clearWarnings();
                $log.error('nonStrictValidationFailure: ' +
                    JSON.stringify(explorationChangeList));
                if (!AutosaveInfoModalsService.isModalOpen()) {
                    AutosaveInfoModalsService.showNonStrictValidationFailModal();
                }
            });
        };
        var addChange = function (changeDict) {
            if ($rootScope.loadingMessage) {
                return;
            }
            explorationChangeList.push(changeDict);
            undoneChangeStack = [];
            autosaveChangeListOnChange(explorationChangeList);
        };
        return {
            /**
             * Saves a change dict that represents adding a new state. It is the
             * responsbility of the caller to check that the new state name is valid.
             *
             * @param {string} stateName - The name of the newly-added state
             */
            addState: function (stateName) {
                addChange({
                    cmd: CMD_ADD_STATE,
                    state_name: stateName
                });
            },
            /**
             * Saves a change dict that represents deleting a new state. It is the
             * responsbility of the caller to check that the deleted state name
             * corresponds to an existing state.
             *
             * @param {string} stateName - The name of the deleted state.
             */
            deleteState: function (stateName) {
                addChange({
                    cmd: CMD_DELETE_STATE,
                    state_name: stateName
                });
            },
            discardAllChanges: function () {
                explorationChangeList = [];
                undoneChangeStack = [];
                ExplorationDataService.discardDraft();
            },
            /**
             * Saves a change dict that represents a change to an exploration
             * property (such as its title, category, ...). It is the responsibility
             * of the caller to check that the old and new values are not equal.
             *
             * @param {string} backendName - The backend name of the property
             *   (e.g. title, category)
             * @param {string} newValue - The new value of the property
             * @param {string} oldValue - The previous value of the property
             */
            editExplorationProperty: function (backendName, newValue, oldValue) {
                if (!ALLOWED_EXPLORATION_BACKEND_NAMES.hasOwnProperty(backendName)) {
                    AlertsService.addWarning('Invalid exploration property: ' + backendName);
                    return;
                }
                addChange({
                    cmd: CMD_EDIT_EXPLORATION_PROPERTY,
                    new_value: angular.copy(newValue),
                    old_value: angular.copy(oldValue),
                    property_name: backendName
                });
            },
            /**
             * Saves a change dict that represents a change to a state property. It
             * is the responsibility of the caller to check that the old and new
             * values are not equal.
             *
             * @param {string} stateName - The name of the state that is being edited
             * @param {string} backendName - The backend name of the edited property
             * @param {string} newValue - The new value of the property
             * @param {string} oldValue - The previous value of the property
             */
            editStateProperty: function (stateName, backendName, newValue, oldValue) {
                if (!ALLOWED_STATE_BACKEND_NAMES.hasOwnProperty(backendName)) {
                    AlertsService.addWarning('Invalid state property: ' + backendName);
                    return;
                }
                addChange({
                    cmd: CMD_EDIT_STATE_PROPERTY,
                    new_value: angular.copy(newValue),
                    old_value: angular.copy(oldValue),
                    property_name: backendName,
                    state_name: stateName
                });
            },
            getChangeList: function () {
                return angular.copy(explorationChangeList);
            },
            isExplorationLockedForEditing: function () {
                return explorationChangeList.length > 0;
            },
            /**
             * Initializes the current changeList with the one received from backend.
             * This behavior exists only in case of an autosave.
             *
             * @param {object} changeList - Autosaved changeList data
             */
            loadAutosavedChangeList: function (changeList) {
                explorationChangeList = changeList;
            },
            /**
             * Saves a change dict that represents the renaming of a state. This
             * is also intended to change the initial state name if necessary
             * (that is, the latter change is implied and does not have to be
             * recorded separately in another change dict). It is the responsibility
             * of the caller to check that the two names are not equal.
             *
             * @param {string} newStateName - The new name of the state
             * @param {string} oldStateName - The previous name of the state
             */
            renameState: function (newStateName, oldStateName) {
                addChange({
                    cmd: CMD_RENAME_STATE,
                    new_state_name: newStateName,
                    old_state_name: oldStateName
                });
            },
            undoLastChange: function () {
                if (explorationChangeList.length === 0) {
                    AlertsService.addWarning('There are no changes to undo.');
                    return;
                }
                var lastChange = explorationChangeList.pop();
                undoneChangeStack.push(lastChange);
                autosaveChangeListOnChange(explorationChangeList);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/changes-in-human-readable-form.service.ts":
/*!******************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/changes-in-human-readable-form.service.ts ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to get changes in human readable form.
 */
__webpack_require__(/*! services/UtilsService.ts */ "./core/templates/dev/head/services/UtilsService.ts");
angular.module('explorationEditorPageModule').factory('ChangesInHumanReadableFormService', [
    'UtilsService', function (UtilsService) {
        var CMD_ADD_STATE = 'add_state';
        var CMD_RENAME_STATE = 'rename_state';
        var CMD_DELETE_STATE = 'delete_state';
        var CMD_EDIT_STATE_PROPERTY = 'edit_state_property';
        var makeRulesListHumanReadable = function (answerGroupValue) {
            var rulesList = [];
            answerGroupValue.rules.forEach(function (rule) {
                var ruleElm = angular.element('<li></li>');
                ruleElm.html('<p>Type: ' + rule.type + '</p>');
                ruleElm.append('<p>Value: ' + (Object.keys(rule.inputs).map(function (input) {
                    return rule.inputs[input];
                })).toString() + '</p>');
                rulesList.push(ruleElm);
            });
            return rulesList;
        };
        // An edit is represented either as an object or an array. If it's an
        // object, then simply return that object. In case of an array, return
        // the last item.
        var getStatePropertyValue = function (statePropertyValue) {
            return angular.isArray(statePropertyValue) ?
                statePropertyValue[statePropertyValue.length - 1] : statePropertyValue;
        };
        // Detects whether an object of the type 'answer_group' or
        // 'default_outcome' has been added, edited or deleted.
        // Returns - 'addded', 'edited' or 'deleted' accordingly.
        var getRelativeChangeToGroups = function (changeObject) {
            var newValue = changeObject.new_value;
            var oldValue = changeObject.old_value;
            var result = '';
            if (angular.isArray(newValue) && angular.isArray(oldValue)) {
                result = (newValue.length > oldValue.length) ?
                    'added' : (newValue.length === oldValue.length) ?
                    'edited' : 'deleted';
            }
            else {
                if (!UtilsService.isEmpty(oldValue)) {
                    if (!UtilsService.isEmpty(newValue)) {
                        result = 'edited';
                    }
                    else {
                        result = 'deleted';
                    }
                }
                else if (!UtilsService.isEmpty(newValue)) {
                    result = 'added';
                }
            }
            return result;
        };
        var makeHumanReadable = function (lostChanges) {
            var outerHtml = angular.element('<ul></ul>');
            var stateWiseEditsMapping = {};
            // The variable stateWiseEditsMapping stores the edits grouped by state.
            // For instance, you made the following edits:
            // 1. Changed content to 'Welcome!' instead of '' in 'Introduction'.
            // 2. Added an interaction in this state.
            // 2. Added a new state 'End'.
            // 3. Ended Exporation from state 'End'.
            // stateWiseEditsMapping will look something like this:
            // - 'Introduction': [
            //   - 'Edited Content: Welcome!',:
            //   - 'Added Interaction: Continue',
            //   - 'Added interaction customizations']
            // - 'End': ['Ended exploration']
            lostChanges.forEach(function (lostChange) {
                switch (lostChange.cmd) {
                    case CMD_ADD_STATE:
                        outerHtml.append(angular.element('<li></li>').html('Added state: ' + lostChange.state_name));
                        break;
                    case CMD_RENAME_STATE:
                        outerHtml.append(angular.element('<li></li>').html('Renamed state: ' + lostChange.old_state_name + ' to ' +
                            lostChange.new_state_name));
                        break;
                    case CMD_DELETE_STATE:
                        outerHtml.append(angular.element('<li></li>').html('Deleted state: ' + lostChange.state_name));
                        break;
                    case CMD_EDIT_STATE_PROPERTY:
                        var newValue = getStatePropertyValue(lostChange.new_value);
                        var oldValue = getStatePropertyValue(lostChange.old_value);
                        var stateName = lostChange.state_name;
                        if (!stateWiseEditsMapping[stateName]) {
                            stateWiseEditsMapping[stateName] = [];
                        }
                        switch (lostChange.property_name) {
                            case 'content':
                                if (newValue !== null) {
                                    // TODO(sll): Also add display of audio translations here.
                                    stateWiseEditsMapping[stateName].push(angular.element('<div></div>').html('<strong>Edited content: ' +
                                        '</strong><div class="content">' + newValue.html +
                                        '</div>')
                                        .addClass('state-edit-desc'));
                                }
                                break;
                            case 'widget_id':
                                var lostChangeValue = '';
                                if (oldValue === null) {
                                    if (newValue !== 'EndExploration') {
                                        lostChangeValue = ('<strong>Added Interaction: ' +
                                            '</strong>' + newValue);
                                    }
                                    else {
                                        lostChangeValue = 'Ended Exploration';
                                    }
                                }
                                else {
                                    lostChangeValue = ('<strong>Deleted Interaction: ' +
                                        '</strong>' + oldValue);
                                }
                                stateWiseEditsMapping[stateName].push(angular.element('<div></div>').html(lostChangeValue)
                                    .addClass('state-edit-desc'));
                                break;
                            case 'widget_customization_args':
                                var lostChangeValue = '';
                                if (UtilsService.isEmpty(oldValue)) {
                                    lostChangeValue = 'Added Interaction Customizations';
                                }
                                else if (UtilsService.isEmpty(newValue)) {
                                    lostChangeValue = 'Removed Interaction Customizations';
                                }
                                else {
                                    lostChangeValue = 'Edited Interaction Customizations';
                                }
                                stateWiseEditsMapping[stateName].push(angular.element('<div></div>').html(lostChangeValue)
                                    .addClass('state-edit-desc'));
                                break;
                            case 'answer_groups':
                                var answerGroupChanges = getRelativeChangeToGroups(lostChange);
                                var answerGroupHtml = '';
                                if (answerGroupChanges === 'added') {
                                    answerGroupHtml += ('<p class="sub-edit"><i>Destination: </i>' +
                                        newValue.outcome.dest + '</p>');
                                    answerGroupHtml += ('<div class="sub-edit"><i>Feedback: </i>' +
                                        '<div class="feedback">' +
                                        newValue.outcome.feedback.getHtml() + '</div></div>');
                                    var rulesList = makeRulesListHumanReadable(newValue);
                                    if (rulesList.length > 0) {
                                        answerGroupHtml += ('<p class="sub-edit"><i>Rules: </i></p>');
                                        var rulesListHtml = (angular.element('<ol></ol>').addClass('rules-list'));
                                        for (var rule in rulesList) {
                                            rulesListHtml.html(rulesList[rule][0].outerHTML);
                                        }
                                        answerGroupHtml += rulesListHtml[0].outerHTML;
                                    }
                                    stateWiseEditsMapping[stateName].push(angular.element('<div><strong>Added answer group: ' +
                                        '</strong></div>')
                                        .append(answerGroupHtml)
                                        .addClass('state-edit-desc answer-group'));
                                }
                                else if (answerGroupChanges === 'edited') {
                                    if (newValue.outcome.dest !== oldValue.outcome.dest) {
                                        answerGroupHtml += ('<p class="sub-edit"><i>Destination: </i>' +
                                            newValue.outcome.dest + '</p>');
                                    }
                                    if (!angular.equals(newValue.outcome.feedback.getHtml(), oldValue.outcome.feedback.getHtml())) {
                                        answerGroupHtml += ('<div class="sub-edit"><i>Feedback: </i>' +
                                            '<div class="feedback">' +
                                            newValue.outcome.feedback.getHtml() +
                                            '</div></div>');
                                    }
                                    if (!angular.equals(newValue.rules, oldValue.rules)) {
                                        var rulesList = makeRulesListHumanReadable(newValue);
                                        if (rulesList.length > 0) {
                                            answerGroupHtml += ('<p class="sub-edit"><i>Rules: </i></p>');
                                            var rulesListHtml = (angular.element('<ol></ol>')
                                                .addClass('rules-list'));
                                            for (var rule in rulesList) {
                                                rulesListHtml.html(rulesList[rule][0].outerHTML);
                                            }
                                            answerGroupChanges = rulesListHtml[0].outerHTML;
                                        }
                                    }
                                    stateWiseEditsMapping[stateName].push(angular.element('<div><strong>Edited answer group: <strong>' +
                                        '</div>')
                                        .append(answerGroupHtml)
                                        .addClass('state-edit-desc answer-group'));
                                }
                                else if (answerGroupChanges === 'deleted') {
                                    stateWiseEditsMapping[stateName].push(angular.element('<div>Deleted answer group</div>')
                                        .addClass('state-edit-desc'));
                                }
                                break;
                            case 'default_outcome':
                                var defaultOutcomeChanges = getRelativeChangeToGroups(lostChange);
                                var defaultOutcomeHtml = '';
                                if (defaultOutcomeChanges === 'added') {
                                    defaultOutcomeHtml += ('<p class="sub-edit"><i>Destination: </i>' +
                                        newValue.dest + '</p>');
                                    defaultOutcomeHtml += ('<div class="sub-edit"><i>Feedback: </i>' +
                                        '<div class="feedback">' + newValue.feedback.getHtml() +
                                        '</div></div>');
                                    stateWiseEditsMapping[stateName].push(angular.element('<div>Added default outcome: </div>')
                                        .append(defaultOutcomeHtml)
                                        .addClass('state-edit-desc default-outcome'));
                                }
                                else if (defaultOutcomeChanges === 'edited') {
                                    if (newValue.dest !== oldValue.dest) {
                                        defaultOutcomeHtml += ('<p class="sub-edit"><i>Destination: </i>' +
                                            newValue.dest +
                                            '</p>');
                                    }
                                    if (!angular.equals(newValue.feedback.getHtml(), oldValue.feedback.getHtml())) {
                                        defaultOutcomeHtml += ('<div class="sub-edit"><i>Feedback: </i>' +
                                            '<div class="feedback">' + newValue.feedback +
                                            '</div></div>');
                                    }
                                    stateWiseEditsMapping[stateName].push(angular.element('<div>Edited default outcome: </div>')
                                        .append(defaultOutcomeHtml)
                                        .addClass('state-edit-desc default-outcome'));
                                }
                                else if (defaultOutcomeChanges === 'deleted') {
                                    stateWiseEditsMapping[stateName].push(angular.element('<div>Deleted default outcome</div>')
                                        .addClass('state-edit-desc'));
                                }
                        }
                }
            });
            for (var stateName in stateWiseEditsMapping) {
                var stateChangesEl = angular.element('<li>Edits to state: ' + stateName + '</li>');
                for (var stateEdit in stateWiseEditsMapping[stateName]) {
                    stateChangesEl.append(stateWiseEditsMapping[stateName][stateEdit]);
                }
                outerHtml.append(stateChangesEl);
            }
            return outerHtml;
        };
        return {
            makeHumanReadable: function (lostChanges) {
                try {
                    return makeHumanReadable(lostChanges);
                }
                catch (e) {
                    return angular.element('<div>Error: Could not recover lost changes.</div>');
                }
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/editor-first-time-events.service.ts":
/*!************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/editor-first-time-events.service.ts ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A Service registering analytics events for the editor
 * for events which are  only logged when they happen after the editor
 * is opened for the first time for an exploration.
 */
__webpack_require__(/*! services/SiteAnalyticsService.ts */ "./core/templates/dev/head/services/SiteAnalyticsService.ts");
angular.module('explorationEditorPageModule').factory('EditorFirstTimeEventsService', [
    'SiteAnalyticsService',
    function (SiteAnalyticsService) {
        var explorationId = null;
        var shouldRegisterEvents = false;
        var alreadyRegisteredEvents = {
            EditorFirstEntryEvent: null,
            FirstOpenContentBoxEvent: null,
            FirstSaveContentEvent: null,
            FirstClickAddInteractionEvent: null,
            FirstSelectInteractionTypeEvent: null,
            FirstSaveInteractionEvent: null,
            FirstSaveRuleEvent: null,
            FirstCreateSecondStateEvent: null
        };
        return {
            initRegisterEvents: function (expId) {
                shouldRegisterEvents = true;
                explorationId = expId;
            },
            registerEditorFirstEntryEvent: function () {
                if (shouldRegisterEvents &&
                    alreadyRegisteredEvents.EditorFirstEntryEvent === null) {
                    SiteAnalyticsService.registerEditorFirstEntryEvent(explorationId);
                    alreadyRegisteredEvents.EditorFirstEntryEvent = true;
                }
            },
            registerFirstOpenContentBoxEvent: function () {
                if (shouldRegisterEvents &&
                    alreadyRegisteredEvents.FirstOpenContentBoxEvent === null) {
                    SiteAnalyticsService.registerFirstOpenContentBoxEvent(explorationId);
                    alreadyRegisteredEvents.FirstOpenContentBoxEvent = true;
                }
            },
            registerFirstSaveContentEvent: function () {
                if (shouldRegisterEvents &&
                    alreadyRegisteredEvents.FirstSaveContentEvent === null) {
                    SiteAnalyticsService.registerFirstSaveContentEvent(explorationId);
                    alreadyRegisteredEvents.FirstSaveContentEvent = true;
                }
            },
            registerFirstClickAddInteractionEvent: function () {
                if (shouldRegisterEvents &&
                    alreadyRegisteredEvents.FirstClickAddInteractionEvent === null) {
                    SiteAnalyticsService.registerFirstClickAddInteractionEvent(explorationId);
                    alreadyRegisteredEvents.FirstClickAddInteractionEvent = true;
                }
            },
            registerFirstSelectInteractionTypeEvent: function () {
                if (shouldRegisterEvents &&
                    alreadyRegisteredEvents
                        .FirstSelectInteractionTypeEvent === null) {
                    SiteAnalyticsService.registerFirstSelectInteractionTypeEvent(explorationId);
                    alreadyRegisteredEvents.FirstSelectInteractionTypeEvent = true;
                }
            },
            registerFirstSaveInteractionEvent: function () {
                if (shouldRegisterEvents &&
                    alreadyRegisteredEvents.FirstSaveInteractionEvent === null) {
                    SiteAnalyticsService.registerFirstSaveInteractionEvent(explorationId);
                    alreadyRegisteredEvents.FirstSaveInteractionEvent = true;
                }
            },
            registerFirstSaveRuleEvent: function () {
                if (shouldRegisterEvents &&
                    alreadyRegisteredEvents.FirstSaveRuleEvent === null) {
                    SiteAnalyticsService.registerFirstSaveRuleEvent(explorationId);
                    alreadyRegisteredEvents.FirstSaveRuleEvent = true;
                }
            },
            registerFirstCreateSecondStateEvent: function () {
                if (shouldRegisterEvents &&
                    alreadyRegisteredEvents.FirstCreateSecondStateEvent === null) {
                    SiteAnalyticsService.registerFirstCreateSecondStateEvent(explorationId);
                    alreadyRegisteredEvents.FirstCreateSecondStateEvent = true;
                }
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-data/exploration-data.service.ts":
/*!*********************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-data/exploration-data.service.ts ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 *  @fileoverview Service for handling all interactions
 *  with the exploration editor backend.
 */
__webpack_require__(/*! domain/exploration/EditableExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/EditableExplorationBackendApiService.ts");
__webpack_require__(/*! domain/exploration/ReadOnlyExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/LocalStorageService.ts */ "./core/templates/dev/head/services/LocalStorageService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('explorationEditorPageModule').factory('ExplorationDataService', [
    '$http', '$log', '$q', '$window', 'AlertsService',
    'EditableExplorationBackendApiService', 'LocalStorageService',
    'ReadOnlyExplorationBackendApiService', 'UrlService',
    function ($http, $log, $q, $window, AlertsService, EditableExplorationBackendApiService, LocalStorageService, ReadOnlyExplorationBackendApiService, UrlService) {
        // The pathname (without the hash) should be: .../create/{exploration_id}
        var explorationId = '';
        var draftChangeListId = null;
        var pathnameArray = UrlService.getPathname().split('/');
        for (var i = 0; i < pathnameArray.length; i++) {
            if (pathnameArray[i] === 'create') {
                explorationId = pathnameArray[i + 1];
                break;
            }
        }
        if (!explorationId) {
            $log.error('Unexpected call to ExplorationDataService for pathname ', pathnameArray[i]);
            // Note: if we do not return anything, Karma unit tests fail.
            return {};
        }
        var resolvedAnswersUrlPrefix = ('/createhandler/resolved_answers/' + explorationId);
        var explorationDraftAutosaveUrl = '';
        if (GLOBALS.can_edit) {
            explorationDraftAutosaveUrl = ('/createhandler/autosave_draft/' + explorationId);
        }
        else if (GLOBALS.can_translate) {
            explorationDraftAutosaveUrl = ('/createhandler/autosave_translation_draft/' + explorationId);
        }
        // Put exploration variables here.
        var explorationData = {
            explorationId: explorationId,
            data: null,
            // Note that the changeList is the full changeList since the last
            // committed version (as opposed to the most recent autosave).
            autosaveChangeList: function (changeList, successCallback, errorCallback) {
                if (successCallback === void 0) { successCallback = function (response) { }; }
                if (errorCallback === void 0) { errorCallback = function () { }; }
                // First save locally to be retrieved later if save is unsuccessful.
                LocalStorageService.saveExplorationDraft(explorationId, changeList, draftChangeListId);
                $http.put(explorationDraftAutosaveUrl, {
                    change_list: changeList,
                    version: explorationData.data.version
                }).then(function (response) {
                    draftChangeListId = response.data.draft_change_list_id;
                    // We can safely remove the locally saved draft copy if it was saved
                    // to the backend.
                    LocalStorageService.removeExplorationDraft(explorationId);
                    if (successCallback) {
                        successCallback(response);
                    }
                }, function () {
                    if (errorCallback) {
                        errorCallback();
                    }
                });
            },
            discardDraft: function (successCallback, errorCallback) {
                $http.post(explorationDraftAutosaveUrl, {}).then(function () {
                    LocalStorageService.removeExplorationDraft(explorationId);
                    if (successCallback) {
                        successCallback();
                    }
                }, function () {
                    if (errorCallback) {
                        errorCallback();
                    }
                });
            },
            // Returns a promise that supplies the data for the current exploration.
            getData: function (errorCallback) {
                if (explorationData.data) {
                    $log.info('Found exploration data in cache.');
                    return $q.resolve(explorationData.data);
                }
                else {
                    // Retrieve data from the server.
                    // WARNING: Note that this is a version of the exploration with
                    // draft changes applied. This makes a force-refresh necessary when
                    // changes are discarded, otherwise the
                    // exploration-with-draft-changes (which is cached here) will be
                    // reused.
                    return (EditableExplorationBackendApiService.fetchApplyDraftExploration(explorationId).then(function (response) {
                        $log.info('Retrieved exploration data.');
                        $log.info(response);
                        draftChangeListId = response.draft_change_list_id;
                        explorationData.data = response;
                        var draft = LocalStorageService.getExplorationDraft(explorationId);
                        if (draft) {
                            if (draft.isValid(draftChangeListId)) {
                                var changeList = draft.getChanges();
                                explorationData.autosaveChangeList(changeList, function () {
                                    // A reload is needed so that the changelist just saved is
                                    // loaded as opposed to the exploration returned by this
                                    // response.
                                    $window.location.reload();
                                });
                            }
                            else {
                                errorCallback(explorationId, draft.getChanges());
                            }
                        }
                        return response;
                    }));
                }
            },
            // Returns a promise supplying the last saved version for the current
            // exploration.
            getLastSavedData: function () {
                return ReadOnlyExplorationBackendApiService.loadLatestExploration(explorationId).then(function (response) {
                    $log.info('Retrieved saved exploration data.');
                    $log.info(response);
                    return response.exploration;
                });
            },
            resolveAnswers: function (stateName, resolvedAnswersList) {
                AlertsService.clearWarnings();
                $http.put(resolvedAnswersUrlPrefix + '/' + encodeURIComponent(stateName), {
                    resolved_answers: resolvedAnswersList
                });
            },
            /**
             * Saves the exploration to the backend, and, on a success callback,
             * updates the local copy of the exploration data.
             * @param {object} changeList - Represents the change list for
             *   this save. Each element of the list is a command representing an
             *   editing action (such as add state, delete state, etc.). See the
             *  _'Change' class in exp_services.py for full documentation.
             * @param {string} commitMessage - The user-entered commit message for
             *   this save operation.
             */
            save: function (changeList, commitMessage, successCallback, errorCallback) {
                EditableExplorationBackendApiService.updateExploration(explorationId, explorationData.data.version, commitMessage, changeList).then(function (response) {
                    AlertsService.clearWarnings();
                    explorationData.data = response;
                    if (successCallback) {
                        successCallback(response.is_version_of_draft_valid, response.draft_changes);
                    }
                }, function () {
                    if (errorCallback) {
                        errorCallback();
                    }
                });
            }
        };
        return explorationData;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-init-state-name.service.ts":
/*!***************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-init-state-name.service.ts ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A data service that stores the name of the exploration's
 * initial state. NOTE: This service does not perform validation. Users of this
 * service should ensure that new initial state names passed to the service are
 * valid.
 */
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-property.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-property.service.ts");
angular.module('explorationEditorPageModule').factory('ExplorationInitStateNameService', [
    'ExplorationPropertyService', function (ExplorationPropertyService) {
        var child = Object.create(ExplorationPropertyService);
        child.propertyName = 'init_state_name';
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-param-changes.service.ts":
/*!*************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-param-changes.service.ts ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Services for storing exploration properties for
 * changes to parameters.
 */
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-property.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-property.service.ts");
angular.module('explorationEditorPageModule').factory('ExplorationParamChangesService', [
    'ExplorationPropertyService', function (ExplorationPropertyService) {
        var child = Object.create(ExplorationPropertyService);
        child.propertyName = 'param_changes';
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-property.service.ts":
/*!********************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-property.service.ts ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Services for storing exploration properties for
 * displaying and editing them in multiple places in the UI,
 * with base class as ExplorationPropertyService.
 */
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/change-list.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/change-list.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('explorationEditorPageModule').factory('ExplorationPropertyService', [
    '$log', '$rootScope', 'AlertsService', 'ChangeListService',
    function ($log, $rootScope, AlertsService, ChangeListService) {
        // Public base API for data services corresponding to exploration
        // properties (title, category, etc.)
        var BACKEND_CONVERSIONS = {
            param_changes: function (paramChanges) {
                return paramChanges.map(function (paramChange) {
                    return paramChange.toBackendDict();
                });
            },
            param_specs: function (paramSpecs) {
                return paramSpecs.toBackendDict();
            },
        };
        return {
            init: function (value) {
                if (this.propertyName === null) {
                    throw 'Exploration property name cannot be null.';
                }
                $log.info('Initializing exploration ' + this.propertyName + ':', value);
                // The current value of the property (which may not have been saved to
                // the frontend yet). In general, this will be bound directly to the
                // UI.
                this.displayed = angular.copy(value);
                // The previous (saved-in-the-frontend) value of the property. Here,
                // 'saved' means that this is the latest value of the property as
                // determined by the frontend change list.
                this.savedMemento = angular.copy(value);
                $rootScope.$broadcast('explorationPropertyChanged');
            },
            // Returns whether the current value has changed from the memento.
            hasChanged: function () {
                return !angular.equals(this.savedMemento, this.displayed);
            },
            // The backend name for this property. THIS MUST BE SPECIFIED BY
            // SUBCLASSES.
            propertyName: null,
            // Transforms the given value into a normalized form. THIS CAN BE
            // OVERRIDDEN BY SUBCLASSES. The default behavior is to do nothing.
            _normalize: function (value) {
                return value;
            },
            // Validates the given value and returns a boolean stating whether it
            // is valid or not. THIS CAN BE OVERRIDDEN BY SUBCLASSES. The default
            // behavior is to always return true.
            _isValid: function (value) {
                return true;
            },
            // Normalizes the displayed value. Then, if the memento and the
            // displayed value are the same, does nothing. Otherwise, creates a new
            // entry in the change list, and updates the memento to the displayed
            // value.
            saveDisplayedValue: function () {
                if (this.propertyName === null) {
                    throw 'Exploration property name cannot be null.';
                }
                this.displayed = this._normalize(this.displayed);
                if (!this._isValid(this.displayed) || !this.hasChanged()) {
                    this.restoreFromMemento();
                    return;
                }
                if (angular.equals(this.displayed, this.savedMemento)) {
                    return;
                }
                AlertsService.clearWarnings();
                var newBackendValue = angular.copy(this.displayed);
                var oldBackendValue = angular.copy(this.savedMemento);
                if (BACKEND_CONVERSIONS.hasOwnProperty(this.propertyName)) {
                    newBackendValue =
                        BACKEND_CONVERSIONS[this.propertyName](this.displayed);
                    oldBackendValue =
                        BACKEND_CONVERSIONS[this.propertyName](this.savedMemento);
                }
                ChangeListService.editExplorationProperty(this.propertyName, newBackendValue, oldBackendValue);
                this.savedMemento = angular.copy(this.displayed);
                $rootScope.$broadcast('explorationPropertyChanged');
            },
            // Reverts the displayed value to the saved memento.
            restoreFromMemento: function () {
                this.displayed = angular.copy(this.savedMemento);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts":
/*!*************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Data service for keeping track of the exploration's states.
 * Note that this is unlike the other exploration property services, in that it
 * keeps no mementos.
 */
__webpack_require__(/*! domain/exploration/StatesObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/StatesObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/change-list.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/change-list.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-init-state-name.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-init-state-name.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts");
__webpack_require__(/*! pages/exploration_player/AnswerClassificationService.ts */ "./core/templates/dev/head/pages/exploration_player/AnswerClassificationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/ValidatorsService.ts */ "./core/templates/dev/head/services/ValidatorsService.ts");
angular.module('explorationEditorPageModule').factory('ExplorationStatesService', [
    '$filter', '$injector', '$location', '$log', '$q', '$rootScope',
    '$uibModal', 'AlertsService', 'AngularNameService',
    'AnswerClassificationService', 'ChangeListService', 'ContextService',
    'ExplorationInitStateNameService', 'SolutionValidityService',
    'StateEditorService', 'StatesObjectFactory', 'UrlInterpolationService',
    'ValidatorsService',
    function ($filter, $injector, $location, $log, $q, $rootScope, $uibModal, AlertsService, AngularNameService, AnswerClassificationService, ChangeListService, ContextService, ExplorationInitStateNameService, SolutionValidityService, StateEditorService, StatesObjectFactory, UrlInterpolationService, ValidatorsService) {
        var _states = null;
        var stateAddedCallbacks = [];
        var stateDeletedCallbacks = [];
        var stateRenamedCallbacks = [];
        var stateAnswerGroupsSavedCallbacks = [];
        // Properties that have a different backend representation from the
        // frontend and must be converted.
        var BACKEND_CONVERSIONS = {
            answer_groups: function (answerGroups) {
                return answerGroups.map(function (answerGroup) {
                    return answerGroup.toBackendDict();
                });
            },
            content: function (content) {
                return content.toBackendDict();
            },
            recorded_voiceovers: function (recordedVoiceovers) {
                return recordedVoiceovers.toBackendDict();
            },
            default_outcome: function (defaultOutcome) {
                if (defaultOutcome) {
                    return defaultOutcome.toBackendDict();
                }
                else {
                    return null;
                }
            },
            hints: function (hints) {
                return hints.map(function (hint) {
                    return hint.toBackendDict();
                });
            },
            param_changes: function (paramChanges) {
                return paramChanges.map(function (paramChange) {
                    return paramChange.toBackendDict();
                });
            },
            param_specs: function (paramSpecs) {
                return paramSpecs.toBackendDict();
            },
            solution: function (solution) {
                if (solution) {
                    return solution.toBackendDict();
                }
                else {
                    return null;
                }
            },
            written_translations: function (writtenTranslations) {
                return writtenTranslations.toBackendDict();
            }
        };
        // Maps backend names to the corresponding frontend dict accessor lists.
        var PROPERTY_REF_DATA = {
            answer_groups: ['interaction', 'answerGroups'],
            confirmed_unclassified_answers: [
                'interaction', 'confirmedUnclassifiedAnswers'
            ],
            content: ['content'],
            recorded_voiceovers: ['recordedVoiceovers'],
            default_outcome: ['interaction', 'defaultOutcome'],
            param_changes: ['paramChanges'],
            param_specs: ['paramSpecs'],
            hints: ['interaction', 'hints'],
            solution: ['interaction', 'solution'],
            widget_id: ['interaction', 'id'],
            widget_customization_args: ['interaction', 'customizationArgs'],
            written_translations: ['writtenTranslations']
        };
        var CONTENT_ID_EXTRACTORS = {
            answer_groups: function (answerGroups) {
                var contentIds = new Set();
                answerGroups.forEach(function (answerGroup) {
                    contentIds.add(answerGroup.outcome.feedback.getContentId());
                });
                return contentIds;
            },
            default_outcome: function (defaultOutcome) {
                var contentIds = new Set();
                if (defaultOutcome) {
                    contentIds.add(defaultOutcome.feedback.getContentId());
                }
                return contentIds;
            },
            hints: function (hints) {
                var contentIds = new Set();
                hints.forEach(function (hint) {
                    contentIds.add(hint.hintContent.getContentId());
                });
                return contentIds;
            },
            solution: function (solution) {
                var contentIds = new Set();
                if (solution) {
                    contentIds.add(solution.explanation.getContentId());
                }
                return contentIds;
            }
        };
        var _getElementsInFirstSetButNotInSecond = function (setA, setB) {
            var diffList = Array.from(setA).filter(function (element) {
                return !setB.has(element);
            });
            return diffList;
        };
        var _setState = function (stateName, stateData, refreshGraph) {
            _states.setState(stateName, angular.copy(stateData));
            if (refreshGraph) {
                $rootScope.$broadcast('refreshGraph');
            }
        };
        var getStatePropertyMemento = function (stateName, backendName) {
            var accessorList = PROPERTY_REF_DATA[backendName];
            var propertyRef = _states.getState(stateName);
            try {
                accessorList.forEach(function (key) {
                    propertyRef = propertyRef[key];
                });
            }
            catch (e) {
                var additionalInfo = ('\nUndefined states error debug logs:' +
                    '\nRequested state name: ' + stateName +
                    '\nExploration ID: ' + ContextService.getExplorationId() +
                    '\nChange list: ' + JSON.stringify(ChangeListService.getChangeList()) +
                    '\nAll states names: ' + _states.getStateNames());
                e.message += additionalInfo;
                throw e;
            }
            return angular.copy(propertyRef);
        };
        var saveStateProperty = function (stateName, backendName, newValue) {
            var oldValue = getStatePropertyMemento(stateName, backendName);
            var newBackendValue = angular.copy(newValue);
            var oldBackendValue = angular.copy(oldValue);
            if (BACKEND_CONVERSIONS.hasOwnProperty(backendName)) {
                newBackendValue = convertToBackendRepresentation(newValue, backendName);
                oldBackendValue = convertToBackendRepresentation(oldValue, backendName);
            }
            if (!angular.equals(oldValue, newValue)) {
                ChangeListService.editStateProperty(stateName, backendName, newBackendValue, oldBackendValue);
                var newStateData = _states.getState(stateName);
                var accessorList = PROPERTY_REF_DATA[backendName];
                if (CONTENT_ID_EXTRACTORS.hasOwnProperty(backendName)) {
                    var oldContentIds = CONTENT_ID_EXTRACTORS[backendName](oldValue);
                    var newContentIds = CONTENT_ID_EXTRACTORS[backendName](newValue);
                    var contentIdsToDelete = _getElementsInFirstSetButNotInSecond(oldContentIds, newContentIds);
                    var contentIdsToAdd = _getElementsInFirstSetButNotInSecond(newContentIds, oldContentIds);
                    contentIdsToDelete.forEach(function (contentId) {
                        newStateData.recordedVoiceovers.deleteContentId(contentId);
                        newStateData.writtenTranslations.deleteContentId(contentId);
                    });
                    contentIdsToAdd.forEach(function (contentId) {
                        newStateData.recordedVoiceovers.addContentId(contentId);
                        newStateData.writtenTranslations.addContentId(contentId);
                    });
                }
                var propertyRef = newStateData;
                for (var i = 0; i < accessorList.length - 1; i++) {
                    propertyRef = propertyRef[accessorList[i]];
                }
                propertyRef[accessorList[accessorList.length - 1]] = angular.copy(newValue);
                // We do not refresh the state editor immediately after the
                // interaction id alone is saved, because the customization args dict
                // will be temporarily invalid. A change in interaction id will always
                // entail a change in the customization args dict anyway, so the graph
                // will get refreshed after both properties have been updated.
                var refreshGraph = (backendName !== 'widget_id');
                _setState(stateName, newStateData, refreshGraph);
            }
        };
        var convertToBackendRepresentation = function (frontendValue, backendName) {
            var conversionFunction = BACKEND_CONVERSIONS[backendName];
            return conversionFunction(frontendValue);
        };
        // TODO(sll): Add unit tests for all get/save methods.
        return {
            init: function (statesBackendDict) {
                _states = StatesObjectFactory.createFromBackendDict(statesBackendDict);
                // Initialize the solutionValidityService.
                SolutionValidityService.init(_states.getStateNames());
                _states.getStateNames().forEach(function (stateName) {
                    var solution = _states.getState(stateName).interaction.solution;
                    if (solution) {
                        var result = (AnswerClassificationService.getMatchingClassificationResult(stateName, _states.getState(stateName).interaction, solution.correctAnswer, $injector.get(AngularNameService.getNameOfInteractionRulesService(_states.getState(stateName).interaction.id))));
                        var solutionIsValid = stateName !== result.outcome.dest;
                        SolutionValidityService.updateValidity(stateName, solutionIsValid);
                    }
                });
            },
            getStates: function () {
                return angular.copy(_states);
            },
            getStateNames: function () {
                return _states.getStateNames();
            },
            hasState: function (stateName) {
                return _states.hasState(stateName);
            },
            getState: function (stateName) {
                return angular.copy(_states.getState(stateName));
            },
            setState: function (stateName, stateData) {
                _setState(stateName, stateData, true);
            },
            isNewStateNameValid: function (newStateName, showWarnings) {
                if (_states.hasState(newStateName)) {
                    if (showWarnings) {
                        AlertsService.addWarning('A state with this name already exists.');
                    }
                    return false;
                }
                return (ValidatorsService.isValidStateName(newStateName, showWarnings));
            },
            getStateContentMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'content');
            },
            saveStateContent: function (stateName, newContent) {
                saveStateProperty(stateName, 'content', newContent);
            },
            getStateParamChangesMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'param_changes');
            },
            saveStateParamChanges: function (stateName, newParamChanges) {
                saveStateProperty(stateName, 'param_changes', newParamChanges);
            },
            getInteractionIdMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'widget_id');
            },
            saveInteractionId: function (stateName, newInteractionId) {
                saveStateProperty(stateName, 'widget_id', newInteractionId);
            },
            getInteractionCustomizationArgsMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'widget_customization_args');
            },
            saveInteractionCustomizationArgs: function (stateName, newCustomizationArgs) {
                saveStateProperty(stateName, 'widget_customization_args', newCustomizationArgs);
            },
            getInteractionAnswerGroupsMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'answer_groups');
            },
            saveInteractionAnswerGroups: function (stateName, newAnswerGroups) {
                saveStateProperty(stateName, 'answer_groups', newAnswerGroups);
                stateAnswerGroupsSavedCallbacks.forEach(function (callback) {
                    callback(stateName);
                });
            },
            getConfirmedUnclassifiedAnswersMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'confirmed_unclassified_answers');
            },
            saveConfirmedUnclassifiedAnswers: function (stateName, newAnswers) {
                saveStateProperty(stateName, 'confirmed_unclassified_answers', newAnswers);
            },
            getInteractionDefaultOutcomeMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'default_outcome');
            },
            saveInteractionDefaultOutcome: function (stateName, newDefaultOutcome) {
                saveStateProperty(stateName, 'default_outcome', newDefaultOutcome);
            },
            getHintsMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'hints');
            },
            saveHints: function (stateName, newHints) {
                saveStateProperty(stateName, 'hints', newHints);
            },
            getSolutionMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'solution');
            },
            saveSolution: function (stateName, newSolution) {
                saveStateProperty(stateName, 'solution', newSolution);
            },
            getRecordedVoiceoversMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'recorded_voiceovers');
            },
            saveRecordedVoiceovers: function (stateName, newRecordedVoiceovers) {
                saveStateProperty(stateName, 'recorded_voiceovers', newRecordedVoiceovers);
            },
            getWrittenTranslationsMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'written_translations');
            },
            saveWrittenTranslations: function (stateName, newWrittenTranslations) {
                saveStateProperty(stateName, 'written_translations', newWrittenTranslations);
            },
            isInitialized: function () {
                return _states !== null;
            },
            addState: function (newStateName, successCallback) {
                newStateName = $filter('normalizeWhitespace')(newStateName);
                if (!ValidatorsService.isValidStateName(newStateName, true)) {
                    return;
                }
                if (_states.hasState(newStateName)) {
                    AlertsService.addWarning('A state with this name already exists.');
                    return;
                }
                AlertsService.clearWarnings();
                _states.addState(newStateName);
                ChangeListService.addState(newStateName);
                stateAddedCallbacks.forEach(function (callback) {
                    callback(newStateName);
                });
                $rootScope.$broadcast('refreshGraph');
                if (successCallback) {
                    successCallback(newStateName);
                }
            },
            deleteState: function (deleteStateName) {
                AlertsService.clearWarnings();
                var initStateName = ExplorationInitStateNameService.displayed;
                if (deleteStateName === initStateName) {
                    return;
                }
                if (!_states.hasState(deleteStateName)) {
                    AlertsService.addWarning('No state with name ' + deleteStateName + ' exists.');
                    return;
                }
                return $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                        'exploration-editor-tab-templates/' +
                        'confirm-delete-state-modal.template.html'),
                    backdrop: true,
                    resolve: {
                        deleteStateName: function () {
                            return deleteStateName;
                        }
                    },
                    controller: [
                        '$scope', '$uibModalInstance', 'deleteStateName',
                        function ($scope, $uibModalInstance, deleteStateName) {
                            $scope.deleteStateWarningText = ('Are you sure you want to delete the card "' +
                                deleteStateName + '"?');
                            $scope.reallyDelete = function () {
                                $uibModalInstance.close(deleteStateName);
                            };
                            $scope.cancel = function () {
                                $uibModalInstance.dismiss('cancel');
                                AlertsService.clearWarnings();
                            };
                        }
                    ]
                }).result.then(function (deleteStateName) {
                    _states.deleteState(deleteStateName);
                    ChangeListService.deleteState(deleteStateName);
                    if (StateEditorService.getActiveStateName() === deleteStateName) {
                        StateEditorService.setActiveStateName(ExplorationInitStateNameService.savedMemento);
                    }
                    $location.path('/gui/' + StateEditorService.getActiveStateName());
                    stateDeletedCallbacks.forEach(function (callback) {
                        callback(deleteStateName);
                    });
                    $rootScope.$broadcast('refreshGraph');
                    // This ensures that if the deletion changes rules in the current
                    // state, they get updated in the view.
                    $rootScope.$broadcast('refreshStateEditor');
                });
            },
            renameState: function (oldStateName, newStateName) {
                newStateName = $filter('normalizeWhitespace')(newStateName);
                if (!ValidatorsService.isValidStateName(newStateName, true)) {
                    return;
                }
                if (_states.hasState(newStateName)) {
                    AlertsService.addWarning('A state with this name already exists.');
                    return;
                }
                AlertsService.clearWarnings();
                _states.renameState(oldStateName, newStateName);
                StateEditorService.setActiveStateName(newStateName);
                // The 'rename state' command must come before the 'change
                // init_state_name' command in the change list, otherwise the backend
                // will raise an error because the new initial state name does not
                // exist.
                ChangeListService.renameState(newStateName, oldStateName);
                SolutionValidityService.onRenameState(newStateName, oldStateName);
                // Amend initStateName appropriately, if necessary. Note that this
                // must come after the state renaming, otherwise saving will lead to
                // a complaint that the new name is not a valid state name.
                if (ExplorationInitStateNameService.displayed === oldStateName) {
                    ExplorationInitStateNameService.displayed = newStateName;
                    ExplorationInitStateNameService.saveDisplayedValue(newStateName);
                }
                stateRenamedCallbacks.forEach(function (callback) {
                    callback(oldStateName, newStateName);
                });
                $rootScope.$broadcast('refreshGraph');
            },
            registerOnStateAddedCallback: function (callback) {
                stateAddedCallbacks.push(callback);
            },
            registerOnStateDeletedCallback: function (callback) {
                stateDeletedCallbacks.push(callback);
            },
            registerOnStateRenamedCallback: function (callback) {
                stateRenamedCallbacks.push(callback);
            },
            registerOnStateAnswerGroupsSavedCallback: function (callback) {
                stateAnswerGroupsSavedCallbacks.push(callback);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-warnings.service.ts":
/*!********************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-warnings.service.ts ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A service that lists all the exploration warnings.
 */
__webpack_require__(/*! expressions/ExpressionInterpolationService.ts */ "./core/templates/dev/head/expressions/ExpressionInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-param-changes.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-param-changes.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/graph-data.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/graph-data.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/parameter-metadata.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/parameter-metadata.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts");
__webpack_require__(/*! services/ImprovementsService.ts */ "./core/templates/dev/head/services/ImprovementsService.ts");
__webpack_require__(/*! services/StateTopAnswersStatsService.ts */ "./core/templates/dev/head/services/StateTopAnswersStatsService.ts");
angular.module('explorationEditorPageModule').factory('ExplorationWarningsService', [
    '$injector', 'ExplorationParamChangesService', 'ExplorationStatesService',
    'ExpressionInterpolationService', 'GraphDataService', 'ImprovementsService',
    'ParameterMetadataService', 'SolutionValidityService',
    'StateTopAnswersStatsService', 'INTERACTION_SPECS', 'STATE_ERROR_MESSAGES',
    'UNRESOLVED_ANSWER_FREQUENCY_THRESHOLD', 'WARNING_TYPES',
    function ($injector, ExplorationParamChangesService, ExplorationStatesService, ExpressionInterpolationService, GraphDataService, ImprovementsService, ParameterMetadataService, SolutionValidityService, StateTopAnswersStatsService, INTERACTION_SPECS, STATE_ERROR_MESSAGES, UNRESOLVED_ANSWER_FREQUENCY_THRESHOLD, WARNING_TYPES) {
        var _warningsList = [];
        var stateWarnings = {};
        var hasCriticalStateWarning = false;
        var _getStatesWithoutInteractionIds = function () {
            var statesWithoutInteractionIds = [];
            var states = ExplorationStatesService.getStates();
            states.getStateNames().forEach(function (stateName) {
                if (!states.getState(stateName).interaction.id) {
                    statesWithoutInteractionIds.push(stateName);
                }
            });
            return statesWithoutInteractionIds;
        };
        var _getStatesWithIncorrectSolution = function () {
            var statesWithIncorrectSolution = [];
            var states = ExplorationStatesService.getStates();
            states.getStateNames().forEach(function (stateName) {
                if (states.getState(stateName).interaction.solution &&
                    !SolutionValidityService.isSolutionValid(stateName)) {
                    statesWithIncorrectSolution.push(stateName);
                }
            });
            return statesWithIncorrectSolution;
        };
        // Returns a list of names of all nodes which are unreachable from the
        // initial node.
        //
        // Args:
        // - initNodeIds: a list of initial node ids
        // - nodes: an object whose keys are node ids, and whose values are node
        //     names
        // - edges: a list of edges, each of which is an object with keys
        //     'source', and 'target'.
        var _getUnreachableNodeNames = function (initNodeIds, nodes, edges) {
            var queue = initNodeIds;
            var seen = {};
            for (var i = 0; i < initNodeIds.length; i++) {
                seen[initNodeIds[i]] = true;
            }
            while (queue.length > 0) {
                var currNodeId = queue.shift();
                edges.forEach(function (edge) {
                    if (edge.source === currNodeId && !seen.hasOwnProperty(edge.target)) {
                        seen[edge.target] = true;
                        queue.push(edge.target);
                    }
                });
            }
            var unreachableNodeNames = [];
            for (var nodeId in nodes) {
                if (!(seen.hasOwnProperty(nodes[nodeId]))) {
                    unreachableNodeNames.push(nodes[nodeId]);
                }
            }
            return unreachableNodeNames;
        };
        // Given an array of objects with two keys 'source' and 'target', returns
        // an array with the same objects but with the values of 'source' and
        // 'target' switched. (The objects represent edges in a graph, and this
        // operation amounts to reversing all the edges.)
        var _getReversedLinks = function (links) {
            return links.map(function (link) {
                return {
                    source: link.target,
                    target: link.source,
                };
            });
        };
        // Verify that all parameters referred to in a state are guaranteed to
        // have been set beforehand.
        var _verifyParameters = function (initNodeIds) {
            var unsetParametersInfo = (ParameterMetadataService.getUnsetParametersInfo(initNodeIds));
            var paramWarningsList = [];
            unsetParametersInfo.forEach(function (unsetParameterData) {
                if (!unsetParameterData.stateName) {
                    // The parameter value is required in the initial list of parameter
                    // changes.
                    paramWarningsList.push({
                        type: WARNING_TYPES.CRITICAL,
                        message: ('Please ensure the value of parameter "' +
                            unsetParameterData.paramName +
                            '" is set before it is referred to in the initial list of ' +
                            'parameter changes.')
                    });
                }
                else {
                    // The parameter value is required in a subsequent state.
                    paramWarningsList.push({
                        type: WARNING_TYPES.CRITICAL,
                        message: ('Please ensure the value of parameter "' +
                            unsetParameterData.paramName +
                            '" is set before using it in "' + unsetParameterData.stateName +
                            '".')
                    });
                }
            });
            return paramWarningsList;
        };
        var _getAnswerGroupIndexesWithEmptyClassifiers = function (state) {
            var indexes = [];
            var answerGroups = state.interaction.answerGroups;
            for (var i = 0; i < answerGroups.length; i++) {
                var group = answerGroups[i];
                if (group.rules.length === 0 &&
                    group.trainingData.length === 0) {
                    indexes.push(i);
                }
            }
            return indexes;
        };
        var _getStatesAndAnswerGroupsWithEmptyClassifiers = function () {
            var results = [];
            var states = ExplorationStatesService.getStates();
            states.getStateNames().forEach(function (stateName) {
                var groupIndexes = _getAnswerGroupIndexesWithEmptyClassifiers(states.getState(stateName));
                if (groupIndexes.length > 0) {
                    results.push({
                        groupIndexes: groupIndexes,
                        stateName: stateName
                    });
                }
            });
            return results;
        };
        var _getStatesWithAnswersThatMustBeResolved = function () {
            var stass = StateTopAnswersStatsService;
            var states = ExplorationStatesService.getStates();
            return stass.getStateNamesWithStats().filter(function (stateName) {
                var mustResolveState = ImprovementsService
                    .isStateForcedToResolveOutstandingUnaddressedAnswers(states.getState(stateName));
                return mustResolveState &&
                    stass.getUnresolvedStateStats(stateName).some(function (answer) {
                        return answer.frequency >= UNRESOLVED_ANSWER_FREQUENCY_THRESHOLD;
                    });
            });
        };
        var _updateWarningsList = function () {
            _warningsList = [];
            stateWarnings = {};
            hasCriticalStateWarning = false;
            var _extendStateWarnings = function (stateName, newWarning) {
                if (stateWarnings.hasOwnProperty(stateName)) {
                    stateWarnings[stateName].push(newWarning);
                }
                else {
                    stateWarnings[stateName] = [newWarning];
                }
            };
            GraphDataService.recompute();
            var _graphData = GraphDataService.getGraphData();
            var _states = ExplorationStatesService.getStates();
            _states.getStateNames().forEach(function (stateName) {
                var interaction = _states.getState(stateName).interaction;
                if (interaction.id) {
                    var validatorServiceName = _states.getState(stateName).interaction.id + 'ValidationService';
                    var validatorService = $injector.get(validatorServiceName);
                    var interactionWarnings = validatorService.getAllWarnings(stateName, interaction.customizationArgs, interaction.answerGroups, interaction.defaultOutcome);
                    for (var j = 0; j < interactionWarnings.length; j++) {
                        _extendStateWarnings(stateName, interactionWarnings[j].message);
                        if (interactionWarnings[j].type === WARNING_TYPES.CRITICAL) {
                            hasCriticalStateWarning = true;
                        }
                    }
                }
            });
            var statesWithoutInteractionIds = _getStatesWithoutInteractionIds();
            angular.forEach(statesWithoutInteractionIds, function (stateWithoutInteractionIds) {
                _extendStateWarnings(stateWithoutInteractionIds, STATE_ERROR_MESSAGES.ADD_INTERACTION);
            });
            var statesWithAnswersThatMustBeResolved = _getStatesWithAnswersThatMustBeResolved();
            angular.forEach(statesWithAnswersThatMustBeResolved, function (stateName) {
                _extendStateWarnings(stateName, STATE_ERROR_MESSAGES.UNRESOLVED_ANSWER);
            });
            var statesWithIncorrectSolution = _getStatesWithIncorrectSolution();
            angular.forEach(statesWithIncorrectSolution, function (state) {
                _extendStateWarnings(state, STATE_ERROR_MESSAGES.INCORRECT_SOLUTION);
            });
            if (_graphData) {
                var unreachableStateNames = _getUnreachableNodeNames([_graphData.initStateId], _graphData.nodes, _graphData.links);
                if (unreachableStateNames.length) {
                    angular.forEach(unreachableStateNames, function (unreachableStateName) {
                        _extendStateWarnings(unreachableStateName, STATE_ERROR_MESSAGES.STATE_UNREACHABLE);
                    });
                }
                else {
                    // Only perform this check if all states are reachable.
                    var deadEndStates = _getUnreachableNodeNames(_graphData.finalStateIds, _graphData.nodes, _getReversedLinks(_graphData.links));
                    if (deadEndStates.length) {
                        angular.forEach(deadEndStates, function (deadEndState) {
                            _extendStateWarnings(deadEndState, STATE_ERROR_MESSAGES.UNABLE_TO_END_EXPLORATION);
                        });
                    }
                }
                _warningsList = _warningsList.concat(_verifyParameters([
                    _graphData.initStateId
                ]));
            }
            if (Object.keys(stateWarnings).length) {
                var errorString = (Object.keys(stateWarnings).length > 1 ? 'cards have' : 'card has');
                _warningsList.push({
                    type: WARNING_TYPES.ERROR,
                    message: ('The following ' + errorString + ' errors: ' +
                        Object.keys(stateWarnings).join(', ') + '.')
                });
            }
            var statesWithAnswerGroupsWithEmptyClassifiers = (_getStatesAndAnswerGroupsWithEmptyClassifiers());
            statesWithAnswerGroupsWithEmptyClassifiers.forEach(function (result) {
                var warningMessage = 'In \'' + result.stateName + '\'';
                if (result.groupIndexes.length !== 1) {
                    warningMessage += ', the following answer groups have classifiers ';
                    warningMessage += 'with no training data: ';
                }
                else {
                    warningMessage += ', the following answer group has a classifier ';
                    warningMessage += 'with no training data: ';
                }
                warningMessage += result.groupIndexes.join(', ');
                _warningsList.push({
                    message: warningMessage,
                    type: WARNING_TYPES.ERROR
                });
            });
        };
        return {
            countWarnings: function () {
                return _warningsList.length;
            },
            getAllStateRelatedWarnings: function () {
                return stateWarnings;
            },
            getWarnings: function () {
                return _warningsList;
            },
            hasCriticalWarnings: function () {
                return hasCriticalStateWarning || _warningsList.some(function (warning) {
                    return warning.type === WARNING_TYPES.CRITICAL;
                });
            },
            updateWarnings: function () {
                _updateWarningsList();
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/graph-data.service.ts":
/*!**********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/graph-data.service.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for computing graph data.
 */
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-init-state-name.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-init-state-name.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts");
__webpack_require__(/*! services/ComputeGraphService.ts */ "./core/templates/dev/head/services/ComputeGraphService.ts");
angular.module('explorationEditorPageModule').factory('GraphDataService', [
    'ComputeGraphService', 'ExplorationInitStateNameService',
    'ExplorationStatesService',
    function (ComputeGraphService, ExplorationInitStateNameService, ExplorationStatesService) {
        var _graphData = null;
        // Returns an object which can be treated as the input to a visualization
        // for a directed graph. The returned object has the following keys:
        //   - nodes: an object whose keys are node ids (equal to node names) and
        //       whose values are node names
        //   - links: a list of objects. Each object represents a directed link
        //       between two nodes, and has keys 'source' and 'target', the values
        //       of which are the names of the corresponding nodes.
        //   - initStateName: the name of the initial state.
        //   - finalStateName: the name of the final state.
        var _recomputeGraphData = function () {
            if (!ExplorationInitStateNameService.savedMemento) {
                return;
            }
            var states = ExplorationStatesService.getStates();
            var initStateId = ExplorationInitStateNameService.savedMemento;
            _graphData = ComputeGraphService.compute(initStateId, states);
        };
        return {
            recompute: function () {
                _recomputeGraphData();
            },
            getGraphData: function () {
                return angular.copy(_graphData);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/parameter-metadata.service.ts":
/*!******************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/parameter-metadata.service.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for computing parameter metadata.
 */
__webpack_require__(/*! domain/exploration/ParamMetadataObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ParamMetadataObjectFactory.ts");
__webpack_require__(/*! expressions/ExpressionInterpolationService.ts */ "./core/templates/dev/head/expressions/ExpressionInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-param-changes.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-param-changes.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/graph-data.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/graph-data.service.ts");
angular.module('explorationEditorPageModule').factory('ParameterMetadataService', [
    'ExplorationParamChangesService', 'ExplorationStatesService',
    'ExpressionInterpolationService', 'GraphDataService',
    'ParamMetadataObjectFactory', 'PARAM_ACTION_GET', 'PARAM_ACTION_SET',
    function (ExplorationParamChangesService, ExplorationStatesService, ExpressionInterpolationService, GraphDataService, ParamMetadataObjectFactory, PARAM_ACTION_GET, PARAM_ACTION_SET) {
        var PARAM_SOURCE_ANSWER = 'answer';
        var PARAM_SOURCE_CONTENT = 'content';
        var PARAM_SOURCE_FEEDBACK = 'feedback';
        var PARAM_SOURCE_PARAM_CHANGES = 'param_changes';
        var getMetadataFromParamChanges = function (paramChanges) {
            var result = [];
            for (var i = 0; i < paramChanges.length; i++) {
                var pc = paramChanges[i];
                if (pc.generatorId === 'Copier') {
                    if (!pc.customizationArgs.parse_with_jinja) {
                        result.push(ParamMetadataObjectFactory.createWithSetAction(pc.name, PARAM_SOURCE_PARAM_CHANGES, i));
                    }
                    else {
                        var paramsReferenced = (ExpressionInterpolationService.getParamsFromString(pc.customizationArgs.value));
                        for (var j = 0; j < paramsReferenced.length; j++) {
                            result.push(ParamMetadataObjectFactory.createWithGetAction(paramsReferenced[j], PARAM_SOURCE_PARAM_CHANGES, i));
                        }
                        result.push(ParamMetadataObjectFactory.createWithSetAction(pc.name, PARAM_SOURCE_PARAM_CHANGES, i));
                    }
                }
                else {
                    // RandomSelector. Elements in the list of possibilities are treated
                    // as raw unicode strings, not expressions.
                    result.push(ParamMetadataObjectFactory.createWithSetAction(pc.name, PARAM_SOURCE_PARAM_CHANGES, i));
                }
            }
            return result;
        };
        // Returns a list of set/get actions for parameters in the given state, in
        // the order that they occur.
        // TODO(sll): Add trace data (so that it's easy to figure out in which
        // rule an issue occurred, say).
        var getStateParamMetadata = function (state) {
            // First, the state param changes are applied: we get their values
            // and set the params.
            var result = getMetadataFromParamChanges(state.paramChanges);
            // Next, the content is evaluated.
            ExpressionInterpolationService.getParamsFromString(state.content.getHtml()).forEach(function (paramName) {
                result.push(ParamMetadataObjectFactory.createWithGetAction(paramName, PARAM_SOURCE_CONTENT, null));
            });
            // Next, the answer is received.
            result.push(ParamMetadataObjectFactory.createWithSetAction('answer', PARAM_SOURCE_ANSWER, null));
            // Finally, the rule feedback strings are evaluated.
            state.interaction.answerGroups.forEach(function (group) {
                for (var k = 0; k < group.outcome.feedback.length; k++) {
                    ExpressionInterpolationService.getParamsFromString(group.outcome.feedback[k]).forEach(function (paramName) {
                        result.push(ParamMetadataObjectFactory.createWithGetAction(paramName, PARAM_SOURCE_FEEDBACK, k));
                    });
                }
            });
            return result;
        };
        // Returns one of null, PARAM_ACTION_SET, PARAM_ACTION_GET depending on
        // whether this parameter is not used at all in this state, or
        // whether its first occurrence is a 'set' or 'get'.
        var getParamStatus = function (stateParamMetadata, paramName) {
            for (var i = 0; i < stateParamMetadata.length; i++) {
                if (stateParamMetadata[i].paramName === paramName) {
                    return stateParamMetadata[i].action;
                }
            }
            return null;
        };
        return {
            // Returns a list of objects, each indicating a parameter for which it
            // is possible to arrive at a state with that parameter required but
            // unset. Each object in this list has two keys:
            // - paramName: the name of the parameter that may be unset
            // - stateName: the name of one of the states it is possible to reach
            //     with the parameter being unset, or null if the place where the
            //     parameter is required is in the initial list of parameter changes
            //     (e.g. one parameter may be set based on the value assigned to
            //     another parameter).
            getUnsetParametersInfo: function (initNodeIds) {
                var graphData = GraphDataService.getGraphData();
                var states = ExplorationStatesService.getStates();
                // Determine all parameter names that are used within this
                // exploration.
                var allParamNames = [];
                var expParamMetadata = getMetadataFromParamChanges(ExplorationParamChangesService.savedMemento);
                var stateParamMetadatas = {};
                expParamMetadata.forEach(function (expParamMetadataItem) {
                    if (allParamNames.indexOf(expParamMetadataItem.paramName) === -1) {
                        allParamNames.push(expParamMetadataItem.paramName);
                    }
                });
                states.getStateNames().forEach(function (stateName) {
                    stateParamMetadatas[stateName] = getStateParamMetadata(states.getState(stateName));
                    for (var i = 0; i < stateParamMetadatas[stateName].length; i++) {
                        var pName = stateParamMetadatas[stateName][i].paramName;
                        if (allParamNames.indexOf(pName) === -1) {
                            allParamNames.push(pName);
                        }
                    }
                });
                // For each parameter, do a BFS to see if it's possible to get from
                // the start node to a node requiring this parameter, without passing
                // through any nodes that set this parameter.
                var unsetParametersInfo = [];
                for (var paramInd = 0; paramInd < allParamNames.length; paramInd++) {
                    var paramName = allParamNames[paramInd];
                    var tmpUnsetParameter = null;
                    var paramStatusAtOutset = getParamStatus(expParamMetadata, paramName);
                    if (paramStatusAtOutset === PARAM_ACTION_GET) {
                        unsetParametersInfo.push({
                            paramName: paramName,
                            stateName: null
                        });
                        continue;
                    }
                    else if (paramStatusAtOutset === PARAM_ACTION_SET) {
                        // This parameter will remain set for the entirety of the
                        // exploration.
                        continue;
                    }
                    var queue = [];
                    var seen = {};
                    for (var i = 0; i < initNodeIds.length; i++) {
                        seen[initNodeIds[i]] = true;
                        var paramStatus = getParamStatus(stateParamMetadatas[initNodeIds[i]], paramName);
                        if (paramStatus === PARAM_ACTION_GET) {
                            tmpUnsetParameter = {
                                paramName: paramName,
                                stateName: initNodeIds[i]
                            };
                            break;
                        }
                        else if (!paramStatus) {
                            queue.push(initNodeIds[i]);
                        }
                    }
                    if (tmpUnsetParameter) {
                        unsetParametersInfo.push(angular.copy(tmpUnsetParameter));
                        continue;
                    }
                    while (queue.length > 0) {
                        var currNodeId = queue.shift();
                        for (var edgeInd = 0; edgeInd < graphData.links.length; edgeInd++) {
                            var edge = graphData.links[edgeInd];
                            if (edge.source === currNodeId &&
                                !seen.hasOwnProperty(edge.target)) {
                                seen[edge.target] = true;
                                paramStatus = getParamStatus(stateParamMetadatas[edge.target], paramName);
                                if (paramStatus === PARAM_ACTION_GET) {
                                    tmpUnsetParameter = {
                                        paramName: paramName,
                                        stateName: edge.target
                                    };
                                    break;
                                }
                                else if (!paramStatus) {
                                    queue.push(edge.target);
                                }
                            }
                        }
                    }
                    if (tmpUnsetParameter) {
                        unsetParametersInfo.push(angular.copy(tmpUnsetParameter));
                        continue;
                    }
                }
                return unsetParametersInfo;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/answer-groups-cache/answer-groups-cache.service.ts":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/answer-groups-cache/answer-groups-cache.service.ts ***!
  \*************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
* @fileoverview A state-specific cache for interaction handlers. It stores
* handlers corresponding to an interaction id so that they can be restored if
* the interaction is changed back while the user is still in this state.
* This cache should be reset each time the state editor is initialized.
*/
angular.module('explorationEditorTabModule').factory('AnswerGroupsCacheService', [function () {
        var _cache = {};
        return {
            reset: function () {
                _cache = {};
            },
            contains: function (interactionId) {
                return _cache.hasOwnProperty(interactionId);
            },
            set: function (interactionId, answerGroups) {
                _cache[interactionId] = angular.copy(answerGroups);
            },
            get: function (interactionId) {
                if (!_cache.hasOwnProperty(interactionId)) {
                    return null;
                }
                return angular.copy(_cache[interactionId]);
            }
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/interaction-details-cache/interaction-details-cache.service.ts":
/*!*************************************************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/interaction-details-cache/interaction-details-cache.service.ts ***!
  \*************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A service to provide state-specific cache for interaction
 * details. It stores customization args corresponding to an interaction id so
 * that they can be restored if the interaction is changed back while the user
 * is still in this state. This cache should be reset each time the state
 * editor is initialized.
 */
angular.module('explorationEditorTabModule').factory('InteractionDetailsCacheService', [function () {
        var _cache = {};
        return {
            reset: function () {
                _cache = {};
            },
            contains: function (interactionId) {
                return _cache.hasOwnProperty(interactionId);
            },
            removeDetails: function (interactionId) {
                delete _cache[interactionId];
            },
            set: function (interactionId, interactionCustomizationArgs) {
                _cache[interactionId] = {
                    customization: angular.copy(interactionCustomizationArgs)
                };
            },
            get: function (interactionId) {
                if (!_cache.hasOwnProperty(interactionId)) {
                    return null;
                }
                return angular.copy(_cache[interactionId]);
            }
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts":
/*!*******************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts ***!
  \*******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service responses corresponding to a state's interaction and
 * answer groups.
 */
__webpack_require__(/*! domain/exploration/OutcomeObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/OutcomeObjectFactory.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/answer-groups-cache/answer-groups-cache.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/answer-groups-cache/answer-groups-cache.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-verification/solution-verification.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-verification/solution-verification.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
angular.module('explorationEditorTabModule').factory('ResponsesService', [
    '$rootScope', 'AlertsService', 'AnswerGroupsCacheService',
    'ContextService', 'OutcomeObjectFactory',
    'SolutionValidityService', 'SolutionVerificationService',
    'StateEditorService', 'StateInteractionIdService',
    'StateSolutionService', 'COMPONENT_NAME_DEFAULT_OUTCOME',
    'INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_CURRENT_RULE',
    'INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_EXPLORATION',
    'INFO_MESSAGE_SOLUTION_IS_VALID', 'INTERACTION_SPECS',
    function ($rootScope, AlertsService, AnswerGroupsCacheService, ContextService, OutcomeObjectFactory, SolutionValidityService, SolutionVerificationService, StateEditorService, StateInteractionIdService, StateSolutionService, COMPONENT_NAME_DEFAULT_OUTCOME, INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_CURRENT_RULE, INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_EXPLORATION, INFO_MESSAGE_SOLUTION_IS_VALID, INTERACTION_SPECS) {
        var _answerGroupsMemento = null;
        var _defaultOutcomeMemento = null;
        var _confirmedUnclassifiedAnswersMemento = null;
        // Represents the current selected answer group, starting at index 0. If the
        // index equal to the number of answer groups (answerGroups.length), then it
        // is referring to the default outcome.
        var _activeAnswerGroupIndex = null;
        var _activeRuleIndex = -1;
        var _answerGroups = null;
        var _defaultOutcome = null;
        var _confirmedUnclassifiedAnswers = null;
        var _answerChoices = null;
        var _verifySolution = function () {
            // This checks if the solution is valid once a rule has been changed or
            // added.
            var currentInteractionId = StateInteractionIdService.savedMemento;
            var interactionCanHaveSolution = (currentInteractionId &&
                INTERACTION_SPECS[currentInteractionId].can_have_solution);
            var solutionExists = (StateSolutionService.savedMemento &&
                StateSolutionService.savedMemento.correctAnswer !== null);
            if (interactionCanHaveSolution && solutionExists) {
                var interaction = StateEditorService.getInteraction();
                interaction.answerGroups = angular.copy(_answerGroups);
                interaction.defaultOutcome = angular.copy(_defaultOutcome);
                var solutionIsValid = SolutionVerificationService.verifySolution(StateEditorService.getActiveStateName(), interaction, StateSolutionService.savedMemento.correctAnswer);
                SolutionValidityService.updateValidity(StateEditorService.getActiveStateName(), solutionIsValid);
                var solutionWasPreviouslyValid = (SolutionValidityService.isSolutionValid(StateEditorService.getActiveStateName()));
                if (solutionIsValid && !solutionWasPreviouslyValid) {
                    AlertsService.addInfoMessage(INFO_MESSAGE_SOLUTION_IS_VALID);
                }
                else if (!solutionIsValid && solutionWasPreviouslyValid) {
                    AlertsService.addInfoMessage(INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_CURRENT_RULE);
                }
                else if (!solutionIsValid && !solutionWasPreviouslyValid) {
                    AlertsService.addInfoMessage(INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_EXPLORATION);
                }
            }
        };
        var _saveAnswerGroups = function (newAnswerGroups) {
            var oldAnswerGroups = _answerGroupsMemento;
            if (newAnswerGroups && oldAnswerGroups &&
                !angular.equals(newAnswerGroups, oldAnswerGroups)) {
                _answerGroups = newAnswerGroups;
                $rootScope.$broadcast('answerGroupChanged', newAnswerGroups);
                _verifySolution();
                _answerGroupsMemento = angular.copy(newAnswerGroups);
            }
        };
        var _updateAnswerGroup = function (index, updates, callback) {
            var answerGroup = _answerGroups[index];
            if (updates.hasOwnProperty('rules')) {
                answerGroup.rules = updates.rules;
            }
            if (updates.hasOwnProperty('taggedMisconceptionId')) {
                answerGroup.taggedMisconceptionId = updates.taggedMisconceptionId;
            }
            if (updates.hasOwnProperty('feedback')) {
                answerGroup.outcome.feedback = updates.feedback;
            }
            if (updates.hasOwnProperty('dest')) {
                answerGroup.outcome.dest = updates.dest;
            }
            if (updates.hasOwnProperty('refresherExplorationId')) {
                answerGroup.outcome.refresherExplorationId = (updates.refresherExplorationId);
            }
            if (updates.hasOwnProperty('missingPrerequisiteSkillId')) {
                answerGroup.outcome.missingPrerequisiteSkillId = (updates.missingPrerequisiteSkillId);
            }
            if (updates.hasOwnProperty('labelledAsCorrect')) {
                answerGroup.outcome.labelledAsCorrect = updates.labelledAsCorrect;
            }
            if (updates.hasOwnProperty('trainingData')) {
                answerGroup.trainingData = updates.trainingData;
            }
            _saveAnswerGroups(_answerGroups);
            callback(_answerGroupsMemento);
        };
        var _saveDefaultOutcome = function (newDefaultOutcome) {
            var oldDefaultOutcome = _defaultOutcomeMemento;
            if (!angular.equals(newDefaultOutcome, oldDefaultOutcome)) {
                _defaultOutcome = newDefaultOutcome;
                _verifySolution();
                _defaultOutcomeMemento = angular.copy(newDefaultOutcome);
            }
        };
        var _saveConfirmedUnclassifiedAnswers = function (newConfirmedUnclassifiedAnswers) {
            var oldConfirmedUnclassifiedAnswers = (_confirmedUnclassifiedAnswersMemento);
            if (!angular.equals(newConfirmedUnclassifiedAnswers, oldConfirmedUnclassifiedAnswers)) {
                _confirmedUnclassifiedAnswers = newConfirmedUnclassifiedAnswers;
                _confirmedUnclassifiedAnswersMemento = angular.copy(newConfirmedUnclassifiedAnswers);
            }
        };
        return {
            // The 'data' arg is a list of interaction handlers for the
            // currently-active state.
            init: function (data) {
                AnswerGroupsCacheService.reset();
                _answerGroups = angular.copy(data.answerGroups);
                _defaultOutcome = angular.copy(data.defaultOutcome);
                _confirmedUnclassifiedAnswers = angular.copy(data.confirmedUnclassifiedAnswers);
                if (StateInteractionIdService.savedMemento !== null) {
                    AnswerGroupsCacheService.set(StateInteractionIdService.savedMemento, _answerGroups);
                }
                _answerGroupsMemento = angular.copy(_answerGroups);
                _defaultOutcomeMemento = angular.copy(_defaultOutcome);
                _confirmedUnclassifiedAnswersMemento = angular.copy(_confirmedUnclassifiedAnswers);
                _activeAnswerGroupIndex = -1;
                _activeRuleIndex = 0;
            },
            onInteractionIdChanged: function (newInteractionId, callback) {
                if (AnswerGroupsCacheService.contains(newInteractionId)) {
                    _answerGroups = AnswerGroupsCacheService.get(newInteractionId);
                }
                else {
                    _answerGroups = [];
                }
                // Preserve the default outcome unless the interaction is terminal.
                // Recreate the default outcome if switching away from a terminal
                // interaction.
                if (newInteractionId) {
                    if (INTERACTION_SPECS[newInteractionId].is_terminal) {
                        _defaultOutcome = null;
                    }
                    else if (!_defaultOutcome) {
                        _defaultOutcome = OutcomeObjectFactory.createNew(StateEditorService.getActiveStateName(), COMPONENT_NAME_DEFAULT_OUTCOME, '', []);
                    }
                }
                _confirmedUnclassifiedAnswers = [];
                _saveAnswerGroups(_answerGroups);
                _saveDefaultOutcome(_defaultOutcome);
                _saveConfirmedUnclassifiedAnswers(_confirmedUnclassifiedAnswers);
                if (newInteractionId) {
                    AnswerGroupsCacheService.set(newInteractionId, _answerGroups);
                }
                _answerGroupsMemento = angular.copy(_answerGroups);
                _defaultOutcomeMemento = angular.copy(_defaultOutcome);
                _confirmedUnclassifiedAnswersMemento = angular.copy(_confirmedUnclassifiedAnswers);
                _activeAnswerGroupIndex = -1;
                _activeRuleIndex = 0;
                if (callback) {
                    callback(_answerGroupsMemento, _defaultOutcomeMemento);
                }
            },
            getActiveAnswerGroupIndex: function () {
                return _activeAnswerGroupIndex;
            },
            changeActiveAnswerGroupIndex: function (newIndex) {
                // If the current group is being clicked on again, close it.
                if (newIndex === _activeAnswerGroupIndex) {
                    _activeAnswerGroupIndex = -1;
                }
                else {
                    _activeAnswerGroupIndex = newIndex;
                }
                _activeRuleIndex = -1;
            },
            getActiveRuleIndex: function () {
                return _activeRuleIndex;
            },
            changeActiveRuleIndex: function (newIndex) {
                _activeRuleIndex = newIndex;
            },
            getAnswerChoices: function () {
                return angular.copy(_answerChoices);
            },
            updateAnswerGroup: function (index, updates, callback) {
                _updateAnswerGroup(index, updates, callback);
            },
            deleteAnswerGroup: function (index, callback) {
                _answerGroupsMemento = angular.copy(_answerGroups);
                _answerGroups.splice(index, 1);
                _activeAnswerGroupIndex = -1;
                _saveAnswerGroups(_answerGroups);
                callback(_answerGroupsMemento);
            },
            updateActiveAnswerGroup: function (updates, callback) {
                _updateAnswerGroup(_activeAnswerGroupIndex, updates, callback);
            },
            updateDefaultOutcome: function (updates, callback) {
                var outcome = _defaultOutcome;
                if (updates.hasOwnProperty('feedback')) {
                    outcome.feedback = updates.feedback;
                }
                if (updates.hasOwnProperty('dest')) {
                    outcome.dest = updates.dest;
                }
                if (updates.hasOwnProperty('refresherExplorationId')) {
                    outcome.refresherExplorationId = updates.refresherExplorationId;
                }
                if (updates.hasOwnProperty('missingPrerequisiteSkillId')) {
                    outcome.missingPrerequisiteSkillId =
                        updates.missingPrerequisiteSkillId;
                }
                if (updates.hasOwnProperty('labelledAsCorrect')) {
                    outcome.labelledAsCorrect = updates.labelledAsCorrect;
                }
                _saveDefaultOutcome(outcome);
                callback(_defaultOutcomeMemento);
            },
            updateConfirmedUnclassifiedAnswers: function (confirmedUnclassifiedAnswers) {
                _saveConfirmedUnclassifiedAnswers(confirmedUnclassifiedAnswers);
            },
            // Updates answer choices when the interaction requires it -- for
            // example, the rules for multiple choice need to refer to the multiple
            // choice interaction's customization arguments.
            updateAnswerChoices: function (newAnswerChoices, callback) {
                var oldAnswerChoices = angular.copy(_answerChoices);
                _answerChoices = newAnswerChoices;
                // If the interaction is ItemSelectionInput, update the answer groups
                // to refer to the new answer options.
                if (StateInteractionIdService.savedMemento === 'ItemSelectionInput' &&
                    oldAnswerChoices) {
                    // We use an approximate algorithm here. If the length of the answer
                    // choices array remains the same, and no choice is replicated at
                    // different indices in both arrays (which indicates that some
                    // moving-around happened), then replace any old choice with its
                    // corresponding new choice. Otherwise, we simply remove any answer
                    // that has not been changed. This is not foolproof, but it should
                    // cover most cases.
                    //
                    // TODO(sll): Find a way to make this fully deterministic. This can
                    // probably only occur after we support custom editors for
                    // interactions.
                    var onlyEditsHappened = false;
                    if (oldAnswerChoices.length === newAnswerChoices.length) {
                        onlyEditsHappened = true;
                        // Check that no answer choice appears to have been moved.
                        var numAnswerChoices = oldAnswerChoices.length;
                        for (var i = 0; i < numAnswerChoices; i++) {
                            for (var j = 0; j < numAnswerChoices; j++) {
                                if (i !== j &&
                                    oldAnswerChoices[i].val === newAnswerChoices[j].val) {
                                    onlyEditsHappened = false;
                                    break;
                                }
                            }
                        }
                    }
                    var oldChoiceStrings = oldAnswerChoices.map(function (choice) {
                        return choice.val;
                    });
                    var newChoiceStrings = newAnswerChoices.map(function (choice) {
                        return choice.val;
                    });
                    var key, newInputValue;
                    _answerGroups.forEach(function (answerGroup, answerGroupIndex) {
                        var newRules = angular.copy(answerGroup.rules);
                        newRules.forEach(function (rule) {
                            for (key in rule.inputs) {
                                newInputValue = [];
                                rule.inputs[key].forEach(function (item) {
                                    var newIndex = newChoiceStrings.indexOf(item);
                                    if (newIndex !== -1) {
                                        newInputValue.push(item);
                                    }
                                    else if (onlyEditsHappened) {
                                        var oldIndex = oldChoiceStrings.indexOf(item);
                                        if (oldIndex !== -1) {
                                            newInputValue.push(newAnswerChoices[oldIndex].val);
                                        }
                                    }
                                });
                                rule.inputs[key] = newInputValue;
                            }
                        });
                        _updateAnswerGroup(answerGroupIndex, {
                            rules: newRules
                        }, callback);
                    });
                }
                // If the interaction is DragAndDropSortInput, update the answer groups
                // to refer to the new answer options.
                if (StateInteractionIdService.savedMemento === 'DragAndDropSortInput' &&
                    oldAnswerChoices) {
                    // If the length of the answer choices array changes, then there is
                    // surely any deletion or modification or addition in the array. We
                    // simply set answer groups to refer to default value. If the length
                    // of the answer choices array remains the same and all the choices in
                    // the previous array are present, then no change is required.
                    // However, if any of the choices is not present, we set answer groups
                    // to refer to the default value containing new answer choices.
                    var anyChangesHappened = false;
                    if (oldAnswerChoices.length !== newAnswerChoices.length) {
                        anyChangesHappened = true;
                    }
                    else {
                        // Check if any modification happened in answer choices.
                        var numAnswerChoices = oldAnswerChoices.length;
                        for (var i = 0; i < numAnswerChoices; i++) {
                            var choiceIsPresent = false;
                            for (var j = 0; j < numAnswerChoices; j++) {
                                if (oldAnswerChoices[i].val === newAnswerChoices[j].val) {
                                    choiceIsPresent = true;
                                    break;
                                }
                            }
                            if (choiceIsPresent === false) {
                                anyChangesHappened = true;
                                break;
                            }
                        }
                    }
                    if (anyChangesHappened) {
                        _answerGroups.forEach(function (answerGroup, answerGroupIndex) {
                            var newRules = angular.copy(answerGroup.rules);
                            newRules.forEach(function (rule) {
                                if (rule.type === 'HasElementXAtPositionY') {
                                    for (key in rule.inputs) {
                                        newInputValue = '';
                                        if (key === 'y') {
                                            newInputValue = 1;
                                        }
                                        rule.inputs[key] = newInputValue;
                                    }
                                }
                                else if (rule.type === 'HasElementXBeforeElementY') {
                                    for (key in rule.inputs) {
                                        newInputValue = '';
                                        rule.inputs[key] = newInputValue;
                                    }
                                }
                                else {
                                    for (key in rule.inputs) {
                                        newInputValue = [];
                                        rule.inputs[key] = newInputValue;
                                    }
                                }
                            });
                            _updateAnswerGroup(answerGroupIndex, {
                                rules: newRules
                            }, callback);
                        });
                    }
                }
            },
            getAnswerGroups: function () {
                return angular.copy(_answerGroups);
            },
            getAnswerGroup: function (index) {
                return angular.copy(_answerGroups[index]);
            },
            getAnswerGroupCount: function () {
                return _answerGroups.length;
            },
            getDefaultOutcome: function () {
                return angular.copy(_defaultOutcome);
            },
            getConfirmedUnclassifiedAnswers: function () {
                return angular.copy(_confirmedUnclassifiedAnswers);
            },
            // This registers the change to the handlers in the list of changes.
            save: function (newAnswerGroups, defaultOutcome, callback) {
                _saveAnswerGroups(newAnswerGroups);
                _saveDefaultOutcome(defaultOutcome);
                callback(_answerGroupsMemento, _defaultOutcomeMemento);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts ***!
  \*********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Service for keeping track of solution validity.
angular.module('explorationEditorTabModule').factory('SolutionValidityService', [
    function () {
        return {
            init: function (stateNames) {
                this.solutionValidities = {};
                var self = this;
                stateNames.forEach(function (stateName) {
                    self.solutionValidities[stateName] = true;
                });
            },
            onRenameState: function (newStateName, oldStateName) {
                this.solutionValidities[newStateName] =
                    this.solutionValidities[oldStateName];
                this.deleteSolutionValidity(oldStateName);
            },
            updateValidity: function (stateName, solutionIsValid) {
                this.solutionValidities[stateName] = solutionIsValid;
            },
            isSolutionValid: function (stateName) {
                if (this.solutionValidities.hasOwnProperty(stateName)) {
                    return this.solutionValidities[stateName];
                }
            },
            deleteSolutionValidity: function (stateName) {
                delete this.solutionValidities[stateName];
            },
            getAllValidities: function () {
                return this.solutionValidities;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-verification/solution-verification.service.ts":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-verification/solution-verification.service.ts ***!
  \*****************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for solution verification.
 */
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts");
__webpack_require__(/*! pages/exploration_player/AnswerClassificationService.ts */ "./core/templates/dev/head/pages/exploration_player/AnswerClassificationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
angular.module('explorationEditorTabModule').factory('SolutionVerificationService', [
    '$injector', 'AngularNameService', 'AnswerClassificationService',
    'StateEditorService',
    function ($injector, AngularNameService, AnswerClassificationService, StateEditorService) {
        return {
            verifySolution: function (stateName, interaction, correctAnswer) {
                var interactionId = interaction.id;
                var rulesServiceName = (AngularNameService.getNameOfInteractionRulesService(interactionId));
                var rulesService = $injector.get(rulesServiceName);
                var result = (AnswerClassificationService.getMatchingClassificationResult(stateName, interaction, correctAnswer, rulesService));
                if (StateEditorService.isInQuestionMode()) {
                    return result.outcome.labelledAsCorrect;
                }
                return stateName !== result.outcome.dest;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data-editor-panel.service.ts":
/*!************************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data-editor-panel.service.ts ***!
  \************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service which handles opening and closing
 * the training data editor of an answer group.
 */
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/test-interaction-panel/test-interaction-panel.directive.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/test-interaction-panel/test-interaction-panel.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data/training-data.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data/training-data.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-modal.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-modal.service.ts");
__webpack_require__(/*! pages/exploration_player/AnswerClassificationService.ts */ "./core/templates/dev/head/pages/exploration_player/AnswerClassificationService.ts");
__webpack_require__(/*! pages/exploration_player/CurrentInteractionService.ts */ "./core/templates/dev/head/pages/exploration_player/CurrentInteractionService.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
angular.module('explorationEditorTabModule').factory('TrainingDataEditorPanelService', [
    '$rootScope', '$uibModal', 'AlertsService', 'UrlInterpolationService',
    function ($rootScope, $uibModal, AlertsService, UrlInterpolationService) {
        return {
            /**
            * Opens training data editor for currently selected answer group.
            */
            openTrainingDataEditor: function () {
                AlertsService.clearWarnings();
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                        'exploration-editor-tab-templates/' +
                        'training-data-editor.template.html'),
                    backdrop: true,
                    controller: [
                        '$scope', '$injector', '$uibModalInstance', '$filter',
                        'ExplorationStatesService', 'StateEditorService', 'AlertsService',
                        'AnswerClassificationService', 'ContextService',
                        'StateInteractionIdService', 'AngularNameService',
                        'EXPLICIT_CLASSIFICATION', 'TRAINING_DATA_CLASSIFICATION',
                        'ExplorationHtmlFormatterService', 'ResponsesService',
                        'StateCustomizationArgsService', 'TrainingDataService',
                        'TrainingModalService', 'FocusManagerService',
                        'CurrentInteractionService',
                        function ($scope, $injector, $uibModalInstance, $filter, ExplorationStatesService, StateEditorService, AlertsService, AnswerClassificationService, ContextService, StateInteractionIdService, AngularNameService, EXPLICIT_CLASSIFICATION, TRAINING_DATA_CLASSIFICATION, ExplorationHtmlFormatterService, ResponsesService, StateCustomizationArgsService, TrainingDataService, TrainingModalService, FocusManagerService, CurrentInteractionService) {
                            var _explorationId = ContextService.getExplorationId();
                            var _stateName = StateEditorService.getActiveStateName();
                            $scope.stateName = _stateName;
                            var _state = ExplorationStatesService.getState(_stateName);
                            var answerGroupIndex = (ResponsesService.getActiveAnswerGroupIndex());
                            var FOCUS_LABEL_TEST_INTERACTION_INPUT = 'testInteractionInput';
                            $scope.stateContent = _state.content.getHtml();
                            $scope.trainingData = [];
                            $scope.answerGroupHasNonEmptyRules = (ResponsesService.getAnswerGroup(answerGroupIndex).rules.length > 0);
                            $scope.inputTemplate = (ExplorationHtmlFormatterService.getInteractionHtml(StateInteractionIdService.savedMemento, StateCustomizationArgsService.savedMemento, false, FOCUS_LABEL_TEST_INTERACTION_INPUT));
                            var _rebuildTrainingData = function () {
                                $scope.trainingData = [];
                                TrainingDataService.getTrainingDataOfAnswerGroup(answerGroupIndex).forEach(function (answer) {
                                    var answerTemplate = (ExplorationHtmlFormatterService.getAnswerHtml(answer, StateInteractionIdService.savedMemento, StateCustomizationArgsService.savedMemento));
                                    $scope.trainingData.push({
                                        answer: answer,
                                        answerTemplate: answerTemplate
                                    });
                                });
                            };
                            $scope.init = function () {
                                _rebuildTrainingData();
                                $scope.newAnswerIsAlreadyResolved = false;
                                $scope.answerSuccessfullyAdded = false;
                                FocusManagerService.setFocus(FOCUS_LABEL_TEST_INTERACTION_INPUT);
                            };
                            $scope.removeAnswerFromTrainingData = function (answerIndex) {
                                var answer = $scope.trainingData[answerIndex].answer;
                                TrainingDataService.removeAnswerFromAnswerGroupTrainingData(answer, answerGroupIndex);
                                $scope.trainingData.splice(answerIndex, 1);
                            };
                            $scope.exit = function () {
                                $uibModalInstance.close();
                            };
                            $scope.submitAnswer = function (newAnswer) {
                                $scope.newAnswerIsAlreadyResolved = false;
                                var interactionId = StateInteractionIdService.savedMemento;
                                var rulesServiceName = AngularNameService.getNameOfInteractionRulesService(interactionId);
                                // Inject RulesService dynamically.
                                var rulesService = $injector.get(rulesServiceName);
                                var newAnswerTemplate = (ExplorationHtmlFormatterService.getAnswerHtml(newAnswer, StateInteractionIdService.savedMemento, StateCustomizationArgsService.savedMemento));
                                var classificationResult = (AnswerClassificationService.getMatchingClassificationResult(_stateName, _state.interaction, newAnswer, rulesService));
                                var newAnswerOutcomeDest = classificationResult.outcome.dest;
                                var newAnswerFeedback = classificationResult.outcome.feedback;
                                if (newAnswerOutcomeDest === _stateName) {
                                    newAnswerOutcomeDest = '(try again)';
                                }
                                $scope.newAnswerTemplate = newAnswerTemplate;
                                $scope.newAnswerFeedback = newAnswerFeedback;
                                $scope.newAnswerOutcomeDest = newAnswerOutcomeDest;
                                var classificationType = (classificationResult.classificationCategorization);
                                // If answer is explicitly classified then show the
                                // classification results to the creator.
                                if (classificationType === EXPLICIT_CLASSIFICATION ||
                                    classificationType === TRAINING_DATA_CLASSIFICATION) {
                                    $scope.newAnswerIsAlreadyResolved = true;
                                }
                                else {
                                    TrainingDataService.associateWithAnswerGroup(answerGroupIndex, newAnswer);
                                    var truncatedAnswer = $filter('truncateInputBasedOnInteractionAnswerType')(newAnswer, interactionId, 12);
                                    var successToast = ('The answer ' + truncatedAnswer +
                                        ' has been successfully trained.');
                                    AlertsService.addSuccessMessage(successToast, 1000);
                                    _rebuildTrainingData();
                                }
                            };
                            CurrentInteractionService.setOnSubmitFn($scope.submitAnswer);
                            $scope.openTrainUnresolvedAnswerModal = function (answerIndex) {
                                // An answer group must have either a rule or at least one
                                // answer in training data. Don't allow modification of
                                // training data answers if there are no rules and only one
                                // training data answer is present.
                                if (($scope.answerGroupHasNonEmptyRules &&
                                    $scope.trainingData.length > 0) ||
                                    $scope.trainingData.length > 1) {
                                    var answer = $scope.trainingData[answerIndex].answer;
                                    var interactionId = StateInteractionIdService.savedMemento;
                                    return TrainingModalService.openTrainUnresolvedAnswerModal(answer, function () {
                                        var truncatedAnswer = $filter('truncateInputBasedOnInteractionAnswerType')(answer, interactionId, 12);
                                        var successToast = ('The answer ' + truncatedAnswer +
                                            ' has been successfully trained.');
                                        AlertsService.addSuccessMessage(successToast, 1000);
                                        _rebuildTrainingData();
                                    });
                                }
                                return;
                            };
                            $scope.init();
                        }
                    ]
                });
                // Save the modified training data externally in state content.
                $rootScope.$broadcast('externalSave');
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data/training-data.service.ts":
/*!*************************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data/training-data.service.ts ***!
  \*************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for training data that adds a new
 * answer to training data and verifies that training data answers are unique
 * across all answer groups.
 */
__webpack_require__(/*! domain/exploration/RuleObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/RuleObjectFactory.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/graph-data.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/graph-data.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
angular.module('explorationEditorTabModule').factory('TrainingDataService', [
    '$http', '$rootScope', 'ExplorationStatesService', 'GraphDataService',
    'ResponsesService', 'RuleObjectFactory', 'StateEditorService',
    function ($http, $rootScope, ExplorationStatesService, GraphDataService, ResponsesService, RuleObjectFactory, StateEditorService) {
        var _getIndexOfTrainingData = function (answer, trainingData) {
            var index = -1;
            for (var i = 0; i < trainingData.length; i++) {
                if (angular.equals(trainingData[i], answer)) {
                    index = i;
                    break;
                }
            }
            return index;
        };
        // Attempts to remove a given answer from a list of trained answers. This
        // function returns the index of the answer that was removed if it was
        // successfully removed from the training data, or -1 otherwise.
        var _removeAnswerFromTrainingData = function (answer, trainingData) {
            var index = _getIndexOfTrainingData(answer, trainingData);
            if (index !== -1) {
                trainingData.splice(index, 1);
            }
            return index;
        };
        // This removes any occurrences of the answer from any training data inputs
        // or the confirmed unclassified answer list. It also removes the answer
        // from the training data being presented to the user so that it does not
        // show up again.
        var _removeAnswer = function (answer) {
            var answerGroups = ResponsesService.getAnswerGroups();
            var confirmedUnclassifiedAnswers = (ResponsesService.getConfirmedUnclassifiedAnswers());
            var updatedAnswerGroups = false;
            var updatedConfirmedUnclassifiedAnswers = false;
            // Remove the answer from all answer groups.
            for (var i = 0; i < answerGroups.length; i++) {
                var answerGroup = answerGroups[i];
                var rules = answerGroup.rules;
                var trainingData = answerGroup.trainingData;
                if (trainingData &&
                    _removeAnswerFromTrainingData(answer, trainingData) !== -1) {
                    updatedAnswerGroups = true;
                }
            }
            // Remove the answer from the confirmed unclassified answers.
            updatedConfirmedUnclassifiedAnswers = (_removeAnswerFromTrainingData(answer, confirmedUnclassifiedAnswers) !== -1);
            if (updatedAnswerGroups) {
                ResponsesService.save(answerGroups, ResponsesService.getDefaultOutcome(), function (newAnswerGroups, newDefaultOutcome) {
                    ExplorationStatesService.saveInteractionAnswerGroups(StateEditorService.getActiveStateName(), angular.copy(newAnswerGroups));
                    ExplorationStatesService.saveInteractionDefaultOutcome(StateEditorService.getActiveStateName(), angular.copy(newDefaultOutcome));
                    GraphDataService.recompute();
                });
            }
            if (updatedConfirmedUnclassifiedAnswers) {
                ResponsesService.updateConfirmedUnclassifiedAnswers(confirmedUnclassifiedAnswers);
                ExplorationStatesService.saveConfirmedUnclassifiedAnswers(StateEditorService.getActiveStateName(), angular.copy(confirmedUnclassifiedAnswers));
            }
        };
        return {
            getTrainingDataAnswers: function () {
                var trainingDataAnswers = [];
                var answerGroups = ResponsesService.getAnswerGroups();
                for (var i = 0; i < answerGroups.length; i++) {
                    var answerGroup = answerGroups[i];
                    trainingDataAnswers.push({
                        answerGroupIndex: i,
                        answers: answerGroup.trainingData
                    });
                }
                return trainingDataAnswers;
            },
            getTrainingDataOfAnswerGroup: function (answerGroupIndex) {
                return ResponsesService.getAnswerGroup(answerGroupIndex).trainingData;
            },
            getAllPotentialOutcomes: function (state) {
                var potentialOutcomes = [];
                var interaction = state.interaction;
                for (var i = 0; i < interaction.answerGroups.length; i++) {
                    potentialOutcomes.push(interaction.answerGroups[i].outcome);
                }
                if (interaction.defaultOutcome) {
                    var outcome = interaction.defaultOutcome;
                    potentialOutcomes.push(interaction.defaultOutcome);
                }
                return potentialOutcomes;
            },
            associateWithAnswerGroup: function (answerGroupIndex, answer) {
                // Remove answer from traning data of any answer group or
                // confirmed unclassified answers.
                _removeAnswer(answer);
                var answerGroups = ResponsesService.getAnswerGroups();
                var answerGroup = answerGroups[answerGroupIndex];
                // Train the rule to include this answer.
                answerGroup.trainingData.push(answer);
                ResponsesService.updateAnswerGroup(answerGroupIndex, {
                    trainingData: answerGroup.trainingData
                }, function (newAnswerGroups) {
                    ExplorationStatesService.saveInteractionAnswerGroups(StateEditorService.getActiveStateName(), angular.copy(newAnswerGroups));
                    GraphDataService.recompute();
                });
            },
            associateWithDefaultResponse: function (answer) {
                // Remove answer from traning data of any answer group or
                // confirmed unclassified answers.
                _removeAnswer(answer);
                var confirmedUnclassifiedAnswers = (ResponsesService.getConfirmedUnclassifiedAnswers());
                confirmedUnclassifiedAnswers.push(answer);
                ResponsesService.updateConfirmedUnclassifiedAnswers(confirmedUnclassifiedAnswers);
                ExplorationStatesService.saveConfirmedUnclassifiedAnswers(StateEditorService.getActiveStateName(), angular.copy(confirmedUnclassifiedAnswers));
            },
            isConfirmedUnclassifiedAnswer: function (answer) {
                return (_getIndexOfTrainingData(answer, ResponsesService.getConfirmedUnclassifiedAnswers()) !== -1);
            },
            removeAnswerFromAnswerGroupTrainingData: function (answer, answerGroupIndex) {
                var trainingData = ResponsesService.getAnswerGroup(answerGroupIndex).trainingData;
                _removeAnswerFromTrainingData(answer, trainingData);
                var answerGroups = ResponsesService.getAnswerGroups();
                answerGroups[answerGroupIndex].trainingData = trainingData;
                ResponsesService.updateAnswerGroup(answerGroupIndex, {
                    trainingData: trainingData
                }, function (newAnswerGroups) {
                    ExplorationStatesService.saveInteractionAnswerGroups(StateEditorService.getActiveStateName(), angular.copy(newAnswerGroups));
                    GraphDataService.recompute();
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-modal.service.ts":
/*!************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-modal.service.ts ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service which handles opening and closing
 * the training modal used for unresolved answers.
 */
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data-editor-panel.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data-editor-panel.service.ts");
__webpack_require__(/*! domain/exploration/AnswerGroupObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/AnswerGroupObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-warnings.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-warnings.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/graph-data.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/graph-data.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data/training-data.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/training-data/training-data.service.ts");
__webpack_require__(/*! pages/exploration_player/AnswerClassificationService.ts */ "./core/templates/dev/head/pages/exploration_player/AnswerClassificationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
angular.module('explorationEditorTabModule').factory('TrainingModalService', [
    '$rootScope', '$uibModal', 'AlertsService', 'UrlInterpolationService',
    function ($rootScope, $uibModal, AlertsService, UrlInterpolationService) {
        return {
            /**
            * Opens unresolved answer trainer modal for given answer.
            * @param {Object} unhandledAnswer - The answer to be trained.
            * @param {requestCallback} finishTrainingCallback - Function to call when
                answer has been trained.
            */
            openTrainUnresolvedAnswerModal: function (unhandledAnswer, finishTrainingCallback) {
                AlertsService.clearWarnings();
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                        'exploration-editor-tab-templates/' +
                        'training-unresolved-answer-modal.template.html'),
                    backdrop: true,
                    controller: [
                        '$scope', '$injector', '$uibModalInstance',
                        'ExplorationStatesService', 'StateEditorService',
                        'AnswerClassificationService', 'ContextService',
                        'StateInteractionIdService', 'AngularNameService',
                        'ResponsesService', 'TrainingDataService',
                        'AnswerGroupObjectFactory', 'GraphDataService',
                        'ExplorationWarningsService',
                        function ($scope, $injector, $uibModalInstance, ExplorationStatesService, StateEditorService, AnswerClassificationService, ContextService, StateInteractionIdService, AngularNameService, ResponsesService, TrainingDataService, AnswerGroupObjectFactory, GraphDataService, ExplorationWarningsService) {
                            $scope.trainingDataAnswer = '';
                            // See the training panel directive in ExplorationEditorTab for an
                            // explanation on the structure of this object.
                            $scope.classification = {
                                answerGroupIndex: 0,
                                newOutcome: null
                            };
                            $scope.addingNewResponse = false;
                            var _saveNewAnswerGroup = function (newAnswerGroup) {
                                var answerGroups = ResponsesService.getAnswerGroups();
                                answerGroups.push(newAnswerGroup);
                                ResponsesService.save(answerGroups, ResponsesService.getDefaultOutcome(), function (newAnswerGroups, newDefaultOutcome) {
                                    ExplorationStatesService.saveInteractionAnswerGroups(StateEditorService.getActiveStateName(), angular.copy(newAnswerGroups));
                                    ExplorationStatesService.saveInteractionDefaultOutcome(StateEditorService.getActiveStateName(), angular.copy(newDefaultOutcome));
                                    GraphDataService.recompute();
                                    ExplorationWarningsService.updateWarnings();
                                });
                            };
                            $scope.exitTrainer = function () {
                                $uibModalInstance.dismiss();
                            };
                            $scope.onConfirm = function () {
                                var index = $scope.classification.answerGroupIndex;
                                if (index > ResponsesService.getAnswerGroupCount()) {
                                    var newOutcome = $scope.classification.newOutcome;
                                    var newAnswerGroup = AnswerGroupObjectFactory.createNew([], angular.copy(newOutcome), [unhandledAnswer], null);
                                    _saveNewAnswerGroup(newAnswerGroup);
                                    TrainingDataService.associateWithAnswerGroup(ResponsesService.getAnswerGroupCount() - 1, unhandledAnswer);
                                }
                                else if (index === ResponsesService.getAnswerGroupCount()) {
                                    TrainingDataService.associateWithDefaultResponse(unhandledAnswer);
                                }
                                else {
                                    TrainingDataService.associateWithAnswerGroup(index, unhandledAnswer);
                                }
                                $uibModalInstance.close();
                                finishTrainingCallback();
                            };
                            $scope.init = function () {
                                var explorationId = ContextService.getExplorationId();
                                var currentStateName = StateEditorService.getActiveStateName();
                                var state = ExplorationStatesService.getState(currentStateName);
                                // Retrieve the interaction ID.
                                var interactionId = StateInteractionIdService.savedMemento;
                                var rulesServiceName = AngularNameService.getNameOfInteractionRulesService(interactionId);
                                // Inject RulesService dynamically.
                                var rulesService = $injector.get(rulesServiceName);
                                var classificationResult = (AnswerClassificationService.getMatchingClassificationResult(currentStateName, state.interaction, unhandledAnswer, rulesService));
                                var feedback = 'Nothing';
                                var dest = classificationResult.outcome.dest;
                                if (classificationResult.outcome.feedback.length > 0) {
                                    feedback = classificationResult.outcome.feedback.getHtml();
                                }
                                if (dest === currentStateName) {
                                    dest = '<em>(try again)</em>';
                                }
                                // $scope.trainingDataAnswer, $scope.trainingDataFeedback
                                // $scope.trainingDataOutcomeDest are intended to be local
                                // to this modal and should not be used to populate any
                                // information in the active exploration (including the
                                // feedback). The feedback here refers to a representation
                                // of the outcome of an answer group, rather than the
                                // specific feedback of the outcome (for instance, it
                                // includes the destination state within the feedback).
                                $scope.trainingDataAnswer = unhandledAnswer;
                                $scope.classification.answerGroupIndex = (classificationResult.answerGroupIndex);
                            };
                            $scope.init();
                        }
                    ]
                });
                // Save the modified training data externally in state content.
                $rootScope.$broadcast('externalSave');
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/test-interaction-panel/test-interaction-panel.directive.ts":
/*!*************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/test-interaction-panel/test-interaction-panel.directive.ts ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the test interaction panel in the state editor.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts");
__webpack_require__(/*! pages/exploration_player/CurrentInteractionService.ts */ "./core/templates/dev/head/pages/exploration_player/CurrentInteractionService.ts");
angular.module('testInteractionPanelModule').directive('testInteractionPanel', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                getStateName: '&stateName',
                getInputTemplate: '&inputTemplate',
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                'test-interaction-panel/test-interaction-panel.directive.html'),
            controller: [
                '$scope', 'ExplorationStatesService',
                'INTERACTION_SPECS', 'INTERACTION_DISPLAY_MODE_INLINE',
                'CurrentInteractionService',
                function ($scope, ExplorationStatesService, INTERACTION_SPECS, INTERACTION_DISPLAY_MODE_INLINE, CurrentInteractionService) {
                    var _stateName = $scope.getStateName();
                    var _state = ExplorationStatesService.getState(_stateName);
                    $scope.interactionIsInline = (INTERACTION_SPECS[_state.interaction.id].display_mode ===
                        INTERACTION_DISPLAY_MODE_INLINE);
                    $scope.onSubmitAnswerFromButton = function () {
                        CurrentInteractionService.submitAnswer();
                    };
                    $scope.isSubmitButtonDisabled = (CurrentInteractionService.isSubmitButtonDisabled);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration_player/CurrentInteractionService.ts":
/*!***************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration_player/CurrentInteractionService.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Facilitates communication between the current interaction
 * and the progress nav. The former holds data about the learner's answer,
 * while the latter contains the actual "Submit" button which triggers the
 * answer submission process.
 */
oppia.factory('CurrentInteractionService', [
    function () {
        var _submitAnswerFn = null;
        var _onSubmitFn = null;
        var _validityCheckFn = null;
        var _presubmitHooks = [];
        return {
            setOnSubmitFn: function (onSubmit) {
                /**
                 * The ConversationSkinDirective should register its onSubmit
                 * callback here.
                 *
                 * @param {function(answer, interactionRulesService)} onSubmit
                 */
                _onSubmitFn = onSubmit;
            },
            registerCurrentInteraction: function (submitAnswerFn, validityCheckFn) {
                /**
                 * Each interaction directive should call registerCurrentInteraction
                 * when the interaction directive is first created.
                 *
                 * @param {function|null} submitAnswerFn - Should grab the learner's
                 *   answer and pass it to onSubmit. The interaction can pass in
                 *   null if it does not use the progress nav's submit button
                 *   (ex: MultipleChoiceInput).
                 * @param {function} validityCheckFn - The progress nav will use this
                 *   to decide whether or not to disable the submit button. If the
                 *   interaction passes in null, the submit button will remain
                 *   enabled (for the entire duration of the current interaction).
                 */
                _submitAnswerFn = submitAnswerFn || null;
                _validityCheckFn = validityCheckFn || null;
            },
            registerPresubmitHook: function (hookFn) {
                /* Register a hook that will be called right before onSubmit.
                 * All hooks for the current interaction will be cleared right
                 * before loading the next card.
                 */
                _presubmitHooks.push(hookFn);
            },
            clearPresubmitHooks: function () {
                /* Clear out all the hooks for the current interaction. Should
                 * be called before loading the next card.
                 */
                _presubmitHooks = [];
            },
            onSubmit: function (answer, interactionRulesService) {
                for (var i = 0; i < _presubmitHooks.length; i++) {
                    _presubmitHooks[i]();
                }
                _onSubmitFn(answer, interactionRulesService);
            },
            submitAnswer: function () {
                /* This starts the answer submit process, it should be called once the
                 * learner presses the "Submit" button.
                 */
                if (_submitAnswerFn === null) {
                    throw Error('The current interaction did not ' +
                        'register a _submitAnswerFn.');
                }
                else {
                    _submitAnswerFn();
                }
            },
            isSubmitButtonDisabled: function () {
                /* Returns whether or not the Submit button should be disabled based on
                 * the validity of the current answer. If the interaction does not pass
                 * in a _validityCheckFn, then _validityCheckFn will be null and by
                 * default we assume the answer is valid, so the submit button should
                 * not be disabled.
                 */
                if (_validityCheckFn === null) {
                    return false;
                }
                return !_validityCheckFn();
            },
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/question-editor-page/question-editor-page.directive.ts":
/*!**********************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/question-editor-page/question-editor-page.directive.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the questions editor directive.
 */
__webpack_require__(/*! pages/state-editor/state-editor.directive.ts */ "./core/templates/dev/head/pages/state-editor/state-editor.directive.ts");
__webpack_require__(/*! components/entity-creation-services/question-creation/question-creation.service.ts */ "./core/templates/dev/head/components/entity-creation-services/question-creation/question-creation.service.ts");
__webpack_require__(/*! domain/question/EditableQuestionBackendApiService.ts */ "./core/templates/dev/head/domain/question/EditableQuestionBackendApiService.ts");
__webpack_require__(/*! domain/question/QuestionObjectFactory.ts */ "./core/templates/dev/head/domain/question/QuestionObjectFactory.ts");
__webpack_require__(/*! domain/question/QuestionUpdateService.ts */ "./core/templates/dev/head/domain/question/QuestionUpdateService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/EditabilityService.ts */ "./core/templates/dev/head/services/EditabilityService.ts");
angular.module('questionEditorPageModule').directive('questionEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                getQuestionId: '&questionId',
                getMisconceptions: '&misconceptions',
                canEditQuestion: '&',
                question: '=',
                questionStateData: '=',
                questionChanged: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/question-editor-page/question-editor-page.directive.html'),
            controller: [
                '$scope', '$rootScope', '$uibModal',
                'AlertsService', 'QuestionCreationService',
                'EditabilityService', 'EditableQuestionBackendApiService',
                'QuestionObjectFactory', 'EVENT_QUESTION_SUMMARIES_INITIALIZED',
                'INTERACTION_SPECS', 'StateEditorService', 'ResponsesService',
                'SolutionValidityService', 'QuestionUpdateService',
                function ($scope, $rootScope, $uibModal, AlertsService, QuestionCreationService, EditabilityService, EditableQuestionBackendApiService, QuestionObjectFactory, EVENT_QUESTION_SUMMARIES_INITIALIZED, INTERACTION_SPECS, StateEditorService, ResponsesService, SolutionValidityService, QuestionUpdateService) {
                    if ($scope.canEditQuestion()) {
                        EditabilityService.markEditable();
                    }
                    else {
                        EditabilityService.markNotEditable();
                    }
                    StateEditorService.setActiveStateName('question');
                    StateEditorService.setMisconceptions($scope.getMisconceptions());
                    $scope.oppiaBlackImgUrl = UrlInterpolationService.getStaticImageUrl('/avatar/oppia_avatar_100px.svg');
                    $scope.interactionIsShown = false;
                    $scope.stateEditorInitialized = false;
                    $scope.getStateContentPlaceholder = function () {
                        return ('You can speak to the learner here, then ask them a question.');
                    };
                    $scope.navigateToState = function () {
                        return;
                    };
                    $scope.addState = function () {
                        return;
                    };
                    $scope.recomputeGraph = function () {
                        return;
                    };
                    $scope.refreshWarnings = function () {
                        return;
                    };
                    var _init = function () {
                        StateEditorService.setStateNames([]);
                        StateEditorService.setCorrectnessFeedbackEnabled(true);
                        StateEditorService.setInQuestionMode(true);
                        SolutionValidityService.init(['question']);
                        var stateData = $scope.questionStateData;
                        stateData.interaction.defaultOutcome.setDestination(null);
                        if (stateData) {
                            $rootScope.$broadcast('stateEditorInitialized', stateData);
                            if (stateData.content.getHtml() || stateData.interaction.id) {
                                $scope.interactionIsShown = true;
                            }
                            $rootScope.loadingMessage = '';
                        }
                        $scope.stateEditorInitialized = true;
                    };
                    var _updateQuestion = function (updateFunction) {
                        if ($scope.questionChanged) {
                            $scope.questionChanged();
                        }
                        QuestionUpdateService.setQuestionStateData($scope.question, updateFunction);
                    };
                    $scope.saveStateContent = function (displayedValue) {
                        // Show the interaction when the text content is saved, even if no
                        // content is entered.
                        _updateQuestion(function () {
                            var stateData = $scope.question.getStateData();
                            stateData.content = angular.copy(displayedValue);
                            $scope.interactionIsShown = true;
                        });
                    };
                    $scope.saveInteractionId = function (displayedValue) {
                        _updateQuestion(function () {
                            StateEditorService.setInteractionId(angular.copy(displayedValue));
                        });
                    };
                    $scope.saveInteractionAnswerGroups = function (newAnswerGroups) {
                        _updateQuestion(function () {
                            StateEditorService.setInteractionAnswerGroups(angular.copy(newAnswerGroups));
                        });
                    };
                    $scope.saveInteractionDefaultOutcome = function (newOutcome) {
                        _updateQuestion(function () {
                            StateEditorService.setInteractionDefaultOutcome(angular.copy(newOutcome));
                        });
                    };
                    $scope.saveInteractionCustomizationArgs = function (displayedValue) {
                        _updateQuestion(function () {
                            StateEditorService.setInteractionCustomizationArgs(angular.copy(displayedValue));
                        });
                    };
                    $scope.saveSolution = function (displayedValue) {
                        _updateQuestion(function () {
                            StateEditorService.setInteractionSolution(angular.copy(displayedValue));
                        });
                    };
                    $scope.saveHints = function (displayedValue) {
                        _updateQuestion(function () {
                            StateEditorService.setInteractionHints(angular.copy(displayedValue));
                        });
                    };
                    $scope.showMarkAllAudioAsNeedingUpdateModalIfRequired = function (contentId) {
                        var state = $scope.question.getStateData();
                        var recordedVoiceovers = state.recordedVoiceovers;
                        var writtenTranslations = state.writtenTranslations;
                        var updateQuestion = _updateQuestion;
                        if (recordedVoiceovers.hasUnflaggedVoiceovers(contentId)) {
                            $uibModal.open({
                                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/mark_all_audio_and_translations_as_' +
                                    'needing_update_modal_directive.html'),
                                backdrop: true,
                                controller: ('MarkAllAudioAndTranslationsAsNeedingUpdateController')
                            }).result.then(function () {
                                updateQuestion(function () {
                                    recordedVoiceovers.markAllVoiceoversAsNeedingUpdate(contentId);
                                    writtenTranslations.markAllTranslationsAsNeedingUpdate(contentId);
                                });
                            });
                        }
                    };
                    $scope.$on('stateEditorDirectiveInitialized', function (evt) {
                        _init();
                    });
                    $scope.$on('interactionEditorInitialized', function (evt) {
                        _init();
                    });
                    $scope.$on('onInteractionIdChanged', function (evt) {
                        _init();
                    });
                    _init();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/questions-list-page/questions-list-page.directive.ts":
/*!********************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/questions-list-page/questions-list-page.directive.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the questions list.
 */
__webpack_require__(/*! directives/AngularHtmlBindDirective.ts */ "./core/templates/dev/head/directives/AngularHtmlBindDirective.ts");
__webpack_require__(/*! pages/question-editor-page/question-editor-page.directive.ts */ "./core/templates/dev/head/pages/question-editor-page/question-editor-page.directive.ts");
__webpack_require__(/*! components/entity-creation-services/question-creation/question-creation.service.ts */ "./core/templates/dev/head/components/entity-creation-services/question-creation/question-creation.service.ts");
__webpack_require__(/*! domain/editor/undo_redo/UndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/UndoRedoService.ts");
__webpack_require__(/*! domain/question/EditableQuestionBackendApiService.ts */ "./core/templates/dev/head/domain/question/EditableQuestionBackendApiService.ts");
__webpack_require__(/*! domain/question/QuestionObjectFactory.ts */ "./core/templates/dev/head/domain/question/QuestionObjectFactory.ts");
__webpack_require__(/*! domain/skill/EditableSkillBackendApiService.ts */ "./core/templates/dev/head/domain/skill/EditableSkillBackendApiService.ts");
__webpack_require__(/*! domain/skill/MisconceptionObjectFactory.ts */ "./core/templates/dev/head/domain/skill/MisconceptionObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! filters/string-utility-filters/truncate.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate.filter.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('questionsListPageModule').directive('questionsList', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                getSkill: '&skill',
                getTopicId: '&topicId',
                getQuestionSummaries: '=',
                fetchQuestionSummaries: '=',
                isLastPage: '=isLastQuestionBatch',
                getAllSkillSummaries: '&allSkillSummaries',
                canEditQuestion: '&',
                getQuestionSuggestionThreads: '&questionSuggestionThreads'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/questions-list-page/questions-list-page.directive.html'),
            controller: [
                '$scope', '$filter', '$http', '$q', '$uibModal', '$window',
                'AlertsService', 'QuestionCreationService', 'UrlService',
                'NUM_QUESTIONS_PER_PAGE', 'EditableQuestionBackendApiService',
                'EditableSkillBackendApiService', 'MisconceptionObjectFactory',
                'QuestionObjectFactory', 'EVENT_QUESTION_SUMMARIES_INITIALIZED',
                'StateEditorService', 'QuestionUndoRedoService', 'UndoRedoService',
                function ($scope, $filter, $http, $q, $uibModal, $window, AlertsService, QuestionCreationService, UrlService, NUM_QUESTIONS_PER_PAGE, EditableQuestionBackendApiService, EditableSkillBackendApiService, MisconceptionObjectFactory, QuestionObjectFactory, EVENT_QUESTION_SUMMARIES_INITIALIZED, StateEditorService, QuestionUndoRedoService, UndoRedoService) {
                    $scope.currentPage = 0;
                    var _initTab = function () {
                        $scope.questionEditorIsShown = false;
                        $scope.question = null;
                        $scope.questionSummaries =
                            $scope.getQuestionSummaries($scope.currentPage);
                        $scope.truncatedQuestionSummaries = [];
                        if ($scope.questionSummaries) {
                            $scope.truncatedQuestionSummaries =
                                $scope.questionSummaries.map(function (question) {
                                    var summary = $filter('formatRtePreview')(question.summary.question_content);
                                    summary = $filter('truncate')(summary, 100);
                                    return summary;
                                });
                        }
                        $scope.activeQuestion = null;
                        $scope.questionIsBeingUpdated = false;
                        $scope.misconceptions = [];
                        if ($scope.getSkill()) {
                            $scope.misconceptions = $scope.getSkill().getMisconceptions();
                            $scope.skillId = $scope.getSkill().getId();
                            $scope.entityId = $scope.skillId;
                        }
                        else {
                            $scope.entityId = $scope.getTopicId();
                        }
                    };
                    $scope.getQuestionIndex = function (index) {
                        return $scope.currentPage * NUM_QUESTIONS_PER_PAGE + index + 1;
                    };
                    $scope.goToNextPage = function () {
                        $scope.currentPage++;
                        var questionSummaries = $scope.getQuestionSummaries($scope.currentPage);
                        if (questionSummaries === null) {
                            $scope.fetchQuestionSummaries($scope.entityId, false);
                        }
                        else {
                            $scope.questionSummaries = questionSummaries;
                        }
                    };
                    $scope.goToPreviousPage = function () {
                        $scope.currentPage--;
                        $scope.questionSummaries =
                            $scope.getQuestionSummaries($scope.currentPage);
                    };
                    $scope.saveAndPublishQuestion = function () {
                        var validationErrors = $scope.question.validate($scope.misconceptions);
                        if (validationErrors) {
                            AlertsService.addWarning(validationErrors);
                            return;
                        }
                        if (!$scope.questionIsBeingUpdated) {
                            EditableQuestionBackendApiService.createQuestion($scope.skillId, $scope.question.toBackendDict(true)).then(function () {
                                $scope.fetchQuestionSummaries($scope.entityId, true);
                                $scope.questionIsBeingSaved = false;
                                $scope.currentPage = 0;
                            });
                        }
                        else {
                            if (QuestionUndoRedoService.hasChanges()) {
                                $scope.questionIsBeingSaved = true;
                                // TODO(tjiang11): Allow user to specify a commit message.
                                EditableQuestionBackendApiService.updateQuestion($scope.questionId, $scope.question.getVersion(), 'blank', QuestionUndoRedoService.getCommittableChangeList()).then(function () {
                                    QuestionUndoRedoService.clearChanges();
                                    $scope.questionIsBeingSaved = false;
                                    $scope.fetchQuestionSummaries($scope.entityId, true);
                                }, function (error) {
                                    AlertsService.addWarning(error || 'There was an error saving the question.');
                                    $scope.questionIsBeingSaved = false;
                                });
                            }
                        }
                    };
                    $scope.initializeNewQuestionCreation = function () {
                        $scope.question =
                            QuestionObjectFactory.createDefaultQuestion();
                        $scope.questionId = $scope.question.getId();
                        $scope.questionStateData = $scope.question.getStateData();
                        $scope.questionIsBeingUpdated = false;
                        $scope.openQuestionEditor();
                    };
                    $scope.createQuestion = function () {
                        if ($scope.getSkill()) {
                            $scope.initializeNewQuestionCreation();
                            return;
                        }
                        var allSkillSummaries = $scope.getAllSkillSummaries();
                        var modalInstance = $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                                'select-skill-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.selectedSkillId = null;
                                    $scope.skillSummaries = allSkillSummaries;
                                    $scope.selectOrDeselectSkill = function (skillId) {
                                        if (skillId === $scope.selectedSkillId) {
                                            $scope.selectedSkillId = null;
                                        }
                                        else {
                                            $scope.selectedSkillId = skillId;
                                        }
                                    };
                                    $scope.done = function () {
                                        $uibModalInstance.close($scope.selectedSkillId);
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                    $scope.ok = function () {
                                        $uibModalInstance.dismiss('ok');
                                    };
                                }
                            ]
                        });
                        modalInstance.result.then(function (skillId) {
                            $scope.skillId = skillId;
                            EditableSkillBackendApiService.fetchSkill(skillId).then(function (skillDict) {
                                $scope.misconceptions = skillDict.misconceptions.map(function (misconceptionsBackendDict) {
                                    return MisconceptionObjectFactory.createFromBackendDict(misconceptionsBackendDict);
                                });
                                $scope.initializeNewQuestionCreation();
                            }, function (error) {
                                AlertsService.addWarning();
                            });
                        });
                    };
                    $scope.editQuestion = function (questionSummary) {
                        $scope.misconceptions = [];
                        EditableQuestionBackendApiService.fetchQuestion(questionSummary.id).then(function (response) {
                            if (response.associated_skill_dicts) {
                                response.associated_skill_dicts.forEach(function (skillDict) {
                                    skillDict.misconceptions.forEach(function (misconception) {
                                        $scope.misconceptions.push(MisconceptionObjectFactory.createFromBackendDict(misconception));
                                    });
                                });
                            }
                            $scope.question =
                                QuestionObjectFactory.createFromBackendDict(response.question_dict);
                            $scope.questionId = $scope.question.getId();
                            $scope.questionStateData = $scope.question.getStateData();
                            $scope.questionIsBeingUpdated = true;
                            $scope.openQuestionEditor();
                        }, function (errorResponse) {
                            AlertsService.addWarning(errorResponse.error || 'Failed to fetch question.');
                        });
                    };
                    $scope.openQuestionEditor = function () {
                        var question = $scope.question;
                        var questionStateData = $scope.questionStateData;
                        var questionId = $scope.questionId;
                        var canEditQuestion = $scope.canEditQuestion();
                        var misconceptions = $scope.misconceptions;
                        QuestionUndoRedoService.clearChanges();
                        var modalInstance = $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/skill-editor-page/skill-editor-templates/' +
                                'question-editor-modal.directive.html'),
                            backdrop: 'static',
                            keyboard: false,
                            controller: [
                                '$scope', '$uibModalInstance', 'StateEditorService',
                                'UndoRedoService',
                                function ($scope, $uibModalInstance, StateEditorService, UndoRedoService) {
                                    $scope.question = question;
                                    $scope.questionStateData = questionStateData;
                                    $scope.questionId = questionId;
                                    $scope.misconceptions = misconceptions;
                                    $scope.canEditQuestion = canEditQuestion;
                                    $scope.removeErrors = function () {
                                        $scope.validationError = null;
                                    };
                                    $scope.questionChanged = function () {
                                        $scope.removeErrors();
                                    };
                                    $scope.done = function () {
                                        $scope.validationError = $scope.question.validate($scope.misconceptions);
                                        if ($scope.validationError) {
                                            return;
                                        }
                                        if (!StateEditorService.isCurrentSolutionValid()) {
                                            $scope.validationError =
                                                'The solution is invalid and does not ' +
                                                    'correspond to a correct answer';
                                            return;
                                        }
                                        $uibModalInstance.close();
                                    };
                                    $scope.cancel = function () {
                                        if (QuestionUndoRedoService.hasChanges()) {
                                            var modalInstance = $uibModal.open({
                                                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/skill-editor-page/skill-editor-templates/' +
                                                    'confirm-question-modal-exit-modal.directive.html'),
                                                backdrop: true,
                                                controller: [
                                                    '$scope', '$uibModalInstance',
                                                    function ($scope, $uibModalInstance) {
                                                        $scope.cancel = function () {
                                                            $uibModalInstance.dismiss('cancel');
                                                        };
                                                        $scope.close = function () {
                                                            $uibModalInstance.close();
                                                        };
                                                    }
                                                ]
                                            });
                                            modalInstance.result.then(function () {
                                                $uibModalInstance.dismiss('cancel');
                                            });
                                        }
                                        else {
                                            $uibModalInstance.dismiss('cancel');
                                        }
                                    };
                                }
                            ]
                        });
                        modalInstance.result.then(function () {
                            $scope.saveAndPublishQuestion();
                        });
                    };
                    $scope.setActiveQuestion = function (questionSuggestionThread) {
                        if (questionSuggestionThread.getSuggestionStatus() === 'review') {
                            $scope.activeQuestion = (questionSuggestionThread.suggestion.question);
                            $scope.idOfActiveSuggestion = (questionSuggestionThread.suggestion.suggestionId);
                        }
                    };
                    $scope.clearActiveQuestion = function () {
                        $scope.activeQuestion = null;
                        $scope.idOfActiveSuggestion = null;
                        $scope.suggestionReviewMessage = null;
                    };
                    $scope.showSelectSkillModal = function () {
                        var allSkillSummaries = $scope.getAllSkillSummaries();
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                                'select-skill-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.selectedSkillId = null;
                                    $scope.skillSummaries = allSkillSummaries;
                                    $scope.selectSkill = function (skillId) {
                                        $scope.selectedSkillId = skillId;
                                    };
                                    $scope.done = function () {
                                        $uibModalInstance.close({
                                            skillId: $scope.selectedSkillId
                                        });
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                }
                            ]
                        }).result.then(function (res) {
                            $scope.selectedSkillId = res.skillId;
                            EditableSkillBackendApiService.fetchSkill(res.skillId).then(function (skillDict) {
                                $scope.misconceptions = skillDict.misconceptions.map(function (misconceptionsBackendDict) {
                                    return MisconceptionObjectFactory.createFromBackendDict(misconceptionsBackendDict);
                                });
                            }, function (error) {
                                AlertsService.addWarning();
                            });
                        });
                    };
                    $scope.acceptQuestion = function (suggestionId, reviewMessage) {
                        var suggestionActionHandlerUrl = (UrlInterpolationService.interpolateUrl('/suggestionactionhandler/topic/<topic_id>/<suggestion_id>', {
                            topic_id: $scope.getTopicId(),
                            suggestion_id: suggestionId
                        }));
                        $http.put(suggestionActionHandlerUrl, {
                            action: 'accept',
                            skill_id: $scope.selectedSkillId,
                            commit_message: 'unused_commit_message',
                            review_message: reviewMessage
                        }).then(function () {
                            $scope.clearActiveQuestion();
                            $window.location.reload();
                        });
                    };
                    $scope.rejectQuestion = function (suggestionId, reviewMessage) {
                        var suggestionActionHandlerUrl = (UrlInterpolationService.interpolateUrl('/suggestionactionhandler/topic/<topic_id>/<suggestion_id>', {
                            topic_id: $scope.getTopicId(),
                            suggestion_id: suggestionId
                        }));
                        $http.put(suggestionActionHandlerUrl, {
                            action: 'reject',
                            commit_message: 'unused_commit_message',
                            review_message: reviewMessage
                        }).then(function () {
                            $scope.clearActiveQuestion();
                            $window.location.reload();
                        });
                    };
                    $scope.$on(EVENT_QUESTION_SUMMARIES_INITIALIZED, _initTab);
                    _initTab();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-content-editor/state-content-editor.directive.ts":
/*!***********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-content-editor/state-content-editor.directive.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the state content editor.
 */
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-editor.directive.ts");
__webpack_require__(/*! directives/AngularHtmlBindDirective.ts */ "./core/templates/dev/head/directives/AngularHtmlBindDirective.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/editor-first-time-events.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/editor-first-time-events.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
__webpack_require__(/*! services/EditabilityService.ts */ "./core/templates/dev/head/services/EditabilityService.ts");
angular.module('stateContentEditorModule').directive('stateContentEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            link: function (scope, element) {
                // This allows the scope to be retrievable during Karma unit testing.
                // See http://stackoverflow.com/a/29833832 for more details.
                element[0].getControllerScope = function () {
                    return scope;
                };
            },
            scope: {
                getStateContentPlaceholder: '&stateContentPlaceholder',
                onSaveStateContent: '=',
                showMarkAllAudioAsNeedingUpdateModalIfRequired: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/state-editor/state-content-editor/' +
                'state-content-editor.directive.html'),
            controller: [
                '$scope', 'StateContentService', 'EditabilityService',
                'EditorFirstTimeEventsService',
                function ($scope, StateContentService, EditabilityService, EditorFirstTimeEventsService) {
                    $scope.HTML_SCHEMA = {
                        type: 'html'
                    };
                    $scope.contentId = null;
                    $scope.StateContentService = StateContentService;
                    if (StateContentService.displayed) {
                        $scope.contentId = StateContentService.displayed.getContentId();
                    }
                    $scope.contentEditorIsOpen = false;
                    $scope.isEditable = EditabilityService.isEditable;
                    $scope.cardHeightLimitWarningIsShown = true;
                    $scope.isCardHeightLimitReached = function () {
                        var shadowPreviewCard = $('.oppia-shadow-preview-card .oppia-learner-view-card-top-section');
                        var height = shadowPreviewCard.height();
                        return (height > 630);
                    };
                    $scope.hideCardHeightLimitWarning = function () {
                        $scope.cardHeightLimitWarningIsShown = false;
                    };
                    var saveContent = function () {
                        StateContentService.saveDisplayedValue();
                        $scope.onSaveStateContent(StateContentService.displayed);
                        $scope.contentEditorIsOpen = false;
                    };
                    $scope.$on('externalSave', function () {
                        if ($scope.contentEditorIsOpen) {
                            saveContent();
                        }
                    });
                    $scope.openStateContentEditor = function () {
                        if ($scope.isEditable()) {
                            EditorFirstTimeEventsService.registerFirstOpenContentBoxEvent();
                            $scope.contentEditorIsOpen = true;
                        }
                    };
                    $scope.onSaveContentButtonClicked = function () {
                        EditorFirstTimeEventsService.registerFirstSaveContentEvent();
                        var savedContent = StateContentService.savedMemento;
                        var contentHasChanged = (savedContent.getHtml() !==
                            StateContentService.displayed.getHtml());
                        if (contentHasChanged) {
                            var contentId = StateContentService.displayed.getContentId();
                            $scope.showMarkAllAudioAsNeedingUpdateModalIfRequired(contentId);
                        }
                        saveContent();
                    };
                    $scope.cancelEdit = function () {
                        StateContentService.restoreFromMemento();
                        $scope.contentEditorIsOpen = false;
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-content.service.ts":
/*!**************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-content.service.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A data service that stores the current state content.
 */
// TODO(sll): Add validation.
angular.module('stateEditorModule').factory('StateContentService', [
    'StatePropertyService', function (StatePropertyService) {
        var child = Object.create(StatePropertyService);
        child.setterMethodKey = 'saveStateContent';
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-customization-args.service.ts":
/*!*************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-customization-args.service.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A data service that stores the current state customization
 * args for theinteraction. This is a dict mapping customization arg names
 * to dicts of the form {value: customization_arg_value}.
 */
// TODO(sll): Add validation.
angular.module('stateEditorModule').factory('StateCustomizationArgsService', [
    'StatePropertyService', function (StatePropertyService) {
        var child = Object.create(StatePropertyService);
        child.setterMethodKey = 'saveInteractionCustomizationArgs';
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts":
/*!**************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-editor/state-editor.service.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A service that maintains a record of the objects exclusive to
 * a state.
 */
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts");
angular.module('stateEditorModule').factory('StateEditorService', [
    '$log', 'SolutionValidityService',
    function ($log, SolutionValidityService) {
        var activeStateName = null;
        var stateNames = [];
        var correctnessFeedbackEnabled = null;
        var inQuestionMode = null;
        // Currently, the only place where this is used in the state editor
        // is in solution verification. So, once the interaction is set in this
        // service, the given solutions would be automatically verified for the set
        // interaction.
        var interaction = null;
        var misconceptions = [];
        var explorationIsWhitelisted = false;
        return {
            getActiveStateName: function () {
                return activeStateName;
            },
            setActiveStateName: function (newActiveStateName) {
                if (newActiveStateName === '' || newActiveStateName === null) {
                    $log.error('Invalid active state name: ' + newActiveStateName);
                    return;
                }
                activeStateName = newActiveStateName;
            },
            isExplorationWhitelisted: function () {
                return explorationIsWhitelisted;
            },
            updateExplorationWhitelistedStatus: function (value) {
                explorationIsWhitelisted = value;
            },
            setMisconceptions: function (newMisconceptions) {
                misconceptions = newMisconceptions;
            },
            getMisconceptions: function () {
                return angular.copy(misconceptions);
            },
            setInteraction: function (newInteraction) {
                interaction = newInteraction;
            },
            setInteractionId: function (newId) {
                interaction.setId(newId);
            },
            setInteractionAnswerGroups: function (newAnswerGroups) {
                interaction.setAnswerGroups(newAnswerGroups);
            },
            setInteractionDefaultOutcome: function (newOutcome) {
                interaction.setDefaultOutcome(newOutcome);
            },
            setInteractionCustomizationArgs: function (newArgs) {
                interaction.setCustomizationArgs(newArgs);
            },
            setInteractionSolution: function (solution) {
                interaction.setSolution(solution);
            },
            setInteractionHints: function (hints) {
                interaction.setHints(hints);
            },
            getInteraction: function () {
                return angular.copy(interaction);
            },
            getAnswerChoices: function (interactionId, customizationArgs) {
                if (!interactionId) {
                    return null;
                }
                // Special cases for multiple choice input and image click input.
                if (interactionId === 'MultipleChoiceInput') {
                    return customizationArgs.choices.value.map(function (val, ind) {
                        return {
                            val: ind,
                            label: val
                        };
                    });
                }
                else if (interactionId === 'ImageClickInput') {
                    var _answerChoices = [];
                    var imageWithRegions = customizationArgs.imageAndRegions.value;
                    for (var j = 0; j < imageWithRegions.labeledRegions.length; j++) {
                        _answerChoices.push({
                            val: imageWithRegions.labeledRegions[j].label,
                            label: imageWithRegions.labeledRegions[j].label
                        });
                    }
                    return _answerChoices;
                }
                else if (interactionId === 'ItemSelectionInput' ||
                    interactionId === 'DragAndDropSortInput') {
                    return customizationArgs.choices.value.map(function (val) {
                        return {
                            val: val,
                            label: val
                        };
                    });
                }
                else {
                    return null;
                }
            },
            setInQuestionMode: function (newModeValue) {
                inQuestionMode = newModeValue;
            },
            isInQuestionMode: function () {
                return inQuestionMode;
            },
            setCorrectnessFeedbackEnabled: function (newCorrectnessFeedbackEnabled) {
                correctnessFeedbackEnabled = newCorrectnessFeedbackEnabled;
            },
            getCorrectnessFeedbackEnabled: function () {
                return correctnessFeedbackEnabled;
            },
            setStateNames: function (newStateNames) {
                stateNames = newStateNames;
            },
            getStateNames: function () {
                return stateNames;
            },
            isCurrentSolutionValid: function () {
                return SolutionValidityService.isSolutionValid(activeStateName);
            },
            deleteCurrentSolutionValidity: function () {
                SolutionValidityService.deleteSolutionValidity(activeStateName);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-hints.service.ts":
/*!************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-hints.service.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A data service that stores the current interaction hints.
 */
angular.module('stateEditorModule').factory('StateHintsService', [
    'StatePropertyService', function (StatePropertyService) {
        var child = Object.create(StatePropertyService);
        child.setterMethodKey = 'saveHints';
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-interaction-id.service.ts":
/*!*********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-interaction-id.service.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A data service that stores the current interaction id.
 */
// TODO(sll): Add validation.
angular.module('stateEditorModule').factory('StateInteractionIdService', [
    'StatePropertyService', function (StatePropertyService) {
        var child = Object.create(StatePropertyService);
        child.setterMethodKey = 'saveInteractionId';
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts":
/*!******************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Standalone services for the general state editor page.
 */
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('stateEditorModule').factory('StatePropertyService', [
    '$log', 'AlertsService',
    function ($log, AlertsService) {
        // Public base API for data services corresponding to state properties
        // (interaction id, content, etc.)
        // WARNING: This should be initialized only in the context of the state
        // editor, and every time the state is loaded, so that proper behavior is
        // maintained if e.g. the state is renamed.
        return {
            init: function (stateName, value) {
                if (this.setterMethodKey === null) {
                    throw 'State property setter method key cannot be null.';
                }
                // The name of the state.
                this.stateName = stateName;
                // The current value of the property (which may not have been saved to
                // the frontend yet). In general, this will be bound directly to the UI.
                this.displayed = angular.copy(value);
                // The previous (saved-in-the-frontend) value of the property. Here,
                // 'saved' means that this is the latest value of the property as
                // determined by the frontend change list.
                this.savedMemento = angular.copy(value);
            },
            // Returns whether the current value has changed from the memento.
            hasChanged: function () {
                return !angular.equals(this.savedMemento, this.displayed);
            },
            // The name of the setter method in ExplorationStatesService for this
            // property. THIS MUST BE SPECIFIED BY SUBCLASSES.
            setterMethodKey: null,
            // Transforms the given value into a normalized form. THIS CAN BE
            // OVERRIDDEN BY SUBCLASSES. The default behavior is to do nothing.
            _normalize: function (value) {
                return value;
            },
            // Validates the given value and returns a boolean stating whether it
            // is valid or not. THIS CAN BE OVERRIDDEN BY SUBCLASSES. The default
            // behavior is to always return true.
            _isValid: function (value) {
                return true;
            },
            // Updates the memento to the displayed value.
            saveDisplayedValue: function () {
                if (this.setterMethodKey === null) {
                    throw 'State property setter method key cannot be null.';
                }
                this.displayed = this._normalize(this.displayed);
                if (!this._isValid(this.displayed) || !this.hasChanged()) {
                    this.restoreFromMemento();
                    return;
                }
                if (angular.equals(this.displayed, this.savedMemento)) {
                    return;
                }
                AlertsService.clearWarnings();
                this.savedMemento = angular.copy(this.displayed);
            },
            // Reverts the displayed value to the saved memento.
            restoreFromMemento: function () {
                this.displayed = angular.copy(this.savedMemento);
            }
        };
    }
]);
oppia.constant('WARNING_TYPES', {
    // These must be fixed before the exploration can be saved.
    CRITICAL: 'critical',
    // These must be fixed before publishing an exploration to the public
    // library.
    ERROR: 'error'
});
oppia.constant('STATE_ERROR_MESSAGES', {
    ADD_INTERACTION: 'Please add an interaction to this card.',
    STATE_UNREACHABLE: 'This card is unreachable.',
    UNABLE_TO_END_EXPLORATION: ('There\'s no way to complete the exploration starting from this card. ' +
        'To fix this, make sure that the last card in the chain starting from ' +
        'this one has an \'End Exploration\' question type.'),
    INCORRECT_SOLUTION: ('The current solution does not lead to another card.'),
    UNRESOLVED_ANSWER: ('There is an answer among the top 10 which has no explicit feedback.')
});


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-solution.service.ts":
/*!***************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-solution.service.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A data service that stores the current interaction solution.
 */
angular.module('stateEditorModule').factory('StateSolutionService', [
    'StatePropertyService', function (StatePropertyService) {
        var child = Object.create(StatePropertyService);
        child.setterMethodKey = 'saveSolution';
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-editor.directive.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-editor.directive.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the state editor directive.
 */
__webpack_require__(/*! pages/state-editor/state-content-editor/state-content-editor.directive.ts */ "./core/templates/dev/head/pages/state-editor/state-content-editor/state-content-editor.directive.ts");
__webpack_require__(/*! pages/state-editor/state-hints-editor/state-hints-editor.directive.ts */ "./core/templates/dev/head/pages/state-editor/state-hints-editor/state-hints-editor.directive.ts");
__webpack_require__(/*! pages/state-editor/state-interaction-editor/state-interaction-editor.directive.ts */ "./core/templates/dev/head/pages/state-editor/state-interaction-editor/state-interaction-editor.directive.ts");
__webpack_require__(/*! pages/state-editor/state-responses/state-responses.directive.ts */ "./core/templates/dev/head/pages/state-editor/state-responses/state-responses.directive.ts");
__webpack_require__(/*! pages/state-editor/state-solution-editor/state-solution-editor.directive.ts */ "./core/templates/dev/head/pages/state-editor/state-solution-editor/state-solution-editor.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-property/state-property.service.ts");
angular.module('stateEditorModule').directive('stateEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                addState: '=',
                getStateContentPlaceholder: '&stateContentPlaceholder',
                isInteractionShown: '&interactionIsShown',
                navigateToState: '=',
                onSaveHints: '=',
                onSaveInteractionAnswerGroups: '=',
                onSaveInteractionId: '=',
                onSaveInteractionCustomizationArgs: '=',
                onSaveInteractionDefaultOutcome: '=',
                onSaveSolution: '=',
                onSaveStateContent: '=',
                recomputeGraph: '=',
                refreshWarnings: '=',
                showMarkAllAudioAsNeedingUpdateModalIfRequired: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/state-editor/state-editor.directive.html'),
            controller: [
                '$scope', '$rootScope', 'INTERACTION_SPECS', 'StateEditorService',
                'StateContentService', 'StateHintsService', 'StateSolutionService',
                'StateInteractionIdService', 'StateCustomizationArgsService',
                function ($scope, $rootScope, INTERACTION_SPECS, StateEditorService, StateContentService, StateHintsService, StateSolutionService, StateInteractionIdService, StateCustomizationArgsService) {
                    $scope.oppiaBlackImgUrl = UrlInterpolationService.getStaticImageUrl('/avatar/oppia_avatar_100px.svg');
                    $scope.currentStateIsTerminal = false;
                    $scope.interactionIdIsSet = false;
                    $scope.servicesInitialized = false;
                    $scope.stateName = StateEditorService.getActiveStateName();
                    var updateInteractionVisibility = function (newInteractionId) {
                        $scope.interactionIdIsSet = Boolean(newInteractionId);
                        $scope.currentInteractionCanHaveSolution = Boolean($scope.interactionIdIsSet &&
                            INTERACTION_SPECS[newInteractionId].can_have_solution);
                        $scope.currentStateIsTerminal = Boolean($scope.interactionIdIsSet && INTERACTION_SPECS[newInteractionId].is_terminal);
                    };
                    $scope.reinitializeEditor = function () {
                        $rootScope.$broadcast('stateEditorInitialized', $scope.stateData);
                    };
                    $scope.$on('onInteractionIdChanged', function (evt, newInteractionId) {
                        updateInteractionVisibility(newInteractionId);
                    });
                    $scope.$on('stateEditorInitialized', function (evt, stateData) {
                        $scope.stateData = stateData;
                        $scope.stateName = StateEditorService.getActiveStateName();
                        StateEditorService.setInteraction(stateData.interaction);
                        StateContentService.init($scope.stateName, stateData.content);
                        StateHintsService.init($scope.stateName, stateData.interaction.hints);
                        StateInteractionIdService.init($scope.stateName, stateData.interaction.id);
                        StateCustomizationArgsService.init($scope.stateName, stateData.interaction.customizationArgs);
                        StateSolutionService.init($scope.stateName, stateData.interaction.solution);
                        updateInteractionVisibility(stateData.interaction.id);
                        $scope.servicesInitialized = true;
                    });
                    $rootScope.$broadcast('stateEditorDirectiveInitialized');
                }
            ],
            controllerAs: 'stateEditorController'
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-hints-editor/state-hints-editor.directive.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-hints-editor/state-hints-editor.directive.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the add and view hints section of the state
 * editor.
 */
__webpack_require__(/*! components/state/hint-editor/hint-editor.directive.ts */ "./core/templates/dev/head/components/state/hint-editor/hint-editor.directive.ts");
__webpack_require__(/*! components/state/response-header/response-header.directive.ts */ "./core/templates/dev/head/components/state/response-header/response-header.directive.ts");
__webpack_require__(/*! domain/exploration/HintObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/HintObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-hints.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-hints.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-interaction-id.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-interaction-id.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-solution.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-solution.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/EditabilityService.ts */ "./core/templates/dev/head/services/EditabilityService.ts");
__webpack_require__(/*! services/GenerateContentIdService.ts */ "./core/templates/dev/head/services/GenerateContentIdService.ts");
angular.module('stateHintsEditorModule').directive('stateHintsEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                onSaveHints: '=',
                onSaveSolution: '=',
                showMarkAllAudioAsNeedingUpdateModalIfRequired: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/state-editor/state-hints-editor/' +
                'state-hints-editor.directive.html'),
            controller: [
                '$scope', '$rootScope', '$uibModal', '$filter',
                'GenerateContentIdService', 'AlertsService', 'INTERACTION_SPECS',
                'StateHintsService', 'COMPONENT_NAME_HINT', 'StateEditorService',
                'EditabilityService', 'StateInteractionIdService',
                'UrlInterpolationService', 'HintObjectFactory', 'StateSolutionService',
                function ($scope, $rootScope, $uibModal, $filter, GenerateContentIdService, AlertsService, INTERACTION_SPECS, StateHintsService, COMPONENT_NAME_HINT, StateEditorService, EditabilityService, StateInteractionIdService, UrlInterpolationService, HintObjectFactory, StateSolutionService) {
                    $scope.EditabilityService = EditabilityService;
                    $scope.StateHintsService = StateHintsService;
                    $scope.activeHintIndex = null;
                    $scope.canEdit = EditabilityService.isEditable();
                    $scope.dragDotsImgUrl = UrlInterpolationService.getStaticImageUrl('/general/drag_dots.png');
                    $scope.$on('stateEditorInitialized', function (evt, stateData) {
                        $scope.activeHintIndex = null;
                    });
                    var _getExistingHintsContentIds = function () {
                        var existingContentIds = [];
                        StateHintsService.displayed.forEach(function (hint) {
                            var contentId = hint.hintContent.getContentId();
                            existingContentIds.push(contentId);
                        });
                        return existingContentIds;
                    };
                    $scope.getHintButtonText = function () {
                        var hintButtonText = '+ Add Hint';
                        if ($scope.StateHintsService.displayed) {
                            if ($scope.StateHintsService.displayed.length >= 5) {
                                hintButtonText = 'Limit Reached';
                            }
                        }
                        return hintButtonText;
                    };
                    $scope.getHintSummary = function (hint) {
                        var hintAsPlainText = $filter('formatRtePreview')(hint.hintContent.getHtml());
                        return hintAsPlainText;
                    };
                    $scope.changeActiveHintIndex = function (newIndex) {
                        var currentActiveIndex = $scope.activeHintIndex;
                        if (currentActiveIndex !== null && (!StateHintsService.displayed[currentActiveIndex]
                            .hintContent.getHtml())) {
                            if (StateSolutionService.savedMemento &&
                                StateHintsService.displayed.length === 1) {
                                openDeleteLastHintModal();
                                return;
                            }
                            else {
                                AlertsService.addInfoMessage('Deleting empty hint.');
                                StateHintsService.displayed.splice(currentActiveIndex, 1);
                                StateHintsService.saveDisplayedValue();
                                $scope.onSaveHints(StateHintsService.displayed);
                            }
                        }
                        // If the current hint is being clicked on again, close it.
                        if (newIndex === $scope.activeHintIndex) {
                            $scope.activeHintIndex = null;
                        }
                        else {
                            $scope.activeHintIndex = newIndex;
                        }
                    };
                    // This returns false if the current interaction ID is null.
                    $scope.isCurrentInteractionLinear = function () {
                        var interactionId = StateInteractionIdService.savedMemento;
                        return interactionId && INTERACTION_SPECS[interactionId].is_linear;
                    };
                    $scope.openAddHintModal = function () {
                        if ($scope.StateHintsService.displayed.length === 5) {
                            return;
                        }
                        var existingHintsContentIds = _getExistingHintsContentIds();
                        AlertsService.clearWarnings();
                        $rootScope.$broadcast('externalSave');
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                                'exploration-editor-tab-templates/' +
                                'add-hint-modal.template.html'),
                            backdrop: 'static',
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.HINT_FORM_SCHEMA = {
                                        type: 'html',
                                        ui_config: {}
                                    };
                                    $scope.tmpHint = '';
                                    $scope.addHintForm = {};
                                    $scope.hintIndex = StateHintsService.displayed.length + 1;
                                    $scope.saveHint = function () {
                                        var contentId = GenerateContentIdService.getNextId(existingHintsContentIds, COMPONENT_NAME_HINT);
                                        // Close the modal and save it afterwards.
                                        $uibModalInstance.close({
                                            hint: angular.copy(HintObjectFactory.createNew(contentId, $scope.tmpHint)),
                                            contentId: contentId
                                        });
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                        AlertsService.clearWarnings();
                                    };
                                }
                            ]
                        }).result.then(function (result) {
                            StateHintsService.displayed.push(result.hint);
                            StateHintsService.saveDisplayedValue();
                            $scope.onSaveHints(StateHintsService.displayed);
                        });
                    };
                    // When the page is scrolled so that the top of the page is above the
                    // browser viewport, there are some bugs in the positioning of the
                    // helper. This is a bug in jQueryUI that has not been fixed yet. For
                    // more details, see http://stackoverflow.com/q/5791886
                    $scope.HINT_LIST_SORTABLE_OPTIONS = {
                        axis: 'y',
                        cursor: 'move',
                        handle: '.oppia-hint-sort-handle',
                        items: '.oppia-sortable-hint',
                        revert: 100,
                        tolerance: 'pointer',
                        start: function (e, ui) {
                            $rootScope.$broadcast('externalSave');
                            $scope.activeHintIndex = null;
                            ui.placeholder.height(ui.item.height());
                        },
                        stop: function () {
                            StateHintsService.saveDisplayedValue();
                            $scope.onSaveHints(StateHintsService.displayed);
                        }
                    };
                    var openDeleteLastHintModal = function () {
                        AlertsService.clearWarnings();
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                                'exploration-editor-tab-templates/' +
                                'delete-last-hint-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.deleteBothSolutionAndHint = function () {
                                        $uibModalInstance.close();
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                        AlertsService.clearWarnings();
                                    };
                                }
                            ]
                        }).result.then(function () {
                            var solutionContentId = StateSolutionService.displayed
                                .explanation.getContentId();
                            StateSolutionService.displayed = null;
                            StateSolutionService.saveDisplayedValue();
                            $scope.onSaveSolution(StateSolutionService.displayed);
                            var hintContentId = StateHintsService.displayed[0]
                                .hintContent.getContentId();
                            StateHintsService.displayed = [];
                            StateHintsService.saveDisplayedValue();
                            $scope.onSaveHints(StateHintsService.displayed);
                        });
                    };
                    $scope.deleteHint = function (index, evt) {
                        // Prevent clicking on the delete button from also toggling the
                        // display state of the hint.
                        evt.stopPropagation();
                        AlertsService.clearWarnings();
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                                'exploration-editor-tab-templates/' +
                                'delete-hint-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
                                    $scope.reallyDelete = function () {
                                        $uibModalInstance.close();
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                        AlertsService.clearWarnings();
                                    };
                                }
                            ]
                        }).result.then(function () {
                            if (StateSolutionService.savedMemento &&
                                StateHintsService.savedMemento.length === 1) {
                                openDeleteLastHintModal();
                            }
                            else {
                                var hintContentId = StateHintsService.displayed[index]
                                    .hintContent.getContentId();
                                StateHintsService.displayed.splice(index, 1);
                                StateHintsService.saveDisplayedValue();
                                $scope.onSaveHints(StateHintsService.displayed);
                            }
                            if (index === $scope.activeHintIndex) {
                                $scope.activeHintIndex = null;
                            }
                        });
                    };
                    $scope.onSaveInlineHint = function () {
                        StateHintsService.saveDisplayedValue();
                        $scope.onSaveHints(StateHintsService.displayed);
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-interaction-editor/state-interaction-editor.directive.ts":
/*!*******************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-interaction-editor/state-interaction-editor.directive.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the interaction editor section in the state
 * editor.
 */
__webpack_require__(/*! directives/AngularHtmlBindDirective.ts */ "./core/templates/dev/head/directives/AngularHtmlBindDirective.ts");
__webpack_require__(/*! domain/exploration/SubtitledHtmlObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/editor-first-time-events.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/editor-first-time-events.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/interaction-details-cache/interaction-details-cache.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/interaction-details-cache/interaction-details-cache.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-content.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-content.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-customization-args.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-customization-args.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-hints.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-hints.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-interaction-id.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-interaction-id.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-solution.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-solution.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/EditabilityService.ts */ "./core/templates/dev/head/services/EditabilityService.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('stateInteractionEditorModule').directive('stateInteractionEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            link: function (scope, element) {
                // This allows the scope to be retrievable during Karma unit testing.
                // See http://stackoverflow.com/a/29833832 for more details.
                element[0].getControllerScope = function () {
                    return scope;
                };
            },
            scope: {
                onSaveInteractionCustomizationArgs: '=',
                onSaveInteractionId: '=',
                onSaveSolution: '=',
                onSaveStateContent: '=',
                recomputeGraph: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/state-editor/state-interaction-editor/' +
                'state-interaction-editor.directive.html'),
            controller: [
                '$scope', '$http', '$rootScope', '$uibModal', '$injector', '$filter',
                'AlertsService', 'HtmlEscaperService', 'StateEditorService',
                'INTERACTION_SPECS', 'StateInteractionIdService',
                'StateCustomizationArgsService', 'EditabilityService',
                'InteractionDetailsCacheService', 'UrlInterpolationService',
                'ExplorationHtmlFormatterService', 'SubtitledHtmlObjectFactory',
                'StateSolutionService', 'StateHintsService',
                'StateContentService', function ($scope, $http, $rootScope, $uibModal, $injector, $filter, AlertsService, HtmlEscaperService, StateEditorService, INTERACTION_SPECS, StateInteractionIdService, StateCustomizationArgsService, EditabilityService, InteractionDetailsCacheService, UrlInterpolationService, ExplorationHtmlFormatterService, SubtitledHtmlObjectFactory, StateSolutionService, StateHintsService, StateContentService) {
                    var DEFAULT_TERMINAL_STATE_CONTENT = 'Congratulations, you have finished!';
                    // Declare dummy submitAnswer() and adjustPageHeight() methods for
                    // the interaction preview.
                    $scope.submitAnswer = function () { };
                    $scope.adjustPageHeight = function () { };
                    $scope.EditabilityService = EditabilityService;
                    $scope.StateInteractionIdService = StateInteractionIdService;
                    $scope.hasLoaded = false;
                    $scope.customizationModalReopened = false;
                    $scope.userBlueImgUrl = UrlInterpolationService.getStaticImageUrl('/avatar/user_blue_72px.png');
                    $scope.userBlackImgUrl = UrlInterpolationService.getStaticImageUrl('/avatar/user_black_72px.png');
                    $scope.getCurrentInteractionName = function () {
                        return (StateInteractionIdService.savedMemento ?
                            INTERACTION_SPECS[StateInteractionIdService.savedMemento].name : '');
                    };
                    $scope.doesCurrentInteractionHaveCustomizations = function () {
                        var interactionSpec = INTERACTION_SPECS[StateInteractionIdService.savedMemento];
                        return (interactionSpec &&
                            interactionSpec.customization_arg_specs.length > 0);
                    };
                    var _getInteractionPreviewTag = function (interactionCustomizationArgs) {
                        if (!StateInteractionIdService.savedMemento) {
                            return '';
                        }
                        return ExplorationHtmlFormatterService.getInteractionHtml(StateInteractionIdService.savedMemento, interactionCustomizationArgs, false);
                    };
                    var _updateInteractionPreviewAndAnswerChoices = function () {
                        $scope.interactionId = StateInteractionIdService.savedMemento;
                        var currentCustomizationArgs = StateCustomizationArgsService.savedMemento;
                        $scope.interactionPreviewHtml = _getInteractionPreviewTag(currentCustomizationArgs);
                        $rootScope.$broadcast('updateAnswerChoices', StateEditorService.getAnswerChoices($scope.interactionId, currentCustomizationArgs));
                    };
                    $scope.$on('stateEditorInitialized', function (evt, stateData) {
                        $scope.hasLoaded = false;
                        InteractionDetailsCacheService.reset();
                        $rootScope.$broadcast('initializeAnswerGroups', {
                            interactionId: stateData.interaction.id,
                            answerGroups: stateData.interaction.answerGroups,
                            defaultOutcome: stateData.interaction.defaultOutcome,
                            confirmedUnclassifiedAnswers: (stateData.interaction.confirmedUnclassifiedAnswers)
                        });
                        _updateInteractionPreviewAndAnswerChoices();
                        $scope.hasLoaded = true;
                    });
                    $rootScope.$broadcast('interactionEditorInitialized');
                    // If a terminal interaction is selected for a state with no
                    // content, this function sets the content to
                    // DEFAULT_TERMINAL_STATE_CONTENT. NOTE TO DEVELOPERS: Callers of
                    // this function must ensure that the current active state is a
                    // terminal one.
                    var updateDefaultTerminalStateContentIfEmpty = function () {
                        // Check if the content is currently empty, as expected.
                        var previousContent = StateContentService.savedMemento;
                        if (!previousContent.isEmpty()) {
                            return;
                        }
                        // Update the state's content.
                        StateContentService.displayed.setHtml(DEFAULT_TERMINAL_STATE_CONTENT);
                        StateContentService.saveDisplayedValue();
                        $scope.onSaveStateContent(StateContentService.displayed);
                    };
                    $scope.onCustomizationModalSavePostHook = function () {
                        var hasInteractionIdChanged = (StateInteractionIdService.displayed !==
                            StateInteractionIdService.savedMemento);
                        if (hasInteractionIdChanged) {
                            if (INTERACTION_SPECS[StateInteractionIdService.displayed]
                                .is_terminal) {
                                updateDefaultTerminalStateContentIfEmpty();
                            }
                            StateInteractionIdService.saveDisplayedValue();
                            $scope.onSaveInteractionId(StateInteractionIdService.displayed);
                        }
                        StateCustomizationArgsService.saveDisplayedValue();
                        $scope.onSaveInteractionCustomizationArgs(StateCustomizationArgsService.displayed);
                        InteractionDetailsCacheService.set(StateInteractionIdService.savedMemento, StateCustomizationArgsService.savedMemento);
                        // This must be called here so that the rules are updated before
                        // the state graph is recomputed.
                        if (hasInteractionIdChanged) {
                            $rootScope.$broadcast('onInteractionIdChanged', StateInteractionIdService.savedMemento);
                        }
                        $scope.recomputeGraph();
                        _updateInteractionPreviewAndAnswerChoices();
                    };
                    $scope.openInteractionCustomizerModal = function () {
                        if (EditabilityService.isEditable()) {
                            AlertsService.clearWarnings();
                            $uibModal.open({
                                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                                    'exploration-editor-tab-templates/' +
                                    'customize-interaction-modal.template.html'),
                                backdrop: true,
                                resolve: {},
                                controller: [
                                    '$injector', '$scope', '$uibModalInstance',
                                    'EditorFirstTimeEventsService',
                                    'InteractionDetailsCacheService',
                                    'StateCustomizationArgsService', 'StateEditorService',
                                    'StateInteractionIdService', 'StateSolutionService',
                                    'UrlInterpolationService', 'ALLOWED_INTERACTION_CATEGORIES',
                                    'ALLOWED_QUESTION_INTERACTION_CATEGORIES',
                                    'INTERACTION_SPECS',
                                    function ($injector, $scope, $uibModalInstance, EditorFirstTimeEventsService, InteractionDetailsCacheService, StateCustomizationArgsService, StateEditorService, StateInteractionIdService, StateSolutionService, UrlInterpolationService, ALLOWED_INTERACTION_CATEGORIES, ALLOWED_QUESTION_INTERACTION_CATEGORIES, INTERACTION_SPECS) {
                                        EditorFirstTimeEventsService
                                            .registerFirstClickAddInteractionEvent();
                                        // This binds the services to the HTML template, so that
                                        // their displayed values can be used in the HTML.
                                        $scope.StateInteractionIdService =
                                            StateInteractionIdService;
                                        $scope.StateCustomizationArgsService = (StateCustomizationArgsService);
                                        $scope.getInteractionThumbnailImageUrl = (UrlInterpolationService
                                            .getInteractionThumbnailImageUrl);
                                        $scope.INTERACTION_SPECS = INTERACTION_SPECS;
                                        if (StateEditorService.isInQuestionMode()) {
                                            $scope.ALLOWED_INTERACTION_CATEGORIES = (ALLOWED_QUESTION_INTERACTION_CATEGORIES);
                                        }
                                        else {
                                            $scope.ALLOWED_INTERACTION_CATEGORIES = (ALLOWED_INTERACTION_CATEGORIES);
                                        }
                                        if (StateInteractionIdService.savedMemento) {
                                            $scope.customizationModalReopened = true;
                                            var interactionSpec = INTERACTION_SPECS[StateInteractionIdService.savedMemento];
                                            $scope.customizationArgSpecs = (interactionSpec.customization_arg_specs);
                                            StateInteractionIdService.displayed = angular.copy(StateInteractionIdService.savedMemento);
                                            StateCustomizationArgsService.displayed = {};
                                            // Ensure that StateCustomizationArgsService.displayed
                                            // is fully populated.
                                            for (var i = 0; i < $scope.customizationArgSpecs.length; i++) {
                                                var argName = $scope.customizationArgSpecs[i].name;
                                                StateCustomizationArgsService.displayed[argName] = {
                                                    value: (StateCustomizationArgsService.savedMemento
                                                        .hasOwnProperty(argName) ?
                                                        angular.copy(StateCustomizationArgsService.savedMemento[argName].value) :
                                                        angular.copy($scope.customizationArgSpecs[i].default_value))
                                                };
                                            }
                                            $scope.$broadcast('schemaBasedFormsShown');
                                            $scope.form = {};
                                            $scope.hasCustomizationArgs = (Object.keys(StateCustomizationArgsService.displayed).length > 0);
                                        }
                                        $scope.getCustomizationArgsWarningsList = function () {
                                            var validationServiceName = INTERACTION_SPECS[$scope.StateInteractionIdService.displayed].id +
                                                'ValidationService';
                                            var validationService = $injector.get(validationServiceName);
                                            var warningsList = validationService.getCustomizationArgsWarnings(StateCustomizationArgsService.displayed);
                                            return warningsList;
                                        };
                                        $scope.onChangeInteractionId = function (newInteractionId) {
                                            EditorFirstTimeEventsService
                                                .registerFirstSelectInteractionTypeEvent();
                                            var interactionSpec = INTERACTION_SPECS[newInteractionId];
                                            $scope.customizationArgSpecs = (interactionSpec.customization_arg_specs);
                                            StateInteractionIdService
                                                .displayed = newInteractionId;
                                            StateCustomizationArgsService.displayed = {};
                                            if (InteractionDetailsCacheService.contains(newInteractionId)) {
                                                StateCustomizationArgsService.displayed = (InteractionDetailsCacheService.get(newInteractionId).customization);
                                            }
                                            else {
                                                $scope.customizationArgSpecs.forEach(function (caSpec) {
                                                    StateCustomizationArgsService.displayed[caSpec.name] =
                                                        {
                                                            value: angular.copy(caSpec.default_value)
                                                        };
                                                });
                                            }
                                            if (Object.keys(StateCustomizationArgsService.displayed)
                                                .length === 0) {
                                                $scope.save();
                                                $scope.hasCustomizationArgs = false;
                                            }
                                            else {
                                                $scope.hasCustomizationArgs = true;
                                            }
                                            $scope.$broadcast('schemaBasedFormsShown');
                                            $scope.form = {};
                                        };
                                        $scope.returnToInteractionSelector = function () {
                                            InteractionDetailsCacheService.set(StateInteractionIdService.displayed, StateCustomizationArgsService.displayed);
                                            StateInteractionIdService.displayed = null;
                                            StateCustomizationArgsService.displayed = {};
                                        };
                                        $scope.isSaveInteractionButtonEnabled = function () {
                                            return $scope.hasCustomizationArgs &&
                                                $scope.StateInteractionIdService.displayed &&
                                                $scope.form.schemaForm.$valid &&
                                                $scope.getCustomizationArgsWarningsList()
                                                    .length === 0;
                                        };
                                        $scope.getSaveInteractionButtonTooltip = function () {
                                            if (!$scope.hasCustomizationArgs) {
                                                return 'No customization arguments';
                                            }
                                            if (!$scope.StateInteractionIdService.displayed) {
                                                return 'No interaction being displayed';
                                            }
                                            var warningsList = $scope.getCustomizationArgsWarningsList();
                                            var warningMessages = warningsList.map(function (warning) {
                                                return warning.message;
                                            });
                                            if (warningMessages.length === 0) {
                                                if ($scope.form.schemaForm.$invalid) {
                                                    return 'Some of the form entries are invalid.';
                                                }
                                                else {
                                                    return '';
                                                }
                                            }
                                            else {
                                                return warningMessages.join(' ');
                                            }
                                        };
                                        $scope.save = function () {
                                            EditorFirstTimeEventsService
                                                .registerFirstSaveInteractionEvent();
                                            $uibModalInstance.close();
                                        };
                                        $scope.okay = function () {
                                            $uibModalInstance.close('okay');
                                        };
                                        $scope.cancel = function () {
                                            $uibModalInstance.dismiss('cancel');
                                        };
                                    }
                                ]
                            }).result.then($scope.onCustomizationModalSavePostHook, function () {
                                StateInteractionIdService.restoreFromMemento();
                                StateCustomizationArgsService.restoreFromMemento();
                            });
                        }
                    };
                    $scope.deleteInteraction = function () {
                        AlertsService.clearWarnings();
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                                'exploration-editor-tab-templates/' +
                                'delete-interaction-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
                                    $scope.reallyDelete = function () {
                                        $uibModalInstance.close();
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                        AlertsService.clearWarnings();
                                    };
                                }
                            ]
                        }).result.then(function () {
                            StateInteractionIdService.displayed = null;
                            StateCustomizationArgsService.displayed = {};
                            StateSolutionService.displayed = null;
                            InteractionDetailsCacheService.removeDetails(StateInteractionIdService.savedMemento);
                            StateInteractionIdService.saveDisplayedValue();
                            $scope.onSaveInteractionId(StateInteractionIdService.displayed);
                            StateCustomizationArgsService.saveDisplayedValue();
                            $scope.onSaveInteractionCustomizationArgs(StateCustomizationArgsService.displayed);
                            StateSolutionService.saveDisplayedValue();
                            $scope.onSaveSolution(StateSolutionService.displayed);
                            $rootScope.$broadcast('onInteractionIdChanged', StateInteractionIdService.savedMemento);
                            $scope.recomputeGraph();
                            _updateInteractionPreviewAndAnswerChoices();
                        });
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-responses/state-responses.directive.ts":
/*!*************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-responses/state-responses.directive.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for managing the state responses in the state editor.
 */
__webpack_require__(/*! components/state/answer-group-editor/answer-group-editor.directive.ts */ "./core/templates/dev/head/components/state/answer-group-editor/answer-group-editor.directive.ts");
__webpack_require__(/*! components/state/response-header/response-header.directive.ts */ "./core/templates/dev/head/components/state/response-header/response-header.directive.ts");
__webpack_require__(/*! domain/exploration/AnswerGroupObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/AnswerGroupObjectFactory.ts");
__webpack_require__(/*! domain/exploration/HintObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/HintObjectFactory.ts");
__webpack_require__(/*! domain/exploration/OutcomeObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/OutcomeObjectFactory.ts");
__webpack_require__(/*! domain/exploration/RuleObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/RuleObjectFactory.ts");
__webpack_require__(/*! domain/exploration/SubtitledHtmlObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! filters/string-utility-filters/camel-case-to-hyphens.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/camel-case-to-hyphens.filter.ts");
__webpack_require__(/*! filters/string-utility-filters/convert-to-plain-text.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/convert-to-plain-text.filter.ts");
__webpack_require__(/*! filters/parameterize-rule-description.filter.ts */ "./core/templates/dev/head/filters/parameterize-rule-description.filter.ts");
__webpack_require__(/*! filters/string-utility-filters/truncate.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate.filter.ts");
__webpack_require__(/*! filters/string-utility-filters/wrap-text-with-ellipsis.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/wrap-text-with-ellipsis.filter.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/editor-first-time-events.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/editor-first-time-events.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/interaction-details-cache/interaction-details-cache.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/interaction-details-cache/interaction-details-cache.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-content.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-content.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-customization-args.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-customization-args.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-hints.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-hints.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-interaction-id.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-interaction-id.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-solution.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-solution.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/EditabilityService.ts */ "./core/templates/dev/head/services/EditabilityService.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
__webpack_require__(/*! services/GenerateContentIdService.ts */ "./core/templates/dev/head/services/GenerateContentIdService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('stateResponsesModule').directive('stateResponses', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                addState: '=',
                onResponsesInitialized: '=',
                onSaveInteractionAnswerGroups: '=',
                onSaveInteractionDefaultOutcome: '=',
                navigateToState: '=',
                refreshWarnings: '&',
                showMarkAllAudioAsNeedingUpdateModalIfRequired: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/state-editor/state-responses/' +
                'state-responses.directive.html'),
            controller: [
                '$filter', '$scope', '$rootScope', '$uibModal', 'AlertsService',
                'AnswerGroupObjectFactory', 'ContextService', 'EditabilityService',
                'ResponsesService', 'StateCustomizationArgsService',
                'StateEditorService', 'StateInteractionIdService',
                'UrlInterpolationService', 'INTERACTION_SPECS',
                'PLACEHOLDER_OUTCOME_DEST', 'RULE_SUMMARY_WRAP_CHARACTER_COUNT',
                function ($filter, $scope, $rootScope, $uibModal, AlertsService, AnswerGroupObjectFactory, ContextService, EditabilityService, ResponsesService, StateCustomizationArgsService, StateEditorService, StateInteractionIdService, UrlInterpolationService, INTERACTION_SPECS, PLACEHOLDER_OUTCOME_DEST, RULE_SUMMARY_WRAP_CHARACTER_COUNT) {
                    $scope.SHOW_TRAINABLE_UNRESOLVED_ANSWERS = (GLOBALS.SHOW_TRAINABLE_UNRESOLVED_ANSWERS);
                    $scope.EditabilityService = EditabilityService;
                    $scope.stateName = StateEditorService.getActiveStateName();
                    $scope.dragDotsImgUrl = UrlInterpolationService.getStaticImageUrl('/general/drag_dots.png');
                    var _initializeTrainingData = function () {
                        if (StateEditorService.isInQuestionMode()) {
                            return;
                        }
                        var explorationId = ContextService.getExplorationId();
                        var currentStateName = $scope.stateName;
                    };
                    var _getExistingFeedbackContentIds = function () {
                        var existingContentIds = [];
                        $scope.answerGroups.forEach(function (answerGroup) {
                            var contentId = answerGroup.outcome.feedback.getContentId();
                            existingContentIds.push(contentId);
                        });
                        return existingContentIds;
                    };
                    $scope.suppressDefaultAnswerGroupWarnings = function () {
                        var interactionId = $scope.getCurrentInteractionId();
                        var answerGroups = ResponsesService.getAnswerGroups();
                        // This array contains the text of each of the possible answers
                        // for the interaction.
                        var answerChoices = [];
                        var customizationArgs = StateCustomizationArgsService.savedMemento;
                        var handledAnswersArray = [];
                        if (interactionId === 'MultipleChoiceInput') {
                            var numChoices = $scope.getAnswerChoices().length;
                            var choiceIndices = [];
                            // Collect all answers which have been handled by at least one
                            // answer group.
                            for (var i = 0; i < answerGroups.length; i++) {
                                for (var j = 0; j < answerGroups[i].rules.length; j++) {
                                    handledAnswersArray.push(answerGroups[i].rules[j].inputs.x);
                                }
                            }
                            for (var i = 0; i < numChoices; i++) {
                                choiceIndices.push(i);
                            }
                            // We only suppress the default warning if each choice index has
                            // been handled by at least one answer group.
                            return choiceIndices.every(function (choiceIndex) {
                                return handledAnswersArray.indexOf(choiceIndex) !== -1;
                            });
                        }
                        else if (interactionId === 'ItemSelectionInput') {
                            var maxSelectionCount = (customizationArgs.maxAllowableSelectionCount.value);
                            if (maxSelectionCount === 1) {
                                var numChoices = $scope.getAnswerChoices().length;
                                // This array contains a list of booleans, one for each answer
                                // choice. Each boolean is true if the corresponding answer has
                                // been covered by at least one rule, and false otherwise.
                                handledAnswersArray = [];
                                for (var i = 0; i < numChoices; i++) {
                                    handledAnswersArray.push(false);
                                    answerChoices.push($scope.getAnswerChoices()[i].val);
                                }
                                var answerChoiceToIndex = {};
                                answerChoices.forEach(function (answerChoice, choiceIndex) {
                                    answerChoiceToIndex[answerChoice] = choiceIndex;
                                });
                                answerGroups.forEach(function (answerGroup) {
                                    var rules = answerGroup.rules;
                                    rules.forEach(function (rule) {
                                        var ruleInputs = rule.inputs.x;
                                        ruleInputs.forEach(function (ruleInput) {
                                            var choiceIndex = answerChoiceToIndex[ruleInput];
                                            if (rule.type === 'Equals' ||
                                                rule.type === 'ContainsAtLeastOneOf') {
                                                handledAnswersArray[choiceIndex] = true;
                                            }
                                            else if (rule.type ===
                                                'DoesNotContainAtLeastOneOf') {
                                                for (var i = 0; i < handledAnswersArray.length; i++) {
                                                    if (i !== choiceIndex) {
                                                        handledAnswersArray[i] = true;
                                                    }
                                                }
                                            }
                                        });
                                    });
                                });
                                var areAllChoicesCovered = handledAnswersArray.every(function (handledAnswer) {
                                    return handledAnswer;
                                });
                                // We only suppress the default warning if each choice text has
                                // been handled by at least one answer group, based on rule
                                // type.
                                return areAllChoicesCovered;
                            }
                        }
                    };
                    $scope.isSelfLoopWithNoFeedback = function (outcome) {
                        if (!outcome) {
                            return false;
                        }
                        return outcome.isConfusing($scope.stateName);
                    };
                    $scope.isSelfLoopThatIsMarkedCorrect = function (outcome) {
                        if (!outcome ||
                            !StateEditorService.getCorrectnessFeedbackEnabled()) {
                            return false;
                        }
                        var currentStateName = $scope.stateName;
                        return ((outcome.dest === currentStateName) &&
                            outcome.labelledAsCorrect);
                    };
                    $scope.changeActiveAnswerGroupIndex = function (newIndex) {
                        $rootScope.$broadcast('externalSave');
                        ResponsesService.changeActiveAnswerGroupIndex(newIndex);
                        $scope.activeAnswerGroupIndex = (ResponsesService.getActiveAnswerGroupIndex());
                    };
                    $scope.getCurrentInteractionId = function () {
                        return StateInteractionIdService.savedMemento;
                    };
                    $scope.isCreatingNewState = function (outcome) {
                        return outcome && outcome.dest === PLACEHOLDER_OUTCOME_DEST;
                    };
                    // This returns false if the current interaction ID is null.
                    $scope.isCurrentInteractionLinear = function () {
                        var interactionId = $scope.getCurrentInteractionId();
                        return interactionId && INTERACTION_SPECS[interactionId].is_linear;
                    };
                    $scope.isLinearWithNoFeedback = function (outcome) {
                        // Returns false if current interaction is linear and has no
                        // feedback
                        if (!outcome) {
                            return false;
                        }
                        return $scope.isCurrentInteractionLinear() &&
                            !outcome.hasNonemptyFeedback();
                    };
                    $scope.getOutcomeTooltip = function (outcome) {
                        if ($scope.isSelfLoopThatIsMarkedCorrect(outcome)) {
                            return 'Self-loops should not be labelled as correct.';
                        }
                        // Outcome tooltip depends on whether feedback is displayed
                        if ($scope.isLinearWithNoFeedback(outcome)) {
                            return 'Please direct the learner to a different card.';
                        }
                        else {
                            return 'Please give Oppia something useful to say,' +
                                ' or direct the learner to a different card.';
                        }
                    };
                    $scope.$on('initializeAnswerGroups', function (evt, data) {
                        ResponsesService.init(data);
                        $scope.answerGroups = ResponsesService.getAnswerGroups();
                        $scope.defaultOutcome = ResponsesService.getDefaultOutcome();
                        // If the creator selects an interaction which has only one possible
                        // answer, automatically expand the default response. Otherwise,
                        // default to having no responses initially selected.
                        if ($scope.isCurrentInteractionLinear()) {
                            ResponsesService.changeActiveAnswerGroupIndex(0);
                        }
                        // Initialize training data for these answer groups.
                        _initializeTrainingData();
                        $scope.activeAnswerGroupIndex = (ResponsesService.getActiveAnswerGroupIndex());
                        $rootScope.$broadcast('externalSave');
                    });
                    $scope.$on('onInteractionIdChanged', function (evt, newInteractionId) {
                        $rootScope.$broadcast('externalSave');
                        ResponsesService.onInteractionIdChanged(newInteractionId, function (newAnswerGroups, newDefaultOutcome) {
                            $scope.onSaveInteractionDefaultOutcome(newDefaultOutcome);
                            $scope.onSaveInteractionAnswerGroups(newAnswerGroups);
                            $scope.refreshWarnings()();
                            $scope.answerGroups = ResponsesService.getAnswerGroups();
                            $scope.defaultOutcome = ResponsesService.getDefaultOutcome();
                            // Reinitialize training data if the interaction ID is changed.
                            _initializeTrainingData();
                            $scope.activeAnswerGroupIndex = (ResponsesService.getActiveAnswerGroupIndex());
                        });
                        // Prompt the user to create a new response if it is not a linear or
                        // non-terminal interaction and if an actual interaction is
                        // specified (versus one being deleted).
                        if (newInteractionId &&
                            !INTERACTION_SPECS[newInteractionId].is_linear &&
                            !INTERACTION_SPECS[newInteractionId].is_terminal) {
                            $scope.openAddAnswerGroupModal();
                        }
                    });
                    $scope.$on('answerGroupChanged', function () {
                        $scope.answerGroups = ResponsesService.getAnswerGroups();
                        $scope.defaultOutcome = ResponsesService.getDefaultOutcome();
                        $scope.activeAnswerGroupIndex = (ResponsesService.getActiveAnswerGroupIndex());
                    });
                    $scope.$on('updateAnswerChoices', function (evt, newAnswerChoices) {
                        ResponsesService.updateAnswerChoices(newAnswerChoices, function (newAnswerGroups) {
                            $scope.onSaveInteractionAnswerGroups(newAnswerGroups);
                            $scope.refreshWarnings()();
                        });
                    });
                    $scope.openAddAnswerGroupModal = function () {
                        AlertsService.clearWarnings();
                        $rootScope.$broadcast('externalSave');
                        var stateName = StateEditorService.getActiveStateName();
                        var addState = $scope.addState;
                        var existingContentIds = _getExistingFeedbackContentIds();
                        var currentInteractionId = $scope.getCurrentInteractionId();
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                                'exploration-editor-tab-templates/' +
                                'add-answer-group-modal.template.html'),
                            // Clicking outside this modal should not dismiss it.
                            backdrop: 'static',
                            controller: [
                                '$scope', '$uibModalInstance', 'EditorFirstTimeEventsService',
                                'GenerateContentIdService', 'OutcomeObjectFactory',
                                'ResponsesService', 'RuleObjectFactory', 'StateEditorService',
                                'COMPONENT_NAME_FEEDBACK', 'INTERACTION_SPECS',
                                function ($scope, $uibModalInstance, EditorFirstTimeEventsService, GenerateContentIdService, OutcomeObjectFactory, ResponsesService, RuleObjectFactory, StateEditorService, COMPONENT_NAME_FEEDBACK, INTERACTION_SPECS) {
                                    $scope.feedbackEditorIsOpen = false;
                                    $scope.addState = addState;
                                    $scope.questionModeEnabled =
                                        StateEditorService.isInQuestionMode();
                                    $scope.openFeedbackEditor = function () {
                                        $scope.feedbackEditorIsOpen = true;
                                    };
                                    $scope.isCorrectnessFeedbackEnabled = function () {
                                        return StateEditorService.getCorrectnessFeedbackEnabled();
                                    };
                                    // This returns false if the current interaction ID is null.
                                    $scope.isCurrentInteractionLinear = function () {
                                        return (currentInteractionId &&
                                            INTERACTION_SPECS[currentInteractionId].is_linear);
                                    };
                                    $scope.tmpRule = RuleObjectFactory.createNew(null, {});
                                    var feedbackContentId = GenerateContentIdService.getNextId(existingContentIds, COMPONENT_NAME_FEEDBACK);
                                    $scope.tmpOutcome = OutcomeObjectFactory.createNew($scope.questionModeEnabled ? null : stateName, feedbackContentId, '', []);
                                    $scope.isSelfLoopWithNoFeedback = function (tmpOutcome) {
                                        return (tmpOutcome.dest ===
                                            stateName && !tmpOutcome.hasNonemptyFeedback());
                                    };
                                    $scope.addAnswerGroupForm = {};
                                    $scope.saveResponse = function (reopen) {
                                        $scope.$broadcast('saveOutcomeFeedbackDetails');
                                        $scope.$broadcast('saveOutcomeDestDetails');
                                        EditorFirstTimeEventsService.registerFirstSaveRuleEvent();
                                        // Close the modal and save it afterwards.
                                        $uibModalInstance.close({
                                            tmpRule: angular.copy($scope.tmpRule),
                                            tmpOutcome: angular.copy($scope.tmpOutcome),
                                            reopen: reopen
                                        });
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                        AlertsService.clearWarnings();
                                    };
                                }
                            ]
                        }).result.then(function (result) {
                            // Create a new answer group.
                            $scope.answerGroups.push(AnswerGroupObjectFactory.createNew([result.tmpRule], result.tmpOutcome, [], null));
                            ResponsesService.save($scope.answerGroups, $scope.defaultOutcome, function (newAnswerGroups, newDefaultOutcome) {
                                $scope.onSaveInteractionAnswerGroups(newAnswerGroups);
                                $scope.onSaveInteractionDefaultOutcome(newDefaultOutcome);
                                $scope.refreshWarnings()();
                            });
                            $scope.changeActiveAnswerGroupIndex($scope.answerGroups.length - 1);
                            // After saving it, check if the modal should be reopened right
                            // away.
                            if (result.reopen) {
                                $scope.openAddAnswerGroupModal();
                            }
                        });
                    };
                    // When the page is scrolled so that the top of the page is above the
                    // browser viewport, there are some bugs in the positioning of the
                    // helper. This is a bug in jQueryUI that has not been fixed yet. For
                    // more details, see http://stackoverflow.com/q/5791886
                    $scope.ANSWER_GROUP_LIST_SORTABLE_OPTIONS = {
                        axis: 'y',
                        cursor: 'move',
                        handle: '.oppia-rule-sort-handle',
                        items: '.oppia-sortable-rule-block',
                        revert: 100,
                        tolerance: 'pointer',
                        start: function (e, ui) {
                            $rootScope.$broadcast('externalSave');
                            $scope.changeActiveAnswerGroupIndex(-1);
                            ui.placeholder.height(ui.item.height());
                        },
                        stop: function () {
                            ResponsesService.save($scope.answerGroups, $scope.defaultOutcome, function (newAnswerGroups, newDefaultOutcome) {
                                $scope.onSaveInteractionAnswerGroups(newAnswerGroups);
                                $scope.onSaveInteractionDefaultOutcome(newDefaultOutcome);
                                $scope.refreshWarnings()();
                            });
                        }
                    };
                    $scope.deleteAnswerGroup = function (index, evt) {
                        // Prevent clicking on the delete button from also toggling the
                        // display state of the answer group.
                        evt.stopPropagation();
                        AlertsService.clearWarnings();
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                                'exploration-editor-tab-templates/' +
                                'delete-answer-group-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
                                    $scope.reallyDelete = function () {
                                        $uibModalInstance.close();
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                        AlertsService.clearWarnings();
                                    };
                                }
                            ]
                        }).result.then(function () {
                            ResponsesService.deleteAnswerGroup(index, function (newAnswerGroups) {
                                $scope.onSaveInteractionAnswerGroups(newAnswerGroups);
                                $scope.refreshWarnings()();
                            });
                        });
                    };
                    $scope.saveTaggedMisconception = function (misconceptionId) {
                        ResponsesService.updateActiveAnswerGroup({
                            taggedMisconceptionId: misconceptionId
                        }, function (newAnswerGroups) {
                            $scope.onSaveInteractionAnswerGroups(newAnswerGroups);
                            $scope.refreshWarnings()();
                        });
                    };
                    $scope.saveActiveAnswerGroupFeedback = function (updatedOutcome) {
                        ResponsesService.updateActiveAnswerGroup({
                            feedback: updatedOutcome.feedback
                        }, function (newAnswerGroups) {
                            $scope.onSaveInteractionAnswerGroups(newAnswerGroups);
                            $scope.refreshWarnings()();
                        });
                    };
                    $scope.saveActiveAnswerGroupDest = function (updatedOutcome) {
                        ResponsesService.updateActiveAnswerGroup({
                            dest: updatedOutcome.dest,
                            refresherExplorationId: updatedOutcome.refresherExplorationId,
                            missingPrerequisiteSkillId: updatedOutcome.missingPrerequisiteSkillId
                        }, function (newAnswerGroups) {
                            $scope.onSaveInteractionAnswerGroups(newAnswerGroups);
                            $scope.refreshWarnings()();
                        });
                    };
                    $scope.saveActiveAnswerGroupCorrectnessLabel = function (updatedOutcome) {
                        ResponsesService.updateActiveAnswerGroup({
                            labelledAsCorrect: updatedOutcome.labelledAsCorrect
                        }, function (newAnswerGroups) {
                            $scope.onSaveInteractionAnswerGroups(newAnswerGroups);
                            $scope.refreshWarnings()();
                        });
                    };
                    $scope.saveActiveAnswerGroupRules = function (updatedRules) {
                        ResponsesService.updateActiveAnswerGroup({
                            rules: updatedRules
                        }, function (newAnswerGroups) {
                            $scope.onSaveInteractionAnswerGroups(newAnswerGroups);
                            $scope.refreshWarnings()();
                        });
                    };
                    $scope.saveDefaultOutcomeFeedback = function (updatedOutcome) {
                        ResponsesService.updateDefaultOutcome({
                            feedback: updatedOutcome.feedback
                        }, function (newDefaultOutcome) {
                            $scope.onSaveInteractionDefaultOutcome(newDefaultOutcome);
                        });
                    };
                    $scope.saveDefaultOutcomeDest = function (updatedOutcome) {
                        ResponsesService.updateDefaultOutcome({
                            dest: updatedOutcome.dest,
                            refresherExplorationId: updatedOutcome.refresherExplorationId,
                            missingPrerequisiteSkillId: updatedOutcome.missingPrerequisiteSkillId
                        }, function (newDefaultOutcome) {
                            $scope.onSaveInteractionDefaultOutcome(newDefaultOutcome);
                        });
                    };
                    $scope.saveDefaultOutcomeCorrectnessLabel = function (updatedOutcome) {
                        ResponsesService.updateDefaultOutcome({
                            labelledAsCorrect: updatedOutcome.labelledAsCorrect
                        }, function (newDefaultOutcome) {
                            $scope.onSaveInteractionDefaultOutcome(newDefaultOutcome);
                        });
                    };
                    $scope.getAnswerChoices = function () {
                        return ResponsesService.getAnswerChoices();
                    };
                    $scope.summarizeAnswerGroup = function (answerGroup, interactionId, answerChoices, shortenRule) {
                        var summary = '';
                        var outcome = answerGroup.outcome;
                        var hasFeedback = outcome.hasNonemptyFeedback();
                        if (answerGroup.rules) {
                            var firstRule = $filter('convertToPlainText')($filter('parameterizeRuleDescription')(answerGroup.rules[0], interactionId, answerChoices));
                            summary = 'Answer ' + firstRule;
                            if (hasFeedback && shortenRule) {
                                summary = $filter('wrapTextWithEllipsis')(summary, RULE_SUMMARY_WRAP_CHARACTER_COUNT);
                            }
                            summary = '[' + summary + '] ';
                        }
                        if (hasFeedback) {
                            summary += (shortenRule ?
                                $filter('truncate')(outcome.feedback.getHtml(), 30) :
                                $filter('convertToPlainText')(outcome.feedback.getHtml()));
                        }
                        return summary;
                    };
                    $scope.summarizeDefaultOutcome = function (defaultOutcome, interactionId, answerGroupCount, shortenRule) {
                        if (!defaultOutcome) {
                            return '';
                        }
                        var summary = '';
                        var hasFeedback = defaultOutcome.hasNonemptyFeedback();
                        if (interactionId && INTERACTION_SPECS[interactionId].is_linear) {
                            summary =
                                INTERACTION_SPECS[interactionId].default_outcome_heading;
                        }
                        else if (answerGroupCount > 0) {
                            summary = 'All other answers';
                        }
                        else {
                            summary = 'All answers';
                        }
                        if (hasFeedback && shortenRule) {
                            summary = $filter('wrapTextWithEllipsis')(summary, RULE_SUMMARY_WRAP_CHARACTER_COUNT);
                        }
                        summary = '[' + summary + '] ';
                        if (hasFeedback) {
                            summary +=
                                $filter('convertToPlainText')(defaultOutcome.feedback.getHtml());
                        }
                        return summary;
                    };
                    $scope.isOutcomeLooping = function (outcome) {
                        var activeStateName = $scope.stateName;
                        return outcome && (outcome.dest === activeStateName);
                    };
                    if (StateEditorService.isInQuestionMode()) {
                        $scope.onResponsesInitialized();
                    }
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/state-editor/state-solution-editor/state-solution-editor.directive.ts":
/*!*************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/state-editor/state-solution-editor/state-solution-editor.directive.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the solution viewer and editor section in the
 * state editor.
 */
__webpack_require__(/*! components/state/response-header/response-header.directive.ts */ "./core/templates/dev/head/components/state/response-header/response-header.directive.ts");
__webpack_require__(/*! components/state/solution-editor/solution-editor.directive.ts */ "./core/templates/dev/head/components/state/solution-editor/solution-editor.directive.ts");
__webpack_require__(/*! domain/exploration/SolutionObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/SolutionObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! filters/string-utility-filters/convert-to-plain-text.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/convert-to-plain-text.filter.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-validity/solution-validity.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-verification/solution-verification.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/solution-verification/solution-verification.service.ts");
__webpack_require__(/*! pages/exploration_player/CurrentInteractionService.ts */ "./core/templates/dev/head/pages/exploration_player/CurrentInteractionService.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-customization-args.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-customization-args.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-hints.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-hints.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-interaction-id.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-interaction-id.service.ts");
__webpack_require__(/*! pages/state-editor/state-editor-properties-services/state-solution.service.ts */ "./core/templates/dev/head/pages/state-editor/state-editor-properties-services/state-solution.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/EditabilityService.ts */ "./core/templates/dev/head/services/EditabilityService.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
__webpack_require__(/*! services/GenerateContentIdService.ts */ "./core/templates/dev/head/services/GenerateContentIdService.ts");
angular.module('stateSolutionEditorModule').directive('stateSolutionEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                onSaveSolution: '=',
                refreshWarnings: '&',
                showMarkAllAudioAsNeedingUpdateModalIfRequired: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/state-editor/state-solution-editor/' +
                'state-solution-editor.directive.html'),
            controller: [
                '$scope', '$rootScope', '$uibModal', '$filter', 'StateEditorService',
                'AlertsService', 'INTERACTION_SPECS', 'StateSolutionService',
                'SolutionVerificationService', 'SolutionValidityService',
                'ExplorationHtmlFormatterService', 'StateInteractionIdService',
                'StateHintsService', 'UrlInterpolationService', 'SolutionObjectFactory',
                'ContextService', 'StateCustomizationArgsService',
                'EditabilityService',
                'INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_EXPLORATION',
                'INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_QUESTION',
                function ($scope, $rootScope, $uibModal, $filter, StateEditorService, AlertsService, INTERACTION_SPECS, StateSolutionService, SolutionVerificationService, SolutionValidityService, ExplorationHtmlFormatterService, StateInteractionIdService, StateHintsService, UrlInterpolationService, SolutionObjectFactory, ContextService, StateCustomizationArgsService, EditabilityService, INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_EXPLORATION, INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_QUESTION) {
                    $scope.EditabilityService = EditabilityService;
                    $scope.correctAnswer = null;
                    $scope.correctAnswerEditorHtml = '';
                    $scope.inlineSolutionEditorIsActive = false;
                    $scope.SOLUTION_EDITOR_FOCUS_LABEL = ('currentCorrectAnswerEditorHtmlForSolutionEditor');
                    $scope.StateHintsService = StateHintsService;
                    $scope.StateInteractionIdService = StateInteractionIdService;
                    $scope.StateSolutionService = StateSolutionService;
                    $scope.getInvalidSolutionTooltip = function () {
                        if (StateEditorService.isInQuestionMode()) {
                            return 'This solution doesn\'t correspond to an answer ' +
                                'marked as correct. Verify the rules specified for the ' +
                                'answers or change the solution.';
                        }
                        return 'This solution does not lead to another card. Verify the ' +
                            'responses specified or change the solution.';
                    };
                    $scope.refreshWarnings()();
                    $scope.isSolutionValid = function () {
                        return StateEditorService.isCurrentSolutionValid();
                    };
                    $scope.correctAnswerEditorHtml = (ExplorationHtmlFormatterService.getInteractionHtml(StateInteractionIdService.savedMemento, StateCustomizationArgsService.savedMemento, false, $scope.SOLUTION_EDITOR_FOCUS_LABEL));
                    $scope.toggleInlineSolutionEditorIsActive = function () {
                        $scope.inlineSolutionEditorIsActive = (!$scope.inlineSolutionEditorIsActive);
                    };
                    $scope.getSolutionSummary = function () {
                        var solution = StateSolutionService.savedMemento;
                        var solutionAsPlainText = solution.getSummary(StateInteractionIdService.savedMemento);
                        solutionAsPlainText =
                            $filter('convertToPlainText')(solutionAsPlainText);
                        return solutionAsPlainText;
                    };
                    // This returns false if the current interaction ID is null.
                    $scope.isCurrentInteractionLinear = function () {
                        return (StateInteractionIdService.savedMemento &&
                            INTERACTION_SPECS[StateInteractionIdService.savedMemento].is_linear);
                    };
                    $scope.openAddOrUpdateSolutionModal = function () {
                        AlertsService.clearWarnings();
                        $rootScope.$broadcast('externalSave');
                        $scope.inlineSolutionEditorIsActive = false;
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                                'exploration-editor-tab-templates/' +
                                'add-or-update-solution-modal.template.html'),
                            backdrop: 'static',
                            controller: [
                                '$scope', '$uibModalInstance', 'StateSolutionService',
                                'StateCustomizationArgsService',
                                'CurrentInteractionService', 'INTERACTION_SPECS',
                                'COMPONENT_NAME_SOLUTION', 'GenerateContentIdService', function ($scope, $uibModalInstance, StateSolutionService, StateCustomizationArgsService, CurrentInteractionService, INTERACTION_SPECS, COMPONENT_NAME_SOLUTION, GenerateContentIdService) {
                                    $scope.StateSolutionService = StateSolutionService;
                                    $scope.correctAnswerEditorHtml = (ExplorationHtmlFormatterService.getInteractionHtml(StateInteractionIdService.savedMemento, StateCustomizationArgsService.savedMemento, false, $scope.SOLUTION_EDITOR_FOCUS_LABEL));
                                    $scope.EXPLANATION_FORM_SCHEMA = {
                                        type: 'html',
                                        ui_config: {}
                                    };
                                    $scope.answerIsValid = false;
                                    var EMPTY_SOLUTION_DATA = {
                                        answerIsExclusive: false,
                                        correctAnswer: null,
                                        explanationHtml: '',
                                        explanationContentId: COMPONENT_NAME_SOLUTION
                                    };
                                    $scope.data = StateSolutionService.savedMemento ? {
                                        answerIsExclusive: (StateSolutionService.savedMemento.answerIsExclusive),
                                        correctAnswer: null,
                                        explanationHtml: (StateSolutionService.savedMemento.explanation.getHtml()),
                                        explanationContentId: (StateSolutionService.savedMemento.explanation
                                            .getContentId())
                                    } : angular.copy(EMPTY_SOLUTION_DATA);
                                    $scope.onSubmitFromSubmitButton = function () {
                                        CurrentInteractionService.submitAnswer();
                                    };
                                    $scope.isSubmitButtonDisabled = (CurrentInteractionService.isSubmitButtonDisabled);
                                    CurrentInteractionService.setOnSubmitFn(function (answer) {
                                        $scope.data.correctAnswer = answer;
                                    });
                                    $scope.shouldAdditionalSubmitButtonBeShown = function () {
                                        var interactionSpecs = INTERACTION_SPECS[StateInteractionIdService.savedMemento];
                                        return interactionSpecs.show_generic_submit_button;
                                    };
                                    $scope.saveSolution = function () {
                                        if (typeof $scope.data.answerIsExclusive === 'boolean' &&
                                            $scope.data.correctAnswer !== null &&
                                            $scope.data.explanation !== '') {
                                            $uibModalInstance.close({
                                                solution: SolutionObjectFactory.createNew($scope.data.answerIsExclusive, $scope.data.correctAnswer, $scope.data.explanationHtml, $scope.data.explanationContentId)
                                            });
                                        }
                                        else {
                                            throw Error('Cannot save invalid solution');
                                        }
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                        AlertsService.clearWarnings();
                                    };
                                }
                            ]
                        }).result.then(function (result) {
                            StateSolutionService.displayed = result.solution;
                            StateSolutionService.saveDisplayedValue();
                            $scope.onSaveSolution(StateSolutionService.displayed);
                            var solutionIsValid = SolutionVerificationService.verifySolution(StateEditorService.getActiveStateName(), StateEditorService.getInteraction(), StateSolutionService.savedMemento.correctAnswer);
                            SolutionValidityService.updateValidity(StateEditorService.getActiveStateName(), solutionIsValid);
                            $scope.refreshWarnings()();
                            if (!solutionIsValid) {
                                if (StateEditorService.isInQuestionMode()) {
                                    AlertsService.addInfoMessage(INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_QUESTION, 4000);
                                }
                                else {
                                    AlertsService.addInfoMessage(INFO_MESSAGE_SOLUTION_IS_INVALID_FOR_EXPLORATION, 4000);
                                }
                            }
                        });
                    };
                    $scope.deleteSolution = function (index, evt) {
                        evt.stopPropagation();
                        AlertsService.clearWarnings();
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/exploration-editor-tab/' +
                                'exploration-editor-tab-templates/' +
                                'delete-solution-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.reallyDelete = function () {
                                        $uibModalInstance.close();
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                        AlertsService.clearWarnings();
                                    };
                                }
                            ]
                        }).result.then(function () {
                            StateSolutionService.displayed = null;
                            StateSolutionService.saveDisplayedValue();
                            $scope.onSaveSolution(StateSolutionService.displayed);
                            StateEditorService.deleteCurrentSolutionValidity();
                        });
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/topic-editor-page/main-topic-editor/main-topic-editor-stories-list/main-topic-editor-stories-list.directive.ts":
/*!******************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/topic-editor-page/main-topic-editor/main-topic-editor-stories-list/main-topic-editor-stories-list.directive.ts ***!
  \******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the stories list viewer.
 */
__webpack_require__(/*! domain/editor/undo_redo/UndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/UndoRedoService.ts");
__webpack_require__(/*! domain/topic/EditableTopicBackendApiService.ts */ "./core/templates/dev/head/domain/topic/EditableTopicBackendApiService.ts");
__webpack_require__(/*! domain/topic/TopicUpdateService.ts */ "./core/templates/dev/head/domain/topic/TopicUpdateService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('mainTopicEditorStoriesListModule').directive('storiesList', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                storySummaries: '=',
                getTopic: '&topic'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/main-topic-editor/' +
                'main-topic-editor-stories-list/' +
                'main-topic-editor-stories-list.directive.html'),
            controller: [
                '$scope', '$rootScope', '$uibModal', '$window',
                'EditableTopicBackendApiService', 'UrlService', 'UndoRedoService',
                'UrlInterpolationService', 'TopicUpdateService',
                'EVENT_STORY_SUMMARIES_INITIALIZED',
                function ($scope, $rootScope, $uibModal, $window, EditableTopicBackendApiService, UrlService, UndoRedoService, UrlInterpolationService, TopicUpdateService, EVENT_STORY_SUMMARIES_INITIALIZED) {
                    var topicId = UrlService.getTopicIdFromUrl();
                    var STORY_EDITOR_URL_TEMPLATE = '/story_editor/<topic_id>/<story_id>';
                    $scope.STORY_TABLE_COLUMN_HEADINGS = ['title', 'node_count'];
                    $scope.openStoryEditor = function (storyId) {
                        if (UndoRedoService.getChangeCount() > 0) {
                            $uibModal.open({
                                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                                    'save-pending-changes-modal.template.html'),
                                backdrop: true,
                                controller: [
                                    '$scope', '$uibModalInstance',
                                    function ($scope, $uibModalInstance) {
                                        $scope.cancel = function () {
                                            $uibModalInstance.dismiss('cancel');
                                        };
                                    }
                                ]
                            });
                        }
                        else {
                            $window.open(UrlInterpolationService.interpolateUrl(STORY_EDITOR_URL_TEMPLATE, {
                                topic_id: topicId,
                                story_id: storyId
                            }), '_self');
                        }
                    };
                    $scope.deleteCanonicalStory = function (storyId) {
                        var modalInstance = $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                                'delete-story-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.confirmDeletion = function () {
                                        $uibModalInstance.close();
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                }
                            ]
                        });
                        modalInstance.result.then(function () {
                            TopicUpdateService.removeCanonicalStoryId($scope.getTopic(), storyId);
                            for (var i = 0; i < $scope.storySummaries.length; i++) {
                                if ($scope.storySummaries[i].id === storyId) {
                                    $scope.storySummaries.splice(i, 1);
                                }
                            }
                        });
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/topic-editor-page/main-topic-editor/main-topic-editor.directive.ts":
/*!**********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/topic-editor-page/main-topic-editor/main-topic-editor.directive.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the main topic editor.
 */
__webpack_require__(/*! pages/topic-editor-page/main-topic-editor/main-topic-editor-stories-list/main-topic-editor-stories-list.directive.ts */ "./core/templates/dev/head/pages/topic-editor-page/main-topic-editor/main-topic-editor-stories-list/main-topic-editor-stories-list.directive.ts");
__webpack_require__(/*! components/entity-creation-services/story-creation/story-creation.service.ts */ "./core/templates/dev/head/components/entity-creation-services/story-creation/story-creation.service.ts");
__webpack_require__(/*! domain/editor/undo_redo/UndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/UndoRedoService.ts");
__webpack_require__(/*! domain/topic/TopicUpdateService.ts */ "./core/templates/dev/head/domain/topic/TopicUpdateService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts");
angular.module('mainTopicEditorModule').directive('topicEditorTab', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/main-topic-editor/' +
                'main-topic-editor.directive.html'),
            controller: [
                '$scope', '$uibModal', 'TopicEditorStateService', 'TopicUpdateService',
                'UndoRedoService', 'UrlInterpolationService', 'StoryCreationService',
                'EVENT_STORY_SUMMARIES_INITIALIZED', 'EVENT_TOPIC_INITIALIZED',
                'EVENT_TOPIC_REINITIALIZED',
                function ($scope, $uibModal, TopicEditorStateService, TopicUpdateService, UndoRedoService, UrlInterpolationService, StoryCreationService, EVENT_STORY_SUMMARIES_INITIALIZED, EVENT_TOPIC_INITIALIZED, EVENT_TOPIC_REINITIALIZED) {
                    var _initEditor = function () {
                        $scope.topic = TopicEditorStateService.getTopic();
                        $scope.topicRights = TopicEditorStateService.getTopicRights();
                        $scope.topicNameEditorIsShown = false;
                        $scope.editableName = $scope.topic.getName();
                        $scope.editableDescription = $scope.topic.getDescription();
                        $scope.editableDescriptionIsEmpty = ($scope.editableDescription === '');
                        $scope.topicDescriptionChanged = false;
                    };
                    var _initStorySummaries = function () {
                        $scope.canonicalStorySummaries =
                            TopicEditorStateService.getCanonicalStorySummaries();
                    };
                    $scope.createCanonicalStory = function () {
                        if (UndoRedoService.getChangeCount() > 0) {
                            $uibModal.open({
                                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                                    'save-pending-changes-modal.template.html'),
                                backdrop: true,
                                controller: [
                                    '$scope', '$uibModalInstance',
                                    function ($scope, $uibModalInstance) {
                                        $scope.cancel = function () {
                                            $uibModalInstance.dismiss('cancel');
                                        };
                                    }
                                ]
                            });
                        }
                        else {
                            StoryCreationService.createNewCanonicalStory($scope.topic.getId());
                        }
                    };
                    $scope.updateTopicDescriptionStatus = function (description) {
                        $scope.editableDescriptionIsEmpty = (description === '');
                        $scope.topicDescriptionChanged = true;
                    };
                    $scope.updateTopicName = function (newName) {
                        if (newName === $scope.topic.getName()) {
                            return;
                        }
                        TopicUpdateService.setTopicName($scope.topic, newName);
                        $scope.topicNameEditorIsShown = false;
                    };
                    $scope.updateTopicDescription = function (newDescription) {
                        if (newDescription !== $scope.topic.getDescription()) {
                            TopicUpdateService.setTopicDescription($scope.topic, newDescription);
                        }
                    };
                    $scope.$on(EVENT_TOPIC_INITIALIZED, _initEditor);
                    $scope.$on(EVENT_TOPIC_REINITIALIZED, _initEditor);
                    $scope.$on(EVENT_STORY_SUMMARIES_INITIALIZED, _initStorySummaries);
                    _initEditor();
                    _initStorySummaries();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/topic-editor-page/questions-tab/questions-tab.directive.ts":
/*!**************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/topic-editor-page/questions-tab/questions-tab.directive.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the questions tab.
 */
__webpack_require__(/*! pages/questions-list-page/questions-list-page.directive.ts */ "./core/templates/dev/head/pages/questions-list-page/questions-list-page.directive.ts");
__webpack_require__(/*! components/entity-creation-services/question-creation/question-creation.service.ts */ "./core/templates/dev/head/components/entity-creation-services/question-creation/question-creation.service.ts");
__webpack_require__(/*! domain/editor/undo_redo/QuestionUndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/QuestionUndoRedoService.ts");
__webpack_require__(/*! domain/editor/undo_redo/UndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/UndoRedoService.ts");
__webpack_require__(/*! domain/question/EditableQuestionBackendApiService.ts */ "./core/templates/dev/head/domain/question/EditableQuestionBackendApiService.ts");
__webpack_require__(/*! domain/question/QuestionObjectFactory.ts */ "./core/templates/dev/head/domain/question/QuestionObjectFactory.ts");
__webpack_require__(/*! domain/skill/EditableSkillBackendApiService.ts */ "./core/templates/dev/head/domain/skill/EditableSkillBackendApiService.ts");
__webpack_require__(/*! domain/skill/MisconceptionObjectFactory.ts */ "./core/templates/dev/head/domain/skill/MisconceptionObjectFactory.ts");
__webpack_require__(/*! domain/suggestion/QuestionSuggestionObjectFactory.ts */ "./core/templates/dev/head/domain/suggestion/QuestionSuggestionObjectFactory.ts");
__webpack_require__(/*! domain/suggestion/SuggestionThreadObjectFactory.ts */ "./core/templates/dev/head/domain/suggestion/SuggestionThreadObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-tab/exploration-editor-tab-services/responses.service.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('questionsTabModule').directive('topicEditorQuestionsTab', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/questions-tab/questions-tab.directive.html'),
            controller: [
                '$scope', '$http', '$log', '$q', '$uibModal', '$window',
                'AlertsService', 'TopicEditorStateService', 'QuestionCreationService',
                'UrlService', 'EditableQuestionBackendApiService',
                'EditableSkillBackendApiService',
                'MisconceptionObjectFactory', 'QuestionObjectFactory',
                'QuestionSuggestionObjectFactory', 'SuggestionThreadObjectFactory',
                'EVENT_QUESTION_SUMMARIES_INITIALIZED', 'StateEditorService',
                'QuestionUndoRedoService', 'UndoRedoService',
                'NUM_QUESTIONS_PER_PAGE', function ($scope, $http, $log, $q, $uibModal, $window, AlertsService, TopicEditorStateService, QuestionCreationService, UrlService, EditableQuestionBackendApiService, EditableSkillBackendApiService, MisconceptionObjectFactory, QuestionObjectFactory, QuestionSuggestionObjectFactory, SuggestionThreadObjectFactory, EVENT_QUESTION_SUMMARIES_INITIALIZED, StateEditorService, QuestionUndoRedoService, UndoRedoService, NUM_QUESTIONS_PER_PAGE) {
                    $scope.currentPage = 0;
                    $scope.getQuestionSummaries =
                        TopicEditorStateService.getQuestionSummaries;
                    $scope.fetchQuestionSummaries =
                        TopicEditorStateService.fetchQuestionSummaries;
                    $scope.isLastQuestionBatch =
                        TopicEditorStateService.isLastQuestionBatch;
                    var _initTab = function () {
                        $scope.question = null;
                        $scope.skillId = null;
                        $scope.topic = TopicEditorStateService.getTopic();
                        $scope.topicRights = TopicEditorStateService.getTopicRights();
                        $scope.allSkillSummaries = [];
                        $scope.allSkillSummaries = $scope.allSkillSummaries.concat($scope.topic.getUncategorizedSkillSummaries());
                        for (var i = 0; i < $scope.topic.getSubtopics().length; i++) {
                            var subtopic = $scope.topic.getSubtopics()[i];
                            $scope.allSkillSummaries = $scope.allSkillSummaries.concat(subtopic.getSkillSummaries());
                        }
                        $scope.canEditQuestion = $scope.topicRights.canEditTopic();
                        $scope.misconceptions = [];
                        $scope.questionSuggestionThreads = [];
                        $scope.activeQuestion = null;
                        $scope.suggestionReviewMessage = null;
                        $scope.questionIsBeingUpdated = false;
                        $scope.questionIsBeingSaved = false;
                        $scope.emptyMisconceptionsList = [];
                    };
                    var loadSuggestedQuestionsAsync = function () {
                        $scope.questionSuggestionThreads = [];
                        var suggestionsPromise = $http.get('/suggestionlisthandler', {
                            params: {
                                target_type: 'topic',
                                target_id: UrlService.getTopicIdFromUrl(),
                                suggestion_type: 'add_question'
                            }
                        });
                        var threadsPromise = $http.get(UrlInterpolationService.interpolateUrl('/threadlisthandlerfortopic/<topic_id>', {
                            topic_id: UrlService.getTopicIdFromUrl()
                        }));
                        $q.all([suggestionsPromise, threadsPromise]).then(function (res) {
                            var suggestionThreads = res[1].data.suggestion_thread_dicts;
                            var suggestions = res[0].data.suggestions;
                            if (suggestionThreads.length !== suggestions.length) {
                                $log.error('Number of suggestion threads doesn\'t match number of ' +
                                    'suggestion objects');
                            }
                            for (var i = 0; i < suggestionThreads.length; i++) {
                                for (var j = 0; j < suggestions.length; j++) {
                                    if (suggestionThreads[i].thread_id ===
                                        suggestions[j].suggestion_id) {
                                        var suggestionThread = (SuggestionThreadObjectFactory.createFromBackendDicts(suggestionThreads[i], suggestions[j]));
                                        $scope.questionSuggestionThreads.push(suggestionThread);
                                        break;
                                    }
                                }
                            }
                        });
                    };
                    _initTab();
                    loadSuggestedQuestionsAsync();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/topic-editor-page/subtopics-list-tab/subtopics-list-tab.directive.ts":
/*!************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/topic-editor-page/subtopics-list-tab/subtopics-list-tab.directive.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the subtopics list editor.
 */
__webpack_require__(/*! domain/editor/undo_redo/UndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/UndoRedoService.ts");
__webpack_require__(/*! domain/topic/SubtopicPageObjectFactory.ts */ "./core/templates/dev/head/domain/topic/SubtopicPageObjectFactory.ts");
__webpack_require__(/*! domain/topic/TopicUpdateService.ts */ "./core/templates/dev/head/domain/topic/TopicUpdateService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts");
angular.module('subtopicsListTabModule').directive('subtopicsListTab', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/subtopics-list-tab/' +
                'subtopics-list-tab.directive.html'),
            controller: [
                '$scope', '$uibModal', 'TopicEditorStateService', 'TopicUpdateService',
                'UndoRedoService', 'SubtopicPageObjectFactory',
                'UrlInterpolationService', 'EVENT_TOPIC_REINITIALIZED',
                'EVENT_TOPIC_INITIALIZED', 'EVENT_SUBTOPIC_PAGE_LOADED',
                function ($scope, $uibModal, TopicEditorStateService, TopicUpdateService, UndoRedoService, SubtopicPageObjectFactory, UrlInterpolationService, EVENT_TOPIC_REINITIALIZED, EVENT_TOPIC_INITIALIZED, EVENT_SUBTOPIC_PAGE_LOADED) {
                    var SKILL_EDITOR_URL_TEMPLATE = '/skill_editor/<skillId>';
                    var _initEditor = function () {
                        $scope.topic = TopicEditorStateService.getTopic();
                        $scope.subtopics = $scope.topic.getSubtopics();
                        $scope.subtopicTitles = [];
                        $scope.subtopics.forEach(function (subtopic) {
                            return $scope.subtopicTitles.push(subtopic.getTitle());
                        });
                        $scope.uncategorizedSkillSummaries =
                            $scope.topic.getUncategorizedSkillSummaries();
                    };
                    $scope.editSubtopic = function (subtopic) {
                        var editableTitle = subtopic.getTitle();
                        TopicEditorStateService.loadSubtopicPage($scope.topic.getId(), subtopic.getId());
                        var subtopicTitles = $scope.subtopicTitles;
                        var modalInstance = $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                                'subtopic-editor-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.subtopicId = subtopic.getId();
                                    $scope.subtopicTitles = subtopicTitles;
                                    $scope.editableTitle = editableTitle;
                                    $scope.subtopicPage =
                                        TopicEditorStateService.getSubtopicPage();
                                    var pageContents = $scope.subtopicPage.getPageContents();
                                    if (pageContents) {
                                        $scope.htmlData = pageContents.getHtml();
                                    }
                                    $scope.errorMsg = null;
                                    $scope.$on(EVENT_SUBTOPIC_PAGE_LOADED, function () {
                                        $scope.subtopicPage =
                                            TopicEditorStateService.getSubtopicPage();
                                        var pageContents = $scope.subtopicPage.getPageContents();
                                        $scope.htmlData = pageContents.getHtml();
                                    });
                                    $scope.SUBTOPIC_PAGE_SCHEMA = {
                                        type: 'html',
                                        ui_config: {
                                            rows: 100
                                        }
                                    };
                                    $scope.updateSubtopicTitle = function (title) {
                                        if (title === subtopic.getTitle()) {
                                            return;
                                        }
                                        if ($scope.subtopicTitles.indexOf(title) !== -1) {
                                            $scope.errorMsg =
                                                'A subtopic with this title already exists';
                                            return;
                                        }
                                        $scope.editableTitle = title;
                                    };
                                    $scope.resetErrorMsg = function () {
                                        $scope.errorMsg = null;
                                    };
                                    $scope.updateHtmlData = function (htmlData) {
                                        $scope.subtopicPage.getPageContents().setHtml(htmlData);
                                        $scope.openPreviewSubtopicPage(htmlData);
                                    };
                                    $scope.save = function () {
                                        $uibModalInstance.close({
                                            newTitle: $scope.editableTitle,
                                            newHtmlData: $scope.htmlData
                                        });
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                }
                            ]
                        });
                        modalInstance.result.then(function (newValues) {
                            $scope.subtopicPage = TopicEditorStateService.getSubtopicPage();
                            var newTitle = newValues.newTitle;
                            var newHtmlData = newValues.newHtmlData;
                            if (newTitle !== subtopic.getTitle()) {
                                TopicUpdateService.setSubtopicTitle($scope.topic, subtopic.getId(), newTitle);
                            }
                            if (newHtmlData !==
                                $scope.subtopicPage.getPageContents().getHtml()) {
                                var subtitledHtml = angular.copy($scope.subtopicPage.getPageContents().getSubtitledHtml());
                                subtitledHtml.setHtml(newHtmlData);
                                TopicUpdateService.setSubtopicPageContentsHtml($scope.subtopicPage, subtopic.getId(), subtitledHtml);
                                TopicEditorStateService.setSubtopicPage($scope.subtopicPage);
                            }
                        });
                    };
                    $scope.isSkillDeleted = function (skillSummary) {
                        return skillSummary.getDescription() === null;
                    };
                    $scope.getSkillEditorUrl = function (skillId) {
                        return UrlInterpolationService.interpolateUrl(SKILL_EDITOR_URL_TEMPLATE, {
                            skillId: skillId
                        });
                    };
                    /**
                     * @param {string|null} oldSubtopicId - The id of the subtopic from
                     *    which the skill is to be moved, or null if the origin is the
                     *    uncategorized section.
                     * @param {SkillSummary} skillSummary - The summary of the skill that
                     *    is to be moved.
                     */
                    $scope.startMoveSkill = function (oldSubtopicId, skillSummary) {
                        $scope.skillSummaryToMove = skillSummary;
                        $scope.oldSubtopicId = oldSubtopicId ? oldSubtopicId : null;
                    };
                    /**
                     * @param {string|null} newSubtopicId - The subtopic to which the
                     *    skill is to be moved, or null if the destination is the
                     *    uncategorized section.
                     */
                    $scope.endMoveSkill = function (newSubtopicId) {
                        if (newSubtopicId === $scope.oldSubtopicId) {
                            return;
                        }
                        if (newSubtopicId === null) {
                            TopicUpdateService.removeSkillFromSubtopic($scope.topic, $scope.oldSubtopicId, $scope.skillSummaryToMove);
                        }
                        else {
                            TopicUpdateService.moveSkillToSubtopic($scope.topic, $scope.oldSubtopicId, newSubtopicId, $scope.skillSummaryToMove);
                        }
                        _initEditor();
                    };
                    $scope.deleteSubtopic = function (subtopic) {
                        TopicEditorStateService.deleteSubtopicPage($scope.topic.getId(), subtopic.getId());
                        TopicUpdateService.deleteSubtopic($scope.topic, subtopic.getId());
                        _initEditor();
                    };
                    $scope.deleteUncategorizedSkillFromTopic = function (skillSummary) {
                        TopicUpdateService.removeUncategorizedSkill($scope.topic, skillSummary);
                        _initEditor();
                    };
                    $scope.createSubtopic = function () {
                        var subtopicTitles = $scope.subtopicTitles;
                        var modalInstance = $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                                'new-subtopic-title-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.subtopicTitle = '';
                                    $scope.subtopicTitles = subtopicTitles;
                                    $scope.errorMsg = null;
                                    $scope.resetErrorMsg = function () {
                                        $scope.errorMsg = null;
                                    };
                                    $scope.isSubtopicTitleEmpty = function (subtopicTitle) {
                                        return (subtopicTitle === '');
                                    };
                                    $scope.save = function (title) {
                                        if ($scope.subtopicTitles.indexOf(title) !== -1) {
                                            $scope.errorMsg =
                                                'A subtopic with this title already exists';
                                            return;
                                        }
                                        $uibModalInstance.close(title);
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                }
                            ]
                        });
                        modalInstance.result.then(function (title) {
                            var subtopicPage = SubtopicPageObjectFactory.createDefault($scope.topic.getId(), $scope.topic.getNextSubtopicId());
                            TopicEditorStateService.setSubtopicPage(subtopicPage);
                            TopicUpdateService.addSubtopic($scope.topic, title);
                            _initEditor();
                        });
                    };
                    $scope.$on(EVENT_TOPIC_INITIALIZED, _initEditor);
                    $scope.$on(EVENT_TOPIC_REINITIALIZED, _initEditor);
                    _initEditor();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-navbar-breadcrumb/topic-editor-navbar-breadcrumb.directive.ts":
/*!************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/topic-editor-page/topic-editor-navbar-breadcrumb/topic-editor-navbar-breadcrumb.directive.ts ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the navbar breadcrumb of the topic editor.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
angular.module('topicEditorNavbarBreadcrumbModule').directive('topicEditorNavbarBreadcrumb', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-navbar-breadcrumb/' +
                'topic-editor-navbar-breadcrumb.directive.html'),
            controller: [
                '$scope', 'TopicEditorStateService',
                'FocusManagerService', 'TOPIC_NAME_INPUT_FOCUS_LABEL',
                function ($scope, TopicEditorStateService, FocusManagerService, TOPIC_NAME_INPUT_FOCUS_LABEL) {
                    $scope.topic = TopicEditorStateService.getTopic();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-navbar/topic-editor-navbar.directive.ts":
/*!**************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/topic-editor-page/topic-editor-navbar/topic-editor-navbar.directive.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the navbar of the topic editor.
 */
__webpack_require__(/*! components/common-layout-directives/loading-dots/loading-dots.directive.ts */ "./core/templates/dev/head/components/common-layout-directives/loading-dots/loading-dots.directive.ts");
__webpack_require__(/*! domain/editor/undo_redo/UndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/UndoRedoService.ts");
__webpack_require__(/*! domain/topic/TopicRightsBackendApiService.ts */ "./core/templates/dev/head/domain/topic/TopicRightsBackendApiService.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-routing/topic-editor-routing.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-routing/topic-editor-routing.service.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('topicEditorNavbarModule').directive('topicEditorNavbar', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-navbar/' +
                'topic-editor-navbar.directive.html'),
            controller: [
                '$scope', '$rootScope', '$uibModal', '$window', 'AlertsService',
                'UndoRedoService', 'TopicEditorStateService', 'UrlService',
                'TopicRightsBackendApiService', 'TopicEditorRoutingService',
                'EVENT_TOPIC_INITIALIZED', 'EVENT_TOPIC_REINITIALIZED',
                'EVENT_UNDO_REDO_SERVICE_CHANGE_APPLIED',
                function ($scope, $rootScope, $uibModal, $window, AlertsService, UndoRedoService, TopicEditorStateService, UrlService, TopicRightsBackendApiService, TopicEditorRoutingService, EVENT_TOPIC_INITIALIZED, EVENT_TOPIC_REINITIALIZED, EVENT_UNDO_REDO_SERVICE_CHANGE_APPLIED) {
                    $scope.topicId = UrlService.getTopicIdFromUrl();
                    $scope.topic = TopicEditorStateService.getTopic();
                    $scope.validationIssues = [];
                    $scope.topicRights = TopicEditorStateService.getTopicRights();
                    $scope.isSaveInProgress = TopicEditorStateService.isSavingTopic;
                    $scope.getActiveTabName = TopicEditorRoutingService.getActiveTabName;
                    $scope.selectMainTab = TopicEditorRoutingService.navigateToMainTab;
                    $scope.selectSubtopicsTab =
                        TopicEditorRoutingService.navigateToSubtopicsTab;
                    $scope.selectQuestionsTab =
                        TopicEditorRoutingService.navigateToQuestionsTab;
                    var _validateTopic = function () {
                        $scope.validationIssues = $scope.topic.validate();
                    };
                    $scope.publishTopic = function () {
                        if (!$scope.topicRights.canPublishTopic()) {
                            var modalInstance = $uibModal.open({
                                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                                    'topic-editor-send-mail-modal.template.html'),
                                backdrop: true,
                                controller: [
                                    '$scope', '$uibModalInstance',
                                    function ($scope, $uibModalInstance) {
                                        $scope.sendMail = function () {
                                            $uibModalInstance.close();
                                        };
                                        $scope.cancel = function () {
                                            $uibModalInstance.dismiss('cancel');
                                        };
                                    }
                                ]
                            });
                            modalInstance.result.then(function () {
                                TopicRightsBackendApiService.sendMail($scope.topicId, $scope.topicName).then(function () {
                                    var successToast = 'Mail Sent.';
                                    AlertsService.addSuccessMessage(successToast, 1000);
                                });
                            });
                            return;
                        }
                        var redirectToDashboard = false;
                        TopicRightsBackendApiService.publishTopic($scope.topicId).then(function () {
                            if (!$scope.topicRights.isPublished()) {
                                redirectToDashboard = true;
                            }
                            $scope.topicRights.markTopicAsPublished();
                            TopicEditorStateService.setTopicRights($scope.topicRights);
                        }).then(function () {
                            var successToast = 'Topic published.';
                            if (redirectToDashboard) {
                                $window.location = '/topics_and_skills_dashboard';
                            }
                            AlertsService.addSuccessMessage(successToast, 1000);
                        });
                    };
                    $scope.discardChanges = function () {
                        UndoRedoService.clearChanges();
                        TopicEditorStateService.loadTopic($scope.topicId);
                    };
                    $scope.getChangeListLength = function () {
                        return UndoRedoService.getChangeCount();
                    };
                    $scope.isTopicSaveable = function () {
                        return ($scope.getChangeListLength() > 0 &&
                            $scope.getWarningsCount() === 0);
                    };
                    $scope.getWarningsCount = function () {
                        return $scope.validationIssues.length;
                    };
                    $scope.saveChanges = function () {
                        var topicIsPublished = $scope.topicRights.isPublished();
                        var modalInstance = $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/topic-editor-page/topic-editor-templates/' +
                                'topic-editor-save-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.isTopicPublished = topicIsPublished;
                                    $scope.save = function (commitMessage) {
                                        $uibModalInstance.close(commitMessage);
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                }
                            ]
                        });
                        modalInstance.result.then(function (commitMessage) {
                            TopicEditorStateService.saveTopic(commitMessage);
                        }).then(function () {
                            var successToast = 'Changes saved.';
                            AlertsService.addSuccessMessage(successToast, 1000);
                        });
                    };
                    $scope.unpublishTopic = function () {
                        if (!$scope.topicRights.canPublishTopic()) {
                            return false;
                        }
                        TopicRightsBackendApiService.unpublishTopic($scope.topicId).then(function () {
                            $scope.topicRights.markTopicAsUnpublished();
                            TopicEditorStateService.setTopicRights($scope.topicRights);
                        });
                    };
                    $scope.$on(EVENT_TOPIC_INITIALIZED, _validateTopic);
                    $scope.$on(EVENT_TOPIC_REINITIALIZED, _validateTopic);
                    $scope.$on(EVENT_UNDO_REDO_SERVICE_CHANGE_APPLIED, _validateTopic);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-page.controller.ts":
/*!*****************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/topic-editor-page/topic-editor-page.controller.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Primary controller for the topic editor page.
 */
// TODO(vojtechjelinek): this block of requires should be removed after we
// introduce webpack for /extensions
__webpack_require__(/*! components/ck-editor-helpers/ck-editor-rte/ck-editor-rte.directive.ts */ "./core/templates/dev/head/components/ck-editor-helpers/ck-editor-rte/ck-editor-rte.directive.ts");
__webpack_require__(/*! components/ck-editor-helpers/ck-editor-widgets/ck-editor-widgets.initializer.ts */ "./core/templates/dev/head/components/ck-editor-helpers/ck-editor-widgets/ck-editor-widgets.initializer.ts");
__webpack_require__(/*! components/forms/forms-unicode-filters/convert-unicode-with-params-to-html.filter.ts */ "./core/templates/dev/head/components/forms/forms-unicode-filters/convert-unicode-with-params-to-html.filter.ts");
__webpack_require__(/*! components/forms/forms-unicode-filters/convert-html-to-unicode.filter.ts */ "./core/templates/dev/head/components/forms/forms-unicode-filters/convert-html-to-unicode.filter.ts");
__webpack_require__(/*! components/forms/forms-unicode-filters/convert-unicode-to-html.filter.ts */ "./core/templates/dev/head/components/forms/forms-unicode-filters/convert-unicode-to-html.filter.ts");
__webpack_require__(/*! components/forms/forms-validators/is-at-least.filter.ts */ "./core/templates/dev/head/components/forms/forms-validators/is-at-least.filter.ts");
__webpack_require__(/*! components/forms/forms-validators/is-at-most.filter.ts */ "./core/templates/dev/head/components/forms/forms-validators/is-at-most.filter.ts");
__webpack_require__(/*! components/forms/forms-validators/is-float.filter.ts */ "./core/templates/dev/head/components/forms/forms-validators/is-float.filter.ts");
__webpack_require__(/*! components/forms/forms-validators/is-integer.filter.ts */ "./core/templates/dev/head/components/forms/forms-validators/is-integer.filter.ts");
__webpack_require__(/*! components/forms/forms-validators/is-nonempty.filter.ts */ "./core/templates/dev/head/components/forms/forms-validators/is-nonempty.filter.ts");
__webpack_require__(/*! components/forms/forms-directives/apply-validation/apply-validation.directive.ts */ "./core/templates/dev/head/components/forms/forms-directives/apply-validation/apply-validation.directive.ts");
__webpack_require__(/*! components/forms/forms-directives/require-is-float/require-is-float.directive.ts */ "./core/templates/dev/head/components/forms/forms-directives/require-is-float/require-is-float.directive.ts");
__webpack_require__(/*! directives/AngularHtmlBindDirective.ts */ "./core/templates/dev/head/directives/AngularHtmlBindDirective.ts");
__webpack_require__(/*! directives/MathjaxBindDirective.ts */ "./core/templates/dev/head/directives/MathjaxBindDirective.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-bool-editor/schema-based-bool-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-bool-editor/schema-based-bool-editor.directive.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-choices-editor/schema-based-choices-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-choices-editor/schema-based-choices-editor.directive.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-custom-editor/schema-based-custom-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-custom-editor/schema-based-custom-editor.directive.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-dict-editor/schema-based-dict-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-dict-editor/schema-based-dict-editor.directive.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-editor.directive.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-expression-editor/schema-based-expression-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-expression-editor/schema-based-expression-editor.directive.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-float-editor/schema-based-float-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-float-editor/schema-based-float-editor.directive.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-html-editor/schema-based-html-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-html-editor/schema-based-html-editor.directive.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-int-editor/schema-based-int-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-int-editor/schema-based-int-editor.directive.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-list-editor/schema-based-list-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-list-editor/schema-based-list-editor.directive.ts");
__webpack_require__(/*! components/forms/forms-schema-editors/schema-based-editor/schema-based-unicode-editor/schema-based-unicode-editor.directive.ts */ "./core/templates/dev/head/components/forms/forms-schema-editors/schema-based-editor/schema-based-unicode-editor/schema-based-unicode-editor.directive.ts");
__webpack_require__(/*! components/forms/schema_viewers/SchemaBasedCustomViewerDirective.ts */ "./core/templates/dev/head/components/forms/schema_viewers/SchemaBasedCustomViewerDirective.ts");
__webpack_require__(/*! components/forms/schema_viewers/SchemaBasedDictViewerDirective.ts */ "./core/templates/dev/head/components/forms/schema_viewers/SchemaBasedDictViewerDirective.ts");
__webpack_require__(/*! components/forms/schema_viewers/SchemaBasedHtmlViewerDirective.ts */ "./core/templates/dev/head/components/forms/schema_viewers/SchemaBasedHtmlViewerDirective.ts");
__webpack_require__(/*! components/forms/schema_viewers/SchemaBasedListViewerDirective.ts */ "./core/templates/dev/head/components/forms/schema_viewers/SchemaBasedListViewerDirective.ts");
__webpack_require__(/*! components/forms/schema_viewers/SchemaBasedPrimitiveViewerDirective.ts */ "./core/templates/dev/head/components/forms/schema_viewers/SchemaBasedPrimitiveViewerDirective.ts");
__webpack_require__(/*! components/forms/schema_viewers/SchemaBasedUnicodeViewerDirective.ts */ "./core/templates/dev/head/components/forms/schema_viewers/SchemaBasedUnicodeViewerDirective.ts");
__webpack_require__(/*! components/forms/schema_viewers/SchemaBasedViewerDirective.ts */ "./core/templates/dev/head/components/forms/schema_viewers/SchemaBasedViewerDirective.ts");
__webpack_require__(/*! components/forms/forms-directives/select2-dropdown/select2-dropdown.directive.ts */ "./core/templates/dev/head/components/forms/forms-directives/select2-dropdown/select2-dropdown.directive.ts");
__webpack_require__(/*! components/forms/forms-directives/image-uploader/image-uploader.directive.ts */ "./core/templates/dev/head/components/forms/forms-directives/image-uploader/image-uploader.directive.ts");
__webpack_require__(/*! components/state/answer-group-editor/answer-group-editor.directive.ts */ "./core/templates/dev/head/components/state/answer-group-editor/answer-group-editor.directive.ts");
__webpack_require__(/*! components/state/hint-editor/hint-editor.directive.ts */ "./core/templates/dev/head/components/state/hint-editor/hint-editor.directive.ts");
__webpack_require__(/*! components/state/outcome-editor/outcome-editor.directive.ts */ "./core/templates/dev/head/components/state/outcome-editor/outcome-editor.directive.ts");
__webpack_require__(/*! components/state/outcome-editor/outcome-destination-editor/outcome-destination-editor.directive.ts */ "./core/templates/dev/head/components/state/outcome-editor/outcome-destination-editor/outcome-destination-editor.directive.ts");
__webpack_require__(/*! components/state/outcome-editor/outcome-feedback-editor/outcome-feedback-editor.directive.ts */ "./core/templates/dev/head/components/state/outcome-editor/outcome-feedback-editor/outcome-feedback-editor.directive.ts");
__webpack_require__(/*! components/state/response-header/response-header.directive.ts */ "./core/templates/dev/head/components/state/response-header/response-header.directive.ts");
__webpack_require__(/*! components/state/rule-editor/rule-editor.directive.ts */ "./core/templates/dev/head/components/state/rule-editor/rule-editor.directive.ts");
__webpack_require__(/*! components/state/rule-type-selector/rule-type-selector.directive.ts */ "./core/templates/dev/head/components/state/rule-type-selector/rule-type-selector.directive.ts");
__webpack_require__(/*! components/state/solution-editor/solution-editor.directive.ts */ "./core/templates/dev/head/components/state/solution-editor/solution-editor.directive.ts");
__webpack_require__(/*! components/state/solution-editor/solution-explanation-editor/solution-explanation-editor.directive.ts */ "./core/templates/dev/head/components/state/solution-editor/solution-explanation-editor/solution-explanation-editor.directive.ts");
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts");
__webpack_require__(/*! services/AutoplayedVideosService.ts */ "./core/templates/dev/head/services/AutoplayedVideosService.ts");
// ^^^ this block of requires should be removed ^^^
__webpack_require__(/*! pages/topic-editor-page/topic-editor-navbar-breadcrumb/topic-editor-navbar-breadcrumb.directive.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-navbar-breadcrumb/topic-editor-navbar-breadcrumb.directive.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-navbar/topic-editor-navbar.directive.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-navbar/topic-editor-navbar.directive.ts");
__webpack_require__(/*! pages/topic-editor-page/main-topic-editor/main-topic-editor.directive.ts */ "./core/templates/dev/head/pages/topic-editor-page/main-topic-editor/main-topic-editor.directive.ts");
__webpack_require__(/*! pages/topic-editor-page/questions-tab/questions-tab.directive.ts */ "./core/templates/dev/head/pages/topic-editor-page/questions-tab/questions-tab.directive.ts");
__webpack_require__(/*! pages/topic-editor-page/subtopics-list-tab/subtopics-list-tab.directive.ts */ "./core/templates/dev/head/pages/topic-editor-page/subtopics-list-tab/subtopics-list-tab.directive.ts");
__webpack_require__(/*! pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts */ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('topicEditorPageModule').controller('TopicEditor', [
    '$scope', 'TopicEditorStateService', 'UrlService',
    function ($scope, TopicEditorStateService, UrlService) {
        TopicEditorStateService.loadTopic(UrlService.getTopicIdFromUrl());
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-routing/topic-editor-routing.service.ts":
/*!************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-routing/topic-editor-routing.service.ts ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service that handles routing for the topic editor page.
 */
angular.module('topicEditorPageModule').factory('TopicEditorRoutingService', [
    '$interval', '$location', '$rootScope', '$timeout', '$window',
    function ($interval, $location, $rootScope, $timeout, $window) {
        var MAIN_TAB = 'main';
        var SUBTOPICS_TAB = 'subtopics';
        var QUESTIONS_TAB = 'questions';
        var activeTabName = MAIN_TAB;
        // When the URL path changes, reroute to the appropriate tab in the
        // topic editor page.
        $rootScope.$watch(function () {
            return $location.path();
        }, function (newPath, oldPath) {
            if (newPath === '') {
                $location.path(oldPath);
                return;
            }
            if (!oldPath) {
                // This can happen when clicking on links whose href is "#".
                return;
            }
            if (newPath === '/') {
                activeTabName = MAIN_TAB;
            }
            else if (newPath === '/subtopics') {
                activeTabName = SUBTOPICS_TAB;
            }
            else if (newPath === '/questions') {
                activeTabName = QUESTIONS_TAB;
            }
        });
        var TopicEditorRouterService = {
            getActiveTabName: function () {
                return activeTabName;
            },
            navigateToMainTab: function () {
                $location.path('');
            },
            navigateToSubtopicsTab: function () {
                $location.path('/subtopics');
            },
            navigateToQuestionsTab: function () {
                $location.path('/questions');
            }
        };
        return TopicEditorRouterService;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts":
/*!********************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/topic-editor-page/topic-editor-services/topic-editor-state/topic-editor-state.service.ts ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to maintain the state of a single topic shared
 * throughout the topic editor. This service provides functionality for
 * retrieving the topic, saving it, and listening for changes.
 */
__webpack_require__(/*! domain/editor/undo_redo/UndoRedoService.ts */ "./core/templates/dev/head/domain/editor/undo_redo/UndoRedoService.ts");
__webpack_require__(/*! domain/story/EditableStoryBackendApiService.ts */ "./core/templates/dev/head/domain/story/EditableStoryBackendApiService.ts");
__webpack_require__(/*! domain/topic/EditableTopicBackendApiService.ts */ "./core/templates/dev/head/domain/topic/EditableTopicBackendApiService.ts");
__webpack_require__(/*! domain/topic/SubtopicPageObjectFactory.ts */ "./core/templates/dev/head/domain/topic/SubtopicPageObjectFactory.ts");
__webpack_require__(/*! domain/topic/TopicObjectFactory.ts */ "./core/templates/dev/head/domain/topic/TopicObjectFactory.ts");
__webpack_require__(/*! domain/topic/TopicRightsBackendApiService.ts */ "./core/templates/dev/head/domain/topic/TopicRightsBackendApiService.ts");
__webpack_require__(/*! domain/topic/TopicRightsObjectFactory.ts */ "./core/templates/dev/head/domain/topic/TopicRightsObjectFactory.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('topicEditorPageModule').factory('TopicEditorStateService', [
    '$rootScope', 'AlertsService',
    'EditableStoryBackendApiService', 'EditableTopicBackendApiService',
    'SubtopicPageObjectFactory',
    'TopicObjectFactory', 'TopicRightsBackendApiService',
    'TopicRightsObjectFactory', 'UndoRedoService',
    'EVENT_QUESTION_SUMMARIES_INITIALIZED', 'EVENT_STORY_SUMMARIES_INITIALIZED',
    'EVENT_SUBTOPIC_PAGE_LOADED', 'EVENT_TOPIC_INITIALIZED',
    'EVENT_TOPIC_REINITIALIZED', function ($rootScope, AlertsService, EditableStoryBackendApiService, EditableTopicBackendApiService, SubtopicPageObjectFactory, TopicObjectFactory, TopicRightsBackendApiService, TopicRightsObjectFactory, UndoRedoService, EVENT_QUESTION_SUMMARIES_INITIALIZED, EVENT_STORY_SUMMARIES_INITIALIZED, EVENT_SUBTOPIC_PAGE_LOADED, EVENT_TOPIC_INITIALIZED, EVENT_TOPIC_REINITIALIZED) {
        var _topic = TopicObjectFactory.createInterstitialTopic();
        var _topicRights = TopicRightsObjectFactory.createInterstitialRights();
        // The array that caches all the subtopic pages loaded by the user.
        var _cachedSubtopicPages = [];
        // The array that stores all the ids of the subtopic pages that were not
        // loaded from the backend i.e those that correspond to newly created
        // subtopics (and not loaded from the backend).
        var _newSubtopicPageIds = [];
        var _subtopicPage = SubtopicPageObjectFactory.createInterstitialSubtopicPage();
        var _topicIsInitialized = false;
        var _topicIsLoading = false;
        var _topicIsBeingSaved = false;
        var _canonicalStorySummaries = [];
        var _questionSummaries = [];
        var _nextCursorForQuestions = '';
        var _getSubtopicPageId = function (topicId, subtopicId) {
            return topicId + '-' + subtopicId.toString();
        };
        var _getSubtopicIdFromSubtopicPageId = function (subtopicPageId) {
            // The subtopic page id consists of the topic id of length 12, a hyphen
            // and a subtopic id (which is a number).
            return parseInt(subtopicPageId.slice(13));
        };
        var _setTopic = function (topic) {
            _topic.copyFromTopic(topic);
            // Reset the subtopic pages list after setting new topic.
            _cachedSubtopicPages.length = 0;
            if (_topicIsInitialized) {
                $rootScope.$broadcast(EVENT_TOPIC_REINITIALIZED);
            }
            else {
                $rootScope.$broadcast(EVENT_TOPIC_INITIALIZED);
                _topicIsInitialized = true;
            }
        };
        var _getSubtopicPageIndex = function (subtopicPageId) {
            for (var i = 0; i < _cachedSubtopicPages.length; i++) {
                if (_cachedSubtopicPages[i].getId() === subtopicPageId) {
                    return i;
                }
            }
            return null;
        };
        var _updateTopic = function (newBackendTopicDict, skillIdToDescriptionDict) {
            _setTopic(TopicObjectFactory.create(newBackendTopicDict, skillIdToDescriptionDict));
        };
        var _setSubtopicPage = function (subtopicPage) {
            _subtopicPage.copyFromSubtopicPage(subtopicPage);
            _cachedSubtopicPages.push(angular.copy(subtopicPage));
            $rootScope.$broadcast(EVENT_SUBTOPIC_PAGE_LOADED);
        };
        var _updateSubtopicPage = function (newBackendSubtopicPageObject) {
            _setSubtopicPage(SubtopicPageObjectFactory.createFromBackendDict(newBackendSubtopicPageObject));
        };
        var _setTopicRights = function (topicRights) {
            _topicRights.copyFromTopicRights(topicRights);
        };
        var _updateTopicRights = function (newBackendTopicRightsObject) {
            _setTopicRights(TopicRightsObjectFactory.createFromBackendDict(newBackendTopicRightsObject));
        };
        var _setCanonicalStorySummaries = function (canonicalStorySummaries) {
            _canonicalStorySummaries = angular.copy(canonicalStorySummaries);
            $rootScope.$broadcast(EVENT_STORY_SUMMARIES_INITIALIZED);
        };
        var _setQuestionSummaries = function (questionSummaries) {
            _questionSummaries.push(angular.copy(questionSummaries));
            $rootScope.$broadcast(EVENT_QUESTION_SUMMARIES_INITIALIZED);
        };
        var _setNextQuestionsCursor = function (nextCursor) {
            _nextCursorForQuestions = nextCursor;
        };
        return {
            /**
             * Loads, or reloads, the topic stored by this service given a
             * specified topic ID. See setTopic() for more information on
             * additional behavior of this function.
             */
            loadTopic: function (topicId) {
                _topicIsLoading = true;
                EditableTopicBackendApiService.fetchTopic(topicId).then(function (newBackendTopicObject) {
                    _updateTopic(newBackendTopicObject.topicDict, newBackendTopicObject.skillIdToDescriptionDict);
                    EditableTopicBackendApiService.fetchStories(topicId).then(function (canonicalStorySummaries) {
                        _setCanonicalStorySummaries(canonicalStorySummaries);
                    });
                    EditableTopicBackendApiService.fetchQuestions(topicId, _nextCursorForQuestions).then(function (returnObject) {
                        _setQuestionSummaries(returnObject.questionSummaries);
                        _setNextQuestionsCursor(returnObject.nextCursor);
                    });
                }, function (error) {
                    AlertsService.addWarning(error || 'There was an error when loading the topic.');
                    _topicIsLoading = false;
                });
                TopicRightsBackendApiService.fetchTopicRights(topicId).then(function (newBackendTopicRightsObject) {
                    _updateTopicRights(newBackendTopicRightsObject);
                    _topicIsLoading = false;
                }, function (error) {
                    AlertsService.addWarning(error ||
                        'There was an error when loading the topic rights.');
                    _topicIsLoading = false;
                });
            },
            /**
             * Loads, or reloads, the subtopic page stored by this service given a
             * specified topic ID and subtopic ID.
             */
            loadSubtopicPage: function (topicId, subtopicId) {
                var subtopicPageId = _getSubtopicPageId(topicId, subtopicId);
                if (_getSubtopicPageIndex(subtopicPageId) !== null) {
                    _subtopicPage = angular.copy(_cachedSubtopicPages[_getSubtopicPageIndex(subtopicPageId)]);
                    $rootScope.$broadcast(EVENT_SUBTOPIC_PAGE_LOADED);
                    return;
                }
                EditableTopicBackendApiService.fetchSubtopicPage(topicId, subtopicId).then(function (newBackendSubtopicPageObject) {
                    _updateSubtopicPage(newBackendSubtopicPageObject);
                }, function (error) {
                    AlertsService.addWarning(error || 'There was an error when loading the topic.');
                });
            },
            /**
             * Returns whether this service is currently attempting to load the
             * topic maintained by this service.
             */
            isLoadingTopic: function () {
                return _topicIsLoading;
            },
            isLastQuestionBatch: function (index) {
                return (_nextCursorForQuestions === null &&
                    index === _questionSummaries.length - 1);
            },
            /**
             * Returns whether a topic has yet been loaded using either
             * loadTopic() or setTopic().
             */
            hasLoadedTopic: function () {
                return _topicIsInitialized;
            },
            /**
             * Returns the current topic to be shared among the topic
             * editor. Please note any changes to this topic will be propogated
             * to all bindings to it. This topic object will be retained for the
             * lifetime of the editor. This function never returns null, though it may
             * return an empty topic object if the topic has not yet been
             * loaded for this editor instance.
             */
            getTopic: function () {
                return _topic;
            },
            getCanonicalStorySummaries: function () {
                return _canonicalStorySummaries;
            },
            fetchQuestionSummaries: function (topicId, resetHistory) {
                if (resetHistory) {
                    _questionSummaries = [];
                    _nextCursorForQuestions = '';
                }
                EditableTopicBackendApiService.fetchQuestions(topicId, _nextCursorForQuestions).then(function (returnObject) {
                    _setQuestionSummaries(returnObject.questionSummaries);
                    _setNextQuestionsCursor(returnObject.nextCursor);
                });
            },
            getQuestionSummaries: function (index) {
                if (index >= _questionSummaries.length) {
                    return null;
                }
                return _questionSummaries[index];
            },
            /**
             * Returns the current subtopic page to be shared among the topic
             * editor. Please note any changes to this subtopic page will be
             * propogated to all bindings to it. This subtopic page object will be
             * retained for the lifetime of the editor. This function never returns
             * null, though it may return an empty subtopic page object if the topic
             * has not yet been loaded for this editor instance.
             */
            getSubtopicPage: function () {
                return _subtopicPage;
            },
            getCachedSubtopicPages: function () {
                return _cachedSubtopicPages;
            },
            /**
             * Returns the current topic rights to be shared among the topic
             * editor. Please note any changes to this topic rights will be
             * propogated to all bindings to it. This topic rights object will
             * be retained for the lifetime of the editor. This function never returns
             * null, though it may return an empty topic rights object if the
             * topic rights has not yet been loaded for this editor instance.
             */
            getTopicRights: function () {
                return _topicRights;
            },
            /**
             * Sets the topic stored within this service, propogating changes to
             * all bindings to the topic returned by getTopic(). The first
             * time this is called it will fire a global event based on the
             * EVENT_TOPIC_INITIALIZED constant. All subsequent
             * calls will similarly fire a EVENT_TOPIC_REINITIALIZED event.
             */
            setTopic: function (topic) {
                _setTopic(topic);
            },
            /**
             * Sets the updated subtopic page object in the correct position in the
             * _cachedSubtopicPages list.
             */
            setSubtopicPage: function (subtopicPage) {
                if (_getSubtopicPageIndex(subtopicPage.getId()) !== null) {
                    _cachedSubtopicPages[_getSubtopicPageIndex(subtopicPage.getId())] =
                        angular.copy(subtopicPage);
                    _subtopicPage.copyFromSubtopicPage(subtopicPage);
                }
                else {
                    _setSubtopicPage(subtopicPage);
                    _newSubtopicPageIds.push(subtopicPage.getId());
                }
            },
            deleteSubtopicPage: function (topicId, subtopicId) {
                var subtopicPageId = _getSubtopicPageId(topicId, subtopicId);
                var index = _getSubtopicPageIndex(subtopicPageId);
                var newIndex = _newSubtopicPageIds.indexOf(subtopicPageId);
                // If index is null, that means the corresponding subtopic page was
                // never loaded from the backend and not that the subtopic page doesn't
                // exist at all. So, not required to throw an error here.
                // Also, since newSubtopicPageIds will only have the ids of a subset of
                // the pages in the _subtopicPages array, the former need not be edited
                // either, in this case.
                if (index === null) {
                    if (newIndex === -1) {
                        return;
                    }
                    else {
                        throw Error('Invalid subtopic page.');
                    }
                }
                _cachedSubtopicPages.splice(index, 1);
                // If the deleted subtopic page corresponded to a newly created
                // subtopic, then the 'subtopicId' part of the id of all subsequent
                // subtopic pages should be decremented to make it in sync with the
                // their corresponding subtopic ids.
                if (newIndex !== -1) {
                    _newSubtopicPageIds.splice(newIndex, 1);
                    for (var i = 0; i < _cachedSubtopicPages.length; i++) {
                        var newSubtopicId = _getSubtopicIdFromSubtopicPageId(_cachedSubtopicPages[i].getId());
                        if (newSubtopicId > subtopicId) {
                            newSubtopicId--;
                            _cachedSubtopicPages[i].setId(_getSubtopicPageId(topicId, newSubtopicId));
                        }
                    }
                    for (var i = 0; i < _newSubtopicPageIds.length; i++) {
                        var newSubtopicId = _getSubtopicIdFromSubtopicPageId(_newSubtopicPageIds[i]);
                        if (newSubtopicId > subtopicId) {
                            newSubtopicId--;
                            _newSubtopicPageIds[i] = _getSubtopicPageId(topicId, newSubtopicId);
                        }
                    }
                }
            },
            /**
             * Sets the topic rights stored within this service, propogating
             * changes to all bindings to the topic returned by
             * getTopicRights().
             */
            setTopicRights: function (topicRights) {
                _setTopicRights(topicRights);
            },
            /**
             * Attempts to save the current topic given a commit message. This
             * function cannot be called until after a topic has been initialized
             * in this service. Returns false if a save is not performed due to no
             * changes pending, or true if otherwise. This function, upon success,
             * will clear the UndoRedoService of pending changes. This function also
             * shares behavior with setTopic(), when it succeeds.
             */
            saveTopic: function (commitMessage, successCallback) {
                if (!_topicIsInitialized) {
                    AlertsService.fatalWarning('Cannot save a topic before one is loaded.');
                }
                // Don't attempt to save the topic if there are no changes pending.
                if (!UndoRedoService.hasChanges()) {
                    return false;
                }
                _topicIsBeingSaved = true;
                EditableTopicBackendApiService.updateTopic(_topic.getId(), _topic.getVersion(), commitMessage, UndoRedoService.getCommittableChangeList()).then(function (topicBackendObject) {
                    _updateTopic(topicBackendObject.topicDict, topicBackendObject.skillIdToDescriptionDict);
                    var changeList = UndoRedoService.getCommittableChangeList();
                    for (var i = 0; i < changeList.length; i++) {
                        if (changeList[i].property_name === 'canonical_story_ids') {
                            if (changeList[i].new_value.length ===
                                changeList[i].old_value.length - 1) {
                                var deletedStoryId = changeList[i].old_value.filter(function (storyId) {
                                    return changeList[i].new_value.indexOf(storyId) === -1;
                                })[0];
                                EditableStoryBackendApiService.deleteStory(_topic.getId(), deletedStoryId);
                            }
                            else if (changeList[i].new_value.length <
                                changeList[i].old_value.length) {
                                throw Error('More than one story should not be deleted at a time.');
                            }
                        }
                    }
                    UndoRedoService.clearChanges();
                    _topicIsBeingSaved = false;
                    if (successCallback) {
                        successCallback();
                    }
                }, function (error) {
                    AlertsService.addWarning(error || 'There was an error when saving the topic.');
                    _topicIsBeingSaved = false;
                });
                return true;
            },
            /**
             * Returns whether this service is currently attempting to save the
             * topic maintained by this service.
             */
            isSavingTopic: function () {
                return _topicIsBeingSaved;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/AutoplayedVideosService.ts":
/*!*********************************************************************!*\
  !*** ./core/templates/dev/head/services/AutoplayedVideosService.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// About this service:
// In the exploration player, a video should only autoplay when it is first seen
// on a new card, and not when the learner clicks back to previous cards in
// their exploration playthrough. This service maintains a list of videos that
// have been played, so that we know not to autoplay them on a second pass.
//
// Caveat: if the same video is shown twice in the exploration, the second and
// subsequent instances of that video will not autoplay. We believe this
// occurrence is rare, and have not accounted for it here. If it turns out
// to be an issue, we may need to instead assign a unique id to each rich-text
// component and use that id instead to determine whether to suppress
// autoplaying.
oppia.factory('AutoplayedVideosService', [function () {
        var autoplayedVideosDict = {};
        return {
            addAutoplayedVideo: function (videoId) {
                autoplayedVideosDict[videoId] = true;
            },
            hasVideoBeenAutoplayed: function (videoId) {
                return Boolean(autoplayedVideosDict[videoId]);
            }
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/services/ComputeGraphService.ts":
/*!*****************************************************************!*\
  !*** ./core/templates/dev/head/services/ComputeGraphService.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for computing a graphical representation of an
 * exploration.
 */
oppia.factory('ComputeGraphService', [
    'INTERACTION_SPECS', function (INTERACTION_SPECS) {
        var _computeGraphData = function (initStateId, states) {
            var nodes = {};
            var links = [];
            var finalStateIds = states.getFinalStateNames();
            states.getStateNames().forEach(function (stateName) {
                var interaction = states.getState(stateName).interaction;
                nodes[stateName] = stateName;
                if (interaction.id) {
                    var groups = interaction.answerGroups;
                    for (var h = 0; h < groups.length; h++) {
                        links.push({
                            source: stateName,
                            target: groups[h].outcome.dest,
                        });
                    }
                    if (interaction.defaultOutcome) {
                        links.push({
                            source: stateName,
                            target: interaction.defaultOutcome.dest,
                        });
                    }
                }
            });
            return {
                finalStateIds: finalStateIds,
                initStateId: initStateId,
                links: links,
                nodes: nodes
            };
        };
        var _computeBfsTraversalOfStates = function (initStateId, states, sourceStateName) {
            var stateGraph = _computeGraphData(initStateId, states);
            var stateNamesInBfsOrder = [];
            var queue = [];
            var seen = {};
            seen[sourceStateName] = true;
            queue.push(sourceStateName);
            while (queue.length > 0) {
                var currStateName = queue.shift();
                stateNamesInBfsOrder.push(currStateName);
                for (var e = 0; e < stateGraph.links.length; e++) {
                    var edge = stateGraph.links[e];
                    var dest = edge.target;
                    if (edge.source === currStateName && !seen.hasOwnProperty(dest)) {
                        seen[dest] = true;
                        queue.push(dest);
                    }
                }
            }
            return stateNamesInBfsOrder;
        };
        return {
            compute: function (initStateId, states) {
                return _computeGraphData(initStateId, states);
            },
            computeBfsTraversalOfStates: function (initStateId, states, sourceStateName) {
                return _computeBfsTraversalOfStates(initStateId, states, sourceStateName);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/EditabilityService.ts":
/*!****************************************************************!*\
  !*** ./core/templates/dev/head/services/EditabilityService.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for checking the ability to edit an exploration.
 */
// TODO(sll): Should this depend on a versioning service that keeps track of
// the current active version? Previous versions should not be editable.
// TODO(SD): Remove translatable part from this service after translation tab
// will get implemented.
oppia.factory('EditabilityService', [function () {
        var isEditable = false;
        var isTranslatable = false;
        var inTutorialMode = false;
        return {
            isEditable: function () {
                return isEditable && !inTutorialMode;
            },
            isTranslatable: function () {
                return isTranslatable && !inTutorialMode;
            },
            isEditableOutsideTutorialMode: function () {
                return isEditable;
            },
            markEditable: function () {
                isEditable = true;
            },
            markTranslatable: function () {
                isTranslatable = true;
            },
            markNotEditable: function () {
                isEditable = false;
            },
            onEndTutorial: function () {
                inTutorialMode = false;
            },
            onStartTutorial: function () {
                inTutorialMode = true;
            }
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/services/GenerateContentIdService.ts":
/*!**********************************************************************!*\
  !*** ./core/templates/dev/head/services/GenerateContentIdService.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A service for generating random and unique content_id for
 * SubtitledHtml domain objects.
 */
oppia.factory('GenerateContentIdService', [
    'COMPONENT_NAME_FEEDBACK', 'COMPONENT_NAME_HINT',
    'COMPONENT_NAME_WORKED_EXAMPLE', function (COMPONENT_NAME_FEEDBACK, COMPONENT_NAME_HINT, COMPONENT_NAME_WORKED_EXAMPLE) {
        var generateIdForComponent = function (existingComponentIds, componentName) {
            var contentIdList = angular.copy(existingComponentIds);
            var searchKey = componentName + '_';
            var count = 0;
            for (var contentId in contentIdList) {
                if (contentIdList[contentId].indexOf(searchKey) === 0) {
                    var splitContentId = contentIdList[contentId].split('_');
                    var tempCount = parseInt(splitContentId[splitContentId.length - 1]);
                    if (tempCount > count) {
                        count = tempCount;
                    }
                }
            }
            return (searchKey + String(count + 1));
        };
        var _getNextId = function (existingComponentIds, componentName) {
            if (componentName === COMPONENT_NAME_FEEDBACK ||
                componentName === COMPONENT_NAME_HINT ||
                componentName === COMPONENT_NAME_WORKED_EXAMPLE) {
                return generateIdForComponent(existingComponentIds, componentName);
            }
            else {
                throw Error('Unknown component name provided.');
            }
        };
        return {
            getNextId: function (existingComponentIds, componentName) {
                return _getNextId(existingComponentIds, componentName);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/ImprovementsService.ts":
/*!*****************************************************************!*\
  !*** ./core/templates/dev/head/services/ImprovementsService.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to help identify and manage improvements in exploration
 * states based on statistics.
 */
oppia.factory('ImprovementsService', [function () {
        var INTERACTION_IDS_REQUIRED_TO_BE_RESOLVED = ['TextInput'];
        return {
            isStateForcedToResolveOutstandingUnaddressedAnswers: function (state) {
                return !!state && INTERACTION_IDS_REQUIRED_TO_BE_RESOLVED.indexOf(state.interaction.id) !== -1;
            }
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/services/LocalStorageService.ts":
/*!*****************************************************************!*\
  !*** ./core/templates/dev/head/services/LocalStorageService.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Utility service for saving data locally on the client machine.
 */
__webpack_require__(/*! domain/exploration/ExplorationDraftObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ExplorationDraftObjectFactory.ts");
// Service for saving exploration draft changes to local storage.
//
// Note that the draft is only saved if localStorage exists and works
// (i.e. has storage capacity).
oppia.factory('LocalStorageService', [
    'ExplorationDraftObjectFactory',
    function (ExplorationDraftObjectFactory) {
        // Check that local storage exists and works as expected.
        // If it does storage stores the localStorage object,
        // else storage is undefined or false.
        var storage = (function () {
            var test = 'test';
            var result;
            try {
                localStorage.setItem(test, test);
                result = localStorage.getItem(test) === test;
                localStorage.removeItem(test);
                return result && localStorage;
            }
            catch (exception) { }
        }());
        /**
         * Create the key to access the changeList in localStorage
         * @param {String} explorationId - The exploration id of the changeList
         *   to be accessed.
         */
        var _createExplorationDraftKey = function (explorationId) {
            return 'draft_' + explorationId;
        };
        return {
            /**
             * Check that localStorage is available to the client.
             * @returns {boolean} true iff the client has access to localStorage.
             */
            isStorageAvailable: function () {
                return Boolean(storage);
            },
            /**
             * Save the given changeList to localStorage along with its
             * draftChangeListId
             * @param {String} explorationId - The id of the exploration
             *   associated with the changeList to be saved.
             * @param {List} changeList - The exploration change list to be saved.
             * @param {Integer} draftChangeListId - The id of the draft to be saved.
             */
            saveExplorationDraft: function (explorationId, changeList, draftChangeListId) {
                var localSaveKey = _createExplorationDraftKey(explorationId);
                if (storage) {
                    var draftDict = ExplorationDraftObjectFactory.toLocalStorageDict(changeList, draftChangeListId);
                    storage.setItem(localSaveKey, JSON.stringify(draftDict));
                }
            },
            /**
             * Retrieve the local save of the changeList associated with the given
             * exploration id.
             * @param {String} explorationId - The exploration id of the change list
             *   to be retrieved.
             * @returns {Object} The local save draft object if it exists,
             *   else null.
             */
            getExplorationDraft: function (explorationId) {
                if (storage) {
                    var draftDict = JSON.parse(storage.getItem(_createExplorationDraftKey(explorationId)));
                    if (draftDict) {
                        return ExplorationDraftObjectFactory.createFromLocalStorageDict(draftDict);
                    }
                }
                return null;
            },
            /**
             * Remove the local save of the changeList associated with the given
             * exploration id.
             * @param {String} explorationId - The exploration id of the change list
             *   to be removed.
             */
            removeExplorationDraft: function (explorationId) {
                if (storage) {
                    storage.removeItem(_createExplorationDraftKey(explorationId));
                }
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/RteHelperService.ts":
/*!**************************************************************!*\
  !*** ./core/templates/dev/head/services/RteHelperService.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A helper service for the Rich text editor(RTE).
 */
oppia.constant('RTE_COMPONENT_SPECS', richTextComponents);
oppia.factory('RteHelperService', [
    '$document', '$filter', '$interpolate', '$log', '$uibModal',
    'ContextService', 'FocusManagerService', 'HtmlEscaperService',
    'UrlInterpolationService', 'RTE_COMPONENT_SPECS',
    function ($document, $filter, $interpolate, $log, $uibModal, ContextService, FocusManagerService, HtmlEscaperService, UrlInterpolationService, RTE_COMPONENT_SPECS) {
        var _RICH_TEXT_COMPONENTS = [];
        Object.keys(RTE_COMPONENT_SPECS).sort().forEach(function (componentId) {
            _RICH_TEXT_COMPONENTS.push({
                backendId: RTE_COMPONENT_SPECS[componentId].backend_id,
                customizationArgSpecs: angular.copy(RTE_COMPONENT_SPECS[componentId].customization_arg_specs),
                id: RTE_COMPONENT_SPECS[componentId].frontend_id,
                iconDataUrl: RTE_COMPONENT_SPECS[componentId].icon_data_url,
                isComplex: RTE_COMPONENT_SPECS[componentId].is_complex,
                isBlockElement: RTE_COMPONENT_SPECS[componentId].is_block_element,
                requiresFs: RTE_COMPONENT_SPECS[componentId].requires_fs,
                tooltip: RTE_COMPONENT_SPECS[componentId].tooltip
            });
        });
        var _createCustomizationArgDictFromAttrs = function (attrs) {
            var customizationArgsDict = {};
            for (var i = 0; i < attrs.length; i++) {
                var attr = attrs[i];
                if (attr.name === 'class' || attr.name === 'src' ||
                    attr.name === '_moz_resizing') {
                    continue;
                }
                var separatorLocation = attr.name.indexOf('-with-value');
                if (separatorLocation === -1) {
                    $log.error('RTE Error: invalid customization attribute ' + attr.name);
                    continue;
                }
                var argName = attr.name.substring(0, separatorLocation);
                customizationArgsDict[argName] = HtmlEscaperService.escapedJsonToObj(attr.value);
            }
            return customizationArgsDict;
        };
        return {
            createCustomizationArgDictFromAttrs: function (attrs) {
                return _createCustomizationArgDictFromAttrs(attrs);
            },
            getRichTextComponents: function () {
                return angular.copy(_RICH_TEXT_COMPONENTS);
            },
            isInlineComponent: function (richTextComponent) {
                var inlineComponents = ['link', 'math'];
                return inlineComponents.indexOf(richTextComponent) !== -1;
            },
            // The refocusFn arg is a function that restores focus to the text editor
            // after exiting the modal, and moves the cursor back to where it was
            // before the modal was opened.
            _openCustomizationModal: function (customizationArgSpecs, attrsCustomizationArgsDict, onSubmitCallback, onDismissCallback, refocusFn) {
                $document[0].execCommand('enableObjectResizing', false, false);
                var modalDialog = $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/forms-templates/' +
                        'customize-rte-component-modal.template.html'),
                    backdrop: 'static',
                    resolve: {},
                    controller: [
                        '$scope', '$uibModalInstance', '$timeout',
                        function ($scope, $uibModalInstance, $timeout) {
                            $scope.customizationArgSpecs = customizationArgSpecs;
                            // Without this code, the focus will remain in the background RTE
                            // even after the modal loads. This switches the focus to a
                            // temporary field in the modal which is then removed from the
                            // DOM.
                            // TODO(sll): Make this switch to the first input field in the
                            // modal instead.
                            $scope.modalIsLoading = true;
                            FocusManagerService.setFocus('tmpFocusPoint');
                            $timeout(function () {
                                $scope.modalIsLoading = false;
                            });
                            $scope.tmpCustomizationArgs = [];
                            for (var i = 0; i < customizationArgSpecs.length; i++) {
                                var caName = customizationArgSpecs[i].name;
                                $scope.tmpCustomizationArgs.push({
                                    name: caName,
                                    value: (attrsCustomizationArgsDict.hasOwnProperty(caName) ?
                                        angular.copy(attrsCustomizationArgsDict[caName]) :
                                        customizationArgSpecs[i].default_value)
                                });
                            }
                            $scope.cancel = function () {
                                $uibModalInstance.dismiss('cancel');
                            };
                            $scope.save = function () {
                                $scope.$broadcast('externalSave');
                                var customizationArgsDict = {};
                                for (var i = 0; i < $scope.tmpCustomizationArgs.length; i++) {
                                    var caName = $scope.tmpCustomizationArgs[i].name;
                                    customizationArgsDict[caName] = ($scope.tmpCustomizationArgs[i].value);
                                }
                                $uibModalInstance.close(customizationArgsDict);
                            };
                        }
                    ]
                });
                modalDialog.result.then(onSubmitCallback, onDismissCallback);
                // 'finally' is a JS keyword. If it is just used in its ".finally" form,
                // the minification process throws an error.
                modalDialog.result['finally'](refocusFn);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/StateTopAnswersStatsService.ts":
/*!*************************************************************************!*\
  !*** ./core/templates/dev/head/services/StateTopAnswersStatsService.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for maintaining the statistics of the top answers for
 * each state of an exploration.
 */
__webpack_require__(/*! domain/exploration/AnswerStatsObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/AnswerStatsObjectFactory.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/angular-name/angular-name.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/exploration-editor-page-services/exploration-states/exploration-states.service.ts");
__webpack_require__(/*! pages/exploration_player/AnswerClassificationService.ts */ "./core/templates/dev/head/pages/exploration_player/AnswerClassificationService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
oppia.factory('StateTopAnswersStatsService', [
    '$injector', 'AngularNameService', 'AnswerClassificationService',
    'AnswerStatsObjectFactory', 'ContextService',
    'ExplorationStatesService',
    function ($injector, AngularNameService, AnswerClassificationService, AnswerStatsObjectFactory, ContextService, ExplorationStatesService) {
        /**
         * @typedef AnswerStatsCache
         * @property {AnswerStats[]} allAnswers
         * @property {AnswerStats[]} unresolvedAnswers
         */
        /** @type {Object.<string, AnswerStatsCache[]>} */
        var stateTopAnswersStatsCache = {};
        /** @type {boolean} */
        var isInitialized = false;
        /**
         * Updates the addressed info of all the answers cached for the given state
         * to reflect the state's current answer groups.
         * @param {string} stateName
         */
        var refreshAddressedInfo = function (stateName) {
            var explorationId = ContextService.getExplorationId();
            var state = ExplorationStatesService.getState(stateName);
            var interactionRulesService = $injector.get(AngularNameService.getNameOfInteractionRulesService(state.interaction.id));
            var allAnswersCacheEntry = stateTopAnswersStatsCache[stateName].allAnswers;
            var unresolvedAnswersCacheEntry = stateTopAnswersStatsCache[stateName].unresolvedAnswers;
            // Clear the unresolvedAnswers array since many answers may now have
            // different "addressed" values.
            unresolvedAnswersCacheEntry.length = 0;
            // Update the isAddressed data of each answer and put any unaddressed
            // answers into the unresolvedAnswers array.
            allAnswersCacheEntry.forEach(function (answerStats) {
                answerStats.isAddressed =
                    AnswerClassificationService.isClassifiedExplicitlyOrGoesToNewState(stateName, state, answerStats.answer, interactionRulesService);
                if (!answerStats.isAddressed) {
                    unresolvedAnswersCacheEntry.push(answerStats);
                }
            });
        };
        var onStateAdded = function (stateName) {
            stateTopAnswersStatsCache[stateName] = {
                allAnswers: [],
                unresolvedAnswers: []
            };
        };
        var onStateDeleted = function (stateName) {
            delete stateTopAnswersStatsCache[stateName];
        };
        var onStateRenamed = function (oldStateName, newStateName) {
            stateTopAnswersStatsCache[newStateName] =
                stateTopAnswersStatsCache[oldStateName];
            delete stateTopAnswersStatsCache[oldStateName];
        };
        var onStateAnswerGroupsSaved = function (stateName) {
            refreshAddressedInfo(stateName);
        };
        return {
            /**
             * Calls the backend asynchronously to setup the answer statistics of each
             * state this exploration contains.
             *
             * @param {Object.<string, *>} stateTopAnswersStatsBackendDict - The
             *    backend representation of the state top answers statistics.
             */
            init: function (stateTopAnswersStatsBackendDict) {
                if (isInitialized) {
                    return;
                }
                stateTopAnswersStatsCache = {};
                for (var stateName in stateTopAnswersStatsBackendDict.answers) {
                    stateTopAnswersStatsCache[stateName] = {
                        allAnswers: stateTopAnswersStatsBackendDict.answers[stateName].map(AnswerStatsObjectFactory.createFromBackendDict),
                        unresolvedAnswers: []
                    };
                    // Still need to manually refresh the addressed information.
                    refreshAddressedInfo(stateName);
                }
                ExplorationStatesService.registerOnStateAddedCallback(onStateAdded);
                ExplorationStatesService.registerOnStateDeletedCallback(onStateDeleted);
                ExplorationStatesService.registerOnStateRenamedCallback(onStateRenamed);
                ExplorationStatesService.registerOnStateAnswerGroupsSavedCallback(onStateAnswerGroupsSaved);
                isInitialized = true;
            },
            /** @returns {boolean} - Whether the cache is ready for use. */
            isInitialized: function () {
                return isInitialized;
            },
            /**
             * @returns {boolean} - Whether the cache contains any answers for the
             * given state.
             */
            hasStateStats: function (stateName) {
                return isInitialized &&
                    stateTopAnswersStatsCache.hasOwnProperty(stateName);
            },
            /** @returns {string[]} - list of state names with recorded stats. */
            getStateNamesWithStats: function () {
                return Object.keys(stateTopAnswersStatsCache);
            },
            /**
             * @param {string} stateName
             * @returns {AnswerStats[]} - list of the statistics for the top answers.
             */
            getStateStats: function (stateName) {
                if (!stateTopAnswersStatsCache.hasOwnProperty(stateName)) {
                    throw Error(stateName + ' does not exist.');
                }
                return stateTopAnswersStatsCache[stateName].allAnswers;
            },
            /**
             * @param {string} stateName
             * @returns {AnswerStats[]} - list of stats for answers that are
             *    unresolved.
             */
            getUnresolvedStateStats: function (stateName) {
                if (!stateTopAnswersStatsCache.hasOwnProperty(stateName)) {
                    throw Error(stateName + ' does not exist.');
                }
                return stateTopAnswersStatsCache[stateName].unresolvedAnswers;
            },
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/UserService.ts":
/*!*********************************************************!*\
  !*** ./core/templates/dev/head/services/UserService.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for user data.
 */
oppia.factory('UserService', [
    '$http', '$q', '$window', 'UrlInterpolationService', 'UserInfoObjectFactory',
    'DEFAULT_PROFILE_IMAGE_PATH',
    function ($http, $q, $window, UrlInterpolationService, UserInfoObjectFactory, DEFAULT_PROFILE_IMAGE_PATH) {
        var PREFERENCES_DATA_URL = '/preferenceshandler/data';
        var userInfo = null;
        var getUserInfoAsync = function () {
            if (GLOBALS.userIsLoggedIn) {
                if (userInfo) {
                    return $q.resolve(userInfo);
                }
                return $http.get('/userinfohandler').then(function (response) {
                    userInfo = UserInfoObjectFactory.createFromBackendDict(response.data);
                    return userInfo;
                });
            }
            else {
                return $q.resolve(UserInfoObjectFactory.createDefault());
            }
        };
        return {
            getProfileImageDataUrlAsync: function () {
                var profilePictureDataUrl = (UrlInterpolationService.getStaticImageUrl(DEFAULT_PROFILE_IMAGE_PATH));
                if (GLOBALS.userIsLoggedIn) {
                    return $http.get('/preferenceshandler/profile_picture').then(function (response) {
                        if (response.data.profile_picture_data_url) {
                            profilePictureDataUrl = response.data.profile_picture_data_url;
                        }
                        return profilePictureDataUrl;
                    });
                }
                else {
                    return $q.resolve(profilePictureDataUrl);
                }
            },
            setProfileImageDataUrlAsync: function (newProfileImageDataUrl) {
                return $http.put(PREFERENCES_DATA_URL, {
                    update_type: 'profile_picture_data_url',
                    data: newProfileImageDataUrl
                });
            },
            getLoginUrlAsync: function () {
                var urlParameters = {
                    current_url: $window.location.href
                };
                return $http.get('/url_handler', { params: urlParameters }).then(function (response) {
                    return response.data.login_url;
                });
            },
            getUserInfoAsync: getUserInfoAsync
        };
    }
]);


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,