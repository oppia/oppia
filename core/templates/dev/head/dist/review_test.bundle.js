/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"review_test": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./core/templates/dev/head/pages/review-test-page/review-test-page.scripts.ts","vendors~about~admin~collection_editor~collection_player~community_dashboard~contact~creator_dashboar~7856c05a","vendors~admin~collection_editor~collection_player~creator_dashboard~exploration_editor~exploration_p~7f8bcc67","vendors~admin~collection_editor~creator_dashboard~exploration_editor~exploration_player~practice_ses~988cfeb1","vendors~creator_dashboard~exploration_editor~exploration_player~practice_session~review_test~skill_e~61b3d15e","about~admin~collection_editor~collection_player~community_dashboard~contact~creator_dashboard~donate~e06a4a17","admin~creator_dashboard~exploration_editor~exploration_player~moderator~practice_session~review_test~b9580ed0","admin~creator_dashboard~exploration_editor~exploration_player~moderator~practice_session~review_test~d3595155","admin~exploration_editor~exploration_player~moderator~practice_session~review_test~skill_editor~stor~7734cddb"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./core/templates/dev/head/base_components/BaseContentDirective.ts":
/*!*************************************************************************!*\
  !*** ./core/templates/dev/head/base_components/BaseContentDirective.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Base Transclusion Component.
 */
__webpack_require__(/*! base_components/WarningLoaderDirective.ts */ "./core/templates/dev/head/base_components/WarningLoaderDirective.ts");
__webpack_require__(/*! pages/OppiaFooterDirective.ts */ "./core/templates/dev/head/pages/OppiaFooterDirective.ts");
__webpack_require__(/*! domain/sidebar/SidebarStatusService.ts */ "./core/templates/dev/head/domain/sidebar/SidebarStatusService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/stateful/BackgroundMaskService.ts */ "./core/templates/dev/head/services/stateful/BackgroundMaskService.ts");
angular.module('oppia').directive('baseContent', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            transclude: {
                breadcrumb: '?navbarBreadcrumb',
                content: 'content',
                footer: '?pageFooter',
                navOptions: '?navOptions',
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/base_components/base_content_directive.html'),
            controllerAs: '$ctrl',
            controller: ['$rootScope', 'BackgroundMaskService',
                'SidebarStatusService', 'UrlService', 'SITE_FEEDBACK_FORM_URL',
                function ($rootScope, BackgroundMaskService, SidebarStatusService, UrlService, SITE_FEEDBACK_FORM_URL) {
                    var ctrl = this;
                    ctrl.iframed = UrlService.isIframed();
                    ctrl.siteFeedbackFormUrl = SITE_FEEDBACK_FORM_URL;
                    ctrl.isSidebarShown = SidebarStatusService.isSidebarShown;
                    ctrl.closeSidebarOnSwipe = SidebarStatusService.closeSidebar;
                    ctrl.isBackgroundMaskActive = BackgroundMaskService.isMaskActive;
                    ctrl.DEV_MODE = $rootScope.DEV_MODE;
                    ctrl.skipToMainContent = function () {
                        var mainContentElement = document.getElementById('oppia-main-content');
                        if (!mainContentElement) {
                            throw Error('Variable mainContentElement is undefined.');
                        }
                        mainContentElement.tabIndex = -1;
                        mainContentElement.scrollIntoView();
                        mainContentElement.focus();
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/base_components/WarningLoaderDirective.ts":
/*!***************************************************************************!*\
  !*** ./core/templates/dev/head/base_components/WarningLoaderDirective.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for warning_loader.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('oppia').directive('warningLoader', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/base_components/warning_loader_directive.html'),
            controllerAs: '$ctrl',
            controller: ['AlertsService',
                function (AlertsService) {
                    var ctrl = this;
                    ctrl.AlertsService = AlertsService;
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/button-directives/exploration-embed-button.service.ts":
/*!**************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/button-directives/exploration-embed-button.service.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for the 'embed exploration' modal.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/SiteAnalyticsService.ts */ "./core/templates/dev/head/services/SiteAnalyticsService.ts");
angular.module('oppia').factory('ExplorationEmbedButtonService', [
    '$uibModal', 'SiteAnalyticsService', 'UrlInterpolationService',
    function ($uibModal, SiteAnalyticsService, UrlInterpolationService) {
        return {
            showModal: function (explorationId) {
                $uibModal.open({
                    backdrop: true,
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/button-directives/' +
                        'exploration-embed-button.directive.html'),
                    resolve: {
                        explorationId: function () {
                            return explorationId;
                        }
                    },
                    controller: [
                        '$scope', '$uibModalInstance', '$window', 'explorationId',
                        function ($scope, $uibModalInstance, $window, explorationId) {
                            $scope.explorationId = explorationId;
                            $scope.serverName = ($window.location.protocol + '//' + $window.location.host);
                            $scope.close = function () {
                                $uibModalInstance.dismiss('close');
                            };
                            $scope.selectText = function (evt) {
                                var codeDiv = evt.currentTarget;
                                var range = document.createRange();
                                range.setStartBefore(codeDiv.firstChild);
                                range.setEndAfter(codeDiv.lastChild);
                                var selection = window.getSelection();
                                selection.removeAllRanges();
                                selection.addRange(range);
                            };
                        }
                    ]
                });
                SiteAnalyticsService.registerOpenEmbedInfoEvent(explorationId);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/button-directives/hint-and-solution-buttons.directive.ts":
/*!*****************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/button-directives/hint-and-solution-buttons.directive.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for hint and solution buttons.
 */
__webpack_require__(/*! pages/exploration-player-page/services/exploration-player-state.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-player-state.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/hints-and-solution-manager.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/hints-and-solution-manager.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/hint-and-solution-modal.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/hint-and-solution-modal.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-position.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-transcript.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/stats-reporting.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/stats-reporting.service.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/contextual/DeviceInfoService.ts */ "./core/templates/dev/head/services/contextual/DeviceInfoService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
angular.module('oppia').directive('hintAndSolutionButtons', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/button-directives/' +
                'hint-and-solution-buttons.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$rootScope', 'HintsAndSolutionManagerService',
                'PlayerTranscriptService', 'ExplorationPlayerStateService',
                'HintAndSolutionModalService', 'DeviceInfoService', 'ContextService',
                'PlayerPositionService', 'EVENT_ACTIVE_CARD_CHANGED',
                'EVENT_NEW_CARD_OPENED', 'INTERACTION_SPECS', 'StatsReportingService',
                function ($scope, $rootScope, HintsAndSolutionManagerService, PlayerTranscriptService, ExplorationPlayerStateService, HintAndSolutionModalService, DeviceInfoService, ContextService, PlayerPositionService, EVENT_ACTIVE_CARD_CHANGED, EVENT_NEW_CARD_OPENED, INTERACTION_SPECS, StatsReportingService) {
                    var ctrl = this;
                    ctrl.hintIndexes = [];
                    var _editorPreviewMode = ContextService.isInExplorationEditorPage();
                    // Represents the index of the currently viewed hint.
                    ctrl.activeHintIndex = null;
                    ctrl.displayedCard = null;
                    ctrl.solutionModalIsActive = false;
                    ctrl.currentlyOnLatestCard = true;
                    ctrl.isHintConsumed = HintsAndSolutionManagerService.isHintConsumed;
                    ctrl.isSolutionConsumed = (HintsAndSolutionManagerService.isSolutionConsumed);
                    var resetLocalHintsArray = function () {
                        ctrl.hintIndexes = [];
                        var numHints = HintsAndSolutionManagerService.getNumHints();
                        for (var index = 0; index < numHints; index++) {
                            ctrl.hintIndexes.push(index);
                        }
                    };
                    ctrl.isHintButtonVisible = function (index) {
                        return (HintsAndSolutionManagerService.isHintViewable(index) &&
                            ctrl.displayedCard !== null &&
                            ctrl.displayedCard.doesInteractionSupportHints());
                    };
                    ctrl.isSolutionButtonVisible = function () {
                        return HintsAndSolutionManagerService.isSolutionViewable();
                    };
                    ctrl.displayHintModal = function (index) {
                        ctrl.activeHintIndex = index;
                        var promise = (HintAndSolutionModalService.displayHintModal(index));
                        promise.result.then(null, function () {
                            ctrl.activeHintIndex = null;
                        });
                    };
                    ctrl.onClickSolutionButton = function () {
                        ctrl.solutionModalIsActive = true;
                        if (HintsAndSolutionManagerService.isSolutionConsumed()) {
                            ctrl.displaySolutionModal();
                        }
                        else {
                            var interstitialModalPromise = (HintAndSolutionModalService.displaySolutionInterstitialModal());
                            interstitialModalPromise.result.then(function () {
                                ctrl.displaySolutionModal();
                            }, function () {
                                ctrl.solutionModalIsActive = false;
                            });
                        }
                    };
                    ctrl.displaySolutionModal = function () {
                        ctrl.solutionModalIsActive = true;
                        var inQuestionMode = (ExplorationPlayerStateService.isInQuestionMode());
                        if (!_editorPreviewMode && !inQuestionMode) {
                            StatsReportingService.recordSolutionHit(PlayerPositionService.getCurrentStateName());
                        }
                        var promise = HintAndSolutionModalService.displaySolutionModal();
                        promise.result.then(null, function () {
                            ctrl.solutionModalIsActive = false;
                        });
                    };
                    $scope.$on(EVENT_NEW_CARD_OPENED, function (evt, newCard) {
                        ctrl.displayedCard = newCard;
                        HintsAndSolutionManagerService.reset(newCard.getHints(), newCard.getSolution());
                        resetLocalHintsArray();
                    });
                    ctrl.isTooltipVisible = function () {
                        return HintsAndSolutionManagerService.isHintTooltipOpen();
                    };
                    $scope.$on(EVENT_ACTIVE_CARD_CHANGED, function (evt) {
                        var displayedCardIndex = PlayerPositionService.getDisplayedCardIndex();
                        ctrl.currentlyOnLatestCard = PlayerTranscriptService.isLastCard(displayedCardIndex);
                        if (ctrl.currentlyOnLatestCard) {
                            resetLocalHintsArray();
                        }
                    });
                    resetLocalHintsArray();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/common-layout-directives/common-elements/attribution-guide.directive.ts":
/*!********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/common-layout-directives/common-elements/attribution-guide.directive.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the attribution guide.
 */
__webpack_require__(/*! domain/utilities/BrowserCheckerService.ts */ "./core/templates/dev/head/domain/utilities/BrowserCheckerService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('attributionGuide', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/common-layout-directives/common-elements/' +
                'attribution-guide.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                'BrowserCheckerService', 'UrlService', function (BrowserCheckerService, UrlService) {
                    var ctrl = this;
                    ctrl.isMobileDevice = BrowserCheckerService.isMobileDevice();
                    ctrl.iframed = UrlService.isIframed();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/common-layout-directives/common-elements/background-banner.directive.ts":
/*!********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/common-layout-directives/common-elements/background-banner.directive.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the background banner.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('backgroundBanner', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/common-layout-directives/common-elements/' +
                'background-banner.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                function () {
                    var ctrl = this;
                    var possibleBannerFilenames = [
                        'bannerA.svg', 'bannerB.svg', 'bannerC.svg', 'bannerD.svg'
                    ];
                    var bannerImageFilename = possibleBannerFilenames[Math.floor(Math.random() * possibleBannerFilenames.length)];
                    ctrl.bannerImageFileUrl = UrlInterpolationService.getStaticImageUrl('/background/' + bannerImageFilename);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/common-layout-directives/common-elements/sharing-links.directive.ts":
/*!****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/common-layout-directives/common-elements/sharing-links.directive.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Social Sharing Links.
 */
__webpack_require__(/*! components/button-directives/exploration-embed-button.service.ts */ "./core/templates/dev/head/components/button-directives/exploration-embed-button.service.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/SiteAnalyticsService.ts */ "./core/templates/dev/head/services/SiteAnalyticsService.ts");
angular.module('oppia').directive('sharingLinks', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                layoutType: '@',
                layoutAlignType: '@',
                shareType: '@',
                getExplorationId: '&explorationId',
                getCollectionId: '&collectionId'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/common-layout-directives/common-elements/' +
                'sharing-links.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$window', 'HtmlEscaperService',
                'ExplorationEmbedButtonService', 'SiteAnalyticsService',
                'DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR',
                function ($window, HtmlEscaperService, ExplorationEmbedButtonService, SiteAnalyticsService, DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR) {
                    var ctrl = this;
                    ctrl.registerShareEvent = null;
                    if (ctrl.shareType === 'exploration') {
                        ctrl.explorationId = ctrl.getExplorationId();
                        ctrl.activityType = 'explore';
                        ctrl.activityId = ctrl.explorationId;
                        ctrl.registerShareEvent = (SiteAnalyticsService.registerShareExplorationEvent);
                        ctrl.showEmbedExplorationModal = (ExplorationEmbedButtonService.showModal);
                    }
                    else if (ctrl.shareType === 'collection') {
                        ctrl.collectionId = ctrl.getCollectionId();
                        ctrl.activityType = 'collection';
                        ctrl.activityId = ctrl.collectionId;
                        ctrl.registerShareEvent = (SiteAnalyticsService.registerShareCollectionEvent);
                    }
                    else {
                        throw Error('SharingLinks directive can only be used either in the' +
                            'collection player or the exploration player');
                    }
                    ctrl.serverName = ($window.location.protocol + '//' + $window.location.host);
                    ctrl.escapedTwitterText = (HtmlEscaperService.unescapedStrToEscapedStr(DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR));
                    ctrl.classroomUrl = UrlInterpolationService.getStaticImageUrl('/general/classroom.png');
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/concept-card/concept-card.directive.ts":
/*!***********************************************************************************!*\
  !*** ./core/templates/dev/head/components/concept-card/concept-card.directive.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the concept cards viewer.
 */
__webpack_require__(/*! domain/skill/ConceptCardBackendApiService.ts */ "./core/templates/dev/head/domain/skill/ConceptCardBackendApiService.ts");
__webpack_require__(/*! domain/skill/ConceptCardObjectFactory.ts */ "./core/templates/dev/head/domain/skill/ConceptCardObjectFactory.ts");
__webpack_require__(/*! filters/format-rte-preview.filter.ts */ "./core/templates/dev/head/filters/format-rte-preview.filter.ts");
angular.module('oppia').directive('conceptCard', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getSkillIds: '&skillIds',
                index: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/concept-card/concept-card.template.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', '$filter', '$rootScope',
                'ConceptCardBackendApiService', 'ConceptCardObjectFactory',
                function ($scope, $filter, $rootScope, ConceptCardBackendApiService, ConceptCardObjectFactory) {
                    var ctrl = this;
                    ctrl.conceptCards = [];
                    var currentConceptCard = null;
                    var numberOfWorkedExamplesShown = 0;
                    ctrl.loadingMessage = 'Loading';
                    ConceptCardBackendApiService.loadConceptCards(ctrl.getSkillIds()).then(function (conceptCardBackendDicts) {
                        conceptCardBackendDicts.forEach(function (conceptCardBackendDict) {
                            ctrl.conceptCards.push(ConceptCardObjectFactory.createFromBackendDict(conceptCardBackendDict));
                        });
                        ctrl.loadingMessage = '';
                        currentConceptCard = ctrl.conceptCards[ctrl.index];
                    });
                    ctrl.getSkillExplanation = function () {
                        return $filter('formatRtePreview')(currentConceptCard.getExplanation().getHtml());
                    };
                    ctrl.isLastWorkedExample = function () {
                        return numberOfWorkedExamplesShown ===
                            currentConceptCard.getWorkedExamples().length;
                    };
                    ctrl.showMoreWorkedExamples = function () {
                        numberOfWorkedExamplesShown++;
                    };
                    ctrl.showWorkedExamples = function () {
                        var workedExamplesShown = [];
                        for (var i = 0; i < numberOfWorkedExamplesShown; i++) {
                            workedExamplesShown.push($filter('formatRtePreview')(currentConceptCard.getWorkedExamples()[i].getHtml()));
                        }
                        return workedExamplesShown;
                    };
                    $scope.$watch('$ctrl.index', function (newIndex) {
                        currentConceptCard = ctrl.conceptCards[newIndex];
                        numberOfWorkedExamplesShown = 0;
                    });
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-expression-editor.directive.ts":
/*!*******************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/schema-based-editors/schema-based-expression-editor.directive.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for a schema-based editor for expressions.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('schemaBasedExpressionEditor', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            scope: {
                localValue: '=',
                isDisabled: '&',
                // TODO(sll): Currently only takes a string which is either 'bool',
                // 'int' or 'float'. May need to generalize.
                outputType: '&',
                labelForFocusTarget: '&'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/schema-based-editors/' +
                'schema-based-expression-editor.directive.html'),
            restrict: 'E'
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-custom-viewer.directive.ts":
/*!*********************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/schema-viewers/schema-based-custom-viewer.directive.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for a schema-based viewer for custom values.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/NestedDirectivesRecursionTimeoutPreventionService.ts */ "./core/templates/dev/head/services/NestedDirectivesRecursionTimeoutPreventionService.ts");
angular.module('oppia').directive('schemaBasedCustomViewer', [
    'NestedDirectivesRecursionTimeoutPreventionService',
    'UrlInterpolationService',
    function (NestedDirectivesRecursionTimeoutPreventionService, UrlInterpolationService) {
        return {
            scope: {
                localValue: '=',
                // The class of the object being edited.
                objType: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/schema-viewers/' +
                'schema-based-custom-viewer.directive.html'),
            restrict: 'E',
            compile: NestedDirectivesRecursionTimeoutPreventionService.compile
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-dict-viewer.directive.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/schema-viewers/schema-based-dict-viewer.directive.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for a schema-based viewer for dicts.
 */
__webpack_require__(/*! components/forms/schema-viewers/schema-based-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-viewer.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/NestedDirectivesRecursionTimeoutPreventionService.ts */ "./core/templates/dev/head/services/NestedDirectivesRecursionTimeoutPreventionService.ts");
angular.module('oppia').directive('schemaBasedDictViewer', [
    'NestedDirectivesRecursionTimeoutPreventionService',
    'UrlInterpolationService',
    function (NestedDirectivesRecursionTimeoutPreventionService, UrlInterpolationService) {
        return {
            scope: {
                localValue: '=',
                // Read-only property. An object whose keys and values are the dict
                // properties and the corresponding schemas.
                propertySchemas: '&'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/schema-viewers/' +
                'schema-based-dict-viewer.directive.html'),
            restrict: 'E',
            compile: NestedDirectivesRecursionTimeoutPreventionService.compile,
            controller: ['$scope', function ($scope) {
                    $scope.getHumanReadablePropertyDescription = function (property) {
                        return property.description || '[' + property.name + ']';
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-html-viewer.directive.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/schema-viewers/schema-based-html-viewer.directive.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for a schema-based viewer for HTML.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('schemaBasedHtmlViewer', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            scope: {
                localValue: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/schema-viewers/' +
                'schema-based-html-viewer.directive.html'),
            restrict: 'E'
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-list-viewer.directive.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/schema-viewers/schema-based-list-viewer.directive.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for a schema-based viewer for lists.
 */
__webpack_require__(/*! components/forms/schema-viewers/schema-based-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-viewer.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/NestedDirectivesRecursionTimeoutPreventionService.ts */ "./core/templates/dev/head/services/NestedDirectivesRecursionTimeoutPreventionService.ts");
angular.module('oppia').directive('schemaBasedListViewer', [
    'NestedDirectivesRecursionTimeoutPreventionService',
    'UrlInterpolationService',
    function (NestedDirectivesRecursionTimeoutPreventionService, UrlInterpolationService) {
        return {
            scope: {
                localValue: '=',
                // Read-only property. The schema definition for each item in the list.
                itemSchema: '&'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/schema-viewers/' +
                'schema-based-list-viewer.directive.html'),
            restrict: 'E',
            compile: NestedDirectivesRecursionTimeoutPreventionService.compile
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-primitive-viewer.directive.ts":
/*!************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/schema-viewers/schema-based-primitive-viewer.directive.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for a schema-based viewer for primitive types.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('schemaBasedPrimitiveViewer', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            scope: {
                localValue: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/schema-viewers/' +
                'schema-based-primitive-viewer.directive.html'),
            restrict: 'E',
            controller: ['$scope', function ($scope) {
                    $scope.isExpression = function (value) {
                        return angular.isString(value);
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-unicode-viewer.directive.ts":
/*!**********************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/schema-viewers/schema-based-unicode-viewer.directive.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for a schema-based viewer for unicode strings.
 */
__webpack_require__(/*! filters/convert-unicode-with-params-to-html.filter.ts */ "./core/templates/dev/head/filters/convert-unicode-with-params-to-html.filter.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('schemaBasedUnicodeViewer', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            scope: {
                localValue: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/schema-viewers/' +
                'schema-based-unicode-viewer.directive.html'),
            restrict: 'E',
            controller: [
                '$scope', '$filter', '$sce',
                function ($scope, $filter, $sce) {
                    $scope.getDisplayedValue = function () {
                        return $sce.trustAsHtml($filter('convertUnicodeWithParamsToHtml')($scope.localValue));
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-viewer.directive.ts":
/*!**************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/schema-viewers/schema-based-viewer.directive.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for general schema-based viewers.
 */
__webpack_require__(/*! components/forms/schema-viewers/schema-based-custom-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-custom-viewer.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-dict-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-dict-viewer.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-html-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-html-viewer.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-list-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-list-viewer.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-primitive-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-primitive-viewer.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-unicode-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-unicode-viewer.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('schemaBasedViewer', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                schema: '&',
                localValue: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/forms/schema-viewers/schema-based-viewer.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () { }]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/validators/is-at-least.filter.ts":
/*!***********************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/validators/is-at-least.filter.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Validator to check if input is greater than
   args.
 */
angular.module('oppia').filter('isAtLeast', [function () {
        return function (input, args) {
            return (input >= args.minValue);
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/validators/is-at-most.filter.ts":
/*!**********************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/validators/is-at-most.filter.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Validator to check if input is less than
   args.
 */
angular.module('oppia').filter('isAtMost', [function () {
        return function (input, args) {
            return (input <= args.maxValue);
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/validators/is-integer.filter.ts":
/*!**********************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/validators/is-integer.filter.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Validator to check if input is integer.
 */
angular.module('oppia').filter('isInteger', [function () {
        return function (input) {
            return Number.isInteger(Number(input));
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/components/forms/validators/is-nonempty.filter.ts":
/*!***********************************************************************************!*\
  !*** ./core/templates/dev/head/components/forms/validators/is-nonempty.filter.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Validator to check if input is nonempty.
 */
angular.module('oppia').filter('isNonempty', [function () {
        return function (input) {
            return Boolean(input);
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/components/profile-link-directives/circular-image.directive.ts":
/*!************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/profile-link-directives/circular-image.directive.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Displays circled images with linking (when available).
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('circularImage', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                src: '&',
                link: '&?'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/profile-link-directives/circular-image.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.isLinkAvailable = function () {
                        return ctrl.link() ? true : false;
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/profile-link-directives/profile-link-image.directive.ts":
/*!****************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/profile-link-directives/profile-link-image.directive.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for creating image links to a user's profile page.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('profileLinkImage', [
    'UrlInterpolationService', 'SYSTEM_USER_IDS',
    function (UrlInterpolationService, SYSTEM_USER_IDS) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                username: '&'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/profile-link-directives/' +
                'profile-link-image.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$http',
                function ($http) {
                    var ctrl = this;
                    var DEFAULT_PROFILE_IMAGE_PATH = (UrlInterpolationService.getStaticImageUrl('/avatar/user_blue_72px.png'));
                    ctrl.isUsernameLinkable = function (username) {
                        return SYSTEM_USER_IDS.indexOf(username) === -1;
                    };
                    ctrl.profileImageUrl = ('/preferenceshandler/profile_picture_by_username/' +
                        ctrl.username());
                    ctrl.profilePicture = DEFAULT_PROFILE_IMAGE_PATH;
                    // Returns a promise for the user profile picture, or the default
                    // image if user is not logged in or has not uploaded a profile
                    // picture, or the player is in preview mode.
                    $http.get(ctrl.profileImageUrl).then(function (response) {
                        ctrl.profilePicture = (response.data.profile_picture_data_url_for_username ||
                            DEFAULT_PROFILE_IMAGE_PATH);
                    });
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/question-directives/question-player/question-player.constants.ajs.ts":
/*!*****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/question-directives/question-player/question-player.constants.ajs.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for the question player directive.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var question_player_constants_1 = __webpack_require__(/*! components/question-directives/question-player/question-player.constants */ "./core/templates/dev/head/components/question-directives/question-player/question-player.constants.ts");
angular.module('oppia').constant('HASH_PARAM', question_player_constants_1.QuestionPlayerConstants.HASH_PARAM);
angular.module('oppia').constant('MAX_SCORE_PER_QUESTION', question_player_constants_1.QuestionPlayerConstants.MAX_SCORE_PER_QUESTION);
angular.module('oppia').constant('MAX_MASTERY_GAIN_PER_QUESTION', question_player_constants_1.QuestionPlayerConstants.MAX_MASTERY_GAIN_PER_QUESTION);
angular.module('oppia').constant('MAX_MASTERY_LOSS_PER_QUESTION', question_player_constants_1.QuestionPlayerConstants.MAX_MASTERY_LOSS_PER_QUESTION);
angular.module('oppia').constant('COLORS_FOR_PASS_FAIL_MODE', question_player_constants_1.QuestionPlayerConstants.COLORS_FOR_PASS_FAIL_MODE);
angular.module('oppia').constant('QUESTION_PLAYER_MODE', question_player_constants_1.QuestionPlayerConstants.QUESTION_PLAYER_MODE);
angular.module('oppia').constant('VIEW_HINT_PENALTY', question_player_constants_1.QuestionPlayerConstants.VIEW_HINT_PENALTY);
angular.module('oppia').constant('VIEW_HINT_PENALTY_FOR_MASTERY', question_player_constants_1.QuestionPlayerConstants.VIEW_HINT_PENALTY_FOR_MASTERY);
angular.module('oppia').constant('WRONG_ANSWER_PENALTY', question_player_constants_1.QuestionPlayerConstants.WRONG_ANSWER_PENALTY);
angular.module('oppia').constant('WRONG_ANSWER_PENALTY_FOR_MASTERY', question_player_constants_1.QuestionPlayerConstants.WRONG_ANSWER_PENALTY_FOR_MASTERY);


/***/ }),

/***/ "./core/templates/dev/head/components/question-directives/question-player/question-player.constants.ts":
/*!*************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/question-directives/question-player/question-player.constants.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for the question player directive.
 */
var QuestionPlayerConstants = /** @class */ (function () {
    function QuestionPlayerConstants() {
    }
    QuestionPlayerConstants.HASH_PARAM = 'question-player-result=';
    QuestionPlayerConstants.MAX_SCORE_PER_QUESTION = 1.0;
    QuestionPlayerConstants.MAX_MASTERY_GAIN_PER_QUESTION = 0.1;
    QuestionPlayerConstants.MAX_MASTERY_LOSS_PER_QUESTION = -0.1;
    QuestionPlayerConstants.COLORS_FOR_PASS_FAIL_MODE = {
        // color orange
        FAILED_COLOR: 'rgb(217, 92, 12)',
        // color shallow orange
        FAILED_COLOR_OUTER: 'rgb(244, 206, 186)',
        // color green
        PASSED_COLOR: 'rgb(0, 150, 136)',
        // color shallow green
        PASSED_COLOR_OUTER: 'rgb(143, 217, 209)'
    };
    QuestionPlayerConstants.QUESTION_PLAYER_MODE = {
        PASS_FAIL_MODE: 'PASS_FAIL'
    };
    QuestionPlayerConstants.VIEW_HINT_PENALTY = 0.1;
    QuestionPlayerConstants.VIEW_HINT_PENALTY_FOR_MASTERY = 0.02;
    QuestionPlayerConstants.WRONG_ANSWER_PENALTY_FOR_MASTERY = 0.05;
    QuestionPlayerConstants.WRONG_ANSWER_PENALTY = 0.1;
    return QuestionPlayerConstants;
}());
exports.QuestionPlayerConstants = QuestionPlayerConstants;


/***/ }),

/***/ "./core/templates/dev/head/components/question-directives/question-player/question-player.directive.ts":
/*!*************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/question-directives/question-player/question-player.directive.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the questions player directive.
 */
__webpack_require__(/*! components/ck-editor-helpers/ck-editor-4-rte.directive.ts */ "./core/templates/dev/head/components/ck-editor-helpers/ck-editor-4-rte.directive.ts");
__webpack_require__(/*! components/ck-editor-helpers/ck-editor-4-widgets.initializer.ts */ "./core/templates/dev/head/components/ck-editor-helpers/ck-editor-4-widgets.initializer.ts");
__webpack_require__(/*! directives/angular-html-bind.directive.ts */ "./core/templates/dev/head/directives/angular-html-bind.directive.ts");
__webpack_require__(/*! directives/mathjax-bind.directive.ts */ "./core/templates/dev/head/directives/mathjax-bind.directive.ts");
__webpack_require__(/*! filters/convert-unicode-with-params-to-html.filter.ts */ "./core/templates/dev/head/filters/convert-unicode-with-params-to-html.filter.ts");
__webpack_require__(/*! filters/convert-html-to-unicode.filter.ts */ "./core/templates/dev/head/filters/convert-html-to-unicode.filter.ts");
__webpack_require__(/*! filters/convert-unicode-to-html.filter.ts */ "./core/templates/dev/head/filters/convert-unicode-to-html.filter.ts");
__webpack_require__(/*! components/forms/validators/is-at-least.filter.ts */ "./core/templates/dev/head/components/forms/validators/is-at-least.filter.ts");
__webpack_require__(/*! components/forms/validators/is-at-most.filter.ts */ "./core/templates/dev/head/components/forms/validators/is-at-most.filter.ts");
__webpack_require__(/*! components/forms/validators/is-float.filter.ts */ "./core/templates/dev/head/components/forms/validators/is-float.filter.ts");
__webpack_require__(/*! components/forms/validators/is-integer.filter.ts */ "./core/templates/dev/head/components/forms/validators/is-integer.filter.ts");
__webpack_require__(/*! components/forms/validators/is-nonempty.filter.ts */ "./core/templates/dev/head/components/forms/validators/is-nonempty.filter.ts");
__webpack_require__(/*! components/forms/custom-forms-directives/apply-validation.directive.ts */ "./core/templates/dev/head/components/forms/custom-forms-directives/apply-validation.directive.ts");
__webpack_require__(/*! components/forms/custom-forms-directives/require-is-float.directive.ts */ "./core/templates/dev/head/components/forms/custom-forms-directives/require-is-float.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-bool-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-bool-editor.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-choices-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-choices-editor.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-custom-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-custom-editor.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-dict-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-dict-editor.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-editor.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-expression-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-expression-editor.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-float-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-float-editor.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-html-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-html-editor.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-int-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-int-editor.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-list-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-list-editor.directive.ts");
__webpack_require__(/*! components/forms/schema-based-editors/schema-based-unicode-editor.directive.ts */ "./core/templates/dev/head/components/forms/schema-based-editors/schema-based-unicode-editor.directive.ts");
__webpack_require__(/*! components/score-ring/score-ring.directive.ts */ "./core/templates/dev/head/components/score-ring/score-ring.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-custom-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-custom-viewer.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-dict-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-dict-viewer.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-html-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-html-viewer.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-list-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-list-viewer.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-primitive-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-primitive-viewer.directive.ts");
__webpack_require__(/*! components/forms/schema-viewers/schema-based-unicode-viewer.directive.ts */ "./core/templates/dev/head/components/forms/schema-viewers/schema-based-unicode-viewer.directive.ts");
__webpack_require__(/*! components/question-directives/question-player/question-player.constants.ajs.ts */ "./core/templates/dev/head/components/question-directives/question-player/question-player.constants.ajs.ts");
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts");
// ^^^ this block of requires should be removed ^^^
__webpack_require__(/*! components/common-layout-directives/common-elements/attribution-guide.directive.ts */ "./core/templates/dev/head/components/common-layout-directives/common-elements/attribution-guide.directive.ts");
__webpack_require__(/*! components/common-layout-directives/common-elements/background-banner.directive.ts */ "./core/templates/dev/head/components/common-layout-directives/common-elements/background-banner.directive.ts");
__webpack_require__(/*! components/concept-card/concept-card.directive.ts */ "./core/templates/dev/head/components/concept-card/concept-card.directive.ts");
__webpack_require__(/*! components/skill-mastery/skill-mastery.directive.ts */ "./core/templates/dev/head/components/skill-mastery/skill-mastery.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/learner-experience/conversation-skin.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/conversation-skin.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/layout-directives/exploration-footer.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/exploration-footer.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/layout-directives/learner-local-nav.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/learner-local-nav.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/layout-directives/learner-view-info.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/learner-view-info.directive.ts");
__webpack_require__(/*! domain/question/QuestionBackendApiService.ts */ "./core/templates/dev/head/domain/question/QuestionBackendApiService.ts");
__webpack_require__(/*! domain/skill/SkillMasteryBackendApiService.ts */ "./core/templates/dev/head/domain/skill/SkillMasteryBackendApiService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! pages/interaction-specs.constants.ajs.ts */ "./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts");
angular.module('oppia').directive('questionPlayer', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getQuestionPlayerConfig: '&playerConfig',
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/question-directives/question-player/' +
                'question-player.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                'HASH_PARAM', 'MAX_SCORE_PER_QUESTION',
                '$scope', '$sce', '$rootScope', '$location',
                '$sanitize', '$timeout', '$uibModal', '$window',
                'AlertsService', 'HtmlEscaperService',
                'QuestionBackendApiService', 'SkillMasteryBackendApiService',
                'UrlService', 'UserService', 'COLORS_FOR_PASS_FAIL_MODE',
                'MAX_MASTERY_GAIN_PER_QUESTION', 'MAX_MASTERY_LOSS_PER_QUESTION',
                'QUESTION_PLAYER_MODE', 'VIEW_HINT_PENALTY',
                'VIEW_HINT_PENALTY_FOR_MASTERY',
                'WRONG_ANSWER_PENALTY', 'WRONG_ANSWER_PENALTY_FOR_MASTERY',
                function (HASH_PARAM, MAX_SCORE_PER_QUESTION, $scope, $sce, $rootScope, $location, $sanitize, $timeout, $uibModal, $window, AlertsService, HtmlEscaperService, QuestionBackendApiService, SkillMasteryBackendApiService, UrlService, UserService, COLORS_FOR_PASS_FAIL_MODE, MAX_MASTERY_GAIN_PER_QUESTION, MAX_MASTERY_LOSS_PER_QUESTION, QUESTION_PLAYER_MODE, VIEW_HINT_PENALTY, VIEW_HINT_PENALTY_FOR_MASTERY, WRONG_ANSWER_PENALTY, WRONG_ANSWER_PENALTY_FOR_MASTERY) {
                    var ctrl = this;
                    ctrl.userIsLoggedIn = null;
                    UserService.getUserInfoAsync().then(function (userInfo) {
                        ctrl.canCreateCollections = userInfo.canCreateCollections();
                        ctrl.userIsLoggedIn = userInfo.isLoggedIn();
                    });
                    var initResults = function () {
                        $scope.resultsLoaded = false;
                        ctrl.currentQuestion = 0;
                        ctrl.totalQuestions = 0;
                        ctrl.currentProgress = 0;
                        ctrl.totalScore = 0.0;
                        ctrl.scorePerSkillMapping = {};
                        ctrl.testIsPassed = true;
                    };
                    initResults();
                    ctrl.questionPlayerConfig = ctrl.getQuestionPlayerConfig();
                    var getStaticImageUrl = function (url) {
                        return UrlInterpolationService.getStaticImageUrl(url);
                    };
                    ctrl.getActionButtonOuterClass = function (actionButtonType) {
                        var className = getClassNameForType(actionButtonType);
                        if (className) {
                            return className + 'outer';
                        }
                        return '';
                    };
                    ctrl.getActionButtonInnerClass = function (actionButtonType) {
                        var className = getClassNameForType(actionButtonType);
                        if (className) {
                            return className + 'inner';
                        }
                        return '';
                    };
                    ctrl.getActionButtonIconHtml = function (actionButtonType) {
                        var iconHtml = '';
                        if (actionButtonType === 'BOOST_SCORE') {
                            iconHtml = '<img class="action-button-icon" src="' +
                                getStaticImageUrl('/icons/rocket@2x.png') + '"/>';
                        }
                        else if (actionButtonType === 'RETRY_SESSION') {
                            iconHtml = '<i class="material-icons md-36 ' +
                                'action-button-icon">&#xE5D5</i>';
                        }
                        else if (actionButtonType === 'DASHBOARD') {
                            iconHtml = '<i class="material-icons md-36 ' +
                                'action-button-icon">&#xE88A</i>';
                        }
                        return $sce.trustAsHtml($sanitize(iconHtml));
                    };
                    ctrl.performAction = function (actionButton) {
                        if (actionButton.type === 'BOOST_SCORE') {
                            boostScoreModal();
                        }
                        else if (actionButton.url) {
                            $window.location.href = actionButton.url;
                        }
                    };
                    ctrl.showActionButtonsFooter = function () {
                        return (ctrl.questionPlayerConfig.resultActionButtons &&
                            ctrl.questionPlayerConfig.resultActionButtons.length > 0);
                    };
                    var getWorstSkillId = function () {
                        var minScore = Number.MAX_VALUE;
                        var worstSkillId = '';
                        Object.keys(ctrl.scorePerSkillMapping).forEach(function (skillId) {
                            var skillScoreData = ctrl.scorePerSkillMapping[skillId];
                            var scorePercentage = skillScoreData.score / skillScoreData.total;
                            if (scorePercentage < minScore) {
                                minScore = scorePercentage;
                                worstSkillId = skillId;
                            }
                        });
                        return worstSkillId;
                    };
                    var openConceptCardModal = function (skillIds) {
                        var skills = [];
                        skillIds.forEach(function (skillId) {
                            skills.push(ctrl.scorePerSkillMapping[skillId].description);
                        });
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/concept-card/concept-card-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance', '$window',
                                'UrlService',
                                function ($scope, $uibModalInstance, $window, UrlService) {
                                    $scope.skillIds = skillIds;
                                    $scope.skills = skills;
                                    $scope.index = 0;
                                    $scope.currentSkill = $scope.skills[$scope.index];
                                    $scope.isInTestMode = true;
                                    $scope.isLastConceptCard = function () {
                                        return $scope.index === $scope.skills.length - 1;
                                    };
                                    $scope.closeModal = function () {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                    $scope.goToNextConceptCard = function () {
                                        $scope.index++;
                                        $scope.currentSkill = $scope.skills[$scope.index];
                                    };
                                    $scope.retryTest = function () {
                                        $window.location.replace(UrlService.getPathname());
                                    };
                                }
                            ]
                        });
                    };
                    var boostScoreModal = function () {
                        var worstSkillId = getWorstSkillId();
                        openConceptCardModal([worstSkillId]);
                    };
                    var getClassNameForType = function (actionButtonType) {
                        if (actionButtonType === 'BOOST_SCORE') {
                            return 'boost-score-';
                        }
                        if (actionButtonType === 'RETRY_SESSION') {
                            return 'new-session-';
                        }
                        if (actionButtonType === 'DASHBOARD') {
                            return 'my-dashboard-';
                        }
                        return null;
                    };
                    var updateCurrentQuestion = function (currentQuestion) {
                        ctrl.currentQuestion = currentQuestion;
                        updateQuestionProgression();
                    };
                    var updateTotalQuestions = function (totalQuestions) {
                        ctrl.totalQuestions = totalQuestions;
                        updateQuestionProgression();
                    };
                    var updateQuestionProgression = function () {
                        if (getTotalQuestions() > 0) {
                            ctrl.currentProgress = (getCurrentQuestion() * 100 / getTotalQuestions());
                        }
                        else {
                            ctrl.currentProgress = 0;
                        }
                    };
                    var getCurrentQuestion = function () {
                        return ctrl.currentQuestion;
                    };
                    var getTotalQuestions = function () {
                        return ctrl.totalQuestions;
                    };
                    var isInPassOrFailMode = function () {
                        return (ctrl.questionPlayerConfig.questionPlayerMode &&
                            ctrl.questionPlayerConfig.questionPlayerMode.modeType ===
                                QUESTION_PLAYER_MODE.PASS_FAIL_MODE);
                    };
                    var createScorePerSkillMapping = function () {
                        var scorePerSkillMapping = {};
                        if (ctrl.questionPlayerConfig.skillList) {
                            for (var i = 0; i < ctrl.questionPlayerConfig.skillList.length; i++) {
                                var skillId = ctrl.questionPlayerConfig.skillList[i];
                                var description = ctrl.questionPlayerConfig.skillDescriptions[i];
                                scorePerSkillMapping[skillId] = {
                                    description: description,
                                    score: 0.0,
                                    total: 0.0
                                };
                            }
                        }
                        ctrl.scorePerSkillMapping = scorePerSkillMapping;
                    };
                    var createMasteryPerSkillMapping = function () {
                        var masteryPerSkillMapping = {};
                        if (ctrl.questionPlayerConfig.skillList) {
                            for (var i = 0; i < ctrl.questionPlayerConfig.skillList.length; i++) {
                                var skillId = ctrl.questionPlayerConfig.skillList[i];
                                masteryPerSkillMapping[skillId] = 0.0;
                            }
                        }
                        ctrl.masteryPerSkillMapping = masteryPerSkillMapping;
                    };
                    var createMasteryChangePerQuestion = function (questionData) {
                        var masteryChangePerQuestion = {};
                        for (var i = 0; i < questionData.linkedSkillIds.length; i++) {
                            var skillId = questionData.linkedSkillIds[i];
                            masteryChangePerQuestion[skillId] =
                                MAX_MASTERY_GAIN_PER_QUESTION;
                        }
                        return masteryChangePerQuestion;
                    };
                    var calculateScores = function (questionStateData) {
                        createScorePerSkillMapping();
                        $scope.resultsLoaded = false;
                        var totalQuestions = Object.keys(questionStateData).length;
                        for (var question in questionStateData) {
                            var questionData = questionStateData[question];
                            var totalHintsPenalty = 0.0;
                            var wrongAnswerPenalty = 0.0;
                            if (questionData.answers) {
                                wrongAnswerPenalty = ((questionData.answers.length - 1) * WRONG_ANSWER_PENALTY);
                            }
                            if (questionData.usedHints) {
                                totalHintsPenalty = (questionData.usedHints.length * VIEW_HINT_PENALTY);
                            }
                            var questionScore = MAX_SCORE_PER_QUESTION;
                            if (questionData.viewedSolution) {
                                questionScore = 0.0;
                            }
                            else {
                                // If questionScore goes negative, set it to 0
                                questionScore = Math.max(0, questionScore - totalHintsPenalty - wrongAnswerPenalty);
                            }
                            // Calculate total score
                            ctrl.totalScore += questionScore;
                            // Calculate scores per skill
                            if (!(questionData.linkedSkillIds)) {
                                continue;
                            }
                            for (var i = 0; i < questionData.linkedSkillIds.length; i++) {
                                var skillId = questionData.linkedSkillIds[i];
                                if (!(skillId in ctrl.scorePerSkillMapping)) {
                                    continue;
                                }
                                ctrl.scorePerSkillMapping[skillId].score += questionScore;
                                ctrl.scorePerSkillMapping[skillId].total += 1.0;
                            }
                        }
                        ctrl.totalScore = Math.round(ctrl.totalScore * 100 / totalQuestions);
                        $scope.resultsLoaded = true;
                    };
                    var getMasteryChangeForWrongAnswers = function (answers, masteryChangePerQuestion) {
                        answers.forEach(function (answer) {
                            if (!answer.isCorrect) {
                                if (answer.taggedSkillMisconceptionId) {
                                    var skillId = answer.taggedSkillMisconceptionId.split('-')[0];
                                    if (masteryChangePerQuestion.hasOwnProperty(skillId)) {
                                        masteryChangePerQuestion[skillId] -=
                                            WRONG_ANSWER_PENALTY_FOR_MASTERY;
                                    }
                                }
                                else {
                                    for (var masterySkillId in masteryChangePerQuestion) {
                                        masteryChangePerQuestion[masterySkillId] -=
                                            WRONG_ANSWER_PENALTY_FOR_MASTERY;
                                    }
                                }
                            }
                        });
                        return masteryChangePerQuestion;
                    };
                    var updateMasteryPerSkillMapping = function (masteryChangePerQuestion) {
                        for (var skillId in masteryChangePerQuestion) {
                            if (!(skillId in ctrl.masteryPerSkillMapping)) {
                                continue;
                            }
                            // Set the lowest bound of mastery change for each question.
                            ctrl.masteryPerSkillMapping[skillId] += Math.max(masteryChangePerQuestion[skillId], MAX_MASTERY_LOSS_PER_QUESTION);
                        }
                    };
                    var calculateMasteryDegrees = function (questionStateData) {
                        createMasteryPerSkillMapping();
                        for (var question in questionStateData) {
                            var questionData = questionStateData[question];
                            if (!(questionData.linkedSkillIds)) {
                                continue;
                            }
                            var masteryChangePerQuestion = createMasteryChangePerQuestion(questionData);
                            if (questionData.viewedSolution) {
                                for (var skillId in masteryChangePerQuestion) {
                                    masteryChangePerQuestion[skillId] =
                                        MAX_MASTERY_LOSS_PER_QUESTION;
                                }
                            }
                            else {
                                if (questionData.usedHints) {
                                    for (var skillId in masteryChangePerQuestion) {
                                        masteryChangePerQuestion[skillId] -= (questionData.usedHints.length *
                                            VIEW_HINT_PENALTY_FOR_MASTERY);
                                    }
                                }
                                if (questionData.answers) {
                                    masteryChangePerQuestion = getMasteryChangeForWrongAnswers(questionData.answers, masteryChangePerQuestion);
                                }
                            }
                            updateMasteryPerSkillMapping(masteryChangePerQuestion);
                        }
                        SkillMasteryBackendApiService.updateSkillMasteryDegrees(ctrl.masteryPerSkillMapping);
                    };
                    var hasUserPassedTest = function () {
                        var testIsPassed = true;
                        var failedSkillIds = [];
                        if (isInPassOrFailMode()) {
                            Object.keys(ctrl.scorePerSkillMapping).forEach(function (skillId) {
                                var correctionRate = ctrl.scorePerSkillMapping[skillId].score /
                                    ctrl.scorePerSkillMapping[skillId].total;
                                if (correctionRate <
                                    ctrl.questionPlayerConfig.questionPlayerMode.passCutoff) {
                                    testIsPassed = false;
                                    failedSkillIds.push(skillId);
                                }
                            });
                        }
                        if (!testIsPassed) {
                            ctrl.questionPlayerConfig.resultActionButtons = [];
                            ctrl.failedSkillIds = failedSkillIds;
                        }
                        return testIsPassed;
                    };
                    ctrl.getScorePercentage = function (scorePerSkill) {
                        return scorePerSkill.score / scorePerSkill.total * 100;
                    };
                    ctrl.getColorForScore = function (scorePerSkill) {
                        if (!isInPassOrFailMode()) {
                            return COLORS_FOR_PASS_FAIL_MODE.PASSED_COLOR;
                        }
                        var correctionRate = scorePerSkill.score / scorePerSkill.total;
                        if (correctionRate >=
                            ctrl.questionPlayerConfig.questionPlayerMode.passCutoff) {
                            return COLORS_FOR_PASS_FAIL_MODE.PASSED_COLOR;
                        }
                        else {
                            return COLORS_FOR_PASS_FAIL_MODE.FAILED_COLOR;
                        }
                    };
                    ctrl.reviewConceptCardAndRetryTest = function () {
                        if (!ctrl.failedSkillIds || ctrl.failedSkillIds.length === 0) {
                            throw Error('No failed skills');
                        }
                        openConceptCardModal(ctrl.failedSkillIds);
                    };
                    ctrl.openSkillMasteryModal = function (skillId) {
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/question-directives/question-player/' +
                                'skill-mastery-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance',
                                function ($scope, $uibModalInstance) {
                                    $scope.skillId = skillId;
                                    $scope.userIsLoggedIn = ctrl.userIsLoggedIn;
                                    if ($scope.userIsLoggedIn) {
                                        $scope.masteryChange = ctrl.masteryPerSkillMapping[skillId];
                                    }
                                    $scope.closeModal = function () {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                    $scope.openConceptCardModal = function (skillId) {
                                        openConceptCardModal([skillId]);
                                    };
                                }
                            ]
                        });
                    };
                    $rootScope.$on('currentQuestionChanged', function (event, result) {
                        updateCurrentQuestion(result + 1);
                    });
                    $rootScope.$on('totalQuestionsReceived', function (event, result) {
                        updateTotalQuestions(result);
                    });
                    $rootScope.$on('questionSessionCompleted', function (event, result) {
                        $location.hash(HASH_PARAM +
                            encodeURIComponent(JSON.stringify(result)));
                    });
                    $scope.$on('$locationChangeSuccess', function (event) {
                        var hashContent = $location.hash();
                        if (!hashContent || hashContent.indexOf(HASH_PARAM) === -1) {
                            return;
                        }
                        var resultHashString = decodeURIComponent(hashContent.substring(hashContent.indexOf(HASH_PARAM) + HASH_PARAM.length));
                        if (resultHashString) {
                            initResults();
                            var questionStateData = JSON.parse(resultHashString);
                            calculateScores(questionStateData);
                            if (ctrl.userIsLoggedIn) {
                                calculateMasteryDegrees(questionStateData);
                            }
                            ctrl.testIsPassed = hasUserPassedTest();
                        }
                    });
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/question-directives/question-player/services/question-player-state.service.ts":
/*!**************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/question-directives/question-player/services/question-player-state.service.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A service that maintains a record of the users progression
 * in the test session.
 */
angular.module('oppia').factory('QuestionPlayerStateService', [
    function () {
        var questionPlayerState = {};
        var getCurrentTime = function () {
            return new Date().getTime();
        };
        var createNewQuestionPlayerState = function (questionId, linkedSkillIds) {
            questionPlayerState[questionId] = {
                linkedSkillIds: linkedSkillIds,
                answers: [],
                usedHints: []
            };
        };
        var _hintUsed = function (question) {
            var questionId = question.getId();
            if (!questionPlayerState[questionId]) {
                createNewQuestionPlayerState(questionId, question.getLinkedSkillIds());
            }
            questionPlayerState[questionId].usedHints.push({ timestamp: getCurrentTime() });
        };
        var _solutionViewed = function (question) {
            var questionId = question.getId();
            if (!questionPlayerState[questionId]) {
                createNewQuestionPlayerState(questionId, question.getLinkedSkillIds());
            }
            questionPlayerState[questionId].viewedSolution = {
                timestamp: getCurrentTime()
            };
        };
        var _answerSubmitted = function (question, isCorrect, taggedSkillMisconceptionId) {
            var questionId = question.getId();
            if (!questionPlayerState[questionId]) {
                createNewQuestionPlayerState(questionId, question.getLinkedSkillIds());
            }
            // Don't store a correct answer in the case where
            // the learner viewed the solution for this question.
            if (isCorrect && questionPlayerState[questionId].viewedSolution) {
                return;
            }
            questionPlayerState[questionId].answers.push({ isCorrect: isCorrect,
                timestamp: getCurrentTime(),
                taggedSkillMisconceptionId: taggedSkillMisconceptionId
            });
        };
        return {
            hintUsed: function (question) {
                _hintUsed(question);
            },
            solutionViewed: function (question) {
                _solutionViewed(question);
            },
            answerSubmitted: function (question, isCorrect, taggedSkillMisconceptionId) {
                _answerSubmitted(question, isCorrect, taggedSkillMisconceptionId);
            },
            getQuestionPlayerStateData: function () {
                return questionPlayerState;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/ratings/rating-computation/rating-computation.service.ts":
/*!*****************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/ratings/rating-computation/rating-computation.service.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service for computing the average rating.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var RatingComputationService = /** @class */ (function () {
    function RatingComputationService() {
    }
    RatingComputationService_1 = RatingComputationService;
    RatingComputationService.areRatingsShown = function (ratingFrequencies) {
        var MINIMUM_ACCEPTABLE_NUMBER_OF_RATINGS = 1;
        var totalNumber = 0;
        for (var value in ratingFrequencies) {
            totalNumber += ratingFrequencies[value];
        }
        return totalNumber >= MINIMUM_ACCEPTABLE_NUMBER_OF_RATINGS;
    };
    RatingComputationService.prototype.computeAverageRating = function (ratingFrequencies) {
        if (!RatingComputationService_1.areRatingsShown(ratingFrequencies)) {
            return undefined;
        }
        else {
            var totalNumber = 0;
            var totalValue = 0.0;
            for (var value in ratingFrequencies) {
                totalValue += parseInt(value) * ratingFrequencies[value];
                totalNumber += ratingFrequencies[value];
            }
            if (totalNumber === 0) {
                return undefined;
            }
            return totalValue / totalNumber;
        }
    };
    var RatingComputationService_1;
    RatingComputationService = RatingComputationService_1 = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], RatingComputationService);
    return RatingComputationService;
}());
exports.RatingComputationService = RatingComputationService;
angular.module('oppia').factory('RatingComputationService', static_1.downgradeInjectable(RatingComputationService));


/***/ }),

/***/ "./core/templates/dev/head/components/ratings/rating-display/rating-display.directive.ts":
/*!***********************************************************************************************!*\
  !*** ./core/templates/dev/head/components/ratings/rating-display/rating-display.directive.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for displaying summary rating information.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('ratingDisplay', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            // This will display a star-rating based on the given data. The attributes
            // passed in are as follows:
            //  - isEditable: true or false; whether the rating is user-editable.
            //  - onEdit: should be supplied iff isEditable is true, and be a function
            //    that will be supplied with the new rating when the rating is
            //    changed.
            //  - ratingValue: an integer 1-5 giving the rating
            restrict: 'E',
            scope: {
                isEditable: '=',
                onEdit: '=',
                ratingValue: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/ratings/rating-display/rating-display.directive.html'),
            link: function (scope, element) {
                // This is needed in order for the scope to be retrievable during Karma
                // unit testing. See http://stackoverflow.com/a/29833832 for more
                // details.
                element[0].getControllerScope = function () {
                    return scope;
                };
            },
            controller: ['$scope', function ($scope) {
                    var POSSIBLE_RATINGS = [1, 2, 3, 4, 5];
                    $scope.stars = POSSIBLE_RATINGS.map(function (starValue) {
                        return {
                            cssClass: 'far fa-star',
                            value: starValue
                        };
                    });
                    var STATUS_ACTIVE = 'active';
                    var STATUS_INACTIVE = 'inactive';
                    var STATUS_RATING_SET = 'rating_set';
                    $scope.status = STATUS_INACTIVE;
                    var displayValue = function (ratingValue) {
                        for (var i = 0; i < $scope.stars.length; i++) {
                            $scope.stars[i].cssClass = (ratingValue === undefined ? 'far fa-star' :
                                ratingValue < $scope.stars[i].value - 0.75 ? 'far fa-star' :
                                    ratingValue < $scope.stars[i].value - 0.25 ? 'far fa-star-half' :
                                        'fas fa-star');
                            if ($scope.status === STATUS_ACTIVE &&
                                ratingValue >= $scope.stars[i].value) {
                                $scope.stars[i].cssClass += ' oppia-rating-star-active';
                            }
                        }
                    };
                    displayValue($scope.ratingValue);
                    $scope.$watch('ratingValue', function () {
                        displayValue($scope.ratingValue);
                    });
                    $scope.clickStar = function (starValue) {
                        if ($scope.isEditable && $scope.status === STATUS_ACTIVE) {
                            $scope.status = STATUS_RATING_SET;
                            $scope.ratingValue = starValue;
                            displayValue(starValue);
                            $scope.onEdit(starValue);
                        }
                    };
                    $scope.enterStar = function (starValue) {
                        var starsHaveNotBeenClicked = ($scope.status === STATUS_ACTIVE ||
                            $scope.status === STATUS_INACTIVE);
                        if ($scope.isEditable && starsHaveNotBeenClicked) {
                            $scope.status = STATUS_ACTIVE;
                            displayValue(starValue);
                        }
                    };
                    $scope.leaveArea = function () {
                        $scope.status = STATUS_INACTIVE;
                        displayValue($scope.ratingValue);
                    };
                    $scope.getCursorStyle = function () {
                        return 'cursor: ' + ($scope.isEditable ? 'pointer' : 'auto');
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/score-ring/score-ring.directive.ts":
/*!*******************************************************************************!*\
  !*** ./core/templates/dev/head/components/score-ring/score-ring.directive.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the animated score ring.
 */
angular.module('oppia').directive('scoreRing', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getScore: '&score',
                testIsPassed: '&testIsPassed'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/score-ring/score-ring.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', '$timeout', '$window', 'COLORS_FOR_PASS_FAIL_MODE',
                function ($scope, $timeout, $window, COLORS_FOR_PASS_FAIL_MODE) {
                    var ctrl = this;
                    var circle = (document.querySelector('.score-ring-circle'));
                    var radius = circle.r.baseVal.value;
                    var circumference = (radius * 2 * Math.PI);
                    var setScore = function (percent) {
                        var offset = circumference - percent / 100 * circumference;
                        circle.style.strokeDashoffset = offset.toString();
                    };
                    circle.style.strokeDasharray = circumference + " " + circumference;
                    circle.style.strokeDashoffset = circumference.toString();
                    $scope.$watch(function () {
                        return ctrl.getScore();
                    }, function (newScore) {
                        if (newScore && newScore > 0) {
                            setScore(newScore);
                        }
                    });
                    ctrl.getScoreRingColor = function () {
                        if (ctrl.testIsPassed()) {
                            return COLORS_FOR_PASS_FAIL_MODE.PASSED_COLOR;
                        }
                        else {
                            return COLORS_FOR_PASS_FAIL_MODE.FAILED_COLOR;
                        }
                    };
                    ctrl.getScoreOuterRingColor = function () {
                        if (ctrl.testIsPassed()) {
                            // return color green when passed.
                            return COLORS_FOR_PASS_FAIL_MODE.PASSED_COLOR_OUTER;
                        }
                        else {
                            // return color orange when failed.
                            return COLORS_FOR_PASS_FAIL_MODE.FAILED_COLOR_OUTER;
                        }
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/skill-mastery/skill-mastery.directive.ts":
/*!*************************************************************************************!*\
  !*** ./core/templates/dev/head/components/skill-mastery/skill-mastery.directive.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the skill mastery viewer.
 */
__webpack_require__(/*! components/skills-mastery-list/skills-mastery-list.constants.ajs.ts */ "./core/templates/dev/head/components/skills-mastery-list/skills-mastery-list.constants.ajs.ts");
__webpack_require__(/*! domain/skill/SkillMasteryBackendApiService.ts */ "./core/templates/dev/head/domain/skill/SkillMasteryBackendApiService.ts");
angular.module('oppia').directive('skillMasteryViewer', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                skillId: '=',
                masteryChange: '='
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/skill-mastery/skill-mastery.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$scope', 'SkillMasteryBackendApiService',
                'MASTERY_CUTOFF',
                function ($scope, SkillMasteryBackendApiService, MASTERY_CUTOFF) {
                    var ctrl = this;
                    ctrl.skillMasteryDegree = 0.0;
                    SkillMasteryBackendApiService.fetchSkillMasteryDegrees([ctrl.skillId]).then(function (degreesOfMastery) {
                        ctrl.skillMasteryDegree = degreesOfMastery[ctrl.skillId];
                    });
                    ctrl.getSkillMasteryPercentage = function () {
                        return Math.round(ctrl.skillMasteryDegree * 100);
                    };
                    ctrl.getMasteryChangePercentage = function () {
                        if (ctrl.masteryChange >= 0) {
                            return '+' + Math.round(ctrl.masteryChange * 100);
                        }
                        else {
                            return Math.round(ctrl.masteryChange * 100);
                        }
                    };
                    ctrl.getLearningTips = function () {
                        if (ctrl.masteryChange > 0) {
                            if (ctrl.skillMasteryDegree >= MASTERY_CUTOFF.GOOD_CUTOFF) {
                                return 'You have mastered this skill very well! ' +
                                    'You can work on other skills or learn new skills.';
                            }
                            else {
                                return 'You have made progress! You can increase your ' +
                                    'mastery level by doing more practice sessions.';
                            }
                        }
                        else {
                            return 'Looks like your mastery of this skill has dropped. ' +
                                'To improve it, try reviewing the concept card below and ' +
                                'then practicing more questions for the skill.';
                        }
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/skills-mastery-list/skills-mastery-list.constants.ajs.ts":
/*!*****************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/skills-mastery-list/skills-mastery-list.constants.ajs.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for the skills mastery list.
 */
var skills_mastery_list_constants_1 = __webpack_require__(/*! components/skills-mastery-list/skills-mastery-list.constants */ "./core/templates/dev/head/components/skills-mastery-list/skills-mastery-list.constants.ts");
angular.module('oppia').constant('MASTERY_CUTOFF', skills_mastery_list_constants_1.SkillMasteryListConstants.MASTERY_CUTOFF);
angular.module('oppia').constant('MASTERY_COLORS', skills_mastery_list_constants_1.SkillMasteryListConstants.MASTERY_COLORS);


/***/ }),

/***/ "./core/templates/dev/head/components/skills-mastery-list/skills-mastery-list.constants.ts":
/*!*************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/skills-mastery-list/skills-mastery-list.constants.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for the skills mastery list.
 */
var SkillMasteryListConstants = /** @class */ (function () {
    function SkillMasteryListConstants() {
    }
    SkillMasteryListConstants.MASTERY_CUTOFF = {
        GOOD_CUTOFF: 0.7,
        MEDIUM_CUTOFF: 0.4
    };
    SkillMasteryListConstants.MASTERY_COLORS = {
        // color green
        GOOD_MASTERY_COLOR: 'rgb(0, 150, 136)',
        // color orange
        MEDIUM_MASTERY_COLOR: 'rgb(217, 92, 12)',
        // color red
        BAD_MASTERY_COLOR: 'rgb(201, 80, 66)'
    };
    return SkillMasteryListConstants;
}());
exports.SkillMasteryListConstants = SkillMasteryListConstants;


/***/ }),

/***/ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-editor.service.ts":
/*!******************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-editor.service.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview A service that maintains a record of the objects exclusive to
 * a state.
 */
var cloneDeep_1 = __importDefault(__webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js"));
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var solution_validity_service_1 = __webpack_require__(/*! pages/exploration-editor-page/editor-tab/services/solution-validity.service */ "./core/templates/dev/head/pages/exploration-editor-page/editor-tab/services/solution-validity.service.ts");
/* eslint-enable max-len */
var StateEditorService = /** @class */ (function () {
    function StateEditorService(solutionValidityService) {
        this.solutionValidityService = solutionValidityService;
        this.activeStateName = null;
        this.stateNames = [];
        this.correctnessFeedbackEnabled = null;
        this.inQuestionMode = null;
        // Currently, the only place where this is used in the state editor
        // is in solution verification. So, once the interaction is set in this
        // service, the given solutions would be automatically verified for the set
        // interaction.
        // TODO(#7165): Replace 'any' with the exact type. This has been kept as
        // 'any' because the return type is a interaction domain object which can be
        // typed once InteractionObjectFactory is upgraded.
        this.interaction = null;
        this.misconceptionsBySkill = {};
        this.explorationIsWhitelisted = false;
        this.solicitAnswerDetails = null;
    }
    StateEditorService.prototype.getActiveStateName = function () {
        return this.activeStateName;
    };
    StateEditorService.prototype.setActiveStateName = function (newActiveStateName) {
        if (newActiveStateName === '' || newActiveStateName === null) {
            console.error('Invalid active state name: ' + newActiveStateName);
            return;
        }
        this.activeStateName = newActiveStateName;
    };
    StateEditorService.prototype.isExplorationWhitelisted = function () {
        return this.explorationIsWhitelisted;
    };
    StateEditorService.prototype.updateExplorationWhitelistedStatus = function (value) {
        this.explorationIsWhitelisted = value;
    };
    StateEditorService.prototype.setMisconceptionsBySkill = function (newMisconceptionsBySkill) {
        this.misconceptionsBySkill = newMisconceptionsBySkill;
    };
    StateEditorService.prototype.getMisconceptionsBySkill = function () {
        return this.misconceptionsBySkill;
    };
    StateEditorService.prototype.setInteraction = function (newInteraction) {
        this.interaction = newInteraction;
    };
    StateEditorService.prototype.setInteractionId = function (newId) {
        this.interaction.setId(newId);
    };
    StateEditorService.prototype.setInteractionAnswerGroups = function (newAnswerGroups) {
        this.interaction.setAnswerGroups(newAnswerGroups);
    };
    StateEditorService.prototype.setInteractionDefaultOutcome = function (newOutcome) {
        this.interaction.setDefaultOutcome(newOutcome);
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'newArgs' is a dict with underscore_cased keys which
    // give tslint errors against underscore_casing in favor of camelCasing.
    StateEditorService.prototype.setInteractionCustomizationArgs = function (newArgs) {
        this.interaction.setCustomizationArgs(newArgs);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'solution' is a solution domain object which can be typed
    // once SolutionObjectFactory is upgraded.
    StateEditorService.prototype.setInteractionSolution = function (solution) {
        this.interaction.setSolution(solution);
    };
    StateEditorService.prototype.setInteractionHints = function (hints) {
        this.interaction.setHints(hints);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a interaction domain object which can be
    // typed once InteractionObjectFactory is upgraded.
    StateEditorService.prototype.getInteraction = function () {
        return cloneDeep_1.default(this.interaction);
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    StateEditorService.prototype.getAnswerChoices = function (interactionId, customizationArgs) {
        if (!interactionId) {
            return null;
        }
        // Special cases for multiple choice input and image click input.
        if (interactionId === 'MultipleChoiceInput') {
            return customizationArgs.choices.value.map(function (val, ind) {
                return {
                    val: ind,
                    label: val
                };
            });
        }
        else if (interactionId === 'ImageClickInput') {
            var _answerChoices = [];
            var imageWithRegions = customizationArgs.imageAndRegions.value;
            for (var j = 0; j < imageWithRegions.labeledRegions.length; j++) {
                _answerChoices.push({
                    val: imageWithRegions.labeledRegions[j].label,
                    label: imageWithRegions.labeledRegions[j].label
                });
            }
            return _answerChoices;
        }
        else if (interactionId === 'ItemSelectionInput' ||
            interactionId === 'DragAndDropSortInput') {
            return customizationArgs.choices.value.map(function (val) {
                return {
                    val: val,
                    label: val
                };
            });
        }
        else {
            return null;
        }
    };
    StateEditorService.prototype.setInQuestionMode = function (newModeValue) {
        this.inQuestionMode = newModeValue;
    };
    StateEditorService.prototype.isInQuestionMode = function () {
        return this.inQuestionMode;
    };
    StateEditorService.prototype.setCorrectnessFeedbackEnabled = function (newCorrectnessFeedbackEnabled) {
        this.correctnessFeedbackEnabled = newCorrectnessFeedbackEnabled;
    };
    StateEditorService.prototype.getCorrectnessFeedbackEnabled = function () {
        return this.correctnessFeedbackEnabled;
    };
    StateEditorService.prototype.setSolicitAnswerDetails = function (newSolicitAnswerDetails) {
        this.solicitAnswerDetails = newSolicitAnswerDetails;
    };
    StateEditorService.prototype.getSolicitAnswerDetails = function () {
        return this.solicitAnswerDetails;
    };
    StateEditorService.prototype.setStateNames = function (newStateNames) {
        this.stateNames = newStateNames;
    };
    StateEditorService.prototype.getStateNames = function () {
        return this.stateNames;
    };
    StateEditorService.prototype.isCurrentSolutionValid = function () {
        return this.solutionValidityService.isSolutionValid(this.activeStateName);
    };
    StateEditorService.prototype.deleteCurrentSolutionValidity = function () {
        this.solutionValidityService.deleteSolutionValidity(this.activeStateName);
    };
    var _a;
    StateEditorService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof solution_validity_service_1.SolutionValidityService !== "undefined" && solution_validity_service_1.SolutionValidityService) === "function" ? _a : Object])
    ], StateEditorService);
    return StateEditorService;
}());
exports.StateEditorService = StateEditorService;
angular.module('oppia').factory('StateEditorService', static_1.downgradeInjectable(StateEditorService));


/***/ }),

/***/ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-interaction-id.service.ts":
/*!**************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-interaction-id.service.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A data service that stores the current interaction id.
 */
// TODO(sll): Add validation.
angular.module('oppia').factory('StateInteractionIdService', [
    'StatePropertyService', function (StatePropertyService) {
        var child = Object.create(StatePropertyService);
        child.setterMethodKey = 'saveInteractionId';
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-property.service.ts":
/*!********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-property.service.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Standalone services for the general state editor page.
 */
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('oppia').factory('StatePropertyService', [
    'AlertsService',
    function (AlertsService) {
        // Public base API for data services corresponding to state properties
        // (interaction id, content, etc.)
        // WARNING: This should be initialized only in the context of the state
        // editor, and every time the state is loaded, so that proper behavior is
        // maintained if e.g. the state is renamed.
        return {
            init: function (stateName, value) {
                if (this.setterMethodKey === null) {
                    throw 'State property setter method key cannot be null.';
                }
                // The name of the state.
                this.stateName = stateName;
                // The current value of the property (which may not have been saved to
                // the frontend yet). In general, this will be bound directly to the UI.
                this.displayed = angular.copy(value);
                // The previous (saved-in-the-frontend) value of the property. Here,
                // 'saved' means that this is the latest value of the property as
                // determined by the frontend change list.
                this.savedMemento = angular.copy(value);
            },
            // Returns whether the current value has changed from the memento.
            hasChanged: function () {
                return !angular.equals(this.savedMemento, this.displayed);
            },
            // The name of the setter method in ExplorationStatesService for this
            // property. THIS MUST BE SPECIFIED BY SUBCLASSES.
            setterMethodKey: null,
            // Transforms the given value into a normalized form. THIS CAN BE
            // OVERRIDDEN BY SUBCLASSES. The default behavior is to do nothing.
            _normalize: function (value) {
                return value;
            },
            // Validates the given value and returns a boolean stating whether it
            // is valid or not. THIS CAN BE OVERRIDDEN BY SUBCLASSES. The default
            // behavior is to always return true.
            _isValid: function (value) {
                return true;
            },
            // Updates the memento to the displayed value.
            saveDisplayedValue: function () {
                if (this.setterMethodKey === null) {
                    throw 'State property setter method key cannot be null.';
                }
                this.displayed = this._normalize(this.displayed);
                if (!this._isValid(this.displayed) || !this.hasChanged()) {
                    this.restoreFromMemento();
                    return;
                }
                if (angular.equals(this.displayed, this.savedMemento)) {
                    return;
                }
                AlertsService.clearWarnings();
                this.savedMemento = angular.copy(this.displayed);
            },
            // Reverts the displayed value to the saved memento.
            restoreFromMemento: function () {
                this.displayed = angular.copy(this.savedMemento);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ajs.ts":
/*!**************************************************************************************************!*\
  !*** ./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ajs.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for summary tile for collections.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var collection_summary_tile_constants_1 = __webpack_require__(/*! components/summary-tile/collection-summary-tile.constants */ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ts");
angular.module('oppia').constant('COLLECTION_VIEWER_URL', collection_summary_tile_constants_1.CollectionSummaryTileConstants.COLLECTION_VIEWER_URL);
angular.module('oppia').constant('COLLECTION_EDITOR_URL', collection_summary_tile_constants_1.CollectionSummaryTileConstants.COLLECTION_EDITOR_URL);


/***/ }),

/***/ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ts":
/*!**********************************************************************************************!*\
  !*** ./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for summary tile for collections.
 */
var CollectionSummaryTileConstants = /** @class */ (function () {
    function CollectionSummaryTileConstants() {
    }
    CollectionSummaryTileConstants.COLLECTION_VIEWER_URL = '/collection/<collection_id>';
    CollectionSummaryTileConstants.COLLECTION_EDITOR_URL = '/collection_editor/create/<collection_id>';
    return CollectionSummaryTileConstants;
}());
exports.CollectionSummaryTileConstants = CollectionSummaryTileConstants;


/***/ }),

/***/ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.directive.ts":
/*!**********************************************************************************************!*\
  !*** ./core/templates/dev/head/components/summary-tile/collection-summary-tile.directive.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Summary tile for collections.
 */
__webpack_require__(/*! domain/learner_dashboard/LearnerDashboardIconsDirective.ts */ "./core/templates/dev/head/domain/learner_dashboard/LearnerDashboardIconsDirective.ts");
__webpack_require__(/*! filters/string-utility-filters/truncate-and-capitalize.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-and-capitalize.filter.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/DateTimeFormatService.ts */ "./core/templates/dev/head/services/DateTimeFormatService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! components/summary-tile/collection-summary-tile.constants.ajs.ts */ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.constants.ajs.ts");
angular.module('oppia').directive('collectionSummaryTile', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getCollectionId: '&collectionId',
                getCollectionTitle: '&collectionTitle',
                getObjective: '&objective',
                getNodeCount: '&nodeCount',
                getLastUpdatedMsec: '&lastUpdatedMsec',
                getThumbnailIconUrl: '&thumbnailIconUrl',
                getThumbnailBgColor: '&thumbnailBgColor',
                isLinkedToEditorPage: '=?isLinkedToEditorPage',
                getCategory: '&category',
                isPlaylistTile: '&isPlaylistTile',
                showLearnerDashboardIconsIfPossible: ('&showLearnerDashboardIconsIfPossible'),
                isContainerNarrow: '&containerIsNarrow',
                isOwnedByCurrentUser: '&activityIsOwnedByCurrentUser',
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/summary-tile/collection-summary-tile.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                'DateTimeFormatService', 'UserService',
                'ACTIVITY_TYPE_COLLECTION', 'COLLECTION_VIEWER_URL',
                'COLLECTION_EDITOR_URL', function (DateTimeFormatService, UserService, ACTIVITY_TYPE_COLLECTION, COLLECTION_VIEWER_URL, COLLECTION_EDITOR_URL) {
                    var ctrl = this;
                    ctrl.userIsLoggedIn = null;
                    UserService.getUserInfoAsync().then(function (userInfo) {
                        ctrl.userIsLoggedIn = userInfo.isLoggedIn();
                    });
                    ctrl.DEFAULT_EMPTY_TITLE = 'Untitled';
                    ctrl.ACTIVITY_TYPE_COLLECTION = ACTIVITY_TYPE_COLLECTION;
                    ctrl.getLastUpdatedDatetime = function () {
                        return DateTimeFormatService.getLocaleAbbreviatedDatetimeString(ctrl.getLastUpdatedMsec());
                    };
                    ctrl.getCollectionLink = function () {
                        var targetUrl = (ctrl.isLinkedToEditorPage ?
                            COLLECTION_EDITOR_URL : COLLECTION_VIEWER_URL);
                        return UrlInterpolationService.interpolateUrl(targetUrl, {
                            collection_id: ctrl.getCollectionId()
                        });
                    };
                    ctrl.getCompleteThumbnailIconUrl = function () {
                        return UrlInterpolationService.getStaticImageUrl(ctrl.getThumbnailIconUrl());
                    };
                    ctrl.getStaticImageUrl = function (url) {
                        return UrlInterpolationService.getStaticImageUrl(url);
                    };
                    ctrl.setHoverState = function (hoverState) {
                        ctrl.collectionIsCurrentlyHoveredOver = hoverState;
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/components/summary-tile/exploration-summary-tile.directive.ts":
/*!***********************************************************************************************!*\
  !*** ./core/templates/dev/head/components/summary-tile/exploration-summary-tile.directive.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Component for an exploration summary tile.
 */
__webpack_require__(/*! components/profile-link-directives/circular-image.directive.ts */ "./core/templates/dev/head/components/profile-link-directives/circular-image.directive.ts");
__webpack_require__(/*! domain/learner_dashboard/LearnerDashboardIconsDirective.ts */ "./core/templates/dev/head/domain/learner_dashboard/LearnerDashboardIconsDirective.ts");
__webpack_require__(/*! filters/summarize-nonnegative-number.filter.ts */ "./core/templates/dev/head/filters/summarize-nonnegative-number.filter.ts");
__webpack_require__(/*! filters/string-utility-filters/truncate-and-capitalize.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-and-capitalize.filter.ts");
__webpack_require__(/*! filters/string-utility-filters/truncate.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate.filter.ts");
__webpack_require__(/*! components/ratings/rating-computation/rating-computation.service.ts */ "./core/templates/dev/head/components/ratings/rating-computation/rating-computation.service.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/DateTimeFormatService.ts */ "./core/templates/dev/head/services/DateTimeFormatService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
angular.module('oppia').directive('explorationSummaryTile', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                getCollectionId: '&collectionId',
                getExplorationId: '&explorationId',
                getExplorationTitle: '&explorationTitle',
                getStoryNodeId: '&nodeId',
                getLastUpdatedMsec: '&lastUpdatedMsec',
                getNumViews: '&numViews',
                getObjective: '&objective',
                getCategory: '&category',
                getRatings: '&ratings',
                getContributorsSummary: '&contributorsSummary',
                getThumbnailIconUrl: '&thumbnailIconUrl',
                getThumbnailBgColor: '&thumbnailBgColor',
                // If this is not null, the new exploration opens in a new window when
                // the summary tile is clicked.
                openInNewWindow: '@openInNewWindow',
                isCommunityOwned: '&isCommunityOwned',
                // If this is not undefined, collection preview tile for mobile
                // will be displayed.
                isCollectionPreviewTile: '@isCollectionPreviewTile',
                // If the screen width is below the threshold defined here, the mobile
                // version of the summary tile is displayed. This attribute is optional:
                // if it is not specified, it is treated as 0, which means that the
                // desktop version of the summary tile is always displayed.
                mobileCutoffPx: '@mobileCutoffPx',
                isPlaylistTile: '&isPlaylistTile',
                getParentExplorationIds: '&parentExplorationIds',
                showLearnerDashboardIconsIfPossible: ('&showLearnerDashboardIconsIfPossible'),
                isContainerNarrow: '&containerIsNarrow',
                isOwnedByCurrentUser: '&activityIsOwnedByCurrentUser',
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/components/summary-tile/exploration-summary-tile.directive.html'),
            link: function (scope, element) {
                element.find('.exploration-summary-avatars').on('mouseenter', function () {
                    element.find('.mask').attr('class', 'exploration-summary-tile-mask mask');
                    // As animation duration time may be 400ms, .stop(true) is used to
                    // prevent the effects queue falling behind the mouse movement.
                    // .hide(1) and .show(1) used to place the animation in the effects
                    // queue.
                    element.find('.avatars-num-minus-one').stop(true).hide(1, function () {
                        element.find('.all-avatars').stop(true).slideDown();
                    });
                });
                element.find('.exploration-summary-avatars').on('mouseleave', function () {
                    element.find('.mask').attr('class', 'top-section-mask mask');
                    element.find('.all-avatars').stop(true).slideUp(400, function () {
                        element.find('.avatars-num-minus-one').stop(true).show(1);
                    });
                });
            },
            controller: [
                '$scope', '$http', '$window', 'DateTimeFormatService',
                'RatingComputationService', 'UrlService', 'UserService',
                'WindowDimensionsService', 'ACTIVITY_TYPE_EXPLORATION',
                function ($scope, $http, $window, DateTimeFormatService, RatingComputationService, UrlService, UserService, WindowDimensionsService, ACTIVITY_TYPE_EXPLORATION) {
                    $scope.userIsLoggedIn = null;
                    UserService.getUserInfoAsync().then(function (userInfo) {
                        $scope.userIsLoggedIn = userInfo.isLoggedIn();
                    });
                    $scope.ACTIVITY_TYPE_EXPLORATION = ACTIVITY_TYPE_EXPLORATION;
                    var contributorsSummary = $scope.getContributorsSummary() || {};
                    $scope.contributors = Object.keys(contributorsSummary).sort(function (contributorUsername1, contributorUsername2) {
                        var commitsOfContributor1 = contributorsSummary[contributorUsername1].num_commits;
                        var commitsOfContributor2 = contributorsSummary[contributorUsername2].num_commits;
                        return commitsOfContributor2 - commitsOfContributor1;
                    });
                    $scope.isRefresherExploration = false;
                    if ($scope.getParentExplorationIds()) {
                        $scope.isRefresherExploration = ($scope.getParentExplorationIds().length > 0);
                    }
                    $scope.avatarsList = [];
                    $scope.MAX_AVATARS_TO_DISPLAY = 5;
                    $scope.setHoverState = function (hoverState) {
                        $scope.explorationIsCurrentlyHoveredOver = hoverState;
                    };
                    $scope.loadParentExploration = function () {
                        $window.location.href = $scope.getExplorationLink();
                    };
                    $scope.getAverageRating = function () {
                        if (!$scope.getRatings()) {
                            return null;
                        }
                        return RatingComputationService.computeAverageRating($scope.getRatings());
                    };
                    $scope.getLastUpdatedDatetime = function () {
                        if (!$scope.getLastUpdatedMsec()) {
                            return null;
                        }
                        return DateTimeFormatService.getLocaleAbbreviatedDatetimeString($scope.getLastUpdatedMsec());
                    };
                    $scope.getExplorationLink = function () {
                        if (!$scope.getExplorationId()) {
                            return '#';
                        }
                        else {
                            var result = '/explore/' + $scope.getExplorationId();
                            var urlParams = UrlService.getUrlParams();
                            var parentExplorationIds = $scope.getParentExplorationIds();
                            var collectionIdToAdd = $scope.getCollectionId();
                            var storyIdToAdd = null;
                            var storyNodeIdToAdd = null;
                            // Replace the collection ID with the one in the URL if it exists
                            // in urlParams.
                            if (parentExplorationIds &&
                                urlParams.hasOwnProperty('collection_id')) {
                                collectionIdToAdd = urlParams.collection_id;
                            }
                            else if (UrlService.getPathname().match(/\/story\/(\w|-){12}/g) &&
                                $scope.getStoryNodeId()) {
                                storyIdToAdd = UrlService.getStoryIdFromViewerUrl();
                                storyNodeIdToAdd = $scope.getStoryNodeId();
                            }
                            if (collectionIdToAdd) {
                                result = UrlService.addField(result, 'collection_id', collectionIdToAdd);
                            }
                            if (parentExplorationIds) {
                                for (var i = 0; i < parentExplorationIds.length - 1; i++) {
                                    result = UrlService.addField(result, 'parent', parentExplorationIds[i]);
                                }
                            }
                            if (storyIdToAdd && storyNodeIdToAdd) {
                                result = UrlService.addField(result, 'story_id', storyIdToAdd);
                                result = UrlService.addField(result, 'node_id', storyNodeIdToAdd);
                            }
                            return result;
                        }
                    };
                    if (!$scope.mobileCutoffPx) {
                        $scope.mobileCutoffPx = 0;
                    }
                    $scope.isWindowLarge = (WindowDimensionsService.getWidth() >= $scope.mobileCutoffPx);
                    WindowDimensionsService.registerOnResizeHook(function () {
                        $scope.isWindowLarge = (WindowDimensionsService.getWidth() >= $scope.mobileCutoffPx);
                        $scope.$apply();
                    });
                    $scope.getCompleteThumbnailIconUrl = function () {
                        return UrlInterpolationService.getStaticImageUrl($scope.getThumbnailIconUrl());
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/classifier/AnswerClassificationResultObjectFactory.ts":
/*!**********************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/classifier/AnswerClassificationResultObjectFactory.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of answer
 *     Classification Result domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var AnswerClassificationResult = /** @class */ (function () {
    function AnswerClassificationResult(outcome, answerGroupIndex, ruleIndex, classificationCategorization) {
        this.outcome = outcome;
        this.answerGroupIndex = answerGroupIndex;
        this.ruleIndex = ruleIndex;
        this.classificationCategorization = classificationCategorization;
    }
    return AnswerClassificationResult;
}());
exports.AnswerClassificationResult = AnswerClassificationResult;
var AnswerClassificationResultObjectFactory = /** @class */ (function () {
    function AnswerClassificationResultObjectFactory() {
    }
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'outcome' is an outcome domain object and this can be
    // directly typed to 'Outcome' type once 'OutcomeObjectFactory' is upgraded.
    AnswerClassificationResultObjectFactory.prototype.createNew = function (outcome, answerGroupIndex, ruleIndex, classificationCategorization) {
        return new AnswerClassificationResult(outcome, answerGroupIndex, ruleIndex, classificationCategorization);
    };
    AnswerClassificationResultObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], AnswerClassificationResultObjectFactory);
    return AnswerClassificationResultObjectFactory;
}());
exports.AnswerClassificationResultObjectFactory = AnswerClassificationResultObjectFactory;
angular.module('oppia').factory('AnswerClassificationResultObjectFactory', static_1.downgradeInjectable(AnswerClassificationResultObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/classifier/ClassifierObjectFactory.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/classifier/ClassifierObjectFactory.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of Classifier
 *     domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var Classifier = /** @class */ (function () {
    function Classifier(algorithmId, classifierData, dataSchemaVersion) {
        this.algorithmId = algorithmId;
        this.classifierData = classifierData;
        this.dataSchemaVersion = dataSchemaVersion;
    }
    return Classifier;
}());
exports.Classifier = Classifier;
var ClassifierObjectFactory = /** @class */ (function () {
    function ClassifierObjectFactory() {
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'classifierData' is a dict with underscore_cased keys which
    // give tslint errors against underscore_casing in favor of camelCasing.
    ClassifierObjectFactory.prototype.create = function (algorithmId, classifierData, dataSchemaVersion) {
        return new Classifier(algorithmId, classifierData, dataSchemaVersion);
    };
    ClassifierObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], ClassifierObjectFactory);
    return ClassifierObjectFactory;
}());
exports.ClassifierObjectFactory = ClassifierObjectFactory;
angular.module('oppia').factory('ClassifierObjectFactory', static_1.downgradeInjectable(ClassifierObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/classifier/PredictionResultObjectFactory.ts":
/*!************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/classifier/PredictionResultObjectFactory.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of Prediction
 *     result domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var PredictionResult = /** @class */ (function () {
    function PredictionResult(label, confidence) {
        this.predictionLabel = label;
        this.predictionConfidence = confidence;
    }
    PredictionResult.prototype.getLabel = function () {
        return this.predictionLabel;
    };
    PredictionResult.prototype.getConfidence = function () {
        return this.predictionConfidence;
    };
    return PredictionResult;
}());
exports.PredictionResult = PredictionResult;
var PredictionResultObjectFactory = /** @class */ (function () {
    function PredictionResultObjectFactory() {
    }
    PredictionResultObjectFactory.prototype.createNew = function (label, confidence) {
        return new PredictionResult(label, confidence);
    };
    PredictionResultObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], PredictionResultObjectFactory);
    return PredictionResultObjectFactory;
}());
exports.PredictionResultObjectFactory = PredictionResultObjectFactory;
angular.module('oppia').factory('PredictionResultObjectFactory', static_1.downgradeInjectable(PredictionResultObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/collection/GuestCollectionProgressObjectFactory.ts":
/*!*******************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/collection/GuestCollectionProgressObjectFactory.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating and mutating a domain object which
 * represents the progress of a guest playing through a collection.
 */
var cloneDeep_1 = __importDefault(__webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js"));
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var GuestCollectionProgress = /** @class */ (function () {
    function GuestCollectionProgress(completedExplorationsMap) {
        this._completedExplorationsMap = completedExplorationsMap;
    }
    // Returns whether the guest has made any progress towards completing the
    // specified collection ID. Note that this does not account for whether the
    // completed explorations are still contained within that collection.
    GuestCollectionProgress.prototype.hasCompletionProgress = function (collectionId) {
        return this._completedExplorationsMap.hasOwnProperty(collectionId);
    };
    // Returns an array of exploration IDs which have been completed by the
    // specified collection ID, or empty if none have.
    GuestCollectionProgress.prototype.getCompletedExplorationIds = function (collectionId) {
        if (!this.hasCompletionProgress(collectionId)) {
            return [];
        }
        return cloneDeep_1.default(this._completedExplorationsMap[collectionId]);
    };
    // Specifies that a specific exploration ID has been completed in the
    // context of the specified collection. Returns whether that exploration ID
    // was not previously registered as completed for the collection.
    GuestCollectionProgress.prototype.addCompletedExplorationId = function (collectionId, explorationId) {
        var completedExplorationIds = this.getCompletedExplorationIds(collectionId);
        if (completedExplorationIds.indexOf(explorationId) === -1) {
            completedExplorationIds.push(explorationId);
            this._completedExplorationsMap[collectionId] = completedExplorationIds;
            return true;
        }
        return false;
    };
    // Converts this object to JSON for storage.
    GuestCollectionProgress.prototype.toJson = function () {
        return JSON.stringify(this._completedExplorationsMap);
    };
    return GuestCollectionProgress;
}());
exports.GuestCollectionProgress = GuestCollectionProgress;
var GuestCollectionProgressObjectFactory = /** @class */ (function () {
    function GuestCollectionProgressObjectFactory() {
    }
    // This function takes a JSON string which represents a raw collection
    // object and returns a new GuestCollectionProgress domain object. A null or
    // undefined string indicates that an empty progress object should be
    // created.
    GuestCollectionProgressObjectFactory.prototype.createFromJson = function (collectionProgressJson) {
        if (collectionProgressJson) {
            return new GuestCollectionProgress(JSON.parse(collectionProgressJson));
        }
        else {
            return new GuestCollectionProgress({});
        }
    };
    GuestCollectionProgressObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], GuestCollectionProgressObjectFactory);
    return GuestCollectionProgressObjectFactory;
}());
exports.GuestCollectionProgressObjectFactory = GuestCollectionProgressObjectFactory;
angular.module('oppia').factory('GuestCollectionProgressObjectFactory', static_1.downgradeInjectable(GuestCollectionProgressObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/collection/GuestCollectionProgressService.ts":
/*!*************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/collection/GuestCollectionProgressService.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service that records progress guests make during a collection
 * playthrough. Note that this service does not currently support saving a
 * user's progress when they create an account.
 */
// TODO(bhenning): Move this to a service which stores shared state across the
// frontend in a way that can be persisted in the backend upon account
// creation, such as exploration progress.
// TODO(bhenning): This should be reset upon login, otherwise the progress will
// be different depending on the user's logged in/logged out state.
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var GuestCollectionProgressObjectFactory_1 = __webpack_require__(/*! domain/collection/GuestCollectionProgressObjectFactory */ "./core/templates/dev/head/domain/collection/GuestCollectionProgressObjectFactory.ts");
var WindowRefService_1 = __webpack_require__(/*! services/contextual/WindowRefService */ "./core/templates/dev/head/services/contextual/WindowRefService.ts");
var GuestCollectionProgressService = /** @class */ (function () {
    function GuestCollectionProgressService(guestCollectionProgressObjectFactory, windowRef) {
        this.guestCollectionProgressObjectFactory = guestCollectionProgressObjectFactory;
        this.windowRef = windowRef;
        this.COLLECTION_STORAGE_KEY = 'collectionProgressStore_v1';
    }
    GuestCollectionProgressService.prototype.storeGuestCollectionProgress = function (guestCollectionProgress) {
        this.windowRef.nativeWindow.localStorage[this.COLLECTION_STORAGE_KEY] = (guestCollectionProgress.toJson());
    };
    GuestCollectionProgressService.prototype.loadGuestCollectionProgress = function () {
        return this.guestCollectionProgressObjectFactory.createFromJson(this.windowRef.nativeWindow.localStorage[this.COLLECTION_STORAGE_KEY]);
    };
    GuestCollectionProgressService.prototype.recordCompletedExploration = function (collectionId, explorationId) {
        var guestCollectionProgress = this.loadGuestCollectionProgress();
        var completedExplorationIdHasBeenAdded = (guestCollectionProgress.addCompletedExplorationId(collectionId, explorationId));
        if (completedExplorationIdHasBeenAdded) {
            this.storeGuestCollectionProgress(guestCollectionProgress);
        }
    };
    GuestCollectionProgressService.prototype.getValidCompletedExplorationIds = function (collection) {
        var collectionId = collection.getId();
        var guestCollectionProgress = this.loadGuestCollectionProgress();
        var completedExplorationIds = (guestCollectionProgress.getCompletedExplorationIds(collectionId));
        // Filter the exploration IDs by whether they are contained within the
        // specified collection structure.
        return completedExplorationIds.filter(function (expId) {
            return collection.containsCollectionNode(expId);
        });
    };
    // This method corresponds to collection_domain.get_next_exploration_id.
    GuestCollectionProgressService.prototype._getNextExplorationId = function (collection, completedIds) {
        var explorationIds = collection.getExplorationIds();
        for (var i = 0; i < explorationIds.length; i++) {
            if (completedIds.indexOf(explorationIds[i]) === -1) {
                return explorationIds[i];
            }
        }
        return null;
    };
    /**
     * Records that the specified exploration was completed in the context of
     * the specified collection, as a guest.
     */
    GuestCollectionProgressService.prototype.recordExplorationCompletedInCollection = function (collectionId, explorationId) {
        this.recordCompletedExploration(collectionId, explorationId);
    };
    /**
     * Returns whether the guest user has made any progress toward completing
     * the specified collection by completing at least one exploration related
     * to the collection. Note that this does not account for any completed
     * explorations which are no longer referenced by the collection;
     * getCompletedExplorationIds() should be used for that, instead.
     */
    GuestCollectionProgressService.prototype.hasCompletedSomeExploration = function (collectionId) {
        var guestCollectionProgress = this.loadGuestCollectionProgress();
        return guestCollectionProgress.hasCompletionProgress(collectionId);
    };
    /**
     * Given a collection object, returns the list of exploration IDs
     * completed by the guest user. The return list of exploration IDs will
     * not include any previously completed explorations for the given
     * collection that are no longer part of the collection.
     */
    GuestCollectionProgressService.prototype.getCompletedExplorationIds = function (collection) {
        return this.getValidCompletedExplorationIds(collection);
    };
    /**
     * Given a collection object a list of completed exploration IDs, returns
     * the next exploration ID the guest user can play as part of
     * completing the collection. If this method returns null, the
     * guest has completed the collection.
     */
    GuestCollectionProgressService.prototype.getNextExplorationId = function (collection, completedExplorationIds) {
        return this._getNextExplorationId(collection, completedExplorationIds);
    };
    var _a, _b;
    GuestCollectionProgressService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof GuestCollectionProgressObjectFactory_1.GuestCollectionProgressObjectFactory !== "undefined" && GuestCollectionProgressObjectFactory_1.GuestCollectionProgressObjectFactory) === "function" ? _a : Object, typeof (_b = typeof WindowRefService_1.WindowRef !== "undefined" && WindowRefService_1.WindowRef) === "function" ? _b : Object])
    ], GuestCollectionProgressService);
    return GuestCollectionProgressService;
}());
exports.GuestCollectionProgressService = GuestCollectionProgressService;
angular.module('oppia').factory('GuestCollectionProgressService', static_1.downgradeInjectable(GuestCollectionProgressService));


/***/ }),

/***/ "./core/templates/dev/head/domain/collection/ReadOnlyCollectionBackendApiService.ts":
/*!******************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/collection/ReadOnlyCollectionBackendApiService.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to retrieve read only information
 * about collections from the backend.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
// TODO(bhenning): For preview mode, this service should be replaced by a
// separate CollectionDataService implementation which returns a local copy of
// the collection instead. This file should not be included on the page in that
// scenario.
angular.module('oppia').factory('ReadOnlyCollectionBackendApiService', [
    '$http', '$q', 'UrlInterpolationService',
    'COLLECTION_DATA_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, COLLECTION_DATA_URL_TEMPLATE) {
        // Maps previously loaded collections to their IDs.
        var _collectionCache = [];
        var _collectionDetailsCache = [];
        var _fetchCollection = function (collectionId, successCallback, errorCallback) {
            var collectionDataUrl = UrlInterpolationService.interpolateUrl(COLLECTION_DATA_URL_TEMPLATE, {
                collection_id: collectionId
            });
            $http.get(collectionDataUrl).then(function (response) {
                var collection = angular.copy(response.data.collection);
                _cacheCollectionDetails(response.data);
                if (successCallback) {
                    successCallback(collection);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _cacheCollectionDetails = function (details) {
            _collectionDetailsCache[details.collection.id] = {
                canEdit: details.can_edit,
                title: details.collection.title,
            };
        };
        var _isCached = function (collectionId) {
            return _collectionCache.hasOwnProperty(collectionId);
        };
        return {
            /**
             * Retrieves a collection from the backend given a collection ID. This
             * returns a promise object that allows a success and rejection callbacks
             * to be registered. If the collection is successfully loaded and a
             * success callback function is provided to the promise object, the
             * success callback is called with the collection passed in as a
             * parameter. If something goes wrong while trying to fetch the
             * collection, the rejection callback is called instead, if present. The
             * rejection callback function is passed the error that occurred and the
             * collection ID.
             */
            fetchCollection: function (collectionId) {
                return $q(function (resolve, reject) {
                    _fetchCollection(collectionId, resolve, reject);
                });
            },
            /**
             * Behaves in the exact same way as fetchCollection (including callback
             * behavior and returning a promise object), except this function will
             * attempt to see whether the given collection has already been loaded. If
             * it has not yet been loaded, it will fetch the collection from the
             * backend. If it successfully retrieves the collection from the backend,
             * it will store it in the cache to avoid requests from the backend in
             * further function calls.
             */
            loadCollection: function (collectionId) {
                return $q(function (resolve, reject) {
                    if (_isCached(collectionId)) {
                        if (resolve) {
                            resolve(angular.copy(_collectionCache[collectionId]));
                        }
                    }
                    else {
                        _fetchCollection(collectionId, function (collection) {
                            // Save the fetched collection to avoid future fetches.
                            _collectionCache[collectionId] = collection;
                            if (resolve) {
                                resolve(angular.copy(collection));
                            }
                        }, reject);
                    }
                });
            },
            getCollectionDetails: function (collectionId) {
                if (_collectionDetailsCache[collectionId]) {
                    return _collectionDetailsCache[collectionId];
                }
                else {
                    throw Error('collection has not been fetched');
                }
            },
            /**
             * Returns whether the given collection is stored within the local data
             * cache or if it needs to be retrieved from the backend upon a laod.
             */
            isCached: function (collectionId) {
                return _isCached(collectionId);
            },
            /**
             * Replaces the current collection in the cache given by the specified
             * collection ID with a new collection object.
             */
            cacheCollection: function (collectionId, collection) {
                _collectionCache[collectionId] = angular.copy(collection);
            },
            /**
             * Clears the local collection data cache, forcing all future loads to
             * re-request the previously loaded collections from the backend.
             */
            clearCollectionCache: function () {
                _collectionCache = [];
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/AnswerGroupObjectFactory.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/AnswerGroupObjectFactory.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of AnswerGroup
 * domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var OutcomeObjectFactory_1 = __webpack_require__(/*! domain/exploration/OutcomeObjectFactory */ "./core/templates/dev/head/domain/exploration/OutcomeObjectFactory.ts");
var RuleObjectFactory_1 = __webpack_require__(/*! domain/exploration/RuleObjectFactory */ "./core/templates/dev/head/domain/exploration/RuleObjectFactory.ts");
var AnswerGroup = /** @class */ (function () {
    function AnswerGroup(rules, outcome, trainingData, taggedSkillMisconceptionId) {
        this.rules = rules;
        this.outcome = outcome;
        this.trainingData = trainingData;
        this.taggedSkillMisconceptionId = taggedSkillMisconceptionId;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    AnswerGroup.prototype.toBackendDict = function () {
        return {
            rule_specs: this.rules.map(function (rule) {
                return rule.toBackendDict();
            }),
            outcome: this.outcome.toBackendDict(),
            training_data: this.trainingData,
            tagged_skill_misconception_id: this.taggedSkillMisconceptionId
        };
    };
    return AnswerGroup;
}());
exports.AnswerGroup = AnswerGroup;
var AnswerGroupObjectFactory = /** @class */ (function () {
    function AnswerGroupObjectFactory(outcomeObjectFactory, ruleObjectFactory) {
        this.outcomeObjectFactory = outcomeObjectFactory;
        this.ruleObjectFactory = ruleObjectFactory;
    }
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'ruleBackendDicts' is a complex object with elements as keys
    // having varying types. An exact type needs tobe found.
    AnswerGroupObjectFactory.prototype.generateRulesFromBackend = function (ruleBackendDicts) {
        var _this = this;
        return ruleBackendDicts.map(function (ruleBackendDict) {
            return _this.ruleObjectFactory.createFromBackendDict(ruleBackendDict);
        });
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'trainingData' is an array of dicts with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    AnswerGroupObjectFactory.prototype.createNew = function (rules, outcome, trainingData, taggedSkillMisconceptionId) {
        return new AnswerGroup(rules, outcome, trainingData, taggedSkillMisconceptionId);
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'answerGroupBackendDict' is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    AnswerGroupObjectFactory.prototype.createFromBackendDict = function (answerGroupBackendDict) {
        return new AnswerGroup(this.generateRulesFromBackend(answerGroupBackendDict.rule_specs), this.outcomeObjectFactory.createFromBackendDict(answerGroupBackendDict.outcome), answerGroupBackendDict.training_data, answerGroupBackendDict.tagged_skill_misconception_id);
    };
    var _a, _b;
    AnswerGroupObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof OutcomeObjectFactory_1.OutcomeObjectFactory !== "undefined" && OutcomeObjectFactory_1.OutcomeObjectFactory) === "function" ? _a : Object, typeof (_b = typeof RuleObjectFactory_1.RuleObjectFactory !== "undefined" && RuleObjectFactory_1.RuleObjectFactory) === "function" ? _b : Object])
    ], AnswerGroupObjectFactory);
    return AnswerGroupObjectFactory;
}());
exports.AnswerGroupObjectFactory = AnswerGroupObjectFactory;
angular.module('oppia').factory('AnswerGroupObjectFactory', static_1.downgradeInjectable(AnswerGroupObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/EditableExplorationBackendApiService.ts":
/*!********************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/EditableExplorationBackendApiService.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to send changes to a exploration to the backend.
 */
__webpack_require__(/*! domain/exploration/ReadOnlyExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
angular.module('oppia').factory('EditableExplorationBackendApiService', [
    '$http', '$q', 'ReadOnlyExplorationBackendApiService',
    'UrlInterpolationService', 'EDITABLE_EXPLORATION_DATA_DRAFT_URL_TEMPLATE',
    'EDITABLE_EXPLORATION_DATA_URL_TEMPLATE',
    function ($http, $q, ReadOnlyExplorationBackendApiService, UrlInterpolationService, EDITABLE_EXPLORATION_DATA_DRAFT_URL_TEMPLATE, EDITABLE_EXPLORATION_DATA_URL_TEMPLATE) {
        var _fetchExploration = function (explorationId, applyDraft, successCallback, errorCallback) {
            var editableExplorationDataUrl = _getExplorationUrl(explorationId, applyDraft);
            $http.get(editableExplorationDataUrl).then(function (response) {
                var exploration = angular.copy(response.data);
                if (successCallback) {
                    successCallback(exploration);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _updateExploration = function (explorationId, explorationVersion, commitMessage, changeList, successCallback, errorCallback) {
            var editableExplorationDataUrl = _getExplorationUrl(explorationId, null);
            var putData = {
                version: explorationVersion,
                commit_message: commitMessage,
                change_list: changeList
            };
            $http.put(editableExplorationDataUrl, putData).then(function (response) {
                // The returned data is an updated exploration dict.
                var exploration = angular.copy(response.data);
                // Delete from the ReadOnlyExplorationBackendApiService's cache
                // As the two versions of the data (learner and editor) now differ
                ReadOnlyExplorationBackendApiService.deleteExplorationFromCache(explorationId, exploration);
                if (successCallback) {
                    successCallback(exploration);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _deleteExploration = function (explorationId, successCallback, errorCallback) {
            var editableExplorationDataUrl = _getExplorationUrl(explorationId, null);
            $http['delete'](editableExplorationDataUrl).then(function () {
                // Delete item from the ReadOnlyExplorationBackendApiService's cache
                ReadOnlyExplorationBackendApiService.deleteExplorationFromCache(explorationId);
                if (successCallback) {
                    successCallback({});
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _getExplorationUrl = function (explorationId, applyDraft) {
            if (applyDraft) {
                return UrlInterpolationService.interpolateUrl(EDITABLE_EXPLORATION_DATA_DRAFT_URL_TEMPLATE, {
                    exploration_id: explorationId,
                    apply_draft: JSON.stringify(applyDraft)
                });
            }
            return UrlInterpolationService.interpolateUrl(EDITABLE_EXPLORATION_DATA_URL_TEMPLATE, {
                exploration_id: explorationId
            });
        };
        return {
            fetchExploration: function (explorationId) {
                return $q(function (resolve, reject) {
                    _fetchExploration(explorationId, null, resolve, reject);
                });
            },
            fetchApplyDraftExploration: function (explorationId) {
                return $q(function (resolve, reject) {
                    _fetchExploration(explorationId, true, resolve, reject);
                });
            },
            /**
             * Updates an exploration in the backend with the provided exploration
             * ID. The changes only apply to the exploration of the given version
             * and the request to update the exploration will fail if the provided
             * exploration version is older than the current version stored in the
             * backend. Both the changes and the message to associate with those
             * changes are used to commit a change to the exploration.
             * The new exploration is passed to the success callback,
             * if one is provided to the returned promise object. Errors are passed
             * to the error callback, if one is provided. Please note, once this is
             * called the cached exploration in ReadOnlyExplorationBackendApiService
             * will be deleted. This is due to the differences in the back-end
             * editor object and the back-end player object. As it stands now,
             * we are unable to cache any Exploration object obtained from the
             * editor beackend.
             */
            updateExploration: function (explorationId, explorationVersion, commitMessage, changeList) {
                return $q(function (resolve, reject) {
                    _updateExploration(explorationId, explorationVersion, commitMessage, changeList, resolve, reject);
                });
            },
            /**
             * Deletes an exploration in the backend with the provided exploration
             * ID. If successful, the exploration will also be deleted from the
             * ReadOnlyExplorationBackendApiService cache as well.
             * Errors are passed to the error callback, if one is provided.
             */
            deleteExploration: function (explorationId) {
                return $q(function (resolve, reject) {
                    _deleteExploration(explorationId, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ExplorationDraftObjectFactory.ts":
/*!*************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ExplorationDraftObjectFactory.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating instances of ExplorationDraft
 * domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var ExplorationDraft = /** @class */ (function () {
    function ExplorationDraft(draftChanges, draftChangeListId) {
        this.draftChanges = draftChanges;
        this.draftChangeListId = draftChangeListId;
    }
    /**
     * Checks whether the draft object has been overwritten by another
     * draft which has been committed to the back-end. If the supplied draft id
     * has a different value then a newer changeList must have been committed
     * to the back-end.
     * @param {Integer} - currentDraftId. The id of the draft changes whch was
     *  retrieved from the back-end.
     * @returns {Boolean} - True iff the currentDraftId is the same as the
     * draftChangeListId corresponding to this draft.
     */
    ExplorationDraft.prototype.isValid = function (currentDraftId) {
        return (currentDraftId === this.draftChangeListId);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'draftChanges' is an array of dicts with possible
    // underscore_cased keys. A thorough check needs to be done to assure of
    // its exact type.
    ExplorationDraft.prototype.getChanges = function () {
        return this.draftChanges;
    };
    return ExplorationDraft;
}());
exports.ExplorationDraft = ExplorationDraft;
var ExplorationDraftObjectFactory = /** @class */ (function () {
    function ExplorationDraftObjectFactory() {
    }
    ExplorationDraftObjectFactory.prototype.createFromLocalStorageDict = function (explorationDraftDict) {
        return new ExplorationDraft(explorationDraftDict.draftChanges, explorationDraftDict.draftChangeListId);
    };
    ExplorationDraftObjectFactory.prototype.toLocalStorageDict = function (
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'changeList' is an array of dicts with possible
    // underscore_cased keys. A thorough check needs to be done to assure of
    // its exact type.
    changeList, draftChangeListId) {
        return {
            draftChanges: changeList,
            draftChangeListId: draftChangeListId
        };
    };
    ExplorationDraftObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], ExplorationDraftObjectFactory);
    return ExplorationDraftObjectFactory;
}());
exports.ExplorationDraftObjectFactory = ExplorationDraftObjectFactory;
angular.module('oppia').factory('ExplorationDraftObjectFactory', static_1.downgradeInjectable(ExplorationDraftObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ExplorationObjectFactory.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ExplorationObjectFactory.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of Exploration
 * domain objects.
 */
__webpack_require__(/*! domain/exploration/ParamChangesObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ParamChangesObjectFactory.ts");
__webpack_require__(/*! domain/exploration/ParamSpecsObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ParamSpecsObjectFactory.ts");
__webpack_require__(/*! domain/exploration/StatesObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/StatesObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').factory('ExplorationObjectFactory', [
    '$log', 'ParamChangesObjectFactory', 'ParamSpecsObjectFactory',
    'StatesObjectFactory', 'UrlInterpolationService',
    'INTERACTION_DISPLAY_MODE_INLINE',
    'INTERACTION_SPECS', function ($log, ParamChangesObjectFactory, ParamSpecsObjectFactory, StatesObjectFactory, UrlInterpolationService, INTERACTION_DISPLAY_MODE_INLINE, INTERACTION_SPECS) {
        var Exploration = function (initStateName, paramChanges, paramSpecs, states, title, languageCode) {
            this.initStateName = initStateName;
            this.paramChanges = paramChanges;
            this.paramSpecs = paramSpecs;
            this.states = states;
            this.title = title;
            this.languageCode = languageCode;
        };
        // Instance methods
        Exploration.prototype.isStateTerminal = function (stateName) {
            return (stateName && this.getInteractionId(stateName) &&
                INTERACTION_SPECS[this.getInteractionId(stateName)].is_terminal);
        };
        Exploration.prototype.getAuthorRecommendedExpIds = function (stateName) {
            if (!this.isStateTerminal(stateName)) {
                throw Error('Tried to get recommendations for a non-terminal state: ' +
                    stateName);
            }
            return this.getInteractionCustomizationArgs(stateName).recommendedExplorationIds.value;
        };
        Exploration.prototype.getInteraction = function (stateName) {
            var state = this.states.getState(stateName);
            if (!state) {
                $log.error('Invalid state name: ' + stateName);
                return null;
            }
            return state.interaction;
        };
        Exploration.prototype.getInteractionId = function (stateName) {
            var interaction = this.getInteraction(stateName);
            if (interaction === null) {
                return null;
            }
            return interaction.id;
        };
        Exploration.prototype.getInteractionCustomizationArgs =
            function (stateName) {
                var interaction = this.getInteraction(stateName);
                if (interaction === null) {
                    return null;
                }
                return interaction.customizationArgs;
            };
        Exploration.prototype.getInteractionInstructions = function (stateName) {
            var interactionId = this.getInteractionId(stateName);
            return interactionId ? INTERACTION_SPECS[interactionId].instructions : '';
        };
        Exploration.prototype.getNarrowInstructions = function (stateName) {
            var interactionId = this.getInteractionId(stateName);
            return (interactionId ?
                INTERACTION_SPECS[interactionId].narrow_instructions :
                '');
        };
        Exploration.prototype.getInteractionThumbnailSrc = function (stateName) {
            // TODO(sll): unify this with the 'choose interaction' modal in
            // state_editor_interaction.html.
            var interactionId = this.getInteractionId(stateName);
            return interactionId ? (UrlInterpolationService
                .getInteractionThumbnailImageUrl(interactionId)) : '';
        };
        Exploration.prototype.isInteractionInline = function (stateName) {
            var interactionId = this.getInteractionId(stateName);
            // Note that we treat a null interaction as an inline one, so that the
            // error message associated with it is displayed in the most compact way
            // possible in the learner view.
            return (!interactionId ||
                INTERACTION_SPECS[interactionId].display_mode ===
                    INTERACTION_DISPLAY_MODE_INLINE);
        };
        Exploration.prototype.getStates = function () {
            return angular.copy(this.states);
        };
        Exploration.prototype.getState = function (stateName) {
            return this.states.getState(stateName);
        };
        Exploration.prototype.getInitialState = function () {
            return this.getState(this.initStateName);
        };
        Exploration.prototype.setInitialStateName = function (stateName) {
            this.initStateName = stateName;
        };
        Exploration.prototype.getUninterpolatedContentHtml = function (stateName) {
            return this.getState(stateName).content.getHtml();
        };
        Exploration.prototype.getVoiceovers = function (stateName) {
            var state = this.getState(stateName);
            var recordedVoiceovers = state.recordedVoiceovers;
            var contentId = state.content.getContentId();
            return recordedVoiceovers.getBindableVoiceovers(contentId);
        };
        Exploration.prototype.getVoiceover = function (stateName, languageCode) {
            var state = this.getState(stateName);
            var recordedVoiceovers = state.recordedVoiceovers;
            var contentId = state.content.getContentId();
            return recordedVoiceovers.getVoiceover(contentId, languageCode);
        };
        Exploration.prototype.getAllVoiceovers = function (languageCode) {
            return this.states.getAllVoiceovers(languageCode);
        };
        Exploration.prototype.getLanguageCode = function () {
            return this.languageCode;
        };
        Exploration.prototype.getAllVoiceoverLanguageCodes = function () {
            return this.states.getAllVoiceoverLanguageCodes();
        };
        // Static class methods. Note that "this" is not available in
        // static contexts.
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Exploration['createFromBackendDict'] = function (explorationBackendDict) {
            /* eslint-enable dot-notation */
            return new Exploration(explorationBackendDict.init_state_name, ParamChangesObjectFactory.createFromBackendList(explorationBackendDict.param_changes), ParamSpecsObjectFactory.createFromBackendDict(explorationBackendDict.param_specs), StatesObjectFactory.createFromBackendDict(explorationBackendDict.states), explorationBackendDict.title, explorationBackendDict.language_code);
        };
        return Exploration;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/HintObjectFactory.ts":
/*!*************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/HintObjectFactory.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of Hint
 * domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var SubtitledHtmlObjectFactory_1 = __webpack_require__(/*! domain/exploration/SubtitledHtmlObjectFactory */ "./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts");
var Hint = /** @class */ (function () {
    function Hint(hintContent) {
        this.hintContent = hintContent;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    Hint.prototype.toBackendDict = function () {
        return {
            hint_content: this.hintContent.toBackendDict()
        };
    };
    return Hint;
}());
exports.Hint = Hint;
var HintObjectFactory = /** @class */ (function () {
    function HintObjectFactory(subtitledHtmlObjectFactory) {
        this.subtitledHtmlObjectFactory = subtitledHtmlObjectFactory;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'hintBackendDict' is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    HintObjectFactory.prototype.createFromBackendDict = function (hintBackendDict) {
        return new Hint(this.subtitledHtmlObjectFactory.createFromBackendDict(hintBackendDict.hint_content));
    };
    HintObjectFactory.prototype.createNew = function (hintContentId, hintContent) {
        return new Hint(this.subtitledHtmlObjectFactory.createDefault(hintContent, hintContentId));
    };
    var _a;
    HintObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof SubtitledHtmlObjectFactory_1.SubtitledHtmlObjectFactory !== "undefined" && SubtitledHtmlObjectFactory_1.SubtitledHtmlObjectFactory) === "function" ? _a : Object])
    ], HintObjectFactory);
    return HintObjectFactory;
}());
exports.HintObjectFactory = HintObjectFactory;
angular.module('oppia').factory('HintObjectFactory', static_1.downgradeInjectable(HintObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/InteractionObjectFactory.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/InteractionObjectFactory.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of Interaction
 * domain objects.
 */
__webpack_require__(/*! domain/exploration/AnswerGroupObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/AnswerGroupObjectFactory.ts");
__webpack_require__(/*! domain/exploration/HintObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/HintObjectFactory.ts");
__webpack_require__(/*! domain/exploration/OutcomeObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/OutcomeObjectFactory.ts");
__webpack_require__(/*! domain/exploration/SolutionObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/SolutionObjectFactory.ts");
angular.module('oppia').factory('InteractionObjectFactory', [
    'AnswerGroupObjectFactory', 'HintObjectFactory', 'OutcomeObjectFactory',
    'SolutionObjectFactory',
    function (AnswerGroupObjectFactory, HintObjectFactory, OutcomeObjectFactory, SolutionObjectFactory) {
        var Interaction = function (answerGroups, confirmedUnclassifiedAnswers, customizationArgs, defaultOutcome, hints, id, solution) {
            this.answerGroups = answerGroups;
            this.confirmedUnclassifiedAnswers = confirmedUnclassifiedAnswers;
            this.customizationArgs = customizationArgs;
            this.defaultOutcome = defaultOutcome;
            this.hints = hints;
            this.id = id;
            this.solution = solution;
        };
        Interaction.prototype.setId = function (newValue) {
            this.id = newValue;
        };
        Interaction.prototype.setAnswerGroups = function (newValue) {
            this.answerGroups = newValue;
        };
        Interaction.prototype.setDefaultOutcome = function (newValue) {
            this.defaultOutcome = newValue;
        };
        Interaction.prototype.setCustomizationArgs = function (newValue) {
            this.customizationArgs = newValue;
        };
        Interaction.prototype.setSolution = function (newValue) {
            this.solution = newValue;
        };
        Interaction.prototype.setHints = function (newValue) {
            this.hints = newValue;
        };
        Interaction.prototype.copy = function (otherInteraction) {
            this.answerGroups = angular.copy(otherInteraction.answerGroups);
            this.confirmedUnclassifiedAnswers =
                angular.copy(otherInteraction.confirmedUnclassifiedAnswers);
            this.customizationArgs = angular.copy(otherInteraction.customizationArgs);
            this.defaultOutcome = angular.copy(otherInteraction.defaultOutcome);
            this.hints = angular.copy(otherInteraction.hints);
            this.id = angular.copy(otherInteraction.id);
            this.solution = angular.copy(otherInteraction.solution);
        };
        Interaction.prototype.toBackendDict = function () {
            return {
                answer_groups: this.answerGroups.map(function (answerGroup) {
                    return answerGroup.toBackendDict();
                }),
                confirmed_unclassified_answers: this.confirmedUnclassifiedAnswers,
                customization_args: this.customizationArgs,
                default_outcome: this.defaultOutcome ? this.defaultOutcome.toBackendDict() : null,
                hints: this.hints.map(function (hint) {
                    return hint.toBackendDict();
                }),
                id: this.id,
                solution: this.solution ? this.solution.toBackendDict() : null
            };
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Interaction['createFromBackendDict'] = function (interactionDict) {
            /* eslint-enable dot-notation */
            var defaultOutcome;
            if (interactionDict.default_outcome) {
                defaultOutcome = OutcomeObjectFactory.createFromBackendDict(interactionDict.default_outcome);
            }
            else {
                defaultOutcome = null;
            }
            return new Interaction(generateAnswerGroupsFromBackend(interactionDict.answer_groups), interactionDict.confirmed_unclassified_answers, interactionDict.customization_args, defaultOutcome, generateHintsFromBackend(interactionDict.hints), interactionDict.id, interactionDict.solution ? (generateSolutionFromBackend(interactionDict.solution)) : null);
        };
        var generateAnswerGroupsFromBackend = function (answerGroupBackendDicts) {
            return answerGroupBackendDicts.map(function (answerGroupBackendDict) {
                return AnswerGroupObjectFactory.createFromBackendDict(answerGroupBackendDict);
            });
        };
        var generateHintsFromBackend = function (hintBackendDicts) {
            return hintBackendDicts.map(function (hintBackendDict) {
                return HintObjectFactory.createFromBackendDict(hintBackendDict);
            });
        };
        var generateSolutionFromBackend = function (solutionBackendDict) {
            return SolutionObjectFactory.createFromBackendDict(solutionBackendDict);
        };
        return Interaction;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/OutcomeObjectFactory.ts":
/*!****************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/OutcomeObjectFactory.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of Outcome
 * domain objects.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var SubtitledHtmlObjectFactory_1 = __webpack_require__(/*! domain/exploration/SubtitledHtmlObjectFactory */ "./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts");
var Outcome = /** @class */ (function () {
    function Outcome(dest, feedback, labelledAsCorrect, paramChanges, refresherExplorationId, missingPrerequisiteSkillId) {
        this.dest = dest;
        this.feedback = feedback;
        this.labelledAsCorrect = labelledAsCorrect;
        this.paramChanges = paramChanges;
        this.refresherExplorationId = refresherExplorationId;
        this.missingPrerequisiteSkillId = missingPrerequisiteSkillId;
    }
    Outcome.prototype.setDestination = function (newValue) {
        this.dest = newValue;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    Outcome.prototype.toBackendDict = function () {
        return {
            dest: this.dest,
            feedback: this.feedback.toBackendDict(),
            labelled_as_correct: this.labelledAsCorrect,
            param_changes: this.paramChanges,
            refresher_exploration_id: this.refresherExplorationId,
            missing_prerequisite_skill_id: this.missingPrerequisiteSkillId
        };
    };
    Outcome.prototype.hasNonemptyFeedback = function () {
        return this.feedback.getHtml().trim() !== '';
    };
    /**
     * Returns true iff an outcome has a self-loop, no feedback, and no
     * refresher exploration.
     */
    Outcome.prototype.isConfusing = function (currentStateName) {
        return (this.dest === currentStateName &&
            !this.hasNonemptyFeedback() &&
            this.refresherExplorationId === null);
    };
    return Outcome;
}());
exports.Outcome = Outcome;
var OutcomeObjectFactory = /** @class */ (function () {
    function OutcomeObjectFactory(subtitledHtmlObjectFactory) {
        this.subtitledHtmlObjectFactory = subtitledHtmlObjectFactory;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    OutcomeObjectFactory.prototype.createNew = function (dest, feedbackTextId, feedbackText, paramChanges) {
        return new Outcome(dest, this.subtitledHtmlObjectFactory.createDefault(feedbackText, feedbackTextId), false, paramChanges, null, null);
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'outcomeDict' is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    OutcomeObjectFactory.prototype.createFromBackendDict = function (outcomeDict) {
        return new Outcome(outcomeDict.dest, this.subtitledHtmlObjectFactory.createFromBackendDict(outcomeDict.feedback), outcomeDict.labelled_as_correct, outcomeDict.param_changes, outcomeDict.refresher_exploration_id, outcomeDict.missing_prerequisite_skill_id);
    };
    var _a;
    OutcomeObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof SubtitledHtmlObjectFactory_1.SubtitledHtmlObjectFactory !== "undefined" && SubtitledHtmlObjectFactory_1.SubtitledHtmlObjectFactory) === "function" ? _a : Object])
    ], OutcomeObjectFactory);
    return OutcomeObjectFactory;
}());
exports.OutcomeObjectFactory = OutcomeObjectFactory;
angular.module('oppia').factory('OutcomeObjectFactory', static_1.downgradeInjectable(OutcomeObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ParamChangeObjectFactory.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ParamChangeObjectFactory.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of ParamChange
 * domain objects.
 */
var cloneDeep_1 = __importDefault(__webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js"));
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var DEFAULT_CUSTOMIZATION_ARGS = {
    Copier: {
        parse_with_jinja: true,
        value: '5'
    },
    RandomSelector: {
        list_of_values: ['sample value']
    }
};
var ParamChange = /** @class */ (function () {
    function ParamChange(customizationArgs, generatorId, name) {
        this.customizationArgs = customizationArgs;
        this.generatorId = generatorId;
        this.name = name;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased keys which
    // give tslint errors against underscore_casing in favor of camelCasing.
    ParamChange.prototype.toBackendDict = function () {
        return {
            customization_args: this.customizationArgs,
            generator_id: this.generatorId,
            name: this.name
        };
    };
    ParamChange.prototype.resetCustomizationArgs = function () {
        this.customizationArgs = cloneDeep_1.default(DEFAULT_CUSTOMIZATION_ARGS[this.generatorId]);
    };
    return ParamChange;
}());
exports.ParamChange = ParamChange;
var ParamChangeObjectFactory = /** @class */ (function () {
    function ParamChangeObjectFactory() {
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'paramChangeBackendDict' is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    ParamChangeObjectFactory.prototype.createFromBackendDict = function (paramChangeBackendDict) {
        return new ParamChange(paramChangeBackendDict.customization_args, paramChangeBackendDict.generator_id, paramChangeBackendDict.name);
    };
    ParamChangeObjectFactory.prototype.createEmpty = function (paramName) {
        return new ParamChange({
            parse_with_jinja: true,
            value: ''
        }, 'Copier', paramName);
    };
    ParamChangeObjectFactory.prototype.createDefault = function (paramName) {
        return new ParamChange(cloneDeep_1.default(DEFAULT_CUSTOMIZATION_ARGS.Copier), 'Copier', paramName);
    };
    ParamChangeObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], ParamChangeObjectFactory);
    return ParamChangeObjectFactory;
}());
exports.ParamChangeObjectFactory = ParamChangeObjectFactory;
angular.module('oppia').factory('ParamChangeObjectFactory', static_1.downgradeInjectable(ParamChangeObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ParamChangesObjectFactory.ts":
/*!*********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ParamChangesObjectFactory.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend arrays of ParamChange
 * domain objects.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var ParamChangeObjectFactory_ts_1 = __webpack_require__(/*! domain/exploration/ParamChangeObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ParamChangeObjectFactory.ts");
var ParamChangesObjectFactory = /** @class */ (function () {
    function ParamChangesObjectFactory(paramChangeObjectFactory) {
        this.paramChangeObjectFactory = paramChangeObjectFactory;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'paramChangeBackendList' is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    ParamChangesObjectFactory.prototype.createFromBackendList = function (paramChangeBackendList) {
        var _this = this;
        return paramChangeBackendList.map(function (paramChangeBackendDict) {
            return _this.paramChangeObjectFactory.createFromBackendDict(paramChangeBackendDict);
        });
    };
    var _a;
    ParamChangesObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof ParamChangeObjectFactory_ts_1.ParamChangeObjectFactory !== "undefined" && ParamChangeObjectFactory_ts_1.ParamChangeObjectFactory) === "function" ? _a : Object])
    ], ParamChangesObjectFactory);
    return ParamChangesObjectFactory;
}());
exports.ParamChangesObjectFactory = ParamChangesObjectFactory;
angular.module('oppia').factory('ParamChangesObjectFactory', static_1.downgradeInjectable(ParamChangesObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ParamSpecObjectFactory.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ParamSpecObjectFactory.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of ParamSpec
 * domain objects.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var ParamTypeObjectFactory_1 = __webpack_require__(/*! domain/exploration/ParamTypeObjectFactory */ "./core/templates/dev/head/domain/exploration/ParamTypeObjectFactory.ts");
var ParamSpec = /** @class */ (function () {
    /**
     * @constructor
     * @param {!ParamType} objType - The type of the parameter.
     */
    function ParamSpec(objType) {
        /** @member {ParamType} */
        this._objType = objType;
    }
    /** @returns {ParamType} - The type name of the parameter. */
    ParamSpec.prototype.getType = function () {
        return this._objType;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    /** @returns {{obj_type: String}} - Basic dict for backend consumption. */
    ParamSpec.prototype.toBackendDict = function () {
        return {
            obj_type: this._objType.getName(),
        };
    };
    return ParamSpec;
}());
exports.ParamSpec = ParamSpec;
var ParamSpecObjectFactory = /** @class */ (function () {
    function ParamSpecObjectFactory(paramTypeObjectFactory) {
        this.paramTypeObjectFactory = paramTypeObjectFactory;
    }
    /**
     * @param {!{obj_type: String}} paramSpecBackendDict - Basic dict from
     *    backend.
     * @returns {ParamSpec} - A new ParamSpec instance.
     */
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'paramSpecBackendDict' is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    ParamSpecObjectFactory.prototype.createFromBackendDict = function (paramSpecBackendDict) {
        return new ParamSpec(this.paramTypeObjectFactory.getTypeFromBackendName(paramSpecBackendDict.obj_type));
    };
    /** @returns {ParamSpec} - A default instance for ParamSpec. */
    ParamSpecObjectFactory.prototype.createDefault = function () {
        return new ParamSpec(this.paramTypeObjectFactory.getDefaultType());
    };
    var _a;
    ParamSpecObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof ParamTypeObjectFactory_1.ParamTypeObjectFactory !== "undefined" && ParamTypeObjectFactory_1.ParamTypeObjectFactory) === "function" ? _a : Object])
    ], ParamSpecObjectFactory);
    return ParamSpecObjectFactory;
}());
exports.ParamSpecObjectFactory = ParamSpecObjectFactory;
angular.module('oppia').factory('ParamSpecObjectFactory', static_1.downgradeInjectable(ParamSpecObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ParamSpecsObjectFactory.ts":
/*!*******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ParamSpecsObjectFactory.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of ParamSpecs
 * domain objects. ParamSpecs map parameter names to the specifications
 * which defines them (represented as ParamSpec objects).
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var ParamSpecObjectFactory_1 = __webpack_require__(/*! domain/exploration/ParamSpecObjectFactory */ "./core/templates/dev/head/domain/exploration/ParamSpecObjectFactory.ts");
var ParamSpecs = /** @class */ (function () {
    /**
     * @constructor
     * @param {Object.<String, ParamSpec>} paramDict - params and their specs
     *    for this object will hold.
     */
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'paramDict' is initialized as '{}' and that does not match
    // with the actual type of 'paramDict'.
    function ParamSpecs(paramDict, paramSpecObjectFactory) {
        /** @member {Object.<String, ParamSpec>} */
        this._paramDict = paramDict;
        this._paramSpecObjectFactory = paramSpecObjectFactory;
    }
    /**
     * @param {String} paramName - The parameter to fetch.
     * @returns {ParamSpec} - associated to given parameter name.
     */
    ParamSpecs.prototype.getParamSpec = function (paramName) {
        return this._paramDict[paramName];
    };
    /**
     * @returns {Object.<String, ParamSpec>} - the map of params to their specs.
     */
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because '_paramDict' is initialized as '{}' and that does not match
    // with the actual type of 'paramDict'.
    ParamSpecs.prototype.getParamDict = function () {
        return this._paramDict;
    };
    /** @returns {Array.<String>} - The names of the current parameter specs. */
    ParamSpecs.prototype.getParamNames = function () {
        return Object.keys(this._paramDict);
    };
    /**
     * Adds a new parameter only if it didn't exist already. Does nothing
     * otherwise.
     *
     * @param {!String} paramName - The parameter to add a spec for.
     * @param {ParamSpec=} paramSpec - The specification of the parameter.
     * @returns {Boolean} - True when the parameter was newly added.
     */
    ParamSpecs.prototype.addParamIfNew = function (paramName, paramSpec) {
        if (!this._paramDict.hasOwnProperty(paramName)) {
            this._paramDict[paramName] =
                paramSpec || this._paramSpecObjectFactory.createDefault();
            return true;
        }
        return false;
    };
    /**
     * @callback callback - Is passed the name and corresponding ParamSpec of
     *    each parameter in the specs.
     */
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'callback' is a method can vary. A definite type needs to
    // be found and assigned.
    ParamSpecs.prototype.forEach = function (callback) {
        var that = this;
        this.getParamNames().forEach(function (paramName) {
            callback(paramName, that.getParamSpec(paramName));
        });
    };
    /**
     * @returns {Object.<String, {obj_type: String}>} - Basic dict for backend
     *    consumption.
     */
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'paramSpecsBackendDict' is initialized as '{}' and that does
    // not match with the actual type of 'paramDict'.
    ParamSpecs.prototype.toBackendDict = function () {
        var paramSpecsBackendDict = {};
        this.forEach(function (paramName, paramSpec) {
            paramSpecsBackendDict[paramName] = paramSpec.toBackendDict();
        });
        return paramSpecsBackendDict;
    };
    return ParamSpecs;
}());
exports.ParamSpecs = ParamSpecs;
var ParamSpecsObjectFactory = /** @class */ (function () {
    function ParamSpecsObjectFactory(paramSpecObjectFactory) {
        this.paramSpecObjectFactory = paramSpecObjectFactory;
    }
    /**
     * @param {!Object.<String, {obj_type: String}>} paramSpecsBackendDict -
     *    Basic dict of backend representation.
     * @returns {ParamSpecs} - An instance with properties from the backend
     *    dict.
     */
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'paramSpecsBackendDict' is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    ParamSpecsObjectFactory.prototype.createFromBackendDict = function (paramSpecsBackendDict) {
        var _this = this;
        var paramDict = {};
        Object.keys(paramSpecsBackendDict).forEach(function (paramName) {
            paramDict[paramName] = _this.paramSpecObjectFactory.createFromBackendDict(paramSpecsBackendDict[paramName]);
        });
        return new ParamSpecs(paramDict, this.paramSpecObjectFactory);
    };
    var _a;
    ParamSpecsObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof ParamSpecObjectFactory_1.ParamSpecObjectFactory !== "undefined" && ParamSpecObjectFactory_1.ParamSpecObjectFactory) === "function" ? _a : Object])
    ], ParamSpecsObjectFactory);
    return ParamSpecsObjectFactory;
}());
exports.ParamSpecsObjectFactory = ParamSpecsObjectFactory;
angular.module('oppia').factory('ParamSpecsObjectFactory', static_1.downgradeInjectable(ParamSpecsObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ParamTypeObjectFactory.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ParamTypeObjectFactory.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of ParamType
 * domain objects.
 */
var cloneDeep_1 = __importDefault(__webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js"));
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var ParamType = /** @class */ (function () {
    /**
     * @private @constructor
     * Defines a specific type that a parameter can take.
     *
     * IMPORTANT: All new types must be created in this file and registered in the
     * {@link ParamType.registry}. See {@link ParamType.registry.UnicodeString}
     * for an example.
     *
     * @param {Function.<?, Boolean>} validateFunction - Returns true when a value
     *    is valid.
     * @param {?} defaultValue - simple value any parameter of this type can take.
     */
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'typeDefinitionObject' is a dict with underscore_cased keys
    // which give tslint errors against underscore_casing in favor of camelCasing.
    function ParamType(typeDefinitionObject) {
        if (!typeDefinitionObject.validate(typeDefinitionObject.default_value)) {
            throw new Error('The default value is invalid according to validation function');
        }
        /** @member {String} */
        this._name = null;
        /** @member {Function.<?, Boolean>} */
        this.valueIsValid = typeDefinitionObject.validate;
        /** @member {?} */
        this.defaultValue = typeDefinitionObject.default_value;
    }
    /** @returns {?} - A valid default value for this particular type. */
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type can be be of any type.
    ParamType.prototype.createDefaultValue = function () {
        return cloneDeep_1.default(this.defaultValue);
    };
    /** @returns {String} - The display-name of this type. */
    ParamType.prototype.getName = function () {
        return this._name;
    };
    return ParamType;
}());
exports.ParamType = ParamType;
var ParamTypeObjectFactory = /** @class */ (function () {
    function ParamTypeObjectFactory() {
        var _this = this;
        // Type registration.
        /** @type {Object.<String, ParamType>} */
        this.registry = {
            UnicodeString: new ParamType({
                // TODO(#7165): Replace 'any' with the exact type. This has been
                // kept as 'any' because the return type can be be of any type.
                validate: function (value) {
                    return (typeof value === 'string' || value instanceof String);
                },
                default_value: ''
            })
        };
        // To finalize type registration, we encode the name of each type into their
        // definition, then freeze them from modifications.
        Object.keys(this.registry).forEach(function (paramTypeName) {
            // The bracket notation is needed since 'paramTypeName' is a dynamic
            // property and is not defined on 'registry'.
            /* eslint-disable dot-notation */
            var paramType = _this.registry[paramTypeName];
            /* eslint-enable dot-notation */
            paramType._name = paramTypeName;
            Object.freeze(paramType);
        });
        // Finally, we freeze the registry itself.
        Object.freeze(this.registry);
    }
    /** @returns {ParamType} - Implementation-defined default parameter type. */
    ParamTypeObjectFactory.prototype.getDefaultType = function () {
        return this.registry.UnicodeString;
    };
    /**
     * @param {String} backendName - the name of the type to fetch.
     * @returns {ParamType} - The associated type, if any.
     * @throws {Error} - When the given type name isn't registered.
     */
    ParamTypeObjectFactory.prototype.getTypeFromBackendName = function (backendName) {
        if (!this.registry.hasOwnProperty(backendName)) {
            throw new Error(backendName + ' is not a registered parameter type.');
        }
        // The bracket notation is needed since 'backendName' is a dynamic property
        // and is not defined on 'registry'.
        /* eslint-disable dot-notation */
        return this.registry[backendName];
        /* eslint-enable dot-notation */
    };
    ParamTypeObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [])
    ], ParamTypeObjectFactory);
    return ParamTypeObjectFactory;
}());
exports.ParamTypeObjectFactory = ParamTypeObjectFactory;
angular.module('oppia').factory('ParamTypeObjectFactory', static_1.downgradeInjectable(ParamTypeObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts":
/*!********************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to retrieve read only information
 * about explorations from the backend.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
angular.module('oppia').factory('ReadOnlyExplorationBackendApiService', [
    '$http', '$q', 'UrlInterpolationService',
    'EXPLORATION_DATA_URL_TEMPLATE', 'EXPLORATION_VERSION_DATA_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, EXPLORATION_DATA_URL_TEMPLATE, EXPLORATION_VERSION_DATA_URL_TEMPLATE) {
        // Maps previously loaded explorations to their IDs.
        var _explorationCache = [];
        var _fetchExploration = function (explorationId, version, successCallback, errorCallback) {
            var explorationDataUrl = _getExplorationUrl(explorationId, version);
            $http.get(explorationDataUrl).then(function (response) {
                var exploration = angular.copy(response.data);
                if (successCallback) {
                    successCallback(exploration);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _isCached = function (explorationId) {
            return _explorationCache.hasOwnProperty(explorationId);
        };
        var _getExplorationUrl = function (explorationId, version) {
            if (version) {
                return UrlInterpolationService.interpolateUrl(EXPLORATION_VERSION_DATA_URL_TEMPLATE, {
                    exploration_id: explorationId,
                    version: String(version)
                });
            }
            return UrlInterpolationService.interpolateUrl(EXPLORATION_DATA_URL_TEMPLATE, {
                exploration_id: explorationId
            });
        };
        return {
            /**
             * Retrieves an exploration from the backend given an exploration ID
             * and version number (or none). This returns a promise object that
             * allows success and rejection callbacks to be registered. If the
             * exploration is successfully loaded and a success callback function
             * is provided to the promise object, the success callback is called
             * with the exploration passed in as a parameter. If something goes
             * wrong while trying to fetch the exploration, the rejection callback
             * is called instead, if present. The rejection callback function is
             * passed any data returned by the backend in the case of an error.
             */
            fetchExploration: function (explorationId, version) {
                return $q(function (resolve, reject) {
                    _fetchExploration(explorationId, version, resolve, reject);
                });
            },
            /**
             * Behaves in the exact same way as fetchExploration (including
             * callback behavior and returning a promise object),
             * except this function will attempt to see whether the latest version
             * of the given exploration has already been loaded. If it has not yet
             * been loaded, it will fetch the exploration from the backend. If it
             * successfully retrieves the exploration from the backend, this method
             * will store the exploration in the cache to avoid requests from the
             * backend in further function calls.
             */
            loadLatestExploration: function (explorationId) {
                return $q(function (resolve, reject) {
                    if (_isCached(explorationId)) {
                        if (resolve) {
                            resolve(angular.copy(_explorationCache[explorationId]));
                        }
                    }
                    else {
                        _fetchExploration(explorationId, null, function (exploration) {
                            // Save the fetched exploration to avoid future fetches.
                            _explorationCache[explorationId] = exploration;
                            if (resolve) {
                                resolve(angular.copy(exploration));
                            }
                        }, reject);
                    }
                });
            },
            /**
             * Retrieves an exploration from the backend given an exploration ID
             * and version number. This method does not interact with any cache
             * and using this method will not overwrite or touch the state of the
             * cache. All previous data in the cache will still be retained after
             * this call.
             */
            loadExploration: function (explorationId, version) {
                return $q(function (resolve, reject) {
                    _fetchExploration(explorationId, version, function (exploration) {
                        if (resolve) {
                            resolve(angular.copy(exploration));
                        }
                    }, reject);
                });
            },
            /**
             * Returns whether the given exploration is stored within the local
             * data cache or if it needs to be retrieved from the backend upon a
             * load.
             */
            isCached: function (explorationId) {
                return _isCached(explorationId);
            },
            /**
             * Replaces the current exploration in the cache given by the specified
             * exploration ID with a new exploration object.
             */
            cacheExploration: function (explorationId, exploration) {
                _explorationCache[explorationId] = angular.copy(exploration);
            },
            /**
             * Clears the local exploration data cache, forcing all future loads to
             * re-request the previously loaded explorations from the backend.
             */
            clearExplorationCache: function () {
                _explorationCache = [];
            },
            /**
             * Deletes a specific exploration from the local cache
             */
            deleteExplorationFromCache: function (explorationId) {
                if (_isCached(explorationId)) {
                    delete _explorationCache[explorationId];
                }
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/RecordedVoiceoversObjectFactory.ts":
/*!***************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/RecordedVoiceoversObjectFactory.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of
 * RecordedVoiceovers domain objects.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var VoiceoverObjectFactory_1 = __webpack_require__(/*! domain/exploration/VoiceoverObjectFactory */ "./core/templates/dev/head/domain/exploration/VoiceoverObjectFactory.ts");
var RecordedVoiceovers = /** @class */ (function () {
    function RecordedVoiceovers(voiceoversMapping, voiceoverObjectFactory) {
        this.voiceoversMapping = voiceoversMapping;
        this._voiceoverObjectFactory = voiceoverObjectFactory;
    }
    RecordedVoiceovers.prototype.getAllContentId = function () {
        return Object.keys(this.voiceoversMapping);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with varying keys and the correct
    // type needs to be found.
    RecordedVoiceovers.prototype.getBindableVoiceovers = function (contentId) {
        return this.voiceoversMapping[contentId];
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    RecordedVoiceovers.prototype.getVoiceover = function (contentId, langCode) {
        return this.voiceoversMapping[contentId][langCode];
    };
    RecordedVoiceovers.prototype.markAllVoiceoversAsNeedingUpdate = function (contentId) {
        var languageCodeToVoiceover = this.voiceoversMapping[contentId];
        for (var languageCode in languageCodeToVoiceover) {
            languageCodeToVoiceover[languageCode].markAsNeedingUpdate();
        }
    };
    RecordedVoiceovers.prototype.getVoiceoverLanguageCodes = function (contentId) {
        return Object.keys(this.voiceoversMapping[contentId]);
    };
    RecordedVoiceovers.prototype.hasVoiceovers = function (contentId) {
        return this.getVoiceoverLanguageCodes(contentId).length > 0;
    };
    RecordedVoiceovers.prototype.hasUnflaggedVoiceovers = function (contentId) {
        var languageCodeToVoiceover = this.voiceoversMapping[contentId];
        for (var languageCode in languageCodeToVoiceover) {
            if (!languageCodeToVoiceover[languageCode].needsUpdate) {
                return true;
            }
        }
        return false;
    };
    RecordedVoiceovers.prototype.addContentId = function (contentId) {
        if (this.voiceoversMapping.hasOwnProperty(contentId)) {
            throw Error('Trying to add duplicate content id.');
        }
        this.voiceoversMapping[contentId] = {};
    };
    RecordedVoiceovers.prototype.deleteContentId = function (contentId) {
        if (!this.voiceoversMapping.hasOwnProperty(contentId)) {
            throw Error('Unable to find the given content id.');
        }
        delete this.voiceoversMapping[contentId];
    };
    RecordedVoiceovers.prototype.addVoiceover = function (contentId, languageCode, filename, fileSizeBytes) {
        var languageCodeToVoiceover = this.voiceoversMapping[contentId];
        if (languageCodeToVoiceover.hasOwnProperty(languageCode)) {
            throw Error('Trying to add duplicate language code.');
        }
        languageCodeToVoiceover[languageCode] =
            this._voiceoverObjectFactory.createNew(filename, fileSizeBytes);
    };
    RecordedVoiceovers.prototype.deleteVoiceover = function (contentId, languageCode) {
        var languageCodeToVoiceover = this.voiceoversMapping[contentId];
        if (!languageCodeToVoiceover.hasOwnProperty(languageCode)) {
            throw Error('Trying to remove non-existing translation for language code ' +
                languageCode);
        }
        delete languageCodeToVoiceover[languageCode];
    };
    RecordedVoiceovers.prototype.toggleNeedsUpdateAttribute = function (contentId, languageCode) {
        var languageCodeToVoiceover = this.voiceoversMapping[contentId];
        languageCodeToVoiceover[languageCode].toggleNeedsUpdateAttribute();
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    RecordedVoiceovers.prototype.toBackendDict = function () {
        var voiceoversMappingDict = {};
        for (var contentId in this.voiceoversMapping) {
            var languageCodeToVoiceover = this.voiceoversMapping[contentId];
            var languageCodeToVoiceoverDict = {};
            Object.keys(languageCodeToVoiceover).forEach(function (lang) {
                languageCodeToVoiceoverDict[lang] = (languageCodeToVoiceover[lang].toBackendDict());
            });
            voiceoversMappingDict[contentId] = languageCodeToVoiceoverDict;
        }
        return {
            voiceovers_mapping: voiceoversMappingDict
        };
    };
    return RecordedVoiceovers;
}());
exports.RecordedVoiceovers = RecordedVoiceovers;
var RecordedVoiceoversObjectFactory = /** @class */ (function () {
    function RecordedVoiceoversObjectFactory(voiceoverObjectFactory) {
        this.voiceoverObjectFactory = voiceoverObjectFactory;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'recordedVoiceoversDict' is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    RecordedVoiceoversObjectFactory.prototype.createFromBackendDict = function (recordedVoiceoversDict) {
        var _this = this;
        var voiceoversMapping = {};
        var voiceoversMappingDict = recordedVoiceoversDict.voiceovers_mapping;
        Object.keys(voiceoversMappingDict).forEach(function (contentId) {
            var languageCodeToVoiceoverDict = voiceoversMappingDict[contentId];
            var languageCodeToVoiceover = {};
            Object.keys(languageCodeToVoiceoverDict).forEach(function (langCode) {
                languageCodeToVoiceover[langCode] = (_this.voiceoverObjectFactory.createFromBackendDict(languageCodeToVoiceoverDict[langCode]));
            });
            voiceoversMapping[contentId] = languageCodeToVoiceover;
        });
        return new RecordedVoiceovers(voiceoversMapping, this.voiceoverObjectFactory);
    };
    RecordedVoiceoversObjectFactory.prototype.createEmpty = function () {
        return new RecordedVoiceovers({}, this.voiceoverObjectFactory);
    };
    var _a;
    RecordedVoiceoversObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof VoiceoverObjectFactory_1.VoiceoverObjectFactory !== "undefined" && VoiceoverObjectFactory_1.VoiceoverObjectFactory) === "function" ? _a : Object])
    ], RecordedVoiceoversObjectFactory);
    return RecordedVoiceoversObjectFactory;
}());
exports.RecordedVoiceoversObjectFactory = RecordedVoiceoversObjectFactory;
angular.module('oppia').factory('RecordedVoiceoversObjectFactory', static_1.downgradeInjectable(RecordedVoiceoversObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/RuleObjectFactory.ts":
/*!*************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/RuleObjectFactory.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of Rule
 * domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var Rule = /** @class */ (function () {
    function Rule(type, inputs) {
        this.type = type;
        this.inputs = inputs;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased keys which
    // gives tslint errors against underscore_casing in favor of camelCasing.
    Rule.prototype.toBackendDict = function () {
        return {
            rule_type: this.type,
            inputs: this.inputs
        };
    };
    return Rule;
}());
exports.Rule = Rule;
var RuleObjectFactory = /** @class */ (function () {
    function RuleObjectFactory() {
    }
    RuleObjectFactory.prototype.createNew = function (type, inputs) {
        return new Rule(type, inputs);
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'ruleDict' is a dict with underscore_cased keys which
    // gives tslint errors against underscore_casing in favor of camelCasing.
    RuleObjectFactory.prototype.createFromBackendDict = function (ruleDict) {
        return new Rule(ruleDict.rule_type, ruleDict.inputs);
    };
    RuleObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], RuleObjectFactory);
    return RuleObjectFactory;
}());
exports.RuleObjectFactory = RuleObjectFactory;
angular.module('oppia').factory('RuleObjectFactory', static_1.downgradeInjectable(RuleObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/SolutionObjectFactory.ts":
/*!*****************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/SolutionObjectFactory.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of Solution
 * domain objects.
 */
__webpack_require__(/*! domain/exploration/SubtitledHtmlObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts");
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
__webpack_require__(/*! domain/objects/NumberWithUnitsObjectFactory.ts */ "./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts");
__webpack_require__(/*! filters/string-utility-filters/convert-to-plain-text.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/convert-to-plain-text.filter.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').factory('SolutionObjectFactory', [
    '$filter', 'ExplorationHtmlFormatterService', 'FractionObjectFactory',
    'HtmlEscaperService', 'NumberWithUnitsObjectFactory',
    'SubtitledHtmlObjectFactory',
    function ($filter, ExplorationHtmlFormatterService, FractionObjectFactory, HtmlEscaperService, NumberWithUnitsObjectFactory, SubtitledHtmlObjectFactory) {
        var Solution = function (answerIsExclusive, correctAnswer, explanation) {
            this.answerIsExclusive = answerIsExclusive;
            this.correctAnswer = correctAnswer;
            this.explanation = explanation;
        };
        Solution.prototype.toBackendDict = function () {
            return {
                answer_is_exclusive: this.answerIsExclusive,
                correct_answer: this.correctAnswer,
                explanation: this.explanation.toBackendDict()
            };
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Solution['createFromBackendDict'] = function (solutionBackendDict) {
            /* eslint-enable dot-notation */
            return new Solution(solutionBackendDict.answer_is_exclusive, solutionBackendDict.correct_answer, SubtitledHtmlObjectFactory.createFromBackendDict(solutionBackendDict.explanation));
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Solution['createNew'] = function (
        /* eslint-enable dot-notation */
        answerIsExclusive, correctAnswer, explanationHtml, explanationId) {
            return new Solution(answerIsExclusive, correctAnswer, SubtitledHtmlObjectFactory.createDefault(explanationHtml, explanationId));
        };
        Solution.prototype.getSummary = function (interactionId) {
            var solutionType = (this.answerIsExclusive ? 'The only' : 'One');
            var correctAnswer = null;
            if (interactionId === 'GraphInput') {
                correctAnswer = '[Graph]';
            }
            else if (interactionId === 'MathExpressionInput') {
                correctAnswer = this.correctAnswer.latex;
            }
            else if (interactionId === 'CodeRepl' ||
                interactionId === 'PencilCodeEditor') {
                correctAnswer = this.correctAnswer.code;
            }
            else if (interactionId === 'MusicNotesInput') {
                correctAnswer = '[Music Notes]';
            }
            else if (interactionId === 'LogicProof') {
                correctAnswer = this.correctAnswer.correct;
            }
            else if (interactionId === 'FractionInput') {
                correctAnswer = FractionObjectFactory.fromDict(this.correctAnswer).toString();
            }
            else if (interactionId === 'NumberWithUnits') {
                correctAnswer = NumberWithUnitsObjectFactory.fromDict(this.correctAnswer).toString();
            }
            else {
                correctAnswer = (HtmlEscaperService.objToEscapedJson(this.correctAnswer));
            }
            var explanation = ($filter('convertToPlainText')(this.explanation.getHtml()));
            return (solutionType + ' solution is "' + correctAnswer +
                '". ' + explanation + '.');
        };
        Solution.prototype.setCorrectAnswer = function (correctAnswer) {
            this.correctAnswer = correctAnswer;
        };
        Solution.prototype.setExplanation = function (explanation) {
            this.explanation = explanation;
        };
        Solution.prototype.getOppiaShortAnswerResponseHtml = function (interaction) {
            return {
                prefix: (this.answerIsExclusive ? 'The only' : 'One'),
                answer: ExplorationHtmlFormatterService.getShortAnswerHtml(this.correctAnswer, interaction.id, interaction.customizationArgs)
            };
        };
        Solution.prototype.getOppiaSolutionExplanationResponseHtml =
            function () {
                return this.explanation.getHtml();
            };
        return Solution;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/StatesObjectFactory.ts":
/*!***************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/StatesObjectFactory.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of State
 * domain objects given a list of backend state dictionaries.
 */
__webpack_require__(/*! domain/state/StateObjectFactory.ts */ "./core/templates/dev/head/domain/state/StateObjectFactory.ts");
angular.module('oppia').factory('StatesObjectFactory', [
    'StateObjectFactory', 'INTERACTION_SPECS',
    function (StateObjectFactory, INTERACTION_SPECS) {
        var States = function (states) {
            this._states = states;
        };
        States.prototype.getState = function (stateName) {
            return angular.copy(this._states[stateName]);
        };
        // TODO(tjiang11): Remove getStateObjects() and replace calls
        // with an object to represent data to be manipulated inside
        // ExplorationDiffService.
        States.prototype.getStateObjects = function () {
            return angular.copy(this._states);
        };
        States.prototype.addState = function (newStateName) {
            this._states[newStateName] = StateObjectFactory.createDefaultState(newStateName);
        };
        States.prototype.setState = function (stateName, stateData) {
            this._states[stateName] = angular.copy(stateData);
        };
        States.prototype.hasState = function (stateName) {
            return this._states.hasOwnProperty(stateName);
        };
        States.prototype.deleteState = function (deleteStateName) {
            delete this._states[deleteStateName];
            for (var otherStateName in this._states) {
                var interaction = this._states[otherStateName].interaction;
                var groups = interaction.answerGroups;
                for (var i = 0; i < groups.length; i++) {
                    if (groups[i].outcome.dest === deleteStateName) {
                        groups[i].outcome.dest = otherStateName;
                    }
                }
                if (interaction.defaultOutcome) {
                    if (interaction.defaultOutcome.dest === deleteStateName) {
                        interaction.defaultOutcome.dest = otherStateName;
                    }
                }
            }
        };
        States.prototype.renameState = function (oldStateName, newStateName) {
            this._states[newStateName] = angular.copy(this._states[oldStateName]);
            this._states[newStateName].setName(newStateName);
            delete this._states[oldStateName];
            for (var otherStateName in this._states) {
                var interaction = this._states[otherStateName].interaction;
                var groups = interaction.answerGroups;
                for (var i = 0; i < groups.length; i++) {
                    if (groups[i].outcome.dest === oldStateName) {
                        groups[i].outcome.dest = newStateName;
                    }
                }
                if (interaction.defaultOutcome) {
                    if (interaction.defaultOutcome.dest === oldStateName) {
                        interaction.defaultOutcome.dest = newStateName;
                    }
                }
            }
        };
        States.prototype.getStateNames = function () {
            return Object.keys(this._states);
        };
        States.prototype.getFinalStateNames = function () {
            var finalStateNames = [];
            for (var stateName in this._states) {
                var interaction = this._states[stateName].interaction;
                if (interaction.id && INTERACTION_SPECS[interaction.id].is_terminal) {
                    finalStateNames.push(stateName);
                }
            }
            return finalStateNames;
        };
        States.prototype.getAllVoiceoverLanguageCodes = function () {
            var allAudioLanguageCodes = [];
            for (var stateName in this._states) {
                var state = this._states[stateName];
                var contentIdsList = state.recordedVoiceovers.getAllContentId();
                contentIdsList.forEach(function (contentId) {
                    var audioLanguageCodes = (state.recordedVoiceovers.getVoiceoverLanguageCodes(contentId));
                    audioLanguageCodes.forEach(function (languageCode) {
                        if (allAudioLanguageCodes.indexOf(languageCode) === -1) {
                            allAudioLanguageCodes.push(languageCode);
                        }
                    });
                });
            }
            return allAudioLanguageCodes;
        };
        States.prototype.getAllVoiceovers = function (languageCode) {
            var allAudioTranslations = {};
            for (var stateName in this._states) {
                var state = this._states[stateName];
                allAudioTranslations[stateName] = [];
                var contentIdsList = state.recordedVoiceovers.getAllContentId();
                contentIdsList.forEach(function (contentId) {
                    var audioTranslations = (state.recordedVoiceovers.getBindableVoiceovers(contentId));
                    if (audioTranslations.hasOwnProperty(languageCode)) {
                        allAudioTranslations[stateName].push(audioTranslations[languageCode]);
                    }
                });
            }
            return allAudioTranslations;
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        States['createFromBackendDict'] = function (statesBackendDict) {
            /* eslint-enable dot-notation */
            var stateObjectsDict = {};
            for (var stateName in statesBackendDict) {
                stateObjectsDict[stateName] = StateObjectFactory.createFromBackendDict(stateName, statesBackendDict[stateName]);
            }
            return new States(stateObjectsDict);
        };
        return States;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts":
/*!**********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of SubtitledHtml
 * domain objects.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var SubtitledHtml = /** @class */ (function () {
    function SubtitledHtml(html, contentId) {
        this._html = html;
        this._contentId = contentId;
    }
    SubtitledHtml.prototype.getHtml = function () {
        return this._html;
    };
    SubtitledHtml.prototype.getContentId = function () {
        return this._contentId;
    };
    SubtitledHtml.prototype.setHtml = function (newHtml) {
        this._html = newHtml;
    };
    SubtitledHtml.prototype.hasNoHtml = function () {
        return !this._html;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    SubtitledHtml.prototype.toBackendDict = function () {
        return {
            html: this._html,
            content_id: this._contentId
        };
    };
    SubtitledHtml.prototype.isEmpty = function () {
        return this.hasNoHtml();
    };
    return SubtitledHtml;
}());
exports.SubtitledHtml = SubtitledHtml;
var SubtitledHtmlObjectFactory = /** @class */ (function () {
    function SubtitledHtmlObjectFactory() {
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'subtitledHtmlBackendDict' is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    SubtitledHtmlObjectFactory.prototype.createFromBackendDict = function (subtitledHtmlBackendDict) {
        return new SubtitledHtml(subtitledHtmlBackendDict.html, subtitledHtmlBackendDict.content_id);
    };
    SubtitledHtmlObjectFactory.prototype.createDefault = function (html, contentId) {
        return new SubtitledHtml(html, contentId);
    };
    SubtitledHtmlObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], SubtitledHtmlObjectFactory);
    return SubtitledHtmlObjectFactory;
}());
exports.SubtitledHtmlObjectFactory = SubtitledHtmlObjectFactory;
angular.module('oppia').factory('SubtitledHtmlObjectFactory', static_1.downgradeInjectable(SubtitledHtmlObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/VoiceoverObjectFactory.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/VoiceoverObjectFactory.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of
 * Voiceover domain objects.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var Voiceover = /** @class */ (function () {
    function Voiceover(filename, fileSizeBytes, needsUpdate) {
        this.filename = filename;
        this.fileSizeBytes = fileSizeBytes;
        this.needsUpdate = needsUpdate;
    }
    Voiceover.prototype.markAsNeedingUpdate = function () {
        this.needsUpdate = true;
    };
    Voiceover.prototype.toggleNeedsUpdateAttribute = function () {
        this.needsUpdate = !this.needsUpdate;
    };
    Voiceover.prototype.getFileSizeMB = function () {
        var NUM_BYTES_IN_MB = 1 << 20;
        return this.fileSizeBytes / NUM_BYTES_IN_MB;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' since 'toBackendDict' returns a dict with underscore_cased keys which
    // gives tslint errors against underscore_casing in favor of camelCasing.
    Voiceover.prototype.toBackendDict = function () {
        return {
            filename: this.filename,
            file_size_bytes: this.fileSizeBytes,
            needs_update: this.needsUpdate
        };
    };
    return Voiceover;
}());
exports.Voiceover = Voiceover;
var VoiceoverObjectFactory = /** @class */ (function () {
    function VoiceoverObjectFactory() {
    }
    VoiceoverObjectFactory.prototype.createNew = function (filename, fileSizeBytes) {
        return new Voiceover(filename, fileSizeBytes, false);
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' since 'translationBackendDict' is a dict with underscore_cased keys
    // which gives tslint errors against underscore_casing in favor of
    // camelCasing.
    VoiceoverObjectFactory.prototype.createFromBackendDict = function (translationBackendDict) {
        return new Voiceover(translationBackendDict.filename, translationBackendDict.file_size_bytes, translationBackendDict.needs_update);
    };
    VoiceoverObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], VoiceoverObjectFactory);
    return VoiceoverObjectFactory;
}());
exports.VoiceoverObjectFactory = VoiceoverObjectFactory;
angular.module('oppia').factory('VoiceoverObjectFactory', static_1.downgradeInjectable(VoiceoverObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/WrittenTranslationObjectFactory.ts":
/*!***************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/WrittenTranslationObjectFactory.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of
 * WrittenTranslation domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var WrittenTranslation = /** @class */ (function () {
    function WrittenTranslation(html, needsUpdate) {
        this.html = html;
        this.needsUpdate = needsUpdate;
    }
    WrittenTranslation.prototype.getHtml = function () {
        return this.html;
    };
    WrittenTranslation.prototype.setHtml = function (html) {
        this.html = html;
    };
    WrittenTranslation.prototype.markAsNeedingUpdate = function () {
        this.needsUpdate = true;
    };
    WrittenTranslation.prototype.toggleNeedsUpdateAttribute = function () {
        this.needsUpdate = !this.needsUpdate;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased keys which
    // gives tslint errors against underscore_casing in favor of camelCasing.
    WrittenTranslation.prototype.toBackendDict = function () {
        return {
            html: this.html,
            needs_update: this.needsUpdate
        };
    };
    return WrittenTranslation;
}());
exports.WrittenTranslation = WrittenTranslation;
var WrittenTranslationObjectFactory = /** @class */ (function () {
    function WrittenTranslationObjectFactory() {
    }
    WrittenTranslationObjectFactory.prototype.createNew = function (html) {
        return new WrittenTranslation(html, false);
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'translationBackendDict' is a dict with underscore_cased keys
    // which gives tslint errors against underscore_casing in favor of
    // camelCasing.
    WrittenTranslationObjectFactory.prototype.createFromBackendDict = function (translationBackendDict) {
        return new WrittenTranslation(translationBackendDict.html, translationBackendDict.needs_update);
    };
    WrittenTranslationObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], WrittenTranslationObjectFactory);
    return WrittenTranslationObjectFactory;
}());
exports.WrittenTranslationObjectFactory = WrittenTranslationObjectFactory;
angular.module('oppia').factory('WrittenTranslationObjectFactory', static_1.downgradeInjectable(WrittenTranslationObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/exploration/WrittenTranslationsObjectFactory.ts":
/*!****************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/exploration/WrittenTranslationsObjectFactory.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of
 * WrittenTranslations domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var WrittenTranslationObjectFactory_1 = __webpack_require__(/*! domain/exploration/WrittenTranslationObjectFactory */ "./core/templates/dev/head/domain/exploration/WrittenTranslationObjectFactory.ts");
var WrittenTranslations = /** @class */ (function () {
    function WrittenTranslations(translationsMapping, writtenTranslationObjectFactory) {
        this.translationsMapping = translationsMapping;
        this._writtenTranslationObjectFactory = writtenTranslationObjectFactory;
    }
    WrittenTranslations.prototype.getAllContentId = function () {
        return Object.keys(this.translationsMapping);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict whose exact type needs to be
    // found by doing a good research.
    WrittenTranslations.prototype.getWrittenTranslation = function (contentId, langCode) {
        return this.translationsMapping[contentId][langCode];
    };
    WrittenTranslations.prototype.markAllTranslationsAsNeedingUpdate = function (contentId) {
        var languageCodeToWrittenTranslation = (this.translationsMapping[contentId]);
        for (var languageCode in languageCodeToWrittenTranslation) {
            languageCodeToWrittenTranslation[languageCode].markAsNeedingUpdate();
        }
    };
    WrittenTranslations.prototype.getTranslationsLanguageCodes = function (contentId) {
        return Object.keys(this.translationsMapping[contentId]);
    };
    WrittenTranslations.prototype.hasWrittenTranslation = function (contentId, langaugeCode) {
        if (!this.translationsMapping.hasOwnProperty(contentId)) {
            return false;
        }
        return this.getTranslationsLanguageCodes(contentId).indexOf(langaugeCode) !== -1;
    };
    WrittenTranslations.prototype.hasUnflaggedWrittenTranslations = function (contentId) {
        var writtenTranslations = this.translationsMapping[contentId];
        for (var languageCode in writtenTranslations) {
            if (!writtenTranslations[languageCode].needsUpdate) {
                return true;
            }
        }
        return false;
    };
    WrittenTranslations.prototype.addContentId = function (contentId) {
        if (this.translationsMapping.hasOwnProperty(contentId)) {
            throw Error('Trying to add duplicate content id.');
        }
        this.translationsMapping[contentId] = {};
    };
    WrittenTranslations.prototype.deleteContentId = function (contentId) {
        if (!this.translationsMapping.hasOwnProperty(contentId)) {
            throw Error('Unable to find the given content id.');
        }
        delete this.translationsMapping[contentId];
    };
    WrittenTranslations.prototype.addWrittenTranslation = function (contentId, languageCode, html) {
        var writtenTranslations = this.translationsMapping[contentId];
        if (writtenTranslations.hasOwnProperty(languageCode)) {
            throw Error('Trying to add duplicate language code.');
        }
        writtenTranslations[languageCode] = (this._writtenTranslationObjectFactory.createNew(html));
    };
    WrittenTranslations.prototype.updateWrittenTranslationHtml = function (contentId, languageCode, html) {
        var writtenTranslations = this.translationsMapping[contentId];
        if (!writtenTranslations.hasOwnProperty(languageCode)) {
            throw Error('Unable to find the given language code.');
        }
        writtenTranslations[languageCode].setHtml(html);
        // Marking translation updated.
        writtenTranslations[languageCode].needsUpdate = false;
    };
    WrittenTranslations.prototype.toggleNeedsUpdateAttribute = function (contentId, languageCode) {
        var writtenTranslations = this.translationsMapping[contentId];
        writtenTranslations[languageCode].toggleNeedsUpdateAttribute();
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased keys which
    // give tslint errors against underscore_casing in favor of camelCasing.
    WrittenTranslations.prototype.toBackendDict = function () {
        var translationsMappingDict = {};
        for (var contentId in this.translationsMapping) {
            var langaugeToWrittenTranslation = this.translationsMapping[contentId];
            var langaugeToWrittenTranslationDict = {};
            Object.keys(langaugeToWrittenTranslation).forEach(function (lang) {
                langaugeToWrittenTranslationDict[lang] = (langaugeToWrittenTranslation[lang].toBackendDict());
            });
            translationsMappingDict[contentId] = langaugeToWrittenTranslationDict;
        }
        return { translations_mapping: translationsMappingDict };
    };
    return WrittenTranslations;
}());
exports.WrittenTranslations = WrittenTranslations;
var WrittenTranslationsObjectFactory = /** @class */ (function () {
    function WrittenTranslationsObjectFactory(writtenTranslationObjectFactory) {
        this.writtenTranslationObjectFactory = writtenTranslationObjectFactory;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'writtenTranslationsDict' is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    WrittenTranslationsObjectFactory.prototype.createFromBackendDict = function (writtenTranslationsDict) {
        var _this = this;
        var translationsMapping = {};
        Object.keys(writtenTranslationsDict.translations_mapping).forEach(function (contentId) {
            translationsMapping[contentId] = {};
            var languageCodeToWrittenTranslationDict = (writtenTranslationsDict.translations_mapping[contentId]);
            Object.keys(languageCodeToWrittenTranslationDict).forEach(function (langCode) {
                translationsMapping[contentId][langCode] = (_this.writtenTranslationObjectFactory.createFromBackendDict(languageCodeToWrittenTranslationDict[langCode]));
            });
        });
        return new WrittenTranslations(translationsMapping, this.writtenTranslationObjectFactory);
    };
    WrittenTranslationsObjectFactory.prototype.createEmpty = function () {
        return new WrittenTranslations({}, this.writtenTranslationObjectFactory);
    };
    var _a;
    WrittenTranslationsObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof WrittenTranslationObjectFactory_1.WrittenTranslationObjectFactory !== "undefined" && WrittenTranslationObjectFactory_1.WrittenTranslationObjectFactory) === "function" ? _a : Object])
    ], WrittenTranslationsObjectFactory);
    return WrittenTranslationsObjectFactory;
}());
exports.WrittenTranslationsObjectFactory = WrittenTranslationsObjectFactory;
angular.module('oppia').factory('WrittenTranslationsObjectFactory', static_1.downgradeInjectable(WrittenTranslationsObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/learner_dashboard/LearnerDashboardIconsDirective.ts":
/*!********************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/learner_dashboard/LearnerDashboardIconsDirective.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for showing learner dashboard icons.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('learnerDashboardIcons', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                getActivityType: '&activityType',
                getActivityId: '&activityId',
                getActivityTitle: '&activityTitle',
                activityActive: '=activityActive',
                isContainerNarrow: '&containerIsNarrow',
                isAddToPlaylistIconShown: '&addToPlaylistIconIsShown'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/domain/learner_dashboard/' +
                'learner_dashboard_icons_directive.html'),
            controller: [
                '$scope', 'LearnerDashboardIdsBackendApiService',
                'LearnerDashboardActivityIdsObjectFactory',
                'LearnerPlaylistService', 'ACTIVITY_TYPE_COLLECTION',
                'ACTIVITY_TYPE_EXPLORATION',
                function ($scope, LearnerDashboardIdsBackendApiService, LearnerDashboardActivityIdsObjectFactory, LearnerPlaylistService, ACTIVITY_TYPE_COLLECTION, ACTIVITY_TYPE_EXPLORATION) {
                    $scope.activityIsCurrentlyHoveredOver = true;
                    $scope.playlistTooltipIsEnabled = false;
                    $scope.enablePlaylistTooltip = function () {
                        $scope.playlistTooltipIsEnabled = true;
                    };
                    $scope.disablePlaylistTooltip = function () {
                        $scope.playlistTooltipIsEnabled = false;
                    };
                    $scope.$watch('activityActive', function (value) {
                        $scope.activityIsCurrentlyHoveredOver = $scope.activityActive;
                    });
                    LearnerDashboardIdsBackendApiService.fetchLearnerDashboardIds().then(function (response) {
                        $scope.learnerDashboardActivityIds = (LearnerDashboardActivityIdsObjectFactory.createFromBackendDict(response.learner_dashboard_activity_ids));
                    });
                    $scope.setHoverState = function (hoverState) {
                        $scope.activityIsCurrentlyHoveredOver = hoverState;
                    };
                    $scope.canActivityBeAddedToLearnerPlaylist = function (activityId) {
                        if ($scope.learnerDashboardActivityIds) {
                            if ($scope.learnerDashboardActivityIds.includesActivity(activityId)) {
                                return false;
                            }
                            else {
                                if ($scope.isContainerNarrow()) {
                                    return true;
                                }
                                else {
                                    return $scope.activityIsCurrentlyHoveredOver;
                                }
                            }
                        }
                    };
                    $scope.belongsToLearnerPlaylist = function () {
                        var activityType = $scope.getActivityType();
                        if ($scope.learnerDashboardActivityIds) {
                            /* eslint-disable max-len */
                            if (activityType === ACTIVITY_TYPE_EXPLORATION) {
                                return ($scope.learnerDashboardActivityIds.belongsToExplorationPlaylist($scope.getActivityId()));
                            }
                            else if (activityType === ACTIVITY_TYPE_COLLECTION) {
                                return ($scope.learnerDashboardActivityIds.belongsToCollectionPlaylist($scope.getActivityId()));
                            }
                            /* eslint-enable max-len */
                        }
                    };
                    $scope.belongsToCompletedActivities = function () {
                        var activityType = $scope.getActivityType();
                        if ($scope.learnerDashboardActivityIds) {
                            /* eslint-disable max-len */
                            if (activityType === ACTIVITY_TYPE_EXPLORATION) {
                                return ($scope.learnerDashboardActivityIds.belongsToCompletedExplorations($scope.getActivityId()));
                            }
                            else if (activityType === ACTIVITY_TYPE_COLLECTION) {
                                return ($scope.learnerDashboardActivityIds.belongsToCompletedCollections($scope.getActivityId()));
                            }
                            /* eslint-enable max-len */
                        }
                    };
                    $scope.belongsToIncompleteActivities = function () {
                        var activityType = $scope.getActivityType();
                        if ($scope.learnerDashboardActivityIds) {
                            /* eslint-disable max-len */
                            if (activityType === ACTIVITY_TYPE_EXPLORATION) {
                                return ($scope.learnerDashboardActivityIds.belongsToIncompleteExplorations($scope.getActivityId()));
                            }
                            else if (activityType === ACTIVITY_TYPE_COLLECTION) {
                                return ($scope.learnerDashboardActivityIds.belongsToIncompleteCollections($scope.getActivityId()));
                            }
                            /* eslint-enable max-len */
                        }
                    };
                    $scope.addToLearnerPlaylist = function (activityId, activityType) {
                        var isSuccessfullyAdded = (LearnerPlaylistService.addToLearnerPlaylist(activityId, activityType));
                        if (isSuccessfullyAdded) {
                            if (activityType === ACTIVITY_TYPE_EXPLORATION) {
                                /* eslint-disable max-len */
                                $scope.learnerDashboardActivityIds.addToExplorationLearnerPlaylist(activityId);
                                /* eslint-enable max-len */
                            }
                            else if (activityType === ACTIVITY_TYPE_COLLECTION) {
                                /* eslint-disable max-len */
                                $scope.learnerDashboardActivityIds.addToCollectionLearnerPlaylist(activityId);
                                /* eslint-enable max-len */
                            }
                            $scope.disablePlaylistTooltip();
                        }
                    };
                    $scope.removeFromLearnerPlaylist = function (activityId, activityTitle, activityType) {
                        var isSuccessfullyRemoved = (LearnerPlaylistService.removeFromLearnerPlaylist(activityId, activityTitle, activityType, $scope.learnerDashboardActivityIds));
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts":
/*!*************************************************************************!*\
  !*** ./core/templates/dev/head/domain/objects/FractionObjectFactory.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating instances of Fraction
 * domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var objects_domain_constants_1 = __webpack_require__(/*! domain/objects/objects-domain.constants */ "./core/templates/dev/head/domain/objects/objects-domain.constants.ts");
var Fraction = /** @class */ (function () {
    function Fraction(isNegative, wholeNumber, numerator, denominator) {
        this.isNegative = isNegative;
        this.wholeNumber = wholeNumber;
        this.numerator = numerator;
        this.denominator = denominator;
    }
    Fraction.prototype.toString = function () {
        var fractionString = '';
        if (this.numerator !== 0) {
            fractionString += this.numerator + '/' + this.denominator;
        }
        if (this.wholeNumber !== 0) {
            fractionString = this.wholeNumber + ' ' + fractionString;
            // If the fractional part was empty then there will be a trailing
            // whitespace.
            fractionString = fractionString.trim();
        }
        if (this.isNegative && fractionString !== '') {
            fractionString = '-' + fractionString;
        }
        return fractionString === '' ? '0' : fractionString;
    };
    Fraction.prototype.toDict = function () {
        return {
            isNegative: this.isNegative,
            wholeNumber: this.wholeNumber,
            numerator: this.numerator,
            denominator: this.denominator
        };
    };
    Fraction.prototype.toFloat = function () {
        var totalParts = (this.wholeNumber * this.denominator) + this.numerator;
        var floatVal = (totalParts / this.denominator);
        return this.isNegative ? -floatVal : floatVal;
    };
    Fraction.prototype.getIntegerPart = function () {
        return this.isNegative ? -this.wholeNumber : this.wholeNumber;
    };
    Fraction.prototype.convertToSimplestForm = function () {
        var gcd = function (x, y) {
            return y === 0 ? x : gcd(y, x % y);
        };
        var g = gcd(this.numerator, this.denominator);
        var numerator = this.numerator / g;
        var denominator = this.denominator / g;
        return new Fraction(this.isNegative, this.wholeNumber, numerator, denominator);
    };
    Fraction.prototype.hasNonzeroIntegerPart = function () {
        return this.wholeNumber !== 0;
    };
    Fraction.prototype.isImproperFraction = function () {
        return this.denominator <= this.numerator;
    };
    return Fraction;
}());
exports.Fraction = Fraction;
var FractionObjectFactory = /** @class */ (function () {
    function FractionObjectFactory() {
    }
    FractionObjectFactory.prototype.fromRawInputString = function (rawInput) {
        var INVALID_CHARS_REGEX = /[^\d\s\/-]/g;
        if (INVALID_CHARS_REGEX.test(rawInput)) {
            throw new Error(objects_domain_constants_1.ObjectsDomainConstants.FRACTION_PARSING_ERRORS.INVALID_CHARS);
        }
        var FRACTION_REGEX = /^\s*-?\s*((\d*\s*\d+\s*\/\s*\d+)|\d+)\s*$/;
        if (!FRACTION_REGEX.test(rawInput)) {
            throw new Error(objects_domain_constants_1.ObjectsDomainConstants.FRACTION_PARSING_ERRORS.INVALID_FORMAT);
        }
        var isNegative = false;
        var wholeNumber = 0;
        var numerator = 0;
        var denominator = 1;
        rawInput = rawInput.trim();
        if (rawInput.charAt(0) === '-') {
            isNegative = true;
            // Remove the negative char from the string.
            rawInput = rawInput.substring(1);
        }
        // Filter result from split to remove empty strings.
        var numbers = rawInput.split(/\/|\s/g).filter(function (token) {
            // The empty string will evaluate to false.
            return Boolean(token);
        });
        if (numbers.length === 1) {
            wholeNumber = parseInt(numbers[0]);
        }
        else if (numbers.length === 2) {
            numerator = parseInt(numbers[0]);
            denominator = parseInt(numbers[1]);
        }
        else {
            // numbers.length == 3
            wholeNumber = parseInt(numbers[0]);
            numerator = parseInt(numbers[1]);
            denominator = parseInt(numbers[2]);
        }
        if (denominator === 0) {
            throw new Error(objects_domain_constants_1.ObjectsDomainConstants.FRACTION_PARSING_ERRORS.DIVISION_BY_ZERO);
        }
        return new Fraction(isNegative, wholeNumber, numerator, denominator);
    };
    FractionObjectFactory.prototype.fromDict = function (fractionDict) {
        return new Fraction(fractionDict.isNegative, fractionDict.wholeNumber, fractionDict.numerator, fractionDict.denominator);
    };
    FractionObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], FractionObjectFactory);
    return FractionObjectFactory;
}());
exports.FractionObjectFactory = FractionObjectFactory;
angular.module('oppia').factory('FractionObjectFactory', static_1.downgradeInjectable(FractionObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/objects/NumberWithUnitsObjectFactory.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating instances of NumberWithUnits
 * domain objects.
 */
__webpack_require__(/*! domain/objects/FractionObjectFactory.ts */ "./core/templates/dev/head/domain/objects/FractionObjectFactory.ts");
__webpack_require__(/*! domain/objects/UnitsObjectFactory.ts */ "./core/templates/dev/head/domain/objects/UnitsObjectFactory.ts");
__webpack_require__(/*! domain/objects/objects-domain.constants.ajs.ts */ "./core/templates/dev/head/domain/objects/objects-domain.constants.ajs.ts");
/* Guidelines for adding new custom currency units in Number with Units
  interaction:

  Simply add currency unit to the dict of CURRENCY_UNITS constant and it will
  be automatically added to the allowed custom units. Following are the keys
  to be defined within the unit dict:
    name:  The name of the custom currency unit.
    aliases: Other allowed canonical forms of the currency unit.
    front_units: A list of all the currency symbols that are added to the front
      (like- $, Rs, ₹). Keep it an empty list if no symbol is needed.
    base_unit: Define the unit in terms of base unit only if the defined custom
      unit is a sub unit else assign it 'null' value.*/
angular.module('oppia').factory('NumberWithUnitsObjectFactory', [
    'FractionObjectFactory', 'UnitsObjectFactory', 'CURRENCY_UNITS',
    'NUMBER_WITH_UNITS_PARSING_ERRORS', function (FractionObjectFactory, UnitsObjectFactory, CURRENCY_UNITS, NUMBER_WITH_UNITS_PARSING_ERRORS) {
        var NumberWithUnits = function (type, real, fractionObj, unitsObj) {
            this.type = type;
            this.real = real;
            this.fraction = fractionObj;
            this.units = unitsObj.units;
        };
        NumberWithUnits.prototype.toString = function () {
            var numberWithUnitsString = '';
            var unitsString = UnitsObjectFactory.fromList(this.units).toString();
            if (unitsString.includes('$')) {
                unitsString = unitsString.replace('$', '');
                numberWithUnitsString += '$' + ' ';
            }
            if (unitsString.includes('Rs')) {
                unitsString = unitsString.replace('Rs', '');
                numberWithUnitsString += 'Rs' + ' ';
            }
            if (unitsString.includes('₹')) {
                unitsString = unitsString.replace('₹', '');
                numberWithUnitsString += '₹' + ' ';
            }
            if (this.type === 'real') {
                numberWithUnitsString += this.real + ' ';
            }
            else if (this.type === 'fraction') {
                numberWithUnitsString += this.fraction.toString() + ' ';
            }
            numberWithUnitsString += unitsString.trim();
            numberWithUnitsString = numberWithUnitsString.trim();
            return numberWithUnitsString;
        };
        NumberWithUnits.prototype.toMathjsCompatibleString = function () {
            var numberWithUnitsString = '';
            var unitsString = UnitsObjectFactory.fromList(this.units).toString();
            unitsString = UnitsObjectFactory.toMathjsCompatibleString(unitsString);
            if (this.type === 'real') {
                numberWithUnitsString += this.real + ' ';
            }
            else if (this.type === 'fraction') {
                numberWithUnitsString += this.fraction.toString() + ' ';
            }
            numberWithUnitsString += unitsString.trim();
            numberWithUnitsString = numberWithUnitsString.trim();
            return numberWithUnitsString;
        };
        NumberWithUnits.prototype.toDict = function () {
            return {
                type: this.type,
                real: this.real,
                fraction: this.fraction.toDict(),
                units: this.units
            };
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        NumberWithUnits['createCurrencyUnits'] = function () {
            /* eslint-enable dot-notation */
            try {
                UnitsObjectFactory.createCurrencyUnits();
            }
            catch (parsingError) { }
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        NumberWithUnits['fromRawInputString'] = function (rawInput) {
            /* eslint-enable dot-notation */
            rawInput = rawInput.trim();
            var type = '';
            var real = 0.0;
            // Default fraction value.
            var fractionObj = FractionObjectFactory.fromRawInputString('0/1');
            var units = '';
            var value = '';
            var unitObj = [];
            // Allow validation only when rawInput is not null or an empty string.
            if (rawInput !== '' && rawInput !== null) {
                // Start with digit when there is no currency unit.
                if (rawInput.match(/^\d/)) {
                    var ind = rawInput.indexOf(rawInput.match(/[a-z(₹$]/i));
                    if (ind === -1) {
                        // There is value with no units.
                        value = rawInput;
                        units = '';
                    }
                    else {
                        value = rawInput.substr(0, ind).trim();
                        units = rawInput.substr(ind).trim();
                    }
                    var keys = Object.keys(CURRENCY_UNITS);
                    for (var i = 0; i < keys.length; i++) {
                        for (var j = 0; j < CURRENCY_UNITS[keys[i]].front_units.length; j++) {
                            if (units.indexOf(CURRENCY_UNITS[keys[i]].front_units[j]) !== -1) {
                                throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_CURRENCY_FORMAT);
                            }
                        }
                    }
                }
                else {
                    var startsWithCorrectCurrencyUnit = false;
                    var keys = Object.keys(CURRENCY_UNITS);
                    for (var i = 0; i < keys.length; i++) {
                        for (var j = 0; j < CURRENCY_UNITS[keys[i]].front_units.length; j++) {
                            if (rawInput.startsWith(CURRENCY_UNITS[keys[i]].front_units[j])) {
                                startsWithCorrectCurrencyUnit = true;
                                break;
                            }
                        }
                    }
                    if (startsWithCorrectCurrencyUnit === false) {
                        throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_CURRENCY);
                    }
                    var ind = rawInput.indexOf(rawInput.match(/[0-9]/));
                    if (ind === -1) {
                        throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_CURRENCY);
                    }
                    units = rawInput.substr(0, ind).trim();
                    startsWithCorrectCurrencyUnit = false;
                    for (var i = 0; i < keys.length; i++) {
                        for (var j = 0; j < CURRENCY_UNITS[keys[i]].front_units.length; j++) {
                            if (units === CURRENCY_UNITS[keys[i]].front_units[j].trim()) {
                                startsWithCorrectCurrencyUnit = true;
                                break;
                            }
                        }
                    }
                    if (startsWithCorrectCurrencyUnit === false) {
                        throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_CURRENCY);
                    }
                    units = units + ' ';
                    var ind2 = rawInput.indexOf(rawInput.substr(ind).match(/[a-z(]/i));
                    if (ind2 !== -1) {
                        value = rawInput.substr(ind, ind2 - ind).trim();
                        units += rawInput.substr(ind2).trim();
                    }
                    else {
                        value = rawInput.substr(ind).trim();
                        units = units.trim();
                    }
                }
                // Checking invalid characters in value.
                if (value.match(/[a-z]/i) || value.match(/[*^$₹()#@]/)) {
                    throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_VALUE);
                }
                if (value.includes('/')) {
                    type = 'fraction';
                    fractionObj = FractionObjectFactory.fromRawInputString(value);
                }
                else {
                    type = 'real';
                    real = parseFloat(value);
                }
                if (units !== '') {
                    // Checking invalid characters in units.
                    if (units.match(/[^0-9a-z/* ^()₹$-]/i)) {
                        throw new Error(NUMBER_WITH_UNITS_PARSING_ERRORS.INVALID_UNIT_CHARS);
                    }
                }
            }
            var unitsObj = UnitsObjectFactory.fromRawInputString(units);
            return new NumberWithUnits(type, real, fractionObj, unitsObj);
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        NumberWithUnits['fromDict'] = function (numberWithUnitsDict) {
            /* eslint-enable dot-notation */
            return new NumberWithUnits(numberWithUnitsDict.type, numberWithUnitsDict.real, FractionObjectFactory.fromDict(numberWithUnitsDict.fraction), UnitsObjectFactory.fromList(numberWithUnitsDict.units));
        };
        return NumberWithUnits;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/objects/UnitsObjectFactory.ts":
/*!**********************************************************************!*\
  !*** ./core/templates/dev/head/domain/objects/UnitsObjectFactory.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
// TODO(#7403): Convert this to partial imports.
var mathjs_1 = __importDefault(__webpack_require__(/*! mathjs */ "./node_modules/mathjs/index.js"));
var objects_domain_constants_1 = __webpack_require__(/*! domain/objects/objects-domain.constants */ "./core/templates/dev/head/domain/objects/objects-domain.constants.ts");
var Units = /** @class */ (function () {
    function Units(unitsList) {
        this.units = unitsList;
    }
    Units.prototype.toDict = function () {
        return {
            units: this.units
        };
    };
    Units.prototype.toString = function () {
        var unit = '';
        for (var i = 0; i < this.units.length; i++) {
            var d = this.units[i];
            if (d.exponent === 1) {
                unit += d.unit + ' ';
            }
            else {
                unit += d.unit + '^' + d.exponent.toString() + ' ';
            }
        }
        return unit.trim();
    };
    return Units;
}());
exports.Units = Units;
var UnitsObjectFactory = /** @class */ (function () {
    function UnitsObjectFactory() {
    }
    UnitsObjectFactory.prototype.isunit = function (unit) {
        return !('/*() '.includes(unit));
    };
    UnitsObjectFactory.prototype.stringToLexical = function (units) {
        units += '#';
        var unitList = [];
        var unit = '';
        for (var i = 0; i < units.length; i++) {
            if ('*/()# '.includes(units[i]) && unit !== 'per') {
                if (unit.length > 0) {
                    if ((unitList.length > 0) && this.isunit(unitList.slice(-1).pop())) {
                        unitList.push('*');
                    }
                    unitList.push(unit);
                    unit = '';
                }
                if (!('# '.includes(units[i]))) {
                    unitList.push(units[i]);
                }
            }
            else if (units[i] === ' ' && unit === 'per') {
                unitList.push('/');
                unit = '';
            }
            else {
                unit += units[i];
            }
        }
        return unitList;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a list with varying element types. An
    // exact type needs to be found for it.
    UnitsObjectFactory.prototype.unitWithMultiplier = function (unitList) {
        var multiplier = 1;
        var unitsWithMultiplier = [];
        var parenthesisStack = [];
        for (var ind = 0; ind < unitList.length; ind++) {
            if (unitList[ind] === '/') {
                multiplier = -multiplier;
            }
            else if (unitList[ind] === '(') {
                if (unitList[ind - 1] === '/') {
                    // If previous element was division then we need to inverse
                    // multiplier when we find its corresponsing closing parenthesis.
                    // Second element of pushed element is used for this purpose.
                    parenthesisStack.push(['(', -1]);
                }
                else {
                    // If previous element was not division then we don't need to
                    // invert the multiplier.
                    parenthesisStack.push(['(', 1]);
                }
            }
            else if (unitList[ind] === ')') {
                var elem = parenthesisStack.pop();
                multiplier = parseInt(elem[1]) * multiplier;
            }
            else if (this.isunit(unitList[ind])) {
                unitsWithMultiplier.push([unitList[ind], multiplier]);
                // If previous element was division then we need to invert
                // multiplier.
                if (unitList[ind - 1] === '/') {
                    multiplier = -multiplier;
                }
            }
        }
        return unitsWithMultiplier;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'unitDict' is a dict with varying element types. An
    // exact type needs to be found for it, Once that is found the return type
    // can also be typed.
    UnitsObjectFactory.prototype.convertUnitDictToList = function (unitDict) {
        var unitList = [];
        for (var key in unitDict) {
            unitList.push({ unit: key, exponent: unitDict[key] });
        }
        return unitList;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'unitsWithMultiplier' is a dict with varying element types.
    // An exact type needs to be found for it, Once that is found the return type
    // can also be typed.
    UnitsObjectFactory.prototype.unitToList = function (unitsWithMultiplier) {
        var unitDict = {};
        for (var i = 0; i < unitsWithMultiplier.length; i++) {
            var unit = unitsWithMultiplier[i][0];
            var multiplier = unitsWithMultiplier[i][1];
            var ind = unit.indexOf('^');
            var s = null;
            var power = null;
            if (ind > -1) {
                s = unit.substr(0, ind);
                power = parseInt(unit.substr(ind + 1));
            }
            else {
                s = unit;
                power = 1;
            }
            if (!(s in unitDict)) {
                unitDict[s] = 0;
            }
            unitDict[s] += multiplier * power;
        }
        return this.convertUnitDictToList(unitDict);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'units' is a list with varying element types. An exact
    // type needs to be found for it.
    UnitsObjectFactory.prototype.fromList = function (unitsList) {
        return new Units(unitsList);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is to be determined once 'unitToList' has
    // determined return type.
    UnitsObjectFactory.prototype.fromStringToList = function (unitsString) {
        return this.unitToList(this.unitWithMultiplier(this.stringToLexical(unitsString)));
    };
    UnitsObjectFactory.prototype.createCurrencyUnits = function () {
        var keys = Object.keys(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS);
        for (var i = 0; i < keys.length; i++) {
            if (objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].base_unit === null) {
                // Base unit (like: rupees, dollar etc.).
                mathjs_1.default.createUnit(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name, {
                    aliases: objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases
                });
            }
            else {
                // Sub unit (like: paise, cents etc.).
                mathjs_1.default.createUnit(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name, {
                    definition: objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].base_unit,
                    aliases: objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases
                });
            }
        }
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'units' is a list with varying element types. An exact
    // type needs to be found for it.
    UnitsObjectFactory.prototype.toMathjsCompatibleString = function (units) {
        // Makes the units compatible with the math.js allowed format.
        units = units.replace(/per/g, '/');
        // Special symbols need to be replaced as math.js doesn't support custom
        // units starting with special symbols. Also, it doesn't allow units
        // followed by a number as in the case of currency units.
        var keys = Object.keys(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS);
        for (var i = 0; i < keys.length; i++) {
            for (var j = 0; j < objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units.length; j++) {
                if (units.includes(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units[j])) {
                    units = units.replace(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].front_units[j], '');
                    units = objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name + units;
                }
            }
            for (var j = 0; j < objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases.length; j++) {
                if (units.includes(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases[j])) {
                    units = units.replace(objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].aliases[j], objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS[keys[i]].name);
                }
            }
        }
        return units.trim();
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'units' is a list with varying element types. An exact
    // type needs to be found for it.
    UnitsObjectFactory.prototype.fromRawInputString = function (units) {
        try {
            this.createCurrencyUnits();
        }
        catch (parsingError) { }
        var compatibleUnits = this.toMathjsCompatibleString(units);
        if (compatibleUnits !== '') {
            try {
                mathjs_1.default.unit(compatibleUnits);
            }
            catch (err) {
                throw new Error(err);
            }
        }
        return new Units(this.fromStringToList(units));
    };
    UnitsObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], UnitsObjectFactory);
    return UnitsObjectFactory;
}());
exports.UnitsObjectFactory = UnitsObjectFactory;
angular.module('oppia').factory('UnitsObjectFactory', static_1.downgradeInjectable(UnitsObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/objects/objects-domain.constants.ajs.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/objects/objects-domain.constants.ajs.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for objects domain.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var objects_domain_constants_1 = __webpack_require__(/*! domain/objects/objects-domain.constants */ "./core/templates/dev/head/domain/objects/objects-domain.constants.ts");
angular.module('oppia').constant('FRACTION_PARSING_ERRORS', objects_domain_constants_1.ObjectsDomainConstants.FRACTION_PARSING_ERRORS);
angular.module('oppia').constant('NUMBER_WITH_UNITS_PARSING_ERRORS', objects_domain_constants_1.ObjectsDomainConstants.NUMBER_WITH_UNITS_PARSING_ERRORS);
angular.module('oppia').constant('CURRENCY_UNITS', objects_domain_constants_1.ObjectsDomainConstants.CURRENCY_UNITS);


/***/ }),

/***/ "./core/templates/dev/head/domain/question/PretestQuestionBackendApiService.ts":
/*!*************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/question/PretestQuestionBackendApiService.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to receive questions as pretests for an exploration.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! domain/question/question-domain.constants.ajs.ts */ "./core/templates/dev/head/domain/question/question-domain.constants.ajs.ts");
angular.module('oppia').factory('PretestQuestionBackendApiService', [
    '$http', '$q', 'UrlInterpolationService', 'PRETEST_QUESTIONS_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, PRETEST_QUESTIONS_URL_TEMPLATE) {
        var _cursor = '';
        var _fetchPretestQuestions = function (explorationId, storyId, successCallback, errorCallback) {
            if (!storyId || !storyId.match(/^[a-zA-Z0-9]+$/i)) {
                successCallback([]);
                return;
            }
            var pretestDataUrl = UrlInterpolationService.interpolateUrl(PRETEST_QUESTIONS_URL_TEMPLATE, {
                exploration_id: explorationId,
                story_id: storyId,
                cursor: _cursor
            });
            $http.get(pretestDataUrl).then(function (response) {
                var pretestQuestionDicts = angular.copy(response.data.pretest_question_dicts);
                _cursor = response.data.next_start_cursor;
                if (successCallback) {
                    successCallback(pretestQuestionDicts);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        return {
            fetchPretestQuestions: function (explorationId, storyId) {
                return $q(function (resolve, reject) {
                    _fetchPretestQuestions(explorationId, storyId, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/question/QuestionBackendApiService.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/question/QuestionBackendApiService.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to receive questions for practice given a set of
 * skill_ids.
 */
__webpack_require__(/*! domain/question/question-domain.constants.ajs.ts */ "./core/templates/dev/head/domain/question/question-domain.constants.ajs.ts");
angular.module('oppia').factory('QuestionBackendApiService', [
    '$http', '$q', 'UrlInterpolationService', 'QUESTIONS_LIST_URL_TEMPLATE',
    'QUESTION_PLAYER_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, QUESTIONS_LIST_URL_TEMPLATE, QUESTION_PLAYER_URL_TEMPLATE) {
        var _fetchQuestions = function (skillIds, questionCount, questionsSortedByDifficulty, successCallback, errorCallback) {
            if (!validateRequestParameters(skillIds, questionCount, errorCallback)) {
                return;
            }
            var questionDataUrl = UrlInterpolationService.interpolateUrl(QUESTION_PLAYER_URL_TEMPLATE, {
                skill_ids: skillIds.join(','),
                question_count: questionCount.toString(),
                fetch_by_difficulty: questionsSortedByDifficulty.toString()
            });
            $http.get(questionDataUrl).then(function (response) {
                var questionDicts = angular.copy(response.data.question_dicts);
                if (successCallback) {
                    successCallback(questionDicts);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _fetchQuestionSummaries = function (skillIds, cursor, successCallback, errorCallback) {
            if (!isListOfStrings(skillIds)) {
                errorCallback('Skill ids should be a list of strings');
                return false;
            }
            var questionsDataUrl = UrlInterpolationService.interpolateUrl(QUESTIONS_LIST_URL_TEMPLATE, {
                comma_separated_skill_ids: skillIds.join(','),
                cursor: cursor ? cursor : ''
            });
            $http.get(questionsDataUrl).then(function (response) {
                var questionSummaries = angular.copy(response.data.question_summary_dicts);
                var nextCursor = response.data.next_start_cursor;
                if (successCallback) {
                    successCallback({
                        questionSummaries: questionSummaries,
                        nextCursor: nextCursor
                    });
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        /**
         * Does basic validation on input.
         */
        var validateRequestParameters = function (skillIds, questionCount, errorCallback) {
            if (!isListOfStrings(skillIds)) {
                errorCallback('Skill ids should be a list of strings');
                return false;
            }
            if (!isInt(questionCount) || questionCount <= 0) {
                errorCallback('Question count has to be a positive integer');
                return false;
            }
            return true;
        };
        /**
         * Checks if given input is a list and has all strings
         */
        var isListOfStrings = function (list) {
            if (!angular.isArray(list)) {
                return false;
            }
            return list.every(function (obj) {
                return angular.isString(obj);
            });
        };
        /**
         * Checks if given input is an integer
         */
        var isInt = function (n) {
            return angular.isNumber(n) && n % 1 === 0;
        };
        /**
         * Returns a list of questions based on the list of skill ids and number
         * of questions requested.
         */
        return {
            fetchQuestions: function (skillIds, questionCount, questionsSortedByDifficulty) {
                return $q(function (resolve, reject) {
                    _fetchQuestions(skillIds, questionCount, questionsSortedByDifficulty, resolve, reject);
                });
            },
            fetchQuestionSummaries: function (skillIds, cursor) {
                return $q(function (resolve, reject) {
                    _fetchQuestionSummaries(skillIds, cursor, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/question/QuestionObjectFactory.ts":
/*!**************************************************************************!*\
  !*** ./core/templates/dev/head/domain/question/QuestionObjectFactory.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating and mutating instances of frontend
 * question domain objects.
 */
__webpack_require__(/*! domain/state/StateObjectFactory.ts */ "./core/templates/dev/head/domain/state/StateObjectFactory.ts");
angular.module('oppia').factory('QuestionObjectFactory', [
    'StateObjectFactory', 'DEFAULT_LANGUAGE_CODE', 'INTERACTION_SPECS',
    function (StateObjectFactory, DEFAULT_LANGUAGE_CODE, INTERACTION_SPECS) {
        var Question = function (id, stateData, languageCode, version, linkedSkillIds) {
            this._id = id;
            this._stateData = stateData;
            this._languageCode = languageCode;
            this._version = version;
            this._linkedSkillIds = linkedSkillIds;
        };
        // Instance methods
        Question.prototype.getId = function () {
            return this._id;
        };
        Question.prototype.getStateData = function () {
            return this._stateData;
        };
        Question.prototype.setStateData = function (newStateData) {
            this._stateData = angular.copy(newStateData);
        };
        Question.prototype.getLanguageCode = function () {
            return this._languageCode;
        };
        Question.prototype.setLanguageCode = function (languageCode) {
            this._languageCode = languageCode;
        };
        Question.prototype.getVersion = function () {
            return this._version;
        };
        Question.prototype.getLinkedSkillIds = function () {
            return this._linkedSkillIds;
        };
        Question.prototype.setLinkedSkillIds = function (linkedSkillIds) {
            this._linkedSkillIds = linkedSkillIds;
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Question['createDefaultQuestion'] = function (skillIds) {
            /* eslint-enable dot-notation */
            return new Question(null, StateObjectFactory.createDefaultState(null), DEFAULT_LANGUAGE_CODE, 1, skillIds);
        };
        Question.prototype.validate = function (misconceptionsBySkill) {
            var interaction = this._stateData.interaction;
            if (interaction.id === null) {
                return 'An interaction must be specified';
            }
            if (interaction.hints.length === 0) {
                return 'At least 1 hint should be specfied';
            }
            if (!interaction.solution &&
                INTERACTION_SPECS[interaction.id].can_have_solution) {
                return 'A solution must be specified';
            }
            var answerGroups = this._stateData.interaction.answerGroups;
            var taggedSkillMisconceptionIds = {};
            var atLeastOneAnswerCorrect = false;
            for (var i = 0; i < answerGroups.length; i++) {
                if (answerGroups[i].outcome.labelledAsCorrect) {
                    atLeastOneAnswerCorrect = true;
                    continue;
                }
                if (answerGroups[i].taggedSkillMisconceptionId !== null) {
                    taggedSkillMisconceptionIds[answerGroups[i].taggedSkillMisconceptionId] = true;
                }
            }
            if (!atLeastOneAnswerCorrect) {
                return 'At least one answer should be marked correct';
            }
            var pendingMisconceptionNamesToTag = [];
            Object.keys(misconceptionsBySkill).forEach(function (skillId) {
                for (var i = 0; i < misconceptionsBySkill[skillId].length; i++) {
                    var skillMisconceptionId = skillId + '-' + misconceptionsBySkill[skillId][i].getId();
                    if (!taggedSkillMisconceptionIds.hasOwnProperty(skillMisconceptionId)) {
                        pendingMisconceptionNamesToTag.push(misconceptionsBySkill[skillId][i].getName());
                    }
                }
            });
            if (pendingMisconceptionNamesToTag.length > 0) {
                var returnString = 'The following misconceptions should also be caught:';
                pendingMisconceptionNamesToTag.forEach(function (misconceptionName) {
                    returnString = returnString + ' ' + misconceptionName + ',';
                });
                returnString = returnString.slice(0, -1);
                returnString = returnString + '. Click on (or create) an answer ' +
                    'that is neither marked correct nor is a default answer (marked ' +
                    'above as [All other answers]) to tag a misconception to that ' +
                    'answer group.';
                return returnString;
            }
            return false;
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        Question['createFromBackendDict'] = function (questionBackendDict) {
            /* eslint-enable dot-notation */
            return new Question(questionBackendDict.id, StateObjectFactory.createFromBackendDict('question', questionBackendDict.question_state_data), questionBackendDict.language_code, questionBackendDict.version, questionBackendDict.linked_skill_ids);
        };
        Question.prototype.toBackendDict = function (isNewQuestion) {
            var questionBackendDict = {
                id: null,
                question_state_data: this._stateData.toBackendDict(),
                language_code: this._languageCode,
                version: 1
            };
            if (!isNewQuestion) {
                questionBackendDict.id = this._id;
                questionBackendDict.version = this._version;
            }
            return questionBackendDict;
        };
        return Question;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/question/question-domain.constants.ajs.ts":
/*!**********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/question/question-domain.constants.ajs.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for question domain.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var question_domain_constants_1 = __webpack_require__(/*! domain/question/question-domain.constants */ "./core/templates/dev/head/domain/question/question-domain.constants.ts");
angular.module('oppia').constant('EDITABLE_QUESTION_DATA_URL_TEMPLATE', question_domain_constants_1.QuestionDomainConstants.EDITABLE_QUESTION_DATA_URL_TEMPLATE);
angular.module('oppia').constant('QUESTION_CREATION_URL', question_domain_constants_1.QuestionDomainConstants.QUESTION_CREATION_URL);
angular.module('oppia').constant('QUESTION_SKILL_LINK_URL_TEMPLATE', question_domain_constants_1.QuestionDomainConstants.QUESTION_SKILL_LINK_URL_TEMPLATE);
angular.module('oppia').constant('PRETEST_QUESTIONS_URL_TEMPLATE', question_domain_constants_1.QuestionDomainConstants.PRETEST_QUESTIONS_URL_TEMPLATE);
angular.module('oppia').constant('QUESTION_PLAYER_URL_TEMPLATE', question_domain_constants_1.QuestionDomainConstants.QUESTION_PLAYER_URL_TEMPLATE);
angular.module('oppia').constant('QUESTIONS_LIST_URL_TEMPLATE', question_domain_constants_1.QuestionDomainConstants.QUESTIONS_LIST_URL_TEMPLATE);
angular.module('oppia').constant('QUESTION_PROPERTY_LANGUAGE_CODE', question_domain_constants_1.QuestionDomainConstants.QUESTION_PROPERTY_LANGUAGE_CODE);
angular.module('oppia').constant('QUESTION_PROPERTY_QUESTION_STATE_DATA', question_domain_constants_1.QuestionDomainConstants.QUESTION_PROPERTY_QUESTION_STATE_DATA);
angular.module('oppia').constant('CMD_UPDATE_QUESTION_PROPERTY', question_domain_constants_1.QuestionDomainConstants.CMD_UPDATE_QUESTION_PROPERTY);


/***/ }),

/***/ "./core/templates/dev/head/domain/question/question-domain.constants.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/question/question-domain.constants.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for question domain.
 */
var QuestionDomainConstants = /** @class */ (function () {
    function QuestionDomainConstants() {
    }
    QuestionDomainConstants.EDITABLE_QUESTION_DATA_URL_TEMPLATE = '/question_editor_handler/data/<question_id>';
    QuestionDomainConstants.QUESTION_CREATION_URL = '/question_editor_handler/create_new';
    QuestionDomainConstants.QUESTION_SKILL_LINK_URL_TEMPLATE = '/manage_question_skill_link/<question_id>/<skill_id>';
    QuestionDomainConstants.PRETEST_QUESTIONS_URL_TEMPLATE = '/pretest_handler/<exploration_id>?story_id=<story_id>&cursor=<cursor>';
    QuestionDomainConstants.QUESTION_PLAYER_URL_TEMPLATE = '/question_player_handler?skill_ids=<skill_ids>&question_count' +
        '=<question_count>&fetch_by_difficulty=<fetch_by_difficulty>';
    QuestionDomainConstants.QUESTIONS_LIST_URL_TEMPLATE = '/questions_list_handler/<comma_separated_skill_ids>?cursor=<cursor>';
    QuestionDomainConstants.QUESTION_PROPERTY_LANGUAGE_CODE = 'language_code';
    QuestionDomainConstants.QUESTION_PROPERTY_QUESTION_STATE_DATA = 'question_state_data';
    QuestionDomainConstants.CMD_UPDATE_QUESTION_PROPERTY = 'update_question_property';
    return QuestionDomainConstants;
}());
exports.QuestionDomainConstants = QuestionDomainConstants;


/***/ }),

/***/ "./core/templates/dev/head/domain/skill/ConceptCardBackendApiService.ts":
/*!******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/skill/ConceptCardBackendApiService.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to retrieve read only information
 * about the concept card of a skill from the backend.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! domain/skill/skill-domain.constants.ajs.ts */ "./core/templates/dev/head/domain/skill/skill-domain.constants.ajs.ts");
angular.module('oppia').factory('ConceptCardBackendApiService', [
    '$http', '$q', 'UrlInterpolationService', 'CONCEPT_CARD_DATA_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, CONCEPT_CARD_DATA_URL_TEMPLATE) {
        // Maps previously loaded concept cards to their IDs.
        var _conceptCardCache = [];
        var _fetchConceptCards = function (skillIds, successCallback, errorCallback) {
            var conceptCardDataUrl = UrlInterpolationService.interpolateUrl(CONCEPT_CARD_DATA_URL_TEMPLATE, {
                comma_separated_skill_ids: skillIds.join(',')
            });
            $http.get(conceptCardDataUrl).then(function (response) {
                var conceptCards = angular.copy(response.data.concept_card_dicts);
                if (successCallback) {
                    successCallback(conceptCards);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _isCached = function (skillId) {
            return _conceptCardCache.hasOwnProperty(skillId);
        };
        var _getUncachedSkillIds = function (skillIds) {
            var uncachedSkillIds = [];
            skillIds.forEach(function (skillId) {
                if (!_isCached(skillId)) {
                    uncachedSkillIds.push(skillId);
                }
            });
            return uncachedSkillIds;
        };
        return {
            /**
             * This function will fetch concept cards from the backend, as well as
             * attempt to see whether the given concept cards have already been
             * loaded. If they have not yet been loaded, it will fetch the concept
             * cards from the backend. If it successfully retrieves the concept cards
             * from the backend, it will store them in the cache to avoid requests
             * from the backend in further function calls.
             */
            loadConceptCards: function (skillIds) {
                return $q(function (resolve, reject) {
                    var uncachedSkillIds = _getUncachedSkillIds(skillIds);
                    var conceptCards = [];
                    if (uncachedSkillIds.length !== 0) {
                        // Case where only part (or none) of the concept cards are cached
                        // locally.
                        _fetchConceptCards(uncachedSkillIds, function (uncachedConceptCards) {
                            skillIds.forEach(function (skillId) {
                                if (uncachedSkillIds.includes(skillId)) {
                                    conceptCards.push(uncachedConceptCards[uncachedSkillIds.indexOf(skillId)]);
                                    // Save the fetched conceptCards to avoid future fetches.
                                    _conceptCardCache[skillId] = angular.copy(uncachedConceptCards[uncachedSkillIds.indexOf(skillId)]);
                                }
                                else {
                                    conceptCards.push(angular.copy(_conceptCardCache[skillId]));
                                }
                            });
                            if (resolve) {
                                resolve(angular.copy(conceptCards));
                            }
                        }, reject);
                    }
                    else {
                        // Case where all of the concept cards are cached locally.
                        skillIds.forEach(function (skillId) {
                            conceptCards.push(angular.copy(_conceptCardCache[skillId]));
                        });
                        if (resolve) {
                            resolve(conceptCards);
                        }
                    }
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/skill/ConceptCardObjectFactory.ts":
/*!**************************************************************************!*\
  !*** ./core/templates/dev/head/domain/skill/ConceptCardObjectFactory.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Object factory for creating a front-end instance of a
 * concept card. In the backend, this is referred to as SkillContents.
 */
__webpack_require__(/*! domain/exploration/RecordedVoiceoversObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/RecordedVoiceoversObjectFactory.ts");
__webpack_require__(/*! domain/exploration/SubtitledHtmlObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts");
angular.module('oppia').factory('ConceptCardObjectFactory', [
    'RecordedVoiceoversObjectFactory', 'SubtitledHtmlObjectFactory',
    'COMPONENT_NAME_EXPLANATION',
    function (RecordedVoiceoversObjectFactory, SubtitledHtmlObjectFactory, COMPONENT_NAME_EXPLANATION) {
        var ConceptCard = function (explanation, workedExamples, recordedVoiceovers) {
            this._explanation = explanation;
            this._workedExamples = workedExamples;
            this._recordedVoiceovers = recordedVoiceovers;
        };
        ConceptCard.prototype.toBackendDict = function () {
            return {
                explanation: this._explanation.toBackendDict(),
                worked_examples: this._workedExamples.map(function (workedExample) {
                    return workedExample.toBackendDict();
                }),
                recorded_voiceovers: this._recordedVoiceovers.toBackendDict()
            };
        };
        var _generateWorkedExamplesFromBackendDict = function (workedExampleDicts) {
            return workedExampleDicts.map(function (workedExampleDict) {
                return SubtitledHtmlObjectFactory.createFromBackendDict(workedExampleDict);
            });
        };
        var _getElementsInFirstSetButNotInSecond = function (setA, setB) {
            var diffList = Array.from(setA).filter(function (element) {
                return !setB.has(element);
            });
            return diffList;
        };
        var _extractAvailableContentIdsFromWorkedExamples = function (workedExamples) {
            var contentIds = new Set();
            workedExamples.forEach(function (workedExample) {
                contentIds.add(workedExample.getContentId());
            });
            return contentIds;
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ConceptCard['createFromBackendDict'] = function (conceptCardBackendDict) {
            /* eslint-enable dot-notation */
            return new ConceptCard(SubtitledHtmlObjectFactory.createFromBackendDict(conceptCardBackendDict.explanation), _generateWorkedExamplesFromBackendDict(conceptCardBackendDict.worked_examples), RecordedVoiceoversObjectFactory.createFromBackendDict(conceptCardBackendDict.recorded_voiceovers));
        };
        ConceptCard.prototype.getExplanation = function () {
            return this._explanation;
        };
        ConceptCard.prototype.setExplanation = function (explanation) {
            this._explanation = explanation;
        };
        ConceptCard.prototype.getWorkedExamples = function () {
            return this._workedExamples.slice();
        };
        ConceptCard.prototype.setWorkedExamples = function (workedExamples) {
            var oldContentIds = _extractAvailableContentIdsFromWorkedExamples(this._workedExamples);
            this._workedExamples = workedExamples.slice();
            var newContentIds = _extractAvailableContentIdsFromWorkedExamples(this._workedExamples);
            var contentIdsToDelete = _getElementsInFirstSetButNotInSecond(oldContentIds, newContentIds);
            var contentIdsToAdd = _getElementsInFirstSetButNotInSecond(newContentIds, oldContentIds);
            for (var i = 0; i < contentIdsToDelete.length; i++) {
                this._recordedVoiceovers.deleteContentId(contentIdsToDelete[i]);
            }
            for (var i = 0; i < contentIdsToAdd.length; i++) {
                this._recordedVoiceovers.addContentId(contentIdsToAdd[i]);
            }
        };
        ConceptCard.prototype.getRecordedVoiceovers = function () {
            return this._recordedVoiceovers;
        };
        // Create an interstitial concept card that would be displayed in the
        // editor until the actual skill is fetched from the backend.
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        ConceptCard['createInterstitialConceptCard'] = function () {
            /* eslint-enable dot-notation */
            var recordedVoiceoversDict = {
                voiceovers_mapping: {
                    COMPONENT_NAME_EXPLANATION: {}
                }
            };
            return new ConceptCard(SubtitledHtmlObjectFactory.createDefault('Loading review material', COMPONENT_NAME_EXPLANATION), [], RecordedVoiceoversObjectFactory.createFromBackendDict(recordedVoiceoversDict));
        };
        return ConceptCard;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/skill/SkillMasteryBackendApiService.ts":
/*!*******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/skill/SkillMasteryBackendApiService.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to send changes to skill mastery to the backend.
 */
angular.module('oppia').factory('SkillMasteryBackendApiService', [
    '$http', '$q', 'SKILL_MASTERY_DATA_URL_TEMPLATE',
    function ($http, $q, SKILL_MASTERY_DATA_URL_TEMPLATE) {
        var _fetchSkillMasteryDegrees = function (skillIds, successCallback, errorCallback) {
            $http.get(SKILL_MASTERY_DATA_URL_TEMPLATE, {
                params: {
                    comma_separated_skill_ids: skillIds.join(',')
                }
            }).then(function (response) {
                if (successCallback) {
                    successCallback(response.data.degrees_of_mastery);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _updateSkillMasteryDegrees = function (masteryPerSkillMapping, successCallback, errorCallback) {
            var putData = {
                mastery_change_per_skill: masteryPerSkillMapping
            };
            $http.put(SKILL_MASTERY_DATA_URL_TEMPLATE, putData).then(function (response) {
                if (successCallback) {
                    successCallback();
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        return {
            fetchSkillMasteryDegrees: function (skillIds) {
                return $q(function (resolve, reject) {
                    _fetchSkillMasteryDegrees(skillIds, resolve, reject);
                });
            },
            updateSkillMasteryDegrees: function (masteryPerSkillMapping) {
                return $q(function (resolve, reject) {
                    _updateSkillMasteryDegrees(masteryPerSkillMapping, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/skill/skill-domain.constants.ajs.ts":
/*!****************************************************************************!*\
  !*** ./core/templates/dev/head/domain/skill/skill-domain.constants.ajs.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for skill domain.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var skill_domain_constants_1 = __webpack_require__(/*! domain/skill/skill-domain.constants */ "./core/templates/dev/head/domain/skill/skill-domain.constants.ts");
angular.module('oppia').constant('CONCEPT_CARD_DATA_URL_TEMPLATE', skill_domain_constants_1.SkillDomainConstants.CONCEPT_CARD_DATA_URL_TEMPLATE);
angular.module('oppia').constant('EDITABLE_SKILL_DATA_URL_TEMPLATE', skill_domain_constants_1.SkillDomainConstants.EDITABLE_SKILL_DATA_URL_TEMPLATE);
angular.module('oppia').constant('SKILL_DATA_URL_TEMPLATE', skill_domain_constants_1.SkillDomainConstants.SKILL_DATA_URL_TEMPLATE);
angular.module('oppia').constant('SKILL_EDITOR_QUESTION_URL_TEMPLATE', skill_domain_constants_1.SkillDomainConstants.SKILL_EDITOR_QUESTION_URL_TEMPLATE);
angular.module('oppia').constant('SKILL_MASTERY_DATA_URL_TEMPLATE', skill_domain_constants_1.SkillDomainConstants.SKILL_MASTERY_DATA_URL_TEMPLATE);
angular.module('oppia').constant('SKILL_PROPERTY_DESCRIPTION', skill_domain_constants_1.SkillDomainConstants.SKILL_PROPERTY_DESCRIPTION);
angular.module('oppia').constant('SKILL_PROPERTY_LANGUAGE_CODE', skill_domain_constants_1.SkillDomainConstants.SKILL_PROPERTY_LANGUAGE_CODE);
angular.module('oppia').constant('SKILL_CONTENTS_PROPERTY_EXPLANATION', skill_domain_constants_1.SkillDomainConstants.SKILL_CONTENTS_PROPERTY_EXPLANATION);
angular.module('oppia').constant('SKILL_CONTENTS_PROPERTY_WORKED_EXAMPLES', skill_domain_constants_1.SkillDomainConstants.SKILL_CONTENTS_PROPERTY_WORKED_EXAMPLES);
angular.module('oppia').constant('SKILL_MISCONCEPTIONS_PROPERTY_NAME', skill_domain_constants_1.SkillDomainConstants.SKILL_MISCONCEPTIONS_PROPERTY_NAME);
angular.module('oppia').constant('SKILL_MISCONCEPTIONS_PROPERTY_NOTES', skill_domain_constants_1.SkillDomainConstants.SKILL_MISCONCEPTIONS_PROPERTY_NOTES);
angular.module('oppia').constant('SKILL_MISCONCEPTIONS_PROPERTY_FEEDBACK', skill_domain_constants_1.SkillDomainConstants.SKILL_MISCONCEPTIONS_PROPERTY_FEEDBACK);
angular.module('oppia').constant('CMD_UPDATE_SKILL_PROPERTY', skill_domain_constants_1.SkillDomainConstants.CMD_UPDATE_SKILL_PROPERTY);
angular.module('oppia').constant('CMD_UPDATE_SKILL_CONTENTS_PROPERTY', skill_domain_constants_1.SkillDomainConstants.CMD_UPDATE_SKILL_CONTENTS_PROPERTY);
angular.module('oppia').constant('CMD_UPDATE_SKILL_MISCONCEPTIONS_PROPERTY', skill_domain_constants_1.SkillDomainConstants.CMD_UPDATE_SKILL_MISCONCEPTIONS_PROPERTY);
angular.module('oppia').constant('CMD_ADD_SKILL_MISCONCEPTION', skill_domain_constants_1.SkillDomainConstants.CMD_ADD_SKILL_MISCONCEPTION);
angular.module('oppia').constant('CMD_DELETE_SKILL_MISCONCEPTION', skill_domain_constants_1.SkillDomainConstants.CMD_DELETE_SKILL_MISCONCEPTION);
angular.module('oppia').constant('CMD_UPDATE_RUBRICS', skill_domain_constants_1.SkillDomainConstants.CMD_UPDATE_RUBRICS);


/***/ }),

/***/ "./core/templates/dev/head/domain/skill/skill-domain.constants.ts":
/*!************************************************************************!*\
  !*** ./core/templates/dev/head/domain/skill/skill-domain.constants.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for skill domain.
 */
var SkillDomainConstants = /** @class */ (function () {
    function SkillDomainConstants() {
    }
    SkillDomainConstants.CONCEPT_CARD_DATA_URL_TEMPLATE = '/concept_card_handler/<comma_separated_skill_ids>';
    SkillDomainConstants.EDITABLE_SKILL_DATA_URL_TEMPLATE = '/skill_editor_handler/data/<skill_id>';
    SkillDomainConstants.SKILL_DATA_URL_TEMPLATE = '/skill_data_handler/<comma_separated_skill_ids>';
    SkillDomainConstants.SKILL_EDITOR_QUESTION_URL_TEMPLATE = '/skill_editor_question_handler/<skill_id>?cursor=<cursor>';
    SkillDomainConstants.SKILL_MASTERY_DATA_URL_TEMPLATE = '/skill_mastery_handler/data';
    SkillDomainConstants.SKILL_PROPERTY_DESCRIPTION = 'description';
    SkillDomainConstants.SKILL_PROPERTY_LANGUAGE_CODE = 'language_code';
    SkillDomainConstants.SKILL_CONTENTS_PROPERTY_EXPLANATION = 'explanation';
    SkillDomainConstants.SKILL_CONTENTS_PROPERTY_WORKED_EXAMPLES = 'worked_examples';
    SkillDomainConstants.SKILL_MISCONCEPTIONS_PROPERTY_NAME = 'name';
    SkillDomainConstants.SKILL_MISCONCEPTIONS_PROPERTY_NOTES = 'notes';
    SkillDomainConstants.SKILL_MISCONCEPTIONS_PROPERTY_FEEDBACK = 'feedback';
    SkillDomainConstants.CMD_UPDATE_SKILL_PROPERTY = 'update_skill_property';
    SkillDomainConstants.CMD_UPDATE_SKILL_CONTENTS_PROPERTY = 'update_skill_contents_property';
    SkillDomainConstants.CMD_UPDATE_SKILL_MISCONCEPTIONS_PROPERTY = 'update_skill_misconceptions_property';
    SkillDomainConstants.CMD_ADD_SKILL_MISCONCEPTION = 'add_skill_misconception';
    SkillDomainConstants.CMD_DELETE_SKILL_MISCONCEPTION = 'delete_skill_misconception';
    SkillDomainConstants.CMD_UPDATE_RUBRICS = 'update_rubrics';
    return SkillDomainConstants;
}());
exports.SkillDomainConstants = SkillDomainConstants;


/***/ }),

/***/ "./core/templates/dev/head/domain/state/StateObjectFactory.ts":
/*!********************************************************************!*\
  !*** ./core/templates/dev/head/domain/state/StateObjectFactory.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of State
 * domain objects.
 */
__webpack_require__(/*! domain/exploration/RecordedVoiceoversObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/RecordedVoiceoversObjectFactory.ts");
__webpack_require__(/*! domain/exploration/InteractionObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/InteractionObjectFactory.ts");
__webpack_require__(/*! domain/exploration/ParamChangesObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ParamChangesObjectFactory.ts");
__webpack_require__(/*! domain/exploration/SubtitledHtmlObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/SubtitledHtmlObjectFactory.ts");
__webpack_require__(/*! domain/exploration/WrittenTranslationsObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/WrittenTranslationsObjectFactory.ts");
angular.module('oppia').factory('StateObjectFactory', [
    'InteractionObjectFactory', 'ParamChangesObjectFactory',
    'RecordedVoiceoversObjectFactory', 'SubtitledHtmlObjectFactory',
    'WrittenTranslationsObjectFactory', 'NEW_STATE_TEMPLATE', function (InteractionObjectFactory, ParamChangesObjectFactory, RecordedVoiceoversObjectFactory, SubtitledHtmlObjectFactory, WrittenTranslationsObjectFactory, NEW_STATE_TEMPLATE) {
        var State = function (name, classifierModelId, content, interaction, paramChanges, recordedVoiceovers, solicitAnswerDetails, writtenTranslations) {
            this.name = name;
            this.classifierModelId = classifierModelId;
            this.content = content;
            this.interaction = interaction;
            this.paramChanges = paramChanges;
            this.recordedVoiceovers = recordedVoiceovers;
            this.solicitAnswerDetails = solicitAnswerDetails;
            this.writtenTranslations = writtenTranslations;
        };
        State.prototype.setName = function (newName) {
            this.name = newName;
        };
        // Instance methods.
        State.prototype.toBackendDict = function () {
            return {
                content: this.content.toBackendDict(),
                classifier_model_id: this.classifierModelId,
                interaction: this.interaction.toBackendDict(),
                param_changes: this.paramChanges.map(function (paramChange) {
                    return paramChange.toBackendDict();
                }),
                recorded_voiceovers: this.recordedVoiceovers.toBackendDict(),
                solicit_answer_details: this.solicitAnswerDetails,
                written_translations: this.writtenTranslations.toBackendDict()
            };
        };
        State.prototype.copy = function (otherState) {
            this.name = otherState.name;
            this.classifierModelId = otherState.classifierModelId;
            this.content = angular.copy(otherState.content);
            this.interaction.copy(otherState.interaction);
            this.paramChanges = angular.copy(otherState.paramChanges);
            this.recordedVoiceovers = angular.copy(otherState.recordedVoiceovers);
            this.solicitAnswerDetails = angular.copy(otherState.solicitAnswerDetails);
            this.writtenTranslations = angular.copy(otherState.writtenTranslations);
        };
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        State['createDefaultState'] = function (newStateName) {
            /* eslint-enable dot-notation */
            var newStateTemplate = angular.copy(NEW_STATE_TEMPLATE);
            var newState = this.createFromBackendDict(newStateName, {
                classifier_model_id: newStateTemplate.classifier_model_id,
                content: newStateTemplate.content,
                interaction: newStateTemplate.interaction,
                param_changes: newStateTemplate.param_changes,
                recorded_voiceovers: newStateTemplate.recorded_voiceovers,
                solicit_answer_details: newStateTemplate.solicit_answer_details,
                written_translations: newStateTemplate.written_translations
            });
            newState.interaction.defaultOutcome.dest = newStateName;
            return newState;
        };
        // Static class methods. Note that "this" is not available in
        // static contexts.
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        State['createFromBackendDict'] = function (stateName, stateDict) {
            /* eslint-enable dot-notation */
            return new State(stateName, stateDict.classifier_model_id, SubtitledHtmlObjectFactory.createFromBackendDict(stateDict.content), InteractionObjectFactory.createFromBackendDict(stateDict.interaction), ParamChangesObjectFactory.createFromBackendList(stateDict.param_changes), RecordedVoiceoversObjectFactory.createFromBackendDict(stateDict.recorded_voiceovers), stateDict.solicit_answer_details, WrittenTranslationsObjectFactory.createFromBackendDict(stateDict.written_translations));
        };
        return State;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/state_card/StateCardObjectFactory.ts":
/*!*****************************************************************************!*\
  !*** ./core/templates/dev/head/domain/state_card/StateCardObjectFactory.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for creating new frontend instances of State
 * card domain objects used in the exploration player.
 */
__webpack_require__(/*! pages/exploration-player-page/services/audio-translation-language.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-language.service.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
angular.module('oppia').factory('StateCardObjectFactory', [
    'AudioTranslationLanguageService',
    'INTERACTION_DISPLAY_MODE_INLINE', 'INTERACTION_SPECS',
    function (AudioTranslationLanguageService, INTERACTION_DISPLAY_MODE_INLINE, INTERACTION_SPECS) {
        var StateCard = function (stateName, contentHtml, interactionHtml, interaction, inputResponsePairs, recordedVoiceovers, contentId) {
            this._stateName = stateName;
            this._contentHtml = contentHtml;
            this._interactionHtml = interactionHtml;
            this._inputResponsePairs = inputResponsePairs;
            this._interaction = interaction;
            this._recordedVoiceovers = recordedVoiceovers;
            this._contentId = contentId;
            this._completed = false;
        };
        StateCard.prototype.getStateName = function () {
            return this._stateName;
        };
        StateCard.prototype.getInteraction = function () {
            return this._interaction;
        };
        StateCard.prototype.getVoiceovers = function () {
            var recordedVoiceovers = this._recordedVoiceovers;
            var contentId = this._contentId;
            if (recordedVoiceovers) {
                return recordedVoiceovers.getBindableVoiceovers(contentId);
            }
            return [];
        };
        StateCard.prototype.getRecordedVoiceovers = function () {
            return this._recordedVoiceovers;
        };
        StateCard.prototype.isContentAudioTranslationAvailable = function () {
            return Object.keys(this.getVoiceovers()).length > 0 ||
                AudioTranslationLanguageService.isAutogeneratedAudioAllowed();
        },
            StateCard.prototype.getInteractionId = function () {
                if (this.getInteraction()) {
                    return this.getInteraction().id;
                }
                return null;
            };
        StateCard.prototype.isTerminal = function () {
            var interactionId = this.getInteractionId();
            return (interactionId && INTERACTION_SPECS[interactionId].is_terminal);
        };
        StateCard.prototype.getHints = function () {
            return this.getInteraction().hints;
        };
        StateCard.prototype.getSolution = function () {
            return this.getInteraction().solution;
        };
        StateCard.prototype.doesInteractionSupportHints = function () {
            var interactionId = this.getInteractionId();
            return (!INTERACTION_SPECS[interactionId].is_terminal &&
                !INTERACTION_SPECS[interactionId].is_linear);
        };
        StateCard.prototype.isCompleted = function () {
            return this._completed;
        };
        StateCard.prototype.markAsCompleted = function () {
            this._completed = true;
        };
        StateCard.prototype.markAsNotCompleted = function () {
            this._completed = false;
        };
        StateCard.prototype.getInteractionInstructions = function () {
            var interactionId = this.getInteractionId();
            return (interactionId ? INTERACTION_SPECS[interactionId].instructions : '');
        };
        StateCard.prototype.getInteractionCustomizationArgs = function () {
            var interaction = this.getInteraction();
            if (!interaction) {
                return null;
            }
            return interaction.customizationArgs;
        };
        StateCard.prototype.isInteractionInline = function () {
            var interactionId = this.getInteractionId();
            return (!interactionId ||
                INTERACTION_SPECS[interactionId].display_mode ===
                    INTERACTION_DISPLAY_MODE_INLINE);
        };
        StateCard.prototype.getContentHtml = function () {
            return this._contentHtml;
        };
        StateCard.prototype.getInteractionHtml = function () {
            return this._interactionHtml;
        };
        StateCard.prototype.getOppiaResponse = function (index) {
            return this._inputResponsePairs[index].oppiaResponse;
        };
        StateCard.prototype.getInputResponsePairs = function () {
            return this._inputResponsePairs;
        };
        StateCard.prototype.getLastInputResponsePair = function () {
            if (this._inputResponsePairs.length === 0) {
                return null;
            }
            return this._inputResponsePairs[this._inputResponsePairs.length - 1];
        };
        StateCard.prototype.getLastAnswer = function () {
            if (this.getLastInputResponsePair() === null) {
                return null;
            }
            return this.getLastInputResponsePair().learnerInput;
        };
        StateCard.prototype.getLastOppiaResponse = function () {
            if (this.getLastInputResponsePair() === null) {
                return null;
            }
            return this.getLastInputResponsePair().oppiaResponse;
        };
        StateCard.prototype.addInputResponsePair = function (inputResponsePair) {
            this._inputResponsePairs.push(angular.copy(inputResponsePair));
        };
        StateCard.prototype.setLastOppiaResponse = function (response) {
            // This check is added here to ensure that this._inputReponsePairs is
            // accessed only if there is atleast one input response pair present.
            // In the editor preview tab if a user clicks on restart from beginning
            // option just after submitting an answer for a card while the response
            // is still loading, this function is called after
            // this._inputResponsePairs is set to null as we are starting from the
            // first card again. Adding a check here makes sure that element at index
            // -1 is not accessed even in the above case.
            if (this._inputResponsePairs.length >= 1) {
                this._inputResponsePairs[this._inputResponsePairs.length - 1].oppiaResponse = response;
            }
        };
        StateCard.prototype.setInteractionHtml = function (interactionHtml) {
            this._interactionHtml = interactionHtml;
        };
        /**
         * @param {string} stateName - The state name for the current card.
         * @param {string} contentHtml - The HTML string for the content displayed
         *        on the content card.
         * @param {string} interactionHtml - The HTML that calls the interaction
         *        directive for the current card.
         * @param {Interaction} interaction - An interaction object that stores all
         *        the properties of the card's interaction.
         */
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        StateCard['createNewCard'] = function (
        /* eslint-enable dot-notation */
        stateName, contentHtml, interactionHtml, interaction, recordedVoiceovers, contentId) {
            return new StateCard(stateName, contentHtml, interactionHtml, interaction, [], recordedVoiceovers, contentId);
        };
        return StateCard;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/statistics/LearnerActionObjectFactory.ts":
/*!*********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/statistics/LearnerActionObjectFactory.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of Learner
 *     Action domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var statistics_domain_constants_1 = __webpack_require__(/*! domain/statistics/statistics-domain.constants */ "./core/templates/dev/head/domain/statistics/statistics-domain.constants.ts");
var LearnerAction = /** @class */ (function () {
    /**
     * @constructor
     * @param {string} actionType - type of an action.
     * @param {Object.<string, *>} actionCustomizationArgs - customization dict
     *   for an action.
     * @param {number} schemaVersion - schema version of the class instance.
     */
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'outcome' is an outcome domain object and this can be
    // directly typed to 'Outcome' type once 'OutcomeObjectFactory' is upgraded.
    function LearnerAction(actionType, actionCustomizationArgs, schemaVersion) {
        if (schemaVersion < 1) {
            throw new Error('given invalid schema version');
        }
        /** @type {string} */
        this.actionType = actionType;
        /** @type {Object.<string, *>} */
        this.actionCustomizationArgs = actionCustomizationArgs;
        /** @type {number} */
        this.schemaVersion = schemaVersion;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    LearnerAction.prototype.toBackendDict = function () {
        return {
            action_type: this.actionType,
            action_customization_args: this.actionCustomizationArgs,
            schema_version: this.schemaVersion,
        };
    };
    return LearnerAction;
}());
exports.LearnerAction = LearnerAction;
var LearnerActionObjectFactory = /** @class */ (function () {
    function LearnerActionObjectFactory() {
    }
    /**
     * @property {string} actionType - type of an action
     * @property {Object.<string, *>} actionCustomizationArgs - customization
     *   dict for an action
     * @property {number} [schemaVersion=LEARNER_ACTION_SCHEMA_LATEST_VERSION]
     *   - schema version of the class instance.
     * @returns {LearnerAction}
     */
    LearnerActionObjectFactory.prototype.createNew = function (actionType, actionCustomizationArgs, schemaVersion) {
        schemaVersion = schemaVersion ||
            statistics_domain_constants_1.StatisticsDomainConstants.LEARNER_ACTION_SCHEMA_LATEST_VERSION;
        return new LearnerAction(actionType, actionCustomizationArgs, schemaVersion);
    };
    /**
     * @typedef LearnerActionBackendDict
     * @property {string} actionType - type of an action.
     * @property {Object.<string, *>} actionCustomizationArgs - customization
     *   dict for an action.
     * @property {number} schemaVersion - schema version of the class instance.
     *   Defaults to the latest schema version.
     */
    /**
     * @param {LearnerActionBackendDict} learnerActionBackendDict
     * @returns {LearnerAction}
     */
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'learnerActionBackendDict' is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    LearnerActionObjectFactory.prototype.createFromBackendDict = function (learnerActionBackendDict) {
        return new LearnerAction(learnerActionBackendDict.action_type, learnerActionBackendDict.action_customization_args, learnerActionBackendDict.schema_version);
    };
    LearnerActionObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], LearnerActionObjectFactory);
    return LearnerActionObjectFactory;
}());
exports.LearnerActionObjectFactory = LearnerActionObjectFactory;
angular.module('oppia').factory('LearnerActionObjectFactory', static_1.downgradeInjectable(LearnerActionObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/statistics/LearnerAnswerDetailsBackendApiService.ts":
/*!********************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/statistics/LearnerAnswerDetailsBackendApiService.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to record learner answer info.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! domain/statistics/statistics-domain.constants.ajs.ts */ "./core/templates/dev/head/domain/statistics/statistics-domain.constants.ajs.ts");
angular.module('oppia').factory('LearnerAnswerDetailsBackendApiService', [
    '$http', '$q', 'UrlInterpolationService', 'SUBMIT_LEARNER_ANSWER_DETAILS_URL',
    function ($http, $q, UrlInterpolationService, SUBMIT_LEARNER_ANSWER_DETAILS_URL) {
        var _recordLearnerAnswerDetails = function (expId, stateName, interactionId, answer, answerDetails, successCallback, errorCallback) {
            var recordLearnerAnswerDetailsUrl = (UrlInterpolationService.interpolateUrl(SUBMIT_LEARNER_ANSWER_DETAILS_URL, {
                entity_type: 'exploration',
                entity_id: expId
            }));
            var payload = {
                state_name: stateName,
                interaction_id: interactionId,
                answer: answer,
                answer_details: answerDetails
            };
            $http.put(recordLearnerAnswerDetailsUrl, payload).then(function (response) {
                if (successCallback) {
                    successCallback();
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        return {
            recordLearnerAnswerDetails: function (expId, stateName, interactionId, answer, answerDetails) {
                return $q(function (resolve, reject) {
                    _recordLearnerAnswerDetails(expId, stateName, interactionId, answer, answerDetails, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/statistics/PlaythroughIssueObjectFactory.ts":
/*!************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/statistics/PlaythroughIssueObjectFactory.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of Exploration
 *     Issue domain objects.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var PlaythroughIssue = /** @class */ (function () {
    /**
     * @constructor
     * @param {string} issueType - type of an issue.
     * @param {Object.<string, *>} issueCustomizationArgs - customization dict for
     *   an issue.
     * @param {string[]} playthroughIds - list of playthrough IDs.
     * @param {number} schemaVersion - schema version of the class instance.
     * @param {boolean} isValid - whether the issue is valid.
     */
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'issueCustomizationArgs' is a dict with possible
    // underscore_cased keys which give tslint errors against underscore_casing
    // in favor of camelCasing.
    function PlaythroughIssue(issueType, issueCustomizationArgs, playthroughIds, schemaVersion, isValid) {
        /** @type {string} */
        this.issueType = issueType;
        /** @type {Object.<string, *>} */
        this.issueCustomizationArgs = issueCustomizationArgs;
        /** @type {string[]} */
        this.playthroughIds = playthroughIds;
        /** @type {number} */
        this.schemaVersion = schemaVersion;
        /** @type {boolean} */
        this.isValid = isValid;
    }
    /**
     * @returns {ExplorationIssueBackendDict}
     */
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because the return type is a dict with underscore_cased keys which
    // give tslint errors against underscore_casing in favor of camelCasing.
    PlaythroughIssue.prototype.toBackendDict = function () {
        return {
            issue_type: this.issueType,
            issue_customization_args: this.issueCustomizationArgs,
            playthrough_ids: this.playthroughIds,
            schema_version: this.schemaVersion,
            is_valid: this.isValid
        };
    };
    return PlaythroughIssue;
}());
exports.PlaythroughIssue = PlaythroughIssue;
var PlaythroughIssueObjectFactory = /** @class */ (function () {
    function PlaythroughIssueObjectFactory() {
    }
    /**
     * @typedef ExplorationIssueBackendDict
     * @property {string} issueType - type of an issue.
     * @property {Object.<string, *>} issueCustomizationArgs - customization dict
     *   for an issue.
     * @property {string[]} playthroughIds - list of playthrough IDs.
     * @property {number} schemaVersion - schema version of the class instance.
     * @property {boolean} isValid - whether the issue is valid.
     */
    /**
     * @param {ExplorationIssueBackendDict} explorationIssueBackendDict
     * @returns {PlaythroughIssue}
     */
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'explorationIssueBackendDict' is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    PlaythroughIssueObjectFactory.prototype.createFromBackendDict = function (explorationIssueBackendDict) {
        return new PlaythroughIssue(explorationIssueBackendDict.issue_type, explorationIssueBackendDict.issue_customization_args, explorationIssueBackendDict.playthrough_ids, explorationIssueBackendDict.schema_version, explorationIssueBackendDict.is_valid);
    };
    PlaythroughIssueObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], PlaythroughIssueObjectFactory);
    return PlaythroughIssueObjectFactory;
}());
exports.PlaythroughIssueObjectFactory = PlaythroughIssueObjectFactory;
angular.module('oppia').factory('PlaythroughIssueObjectFactory', static_1.downgradeInjectable(PlaythroughIssueObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/statistics/PlaythroughObjectFactory.ts":
/*!*******************************************************************************!*\
  !*** ./core/templates/dev/head/domain/statistics/PlaythroughObjectFactory.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Factory for creating new frontend instances of Playthrough
 *     domain objects.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var LearnerActionObjectFactory_1 = __webpack_require__(/*! domain/statistics/LearnerActionObjectFactory */ "./core/templates/dev/head/domain/statistics/LearnerActionObjectFactory.ts");
var Playthrough = /** @class */ (function () {
    /**
     * @constructor
     * @param {string} playthroughId - ID of a playthrough.
     * @param {string} expId - ID of an exploration.
     * @param {number} expVersion - Version of an exploration.
     * @param {string} issueType - type of an issue.
     * @param {Object.<string, *>} issueCustomizationArgs - customization dict
     *   for an issue.
     * @param {LearnerAction[]} actions - list of learner actions.
     */
    function Playthrough(playthroughId, expId, expVersion, issueType, issueCustomizationArgs, actions) {
        /** @type {string} */
        this.playthroughId = playthroughId;
        /** @type {string} */
        this.expId = expId;
        /** @type {number} */
        this.expVersion = expVersion;
        /** @type {string} */
        this.issueType = issueType;
        /** @type {Object.<string, *>} */
        this.issueCustomizationArgs = issueCustomizationArgs;
        /** @type {LearnerAction[]} */
        this.actions = actions;
    }
    /** @returns {PlaythroughBackendDict} */
    Playthrough.prototype.toBackendDict = function () {
        var actionDicts = this.actions.map(function (action) {
            return action.toBackendDict();
        });
        return {
            id: this.playthroughId,
            exp_id: this.expId,
            exp_version: this.expVersion,
            issue_type: this.issueType,
            issue_customization_args: this.issueCustomizationArgs,
            actions: actionDicts
        };
    };
    return Playthrough;
}());
exports.Playthrough = Playthrough;
var PlaythroughObjectFactory = /** @class */ (function () {
    function PlaythroughObjectFactory(learnerActionObjectFactory) {
        this.learnerActionObjectFactory = learnerActionObjectFactory;
    }
    /**
     * @param {string} playthroughId - ID of a playthrough.
     * @param {string} expId - ID of an exploration.
     * @param {number} expVersion - Version of an exploration.
     * @param {string} issueType - type of an issue.
     * @param {Object.<string, *>} issueCustomizationArgs - customization dict
     *   for an issue.
     * @param {LearnerAction[]} actions - list of learner actions.
     * @returns {Playthrough}
     */
    PlaythroughObjectFactory.prototype.createNew = function (playthroughId, expId, expVersion, issueType, issueCustomizationArgs, actions) {
        return new Playthrough(playthroughId, expId, expVersion, issueType, issueCustomizationArgs, actions);
    };
    /**
     * @typedef
     * @param {PlaythroughBackendDict} playthroughBackendDict
     * @returns {Playthrough}
     */
    PlaythroughObjectFactory.prototype.createFromBackendDict = function (playthroughBackendDict) {
        var actions = playthroughBackendDict.actions.map(this.learnerActionObjectFactory.createFromBackendDict);
        return new Playthrough(playthroughBackendDict.playthrough_id, playthroughBackendDict.exp_id, playthroughBackendDict.exp_version, playthroughBackendDict.issue_type, playthroughBackendDict.issue_customization_args, actions);
    };
    var _a;
    PlaythroughObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof LearnerActionObjectFactory_1.LearnerActionObjectFactory !== "undefined" && LearnerActionObjectFactory_1.LearnerActionObjectFactory) === "function" ? _a : Object])
    ], PlaythroughObjectFactory);
    return PlaythroughObjectFactory;
}());
exports.PlaythroughObjectFactory = PlaythroughObjectFactory;
angular.module('oppia').factory('PlaythroughObjectFactory', static_1.downgradeInjectable(PlaythroughObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/statistics/statistics-domain.constants.ajs.ts":
/*!**************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/statistics/statistics-domain.constants.ajs.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for the statistics domain.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var statistics_domain_constants_1 = __webpack_require__(/*! domain/statistics/statistics-domain.constants */ "./core/templates/dev/head/domain/statistics/statistics-domain.constants.ts");
angular.module('oppia').constant('LEARNER_ACTION_SCHEMA_LATEST_VERSION', statistics_domain_constants_1.StatisticsDomainConstants.LEARNER_ACTION_SCHEMA_LATEST_VERSION);
angular.module('oppia').constant('ANSWER_DETAILS_IMPROVEMENT_CARD_TYPE', statistics_domain_constants_1.StatisticsDomainConstants.ANSWER_DETAILS_IMPROVEMENT_CARD_TYPE);
angular.module('oppia').constant('PLAYTHROUGH_IMPROVEMENT_CARD_TYPE', statistics_domain_constants_1.StatisticsDomainConstants.PLAYTHROUGH_IMPROVEMENT_CARD_TYPE);
angular.module('oppia').constant('FEEDBACK_IMPROVEMENT_CARD_TYPE', statistics_domain_constants_1.StatisticsDomainConstants.FEEDBACK_IMPROVEMENT_CARD_TYPE);
angular.module('oppia').constant('SUBMIT_LEARNER_ANSWER_DETAILS_URL', statistics_domain_constants_1.StatisticsDomainConstants.SUBMIT_LEARNER_ANSWER_DETAILS_URL);
angular.module('oppia').constant('SUGGESTION_IMPROVEMENT_CARD_TYPE', statistics_domain_constants_1.StatisticsDomainConstants.SUGGESTION_IMPROVEMENT_CARD_TYPE);


/***/ }),

/***/ "./core/templates/dev/head/domain/statistics/statistics-domain.constants.ts":
/*!**********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/statistics/statistics-domain.constants.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for the statistics domain.
 */
var StatisticsDomainConstants = /** @class */ (function () {
    function StatisticsDomainConstants() {
    }
    StatisticsDomainConstants.LEARNER_ACTION_SCHEMA_LATEST_VERSION = 1;
    StatisticsDomainConstants.ANSWER_DETAILS_IMPROVEMENT_CARD_TYPE = 'answer-details';
    StatisticsDomainConstants.PLAYTHROUGH_IMPROVEMENT_CARD_TYPE = 'playthrough';
    StatisticsDomainConstants.FEEDBACK_IMPROVEMENT_CARD_TYPE = 'feedback';
    StatisticsDomainConstants.SUBMIT_LEARNER_ANSWER_DETAILS_URL = '/learneranswerdetailshandler/<entity_type>/<entity_id>';
    StatisticsDomainConstants.SUGGESTION_IMPROVEMENT_CARD_TYPE = 'suggestion';
    return StatisticsDomainConstants;
}());
exports.StatisticsDomainConstants = StatisticsDomainConstants;


/***/ }),

/***/ "./core/templates/dev/head/domain/story_viewer/ReadOnlyStoryNodeObjectFactory.ts":
/*!***************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/story_viewer/ReadOnlyStoryNodeObjectFactory.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Factory for storing frontend story node domain objects in the
 * story viewer.
 */
angular.module('oppia').factory('ReadOnlyStoryNodeObjectFactory', [function () {
        var StoryNode = function (id, title, destinationNodeIds, prerequisiteSkillIds, acquiredSkillIds, outline, outlineIsFinalized, explorationId, explorationSummary, completed) {
            this._id = id;
            this._title = title;
            this._destinationNodeIds = destinationNodeIds;
            this._prerequisiteSkillIds = prerequisiteSkillIds;
            this._acquiredSkillIds = acquiredSkillIds;
            this._outline = outline;
            this._outlineIsFinalized = outlineIsFinalized;
            this._explorationId = explorationId;
            this._explorationSummaryObject = explorationSummary;
            this._completed = completed;
        };
        // Instance methods
        StoryNode.prototype.getId = function () {
            return this._id;
        };
        StoryNode.prototype.getTitle = function () {
            return this._title;
        };
        StoryNode.prototype.getExplorationId = function () {
            return this._explorationId;
        };
        StoryNode.prototype.isCompleted = function () {
            return this._completed;
        };
        StoryNode.prototype.getExplorationSummaryObject = function () {
            return this._explorationSummaryObject;
        };
        StoryNode.prototype.getOutline = function () {
            return this._outline;
        };
        StoryNode.prototype.getOutlineStatus = function () {
            return this._outlineIsFinalized;
        };
        // Static class methods. Note that "this" is not available in static
        // contexts. This function takes a JSON object which represents a backend
        // story python dict.
        // TODO(ankita240796): Remove the bracket notation once Angular2 gets in.
        /* eslint-disable dot-notation */
        StoryNode['createFromBackendDict'] = function (storyNodeBackendObject) {
            /* eslint-enable dot-notation */
            return new StoryNode(storyNodeBackendObject.id, storyNodeBackendObject.title, storyNodeBackendObject.destination_node_ids, storyNodeBackendObject.prerequisite_skill_ids, storyNodeBackendObject.acquired_skill_ids, storyNodeBackendObject.outline, storyNodeBackendObject.outline_is_finalized, storyNodeBackendObject.exploration_id, storyNodeBackendObject.exp_summary_dict, storyNodeBackendObject.completed);
        };
        return StoryNode;
    }]);


/***/ }),

/***/ "./core/templates/dev/head/domain/story_viewer/StoryViewerBackendApiService.ts":
/*!*************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/story_viewer/StoryViewerBackendApiService.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to get story data.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! domain/story_viewer/story-viewer-domain.constants.ajs.ts */ "./core/templates/dev/head/domain/story_viewer/story-viewer-domain.constants.ajs.ts");
angular.module('oppia').factory('StoryViewerBackendApiService', [
    '$http', '$q', 'UrlInterpolationService', 'STORY_DATA_URL_TEMPLATE',
    'STORY_NODE_COMPLETION_URL_TEMPLATE',
    function ($http, $q, UrlInterpolationService, STORY_DATA_URL_TEMPLATE, STORY_NODE_COMPLETION_URL_TEMPLATE) {
        var storyDataDict = null;
        var _fetchStoryData = function (storyId, successCallback, errorCallback) {
            var storyDataUrl = UrlInterpolationService.interpolateUrl(STORY_DATA_URL_TEMPLATE, {
                story_id: storyId
            });
            $http.get(storyDataUrl).then(function (response) {
                storyDataDict = angular.copy(response.data);
                if (successCallback) {
                    successCallback(storyDataDict);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        var _recordStoryNodeCompletion = function (storyId, nodeId, successCallback, errorCallback) {
            var storyNodeCompletionUrl = UrlInterpolationService.interpolateUrl(STORY_NODE_COMPLETION_URL_TEMPLATE, {
                story_id: storyId,
                node_id: nodeId
            });
            $http.post(storyNodeCompletionUrl).then(function (response) {
                if (successCallback) {
                    successCallback();
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        return {
            fetchStoryData: function (storyId) {
                return $q(function (resolve, reject) {
                    _fetchStoryData(storyId, resolve, reject);
                });
            },
            recordStoryNodeCompletion: function (storyId, nodeId) {
                return $q(function (resolve, reject) {
                    _recordStoryNodeCompletion(storyId, nodeId, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/story_viewer/story-viewer-domain.constants.ajs.ts":
/*!******************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/story_viewer/story-viewer-domain.constants.ajs.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for story viewer domain.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var story_viewer_domain_constants_1 = __webpack_require__(/*! domain/story_viewer/story-viewer-domain.constants */ "./core/templates/dev/head/domain/story_viewer/story-viewer-domain.constants.ts");
angular.module('oppia').constant('STORY_DATA_URL_TEMPLATE', story_viewer_domain_constants_1.StoryViewerDomainConstants.STORY_DATA_URL_TEMPLATE);
angular.module('oppia').constant('STORY_NODE_COMPLETION_URL_TEMPLATE', story_viewer_domain_constants_1.StoryViewerDomainConstants.STORY_NODE_COMPLETION_URL_TEMPLATE);


/***/ }),

/***/ "./core/templates/dev/head/domain/story_viewer/story-viewer-domain.constants.ts":
/*!**************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/story_viewer/story-viewer-domain.constants.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for story viewer domain.
 */
var StoryViewerDomainConstants = /** @class */ (function () {
    function StoryViewerDomainConstants() {
    }
    StoryViewerDomainConstants.STORY_DATA_URL_TEMPLATE = '/story_data_handler/<story_id>';
    StoryViewerDomainConstants.STORY_NODE_COMPLETION_URL_TEMPLATE = '/story_node_completion_handler/<story_id>/<node_id>';
    return StoryViewerDomainConstants;
}());
exports.StoryViewerDomainConstants = StoryViewerDomainConstants;


/***/ }),

/***/ "./core/templates/dev/head/domain/summary/ExplorationSummaryBackendApiService.ts":
/*!***************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/summary/ExplorationSummaryBackendApiService.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to retrieve information about exploration summaries
 * from the backend.
 */
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ValidatorsService.ts */ "./core/templates/dev/head/services/ValidatorsService.ts");
angular.module('oppia').factory('ExplorationSummaryBackendApiService', [
    '$http', '$q', 'AlertsService',
    'ValidatorsService', 'EXPLORATION_SUMMARY_DATA_URL_TEMPLATE',
    function ($http, $q, AlertsService, ValidatorsService, EXPLORATION_SUMMARY_DATA_URL_TEMPLATE) {
        var _fetchExpSummaries = function (explorationIds, includePrivateExplorations, successCallback, errorCallback) {
            if (!explorationIds.every(ValidatorsService.isValidExplorationId)) {
                AlertsService.addWarning('Please enter a valid exploration ID.');
                var returnValue = [];
                for (var i = 0; i < explorationIds.length; i++) {
                    returnValue.push(null);
                }
                return $q.resolve(returnValue);
            }
            var explorationSummaryDataUrl = EXPLORATION_SUMMARY_DATA_URL_TEMPLATE;
            $http.get(explorationSummaryDataUrl, {
                params: {
                    stringified_exp_ids: JSON.stringify(explorationIds),
                    include_private_explorations: JSON.stringify(includePrivateExplorations)
                }
            }).then(function (response) {
                var summaries = angular.copy(response.data.summaries);
                if (successCallback) {
                    if (summaries === null) {
                        var summariesError = ('Summaries fetched are null for explorationIds: ' + explorationIds);
                        throw new Error(summariesError);
                    }
                    successCallback(summaries);
                }
            }, function (errorResponse) {
                if (errorCallback) {
                    errorCallback(errorResponse.data);
                }
            });
        };
        return {
            /**
             * Fetches a list of public exploration summaries and private
             * exploration summaries for which the current user has access from the
             * backend for each exploration ID provided. The provided list of
             * exploration summaries are in the same order as input exploration IDs
             * list, though some may be missing (if the exploration doesn't exist or
             * or the user does not have access to it).
             */
            loadPublicAndPrivateExplorationSummaries: function (explorationIds) {
                return $q(function (resolve, reject) {
                    _fetchExpSummaries(explorationIds, true, resolve, reject);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/utilities/AudioLanguageObjectFactory.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/domain/utilities/AudioLanguageObjectFactory.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Object factory for creating audio languages.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var AudioLanguage = /** @class */ (function () {
    function AudioLanguage(id, description, relatedLanguages) {
        this.id = id;
        this.description = description;
        this.relatedLanguages = relatedLanguages;
    }
    return AudioLanguage;
}());
exports.AudioLanguage = AudioLanguage;
var AudioLanguageObjectFactory = /** @class */ (function () {
    function AudioLanguageObjectFactory() {
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'audioLanguageDict' is a dict with underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    AudioLanguageObjectFactory.prototype.createFromDict = function (audioLanguageDict) {
        return new AudioLanguage(audioLanguageDict.id, audioLanguageDict.description, audioLanguageDict.relatedLanguages);
    };
    AudioLanguageObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], AudioLanguageObjectFactory);
    return AudioLanguageObjectFactory;
}());
exports.AudioLanguageObjectFactory = AudioLanguageObjectFactory;
angular.module('oppia').factory('AudioLanguageObjectFactory', static_1.downgradeInjectable(AudioLanguageObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/utilities/AutogeneratedAudioLanguageObjectFactory.ts":
/*!*********************************************************************************************!*\
  !*** ./core/templates/dev/head/domain/utilities/AutogeneratedAudioLanguageObjectFactory.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Object factory for creating autogenerated audio languages.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var AutogeneratedAudioLanguage = /** @class */ (function () {
    function AutogeneratedAudioLanguage(id, description, explorationLanguage, speechSynthesisCode, speechSynthesisCodeMobile) {
        this.id = id;
        this.description = description;
        this.explorationLanguage = explorationLanguage;
        this.speechSynthesisCode = speechSynthesisCode;
        this.speechSynthesisCodeMobile = speechSynthesisCodeMobile;
    }
    return AutogeneratedAudioLanguage;
}());
exports.AutogeneratedAudioLanguage = AutogeneratedAudioLanguage;
var AutogeneratedAudioLanguageObjectFactory = /** @class */ (function () {
    function AutogeneratedAudioLanguageObjectFactory() {
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'autogeneratedAudioLanguageDict' is a dict with
    // underscore_cased keys which give tslint errors against underscore_casing
    // in favor of camelCasing.
    AutogeneratedAudioLanguageObjectFactory.prototype.createFromDict = function (autogeneratedAudioLanguageDict) {
        return new AutogeneratedAudioLanguage(autogeneratedAudioLanguageDict.id, autogeneratedAudioLanguageDict.description, autogeneratedAudioLanguageDict.exploration_language, autogeneratedAudioLanguageDict.speech_synthesis_code, autogeneratedAudioLanguageDict.speech_synthesis_code_mobile);
    };
    AutogeneratedAudioLanguageObjectFactory = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], AutogeneratedAudioLanguageObjectFactory);
    return AutogeneratedAudioLanguageObjectFactory;
}());
exports.AutogeneratedAudioLanguageObjectFactory = AutogeneratedAudioLanguageObjectFactory;
angular.module('oppia').factory('AutogeneratedAudioLanguageObjectFactory', static_1.downgradeInjectable(AutogeneratedAudioLanguageObjectFactory));


/***/ }),

/***/ "./core/templates/dev/head/domain/utilities/LanguageUtilService.ts":
/*!*************************************************************************!*\
  !*** ./core/templates/dev/head/domain/utilities/LanguageUtilService.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Utility service for language operations.
 */
__webpack_require__(/*! domain/utilities/AudioLanguageObjectFactory.ts */ "./core/templates/dev/head/domain/utilities/AudioLanguageObjectFactory.ts");
__webpack_require__(/*! domain/utilities/AutogeneratedAudioLanguageObjectFactory.ts */ "./core/templates/dev/head/domain/utilities/AutogeneratedAudioLanguageObjectFactory.ts");
__webpack_require__(/*! domain/utilities/BrowserCheckerService.ts */ "./core/templates/dev/head/domain/utilities/BrowserCheckerService.ts");
angular.module('oppia').factory('LanguageUtilService', [
    'AudioLanguageObjectFactory', 'AutogeneratedAudioLanguageObjectFactory',
    'BrowserCheckerService', 'ALL_LANGUAGE_CODES',
    'AUTOGENERATED_AUDIO_LANGUAGES', 'SUPPORTED_AUDIO_LANGUAGES',
    function (AudioLanguageObjectFactory, AutogeneratedAudioLanguageObjectFactory, BrowserCheckerService, ALL_LANGUAGE_CODES, AUTOGENERATED_AUDIO_LANGUAGES, SUPPORTED_AUDIO_LANGUAGES) {
        var supportedAudioLanguageList = SUPPORTED_AUDIO_LANGUAGES;
        var autogeneratedAudioLanguageList = AUTOGENERATED_AUDIO_LANGUAGES;
        var supportedAudioLanguages = {};
        var autogeneratedAudioLanguagesByExplorationLanguageCode = {};
        var autogeneratedAudioLanguagesByAutogeneratedLanguageCode = {};
        var getShortLanguageDescription = function (fullLanguageDescription) {
            var ind = fullLanguageDescription.indexOf(' (');
            if (ind === -1) {
                return fullLanguageDescription;
            }
            else {
                return fullLanguageDescription.substring(0, ind);
            }
        };
        var languageIdsAndTexts = ALL_LANGUAGE_CODES.map(function (languageItem) {
            return {
                id: languageItem.code,
                text: getShortLanguageDescription(languageItem.description)
            };
        });
        var allAudioLanguageCodes = (supportedAudioLanguageList.map(function (audioLanguage) {
            return audioLanguage.id;
        }));
        supportedAudioLanguageList.forEach(function (audioLanguageDict) {
            supportedAudioLanguages[audioLanguageDict.id] =
                AudioLanguageObjectFactory.createFromDict(audioLanguageDict);
        });
        autogeneratedAudioLanguageList.forEach(function (autogeneratedAudioLanguageDict) {
            var autogeneratedAudioLanguage = AutogeneratedAudioLanguageObjectFactory.createFromDict(autogeneratedAudioLanguageDict);
            autogeneratedAudioLanguagesByExplorationLanguageCode[autogeneratedAudioLanguage.explorationLanguage] =
                autogeneratedAudioLanguage;
            autogeneratedAudioLanguagesByAutogeneratedLanguageCode[autogeneratedAudioLanguage.id] =
                autogeneratedAudioLanguage;
        });
        var audioLanguagesCount = allAudioLanguageCodes.length;
        return {
            getLanguageIdsAndTexts: function () {
                return languageIdsAndTexts;
            },
            getAudioLanguagesCount: function () {
                return audioLanguagesCount;
            },
            getAllVoiceoverLanguageCodes: function () {
                return angular.copy(allAudioLanguageCodes);
            },
            getAudioLanguageDescription: function (audioLanguageCode) {
                return supportedAudioLanguages[audioLanguageCode].description;
            },
            // Given a list of audio language codes, returns the complement list, i.e.
            // the list of audio language codes not in the input list.
            getComplementAudioLanguageCodes: function (audioLanguageCodes) {
                return allAudioLanguageCodes.filter(function (languageCode) {
                    return audioLanguageCodes.indexOf(languageCode) === -1;
                });
            },
            getLanguageCodesRelatedToAudioLanguageCode: function (audioLanguageCode) {
                return supportedAudioLanguages[audioLanguageCode].relatedLanguages;
            },
            supportsAutogeneratedAudio: function (explorationLanguageCode) {
                return (BrowserCheckerService.supportsSpeechSynthesis() &&
                    autogeneratedAudioLanguagesByExplorationLanguageCode
                        .hasOwnProperty(explorationLanguageCode));
            },
            isAutogeneratedAudioLanguage: function (audioLanguageCode) {
                return autogeneratedAudioLanguagesByAutogeneratedLanguageCode
                    .hasOwnProperty(audioLanguageCode);
            },
            getAutogeneratedAudioLanguage: function (explorationLanguageCode) {
                return autogeneratedAudioLanguagesByExplorationLanguageCode[explorationLanguageCode];
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/domain/utilities/StopwatchObjectFactory.ts":
/*!****************************************************************************!*\
  !*** ./core/templates/dev/head/domain/utilities/StopwatchObjectFactory.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Object factory for creating stopwatches.
 */
// A simple service that provides stopwatch instances. Each stopwatch can be
// independently reset and queried for the current time.
angular.module('oppia').factory('StopwatchObjectFactory', [
    '$log', function ($log) {
        var Stopwatch = function () {
            this.startTime = null;
        };
        Stopwatch.prototype = {
            _getCurrentTime: function () {
                return Date.now();
            },
            reset: function () {
                this.startTime = this._getCurrentTime();
            },
            getTimeInSecs: function () {
                if (this.startTime === null) {
                    $log.error('Tried to retrieve the elapsed time, but no start time was set.');
                    return null;
                }
                return (this._getCurrentTime() - this.startTime) / 1000;
            }
        };
        return {
            create: function () {
                return new Stopwatch();
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/expressions/ExpressionEvaluatorService.ts":
/*!***************************************************************************!*\
  !*** ./core/templates/dev/head/expressions/ExpressionEvaluatorService.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This file defines the evaluation engine as well as the system operators.
// The evaluator takes the output of the parser (i.e. parse tree) as defined in
// parser.pegjs and produces a javaScript primitive value when the evaluation is
// performed correctly.
// Two cases that can throw an exception (i.e. an Error object):
// - Variable look-up ('#' operator) failure. (ExprUndefinedVarError)
// - Wrong number of arguments in the node for the given operator.
//   (ExprWrongNumArgsError)
// Both errors are children of ExpressionError, so caller can use
// ExpressionError to catch only these expected error cases.
//
// An expression is evaluated in a context consisting of predefined system
// variables, system operators, and system functions. In the input language,
// operators are predefined set of characters in infix, postfix, or ternary
// format (there is currently no postfix operators) while functions have the
// form of function calls (e.g. "abs(10)"). In the parse tree, there is no
// difference between operators and functions. User defined parameters may
// override the meaning of system variables and functions (but not operators).
// Users also can define parameters with new names. Referencing a variable which
// is not defined as a system variable, system function, or user parameter will
// result in ExprUndefinedVarError to be thrown.
//
// All system variables, system operators, and system functions are defined
// as 'system' variable in this file.
//
// TODO(kashida): Split the following section into two:
//     - A general overview of operators (including some concrete examples)
//     - A numbered sequence of steps which a new contributor should follow in
//         order to define a new operator.
// Defining new operators and functions:
// Operators and functions are given an array of arguments which are already all
// evaluated. E.g. for an expression "1 + 2 * 3", the "+" plus operator receives
// values 1 and 6 (i.e. "2 * 3" already evaluated).
// The operators and functions should verify that the argument array
// has the required number of arguments. Operators and functions can coerse the
// input arguments to the desired typed values, or throw an exception if wrong
// type of argument is given.
// type of inputs. This does not prevent operators to eror on wrong parameter
// values (e.g. getting negative number for an index).
// When successful, operators and functions may return any valid JavaScript
// values. In general, an operator always returns the same type of value, but
// there are exceptions (e.g. "+" operator may return a number or a string
// depending on the types of the input arguments).
// Constraints on the input arguments (number, types, and any other
// constraints) as well as the output value and type should be documented.
/**
 * @fileoverview Service for expression evaluation.
 */
__webpack_require__(/*! expressions/ExpressionParserService.js */ "./core/templates/dev/head/expressions/ExpressionParserService.js");
__webpack_require__(/*! expressions/ExpressionSyntaxTreeService.ts */ "./core/templates/dev/head/expressions/ExpressionSyntaxTreeService.ts");
// Service for expression evaluation.
angular.module('oppia').factory('ExpressionEvaluatorService', [
    'ExpressionParserService', 'ExpressionSyntaxTreeService',
    function (ExpressionParserService, ExpressionSyntaxTreeService) {
        var evaluateExpression = function (expression, envs) {
            return ExpressionSyntaxTreeService.applyFunctionToParseTree(ExpressionParserService.parse(expression), envs, evaluate);
        };
        /**
         * @param {*} parsed Parse output from the parser. See parser.pegjs for
         *     the data structure.
         * @param {!Array.<!Object>} envs Represents a nested name space
         *     environment to look up the name in. The first element is looked up
         *     first (i.e. has higher precedence).
         */
        var evaluate = function (parsed, envs) {
            // The intermediate nodes of the parse tree are arrays. The terminal
            // nodes are JavaScript primitives (as described in the "Parser output"
            // section of parser.pegjs).
            if (parsed instanceof Array) {
                if (parsed.length === 0) {
                    throw 'Parser generated an intermediate node with zero children';
                }
                if (parsed[0] === '#') {
                    return ExpressionSyntaxTreeService.lookupEnvs(parsed[1], envs);
                }
                // Evaluate rest of the elements, i.e. the arguments.
                var args = parsed.slice(1).map(function (item) {
                    return evaluate(item, envs);
                });
                // The first element should be a function name.
                return ExpressionSyntaxTreeService.lookupEnvs(parsed[0], envs).eval(args);
            }
            // This should be a terminal node with the actual value.
            return parsed;
        };
        return {
            evaluate: evaluate,
            evaluateExpression: evaluateExpression,
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/expressions/ExpressionInterpolationService.ts":
/*!*******************************************************************************!*\
  !*** ./core/templates/dev/head/expressions/ExpressionInterpolationService.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for interpolating expressions.
 */
__webpack_require__(/*! filters/convert-html-to-unicode.filter.ts */ "./core/templates/dev/head/filters/convert-html-to-unicode.filter.ts");
__webpack_require__(/*! expressions/ExpressionEvaluatorService.ts */ "./core/templates/dev/head/expressions/ExpressionEvaluatorService.ts");
__webpack_require__(/*! expressions/ExpressionParserService.js */ "./core/templates/dev/head/expressions/ExpressionParserService.js");
__webpack_require__(/*! expressions/ExpressionSyntaxTreeService.ts */ "./core/templates/dev/head/expressions/ExpressionSyntaxTreeService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
// Interpolates an HTML or a unicode string containing expressions.
// The input value is evaluated against the supplied environments.
//
// Examples:
//   processHtml('abc{{a}}', [{'a': 'b'}]) gives 'abcb'.
//   processHtml('abc{{a}}', [{}]) returns null.
//   processHtml('abc', [{}]) returns 'abc'.
//   processHtml('{[a}}', [{'a': '<button></button>'}])
//     returns '&lt;button&gt;&lt;/button&gt;'.
//   processUnicode('abc{{a}}', [{'a': 'b'}]) gives 'abcb'.
//   processUnicode('abc{{a}}', [{}]) returns null.
//   processUnicode('{[a}}', [{'a': '<button></button>'}]) returns
//     '<button></button>'.
angular.module('oppia').factory('ExpressionInterpolationService', [
    '$filter', 'ExpressionEvaluatorService', 'ExpressionParserService',
    'ExpressionSyntaxTreeService', 'HtmlEscaperService',
    function ($filter, ExpressionEvaluatorService, ExpressionParserService, ExpressionSyntaxTreeService, HtmlEscaperService) {
        return {
            // This method should only be used if its result would immediately be
            // displayed on the screen without passing through further computation.
            // It differs from other methods in this service in that it
            // auto-escapes the returned HTML, and returns an 'error' label if the
            // evaluation fails.
            processHtml: function (sourceHtml, envs) {
                return sourceHtml.replace(/{{([^}]*)}}/g, function (match, p1) {
                    try {
                        // TODO(sll): Remove the call to $filter once we have a
                        // custom UI for entering expressions. It is only needed because
                        // expressions are currently input inline via the RTE.
                        return HtmlEscaperService.unescapedStrToEscapedStr(ExpressionEvaluatorService.evaluateExpression($filter('convertHtmlToUnicode')(p1), envs));
                    }
                    catch (e) {
                        var EXPRESSION_ERROR_TAG = ('<oppia-expression-error-tag></oppia-expression-error-tag>');
                        if ((e instanceof ExpressionParserService.SyntaxError) ||
                            (e instanceof ExpressionSyntaxTreeService.ExpressionError)) {
                            return EXPRESSION_ERROR_TAG;
                        }
                        throw e;
                    }
                });
            },
            // Returns null if the evaluation fails.
            processUnicode: function (sourceUnicode, envs) {
                try {
                    return sourceUnicode.replace(/{{([^}]*)}}/g, function (match, p1) {
                        // TODO(sll): Remove the call to $filter once we have a
                        // custom UI for entering expressions. It is only needed because
                        // expressions are currently input inline via the RTE.
                        return ExpressionEvaluatorService.evaluateExpression($filter('convertHtmlToUnicode')(p1), envs);
                    });
                }
                catch (e) {
                    if ((e instanceof ExpressionParserService.SyntaxError) ||
                        (e instanceof ExpressionSyntaxTreeService.ExpressionError)) {
                        return null;
                    }
                    throw e;
                }
            },
            // This works for both unicode and HTML.
            getParamsFromString: function (sourceString) {
                var matches = sourceString.match(/{{([^}]*)}}/g) || [];
                var allParams = [];
                for (var i = 0; i < matches.length; i++) {
                    // Trim the '{{' and '}}'.
                    matches[i] = matches[i].substring(2, matches[i].length - 2);
                    var params = ExpressionSyntaxTreeService.getParamsUsedInExpression($filter('convertHtmlToUnicode')(matches[i]));
                    for (var j = 0; j < params.length; j++) {
                        if (allParams.indexOf(params[j]) === -1) {
                            allParams.push(params[j]);
                        }
                    }
                }
                return allParams.sort();
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/expressions/ExpressionParserService.js":
/*!************************************************************************!*\
  !*** ./core/templates/dev/head/expressions/ExpressionParserService.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

angular.module('oppia').factory('ExpressionParserService', ['$log', function($log) {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = function(expression) { return expression; },
        peg$c2 = { type: "any", description: "any character" },
        peg$c3 = { type: "other", description: "whitespace" },
        peg$c4 = /^[\t\x0B\f \xA0\uFEFF]/,
        peg$c5 = { type: "class", value: "[\\t\\x0B\\f \\xA0\\uFEFF]", description: "[\\t\\x0B\\f \\xA0\\uFEFF]" },
        peg$c6 = { type: "other", description: "identifier" },
        peg$c7 = void 0,
        peg$c8 = function(name) { return name; },
        peg$c9 = [],
        peg$c10 = function(start, parts) {
              return start + parts.join("");
            },
        peg$c11 = "$",
        peg$c12 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c13 = "_",
        peg$c14 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c15 = "\\",
        peg$c16 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c17 = function(sequence) { return sequence; },
        peg$c18 = "\u200C",
        peg$c19 = { type: "literal", value: "\u200C", description: "\"\\u200C\"" },
        peg$c20 = function() { return "\u200C"; },
        peg$c21 = "\u200D",
        peg$c22 = { type: "literal", value: "\u200D", description: "\"\\u200D\"" },
        peg$c23 = function() { return "\u200D"; },
        peg$c24 = "null",
        peg$c25 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c26 = function() { return null; },
        peg$c27 = "false",
        peg$c28 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c29 = function() { return false; },
        peg$c30 = "true",
        peg$c31 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c32 = function() { return true; },
        peg$c33 = { type: "other", description: "number" },
        peg$c34 = function(literal) {
              return literal;
            },
        peg$c35 = ".",
        peg$c36 = { type: "literal", value: ".", description: "\".\"" },
        peg$c37 = null,
        peg$c38 = function(parts) {
              return parseFloat(parts);
            },
        peg$c39 = function(parts) { return parseFloat(parts); },
        peg$c40 = "0",
        peg$c41 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c42 = /^[0-9]/,
        peg$c43 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c44 = /^[1-9]/,
        peg$c45 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c46 = /^[eE]/,
        peg$c47 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c48 = /^[\-+]/,
        peg$c49 = { type: "class", value: "[\\-+]", description: "[\\-+]" },
        peg$c50 = /^[xX]/,
        peg$c51 = { type: "class", value: "[xX]", description: "[xX]" },
        peg$c52 = function(digits) { return parseInt(digits, 16); },
        peg$c53 = /^[0-9a-fA-F]/,
        peg$c54 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c55 = { type: "other", description: "string" },
        peg$c56 = "\"",
        peg$c57 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c58 = "'",
        peg$c59 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c60 = function(parts) {
              return parts[1];
            },
        peg$c61 = function(chars) { return chars.join(""); },
        peg$c62 = function(char_) { return char_;     },
        peg$c63 = function(sequence) { return sequence;  },
        peg$c64 = function() { return "\0"; },
        peg$c65 = /^['"\\bfnrtv]/,
        peg$c66 = { type: "class", value: "['\"\\\\bfnrtv]", description: "['\"\\\\bfnrtv]" },
        peg$c67 = function(char_) {
              return char_
                .replace("b", "\b")
                .replace("f", "\f")
                .replace("n", "\n")
                .replace("r", "\r")
                .replace("t", "\t")
                .replace("v", "\x0B") // IE does not recognize "\v".
            },
        peg$c68 = function(char_) { return char_; },
        peg$c69 = "x",
        peg$c70 = { type: "literal", value: "x", description: "\"x\"" },
        peg$c71 = "u",
        peg$c72 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c73 = function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        peg$c74 = /^[abcdefghijklmnopqrstuvwxyz\xAA\xB5\xBA\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E\u017F\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199\u019A\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD\u01BE\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233\u0234\u0235\u0236\u0237\u0238\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F\u0250\u0251\u0252\u0253\u0254\u0255\u0256\u0257\u0258\u0259\u025A\u025B\u025C\u025D\u025E\u025F\u0260\u0261\u0262\u0263\u0264\u0265\u0266\u0267\u0268\u0269\u026A\u026B\u026C\u026D\u026E\u026F\u0270\u0271\u0272\u0273\u0274\u0275\u0276\u0277\u0278\u0279\u027A\u027B\u027C\u027D\u027E\u027F\u0280\u0281\u0282\u0283\u0284\u0285\u0286\u0287\u0288\u0289\u028A\u028B\u028C\u028D\u028E\u028F\u0290\u0291\u0292\u0293\u0295\u0296\u0297\u0298\u0299\u029A\u029B\u029C\u029D\u029E\u029F\u02A0\u02A1\u02A2\u02A3\u02A4\u02A5\u02A6\u02A7\u02A8\u02A9\u02AA\u02AB\u02AC\u02AD\u02AE\u02AF\u0371\u0373\u0377\u037B\u037C\u037D\u0390\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\u03D0\u03D1\u03D5\u03D6\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF\u03F0\u03F1\u03F2\u03F3\u03F5\u03F8\u03FB\u03FC\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0450\u0451\u0452\u0453\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\u045D\u045E\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0561\u0562\u0563\u0564\u0565\u0566\u0567\u0568\u0569\u056A\u056B\u056C\u056D\u056E\u056F\u0570\u0571\u0572\u0573\u0574\u0575\u0576\u0577\u0578\u0579\u057A\u057B\u057C\u057D\u057E\u057F\u0580\u0581\u0582\u0583\u0584\u0585\u0586\u0587\u1D00\u1D01\u1D02\u1D03\u1D04\u1D05\u1D06\u1D07\u1D08\u1D09\u1D0A\u1D0B\u1D0C\u1D0D\u1D0E\u1D0F\u1D10\u1D11\u1D12\u1D13\u1D14\u1D15\u1D16\u1D17\u1D18\u1D19\u1D1A\u1D1B\u1D1C\u1D1D\u1D1E\u1D1F\u1D20\u1D21\u1D22\u1D23\u1D24\u1D25\u1D26\u1D27\u1D28\u1D29\u1D2A\u1D2B\u1D62\u1D63\u1D64\u1D65\u1D66\u1D67\u1D68\u1D69\u1D6A\u1D6B\u1D6C\u1D6D\u1D6E\u1D6F\u1D70\u1D71\u1D72\u1D73\u1D74\u1D75\u1D76\u1D77\u1D79\u1D7A\u1D7B\u1D7C\u1D7D\u1D7E\u1D7F\u1D80\u1D81\u1D82\u1D83\u1D84\u1D85\u1D86\u1D87\u1D88\u1D89\u1D8A\u1D8B\u1D8C\u1D8D\u1D8E\u1D8F\u1D90\u1D91\u1D92\u1D93\u1D94\u1D95\u1D96\u1D97\u1D98\u1D99\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95\u1E96\u1E97\u1E98\u1E99\u1E9A\u1E9B\u1E9C\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF\u1F00\u1F01\u1F02\u1F03\u1F04\u1F05\u1F06\u1F07\u1F10\u1F11\u1F12\u1F13\u1F14\u1F15\u1F20\u1F21\u1F22\u1F23\u1F24\u1F25\u1F26\u1F27\u1F30\u1F31\u1F32\u1F33\u1F34\u1F35\u1F36\u1F37\u1F40\u1F41\u1F42\u1F43\u1F44\u1F45\u1F50\u1F51\u1F52\u1F53\u1F54\u1F55\u1F56\u1F57\u1F60\u1F61\u1F62\u1F63\u1F64\u1F65\u1F66\u1F67\u1F70\u1F71\u1F72\u1F73\u1F74\u1F75\u1F76\u1F77\u1F78\u1F79\u1F7A\u1F7B\u1F7C\u1F7D\u1F80\u1F81\u1F82\u1F83\u1F84\u1F85\u1F86\u1F87\u1F90\u1F91\u1F92\u1F93\u1F94\u1F95\u1F96\u1F97\u1FA0\u1FA1\u1FA2\u1FA3\u1FA4\u1FA5\u1FA6\u1FA7\u1FB0\u1FB1\u1FB2\u1FB3\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2\u1FC3\u1FC4\u1FC6\u1FC7\u1FD0\u1FD1\u1FD2\u1FD3\u1FD6\u1FD7\u1FE0\u1FE1\u1FE2\u1FE3\u1FE4\u1FE5\u1FE6\u1FE7\u1FF2\u1FF3\u1FF4\u1FF6\u1FF7\u2071\u207F\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146\u2147\u2148\u2149\u214E\u2184\u2C30\u2C31\u2C32\u2C33\u2C34\u2C35\u2C36\u2C37\u2C38\u2C39\u2C3A\u2C3B\u2C3C\u2C3D\u2C3E\u2C3F\u2C40\u2C41\u2C42\u2C43\u2C44\u2C45\u2C46\u2C47\u2C48\u2C49\u2C4A\u2C4B\u2C4C\u2C4D\u2C4E\u2C4F\u2C50\u2C51\u2C52\u2C53\u2C54\u2C55\u2C56\u2C57\u2C58\u2C59\u2C5A\u2C5B\u2C5C\u2C5D\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76\u2C77\u2C78\u2C79\u2C7A\u2C7B\u2C7C\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2D00\u2D01\u2D02\u2D03\u2D04\u2D05\u2D06\u2D07\u2D08\u2D09\u2D0A\u2D0B\u2D0C\u2D0D\u2D0E\u2D0F\u2D10\u2D11\u2D12\u2D13\u2D14\u2D15\u2D16\u2D17\u2D18\u2D19\u2D1A\u2D1B\u2D1C\u2D1D\u2D1E\u2D1F\u2D20\u2D21\u2D22\u2D23\u2D24\u2D25\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F\uA730\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771\uA772\uA773\uA774\uA775\uA776\uA777\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uFB00\uFB01\uFB02\uFB03\uFB04\uFB05\uFB06\uFB13\uFB14\uFB15\uFB16\uFB17\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A]/,
        peg$c75 = { type: "class", value: "[abcdefghijklmnopqrstuvwxyz\\xAA\\xB5\\xBA\\xDF\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\xE6\\xE7\\xE8\\xE9\\xEA\\xEB\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF6\\xF8\\xF9\\xFA\\xFB\\xFC\\xFD\\xFE\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E\\u017F\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199\\u019A\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD\\u01BE\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233\\u0234\\u0235\\u0236\\u0237\\u0238\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F\\u0250\\u0251\\u0252\\u0253\\u0254\\u0255\\u0256\\u0257\\u0258\\u0259\\u025A\\u025B\\u025C\\u025D\\u025E\\u025F\\u0260\\u0261\\u0262\\u0263\\u0264\\u0265\\u0266\\u0267\\u0268\\u0269\\u026A\\u026B\\u026C\\u026D\\u026E\\u026F\\u0270\\u0271\\u0272\\u0273\\u0274\\u0275\\u0276\\u0277\\u0278\\u0279\\u027A\\u027B\\u027C\\u027D\\u027E\\u027F\\u0280\\u0281\\u0282\\u0283\\u0284\\u0285\\u0286\\u0287\\u0288\\u0289\\u028A\\u028B\\u028C\\u028D\\u028E\\u028F\\u0290\\u0291\\u0292\\u0293\\u0295\\u0296\\u0297\\u0298\\u0299\\u029A\\u029B\\u029C\\u029D\\u029E\\u029F\\u02A0\\u02A1\\u02A2\\u02A3\\u02A4\\u02A5\\u02A6\\u02A7\\u02A8\\u02A9\\u02AA\\u02AB\\u02AC\\u02AD\\u02AE\\u02AF\\u0371\\u0373\\u0377\\u037B\\u037C\\u037D\\u0390\\u03AC\\u03AD\\u03AE\\u03AF\\u03B0\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03CA\\u03CB\\u03CC\\u03CD\\u03CE\\u03D0\\u03D1\\u03D5\\u03D6\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043A\\u043B\\u043C\\u043D\\u043E\\u043F\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044A\\u044B\\u044C\\u044D\\u044E\\u044F\\u0450\\u0451\\u0452\\u0453\\u0454\\u0455\\u0456\\u0457\\u0458\\u0459\\u045A\\u045B\\u045C\\u045D\\u045E\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0561\\u0562\\u0563\\u0564\\u0565\\u0566\\u0567\\u0568\\u0569\\u056A\\u056B\\u056C\\u056D\\u056E\\u056F\\u0570\\u0571\\u0572\\u0573\\u0574\\u0575\\u0576\\u0577\\u0578\\u0579\\u057A\\u057B\\u057C\\u057D\\u057E\\u057F\\u0580\\u0581\\u0582\\u0583\\u0584\\u0585\\u0586\\u0587\\u1D00\\u1D01\\u1D02\\u1D03\\u1D04\\u1D05\\u1D06\\u1D07\\u1D08\\u1D09\\u1D0A\\u1D0B\\u1D0C\\u1D0D\\u1D0E\\u1D0F\\u1D10\\u1D11\\u1D12\\u1D13\\u1D14\\u1D15\\u1D16\\u1D17\\u1D18\\u1D19\\u1D1A\\u1D1B\\u1D1C\\u1D1D\\u1D1E\\u1D1F\\u1D20\\u1D21\\u1D22\\u1D23\\u1D24\\u1D25\\u1D26\\u1D27\\u1D28\\u1D29\\u1D2A\\u1D2B\\u1D62\\u1D63\\u1D64\\u1D65\\u1D66\\u1D67\\u1D68\\u1D69\\u1D6A\\u1D6B\\u1D6C\\u1D6D\\u1D6E\\u1D6F\\u1D70\\u1D71\\u1D72\\u1D73\\u1D74\\u1D75\\u1D76\\u1D77\\u1D79\\u1D7A\\u1D7B\\u1D7C\\u1D7D\\u1D7E\\u1D7F\\u1D80\\u1D81\\u1D82\\u1D83\\u1D84\\u1D85\\u1D86\\u1D87\\u1D88\\u1D89\\u1D8A\\u1D8B\\u1D8C\\u1D8D\\u1D8E\\u1D8F\\u1D90\\u1D91\\u1D92\\u1D93\\u1D94\\u1D95\\u1D96\\u1D97\\u1D98\\u1D99\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95\\u1E96\\u1E97\\u1E98\\u1E99\\u1E9A\\u1E9B\\u1E9C\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF\\u1F00\\u1F01\\u1F02\\u1F03\\u1F04\\u1F05\\u1F06\\u1F07\\u1F10\\u1F11\\u1F12\\u1F13\\u1F14\\u1F15\\u1F20\\u1F21\\u1F22\\u1F23\\u1F24\\u1F25\\u1F26\\u1F27\\u1F30\\u1F31\\u1F32\\u1F33\\u1F34\\u1F35\\u1F36\\u1F37\\u1F40\\u1F41\\u1F42\\u1F43\\u1F44\\u1F45\\u1F50\\u1F51\\u1F52\\u1F53\\u1F54\\u1F55\\u1F56\\u1F57\\u1F60\\u1F61\\u1F62\\u1F63\\u1F64\\u1F65\\u1F66\\u1F67\\u1F70\\u1F71\\u1F72\\u1F73\\u1F74\\u1F75\\u1F76\\u1F77\\u1F78\\u1F79\\u1F7A\\u1F7B\\u1F7C\\u1F7D\\u1F80\\u1F81\\u1F82\\u1F83\\u1F84\\u1F85\\u1F86\\u1F87\\u1F90\\u1F91\\u1F92\\u1F93\\u1F94\\u1F95\\u1F96\\u1F97\\u1FA0\\u1FA1\\u1FA2\\u1FA3\\u1FA4\\u1FA5\\u1FA6\\u1FA7\\u1FB0\\u1FB1\\u1FB2\\u1FB3\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2\\u1FC3\\u1FC4\\u1FC6\\u1FC7\\u1FD0\\u1FD1\\u1FD2\\u1FD3\\u1FD6\\u1FD7\\u1FE0\\u1FE1\\u1FE2\\u1FE3\\u1FE4\\u1FE5\\u1FE6\\u1FE7\\u1FF2\\u1FF3\\u1FF4\\u1FF6\\u1FF7\\u2071\\u207F\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146\\u2147\\u2148\\u2149\\u214E\\u2184\\u2C30\\u2C31\\u2C32\\u2C33\\u2C34\\u2C35\\u2C36\\u2C37\\u2C38\\u2C39\\u2C3A\\u2C3B\\u2C3C\\u2C3D\\u2C3E\\u2C3F\\u2C40\\u2C41\\u2C42\\u2C43\\u2C44\\u2C45\\u2C46\\u2C47\\u2C48\\u2C49\\u2C4A\\u2C4B\\u2C4C\\u2C4D\\u2C4E\\u2C4F\\u2C50\\u2C51\\u2C52\\u2C53\\u2C54\\u2C55\\u2C56\\u2C57\\u2C58\\u2C59\\u2C5A\\u2C5B\\u2C5C\\u2C5D\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76\\u2C77\\u2C78\\u2C79\\u2C7A\\u2C7B\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2D00\\u2D01\\u2D02\\u2D03\\u2D04\\u2D05\\u2D06\\u2D07\\u2D08\\u2D09\\u2D0A\\u2D0B\\u2D0C\\u2D0D\\u2D0E\\u2D0F\\u2D10\\u2D11\\u2D12\\u2D13\\u2D14\\u2D15\\u2D16\\u2D17\\u2D18\\u2D19\\u2D1A\\u2D1B\\u2D1C\\u2D1D\\u2D1E\\u2D1F\\u2D20\\u2D21\\u2D22\\u2D23\\u2D24\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F\\uA730\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771\\uA772\\uA773\\uA774\\uA775\\uA776\\uA777\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uFB00\\uFB01\\uFB02\\uFB03\\uFB04\\uFB05\\uFB06\\uFB13\\uFB14\\uFB15\\uFB16\\uFB17\\uFF41\\uFF42\\uFF43\\uFF44\\uFF45\\uFF46\\uFF47\\uFF48\\uFF49\\uFF4A\\uFF4B\\uFF4C\\uFF4D\\uFF4E\\uFF4F\\uFF50\\uFF51\\uFF52\\uFF53\\uFF54\\uFF55\\uFF56\\uFF57\\uFF58\\uFF59\\uFF5A]", description: "[abcdefghijklmnopqrstuvwxyz\\xAA\\xB5\\xBA\\xDF\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\xE6\\xE7\\xE8\\xE9\\xEA\\xEB\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF6\\xF8\\xF9\\xFA\\xFB\\xFC\\xFD\\xFE\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E\\u017F\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199\\u019A\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD\\u01BE\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233\\u0234\\u0235\\u0236\\u0237\\u0238\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F\\u0250\\u0251\\u0252\\u0253\\u0254\\u0255\\u0256\\u0257\\u0258\\u0259\\u025A\\u025B\\u025C\\u025D\\u025E\\u025F\\u0260\\u0261\\u0262\\u0263\\u0264\\u0265\\u0266\\u0267\\u0268\\u0269\\u026A\\u026B\\u026C\\u026D\\u026E\\u026F\\u0270\\u0271\\u0272\\u0273\\u0274\\u0275\\u0276\\u0277\\u0278\\u0279\\u027A\\u027B\\u027C\\u027D\\u027E\\u027F\\u0280\\u0281\\u0282\\u0283\\u0284\\u0285\\u0286\\u0287\\u0288\\u0289\\u028A\\u028B\\u028C\\u028D\\u028E\\u028F\\u0290\\u0291\\u0292\\u0293\\u0295\\u0296\\u0297\\u0298\\u0299\\u029A\\u029B\\u029C\\u029D\\u029E\\u029F\\u02A0\\u02A1\\u02A2\\u02A3\\u02A4\\u02A5\\u02A6\\u02A7\\u02A8\\u02A9\\u02AA\\u02AB\\u02AC\\u02AD\\u02AE\\u02AF\\u0371\\u0373\\u0377\\u037B\\u037C\\u037D\\u0390\\u03AC\\u03AD\\u03AE\\u03AF\\u03B0\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03CA\\u03CB\\u03CC\\u03CD\\u03CE\\u03D0\\u03D1\\u03D5\\u03D6\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043A\\u043B\\u043C\\u043D\\u043E\\u043F\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044A\\u044B\\u044C\\u044D\\u044E\\u044F\\u0450\\u0451\\u0452\\u0453\\u0454\\u0455\\u0456\\u0457\\u0458\\u0459\\u045A\\u045B\\u045C\\u045D\\u045E\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0561\\u0562\\u0563\\u0564\\u0565\\u0566\\u0567\\u0568\\u0569\\u056A\\u056B\\u056C\\u056D\\u056E\\u056F\\u0570\\u0571\\u0572\\u0573\\u0574\\u0575\\u0576\\u0577\\u0578\\u0579\\u057A\\u057B\\u057C\\u057D\\u057E\\u057F\\u0580\\u0581\\u0582\\u0583\\u0584\\u0585\\u0586\\u0587\\u1D00\\u1D01\\u1D02\\u1D03\\u1D04\\u1D05\\u1D06\\u1D07\\u1D08\\u1D09\\u1D0A\\u1D0B\\u1D0C\\u1D0D\\u1D0E\\u1D0F\\u1D10\\u1D11\\u1D12\\u1D13\\u1D14\\u1D15\\u1D16\\u1D17\\u1D18\\u1D19\\u1D1A\\u1D1B\\u1D1C\\u1D1D\\u1D1E\\u1D1F\\u1D20\\u1D21\\u1D22\\u1D23\\u1D24\\u1D25\\u1D26\\u1D27\\u1D28\\u1D29\\u1D2A\\u1D2B\\u1D62\\u1D63\\u1D64\\u1D65\\u1D66\\u1D67\\u1D68\\u1D69\\u1D6A\\u1D6B\\u1D6C\\u1D6D\\u1D6E\\u1D6F\\u1D70\\u1D71\\u1D72\\u1D73\\u1D74\\u1D75\\u1D76\\u1D77\\u1D79\\u1D7A\\u1D7B\\u1D7C\\u1D7D\\u1D7E\\u1D7F\\u1D80\\u1D81\\u1D82\\u1D83\\u1D84\\u1D85\\u1D86\\u1D87\\u1D88\\u1D89\\u1D8A\\u1D8B\\u1D8C\\u1D8D\\u1D8E\\u1D8F\\u1D90\\u1D91\\u1D92\\u1D93\\u1D94\\u1D95\\u1D96\\u1D97\\u1D98\\u1D99\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95\\u1E96\\u1E97\\u1E98\\u1E99\\u1E9A\\u1E9B\\u1E9C\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF\\u1F00\\u1F01\\u1F02\\u1F03\\u1F04\\u1F05\\u1F06\\u1F07\\u1F10\\u1F11\\u1F12\\u1F13\\u1F14\\u1F15\\u1F20\\u1F21\\u1F22\\u1F23\\u1F24\\u1F25\\u1F26\\u1F27\\u1F30\\u1F31\\u1F32\\u1F33\\u1F34\\u1F35\\u1F36\\u1F37\\u1F40\\u1F41\\u1F42\\u1F43\\u1F44\\u1F45\\u1F50\\u1F51\\u1F52\\u1F53\\u1F54\\u1F55\\u1F56\\u1F57\\u1F60\\u1F61\\u1F62\\u1F63\\u1F64\\u1F65\\u1F66\\u1F67\\u1F70\\u1F71\\u1F72\\u1F73\\u1F74\\u1F75\\u1F76\\u1F77\\u1F78\\u1F79\\u1F7A\\u1F7B\\u1F7C\\u1F7D\\u1F80\\u1F81\\u1F82\\u1F83\\u1F84\\u1F85\\u1F86\\u1F87\\u1F90\\u1F91\\u1F92\\u1F93\\u1F94\\u1F95\\u1F96\\u1F97\\u1FA0\\u1FA1\\u1FA2\\u1FA3\\u1FA4\\u1FA5\\u1FA6\\u1FA7\\u1FB0\\u1FB1\\u1FB2\\u1FB3\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2\\u1FC3\\u1FC4\\u1FC6\\u1FC7\\u1FD0\\u1FD1\\u1FD2\\u1FD3\\u1FD6\\u1FD7\\u1FE0\\u1FE1\\u1FE2\\u1FE3\\u1FE4\\u1FE5\\u1FE6\\u1FE7\\u1FF2\\u1FF3\\u1FF4\\u1FF6\\u1FF7\\u2071\\u207F\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146\\u2147\\u2148\\u2149\\u214E\\u2184\\u2C30\\u2C31\\u2C32\\u2C33\\u2C34\\u2C35\\u2C36\\u2C37\\u2C38\\u2C39\\u2C3A\\u2C3B\\u2C3C\\u2C3D\\u2C3E\\u2C3F\\u2C40\\u2C41\\u2C42\\u2C43\\u2C44\\u2C45\\u2C46\\u2C47\\u2C48\\u2C49\\u2C4A\\u2C4B\\u2C4C\\u2C4D\\u2C4E\\u2C4F\\u2C50\\u2C51\\u2C52\\u2C53\\u2C54\\u2C55\\u2C56\\u2C57\\u2C58\\u2C59\\u2C5A\\u2C5B\\u2C5C\\u2C5D\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76\\u2C77\\u2C78\\u2C79\\u2C7A\\u2C7B\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2D00\\u2D01\\u2D02\\u2D03\\u2D04\\u2D05\\u2D06\\u2D07\\u2D08\\u2D09\\u2D0A\\u2D0B\\u2D0C\\u2D0D\\u2D0E\\u2D0F\\u2D10\\u2D11\\u2D12\\u2D13\\u2D14\\u2D15\\u2D16\\u2D17\\u2D18\\u2D19\\u2D1A\\u2D1B\\u2D1C\\u2D1D\\u2D1E\\u2D1F\\u2D20\\u2D21\\u2D22\\u2D23\\u2D24\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F\\uA730\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771\\uA772\\uA773\\uA774\\uA775\\uA776\\uA777\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uFB00\\uFB01\\uFB02\\uFB03\\uFB04\\uFB05\\uFB06\\uFB13\\uFB14\\uFB15\\uFB16\\uFB17\\uFF41\\uFF42\\uFF43\\uFF44\\uFF45\\uFF46\\uFF47\\uFF48\\uFF49\\uFF4A\\uFF4B\\uFF4C\\uFF4D\\uFF4E\\uFF4F\\uFF50\\uFF51\\uFF52\\uFF53\\uFF54\\uFF55\\uFF56\\uFF57\\uFF58\\uFF59\\uFF5A]" },
        peg$c76 = /^[\u02B0\u02B1\u02B2\u02B3\u02B4\u02B5\u02B6\u02B7\u02B8\u02B9\u02BA\u02BB\u02BC\u02BD\u02BE\u02BF\u02C0\u02C1\u02C6\u02C7\u02C8\u02C9\u02CA\u02CB\u02CC\u02CD\u02CE\u02CF\u02D0\u02D1\u02E0\u02E1\u02E2\u02E3\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1C78\u1C79\u1C7A\u1C7B\u1C7C\u1C7D\u1D2C\u1D2D\u1D2E\u1D2F\u1D30\u1D31\u1D32\u1D33\u1D34\u1D35\u1D36\u1D37\u1D38\u1D39\u1D3A\u1D3B\u1D3C\u1D3D\u1D3E\u1D3F\u1D40\u1D41\u1D42\u1D43\u1D44\u1D45\u1D46\u1D47\u1D48\u1D49\u1D4A\u1D4B\u1D4C\u1D4D\u1D4E\u1D4F\u1D50\u1D51\u1D52\u1D53\u1D54\u1D55\u1D56\u1D57\u1D58\u1D59\u1D5A\u1D5B\u1D5C\u1D5D\u1D5E\u1D5F\u1D60\u1D61\u1D78\u1D9B\u1D9C\u1D9D\u1D9E\u1D9F\u1DA0\u1DA1\u1DA2\u1DA3\u1DA4\u1DA5\u1DA6\u1DA7\u1DA8\u1DA9\u1DAA\u1DAB\u1DAC\u1DAD\u1DAE\u1DAF\u1DB0\u1DB1\u1DB2\u1DB3\u1DB4\u1DB5\u1DB6\u1DB7\u1DB8\u1DB9\u1DBA\u1DBB\u1DBC\u1DBD\u1DBE\u1DBF\u2090\u2091\u2092\u2093\u2094\u2C7D\u2D6F\u2E2F\u3005\u3031\u3032\u3033\u3034\u3035\u303B\u309D\u309E\u30FC\u30FD\u30FE\uA015\uA60C\uA67F\uA717\uA718\uA719\uA71A\uA71B\uA71C\uA71D\uA71E\uA71F\uA770\uA788\uFF70\uFF9E\uFF9F]/,
        peg$c77 = { type: "class", value: "[\\u02B0\\u02B1\\u02B2\\u02B3\\u02B4\\u02B5\\u02B6\\u02B7\\u02B8\\u02B9\\u02BA\\u02BB\\u02BC\\u02BD\\u02BE\\u02BF\\u02C0\\u02C1\\u02C6\\u02C7\\u02C8\\u02C9\\u02CA\\u02CB\\u02CC\\u02CD\\u02CE\\u02CF\\u02D0\\u02D1\\u02E0\\u02E1\\u02E2\\u02E3\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1C78\\u1C79\\u1C7A\\u1C7B\\u1C7C\\u1C7D\\u1D2C\\u1D2D\\u1D2E\\u1D2F\\u1D30\\u1D31\\u1D32\\u1D33\\u1D34\\u1D35\\u1D36\\u1D37\\u1D38\\u1D39\\u1D3A\\u1D3B\\u1D3C\\u1D3D\\u1D3E\\u1D3F\\u1D40\\u1D41\\u1D42\\u1D43\\u1D44\\u1D45\\u1D46\\u1D47\\u1D48\\u1D49\\u1D4A\\u1D4B\\u1D4C\\u1D4D\\u1D4E\\u1D4F\\u1D50\\u1D51\\u1D52\\u1D53\\u1D54\\u1D55\\u1D56\\u1D57\\u1D58\\u1D59\\u1D5A\\u1D5B\\u1D5C\\u1D5D\\u1D5E\\u1D5F\\u1D60\\u1D61\\u1D78\\u1D9B\\u1D9C\\u1D9D\\u1D9E\\u1D9F\\u1DA0\\u1DA1\\u1DA2\\u1DA3\\u1DA4\\u1DA5\\u1DA6\\u1DA7\\u1DA8\\u1DA9\\u1DAA\\u1DAB\\u1DAC\\u1DAD\\u1DAE\\u1DAF\\u1DB0\\u1DB1\\u1DB2\\u1DB3\\u1DB4\\u1DB5\\u1DB6\\u1DB7\\u1DB8\\u1DB9\\u1DBA\\u1DBB\\u1DBC\\u1DBD\\u1DBE\\u1DBF\\u2090\\u2091\\u2092\\u2093\\u2094\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031\\u3032\\u3033\\u3034\\u3035\\u303B\\u309D\\u309E\\u30FC\\u30FD\\u30FE\\uA015\\uA60C\\uA67F\\uA717\\uA718\\uA719\\uA71A\\uA71B\\uA71C\\uA71D\\uA71E\\uA71F\\uA770\\uA788\\uFF70\\uFF9E\\uFF9F]", description: "[\\u02B0\\u02B1\\u02B2\\u02B3\\u02B4\\u02B5\\u02B6\\u02B7\\u02B8\\u02B9\\u02BA\\u02BB\\u02BC\\u02BD\\u02BE\\u02BF\\u02C0\\u02C1\\u02C6\\u02C7\\u02C8\\u02C9\\u02CA\\u02CB\\u02CC\\u02CD\\u02CE\\u02CF\\u02D0\\u02D1\\u02E0\\u02E1\\u02E2\\u02E3\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1C78\\u1C79\\u1C7A\\u1C7B\\u1C7C\\u1C7D\\u1D2C\\u1D2D\\u1D2E\\u1D2F\\u1D30\\u1D31\\u1D32\\u1D33\\u1D34\\u1D35\\u1D36\\u1D37\\u1D38\\u1D39\\u1D3A\\u1D3B\\u1D3C\\u1D3D\\u1D3E\\u1D3F\\u1D40\\u1D41\\u1D42\\u1D43\\u1D44\\u1D45\\u1D46\\u1D47\\u1D48\\u1D49\\u1D4A\\u1D4B\\u1D4C\\u1D4D\\u1D4E\\u1D4F\\u1D50\\u1D51\\u1D52\\u1D53\\u1D54\\u1D55\\u1D56\\u1D57\\u1D58\\u1D59\\u1D5A\\u1D5B\\u1D5C\\u1D5D\\u1D5E\\u1D5F\\u1D60\\u1D61\\u1D78\\u1D9B\\u1D9C\\u1D9D\\u1D9E\\u1D9F\\u1DA0\\u1DA1\\u1DA2\\u1DA3\\u1DA4\\u1DA5\\u1DA6\\u1DA7\\u1DA8\\u1DA9\\u1DAA\\u1DAB\\u1DAC\\u1DAD\\u1DAE\\u1DAF\\u1DB0\\u1DB1\\u1DB2\\u1DB3\\u1DB4\\u1DB5\\u1DB6\\u1DB7\\u1DB8\\u1DB9\\u1DBA\\u1DBB\\u1DBC\\u1DBD\\u1DBE\\u1DBF\\u2090\\u2091\\u2092\\u2093\\u2094\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031\\u3032\\u3033\\u3034\\u3035\\u303B\\u309D\\u309E\\u30FC\\u30FD\\u30FE\\uA015\\uA60C\\uA67F\\uA717\\uA718\\uA719\\uA71A\\uA71B\\uA71C\\uA71D\\uA71E\\uA71F\\uA770\\uA788\\uFF70\\uFF9E\\uFF9F]" },
        peg$c78 = /^[\u01BB\u01C0\u01C1\u01C2\u01C3\u0294\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\u05F0\u05F1\u05F2\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\u063B\u063C\u063D\u063E\u063F\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u066E\u066F\u0671\u0672\u0673\u0674\u0675\u0676\u0677\u0678\u0679\u067A\u067B\u067C\u067D\u067E\u067F\u0680\u0681\u0682\u0683\u0684\u0685\u0686\u0687\u0688\u0689\u068A\u068B\u068C\u068D\u068E\u068F\u0690\u0691\u0692\u0693\u0694\u0695\u0696\u0697\u0698\u0699\u069A\u069B\u069C\u069D\u069E\u069F\u06A0\u06A1\u06A2\u06A3\u06A4\u06A5\u06A6\u06A7\u06A8\u06A9\u06AA\u06AB\u06AC\u06AD\u06AE\u06AF\u06B0\u06B1\u06B2\u06B3\u06B4\u06B5\u06B6\u06B7\u06B8\u06B9\u06BA\u06BB\u06BC\u06BD\u06BE\u06BF\u06C0\u06C1\u06C2\u06C3\u06C4\u06C5\u06C6\u06C7\u06C8\u06C9\u06CA\u06CB\u06CC\u06CD\u06CE\u06CF\u06D0\u06D1\u06D2\u06D3\u06D5\u06EE\u06EF\u06FA\u06FB\u06FC\u06FF\u0710\u0712\u0713\u0714\u0715\u0716\u0717\u0718\u0719\u071A\u071B\u071C\u071D\u071E\u071F\u0720\u0721\u0722\u0723\u0724\u0725\u0726\u0727\u0728\u0729\u072A\u072B\u072C\u072D\u072E\u072F\u074D\u074E\u074F\u0750\u0751\u0752\u0753\u0754\u0755\u0756\u0757\u0758\u0759\u075A\u075B\u075C\u075D\u075E\u075F\u0760\u0761\u0762\u0763\u0764\u0765\u0766\u0767\u0768\u0769\u076A\u076B\u076C\u076D\u076E\u076F\u0770\u0771\u0772\u0773\u0774\u0775\u0776\u0777\u0778\u0779\u077A\u077B\u077C\u077D\u077E\u077F\u0780\u0781\u0782\u0783\u0784\u0785\u0786\u0787\u0788\u0789\u078A\u078B\u078C\u078D\u078E\u078F\u0790\u0791\u0792\u0793\u0794\u0795\u0796\u0797\u0798\u0799\u079A\u079B\u079C\u079D\u079E\u079F\u07A0\u07A1\u07A2\u07A3\u07A4\u07A5\u07B1\u07CA\u07CB\u07CC\u07CD\u07CE\u07CF\u07D0\u07D1\u07D2\u07D3\u07D4\u07D5\u07D6\u07D7\u07D8\u07D9\u07DA\u07DB\u07DC\u07DD\u07DE\u07DF\u07E0\u07E1\u07E2\u07E3\u07E4\u07E5\u07E6\u07E7\u07E8\u07E9\u07EA\u0904\u0905\u0906\u0907\u0908\u0909\u090A\u090B\u090C\u090D\u090E\u090F\u0910\u0911\u0912\u0913\u0914\u0915\u0916\u0917\u0918\u0919\u091A\u091B\u091C\u091D\u091E\u091F\u0920\u0921\u0922\u0923\u0924\u0925\u0926\u0927\u0928\u0929\u092A\u092B\u092C\u092D\u092E\u092F\u0930\u0931\u0932\u0933\u0934\u0935\u0936\u0937\u0938\u0939\u093D\u0950\u0958\u0959\u095A\u095B\u095C\u095D\u095E\u095F\u0960\u0961\u0972\u097B\u097C\u097D\u097E\u097F\u0985\u0986\u0987\u0988\u0989\u098A\u098B\u098C\u098F\u0990\u0993\u0994\u0995\u0996\u0997\u0998\u0999\u099A\u099B\u099C\u099D\u099E\u099F\u09A0\u09A1\u09A2\u09A3\u09A4\u09A5\u09A6\u09A7\u09A8\u09AA\u09AB\u09AC\u09AD\u09AE\u09AF\u09B0\u09B2\u09B6\u09B7\u09B8\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF\u09E0\u09E1\u09F0\u09F1\u0A05\u0A06\u0A07\u0A08\u0A09\u0A0A\u0A0F\u0A10\u0A13\u0A14\u0A15\u0A16\u0A17\u0A18\u0A19\u0A1A\u0A1B\u0A1C\u0A1D\u0A1E\u0A1F\u0A20\u0A21\u0A22\u0A23\u0A24\u0A25\u0A26\u0A27\u0A28\u0A2A\u0A2B\u0A2C\u0A2D\u0A2E\u0A2F\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59\u0A5A\u0A5B\u0A5C\u0A5E\u0A72\u0A73\u0A74\u0A85\u0A86\u0A87\u0A88\u0A89\u0A8A\u0A8B\u0A8C\u0A8D\u0A8F\u0A90\u0A91\u0A93\u0A94\u0A95\u0A96\u0A97\u0A98\u0A99\u0A9A\u0A9B\u0A9C\u0A9D\u0A9E\u0A9F\u0AA0\u0AA1\u0AA2\u0AA3\u0AA4\u0AA5\u0AA6\u0AA7\u0AA8\u0AAA\u0AAB\u0AAC\u0AAD\u0AAE\u0AAF\u0AB0\u0AB2\u0AB3\u0AB5\u0AB6\u0AB7\u0AB8\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05\u0B06\u0B07\u0B08\u0B09\u0B0A\u0B0B\u0B0C\u0B0F\u0B10\u0B13\u0B14\u0B15\u0B16\u0B17\u0B18\u0B19\u0B1A\u0B1B\u0B1C\u0B1D\u0B1E\u0B1F\u0B20\u0B21\u0B22\u0B23\u0B24\u0B25\u0B26\u0B27\u0B28\u0B2A\u0B2B\u0B2C\u0B2D\u0B2E\u0B2F\u0B30\u0B32\u0B33\u0B35\u0B36\u0B37\u0B38\u0B39\u0B3D\u0B5C\u0B5D\u0B5F\u0B60\u0B61\u0B71\u0B83\u0B85\u0B86\u0B87\u0B88\u0B89\u0B8A\u0B8E\u0B8F\u0B90\u0B92\u0B93\u0B94\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8\u0BA9\u0BAA\u0BAE\u0BAF\u0BB0\u0BB1\u0BB2\u0BB3\u0BB4\u0BB5\u0BB6\u0BB7\u0BB8\u0BB9\u0BD0\u0C05\u0C06\u0C07\u0C08\u0C09\u0C0A\u0C0B\u0C0C\u0C0E\u0C0F\u0C10\u0C12\u0C13\u0C14\u0C15\u0C16\u0C17\u0C18\u0C19\u0C1A\u0C1B\u0C1C\u0C1D\u0C1E\u0C1F\u0C20\u0C21\u0C22\u0C23\u0C24\u0C25\u0C26\u0C27\u0C28\u0C2A\u0C2B\u0C2C\u0C2D\u0C2E\u0C2F\u0C30\u0C31\u0C32\u0C33\u0C35\u0C36\u0C37\u0C38\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85\u0C86\u0C87\u0C88\u0C89\u0C8A\u0C8B\u0C8C\u0C8E\u0C8F\u0C90\u0C92\u0C93\u0C94\u0C95\u0C96\u0C97\u0C98\u0C99\u0C9A\u0C9B\u0C9C\u0C9D\u0C9E\u0C9F\u0CA0\u0CA1\u0CA2\u0CA3\u0CA4\u0CA5\u0CA6\u0CA7\u0CA8\u0CAA\u0CAB\u0CAC\u0CAD\u0CAE\u0CAF\u0CB0\u0CB1\u0CB2\u0CB3\u0CB5\u0CB6\u0CB7\u0CB8\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0D05\u0D06\u0D07\u0D08\u0D09\u0D0A\u0D0B\u0D0C\u0D0E\u0D0F\u0D10\u0D12\u0D13\u0D14\u0D15\u0D16\u0D17\u0D18\u0D19\u0D1A\u0D1B\u0D1C\u0D1D\u0D1E\u0D1F\u0D20\u0D21\u0D22\u0D23\u0D24\u0D25\u0D26\u0D27\u0D28\u0D2A\u0D2B\u0D2C\u0D2D\u0D2E\u0D2F\u0D30\u0D31\u0D32\u0D33\u0D34\u0D35\u0D36\u0D37\u0D38\u0D39\u0D3D\u0D60\u0D61\u0D7A\u0D7B\u0D7C\u0D7D\u0D7E\u0D7F\u0D85\u0D86\u0D87\u0D88\u0D89\u0D8A\u0D8B\u0D8C\u0D8D\u0D8E\u0D8F\u0D90\u0D91\u0D92\u0D93\u0D94\u0D95\u0D96\u0D9A\u0D9B\u0D9C\u0D9D\u0D9E\u0D9F\u0DA0\u0DA1\u0DA2\u0DA3\u0DA4\u0DA5\u0DA6\u0DA7\u0DA8\u0DA9\u0DAA\u0DAB\u0DAC\u0DAD\u0DAE\u0DAF\u0DB0\u0DB1\u0DB3\u0DB4\u0DB5\u0DB6\u0DB7\u0DB8\u0DB9\u0DBA\u0DBB\u0DBD\u0DC0\u0DC1\u0DC2\u0DC3\u0DC4\u0DC5\u0DC6\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E32\u0E33\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94\u0E95\u0E96\u0E97\u0E99\u0E9A\u0E9B\u0E9C\u0E9D\u0E9E\u0E9F\u0EA1\u0EA2\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD\u0EAE\u0EAF\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0\u0EC1\u0EC2\u0EC3\u0EC4\u0EDC\u0EDD\u0F00\u0F40\u0F41\u0F42\u0F43\u0F44\u0F45\u0F46\u0F47\u0F49\u0F4A\u0F4B\u0F4C\u0F4D\u0F4E\u0F4F\u0F50\u0F51\u0F52\u0F53\u0F54\u0F55\u0F56\u0F57\u0F58\u0F59\u0F5A\u0F5B\u0F5C\u0F5D\u0F5E\u0F5F\u0F60\u0F61\u0F62\u0F63\u0F64\u0F65\u0F66\u0F67\u0F68\u0F69\u0F6A\u0F6B\u0F6C\u0F88\u0F89\u0F8A\u0F8B\u1000\u1001\u1002\u1003\u1004\u1005\u1006\u1007\u1008\u1009\u100A\u100B\u100C\u100D\u100E\u100F\u1010\u1011\u1012\u1013\u1014\u1015\u1016\u1017\u1018\u1019\u101A\u101B\u101C\u101D\u101E\u101F\u1020\u1021\u1022\u1023\u1024\u1025\u1026\u1027\u1028\u1029\u102A\u103F\u1050\u1051\u1052\u1053\u1054\u1055\u105A\u105B\u105C\u105D\u1061\u1065\u1066\u106E\u106F\u1070\u1075\u1076\u1077\u1078\u1079\u107A\u107B\u107C\u107D\u107E\u107F\u1080\u1081\u108E\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10EF\u10F0\u10F1\u10F2\u10F3\u10F4\u10F5\u10F6\u10F7\u10F8\u10F9\u10FA\u1100\u1101\u1102\u1103\u1104\u1105\u1106\u1107\u1108\u1109\u110A\u110B\u110C\u110D\u110E\u110F\u1110\u1111\u1112\u1113\u1114\u1115\u1116\u1117\u1118\u1119\u111A\u111B\u111C\u111D\u111E\u111F\u1120\u1121\u1122\u1123\u1124\u1125\u1126\u1127\u1128\u1129\u112A\u112B\u112C\u112D\u112E\u112F\u1130\u1131\u1132\u1133\u1134\u1135\u1136\u1137\u1138\u1139\u113A\u113B\u113C\u113D\u113E\u113F\u1140\u1141\u1142\u1143\u1144\u1145\u1146\u1147\u1148\u1149\u114A\u114B\u114C\u114D\u114E\u114F\u1150\u1151\u1152\u1153\u1154\u1155\u1156\u1157\u1158\u1159\u115F\u1160\u1161\u1162\u1163\u1164\u1165\u1166\u1167\u1168\u1169\u116A\u116B\u116C\u116D\u116E\u116F\u1170\u1171\u1172\u1173\u1174\u1175\u1176\u1177\u1178\u1179\u117A\u117B\u117C\u117D\u117E\u117F\u1180\u1181\u1182\u1183\u1184\u1185\u1186\u1187\u1188\u1189\u118A\u118B\u118C\u118D\u118E\u118F\u1190\u1191\u1192\u1193\u1194\u1195\u1196\u1197\u1198\u1199\u119A\u119B\u119C\u119D\u119E\u119F\u11A0\u11A1\u11A2\u11A8\u11A9\u11AA\u11AB\u11AC\u11AD\u11AE\u11AF\u11B0\u11B1\u11B2\u11B3\u11B4\u11B5\u11B6\u11B7\u11B8\u11B9\u11BA\u11BB\u11BC\u11BD\u11BE\u11BF\u11C0\u11C1\u11C2\u11C3\u11C4\u11C5\u11C6\u11C7\u11C8\u11C9\u11CA\u11CB\u11CC\u11CD\u11CE\u11CF\u11D0\u11D1\u11D2\u11D3\u11D4\u11D5\u11D6\u11D7\u11D8\u11D9\u11DA\u11DB\u11DC\u11DD\u11DE\u11DF\u11E0\u11E1\u11E2\u11E3\u11E4\u11E5\u11E6\u11E7\u11E8\u11E9\u11EA\u11EB\u11EC\u11ED\u11EE\u11EF\u11F0\u11F1\u11F2\u11F3\u11F4\u11F5\u11F6\u11F7\u11F8\u11F9\u1200\u1201\u1202\u1203\u1204\u1205\u1206\u1207\u1208\u1209\u120A\u120B\u120C\u120D\u120E\u120F\u1210\u1211\u1212\u1213\u1214\u1215\u1216\u1217\u1218\u1219\u121A\u121B\u121C\u121D\u121E\u121F\u1220\u1221\u1222\u1223\u1224\u1225\u1226\u1227\u1228\u1229\u122A\u122B\u122C\u122D\u122E\u122F\u1230\u1231\u1232\u1233\u1234\u1235\u1236\u1237\u1238\u1239\u123A\u123B\u123C\u123D\u123E\u123F\u1240\u1241\u1242\u1243\u1244\u1245\u1246\u1247\u1248\u124A\u124B\u124C\u124D\u1250\u1251\u1252\u1253\u1254\u1255\u1256\u1258\u125A\u125B\u125C\u125D\u1260\u1261\u1262\u1263\u1264\u1265\u1266\u1267\u1268\u1269\u126A\u126B\u126C\u126D\u126E\u126F\u1270\u1271\u1272\u1273\u1274\u1275\u1276\u1277\u1278\u1279\u127A\u127B\u127C\u127D\u127E\u127F\u1280\u1281\u1282\u1283\u1284\u1285\u1286\u1287\u1288\u128A\u128B\u128C\u128D\u1290\u1291\u1292\u1293\u1294\u1295\u1296\u1297\u1298\u1299\u129A\u129B\u129C\u129D\u129E\u129F\u12A0\u12A1\u12A2\u12A3\u12A4\u12A5\u12A6\u12A7\u12A8\u12A9\u12AA\u12AB\u12AC\u12AD\u12AE\u12AF\u12B0\u12B2\u12B3\u12B4\u12B5\u12B8\u12B9\u12BA\u12BB\u12BC\u12BD\u12BE\u12C0\u12C2\u12C3\u12C4\u12C5\u12C8\u12C9\u12CA\u12CB\u12CC\u12CD\u12CE\u12CF\u12D0\u12D1\u12D2\u12D3\u12D4\u12D5\u12D6\u12D8\u12D9\u12DA\u12DB\u12DC\u12DD\u12DE\u12DF\u12E0\u12E1\u12E2\u12E3\u12E4\u12E5\u12E6\u12E7\u12E8\u12E9\u12EA\u12EB\u12EC\u12ED\u12EE\u12EF\u12F0\u12F1\u12F2\u12F3\u12F4\u12F5\u12F6\u12F7\u12F8\u12F9\u12FA\u12FB\u12FC\u12FD\u12FE\u12FF\u1300\u1301\u1302\u1303\u1304\u1305\u1306\u1307\u1308\u1309\u130A\u130B\u130C\u130D\u130E\u130F\u1310\u1312\u1313\u1314\u1315\u1318\u1319\u131A\u131B\u131C\u131D\u131E\u131F\u1320\u1321\u1322\u1323\u1324\u1325\u1326\u1327\u1328\u1329\u132A\u132B\u132C\u132D\u132E\u132F\u1330\u1331\u1332\u1333\u1334\u1335\u1336\u1337\u1338\u1339\u133A\u133B\u133C\u133D\u133E\u133F\u1340\u1341\u1342\u1343\u1344\u1345\u1346\u1347\u1348\u1349\u134A\u134B\u134C\u134D\u134E\u134F\u1350\u1351\u1352\u1353\u1354\u1355\u1356\u1357\u1358\u1359\u135A\u1380\u1381\u1382\u1383\u1384\u1385\u1386\u1387\u1388\u1389\u138A\u138B\u138C\u138D\u138E\u138F\u13A0\u13A1\u13A2\u13A3\u13A4\u13A5\u13A6\u13A7\u13A8\u13A9\u13AA\u13AB\u13AC\u13AD\u13AE\u13AF\u13B0\u13B1\u13B2\u13B3\u13B4\u13B5\u13B6\u13B7\u13B8\u13B9\u13BA\u13BB\u13BC\u13BD\u13BE\u13BF\u13C0\u13C1\u13C2\u13C3\u13C4\u13C5\u13C6\u13C7\u13C8\u13C9\u13CA\u13CB\u13CC\u13CD\u13CE\u13CF\u13D0\u13D1\u13D2\u13D3\u13D4\u13D5\u13D6\u13D7\u13D8\u13D9\u13DA\u13DB\u13DC\u13DD\u13DE\u13DF\u13E0\u13E1\u13E2\u13E3\u13E4\u13E5\u13E6\u13E7\u13E8\u13E9\u13EA\u13EB\u13EC\u13ED\u13EE\u13EF\u13F0\u13F1\u13F2\u13F3\u13F4\u1401\u1402\u1403\u1404\u1405\u1406\u1407\u1408\u1409\u140A\u140B\u140C\u140D\u140E\u140F\u1410\u1411\u1412\u1413\u1414\u1415\u1416\u1417\u1418\u1419\u141A\u141B\u141C\u141D\u141E\u141F\u1420\u1421\u1422\u1423\u1424\u1425\u1426\u1427\u1428\u1429\u142A\u142B\u142C\u142D\u142E\u142F\u1430\u1431\u1432\u1433\u1434\u1435\u1436\u1437\u1438\u1439\u143A\u143B\u143C\u143D\u143E\u143F\u1440\u1441\u1442\u1443\u1444\u1445\u1446\u1447\u1448\u1449\u144A\u144B\u144C\u144D\u144E\u144F\u1450\u1451\u1452\u1453\u1454\u1455\u1456\u1457\u1458\u1459\u145A\u145B\u145C\u145D\u145E\u145F\u1460\u1461\u1462\u1463\u1464\u1465\u1466\u1467\u1468\u1469\u146A\u146B\u146C\u146D\u146E\u146F\u1470\u1471\u1472\u1473\u1474\u1475\u1476\u1477\u1478\u1479\u147A\u147B\u147C\u147D\u147E\u147F\u1480\u1481\u1482\u1483\u1484\u1485\u1486\u1487\u1488\u1489\u148A\u148B\u148C\u148D\u148E\u148F\u1490\u1491\u1492\u1493\u1494\u1495\u1496\u1497\u1498\u1499\u149A\u149B\u149C\u149D\u149E\u149F\u14A0\u14A1\u14A2\u14A3\u14A4\u14A5\u14A6\u14A7\u14A8\u14A9\u14AA\u14AB\u14AC\u14AD\u14AE\u14AF\u14B0\u14B1\u14B2\u14B3\u14B4\u14B5\u14B6\u14B7\u14B8\u14B9\u14BA\u14BB\u14BC\u14BD\u14BE\u14BF\u14C0\u14C1\u14C2\u14C3\u14C4\u14C5\u14C6\u14C7\u14C8\u14C9\u14CA\u14CB\u14CC\u14CD\u14CE\u14CF\u14D0\u14D1\u14D2\u14D3\u14D4\u14D5\u14D6\u14D7\u14D8\u14D9\u14DA\u14DB\u14DC\u14DD\u14DE\u14DF\u14E0\u14E1\u14E2\u14E3\u14E4\u14E5\u14E6\u14E7\u14E8\u14E9\u14EA\u14EB\u14EC\u14ED\u14EE\u14EF\u14F0\u14F1\u14F2\u14F3\u14F4\u14F5\u14F6\u14F7\u14F8\u14F9\u14FA\u14FB\u14FC\u14FD\u14FE\u14FF\u1500\u1501\u1502\u1503\u1504\u1505\u1506\u1507\u1508\u1509\u150A\u150B\u150C\u150D\u150E\u150F\u1510\u1511\u1512\u1513\u1514\u1515\u1516\u1517\u1518\u1519\u151A\u151B\u151C\u151D\u151E\u151F\u1520\u1521\u1522\u1523\u1524\u1525\u1526\u1527\u1528\u1529\u152A\u152B\u152C\u152D\u152E\u152F\u1530\u1531\u1532\u1533\u1534\u1535\u1536\u1537\u1538\u1539\u153A\u153B\u153C\u153D\u153E\u153F\u1540\u1541\u1542\u1543\u1544\u1545\u1546\u1547\u1548\u1549\u154A\u154B\u154C\u154D\u154E\u154F\u1550\u1551\u1552\u1553\u1554\u1555\u1556\u1557\u1558\u1559\u155A\u155B\u155C\u155D\u155E\u155F\u1560\u1561\u1562\u1563\u1564\u1565\u1566\u1567\u1568\u1569\u156A\u156B\u156C\u156D\u156E\u156F\u1570\u1571\u1572\u1573\u1574\u1575\u1576\u1577\u1578\u1579\u157A\u157B\u157C\u157D\u157E\u157F\u1580\u1581\u1582\u1583\u1584\u1585\u1586\u1587\u1588\u1589\u158A\u158B\u158C\u158D\u158E\u158F\u1590\u1591\u1592\u1593\u1594\u1595\u1596\u1597\u1598\u1599\u159A\u159B\u159C\u159D\u159E\u159F\u15A0\u15A1\u15A2\u15A3\u15A4\u15A5\u15A6\u15A7\u15A8\u15A9\u15AA\u15AB\u15AC\u15AD\u15AE\u15AF\u15B0\u15B1\u15B2\u15B3\u15B4\u15B5\u15B6\u15B7\u15B8\u15B9\u15BA\u15BB\u15BC\u15BD\u15BE\u15BF\u15C0\u15C1\u15C2\u15C3\u15C4\u15C5\u15C6\u15C7\u15C8\u15C9\u15CA\u15CB\u15CC\u15CD\u15CE\u15CF\u15D0\u15D1\u15D2\u15D3\u15D4\u15D5\u15D6\u15D7\u15D8\u15D9\u15DA\u15DB\u15DC\u15DD\u15DE\u15DF\u15E0\u15E1\u15E2\u15E3\u15E4\u15E5\u15E6\u15E7\u15E8\u15E9\u15EA\u15EB\u15EC\u15ED\u15EE\u15EF\u15F0\u15F1\u15F2\u15F3\u15F4\u15F5\u15F6\u15F7\u15F8\u15F9\u15FA\u15FB\u15FC\u15FD\u15FE\u15FF\u1600\u1601\u1602\u1603\u1604\u1605\u1606\u1607\u1608\u1609\u160A\u160B\u160C\u160D\u160E\u160F\u1610\u1611\u1612\u1613\u1614\u1615\u1616\u1617\u1618\u1619\u161A\u161B\u161C\u161D\u161E\u161F\u1620\u1621\u1622\u1623\u1624\u1625\u1626\u1627\u1628\u1629\u162A\u162B\u162C\u162D\u162E\u162F\u1630\u1631\u1632\u1633\u1634\u1635\u1636\u1637\u1638\u1639\u163A\u163B\u163C\u163D\u163E\u163F\u1640\u1641\u1642\u1643\u1644\u1645\u1646\u1647\u1648\u1649\u164A\u164B\u164C\u164D\u164E\u164F\u1650\u1651\u1652\u1653\u1654\u1655\u1656\u1657\u1658\u1659\u165A\u165B\u165C\u165D\u165E\u165F\u1660\u1661\u1662\u1663\u1664\u1665\u1666\u1667\u1668\u1669\u166A\u166B\u166C\u166F\u1670\u1671\u1672\u1673\u1674\u1675\u1676\u1681\u1682\u1683\u1684\u1685\u1686\u1687\u1688\u1689\u168A\u168B\u168C\u168D\u168E\u168F\u1690\u1691\u1692\u1693\u1694\u1695\u1696\u1697\u1698\u1699\u169A\u16A0\u16A1\u16A2\u16A3\u16A4\u16A5\u16A6\u16A7\u16A8\u16A9\u16AA\u16AB\u16AC\u16AD\u16AE\u16AF\u16B0\u16B1\u16B2\u16B3\u16B4\u16B5\u16B6\u16B7\u16B8\u16B9\u16BA\u16BB\u16BC\u16BD\u16BE\u16BF\u16C0\u16C1\u16C2\u16C3\u16C4\u16C5\u16C6\u16C7\u16C8\u16C9\u16CA\u16CB\u16CC\u16CD\u16CE\u16CF\u16D0\u16D1\u16D2\u16D3\u16D4\u16D5\u16D6\u16D7\u16D8\u16D9\u16DA\u16DB\u16DC\u16DD\u16DE\u16DF\u16E0\u16E1\u16E2\u16E3\u16E4\u16E5\u16E6\u16E7\u16E8\u16E9\u16EA\u1700\u1701\u1702\u1703\u1704\u1705\u1706\u1707\u1708\u1709\u170A\u170B\u170C\u170E\u170F\u1710\u1711\u1720\u1721\u1722\u1723\u1724\u1725\u1726\u1727\u1728\u1729\u172A\u172B\u172C\u172D\u172E\u172F\u1730\u1731\u1740\u1741\u1742\u1743\u1744\u1745\u1746\u1747\u1748\u1749\u174A\u174B\u174C\u174D\u174E\u174F\u1750\u1751\u1760\u1761\u1762\u1763\u1764\u1765\u1766\u1767\u1768\u1769\u176A\u176B\u176C\u176E\u176F\u1770\u1780\u1781\u1782\u1783\u1784\u1785\u1786\u1787\u1788\u1789\u178A\u178B\u178C\u178D\u178E\u178F\u1790\u1791\u1792\u1793\u1794\u1795\u1796\u1797\u1798\u1799\u179A\u179B\u179C\u179D\u179E\u179F\u17A0\u17A1\u17A2\u17A3\u17A4\u17A5\u17A6\u17A7\u17A8\u17A9\u17AA\u17AB\u17AC\u17AD\u17AE\u17AF\u17B0\u17B1\u17B2\u17B3\u17DC\u1820\u1821\u1822\u1823\u1824\u1825\u1826\u1827\u1828\u1829\u182A\u182B\u182C\u182D\u182E\u182F\u1830\u1831\u1832\u1833\u1834\u1835\u1836\u1837\u1838\u1839\u183A\u183B\u183C\u183D\u183E\u183F\u1840\u1841\u1842\u1844\u1845\u1846\u1847\u1848\u1849\u184A\u184B\u184C\u184D\u184E\u184F\u1850\u1851\u1852\u1853\u1854\u1855\u1856\u1857\u1858\u1859\u185A\u185B\u185C\u185D\u185E\u185F\u1860\u1861\u1862\u1863\u1864\u1865\u1866\u1867\u1868\u1869\u186A\u186B\u186C\u186D\u186E\u186F\u1870\u1871\u1872\u1873\u1874\u1875\u1876\u1877\u1880\u1881\u1882\u1883\u1884\u1885\u1886\u1887\u1888\u1889\u188A\u188B\u188C\u188D\u188E\u188F\u1890\u1891\u1892\u1893\u1894\u1895\u1896\u1897\u1898\u1899\u189A\u189B\u189C\u189D\u189E\u189F\u18A0\u18A1\u18A2\u18A3\u18A4\u18A5\u18A6\u18A7\u18A8\u18AA\u1900\u1901\u1902\u1903\u1904\u1905\u1906\u1907\u1908\u1909\u190A\u190B\u190C\u190D\u190E\u190F\u1910\u1911\u1912\u1913\u1914\u1915\u1916\u1917\u1918\u1919\u191A\u191B\u191C\u1950\u1951\u1952\u1953\u1954\u1955\u1956\u1957\u1958\u1959\u195A\u195B\u195C\u195D\u195E\u195F\u1960\u1961\u1962\u1963\u1964\u1965\u1966\u1967\u1968\u1969\u196A\u196B\u196C\u196D\u1970\u1971\u1972\u1973\u1974\u1980\u1981\u1982\u1983\u1984\u1985\u1986\u1987\u1988\u1989\u198A\u198B\u198C\u198D\u198E\u198F\u1990\u1991\u1992\u1993\u1994\u1995\u1996\u1997\u1998\u1999\u199A\u199B\u199C\u199D\u199E\u199F\u19A0\u19A1\u19A2\u19A3\u19A4\u19A5\u19A6\u19A7\u19A8\u19A9\u19C1\u19C2\u19C3\u19C4\u19C5\u19C6\u19C7\u1A00\u1A01\u1A02\u1A03\u1A04\u1A05\u1A06\u1A07\u1A08\u1A09\u1A0A\u1A0B\u1A0C\u1A0D\u1A0E\u1A0F\u1A10\u1A11\u1A12\u1A13\u1A14\u1A15\u1A16\u1B05\u1B06\u1B07\u1B08\u1B09\u1B0A\u1B0B\u1B0C\u1B0D\u1B0E\u1B0F\u1B10\u1B11\u1B12\u1B13\u1B14\u1B15\u1B16\u1B17\u1B18\u1B19\u1B1A\u1B1B\u1B1C\u1B1D\u1B1E\u1B1F\u1B20\u1B21\u1B22\u1B23\u1B24\u1B25\u1B26\u1B27\u1B28\u1B29\u1B2A\u1B2B\u1B2C\u1B2D\u1B2E\u1B2F\u1B30\u1B31\u1B32\u1B33\u1B45\u1B46\u1B47\u1B48\u1B49\u1B4A\u1B4B\u1B83\u1B84\u1B85\u1B86\u1B87\u1B88\u1B89\u1B8A\u1B8B\u1B8C\u1B8D\u1B8E\u1B8F\u1B90\u1B91\u1B92\u1B93\u1B94\u1B95\u1B96\u1B97\u1B98\u1B99\u1B9A\u1B9B\u1B9C\u1B9D\u1B9E\u1B9F\u1BA0\u1BAE\u1BAF\u1C00\u1C01\u1C02\u1C03\u1C04\u1C05\u1C06\u1C07\u1C08\u1C09\u1C0A\u1C0B\u1C0C\u1C0D\u1C0E\u1C0F\u1C10\u1C11\u1C12\u1C13\u1C14\u1C15\u1C16\u1C17\u1C18\u1C19\u1C1A\u1C1B\u1C1C\u1C1D\u1C1E\u1C1F\u1C20\u1C21\u1C22\u1C23\u1C4D\u1C4E\u1C4F\u1C5A\u1C5B\u1C5C\u1C5D\u1C5E\u1C5F\u1C60\u1C61\u1C62\u1C63\u1C64\u1C65\u1C66\u1C67\u1C68\u1C69\u1C6A\u1C6B\u1C6C\u1C6D\u1C6E\u1C6F\u1C70\u1C71\u1C72\u1C73\u1C74\u1C75\u1C76\u1C77\u2135\u2136\u2137\u2138\u2D30\u2D31\u2D32\u2D33\u2D34\u2D35\u2D36\u2D37\u2D38\u2D39\u2D3A\u2D3B\u2D3C\u2D3D\u2D3E\u2D3F\u2D40\u2D41\u2D42\u2D43\u2D44\u2D45\u2D46\u2D47\u2D48\u2D49\u2D4A\u2D4B\u2D4C\u2D4D\u2D4E\u2D4F\u2D50\u2D51\u2D52\u2D53\u2D54\u2D55\u2D56\u2D57\u2D58\u2D59\u2D5A\u2D5B\u2D5C\u2D5D\u2D5E\u2D5F\u2D60\u2D61\u2D62\u2D63\u2D64\u2D65\u2D80\u2D81\u2D82\u2D83\u2D84\u2D85\u2D86\u2D87\u2D88\u2D89\u2D8A\u2D8B\u2D8C\u2D8D\u2D8E\u2D8F\u2D90\u2D91\u2D92\u2D93\u2D94\u2D95\u2D96\u2DA0\u2DA1\u2DA2\u2DA3\u2DA4\u2DA5\u2DA6\u2DA8\u2DA9\u2DAA\u2DAB\u2DAC\u2DAD\u2DAE\u2DB0\u2DB1\u2DB2\u2DB3\u2DB4\u2DB5\u2DB6\u2DB8\u2DB9\u2DBA\u2DBB\u2DBC\u2DBD\u2DBE\u2DC0\u2DC1\u2DC2\u2DC3\u2DC4\u2DC5\u2DC6\u2DC8\u2DC9\u2DCA\u2DCB\u2DCC\u2DCD\u2DCE\u2DD0\u2DD1\u2DD2\u2DD3\u2DD4\u2DD5\u2DD6\u2DD8\u2DD9\u2DDA\u2DDB\u2DDC\u2DDD\u2DDE\u3006\u303C\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\u3094\u3095\u3096\u309F\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\u30F7\u30F8\u30F9\u30FA\u30FF\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\u312A\u312B\u312C\u312D\u3131\u3132\u3133\u3134\u3135\u3136\u3137\u3138\u3139\u313A\u313B\u313C\u313D\u313E\u313F\u3140\u3141\u3142\u3143\u3144\u3145\u3146\u3147\u3148\u3149\u314A\u314B\u314C\u314D\u314E\u314F\u3150\u3151\u3152\u3153\u3154\u3155\u3156\u3157\u3158\u3159\u315A\u315B\u315C\u315D\u315E\u315F\u3160\u3161\u3162\u3163\u3164\u3165\u3166\u3167\u3168\u3169\u316A\u316B\u316C\u316D\u316E\u316F\u3170\u3171\u3172\u3173\u3174\u3175\u3176\u3177\u3178\u3179\u317A\u317B\u317C\u317D\u317E\u317F\u3180\u3181\u3182\u3183\u3184\u3185\u3186\u3187\u3188\u3189\u318A\u318B\u318C\u318D\u318E\u31A0\u31A1\u31A2\u31A3\u31A4\u31A5\u31A6\u31A7\u31A8\u31A9\u31AA\u31AB\u31AC\u31AD\u31AE\u31AF\u31B0\u31B1\u31B2\u31B3\u31B4\u31B5\u31B6\u31B7\u31F0\u31F1\u31F2\u31F3\u31F4\u31F5\u31F6\u31F7\u31F8\u31F9\u31FA\u31FB\u31FC\u31FD\u31FE\u31FF\u3400\u4DB5\u4E00\u9FC3\uA000\uA001\uA002\uA003\uA004\uA005\uA006\uA007\uA008\uA009\uA00A\uA00B\uA00C\uA00D\uA00E\uA00F\uA010\uA011\uA012\uA013\uA014\uA016\uA017\uA018\uA019\uA01A\uA01B\uA01C\uA01D\uA01E\uA01F\uA020\uA021\uA022\uA023\uA024\uA025\uA026\uA027\uA028\uA029\uA02A\uA02B\uA02C\uA02D\uA02E\uA02F\uA030\uA031\uA032\uA033\uA034\uA035\uA036\uA037\uA038\uA039\uA03A\uA03B\uA03C\uA03D\uA03E\uA03F\uA040\uA041\uA042\uA043\uA044\uA045\uA046\uA047\uA048\uA049\uA04A\uA04B\uA04C\uA04D\uA04E\uA04F\uA050\uA051\uA052\uA053\uA054\uA055\uA056\uA057\uA058\uA059\uA05A\uA05B\uA05C\uA05D\uA05E\uA05F\uA060\uA061\uA062\uA063\uA064\uA065\uA066\uA067\uA068\uA069\uA06A\uA06B\uA06C\uA06D\uA06E\uA06F\uA070\uA071\uA072\uA073\uA074\uA075\uA076\uA077\uA078\uA079\uA07A\uA07B\uA07C\uA07D\uA07E\uA07F\uA080\uA081\uA082\uA083\uA084\uA085\uA086\uA087\uA088\uA089\uA08A\uA08B\uA08C\uA08D\uA08E\uA08F\uA090\uA091\uA092\uA093\uA094\uA095\uA096\uA097\uA098\uA099\uA09A\uA09B\uA09C\uA09D\uA09E\uA09F\uA0A0\uA0A1\uA0A2\uA0A3\uA0A4\uA0A5\uA0A6\uA0A7\uA0A8\uA0A9\uA0AA\uA0AB\uA0AC\uA0AD\uA0AE\uA0AF\uA0B0\uA0B1\uA0B2\uA0B3\uA0B4\uA0B5\uA0B6\uA0B7\uA0B8\uA0B9\uA0BA\uA0BB\uA0BC\uA0BD\uA0BE\uA0BF\uA0C0\uA0C1\uA0C2\uA0C3\uA0C4\uA0C5\uA0C6\uA0C7\uA0C8\uA0C9\uA0CA\uA0CB\uA0CC\uA0CD\uA0CE\uA0CF\uA0D0\uA0D1\uA0D2\uA0D3\uA0D4\uA0D5\uA0D6\uA0D7\uA0D8\uA0D9\uA0DA\uA0DB\uA0DC\uA0DD\uA0DE\uA0DF\uA0E0\uA0E1\uA0E2\uA0E3\uA0E4\uA0E5\uA0E6\uA0E7\uA0E8\uA0E9\uA0EA\uA0EB\uA0EC\uA0ED\uA0EE\uA0EF\uA0F0\uA0F1\uA0F2\uA0F3\uA0F4\uA0F5\uA0F6\uA0F7\uA0F8\uA0F9\uA0FA\uA0FB\uA0FC\uA0FD\uA0FE\uA0FF\uA100\uA101\uA102\uA103\uA104\uA105\uA106\uA107\uA108\uA109\uA10A\uA10B\uA10C\uA10D\uA10E\uA10F\uA110\uA111\uA112\uA113\uA114\uA115\uA116\uA117\uA118\uA119\uA11A\uA11B\uA11C\uA11D\uA11E\uA11F\uA120\uA121\uA122\uA123\uA124\uA125\uA126\uA127\uA128\uA129\uA12A\uA12B\uA12C\uA12D\uA12E\uA12F\uA130\uA131\uA132\uA133\uA134\uA135\uA136\uA137\uA138\uA139\uA13A\uA13B\uA13C\uA13D\uA13E\uA13F\uA140\uA141\uA142\uA143\uA144\uA145\uA146\uA147\uA148\uA149\uA14A\uA14B\uA14C\uA14D\uA14E\uA14F\uA150\uA151\uA152\uA153\uA154\uA155\uA156\uA157\uA158\uA159\uA15A\uA15B\uA15C\uA15D\uA15E\uA15F\uA160\uA161\uA162\uA163\uA164\uA165\uA166\uA167\uA168\uA169\uA16A\uA16B\uA16C\uA16D\uA16E\uA16F\uA170\uA171\uA172\uA173\uA174\uA175\uA176\uA177\uA178\uA179\uA17A\uA17B\uA17C\uA17D\uA17E\uA17F\uA180\uA181\uA182\uA183\uA184\uA185\uA186\uA187\uA188\uA189\uA18A\uA18B\uA18C\uA18D\uA18E\uA18F\uA190\uA191\uA192\uA193\uA194\uA195\uA196\uA197\uA198\uA199\uA19A\uA19B\uA19C\uA19D\uA19E\uA19F\uA1A0\uA1A1\uA1A2\uA1A3\uA1A4\uA1A5\uA1A6\uA1A7\uA1A8\uA1A9\uA1AA\uA1AB\uA1AC\uA1AD\uA1AE\uA1AF\uA1B0\uA1B1\uA1B2\uA1B3\uA1B4\uA1B5\uA1B6\uA1B7\uA1B8\uA1B9\uA1BA\uA1BB\uA1BC\uA1BD\uA1BE\uA1BF\uA1C0\uA1C1\uA1C2\uA1C3\uA1C4\uA1C5\uA1C6\uA1C7\uA1C8\uA1C9\uA1CA\uA1CB\uA1CC\uA1CD\uA1CE\uA1CF\uA1D0\uA1D1\uA1D2\uA1D3\uA1D4\uA1D5\uA1D6\uA1D7\uA1D8\uA1D9\uA1DA\uA1DB\uA1DC\uA1DD\uA1DE\uA1DF\uA1E0\uA1E1\uA1E2\uA1E3\uA1E4\uA1E5\uA1E6\uA1E7\uA1E8\uA1E9\uA1EA\uA1EB\uA1EC\uA1ED\uA1EE\uA1EF\uA1F0\uA1F1\uA1F2\uA1F3\uA1F4\uA1F5\uA1F6\uA1F7\uA1F8\uA1F9\uA1FA\uA1FB\uA1FC\uA1FD\uA1FE\uA1FF\uA200\uA201\uA202\uA203\uA204\uA205\uA206\uA207\uA208\uA209\uA20A\uA20B\uA20C\uA20D\uA20E\uA20F\uA210\uA211\uA212\uA213\uA214\uA215\uA216\uA217\uA218\uA219\uA21A\uA21B\uA21C\uA21D\uA21E\uA21F\uA220\uA221\uA222\uA223\uA224\uA225\uA226\uA227\uA228\uA229\uA22A\uA22B\uA22C\uA22D\uA22E\uA22F\uA230\uA231\uA232\uA233\uA234\uA235\uA236\uA237\uA238\uA239\uA23A\uA23B\uA23C\uA23D\uA23E\uA23F\uA240\uA241\uA242\uA243\uA244\uA245\uA246\uA247\uA248\uA249\uA24A\uA24B\uA24C\uA24D\uA24E\uA24F\uA250\uA251\uA252\uA253\uA254\uA255\uA256\uA257\uA258\uA259\uA25A\uA25B\uA25C\uA25D\uA25E\uA25F\uA260\uA261\uA262\uA263\uA264\uA265\uA266\uA267\uA268\uA269\uA26A\uA26B\uA26C\uA26D\uA26E\uA26F\uA270\uA271\uA272\uA273\uA274\uA275\uA276\uA277\uA278\uA279\uA27A\uA27B\uA27C\uA27D\uA27E\uA27F\uA280\uA281\uA282\uA283\uA284\uA285\uA286\uA287\uA288\uA289\uA28A\uA28B\uA28C\uA28D\uA28E\uA28F\uA290\uA291\uA292\uA293\uA294\uA295\uA296\uA297\uA298\uA299\uA29A\uA29B\uA29C\uA29D\uA29E\uA29F\uA2A0\uA2A1\uA2A2\uA2A3\uA2A4\uA2A5\uA2A6\uA2A7\uA2A8\uA2A9\uA2AA\uA2AB\uA2AC\uA2AD\uA2AE\uA2AF\uA2B0\uA2B1\uA2B2\uA2B3\uA2B4\uA2B5\uA2B6\uA2B7\uA2B8\uA2B9\uA2BA\uA2BB\uA2BC\uA2BD\uA2BE\uA2BF\uA2C0\uA2C1\uA2C2\uA2C3\uA2C4\uA2C5\uA2C6\uA2C7\uA2C8\uA2C9\uA2CA\uA2CB\uA2CC\uA2CD\uA2CE\uA2CF\uA2D0\uA2D1\uA2D2\uA2D3\uA2D4\uA2D5\uA2D6\uA2D7\uA2D8\uA2D9\uA2DA\uA2DB\uA2DC\uA2DD\uA2DE\uA2DF\uA2E0\uA2E1\uA2E2\uA2E3\uA2E4\uA2E5\uA2E6\uA2E7\uA2E8\uA2E9\uA2EA\uA2EB\uA2EC\uA2ED\uA2EE\uA2EF\uA2F0\uA2F1\uA2F2\uA2F3\uA2F4\uA2F5\uA2F6\uA2F7\uA2F8\uA2F9\uA2FA\uA2FB\uA2FC\uA2FD\uA2FE\uA2FF\uA300\uA301\uA302\uA303\uA304\uA305\uA306\uA307\uA308\uA309\uA30A\uA30B\uA30C\uA30D\uA30E\uA30F\uA310\uA311\uA312\uA313\uA314\uA315\uA316\uA317\uA318\uA319\uA31A\uA31B\uA31C\uA31D\uA31E\uA31F\uA320\uA321\uA322\uA323\uA324\uA325\uA326\uA327\uA328\uA329\uA32A\uA32B\uA32C\uA32D\uA32E\uA32F\uA330\uA331\uA332\uA333\uA334\uA335\uA336\uA337\uA338\uA339\uA33A\uA33B\uA33C\uA33D\uA33E\uA33F\uA340\uA341\uA342\uA343\uA344\uA345\uA346\uA347\uA348\uA349\uA34A\uA34B\uA34C\uA34D\uA34E\uA34F\uA350\uA351\uA352\uA353\uA354\uA355\uA356\uA357\uA358\uA359\uA35A\uA35B\uA35C\uA35D\uA35E\uA35F\uA360\uA361\uA362\uA363\uA364\uA365\uA366\uA367\uA368\uA369\uA36A\uA36B\uA36C\uA36D\uA36E\uA36F\uA370\uA371\uA372\uA373\uA374\uA375\uA376\uA377\uA378\uA379\uA37A\uA37B\uA37C\uA37D\uA37E\uA37F\uA380\uA381\uA382\uA383\uA384\uA385\uA386\uA387\uA388\uA389\uA38A\uA38B\uA38C\uA38D\uA38E\uA38F\uA390\uA391\uA392\uA393\uA394\uA395\uA396\uA397\uA398\uA399\uA39A\uA39B\uA39C\uA39D\uA39E\uA39F\uA3A0\uA3A1\uA3A2\uA3A3\uA3A4\uA3A5\uA3A6\uA3A7\uA3A8\uA3A9\uA3AA\uA3AB\uA3AC\uA3AD\uA3AE\uA3AF\uA3B0\uA3B1\uA3B2\uA3B3\uA3B4\uA3B5\uA3B6\uA3B7\uA3B8\uA3B9\uA3BA\uA3BB\uA3BC\uA3BD\uA3BE\uA3BF\uA3C0\uA3C1\uA3C2\uA3C3\uA3C4\uA3C5\uA3C6\uA3C7\uA3C8\uA3C9\uA3CA\uA3CB\uA3CC\uA3CD\uA3CE\uA3CF\uA3D0\uA3D1\uA3D2\uA3D3\uA3D4\uA3D5\uA3D6\uA3D7\uA3D8\uA3D9\uA3DA\uA3DB\uA3DC\uA3DD\uA3DE\uA3DF\uA3E0\uA3E1\uA3E2\uA3E3\uA3E4\uA3E5\uA3E6\uA3E7\uA3E8\uA3E9\uA3EA\uA3EB\uA3EC\uA3ED\uA3EE\uA3EF\uA3F0\uA3F1\uA3F2\uA3F3\uA3F4\uA3F5\uA3F6\uA3F7\uA3F8\uA3F9\uA3FA\uA3FB\uA3FC\uA3FD\uA3FE\uA3FF\uA400\uA401\uA402\uA403\uA404\uA405\uA406\uA407\uA408\uA409\uA40A\uA40B\uA40C\uA40D\uA40E\uA40F\uA410\uA411\uA412\uA413\uA414\uA415\uA416\uA417\uA418\uA419\uA41A\uA41B\uA41C\uA41D\uA41E\uA41F\uA420\uA421\uA422\uA423\uA424\uA425\uA426\uA427\uA428\uA429\uA42A\uA42B\uA42C\uA42D\uA42E\uA42F\uA430\uA431\uA432\uA433\uA434\uA435\uA436\uA437\uA438\uA439\uA43A\uA43B\uA43C\uA43D\uA43E\uA43F\uA440\uA441\uA442\uA443\uA444\uA445\uA446\uA447\uA448\uA449\uA44A\uA44B\uA44C\uA44D\uA44E\uA44F\uA450\uA451\uA452\uA453\uA454\uA455\uA456\uA457\uA458\uA459\uA45A\uA45B\uA45C\uA45D\uA45E\uA45F\uA460\uA461\uA462\uA463\uA464\uA465\uA466\uA467\uA468\uA469\uA46A\uA46B\uA46C\uA46D\uA46E\uA46F\uA470\uA471\uA472\uA473\uA474\uA475\uA476\uA477\uA478\uA479\uA47A\uA47B\uA47C\uA47D\uA47E\uA47F\uA480\uA481\uA482\uA483\uA484\uA485\uA486\uA487\uA488\uA489\uA48A\uA48B\uA48C\uA500\uA501\uA502\uA503\uA504\uA505\uA506\uA507\uA508\uA509\uA50A\uA50B\uA50C\uA50D\uA50E\uA50F\uA510\uA511\uA512\uA513\uA514\uA515\uA516\uA517\uA518\uA519\uA51A\uA51B\uA51C\uA51D\uA51E\uA51F\uA520\uA521\uA522\uA523\uA524\uA525\uA526\uA527\uA528\uA529\uA52A\uA52B\uA52C\uA52D\uA52E\uA52F\uA530\uA531\uA532\uA533\uA534\uA535\uA536\uA537\uA538\uA539\uA53A\uA53B\uA53C\uA53D\uA53E\uA53F\uA540\uA541\uA542\uA543\uA544\uA545\uA546\uA547\uA548\uA549\uA54A\uA54B\uA54C\uA54D\uA54E\uA54F\uA550\uA551\uA552\uA553\uA554\uA555\uA556\uA557\uA558\uA559\uA55A\uA55B\uA55C\uA55D\uA55E\uA55F\uA560\uA561\uA562\uA563\uA564\uA565\uA566\uA567\uA568\uA569\uA56A\uA56B\uA56C\uA56D\uA56E\uA56F\uA570\uA571\uA572\uA573\uA574\uA575\uA576\uA577\uA578\uA579\uA57A\uA57B\uA57C\uA57D\uA57E\uA57F\uA580\uA581\uA582\uA583\uA584\uA585\uA586\uA587\uA588\uA589\uA58A\uA58B\uA58C\uA58D\uA58E\uA58F\uA590\uA591\uA592\uA593\uA594\uA595\uA596\uA597\uA598\uA599\uA59A\uA59B\uA59C\uA59D\uA59E\uA59F\uA5A0\uA5A1\uA5A2\uA5A3\uA5A4\uA5A5\uA5A6\uA5A7\uA5A8\uA5A9\uA5AA\uA5AB\uA5AC\uA5AD\uA5AE\uA5AF\uA5B0\uA5B1\uA5B2\uA5B3\uA5B4\uA5B5\uA5B6\uA5B7\uA5B8\uA5B9\uA5BA\uA5BB\uA5BC\uA5BD\uA5BE\uA5BF\uA5C0\uA5C1\uA5C2\uA5C3\uA5C4\uA5C5\uA5C6\uA5C7\uA5C8\uA5C9\uA5CA\uA5CB\uA5CC\uA5CD\uA5CE\uA5CF\uA5D0\uA5D1\uA5D2\uA5D3\uA5D4\uA5D5\uA5D6\uA5D7\uA5D8\uA5D9\uA5DA\uA5DB\uA5DC\uA5DD\uA5DE\uA5DF\uA5E0\uA5E1\uA5E2\uA5E3\uA5E4\uA5E5\uA5E6\uA5E7\uA5E8\uA5E9\uA5EA\uA5EB\uA5EC\uA5ED\uA5EE\uA5EF\uA5F0\uA5F1\uA5F2\uA5F3\uA5F4\uA5F5\uA5F6\uA5F7\uA5F8\uA5F9\uA5FA\uA5FB\uA5FC\uA5FD\uA5FE\uA5FF\uA600\uA601\uA602\uA603\uA604\uA605\uA606\uA607\uA608\uA609\uA60A\uA60B\uA610\uA611\uA612\uA613\uA614\uA615\uA616\uA617\uA618\uA619\uA61A\uA61B\uA61C\uA61D\uA61E\uA61F\uA62A\uA62B\uA66E\uA7FB\uA7FC\uA7FD\uA7FE\uA7FF\uA800\uA801\uA803\uA804\uA805\uA807\uA808\uA809\uA80A\uA80C\uA80D\uA80E\uA80F\uA810\uA811\uA812\uA813\uA814\uA815\uA816\uA817\uA818\uA819\uA81A\uA81B\uA81C\uA81D\uA81E\uA81F\uA820\uA821\uA822\uA840\uA841\uA842\uA843\uA844\uA845\uA846\uA847\uA848\uA849\uA84A\uA84B\uA84C\uA84D\uA84E\uA84F\uA850\uA851\uA852\uA853\uA854\uA855\uA856\uA857\uA858\uA859\uA85A\uA85B\uA85C\uA85D\uA85E\uA85F\uA860\uA861\uA862\uA863\uA864\uA865\uA866\uA867\uA868\uA869\uA86A\uA86B\uA86C\uA86D\uA86E\uA86F\uA870\uA871\uA872\uA873\uA882\uA883\uA884\uA885\uA886\uA887\uA888\uA889\uA88A\uA88B\uA88C\uA88D\uA88E\uA88F\uA890\uA891\uA892\uA893\uA894\uA895\uA896\uA897\uA898\uA899\uA89A\uA89B\uA89C\uA89D\uA89E\uA89F\uA8A0\uA8A1\uA8A2\uA8A3\uA8A4\uA8A5\uA8A6\uA8A7\uA8A8\uA8A9\uA8AA\uA8AB\uA8AC\uA8AD\uA8AE\uA8AF\uA8B0\uA8B1\uA8B2\uA8B3\uA90A\uA90B\uA90C\uA90D\uA90E\uA90F\uA910\uA911\uA912\uA913\uA914\uA915\uA916\uA917\uA918\uA919\uA91A\uA91B\uA91C\uA91D\uA91E\uA91F\uA920\uA921\uA922\uA923\uA924\uA925\uA930\uA931\uA932\uA933\uA934\uA935\uA936\uA937\uA938\uA939\uA93A\uA93B\uA93C\uA93D\uA93E\uA93F\uA940\uA941\uA942\uA943\uA944\uA945\uA946\uAA00\uAA01\uAA02\uAA03\uAA04\uAA05\uAA06\uAA07\uAA08\uAA09\uAA0A\uAA0B\uAA0C\uAA0D\uAA0E\uAA0F\uAA10\uAA11\uAA12\uAA13\uAA14\uAA15\uAA16\uAA17\uAA18\uAA19\uAA1A\uAA1B\uAA1C\uAA1D\uAA1E\uAA1F\uAA20\uAA21\uAA22\uAA23\uAA24\uAA25\uAA26\uAA27\uAA28\uAA40\uAA41\uAA42\uAA44\uAA45\uAA46\uAA47\uAA48\uAA49\uAA4A\uAA4B\uAC00\uD7A3\uF900\uF901\uF902\uF903\uF904\uF905\uF906\uF907\uF908\uF909\uF90A\uF90B\uF90C\uF90D\uF90E\uF90F\uF910\uF911\uF912\uF913\uF914\uF915\uF916\uF917\uF918\uF919\uF91A\uF91B\uF91C\uF91D\uF91E\uF91F\uF920\uF921\uF922\uF923\uF924\uF925\uF926\uF927\uF928\uF929\uF92A\uF92B\uF92C\uF92D\uF92E\uF92F\uF930\uF931\uF932\uF933\uF934\uF935\uF936\uF937\uF938\uF939\uF93A\uF93B\uF93C\uF93D\uF93E\uF93F\uF940\uF941\uF942\uF943\uF944\uF945\uF946\uF947\uF948\uF949\uF94A\uF94B\uF94C\uF94D\uF94E\uF94F\uF950\uF951\uF952\uF953\uF954\uF955\uF956\uF957\uF958\uF959\uF95A\uF95B\uF95C\uF95D\uF95E\uF95F\uF960\uF961\uF962\uF963\uF964\uF965\uF966\uF967\uF968\uF969\uF96A\uF96B\uF96C\uF96D\uF96E\uF96F\uF970\uF971\uF972\uF973\uF974\uF975\uF976\uF977\uF978\uF979\uF97A\uF97B\uF97C\uF97D\uF97E\uF97F\uF980\uF981\uF982\uF983\uF984\uF985\uF986\uF987\uF988\uF989\uF98A\uF98B\uF98C\uF98D\uF98E\uF98F\uF990\uF991\uF992\uF993\uF994\uF995\uF996\uF997\uF998\uF999\uF99A\uF99B\uF99C\uF99D\uF99E\uF99F\uF9A0\uF9A1\uF9A2\uF9A3\uF9A4\uF9A5\uF9A6\uF9A7\uF9A8\uF9A9\uF9AA\uF9AB\uF9AC\uF9AD\uF9AE\uF9AF\uF9B0\uF9B1\uF9B2\uF9B3\uF9B4\uF9B5\uF9B6\uF9B7\uF9B8\uF9B9\uF9BA\uF9BB\uF9BC\uF9BD\uF9BE\uF9BF\uF9C0\uF9C1\uF9C2\uF9C3\uF9C4\uF9C5\uF9C6\uF9C7\uF9C8\uF9C9\uF9CA\uF9CB\uF9CC\uF9CD\uF9CE\uF9CF\uF9D0\uF9D1\uF9D2\uF9D3\uF9D4\uF9D5\uF9D6\uF9D7\uF9D8\uF9D9\uF9DA\uF9DB\uF9DC\uF9DD\uF9DE\uF9DF\uF9E0\uF9E1\uF9E2\uF9E3\uF9E4\uF9E5\uF9E6\uF9E7\uF9E8\uF9E9\uF9EA\uF9EB\uF9EC\uF9ED\uF9EE\uF9EF\uF9F0\uF9F1\uF9F2\uF9F3\uF9F4\uF9F5\uF9F6\uF9F7\uF9F8\uF9F9\uF9FA\uF9FB\uF9FC\uF9FD\uF9FE\uF9FF\uFA00\uFA01\uFA02\uFA03\uFA04\uFA05\uFA06\uFA07\uFA08\uFA09\uFA0A\uFA0B\uFA0C\uFA0D\uFA0E\uFA0F\uFA10\uFA11\uFA12\uFA13\uFA14\uFA15\uFA16\uFA17\uFA18\uFA19\uFA1A\uFA1B\uFA1C\uFA1D\uFA1E\uFA1F\uFA20\uFA21\uFA22\uFA23\uFA24\uFA25\uFA26\uFA27\uFA28\uFA29\uFA2A\uFA2B\uFA2C\uFA2D\uFA30\uFA31\uFA32\uFA33\uFA34\uFA35\uFA36\uFA37\uFA38\uFA39\uFA3A\uFA3B\uFA3C\uFA3D\uFA3E\uFA3F\uFA40\uFA41\uFA42\uFA43\uFA44\uFA45\uFA46\uFA47\uFA48\uFA49\uFA4A\uFA4B\uFA4C\uFA4D\uFA4E\uFA4F\uFA50\uFA51\uFA52\uFA53\uFA54\uFA55\uFA56\uFA57\uFA58\uFA59\uFA5A\uFA5B\uFA5C\uFA5D\uFA5E\uFA5F\uFA60\uFA61\uFA62\uFA63\uFA64\uFA65\uFA66\uFA67\uFA68\uFA69\uFA6A\uFA70\uFA71\uFA72\uFA73\uFA74\uFA75\uFA76\uFA77\uFA78\uFA79\uFA7A\uFA7B\uFA7C\uFA7D\uFA7E\uFA7F\uFA80\uFA81\uFA82\uFA83\uFA84\uFA85\uFA86\uFA87\uFA88\uFA89\uFA8A\uFA8B\uFA8C\uFA8D\uFA8E\uFA8F\uFA90\uFA91\uFA92\uFA93\uFA94\uFA95\uFA96\uFA97\uFA98\uFA99\uFA9A\uFA9B\uFA9C\uFA9D\uFA9E\uFA9F\uFAA0\uFAA1\uFAA2\uFAA3\uFAA4\uFAA5\uFAA6\uFAA7\uFAA8\uFAA9\uFAAA\uFAAB\uFAAC\uFAAD\uFAAE\uFAAF\uFAB0\uFAB1\uFAB2\uFAB3\uFAB4\uFAB5\uFAB6\uFAB7\uFAB8\uFAB9\uFABA\uFABB\uFABC\uFABD\uFABE\uFABF\uFAC0\uFAC1\uFAC2\uFAC3\uFAC4\uFAC5\uFAC6\uFAC7\uFAC8\uFAC9\uFACA\uFACB\uFACC\uFACD\uFACE\uFACF\uFAD0\uFAD1\uFAD2\uFAD3\uFAD4\uFAD5\uFAD6\uFAD7\uFAD8\uFAD9\uFB1D\uFB1F\uFB20\uFB21\uFB22\uFB23\uFB24\uFB25\uFB26\uFB27\uFB28\uFB2A\uFB2B\uFB2C\uFB2D\uFB2E\uFB2F\uFB30\uFB31\uFB32\uFB33\uFB34\uFB35\uFB36\uFB38\uFB39\uFB3A\uFB3B\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46\uFB47\uFB48\uFB49\uFB4A\uFB4B\uFB4C\uFB4D\uFB4E\uFB4F\uFB50\uFB51\uFB52\uFB53\uFB54\uFB55\uFB56\uFB57\uFB58\uFB59\uFB5A\uFB5B\uFB5C\uFB5D\uFB5E\uFB5F\uFB60\uFB61\uFB62\uFB63\uFB64\uFB65\uFB66\uFB67\uFB68\uFB69\uFB6A\uFB6B\uFB6C\uFB6D\uFB6E\uFB6F\uFB70\uFB71\uFB72\uFB73\uFB74\uFB75\uFB76\uFB77\uFB78\uFB79\uFB7A\uFB7B\uFB7C\uFB7D\uFB7E\uFB7F\uFB80\uFB81\uFB82\uFB83\uFB84\uFB85\uFB86\uFB87\uFB88\uFB89\uFB8A\uFB8B\uFB8C\uFB8D\uFB8E\uFB8F\uFB90\uFB91\uFB92\uFB93\uFB94\uFB95\uFB96\uFB97\uFB98\uFB99\uFB9A\uFB9B\uFB9C\uFB9D\uFB9E\uFB9F\uFBA0\uFBA1\uFBA2\uFBA3\uFBA4\uFBA5\uFBA6\uFBA7\uFBA8\uFBA9\uFBAA\uFBAB\uFBAC\uFBAD\uFBAE\uFBAF\uFBB0\uFBB1\uFBD3\uFBD4\uFBD5\uFBD6\uFBD7\uFBD8\uFBD9\uFBDA\uFBDB\uFBDC\uFBDD\uFBDE\uFBDF\uFBE0\uFBE1\uFBE2\uFBE3\uFBE4\uFBE5\uFBE6\uFBE7\uFBE8\uFBE9\uFBEA\uFBEB\uFBEC\uFBED\uFBEE\uFBEF\uFBF0\uFBF1\uFBF2\uFBF3\uFBF4\uFBF5\uFBF6\uFBF7\uFBF8\uFBF9\uFBFA\uFBFB\uFBFC\uFBFD\uFBFE\uFBFF\uFC00\uFC01\uFC02\uFC03\uFC04\uFC05\uFC06\uFC07\uFC08\uFC09\uFC0A\uFC0B\uFC0C\uFC0D\uFC0E\uFC0F\uFC10\uFC11\uFC12\uFC13\uFC14\uFC15\uFC16\uFC17\uFC18\uFC19\uFC1A\uFC1B\uFC1C\uFC1D\uFC1E\uFC1F\uFC20\uFC21\uFC22\uFC23\uFC24\uFC25\uFC26\uFC27\uFC28\uFC29\uFC2A\uFC2B\uFC2C\uFC2D\uFC2E\uFC2F\uFC30\uFC31\uFC32\uFC33\uFC34\uFC35\uFC36\uFC37\uFC38\uFC39\uFC3A\uFC3B\uFC3C\uFC3D\uFC3E\uFC3F\uFC40\uFC41\uFC42\uFC43\uFC44\uFC45\uFC46\uFC47\uFC48\uFC49\uFC4A\uFC4B\uFC4C\uFC4D\uFC4E\uFC4F\uFC50\uFC51\uFC52\uFC53\uFC54\uFC55\uFC56\uFC57\uFC58\uFC59\uFC5A\uFC5B\uFC5C\uFC5D\uFC5E\uFC5F\uFC60\uFC61\uFC62\uFC63\uFC64\uFC65\uFC66\uFC67\uFC68\uFC69\uFC6A\uFC6B\uFC6C\uFC6D\uFC6E\uFC6F\uFC70\uFC71\uFC72\uFC73\uFC74\uFC75\uFC76\uFC77\uFC78\uFC79\uFC7A\uFC7B\uFC7C\uFC7D\uFC7E\uFC7F\uFC80\uFC81\uFC82\uFC83\uFC84\uFC85\uFC86\uFC87\uFC88\uFC89\uFC8A\uFC8B\uFC8C\uFC8D\uFC8E\uFC8F\uFC90\uFC91\uFC92\uFC93\uFC94\uFC95\uFC96\uFC97\uFC98\uFC99\uFC9A\uFC9B\uFC9C\uFC9D\uFC9E\uFC9F\uFCA0\uFCA1\uFCA2\uFCA3\uFCA4\uFCA5\uFCA6\uFCA7\uFCA8\uFCA9\uFCAA\uFCAB\uFCAC\uFCAD\uFCAE\uFCAF\uFCB0\uFCB1\uFCB2\uFCB3\uFCB4\uFCB5\uFCB6\uFCB7\uFCB8\uFCB9\uFCBA\uFCBB\uFCBC\uFCBD\uFCBE\uFCBF\uFCC0\uFCC1\uFCC2\uFCC3\uFCC4\uFCC5\uFCC6\uFCC7\uFCC8\uFCC9\uFCCA\uFCCB\uFCCC\uFCCD\uFCCE\uFCCF\uFCD0\uFCD1\uFCD2\uFCD3\uFCD4\uFCD5\uFCD6\uFCD7\uFCD8\uFCD9\uFCDA\uFCDB\uFCDC\uFCDD\uFCDE\uFCDF\uFCE0\uFCE1\uFCE2\uFCE3\uFCE4\uFCE5\uFCE6\uFCE7\uFCE8\uFCE9\uFCEA\uFCEB\uFCEC\uFCED\uFCEE\uFCEF\uFCF0\uFCF1\uFCF2\uFCF3\uFCF4\uFCF5\uFCF6\uFCF7\uFCF8\uFCF9\uFCFA\uFCFB\uFCFC\uFCFD\uFCFE\uFCFF\uFD00\uFD01\uFD02\uFD03\uFD04\uFD05\uFD06\uFD07\uFD08\uFD09\uFD0A\uFD0B\uFD0C\uFD0D\uFD0E\uFD0F\uFD10\uFD11\uFD12\uFD13\uFD14\uFD15\uFD16\uFD17\uFD18\uFD19\uFD1A\uFD1B\uFD1C\uFD1D\uFD1E\uFD1F\uFD20\uFD21\uFD22\uFD23\uFD24\uFD25\uFD26\uFD27\uFD28\uFD29\uFD2A\uFD2B\uFD2C\uFD2D\uFD2E\uFD2F\uFD30\uFD31\uFD32\uFD33\uFD34\uFD35\uFD36\uFD37\uFD38\uFD39\uFD3A\uFD3B\uFD3C\uFD3D\uFD50\uFD51\uFD52\uFD53\uFD54\uFD55\uFD56\uFD57\uFD58\uFD59\uFD5A\uFD5B\uFD5C\uFD5D\uFD5E\uFD5F\uFD60\uFD61\uFD62\uFD63\uFD64\uFD65\uFD66\uFD67\uFD68\uFD69\uFD6A\uFD6B\uFD6C\uFD6D\uFD6E\uFD6F\uFD70\uFD71\uFD72\uFD73\uFD74\uFD75\uFD76\uFD77\uFD78\uFD79\uFD7A\uFD7B\uFD7C\uFD7D\uFD7E\uFD7F\uFD80\uFD81\uFD82\uFD83\uFD84\uFD85\uFD86\uFD87\uFD88\uFD89\uFD8A\uFD8B\uFD8C\uFD8D\uFD8E\uFD8F\uFD92\uFD93\uFD94\uFD95\uFD96\uFD97\uFD98\uFD99\uFD9A\uFD9B\uFD9C\uFD9D\uFD9E\uFD9F\uFDA0\uFDA1\uFDA2\uFDA3\uFDA4\uFDA5\uFDA6\uFDA7\uFDA8\uFDA9\uFDAA\uFDAB\uFDAC\uFDAD\uFDAE\uFDAF\uFDB0\uFDB1\uFDB2\uFDB3\uFDB4\uFDB5\uFDB6\uFDB7\uFDB8\uFDB9\uFDBA\uFDBB\uFDBC\uFDBD\uFDBE\uFDBF\uFDC0\uFDC1\uFDC2\uFDC3\uFDC4\uFDC5\uFDC6\uFDC7\uFDF0\uFDF1\uFDF2\uFDF3\uFDF4\uFDF5\uFDF6\uFDF7\uFDF8\uFDF9\uFDFA\uFDFB\uFE70\uFE71\uFE72\uFE73\uFE74\uFE76\uFE77\uFE78\uFE79\uFE7A\uFE7B\uFE7C\uFE7D\uFE7E\uFE7F\uFE80\uFE81\uFE82\uFE83\uFE84\uFE85\uFE86\uFE87\uFE88\uFE89\uFE8A\uFE8B\uFE8C\uFE8D\uFE8E\uFE8F\uFE90\uFE91\uFE92\uFE93\uFE94\uFE95\uFE96\uFE97\uFE98\uFE99\uFE9A\uFE9B\uFE9C\uFE9D\uFE9E\uFE9F\uFEA0\uFEA1\uFEA2\uFEA3\uFEA4\uFEA5\uFEA6\uFEA7\uFEA8\uFEA9\uFEAA\uFEAB\uFEAC\uFEAD\uFEAE\uFEAF\uFEB0\uFEB1\uFEB2\uFEB3\uFEB4\uFEB5\uFEB6\uFEB7\uFEB8\uFEB9\uFEBA\uFEBB\uFEBC\uFEBD\uFEBE\uFEBF\uFEC0\uFEC1\uFEC2\uFEC3\uFEC4\uFEC5\uFEC6\uFEC7\uFEC8\uFEC9\uFECA\uFECB\uFECC\uFECD\uFECE\uFECF\uFED0\uFED1\uFED2\uFED3\uFED4\uFED5\uFED6\uFED7\uFED8\uFED9\uFEDA\uFEDB\uFEDC\uFEDD\uFEDE\uFEDF\uFEE0\uFEE1\uFEE2\uFEE3\uFEE4\uFEE5\uFEE6\uFEE7\uFEE8\uFEE9\uFEEA\uFEEB\uFEEC\uFEED\uFEEE\uFEEF\uFEF0\uFEF1\uFEF2\uFEF3\uFEF4\uFEF5\uFEF6\uFEF7\uFEF8\uFEF9\uFEFA\uFEFB\uFEFC\uFF66\uFF67\uFF68\uFF69\uFF6A\uFF6B\uFF6C\uFF6D\uFF6E\uFF6F\uFF71\uFF72\uFF73\uFF74\uFF75\uFF76\uFF77\uFF78\uFF79\uFF7A\uFF7B\uFF7C\uFF7D\uFF7E\uFF7F\uFF80\uFF81\uFF82\uFF83\uFF84\uFF85\uFF86\uFF87\uFF88\uFF89\uFF8A\uFF8B\uFF8C\uFF8D\uFF8E\uFF8F\uFF90\uFF91\uFF92\uFF93\uFF94\uFF95\uFF96\uFF97\uFF98\uFF99\uFF9A\uFF9B\uFF9C\uFF9D\uFFA0\uFFA1\uFFA2\uFFA3\uFFA4\uFFA5\uFFA6\uFFA7\uFFA8\uFFA9\uFFAA\uFFAB\uFFAC\uFFAD\uFFAE\uFFAF\uFFB0\uFFB1\uFFB2\uFFB3\uFFB4\uFFB5\uFFB6\uFFB7\uFFB8\uFFB9\uFFBA\uFFBB\uFFBC\uFFBD\uFFBE\uFFC2\uFFC3\uFFC4\uFFC5\uFFC6\uFFC7\uFFCA\uFFCB\uFFCC\uFFCD\uFFCE\uFFCF\uFFD2\uFFD3\uFFD4\uFFD5\uFFD6\uFFD7\uFFDA\uFFDB\uFFDC]/,
        peg$c79 = { type: "class", value: "[\\u01BB\\u01C0\\u01C1\\u01C2\\u01C3\\u0294\\u05D0\\u05D1\\u05D2\\u05D3\\u05D4\\u05D5\\u05D6\\u05D7\\u05D8\\u05D9\\u05DA\\u05DB\\u05DC\\u05DD\\u05DE\\u05DF\\u05E0\\u05E1\\u05E2\\u05E3\\u05E4\\u05E5\\u05E6\\u05E7\\u05E8\\u05E9\\u05EA\\u05F0\\u05F1\\u05F2\\u0621\\u0622\\u0623\\u0624\\u0625\\u0626\\u0627\\u0628\\u0629\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u0630\\u0631\\u0632\\u0633\\u0634\\u0635\\u0636\\u0637\\u0638\\u0639\\u063A\\u063B\\u063C\\u063D\\u063E\\u063F\\u0641\\u0642\\u0643\\u0644\\u0645\\u0646\\u0647\\u0648\\u0649\\u064A\\u066E\\u066F\\u0671\\u0672\\u0673\\u0674\\u0675\\u0676\\u0677\\u0678\\u0679\\u067A\\u067B\\u067C\\u067D\\u067E\\u067F\\u0680\\u0681\\u0682\\u0683\\u0684\\u0685\\u0686\\u0687\\u0688\\u0689\\u068A\\u068B\\u068C\\u068D\\u068E\\u068F\\u0690\\u0691\\u0692\\u0693\\u0694\\u0695\\u0696\\u0697\\u0698\\u0699\\u069A\\u069B\\u069C\\u069D\\u069E\\u069F\\u06A0\\u06A1\\u06A2\\u06A3\\u06A4\\u06A5\\u06A6\\u06A7\\u06A8\\u06A9\\u06AA\\u06AB\\u06AC\\u06AD\\u06AE\\u06AF\\u06B0\\u06B1\\u06B2\\u06B3\\u06B4\\u06B5\\u06B6\\u06B7\\u06B8\\u06B9\\u06BA\\u06BB\\u06BC\\u06BD\\u06BE\\u06BF\\u06C0\\u06C1\\u06C2\\u06C3\\u06C4\\u06C5\\u06C6\\u06C7\\u06C8\\u06C9\\u06CA\\u06CB\\u06CC\\u06CD\\u06CE\\u06CF\\u06D0\\u06D1\\u06D2\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA\\u06FB\\u06FC\\u06FF\\u0710\\u0712\\u0713\\u0714\\u0715\\u0716\\u0717\\u0718\\u0719\\u071A\\u071B\\u071C\\u071D\\u071E\\u071F\\u0720\\u0721\\u0722\\u0723\\u0724\\u0725\\u0726\\u0727\\u0728\\u0729\\u072A\\u072B\\u072C\\u072D\\u072E\\u072F\\u074D\\u074E\\u074F\\u0750\\u0751\\u0752\\u0753\\u0754\\u0755\\u0756\\u0757\\u0758\\u0759\\u075A\\u075B\\u075C\\u075D\\u075E\\u075F\\u0760\\u0761\\u0762\\u0763\\u0764\\u0765\\u0766\\u0767\\u0768\\u0769\\u076A\\u076B\\u076C\\u076D\\u076E\\u076F\\u0770\\u0771\\u0772\\u0773\\u0774\\u0775\\u0776\\u0777\\u0778\\u0779\\u077A\\u077B\\u077C\\u077D\\u077E\\u077F\\u0780\\u0781\\u0782\\u0783\\u0784\\u0785\\u0786\\u0787\\u0788\\u0789\\u078A\\u078B\\u078C\\u078D\\u078E\\u078F\\u0790\\u0791\\u0792\\u0793\\u0794\\u0795\\u0796\\u0797\\u0798\\u0799\\u079A\\u079B\\u079C\\u079D\\u079E\\u079F\\u07A0\\u07A1\\u07A2\\u07A3\\u07A4\\u07A5\\u07B1\\u07CA\\u07CB\\u07CC\\u07CD\\u07CE\\u07CF\\u07D0\\u07D1\\u07D2\\u07D3\\u07D4\\u07D5\\u07D6\\u07D7\\u07D8\\u07D9\\u07DA\\u07DB\\u07DC\\u07DD\\u07DE\\u07DF\\u07E0\\u07E1\\u07E2\\u07E3\\u07E4\\u07E5\\u07E6\\u07E7\\u07E8\\u07E9\\u07EA\\u0904\\u0905\\u0906\\u0907\\u0908\\u0909\\u090A\\u090B\\u090C\\u090D\\u090E\\u090F\\u0910\\u0911\\u0912\\u0913\\u0914\\u0915\\u0916\\u0917\\u0918\\u0919\\u091A\\u091B\\u091C\\u091D\\u091E\\u091F\\u0920\\u0921\\u0922\\u0923\\u0924\\u0925\\u0926\\u0927\\u0928\\u0929\\u092A\\u092B\\u092C\\u092D\\u092E\\u092F\\u0930\\u0931\\u0932\\u0933\\u0934\\u0935\\u0936\\u0937\\u0938\\u0939\\u093D\\u0950\\u0958\\u0959\\u095A\\u095B\\u095C\\u095D\\u095E\\u095F\\u0960\\u0961\\u0972\\u097B\\u097C\\u097D\\u097E\\u097F\\u0985\\u0986\\u0987\\u0988\\u0989\\u098A\\u098B\\u098C\\u098F\\u0990\\u0993\\u0994\\u0995\\u0996\\u0997\\u0998\\u0999\\u099A\\u099B\\u099C\\u099D\\u099E\\u099F\\u09A0\\u09A1\\u09A2\\u09A3\\u09A4\\u09A5\\u09A6\\u09A7\\u09A8\\u09AA\\u09AB\\u09AC\\u09AD\\u09AE\\u09AF\\u09B0\\u09B2\\u09B6\\u09B7\\u09B8\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF\\u09E0\\u09E1\\u09F0\\u09F1\\u0A05\\u0A06\\u0A07\\u0A08\\u0A09\\u0A0A\\u0A0F\\u0A10\\u0A13\\u0A14\\u0A15\\u0A16\\u0A17\\u0A18\\u0A19\\u0A1A\\u0A1B\\u0A1C\\u0A1D\\u0A1E\\u0A1F\\u0A20\\u0A21\\u0A22\\u0A23\\u0A24\\u0A25\\u0A26\\u0A27\\u0A28\\u0A2A\\u0A2B\\u0A2C\\u0A2D\\u0A2E\\u0A2F\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59\\u0A5A\\u0A5B\\u0A5C\\u0A5E\\u0A72\\u0A73\\u0A74\\u0A85\\u0A86\\u0A87\\u0A88\\u0A89\\u0A8A\\u0A8B\\u0A8C\\u0A8D\\u0A8F\\u0A90\\u0A91\\u0A93\\u0A94\\u0A95\\u0A96\\u0A97\\u0A98\\u0A99\\u0A9A\\u0A9B\\u0A9C\\u0A9D\\u0A9E\\u0A9F\\u0AA0\\u0AA1\\u0AA2\\u0AA3\\u0AA4\\u0AA5\\u0AA6\\u0AA7\\u0AA8\\u0AAA\\u0AAB\\u0AAC\\u0AAD\\u0AAE\\u0AAF\\u0AB0\\u0AB2\\u0AB3\\u0AB5\\u0AB6\\u0AB7\\u0AB8\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05\\u0B06\\u0B07\\u0B08\\u0B09\\u0B0A\\u0B0B\\u0B0C\\u0B0F\\u0B10\\u0B13\\u0B14\\u0B15\\u0B16\\u0B17\\u0B18\\u0B19\\u0B1A\\u0B1B\\u0B1C\\u0B1D\\u0B1E\\u0B1F\\u0B20\\u0B21\\u0B22\\u0B23\\u0B24\\u0B25\\u0B26\\u0B27\\u0B28\\u0B2A\\u0B2B\\u0B2C\\u0B2D\\u0B2E\\u0B2F\\u0B30\\u0B32\\u0B33\\u0B35\\u0B36\\u0B37\\u0B38\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F\\u0B60\\u0B61\\u0B71\\u0B83\\u0B85\\u0B86\\u0B87\\u0B88\\u0B89\\u0B8A\\u0B8E\\u0B8F\\u0B90\\u0B92\\u0B93\\u0B94\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8\\u0BA9\\u0BAA\\u0BAE\\u0BAF\\u0BB0\\u0BB1\\u0BB2\\u0BB3\\u0BB4\\u0BB5\\u0BB6\\u0BB7\\u0BB8\\u0BB9\\u0BD0\\u0C05\\u0C06\\u0C07\\u0C08\\u0C09\\u0C0A\\u0C0B\\u0C0C\\u0C0E\\u0C0F\\u0C10\\u0C12\\u0C13\\u0C14\\u0C15\\u0C16\\u0C17\\u0C18\\u0C19\\u0C1A\\u0C1B\\u0C1C\\u0C1D\\u0C1E\\u0C1F\\u0C20\\u0C21\\u0C22\\u0C23\\u0C24\\u0C25\\u0C26\\u0C27\\u0C28\\u0C2A\\u0C2B\\u0C2C\\u0C2D\\u0C2E\\u0C2F\\u0C30\\u0C31\\u0C32\\u0C33\\u0C35\\u0C36\\u0C37\\u0C38\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85\\u0C86\\u0C87\\u0C88\\u0C89\\u0C8A\\u0C8B\\u0C8C\\u0C8E\\u0C8F\\u0C90\\u0C92\\u0C93\\u0C94\\u0C95\\u0C96\\u0C97\\u0C98\\u0C99\\u0C9A\\u0C9B\\u0C9C\\u0C9D\\u0C9E\\u0C9F\\u0CA0\\u0CA1\\u0CA2\\u0CA3\\u0CA4\\u0CA5\\u0CA6\\u0CA7\\u0CA8\\u0CAA\\u0CAB\\u0CAC\\u0CAD\\u0CAE\\u0CAF\\u0CB0\\u0CB1\\u0CB2\\u0CB3\\u0CB5\\u0CB6\\u0CB7\\u0CB8\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0D05\\u0D06\\u0D07\\u0D08\\u0D09\\u0D0A\\u0D0B\\u0D0C\\u0D0E\\u0D0F\\u0D10\\u0D12\\u0D13\\u0D14\\u0D15\\u0D16\\u0D17\\u0D18\\u0D19\\u0D1A\\u0D1B\\u0D1C\\u0D1D\\u0D1E\\u0D1F\\u0D20\\u0D21\\u0D22\\u0D23\\u0D24\\u0D25\\u0D26\\u0D27\\u0D28\\u0D2A\\u0D2B\\u0D2C\\u0D2D\\u0D2E\\u0D2F\\u0D30\\u0D31\\u0D32\\u0D33\\u0D34\\u0D35\\u0D36\\u0D37\\u0D38\\u0D39\\u0D3D\\u0D60\\u0D61\\u0D7A\\u0D7B\\u0D7C\\u0D7D\\u0D7E\\u0D7F\\u0D85\\u0D86\\u0D87\\u0D88\\u0D89\\u0D8A\\u0D8B\\u0D8C\\u0D8D\\u0D8E\\u0D8F\\u0D90\\u0D91\\u0D92\\u0D93\\u0D94\\u0D95\\u0D96\\u0D9A\\u0D9B\\u0D9C\\u0D9D\\u0D9E\\u0D9F\\u0DA0\\u0DA1\\u0DA2\\u0DA3\\u0DA4\\u0DA5\\u0DA6\\u0DA7\\u0DA8\\u0DA9\\u0DAA\\u0DAB\\u0DAC\\u0DAD\\u0DAE\\u0DAF\\u0DB0\\u0DB1\\u0DB3\\u0DB4\\u0DB5\\u0DB6\\u0DB7\\u0DB8\\u0DB9\\u0DBA\\u0DBB\\u0DBD\\u0DC0\\u0DC1\\u0DC2\\u0DC3\\u0DC4\\u0DC5\\u0DC6\\u0E01\\u0E02\\u0E03\\u0E04\\u0E05\\u0E06\\u0E07\\u0E08\\u0E09\\u0E0A\\u0E0B\\u0E0C\\u0E0D\\u0E0E\\u0E0F\\u0E10\\u0E11\\u0E12\\u0E13\\u0E14\\u0E15\\u0E16\\u0E17\\u0E18\\u0E19\\u0E1A\\u0E1B\\u0E1C\\u0E1D\\u0E1E\\u0E1F\\u0E20\\u0E21\\u0E22\\u0E23\\u0E24\\u0E25\\u0E26\\u0E27\\u0E28\\u0E29\\u0E2A\\u0E2B\\u0E2C\\u0E2D\\u0E2E\\u0E2F\\u0E30\\u0E32\\u0E33\\u0E40\\u0E41\\u0E42\\u0E43\\u0E44\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94\\u0E95\\u0E96\\u0E97\\u0E99\\u0E9A\\u0E9B\\u0E9C\\u0E9D\\u0E9E\\u0E9F\\u0EA1\\u0EA2\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD\\u0EAE\\u0EAF\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0\\u0EC1\\u0EC2\\u0EC3\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40\\u0F41\\u0F42\\u0F43\\u0F44\\u0F45\\u0F46\\u0F47\\u0F49\\u0F4A\\u0F4B\\u0F4C\\u0F4D\\u0F4E\\u0F4F\\u0F50\\u0F51\\u0F52\\u0F53\\u0F54\\u0F55\\u0F56\\u0F57\\u0F58\\u0F59\\u0F5A\\u0F5B\\u0F5C\\u0F5D\\u0F5E\\u0F5F\\u0F60\\u0F61\\u0F62\\u0F63\\u0F64\\u0F65\\u0F66\\u0F67\\u0F68\\u0F69\\u0F6A\\u0F6B\\u0F6C\\u0F88\\u0F89\\u0F8A\\u0F8B\\u1000\\u1001\\u1002\\u1003\\u1004\\u1005\\u1006\\u1007\\u1008\\u1009\\u100A\\u100B\\u100C\\u100D\\u100E\\u100F\\u1010\\u1011\\u1012\\u1013\\u1014\\u1015\\u1016\\u1017\\u1018\\u1019\\u101A\\u101B\\u101C\\u101D\\u101E\\u101F\\u1020\\u1021\\u1022\\u1023\\u1024\\u1025\\u1026\\u1027\\u1028\\u1029\\u102A\\u103F\\u1050\\u1051\\u1052\\u1053\\u1054\\u1055\\u105A\\u105B\\u105C\\u105D\\u1061\\u1065\\u1066\\u106E\\u106F\\u1070\\u1075\\u1076\\u1077\\u1078\\u1079\\u107A\\u107B\\u107C\\u107D\\u107E\\u107F\\u1080\\u1081\\u108E\\u10D0\\u10D1\\u10D2\\u10D3\\u10D4\\u10D5\\u10D6\\u10D7\\u10D8\\u10D9\\u10DA\\u10DB\\u10DC\\u10DD\\u10DE\\u10DF\\u10E0\\u10E1\\u10E2\\u10E3\\u10E4\\u10E5\\u10E6\\u10E7\\u10E8\\u10E9\\u10EA\\u10EB\\u10EC\\u10ED\\u10EE\\u10EF\\u10F0\\u10F1\\u10F2\\u10F3\\u10F4\\u10F5\\u10F6\\u10F7\\u10F8\\u10F9\\u10FA\\u1100\\u1101\\u1102\\u1103\\u1104\\u1105\\u1106\\u1107\\u1108\\u1109\\u110A\\u110B\\u110C\\u110D\\u110E\\u110F\\u1110\\u1111\\u1112\\u1113\\u1114\\u1115\\u1116\\u1117\\u1118\\u1119\\u111A\\u111B\\u111C\\u111D\\u111E\\u111F\\u1120\\u1121\\u1122\\u1123\\u1124\\u1125\\u1126\\u1127\\u1128\\u1129\\u112A\\u112B\\u112C\\u112D\\u112E\\u112F\\u1130\\u1131\\u1132\\u1133\\u1134\\u1135\\u1136\\u1137\\u1138\\u1139\\u113A\\u113B\\u113C\\u113D\\u113E\\u113F\\u1140\\u1141\\u1142\\u1143\\u1144\\u1145\\u1146\\u1147\\u1148\\u1149\\u114A\\u114B\\u114C\\u114D\\u114E\\u114F\\u1150\\u1151\\u1152\\u1153\\u1154\\u1155\\u1156\\u1157\\u1158\\u1159\\u115F\\u1160\\u1161\\u1162\\u1163\\u1164\\u1165\\u1166\\u1167\\u1168\\u1169\\u116A\\u116B\\u116C\\u116D\\u116E\\u116F\\u1170\\u1171\\u1172\\u1173\\u1174\\u1175\\u1176\\u1177\\u1178\\u1179\\u117A\\u117B\\u117C\\u117D\\u117E\\u117F\\u1180\\u1181\\u1182\\u1183\\u1184\\u1185\\u1186\\u1187\\u1188\\u1189\\u118A\\u118B\\u118C\\u118D\\u118E\\u118F\\u1190\\u1191\\u1192\\u1193\\u1194\\u1195\\u1196\\u1197\\u1198\\u1199\\u119A\\u119B\\u119C\\u119D\\u119E\\u119F\\u11A0\\u11A1\\u11A2\\u11A8\\u11A9\\u11AA\\u11AB\\u11AC\\u11AD\\u11AE\\u11AF\\u11B0\\u11B1\\u11B2\\u11B3\\u11B4\\u11B5\\u11B6\\u11B7\\u11B8\\u11B9\\u11BA\\u11BB\\u11BC\\u11BD\\u11BE\\u11BF\\u11C0\\u11C1\\u11C2\\u11C3\\u11C4\\u11C5\\u11C6\\u11C7\\u11C8\\u11C9\\u11CA\\u11CB\\u11CC\\u11CD\\u11CE\\u11CF\\u11D0\\u11D1\\u11D2\\u11D3\\u11D4\\u11D5\\u11D6\\u11D7\\u11D8\\u11D9\\u11DA\\u11DB\\u11DC\\u11DD\\u11DE\\u11DF\\u11E0\\u11E1\\u11E2\\u11E3\\u11E4\\u11E5\\u11E6\\u11E7\\u11E8\\u11E9\\u11EA\\u11EB\\u11EC\\u11ED\\u11EE\\u11EF\\u11F0\\u11F1\\u11F2\\u11F3\\u11F4\\u11F5\\u11F6\\u11F7\\u11F8\\u11F9\\u1200\\u1201\\u1202\\u1203\\u1204\\u1205\\u1206\\u1207\\u1208\\u1209\\u120A\\u120B\\u120C\\u120D\\u120E\\u120F\\u1210\\u1211\\u1212\\u1213\\u1214\\u1215\\u1216\\u1217\\u1218\\u1219\\u121A\\u121B\\u121C\\u121D\\u121E\\u121F\\u1220\\u1221\\u1222\\u1223\\u1224\\u1225\\u1226\\u1227\\u1228\\u1229\\u122A\\u122B\\u122C\\u122D\\u122E\\u122F\\u1230\\u1231\\u1232\\u1233\\u1234\\u1235\\u1236\\u1237\\u1238\\u1239\\u123A\\u123B\\u123C\\u123D\\u123E\\u123F\\u1240\\u1241\\u1242\\u1243\\u1244\\u1245\\u1246\\u1247\\u1248\\u124A\\u124B\\u124C\\u124D\\u1250\\u1251\\u1252\\u1253\\u1254\\u1255\\u1256\\u1258\\u125A\\u125B\\u125C\\u125D\\u1260\\u1261\\u1262\\u1263\\u1264\\u1265\\u1266\\u1267\\u1268\\u1269\\u126A\\u126B\\u126C\\u126D\\u126E\\u126F\\u1270\\u1271\\u1272\\u1273\\u1274\\u1275\\u1276\\u1277\\u1278\\u1279\\u127A\\u127B\\u127C\\u127D\\u127E\\u127F\\u1280\\u1281\\u1282\\u1283\\u1284\\u1285\\u1286\\u1287\\u1288\\u128A\\u128B\\u128C\\u128D\\u1290\\u1291\\u1292\\u1293\\u1294\\u1295\\u1296\\u1297\\u1298\\u1299\\u129A\\u129B\\u129C\\u129D\\u129E\\u129F\\u12A0\\u12A1\\u12A2\\u12A3\\u12A4\\u12A5\\u12A6\\u12A7\\u12A8\\u12A9\\u12AA\\u12AB\\u12AC\\u12AD\\u12AE\\u12AF\\u12B0\\u12B2\\u12B3\\u12B4\\u12B5\\u12B8\\u12B9\\u12BA\\u12BB\\u12BC\\u12BD\\u12BE\\u12C0\\u12C2\\u12C3\\u12C4\\u12C5\\u12C8\\u12C9\\u12CA\\u12CB\\u12CC\\u12CD\\u12CE\\u12CF\\u12D0\\u12D1\\u12D2\\u12D3\\u12D4\\u12D5\\u12D6\\u12D8\\u12D9\\u12DA\\u12DB\\u12DC\\u12DD\\u12DE\\u12DF\\u12E0\\u12E1\\u12E2\\u12E3\\u12E4\\u12E5\\u12E6\\u12E7\\u12E8\\u12E9\\u12EA\\u12EB\\u12EC\\u12ED\\u12EE\\u12EF\\u12F0\\u12F1\\u12F2\\u12F3\\u12F4\\u12F5\\u12F6\\u12F7\\u12F8\\u12F9\\u12FA\\u12FB\\u12FC\\u12FD\\u12FE\\u12FF\\u1300\\u1301\\u1302\\u1303\\u1304\\u1305\\u1306\\u1307\\u1308\\u1309\\u130A\\u130B\\u130C\\u130D\\u130E\\u130F\\u1310\\u1312\\u1313\\u1314\\u1315\\u1318\\u1319\\u131A\\u131B\\u131C\\u131D\\u131E\\u131F\\u1320\\u1321\\u1322\\u1323\\u1324\\u1325\\u1326\\u1327\\u1328\\u1329\\u132A\\u132B\\u132C\\u132D\\u132E\\u132F\\u1330\\u1331\\u1332\\u1333\\u1334\\u1335\\u1336\\u1337\\u1338\\u1339\\u133A\\u133B\\u133C\\u133D\\u133E\\u133F\\u1340\\u1341\\u1342\\u1343\\u1344\\u1345\\u1346\\u1347\\u1348\\u1349\\u134A\\u134B\\u134C\\u134D\\u134E\\u134F\\u1350\\u1351\\u1352\\u1353\\u1354\\u1355\\u1356\\u1357\\u1358\\u1359\\u135A\\u1380\\u1381\\u1382\\u1383\\u1384\\u1385\\u1386\\u1387\\u1388\\u1389\\u138A\\u138B\\u138C\\u138D\\u138E\\u138F\\u13A0\\u13A1\\u13A2\\u13A3\\u13A4\\u13A5\\u13A6\\u13A7\\u13A8\\u13A9\\u13AA\\u13AB\\u13AC\\u13AD\\u13AE\\u13AF\\u13B0\\u13B1\\u13B2\\u13B3\\u13B4\\u13B5\\u13B6\\u13B7\\u13B8\\u13B9\\u13BA\\u13BB\\u13BC\\u13BD\\u13BE\\u13BF\\u13C0\\u13C1\\u13C2\\u13C3\\u13C4\\u13C5\\u13C6\\u13C7\\u13C8\\u13C9\\u13CA\\u13CB\\u13CC\\u13CD\\u13CE\\u13CF\\u13D0\\u13D1\\u13D2\\u13D3\\u13D4\\u13D5\\u13D6\\u13D7\\u13D8\\u13D9\\u13DA\\u13DB\\u13DC\\u13DD\\u13DE\\u13DF\\u13E0\\u13E1\\u13E2\\u13E3\\u13E4\\u13E5\\u13E6\\u13E7\\u13E8\\u13E9\\u13EA\\u13EB\\u13EC\\u13ED\\u13EE\\u13EF\\u13F0\\u13F1\\u13F2\\u13F3\\u13F4\\u1401\\u1402\\u1403\\u1404\\u1405\\u1406\\u1407\\u1408\\u1409\\u140A\\u140B\\u140C\\u140D\\u140E\\u140F\\u1410\\u1411\\u1412\\u1413\\u1414\\u1415\\u1416\\u1417\\u1418\\u1419\\u141A\\u141B\\u141C\\u141D\\u141E\\u141F\\u1420\\u1421\\u1422\\u1423\\u1424\\u1425\\u1426\\u1427\\u1428\\u1429\\u142A\\u142B\\u142C\\u142D\\u142E\\u142F\\u1430\\u1431\\u1432\\u1433\\u1434\\u1435\\u1436\\u1437\\u1438\\u1439\\u143A\\u143B\\u143C\\u143D\\u143E\\u143F\\u1440\\u1441\\u1442\\u1443\\u1444\\u1445\\u1446\\u1447\\u1448\\u1449\\u144A\\u144B\\u144C\\u144D\\u144E\\u144F\\u1450\\u1451\\u1452\\u1453\\u1454\\u1455\\u1456\\u1457\\u1458\\u1459\\u145A\\u145B\\u145C\\u145D\\u145E\\u145F\\u1460\\u1461\\u1462\\u1463\\u1464\\u1465\\u1466\\u1467\\u1468\\u1469\\u146A\\u146B\\u146C\\u146D\\u146E\\u146F\\u1470\\u1471\\u1472\\u1473\\u1474\\u1475\\u1476\\u1477\\u1478\\u1479\\u147A\\u147B\\u147C\\u147D\\u147E\\u147F\\u1480\\u1481\\u1482\\u1483\\u1484\\u1485\\u1486\\u1487\\u1488\\u1489\\u148A\\u148B\\u148C\\u148D\\u148E\\u148F\\u1490\\u1491\\u1492\\u1493\\u1494\\u1495\\u1496\\u1497\\u1498\\u1499\\u149A\\u149B\\u149C\\u149D\\u149E\\u149F\\u14A0\\u14A1\\u14A2\\u14A3\\u14A4\\u14A5\\u14A6\\u14A7\\u14A8\\u14A9\\u14AA\\u14AB\\u14AC\\u14AD\\u14AE\\u14AF\\u14B0\\u14B1\\u14B2\\u14B3\\u14B4\\u14B5\\u14B6\\u14B7\\u14B8\\u14B9\\u14BA\\u14BB\\u14BC\\u14BD\\u14BE\\u14BF\\u14C0\\u14C1\\u14C2\\u14C3\\u14C4\\u14C5\\u14C6\\u14C7\\u14C8\\u14C9\\u14CA\\u14CB\\u14CC\\u14CD\\u14CE\\u14CF\\u14D0\\u14D1\\u14D2\\u14D3\\u14D4\\u14D5\\u14D6\\u14D7\\u14D8\\u14D9\\u14DA\\u14DB\\u14DC\\u14DD\\u14DE\\u14DF\\u14E0\\u14E1\\u14E2\\u14E3\\u14E4\\u14E5\\u14E6\\u14E7\\u14E8\\u14E9\\u14EA\\u14EB\\u14EC\\u14ED\\u14EE\\u14EF\\u14F0\\u14F1\\u14F2\\u14F3\\u14F4\\u14F5\\u14F6\\u14F7\\u14F8\\u14F9\\u14FA\\u14FB\\u14FC\\u14FD\\u14FE\\u14FF\\u1500\\u1501\\u1502\\u1503\\u1504\\u1505\\u1506\\u1507\\u1508\\u1509\\u150A\\u150B\\u150C\\u150D\\u150E\\u150F\\u1510\\u1511\\u1512\\u1513\\u1514\\u1515\\u1516\\u1517\\u1518\\u1519\\u151A\\u151B\\u151C\\u151D\\u151E\\u151F\\u1520\\u1521\\u1522\\u1523\\u1524\\u1525\\u1526\\u1527\\u1528\\u1529\\u152A\\u152B\\u152C\\u152D\\u152E\\u152F\\u1530\\u1531\\u1532\\u1533\\u1534\\u1535\\u1536\\u1537\\u1538\\u1539\\u153A\\u153B\\u153C\\u153D\\u153E\\u153F\\u1540\\u1541\\u1542\\u1543\\u1544\\u1545\\u1546\\u1547\\u1548\\u1549\\u154A\\u154B\\u154C\\u154D\\u154E\\u154F\\u1550\\u1551\\u1552\\u1553\\u1554\\u1555\\u1556\\u1557\\u1558\\u1559\\u155A\\u155B\\u155C\\u155D\\u155E\\u155F\\u1560\\u1561\\u1562\\u1563\\u1564\\u1565\\u1566\\u1567\\u1568\\u1569\\u156A\\u156B\\u156C\\u156D\\u156E\\u156F\\u1570\\u1571\\u1572\\u1573\\u1574\\u1575\\u1576\\u1577\\u1578\\u1579\\u157A\\u157B\\u157C\\u157D\\u157E\\u157F\\u1580\\u1581\\u1582\\u1583\\u1584\\u1585\\u1586\\u1587\\u1588\\u1589\\u158A\\u158B\\u158C\\u158D\\u158E\\u158F\\u1590\\u1591\\u1592\\u1593\\u1594\\u1595\\u1596\\u1597\\u1598\\u1599\\u159A\\u159B\\u159C\\u159D\\u159E\\u159F\\u15A0\\u15A1\\u15A2\\u15A3\\u15A4\\u15A5\\u15A6\\u15A7\\u15A8\\u15A9\\u15AA\\u15AB\\u15AC\\u15AD\\u15AE\\u15AF\\u15B0\\u15B1\\u15B2\\u15B3\\u15B4\\u15B5\\u15B6\\u15B7\\u15B8\\u15B9\\u15BA\\u15BB\\u15BC\\u15BD\\u15BE\\u15BF\\u15C0\\u15C1\\u15C2\\u15C3\\u15C4\\u15C5\\u15C6\\u15C7\\u15C8\\u15C9\\u15CA\\u15CB\\u15CC\\u15CD\\u15CE\\u15CF\\u15D0\\u15D1\\u15D2\\u15D3\\u15D4\\u15D5\\u15D6\\u15D7\\u15D8\\u15D9\\u15DA\\u15DB\\u15DC\\u15DD\\u15DE\\u15DF\\u15E0\\u15E1\\u15E2\\u15E3\\u15E4\\u15E5\\u15E6\\u15E7\\u15E8\\u15E9\\u15EA\\u15EB\\u15EC\\u15ED\\u15EE\\u15EF\\u15F0\\u15F1\\u15F2\\u15F3\\u15F4\\u15F5\\u15F6\\u15F7\\u15F8\\u15F9\\u15FA\\u15FB\\u15FC\\u15FD\\u15FE\\u15FF\\u1600\\u1601\\u1602\\u1603\\u1604\\u1605\\u1606\\u1607\\u1608\\u1609\\u160A\\u160B\\u160C\\u160D\\u160E\\u160F\\u1610\\u1611\\u1612\\u1613\\u1614\\u1615\\u1616\\u1617\\u1618\\u1619\\u161A\\u161B\\u161C\\u161D\\u161E\\u161F\\u1620\\u1621\\u1622\\u1623\\u1624\\u1625\\u1626\\u1627\\u1628\\u1629\\u162A\\u162B\\u162C\\u162D\\u162E\\u162F\\u1630\\u1631\\u1632\\u1633\\u1634\\u1635\\u1636\\u1637\\u1638\\u1639\\u163A\\u163B\\u163C\\u163D\\u163E\\u163F\\u1640\\u1641\\u1642\\u1643\\u1644\\u1645\\u1646\\u1647\\u1648\\u1649\\u164A\\u164B\\u164C\\u164D\\u164E\\u164F\\u1650\\u1651\\u1652\\u1653\\u1654\\u1655\\u1656\\u1657\\u1658\\u1659\\u165A\\u165B\\u165C\\u165D\\u165E\\u165F\\u1660\\u1661\\u1662\\u1663\\u1664\\u1665\\u1666\\u1667\\u1668\\u1669\\u166A\\u166B\\u166C\\u166F\\u1670\\u1671\\u1672\\u1673\\u1674\\u1675\\u1676\\u1681\\u1682\\u1683\\u1684\\u1685\\u1686\\u1687\\u1688\\u1689\\u168A\\u168B\\u168C\\u168D\\u168E\\u168F\\u1690\\u1691\\u1692\\u1693\\u1694\\u1695\\u1696\\u1697\\u1698\\u1699\\u169A\\u16A0\\u16A1\\u16A2\\u16A3\\u16A4\\u16A5\\u16A6\\u16A7\\u16A8\\u16A9\\u16AA\\u16AB\\u16AC\\u16AD\\u16AE\\u16AF\\u16B0\\u16B1\\u16B2\\u16B3\\u16B4\\u16B5\\u16B6\\u16B7\\u16B8\\u16B9\\u16BA\\u16BB\\u16BC\\u16BD\\u16BE\\u16BF\\u16C0\\u16C1\\u16C2\\u16C3\\u16C4\\u16C5\\u16C6\\u16C7\\u16C8\\u16C9\\u16CA\\u16CB\\u16CC\\u16CD\\u16CE\\u16CF\\u16D0\\u16D1\\u16D2\\u16D3\\u16D4\\u16D5\\u16D6\\u16D7\\u16D8\\u16D9\\u16DA\\u16DB\\u16DC\\u16DD\\u16DE\\u16DF\\u16E0\\u16E1\\u16E2\\u16E3\\u16E4\\u16E5\\u16E6\\u16E7\\u16E8\\u16E9\\u16EA\\u1700\\u1701\\u1702\\u1703\\u1704\\u1705\\u1706\\u1707\\u1708\\u1709\\u170A\\u170B\\u170C\\u170E\\u170F\\u1710\\u1711\\u1720\\u1721\\u1722\\u1723\\u1724\\u1725\\u1726\\u1727\\u1728\\u1729\\u172A\\u172B\\u172C\\u172D\\u172E\\u172F\\u1730\\u1731\\u1740\\u1741\\u1742\\u1743\\u1744\\u1745\\u1746\\u1747\\u1748\\u1749\\u174A\\u174B\\u174C\\u174D\\u174E\\u174F\\u1750\\u1751\\u1760\\u1761\\u1762\\u1763\\u1764\\u1765\\u1766\\u1767\\u1768\\u1769\\u176A\\u176B\\u176C\\u176E\\u176F\\u1770\\u1780\\u1781\\u1782\\u1783\\u1784\\u1785\\u1786\\u1787\\u1788\\u1789\\u178A\\u178B\\u178C\\u178D\\u178E\\u178F\\u1790\\u1791\\u1792\\u1793\\u1794\\u1795\\u1796\\u1797\\u1798\\u1799\\u179A\\u179B\\u179C\\u179D\\u179E\\u179F\\u17A0\\u17A1\\u17A2\\u17A3\\u17A4\\u17A5\\u17A6\\u17A7\\u17A8\\u17A9\\u17AA\\u17AB\\u17AC\\u17AD\\u17AE\\u17AF\\u17B0\\u17B1\\u17B2\\u17B3\\u17DC\\u1820\\u1821\\u1822\\u1823\\u1824\\u1825\\u1826\\u1827\\u1828\\u1829\\u182A\\u182B\\u182C\\u182D\\u182E\\u182F\\u1830\\u1831\\u1832\\u1833\\u1834\\u1835\\u1836\\u1837\\u1838\\u1839\\u183A\\u183B\\u183C\\u183D\\u183E\\u183F\\u1840\\u1841\\u1842\\u1844\\u1845\\u1846\\u1847\\u1848\\u1849\\u184A\\u184B\\u184C\\u184D\\u184E\\u184F\\u1850\\u1851\\u1852\\u1853\\u1854\\u1855\\u1856\\u1857\\u1858\\u1859\\u185A\\u185B\\u185C\\u185D\\u185E\\u185F\\u1860\\u1861\\u1862\\u1863\\u1864\\u1865\\u1866\\u1867\\u1868\\u1869\\u186A\\u186B\\u186C\\u186D\\u186E\\u186F\\u1870\\u1871\\u1872\\u1873\\u1874\\u1875\\u1876\\u1877\\u1880\\u1881\\u1882\\u1883\\u1884\\u1885\\u1886\\u1887\\u1888\\u1889\\u188A\\u188B\\u188C\\u188D\\u188E\\u188F\\u1890\\u1891\\u1892\\u1893\\u1894\\u1895\\u1896\\u1897\\u1898\\u1899\\u189A\\u189B\\u189C\\u189D\\u189E\\u189F\\u18A0\\u18A1\\u18A2\\u18A3\\u18A4\\u18A5\\u18A6\\u18A7\\u18A8\\u18AA\\u1900\\u1901\\u1902\\u1903\\u1904\\u1905\\u1906\\u1907\\u1908\\u1909\\u190A\\u190B\\u190C\\u190D\\u190E\\u190F\\u1910\\u1911\\u1912\\u1913\\u1914\\u1915\\u1916\\u1917\\u1918\\u1919\\u191A\\u191B\\u191C\\u1950\\u1951\\u1952\\u1953\\u1954\\u1955\\u1956\\u1957\\u1958\\u1959\\u195A\\u195B\\u195C\\u195D\\u195E\\u195F\\u1960\\u1961\\u1962\\u1963\\u1964\\u1965\\u1966\\u1967\\u1968\\u1969\\u196A\\u196B\\u196C\\u196D\\u1970\\u1971\\u1972\\u1973\\u1974\\u1980\\u1981\\u1982\\u1983\\u1984\\u1985\\u1986\\u1987\\u1988\\u1989\\u198A\\u198B\\u198C\\u198D\\u198E\\u198F\\u1990\\u1991\\u1992\\u1993\\u1994\\u1995\\u1996\\u1997\\u1998\\u1999\\u199A\\u199B\\u199C\\u199D\\u199E\\u199F\\u19A0\\u19A1\\u19A2\\u19A3\\u19A4\\u19A5\\u19A6\\u19A7\\u19A8\\u19A9\\u19C1\\u19C2\\u19C3\\u19C4\\u19C5\\u19C6\\u19C7\\u1A00\\u1A01\\u1A02\\u1A03\\u1A04\\u1A05\\u1A06\\u1A07\\u1A08\\u1A09\\u1A0A\\u1A0B\\u1A0C\\u1A0D\\u1A0E\\u1A0F\\u1A10\\u1A11\\u1A12\\u1A13\\u1A14\\u1A15\\u1A16\\u1B05\\u1B06\\u1B07\\u1B08\\u1B09\\u1B0A\\u1B0B\\u1B0C\\u1B0D\\u1B0E\\u1B0F\\u1B10\\u1B11\\u1B12\\u1B13\\u1B14\\u1B15\\u1B16\\u1B17\\u1B18\\u1B19\\u1B1A\\u1B1B\\u1B1C\\u1B1D\\u1B1E\\u1B1F\\u1B20\\u1B21\\u1B22\\u1B23\\u1B24\\u1B25\\u1B26\\u1B27\\u1B28\\u1B29\\u1B2A\\u1B2B\\u1B2C\\u1B2D\\u1B2E\\u1B2F\\u1B30\\u1B31\\u1B32\\u1B33\\u1B45\\u1B46\\u1B47\\u1B48\\u1B49\\u1B4A\\u1B4B\\u1B83\\u1B84\\u1B85\\u1B86\\u1B87\\u1B88\\u1B89\\u1B8A\\u1B8B\\u1B8C\\u1B8D\\u1B8E\\u1B8F\\u1B90\\u1B91\\u1B92\\u1B93\\u1B94\\u1B95\\u1B96\\u1B97\\u1B98\\u1B99\\u1B9A\\u1B9B\\u1B9C\\u1B9D\\u1B9E\\u1B9F\\u1BA0\\u1BAE\\u1BAF\\u1C00\\u1C01\\u1C02\\u1C03\\u1C04\\u1C05\\u1C06\\u1C07\\u1C08\\u1C09\\u1C0A\\u1C0B\\u1C0C\\u1C0D\\u1C0E\\u1C0F\\u1C10\\u1C11\\u1C12\\u1C13\\u1C14\\u1C15\\u1C16\\u1C17\\u1C18\\u1C19\\u1C1A\\u1C1B\\u1C1C\\u1C1D\\u1C1E\\u1C1F\\u1C20\\u1C21\\u1C22\\u1C23\\u1C4D\\u1C4E\\u1C4F\\u1C5A\\u1C5B\\u1C5C\\u1C5D\\u1C5E\\u1C5F\\u1C60\\u1C61\\u1C62\\u1C63\\u1C64\\u1C65\\u1C66\\u1C67\\u1C68\\u1C69\\u1C6A\\u1C6B\\u1C6C\\u1C6D\\u1C6E\\u1C6F\\u1C70\\u1C71\\u1C72\\u1C73\\u1C74\\u1C75\\u1C76\\u1C77\\u2135\\u2136\\u2137\\u2138\\u2D30\\u2D31\\u2D32\\u2D33\\u2D34\\u2D35\\u2D36\\u2D37\\u2D38\\u2D39\\u2D3A\\u2D3B\\u2D3C\\u2D3D\\u2D3E\\u2D3F\\u2D40\\u2D41\\u2D42\\u2D43\\u2D44\\u2D45\\u2D46\\u2D47\\u2D48\\u2D49\\u2D4A\\u2D4B\\u2D4C\\u2D4D\\u2D4E\\u2D4F\\u2D50\\u2D51\\u2D52\\u2D53\\u2D54\\u2D55\\u2D56\\u2D57\\u2D58\\u2D59\\u2D5A\\u2D5B\\u2D5C\\u2D5D\\u2D5E\\u2D5F\\u2D60\\u2D61\\u2D62\\u2D63\\u2D64\\u2D65\\u2D80\\u2D81\\u2D82\\u2D83\\u2D84\\u2D85\\u2D86\\u2D87\\u2D88\\u2D89\\u2D8A\\u2D8B\\u2D8C\\u2D8D\\u2D8E\\u2D8F\\u2D90\\u2D91\\u2D92\\u2D93\\u2D94\\u2D95\\u2D96\\u2DA0\\u2DA1\\u2DA2\\u2DA3\\u2DA4\\u2DA5\\u2DA6\\u2DA8\\u2DA9\\u2DAA\\u2DAB\\u2DAC\\u2DAD\\u2DAE\\u2DB0\\u2DB1\\u2DB2\\u2DB3\\u2DB4\\u2DB5\\u2DB6\\u2DB8\\u2DB9\\u2DBA\\u2DBB\\u2DBC\\u2DBD\\u2DBE\\u2DC0\\u2DC1\\u2DC2\\u2DC3\\u2DC4\\u2DC5\\u2DC6\\u2DC8\\u2DC9\\u2DCA\\u2DCB\\u2DCC\\u2DCD\\u2DCE\\u2DD0\\u2DD1\\u2DD2\\u2DD3\\u2DD4\\u2DD5\\u2DD6\\u2DD8\\u2DD9\\u2DDA\\u2DDB\\u2DDC\\u2DDD\\u2DDE\\u3006\\u303C\\u3041\\u3042\\u3043\\u3044\\u3045\\u3046\\u3047\\u3048\\u3049\\u304A\\u304B\\u304C\\u304D\\u304E\\u304F\\u3050\\u3051\\u3052\\u3053\\u3054\\u3055\\u3056\\u3057\\u3058\\u3059\\u305A\\u305B\\u305C\\u305D\\u305E\\u305F\\u3060\\u3061\\u3062\\u3063\\u3064\\u3065\\u3066\\u3067\\u3068\\u3069\\u306A\\u306B\\u306C\\u306D\\u306E\\u306F\\u3070\\u3071\\u3072\\u3073\\u3074\\u3075\\u3076\\u3077\\u3078\\u3079\\u307A\\u307B\\u307C\\u307D\\u307E\\u307F\\u3080\\u3081\\u3082\\u3083\\u3084\\u3085\\u3086\\u3087\\u3088\\u3089\\u308A\\u308B\\u308C\\u308D\\u308E\\u308F\\u3090\\u3091\\u3092\\u3093\\u3094\\u3095\\u3096\\u309F\\u30A1\\u30A2\\u30A3\\u30A4\\u30A5\\u30A6\\u30A7\\u30A8\\u30A9\\u30AA\\u30AB\\u30AC\\u30AD\\u30AE\\u30AF\\u30B0\\u30B1\\u30B2\\u30B3\\u30B4\\u30B5\\u30B6\\u30B7\\u30B8\\u30B9\\u30BA\\u30BB\\u30BC\\u30BD\\u30BE\\u30BF\\u30C0\\u30C1\\u30C2\\u30C3\\u30C4\\u30C5\\u30C6\\u30C7\\u30C8\\u30C9\\u30CA\\u30CB\\u30CC\\u30CD\\u30CE\\u30CF\\u30D0\\u30D1\\u30D2\\u30D3\\u30D4\\u30D5\\u30D6\\u30D7\\u30D8\\u30D9\\u30DA\\u30DB\\u30DC\\u30DD\\u30DE\\u30DF\\u30E0\\u30E1\\u30E2\\u30E3\\u30E4\\u30E5\\u30E6\\u30E7\\u30E8\\u30E9\\u30EA\\u30EB\\u30EC\\u30ED\\u30EE\\u30EF\\u30F0\\u30F1\\u30F2\\u30F3\\u30F4\\u30F5\\u30F6\\u30F7\\u30F8\\u30F9\\u30FA\\u30FF\\u3105\\u3106\\u3107\\u3108\\u3109\\u310A\\u310B\\u310C\\u310D\\u310E\\u310F\\u3110\\u3111\\u3112\\u3113\\u3114\\u3115\\u3116\\u3117\\u3118\\u3119\\u311A\\u311B\\u311C\\u311D\\u311E\\u311F\\u3120\\u3121\\u3122\\u3123\\u3124\\u3125\\u3126\\u3127\\u3128\\u3129\\u312A\\u312B\\u312C\\u312D\\u3131\\u3132\\u3133\\u3134\\u3135\\u3136\\u3137\\u3138\\u3139\\u313A\\u313B\\u313C\\u313D\\u313E\\u313F\\u3140\\u3141\\u3142\\u3143\\u3144\\u3145\\u3146\\u3147\\u3148\\u3149\\u314A\\u314B\\u314C\\u314D\\u314E\\u314F\\u3150\\u3151\\u3152\\u3153\\u3154\\u3155\\u3156\\u3157\\u3158\\u3159\\u315A\\u315B\\u315C\\u315D\\u315E\\u315F\\u3160\\u3161\\u3162\\u3163\\u3164\\u3165\\u3166\\u3167\\u3168\\u3169\\u316A\\u316B\\u316C\\u316D\\u316E\\u316F\\u3170\\u3171\\u3172\\u3173\\u3174\\u3175\\u3176\\u3177\\u3178\\u3179\\u317A\\u317B\\u317C\\u317D\\u317E\\u317F\\u3180\\u3181\\u3182\\u3183\\u3184\\u3185\\u3186\\u3187\\u3188\\u3189\\u318A\\u318B\\u318C\\u318D\\u318E\\u31A0\\u31A1\\u31A2\\u31A3\\u31A4\\u31A5\\u31A6\\u31A7\\u31A8\\u31A9\\u31AA\\u31AB\\u31AC\\u31AD\\u31AE\\u31AF\\u31B0\\u31B1\\u31B2\\u31B3\\u31B4\\u31B5\\u31B6\\u31B7\\u31F0\\u31F1\\u31F2\\u31F3\\u31F4\\u31F5\\u31F6\\u31F7\\u31F8\\u31F9\\u31FA\\u31FB\\u31FC\\u31FD\\u31FE\\u31FF\\u3400\\u4DB5\\u4E00\\u9FC3\\uA000\\uA001\\uA002\\uA003\\uA004\\uA005\\uA006\\uA007\\uA008\\uA009\\uA00A\\uA00B\\uA00C\\uA00D\\uA00E\\uA00F\\uA010\\uA011\\uA012\\uA013\\uA014\\uA016\\uA017\\uA018\\uA019\\uA01A\\uA01B\\uA01C\\uA01D\\uA01E\\uA01F\\uA020\\uA021\\uA022\\uA023\\uA024\\uA025\\uA026\\uA027\\uA028\\uA029\\uA02A\\uA02B\\uA02C\\uA02D\\uA02E\\uA02F\\uA030\\uA031\\uA032\\uA033\\uA034\\uA035\\uA036\\uA037\\uA038\\uA039\\uA03A\\uA03B\\uA03C\\uA03D\\uA03E\\uA03F\\uA040\\uA041\\uA042\\uA043\\uA044\\uA045\\uA046\\uA047\\uA048\\uA049\\uA04A\\uA04B\\uA04C\\uA04D\\uA04E\\uA04F\\uA050\\uA051\\uA052\\uA053\\uA054\\uA055\\uA056\\uA057\\uA058\\uA059\\uA05A\\uA05B\\uA05C\\uA05D\\uA05E\\uA05F\\uA060\\uA061\\uA062\\uA063\\uA064\\uA065\\uA066\\uA067\\uA068\\uA069\\uA06A\\uA06B\\uA06C\\uA06D\\uA06E\\uA06F\\uA070\\uA071\\uA072\\uA073\\uA074\\uA075\\uA076\\uA077\\uA078\\uA079\\uA07A\\uA07B\\uA07C\\uA07D\\uA07E\\uA07F\\uA080\\uA081\\uA082\\uA083\\uA084\\uA085\\uA086\\uA087\\uA088\\uA089\\uA08A\\uA08B\\uA08C\\uA08D\\uA08E\\uA08F\\uA090\\uA091\\uA092\\uA093\\uA094\\uA095\\uA096\\uA097\\uA098\\uA099\\uA09A\\uA09B\\uA09C\\uA09D\\uA09E\\uA09F\\uA0A0\\uA0A1\\uA0A2\\uA0A3\\uA0A4\\uA0A5\\uA0A6\\uA0A7\\uA0A8\\uA0A9\\uA0AA\\uA0AB\\uA0AC\\uA0AD\\uA0AE\\uA0AF\\uA0B0\\uA0B1\\uA0B2\\uA0B3\\uA0B4\\uA0B5\\uA0B6\\uA0B7\\uA0B8\\uA0B9\\uA0BA\\uA0BB\\uA0BC\\uA0BD\\uA0BE\\uA0BF\\uA0C0\\uA0C1\\uA0C2\\uA0C3\\uA0C4\\uA0C5\\uA0C6\\uA0C7\\uA0C8\\uA0C9\\uA0CA\\uA0CB\\uA0CC\\uA0CD\\uA0CE\\uA0CF\\uA0D0\\uA0D1\\uA0D2\\uA0D3\\uA0D4\\uA0D5\\uA0D6\\uA0D7\\uA0D8\\uA0D9\\uA0DA\\uA0DB\\uA0DC\\uA0DD\\uA0DE\\uA0DF\\uA0E0\\uA0E1\\uA0E2\\uA0E3\\uA0E4\\uA0E5\\uA0E6\\uA0E7\\uA0E8\\uA0E9\\uA0EA\\uA0EB\\uA0EC\\uA0ED\\uA0EE\\uA0EF\\uA0F0\\uA0F1\\uA0F2\\uA0F3\\uA0F4\\uA0F5\\uA0F6\\uA0F7\\uA0F8\\uA0F9\\uA0FA\\uA0FB\\uA0FC\\uA0FD\\uA0FE\\uA0FF\\uA100\\uA101\\uA102\\uA103\\uA104\\uA105\\uA106\\uA107\\uA108\\uA109\\uA10A\\uA10B\\uA10C\\uA10D\\uA10E\\uA10F\\uA110\\uA111\\uA112\\uA113\\uA114\\uA115\\uA116\\uA117\\uA118\\uA119\\uA11A\\uA11B\\uA11C\\uA11D\\uA11E\\uA11F\\uA120\\uA121\\uA122\\uA123\\uA124\\uA125\\uA126\\uA127\\uA128\\uA129\\uA12A\\uA12B\\uA12C\\uA12D\\uA12E\\uA12F\\uA130\\uA131\\uA132\\uA133\\uA134\\uA135\\uA136\\uA137\\uA138\\uA139\\uA13A\\uA13B\\uA13C\\uA13D\\uA13E\\uA13F\\uA140\\uA141\\uA142\\uA143\\uA144\\uA145\\uA146\\uA147\\uA148\\uA149\\uA14A\\uA14B\\uA14C\\uA14D\\uA14E\\uA14F\\uA150\\uA151\\uA152\\uA153\\uA154\\uA155\\uA156\\uA157\\uA158\\uA159\\uA15A\\uA15B\\uA15C\\uA15D\\uA15E\\uA15F\\uA160\\uA161\\uA162\\uA163\\uA164\\uA165\\uA166\\uA167\\uA168\\uA169\\uA16A\\uA16B\\uA16C\\uA16D\\uA16E\\uA16F\\uA170\\uA171\\uA172\\uA173\\uA174\\uA175\\uA176\\uA177\\uA178\\uA179\\uA17A\\uA17B\\uA17C\\uA17D\\uA17E\\uA17F\\uA180\\uA181\\uA182\\uA183\\uA184\\uA185\\uA186\\uA187\\uA188\\uA189\\uA18A\\uA18B\\uA18C\\uA18D\\uA18E\\uA18F\\uA190\\uA191\\uA192\\uA193\\uA194\\uA195\\uA196\\uA197\\uA198\\uA199\\uA19A\\uA19B\\uA19C\\uA19D\\uA19E\\uA19F\\uA1A0\\uA1A1\\uA1A2\\uA1A3\\uA1A4\\uA1A5\\uA1A6\\uA1A7\\uA1A8\\uA1A9\\uA1AA\\uA1AB\\uA1AC\\uA1AD\\uA1AE\\uA1AF\\uA1B0\\uA1B1\\uA1B2\\uA1B3\\uA1B4\\uA1B5\\uA1B6\\uA1B7\\uA1B8\\uA1B9\\uA1BA\\uA1BB\\uA1BC\\uA1BD\\uA1BE\\uA1BF\\uA1C0\\uA1C1\\uA1C2\\uA1C3\\uA1C4\\uA1C5\\uA1C6\\uA1C7\\uA1C8\\uA1C9\\uA1CA\\uA1CB\\uA1CC\\uA1CD\\uA1CE\\uA1CF\\uA1D0\\uA1D1\\uA1D2\\uA1D3\\uA1D4\\uA1D5\\uA1D6\\uA1D7\\uA1D8\\uA1D9\\uA1DA\\uA1DB\\uA1DC\\uA1DD\\uA1DE\\uA1DF\\uA1E0\\uA1E1\\uA1E2\\uA1E3\\uA1E4\\uA1E5\\uA1E6\\uA1E7\\uA1E8\\uA1E9\\uA1EA\\uA1EB\\uA1EC\\uA1ED\\uA1EE\\uA1EF\\uA1F0\\uA1F1\\uA1F2\\uA1F3\\uA1F4\\uA1F5\\uA1F6\\uA1F7\\uA1F8\\uA1F9\\uA1FA\\uA1FB\\uA1FC\\uA1FD\\uA1FE\\uA1FF\\uA200\\uA201\\uA202\\uA203\\uA204\\uA205\\uA206\\uA207\\uA208\\uA209\\uA20A\\uA20B\\uA20C\\uA20D\\uA20E\\uA20F\\uA210\\uA211\\uA212\\uA213\\uA214\\uA215\\uA216\\uA217\\uA218\\uA219\\uA21A\\uA21B\\uA21C\\uA21D\\uA21E\\uA21F\\uA220\\uA221\\uA222\\uA223\\uA224\\uA225\\uA226\\uA227\\uA228\\uA229\\uA22A\\uA22B\\uA22C\\uA22D\\uA22E\\uA22F\\uA230\\uA231\\uA232\\uA233\\uA234\\uA235\\uA236\\uA237\\uA238\\uA239\\uA23A\\uA23B\\uA23C\\uA23D\\uA23E\\uA23F\\uA240\\uA241\\uA242\\uA243\\uA244\\uA245\\uA246\\uA247\\uA248\\uA249\\uA24A\\uA24B\\uA24C\\uA24D\\uA24E\\uA24F\\uA250\\uA251\\uA252\\uA253\\uA254\\uA255\\uA256\\uA257\\uA258\\uA259\\uA25A\\uA25B\\uA25C\\uA25D\\uA25E\\uA25F\\uA260\\uA261\\uA262\\uA263\\uA264\\uA265\\uA266\\uA267\\uA268\\uA269\\uA26A\\uA26B\\uA26C\\uA26D\\uA26E\\uA26F\\uA270\\uA271\\uA272\\uA273\\uA274\\uA275\\uA276\\uA277\\uA278\\uA279\\uA27A\\uA27B\\uA27C\\uA27D\\uA27E\\uA27F\\uA280\\uA281\\uA282\\uA283\\uA284\\uA285\\uA286\\uA287\\uA288\\uA289\\uA28A\\uA28B\\uA28C\\uA28D\\uA28E\\uA28F\\uA290\\uA291\\uA292\\uA293\\uA294\\uA295\\uA296\\uA297\\uA298\\uA299\\uA29A\\uA29B\\uA29C\\uA29D\\uA29E\\uA29F\\uA2A0\\uA2A1\\uA2A2\\uA2A3\\uA2A4\\uA2A5\\uA2A6\\uA2A7\\uA2A8\\uA2A9\\uA2AA\\uA2AB\\uA2AC\\uA2AD\\uA2AE\\uA2AF\\uA2B0\\uA2B1\\uA2B2\\uA2B3\\uA2B4\\uA2B5\\uA2B6\\uA2B7\\uA2B8\\uA2B9\\uA2BA\\uA2BB\\uA2BC\\uA2BD\\uA2BE\\uA2BF\\uA2C0\\uA2C1\\uA2C2\\uA2C3\\uA2C4\\uA2C5\\uA2C6\\uA2C7\\uA2C8\\uA2C9\\uA2CA\\uA2CB\\uA2CC\\uA2CD\\uA2CE\\uA2CF\\uA2D0\\uA2D1\\uA2D2\\uA2D3\\uA2D4\\uA2D5\\uA2D6\\uA2D7\\uA2D8\\uA2D9\\uA2DA\\uA2DB\\uA2DC\\uA2DD\\uA2DE\\uA2DF\\uA2E0\\uA2E1\\uA2E2\\uA2E3\\uA2E4\\uA2E5\\uA2E6\\uA2E7\\uA2E8\\uA2E9\\uA2EA\\uA2EB\\uA2EC\\uA2ED\\uA2EE\\uA2EF\\uA2F0\\uA2F1\\uA2F2\\uA2F3\\uA2F4\\uA2F5\\uA2F6\\uA2F7\\uA2F8\\uA2F9\\uA2FA\\uA2FB\\uA2FC\\uA2FD\\uA2FE\\uA2FF\\uA300\\uA301\\uA302\\uA303\\uA304\\uA305\\uA306\\uA307\\uA308\\uA309\\uA30A\\uA30B\\uA30C\\uA30D\\uA30E\\uA30F\\uA310\\uA311\\uA312\\uA313\\uA314\\uA315\\uA316\\uA317\\uA318\\uA319\\uA31A\\uA31B\\uA31C\\uA31D\\uA31E\\uA31F\\uA320\\uA321\\uA322\\uA323\\uA324\\uA325\\uA326\\uA327\\uA328\\uA329\\uA32A\\uA32B\\uA32C\\uA32D\\uA32E\\uA32F\\uA330\\uA331\\uA332\\uA333\\uA334\\uA335\\uA336\\uA337\\uA338\\uA339\\uA33A\\uA33B\\uA33C\\uA33D\\uA33E\\uA33F\\uA340\\uA341\\uA342\\uA343\\uA344\\uA345\\uA346\\uA347\\uA348\\uA349\\uA34A\\uA34B\\uA34C\\uA34D\\uA34E\\uA34F\\uA350\\uA351\\uA352\\uA353\\uA354\\uA355\\uA356\\uA357\\uA358\\uA359\\uA35A\\uA35B\\uA35C\\uA35D\\uA35E\\uA35F\\uA360\\uA361\\uA362\\uA363\\uA364\\uA365\\uA366\\uA367\\uA368\\uA369\\uA36A\\uA36B\\uA36C\\uA36D\\uA36E\\uA36F\\uA370\\uA371\\uA372\\uA373\\uA374\\uA375\\uA376\\uA377\\uA378\\uA379\\uA37A\\uA37B\\uA37C\\uA37D\\uA37E\\uA37F\\uA380\\uA381\\uA382\\uA383\\uA384\\uA385\\uA386\\uA387\\uA388\\uA389\\uA38A\\uA38B\\uA38C\\uA38D\\uA38E\\uA38F\\uA390\\uA391\\uA392\\uA393\\uA394\\uA395\\uA396\\uA397\\uA398\\uA399\\uA39A\\uA39B\\uA39C\\uA39D\\uA39E\\uA39F\\uA3A0\\uA3A1\\uA3A2\\uA3A3\\uA3A4\\uA3A5\\uA3A6\\uA3A7\\uA3A8\\uA3A9\\uA3AA\\uA3AB\\uA3AC\\uA3AD\\uA3AE\\uA3AF\\uA3B0\\uA3B1\\uA3B2\\uA3B3\\uA3B4\\uA3B5\\uA3B6\\uA3B7\\uA3B8\\uA3B9\\uA3BA\\uA3BB\\uA3BC\\uA3BD\\uA3BE\\uA3BF\\uA3C0\\uA3C1\\uA3C2\\uA3C3\\uA3C4\\uA3C5\\uA3C6\\uA3C7\\uA3C8\\uA3C9\\uA3CA\\uA3CB\\uA3CC\\uA3CD\\uA3CE\\uA3CF\\uA3D0\\uA3D1\\uA3D2\\uA3D3\\uA3D4\\uA3D5\\uA3D6\\uA3D7\\uA3D8\\uA3D9\\uA3DA\\uA3DB\\uA3DC\\uA3DD\\uA3DE\\uA3DF\\uA3E0\\uA3E1\\uA3E2\\uA3E3\\uA3E4\\uA3E5\\uA3E6\\uA3E7\\uA3E8\\uA3E9\\uA3EA\\uA3EB\\uA3EC\\uA3ED\\uA3EE\\uA3EF\\uA3F0\\uA3F1\\uA3F2\\uA3F3\\uA3F4\\uA3F5\\uA3F6\\uA3F7\\uA3F8\\uA3F9\\uA3FA\\uA3FB\\uA3FC\\uA3FD\\uA3FE\\uA3FF\\uA400\\uA401\\uA402\\uA403\\uA404\\uA405\\uA406\\uA407\\uA408\\uA409\\uA40A\\uA40B\\uA40C\\uA40D\\uA40E\\uA40F\\uA410\\uA411\\uA412\\uA413\\uA414\\uA415\\uA416\\uA417\\uA418\\uA419\\uA41A\\uA41B\\uA41C\\uA41D\\uA41E\\uA41F\\uA420\\uA421\\uA422\\uA423\\uA424\\uA425\\uA426\\uA427\\uA428\\uA429\\uA42A\\uA42B\\uA42C\\uA42D\\uA42E\\uA42F\\uA430\\uA431\\uA432\\uA433\\uA434\\uA435\\uA436\\uA437\\uA438\\uA439\\uA43A\\uA43B\\uA43C\\uA43D\\uA43E\\uA43F\\uA440\\uA441\\uA442\\uA443\\uA444\\uA445\\uA446\\uA447\\uA448\\uA449\\uA44A\\uA44B\\uA44C\\uA44D\\uA44E\\uA44F\\uA450\\uA451\\uA452\\uA453\\uA454\\uA455\\uA456\\uA457\\uA458\\uA459\\uA45A\\uA45B\\uA45C\\uA45D\\uA45E\\uA45F\\uA460\\uA461\\uA462\\uA463\\uA464\\uA465\\uA466\\uA467\\uA468\\uA469\\uA46A\\uA46B\\uA46C\\uA46D\\uA46E\\uA46F\\uA470\\uA471\\uA472\\uA473\\uA474\\uA475\\uA476\\uA477\\uA478\\uA479\\uA47A\\uA47B\\uA47C\\uA47D\\uA47E\\uA47F\\uA480\\uA481\\uA482\\uA483\\uA484\\uA485\\uA486\\uA487\\uA488\\uA489\\uA48A\\uA48B\\uA48C\\uA500\\uA501\\uA502\\uA503\\uA504\\uA505\\uA506\\uA507\\uA508\\uA509\\uA50A\\uA50B\\uA50C\\uA50D\\uA50E\\uA50F\\uA510\\uA511\\uA512\\uA513\\uA514\\uA515\\uA516\\uA517\\uA518\\uA519\\uA51A\\uA51B\\uA51C\\uA51D\\uA51E\\uA51F\\uA520\\uA521\\uA522\\uA523\\uA524\\uA525\\uA526\\uA527\\uA528\\uA529\\uA52A\\uA52B\\uA52C\\uA52D\\uA52E\\uA52F\\uA530\\uA531\\uA532\\uA533\\uA534\\uA535\\uA536\\uA537\\uA538\\uA539\\uA53A\\uA53B\\uA53C\\uA53D\\uA53E\\uA53F\\uA540\\uA541\\uA542\\uA543\\uA544\\uA545\\uA546\\uA547\\uA548\\uA549\\uA54A\\uA54B\\uA54C\\uA54D\\uA54E\\uA54F\\uA550\\uA551\\uA552\\uA553\\uA554\\uA555\\uA556\\uA557\\uA558\\uA559\\uA55A\\uA55B\\uA55C\\uA55D\\uA55E\\uA55F\\uA560\\uA561\\uA562\\uA563\\uA564\\uA565\\uA566\\uA567\\uA568\\uA569\\uA56A\\uA56B\\uA56C\\uA56D\\uA56E\\uA56F\\uA570\\uA571\\uA572\\uA573\\uA574\\uA575\\uA576\\uA577\\uA578\\uA579\\uA57A\\uA57B\\uA57C\\uA57D\\uA57E\\uA57F\\uA580\\uA581\\uA582\\uA583\\uA584\\uA585\\uA586\\uA587\\uA588\\uA589\\uA58A\\uA58B\\uA58C\\uA58D\\uA58E\\uA58F\\uA590\\uA591\\uA592\\uA593\\uA594\\uA595\\uA596\\uA597\\uA598\\uA599\\uA59A\\uA59B\\uA59C\\uA59D\\uA59E\\uA59F\\uA5A0\\uA5A1\\uA5A2\\uA5A3\\uA5A4\\uA5A5\\uA5A6\\uA5A7\\uA5A8\\uA5A9\\uA5AA\\uA5AB\\uA5AC\\uA5AD\\uA5AE\\uA5AF\\uA5B0\\uA5B1\\uA5B2\\uA5B3\\uA5B4\\uA5B5\\uA5B6\\uA5B7\\uA5B8\\uA5B9\\uA5BA\\uA5BB\\uA5BC\\uA5BD\\uA5BE\\uA5BF\\uA5C0\\uA5C1\\uA5C2\\uA5C3\\uA5C4\\uA5C5\\uA5C6\\uA5C7\\uA5C8\\uA5C9\\uA5CA\\uA5CB\\uA5CC\\uA5CD\\uA5CE\\uA5CF\\uA5D0\\uA5D1\\uA5D2\\uA5D3\\uA5D4\\uA5D5\\uA5D6\\uA5D7\\uA5D8\\uA5D9\\uA5DA\\uA5DB\\uA5DC\\uA5DD\\uA5DE\\uA5DF\\uA5E0\\uA5E1\\uA5E2\\uA5E3\\uA5E4\\uA5E5\\uA5E6\\uA5E7\\uA5E8\\uA5E9\\uA5EA\\uA5EB\\uA5EC\\uA5ED\\uA5EE\\uA5EF\\uA5F0\\uA5F1\\uA5F2\\uA5F3\\uA5F4\\uA5F5\\uA5F6\\uA5F7\\uA5F8\\uA5F9\\uA5FA\\uA5FB\\uA5FC\\uA5FD\\uA5FE\\uA5FF\\uA600\\uA601\\uA602\\uA603\\uA604\\uA605\\uA606\\uA607\\uA608\\uA609\\uA60A\\uA60B\\uA610\\uA611\\uA612\\uA613\\uA614\\uA615\\uA616\\uA617\\uA618\\uA619\\uA61A\\uA61B\\uA61C\\uA61D\\uA61E\\uA61F\\uA62A\\uA62B\\uA66E\\uA7FB\\uA7FC\\uA7FD\\uA7FE\\uA7FF\\uA800\\uA801\\uA803\\uA804\\uA805\\uA807\\uA808\\uA809\\uA80A\\uA80C\\uA80D\\uA80E\\uA80F\\uA810\\uA811\\uA812\\uA813\\uA814\\uA815\\uA816\\uA817\\uA818\\uA819\\uA81A\\uA81B\\uA81C\\uA81D\\uA81E\\uA81F\\uA820\\uA821\\uA822\\uA840\\uA841\\uA842\\uA843\\uA844\\uA845\\uA846\\uA847\\uA848\\uA849\\uA84A\\uA84B\\uA84C\\uA84D\\uA84E\\uA84F\\uA850\\uA851\\uA852\\uA853\\uA854\\uA855\\uA856\\uA857\\uA858\\uA859\\uA85A\\uA85B\\uA85C\\uA85D\\uA85E\\uA85F\\uA860\\uA861\\uA862\\uA863\\uA864\\uA865\\uA866\\uA867\\uA868\\uA869\\uA86A\\uA86B\\uA86C\\uA86D\\uA86E\\uA86F\\uA870\\uA871\\uA872\\uA873\\uA882\\uA883\\uA884\\uA885\\uA886\\uA887\\uA888\\uA889\\uA88A\\uA88B\\uA88C\\uA88D\\uA88E\\uA88F\\uA890\\uA891\\uA892\\uA893\\uA894\\uA895\\uA896\\uA897\\uA898\\uA899\\uA89A\\uA89B\\uA89C\\uA89D\\uA89E\\uA89F\\uA8A0\\uA8A1\\uA8A2\\uA8A3\\uA8A4\\uA8A5\\uA8A6\\uA8A7\\uA8A8\\uA8A9\\uA8AA\\uA8AB\\uA8AC\\uA8AD\\uA8AE\\uA8AF\\uA8B0\\uA8B1\\uA8B2\\uA8B3\\uA90A\\uA90B\\uA90C\\uA90D\\uA90E\\uA90F\\uA910\\uA911\\uA912\\uA913\\uA914\\uA915\\uA916\\uA917\\uA918\\uA919\\uA91A\\uA91B\\uA91C\\uA91D\\uA91E\\uA91F\\uA920\\uA921\\uA922\\uA923\\uA924\\uA925\\uA930\\uA931\\uA932\\uA933\\uA934\\uA935\\uA936\\uA937\\uA938\\uA939\\uA93A\\uA93B\\uA93C\\uA93D\\uA93E\\uA93F\\uA940\\uA941\\uA942\\uA943\\uA944\\uA945\\uA946\\uAA00\\uAA01\\uAA02\\uAA03\\uAA04\\uAA05\\uAA06\\uAA07\\uAA08\\uAA09\\uAA0A\\uAA0B\\uAA0C\\uAA0D\\uAA0E\\uAA0F\\uAA10\\uAA11\\uAA12\\uAA13\\uAA14\\uAA15\\uAA16\\uAA17\\uAA18\\uAA19\\uAA1A\\uAA1B\\uAA1C\\uAA1D\\uAA1E\\uAA1F\\uAA20\\uAA21\\uAA22\\uAA23\\uAA24\\uAA25\\uAA26\\uAA27\\uAA28\\uAA40\\uAA41\\uAA42\\uAA44\\uAA45\\uAA46\\uAA47\\uAA48\\uAA49\\uAA4A\\uAA4B\\uAC00\\uD7A3\\uF900\\uF901\\uF902\\uF903\\uF904\\uF905\\uF906\\uF907\\uF908\\uF909\\uF90A\\uF90B\\uF90C\\uF90D\\uF90E\\uF90F\\uF910\\uF911\\uF912\\uF913\\uF914\\uF915\\uF916\\uF917\\uF918\\uF919\\uF91A\\uF91B\\uF91C\\uF91D\\uF91E\\uF91F\\uF920\\uF921\\uF922\\uF923\\uF924\\uF925\\uF926\\uF927\\uF928\\uF929\\uF92A\\uF92B\\uF92C\\uF92D\\uF92E\\uF92F\\uF930\\uF931\\uF932\\uF933\\uF934\\uF935\\uF936\\uF937\\uF938\\uF939\\uF93A\\uF93B\\uF93C\\uF93D\\uF93E\\uF93F\\uF940\\uF941\\uF942\\uF943\\uF944\\uF945\\uF946\\uF947\\uF948\\uF949\\uF94A\\uF94B\\uF94C\\uF94D\\uF94E\\uF94F\\uF950\\uF951\\uF952\\uF953\\uF954\\uF955\\uF956\\uF957\\uF958\\uF959\\uF95A\\uF95B\\uF95C\\uF95D\\uF95E\\uF95F\\uF960\\uF961\\uF962\\uF963\\uF964\\uF965\\uF966\\uF967\\uF968\\uF969\\uF96A\\uF96B\\uF96C\\uF96D\\uF96E\\uF96F\\uF970\\uF971\\uF972\\uF973\\uF974\\uF975\\uF976\\uF977\\uF978\\uF979\\uF97A\\uF97B\\uF97C\\uF97D\\uF97E\\uF97F\\uF980\\uF981\\uF982\\uF983\\uF984\\uF985\\uF986\\uF987\\uF988\\uF989\\uF98A\\uF98B\\uF98C\\uF98D\\uF98E\\uF98F\\uF990\\uF991\\uF992\\uF993\\uF994\\uF995\\uF996\\uF997\\uF998\\uF999\\uF99A\\uF99B\\uF99C\\uF99D\\uF99E\\uF99F\\uF9A0\\uF9A1\\uF9A2\\uF9A3\\uF9A4\\uF9A5\\uF9A6\\uF9A7\\uF9A8\\uF9A9\\uF9AA\\uF9AB\\uF9AC\\uF9AD\\uF9AE\\uF9AF\\uF9B0\\uF9B1\\uF9B2\\uF9B3\\uF9B4\\uF9B5\\uF9B6\\uF9B7\\uF9B8\\uF9B9\\uF9BA\\uF9BB\\uF9BC\\uF9BD\\uF9BE\\uF9BF\\uF9C0\\uF9C1\\uF9C2\\uF9C3\\uF9C4\\uF9C5\\uF9C6\\uF9C7\\uF9C8\\uF9C9\\uF9CA\\uF9CB\\uF9CC\\uF9CD\\uF9CE\\uF9CF\\uF9D0\\uF9D1\\uF9D2\\uF9D3\\uF9D4\\uF9D5\\uF9D6\\uF9D7\\uF9D8\\uF9D9\\uF9DA\\uF9DB\\uF9DC\\uF9DD\\uF9DE\\uF9DF\\uF9E0\\uF9E1\\uF9E2\\uF9E3\\uF9E4\\uF9E5\\uF9E6\\uF9E7\\uF9E8\\uF9E9\\uF9EA\\uF9EB\\uF9EC\\uF9ED\\uF9EE\\uF9EF\\uF9F0\\uF9F1\\uF9F2\\uF9F3\\uF9F4\\uF9F5\\uF9F6\\uF9F7\\uF9F8\\uF9F9\\uF9FA\\uF9FB\\uF9FC\\uF9FD\\uF9FE\\uF9FF\\uFA00\\uFA01\\uFA02\\uFA03\\uFA04\\uFA05\\uFA06\\uFA07\\uFA08\\uFA09\\uFA0A\\uFA0B\\uFA0C\\uFA0D\\uFA0E\\uFA0F\\uFA10\\uFA11\\uFA12\\uFA13\\uFA14\\uFA15\\uFA16\\uFA17\\uFA18\\uFA19\\uFA1A\\uFA1B\\uFA1C\\uFA1D\\uFA1E\\uFA1F\\uFA20\\uFA21\\uFA22\\uFA23\\uFA24\\uFA25\\uFA26\\uFA27\\uFA28\\uFA29\\uFA2A\\uFA2B\\uFA2C\\uFA2D\\uFA30\\uFA31\\uFA32\\uFA33\\uFA34\\uFA35\\uFA36\\uFA37\\uFA38\\uFA39\\uFA3A\\uFA3B\\uFA3C\\uFA3D\\uFA3E\\uFA3F\\uFA40\\uFA41\\uFA42\\uFA43\\uFA44\\uFA45\\uFA46\\uFA47\\uFA48\\uFA49\\uFA4A\\uFA4B\\uFA4C\\uFA4D\\uFA4E\\uFA4F\\uFA50\\uFA51\\uFA52\\uFA53\\uFA54\\uFA55\\uFA56\\uFA57\\uFA58\\uFA59\\uFA5A\\uFA5B\\uFA5C\\uFA5D\\uFA5E\\uFA5F\\uFA60\\uFA61\\uFA62\\uFA63\\uFA64\\uFA65\\uFA66\\uFA67\\uFA68\\uFA69\\uFA6A\\uFA70\\uFA71\\uFA72\\uFA73\\uFA74\\uFA75\\uFA76\\uFA77\\uFA78\\uFA79\\uFA7A\\uFA7B\\uFA7C\\uFA7D\\uFA7E\\uFA7F\\uFA80\\uFA81\\uFA82\\uFA83\\uFA84\\uFA85\\uFA86\\uFA87\\uFA88\\uFA89\\uFA8A\\uFA8B\\uFA8C\\uFA8D\\uFA8E\\uFA8F\\uFA90\\uFA91\\uFA92\\uFA93\\uFA94\\uFA95\\uFA96\\uFA97\\uFA98\\uFA99\\uFA9A\\uFA9B\\uFA9C\\uFA9D\\uFA9E\\uFA9F\\uFAA0\\uFAA1\\uFAA2\\uFAA3\\uFAA4\\uFAA5\\uFAA6\\uFAA7\\uFAA8\\uFAA9\\uFAAA\\uFAAB\\uFAAC\\uFAAD\\uFAAE\\uFAAF\\uFAB0\\uFAB1\\uFAB2\\uFAB3\\uFAB4\\uFAB5\\uFAB6\\uFAB7\\uFAB8\\uFAB9\\uFABA\\uFABB\\uFABC\\uFABD\\uFABE\\uFABF\\uFAC0\\uFAC1\\uFAC2\\uFAC3\\uFAC4\\uFAC5\\uFAC6\\uFAC7\\uFAC8\\uFAC9\\uFACA\\uFACB\\uFACC\\uFACD\\uFACE\\uFACF\\uFAD0\\uFAD1\\uFAD2\\uFAD3\\uFAD4\\uFAD5\\uFAD6\\uFAD7\\uFAD8\\uFAD9\\uFB1D\\uFB1F\\uFB20\\uFB21\\uFB22\\uFB23\\uFB24\\uFB25\\uFB26\\uFB27\\uFB28\\uFB2A\\uFB2B\\uFB2C\\uFB2D\\uFB2E\\uFB2F\\uFB30\\uFB31\\uFB32\\uFB33\\uFB34\\uFB35\\uFB36\\uFB38\\uFB39\\uFB3A\\uFB3B\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46\\uFB47\\uFB48\\uFB49\\uFB4A\\uFB4B\\uFB4C\\uFB4D\\uFB4E\\uFB4F\\uFB50\\uFB51\\uFB52\\uFB53\\uFB54\\uFB55\\uFB56\\uFB57\\uFB58\\uFB59\\uFB5A\\uFB5B\\uFB5C\\uFB5D\\uFB5E\\uFB5F\\uFB60\\uFB61\\uFB62\\uFB63\\uFB64\\uFB65\\uFB66\\uFB67\\uFB68\\uFB69\\uFB6A\\uFB6B\\uFB6C\\uFB6D\\uFB6E\\uFB6F\\uFB70\\uFB71\\uFB72\\uFB73\\uFB74\\uFB75\\uFB76\\uFB77\\uFB78\\uFB79\\uFB7A\\uFB7B\\uFB7C\\uFB7D\\uFB7E\\uFB7F\\uFB80\\uFB81\\uFB82\\uFB83\\uFB84\\uFB85\\uFB86\\uFB87\\uFB88\\uFB89\\uFB8A\\uFB8B\\uFB8C\\uFB8D\\uFB8E\\uFB8F\\uFB90\\uFB91\\uFB92\\uFB93\\uFB94\\uFB95\\uFB96\\uFB97\\uFB98\\uFB99\\uFB9A\\uFB9B\\uFB9C\\uFB9D\\uFB9E\\uFB9F\\uFBA0\\uFBA1\\uFBA2\\uFBA3\\uFBA4\\uFBA5\\uFBA6\\uFBA7\\uFBA8\\uFBA9\\uFBAA\\uFBAB\\uFBAC\\uFBAD\\uFBAE\\uFBAF\\uFBB0\\uFBB1\\uFBD3\\uFBD4\\uFBD5\\uFBD6\\uFBD7\\uFBD8\\uFBD9\\uFBDA\\uFBDB\\uFBDC\\uFBDD\\uFBDE\\uFBDF\\uFBE0\\uFBE1\\uFBE2\\uFBE3\\uFBE4\\uFBE5\\uFBE6\\uFBE7\\uFBE8\\uFBE9\\uFBEA\\uFBEB\\uFBEC\\uFBED\\uFBEE\\uFBEF\\uFBF0\\uFBF1\\uFBF2\\uFBF3\\uFBF4\\uFBF5\\uFBF6\\uFBF7\\uFBF8\\uFBF9\\uFBFA\\uFBFB\\uFBFC\\uFBFD\\uFBFE\\uFBFF\\uFC00\\uFC01\\uFC02\\uFC03\\uFC04\\uFC05\\uFC06\\uFC07\\uFC08\\uFC09\\uFC0A\\uFC0B\\uFC0C\\uFC0D\\uFC0E\\uFC0F\\uFC10\\uFC11\\uFC12\\uFC13\\uFC14\\uFC15\\uFC16\\uFC17\\uFC18\\uFC19\\uFC1A\\uFC1B\\uFC1C\\uFC1D\\uFC1E\\uFC1F\\uFC20\\uFC21\\uFC22\\uFC23\\uFC24\\uFC25\\uFC26\\uFC27\\uFC28\\uFC29\\uFC2A\\uFC2B\\uFC2C\\uFC2D\\uFC2E\\uFC2F\\uFC30\\uFC31\\uFC32\\uFC33\\uFC34\\uFC35\\uFC36\\uFC37\\uFC38\\uFC39\\uFC3A\\uFC3B\\uFC3C\\uFC3D\\uFC3E\\uFC3F\\uFC40\\uFC41\\uFC42\\uFC43\\uFC44\\uFC45\\uFC46\\uFC47\\uFC48\\uFC49\\uFC4A\\uFC4B\\uFC4C\\uFC4D\\uFC4E\\uFC4F\\uFC50\\uFC51\\uFC52\\uFC53\\uFC54\\uFC55\\uFC56\\uFC57\\uFC58\\uFC59\\uFC5A\\uFC5B\\uFC5C\\uFC5D\\uFC5E\\uFC5F\\uFC60\\uFC61\\uFC62\\uFC63\\uFC64\\uFC65\\uFC66\\uFC67\\uFC68\\uFC69\\uFC6A\\uFC6B\\uFC6C\\uFC6D\\uFC6E\\uFC6F\\uFC70\\uFC71\\uFC72\\uFC73\\uFC74\\uFC75\\uFC76\\uFC77\\uFC78\\uFC79\\uFC7A\\uFC7B\\uFC7C\\uFC7D\\uFC7E\\uFC7F\\uFC80\\uFC81\\uFC82\\uFC83\\uFC84\\uFC85\\uFC86\\uFC87\\uFC88\\uFC89\\uFC8A\\uFC8B\\uFC8C\\uFC8D\\uFC8E\\uFC8F\\uFC90\\uFC91\\uFC92\\uFC93\\uFC94\\uFC95\\uFC96\\uFC97\\uFC98\\uFC99\\uFC9A\\uFC9B\\uFC9C\\uFC9D\\uFC9E\\uFC9F\\uFCA0\\uFCA1\\uFCA2\\uFCA3\\uFCA4\\uFCA5\\uFCA6\\uFCA7\\uFCA8\\uFCA9\\uFCAA\\uFCAB\\uFCAC\\uFCAD\\uFCAE\\uFCAF\\uFCB0\\uFCB1\\uFCB2\\uFCB3\\uFCB4\\uFCB5\\uFCB6\\uFCB7\\uFCB8\\uFCB9\\uFCBA\\uFCBB\\uFCBC\\uFCBD\\uFCBE\\uFCBF\\uFCC0\\uFCC1\\uFCC2\\uFCC3\\uFCC4\\uFCC5\\uFCC6\\uFCC7\\uFCC8\\uFCC9\\uFCCA\\uFCCB\\uFCCC\\uFCCD\\uFCCE\\uFCCF\\uFCD0\\uFCD1\\uFCD2\\uFCD3\\uFCD4\\uFCD5\\uFCD6\\uFCD7\\uFCD8\\uFCD9\\uFCDA\\uFCDB\\uFCDC\\uFCDD\\uFCDE\\uFCDF\\uFCE0\\uFCE1\\uFCE2\\uFCE3\\uFCE4\\uFCE5\\uFCE6\\uFCE7\\uFCE8\\uFCE9\\uFCEA\\uFCEB\\uFCEC\\uFCED\\uFCEE\\uFCEF\\uFCF0\\uFCF1\\uFCF2\\uFCF3\\uFCF4\\uFCF5\\uFCF6\\uFCF7\\uFCF8\\uFCF9\\uFCFA\\uFCFB\\uFCFC\\uFCFD\\uFCFE\\uFCFF\\uFD00\\uFD01\\uFD02\\uFD03\\uFD04\\uFD05\\uFD06\\uFD07\\uFD08\\uFD09\\uFD0A\\uFD0B\\uFD0C\\uFD0D\\uFD0E\\uFD0F\\uFD10\\uFD11\\uFD12\\uFD13\\uFD14\\uFD15\\uFD16\\uFD17\\uFD18\\uFD19\\uFD1A\\uFD1B\\uFD1C\\uFD1D\\uFD1E\\uFD1F\\uFD20\\uFD21\\uFD22\\uFD23\\uFD24\\uFD25\\uFD26\\uFD27\\uFD28\\uFD29\\uFD2A\\uFD2B\\uFD2C\\uFD2D\\uFD2E\\uFD2F\\uFD30\\uFD31\\uFD32\\uFD33\\uFD34\\uFD35\\uFD36\\uFD37\\uFD38\\uFD39\\uFD3A\\uFD3B\\uFD3C\\uFD3D\\uFD50\\uFD51\\uFD52\\uFD53\\uFD54\\uFD55\\uFD56\\uFD57\\uFD58\\uFD59\\uFD5A\\uFD5B\\uFD5C\\uFD5D\\uFD5E\\uFD5F\\uFD60\\uFD61\\uFD62\\uFD63\\uFD64\\uFD65\\uFD66\\uFD67\\uFD68\\uFD69\\uFD6A\\uFD6B\\uFD6C\\uFD6D\\uFD6E\\uFD6F\\uFD70\\uFD71\\uFD72\\uFD73\\uFD74\\uFD75\\uFD76\\uFD77\\uFD78\\uFD79\\uFD7A\\uFD7B\\uFD7C\\uFD7D\\uFD7E\\uFD7F\\uFD80\\uFD81\\uFD82\\uFD83\\uFD84\\uFD85\\uFD86\\uFD87\\uFD88\\uFD89\\uFD8A\\uFD8B\\uFD8C\\uFD8D\\uFD8E\\uFD8F\\uFD92\\uFD93\\uFD94\\uFD95\\uFD96\\uFD97\\uFD98\\uFD99\\uFD9A\\uFD9B\\uFD9C\\uFD9D\\uFD9E\\uFD9F\\uFDA0\\uFDA1\\uFDA2\\uFDA3\\uFDA4\\uFDA5\\uFDA6\\uFDA7\\uFDA8\\uFDA9\\uFDAA\\uFDAB\\uFDAC\\uFDAD\\uFDAE\\uFDAF\\uFDB0\\uFDB1\\uFDB2\\uFDB3\\uFDB4\\uFDB5\\uFDB6\\uFDB7\\uFDB8\\uFDB9\\uFDBA\\uFDBB\\uFDBC\\uFDBD\\uFDBE\\uFDBF\\uFDC0\\uFDC1\\uFDC2\\uFDC3\\uFDC4\\uFDC5\\uFDC6\\uFDC7\\uFDF0\\uFDF1\\uFDF2\\uFDF3\\uFDF4\\uFDF5\\uFDF6\\uFDF7\\uFDF8\\uFDF9\\uFDFA\\uFDFB\\uFE70\\uFE71\\uFE72\\uFE73\\uFE74\\uFE76\\uFE77\\uFE78\\uFE79\\uFE7A\\uFE7B\\uFE7C\\uFE7D\\uFE7E\\uFE7F\\uFE80\\uFE81\\uFE82\\uFE83\\uFE84\\uFE85\\uFE86\\uFE87\\uFE88\\uFE89\\uFE8A\\uFE8B\\uFE8C\\uFE8D\\uFE8E\\uFE8F\\uFE90\\uFE91\\uFE92\\uFE93\\uFE94\\uFE95\\uFE96\\uFE97\\uFE98\\uFE99\\uFE9A\\uFE9B\\uFE9C\\uFE9D\\uFE9E\\uFE9F\\uFEA0\\uFEA1\\uFEA2\\uFEA3\\uFEA4\\uFEA5\\uFEA6\\uFEA7\\uFEA8\\uFEA9\\uFEAA\\uFEAB\\uFEAC\\uFEAD\\uFEAE\\uFEAF\\uFEB0\\uFEB1\\uFEB2\\uFEB3\\uFEB4\\uFEB5\\uFEB6\\uFEB7\\uFEB8\\uFEB9\\uFEBA\\uFEBB\\uFEBC\\uFEBD\\uFEBE\\uFEBF\\uFEC0\\uFEC1\\uFEC2\\uFEC3\\uFEC4\\uFEC5\\uFEC6\\uFEC7\\uFEC8\\uFEC9\\uFECA\\uFECB\\uFECC\\uFECD\\uFECE\\uFECF\\uFED0\\uFED1\\uFED2\\uFED3\\uFED4\\uFED5\\uFED6\\uFED7\\uFED8\\uFED9\\uFEDA\\uFEDB\\uFEDC\\uFEDD\\uFEDE\\uFEDF\\uFEE0\\uFEE1\\uFEE2\\uFEE3\\uFEE4\\uFEE5\\uFEE6\\uFEE7\\uFEE8\\uFEE9\\uFEEA\\uFEEB\\uFEEC\\uFEED\\uFEEE\\uFEEF\\uFEF0\\uFEF1\\uFEF2\\uFEF3\\uFEF4\\uFEF5\\uFEF6\\uFEF7\\uFEF8\\uFEF9\\uFEFA\\uFEFB\\uFEFC\\uFF66\\uFF67\\uFF68\\uFF69\\uFF6A\\uFF6B\\uFF6C\\uFF6D\\uFF6E\\uFF6F\\uFF71\\uFF72\\uFF73\\uFF74\\uFF75\\uFF76\\uFF77\\uFF78\\uFF79\\uFF7A\\uFF7B\\uFF7C\\uFF7D\\uFF7E\\uFF7F\\uFF80\\uFF81\\uFF82\\uFF83\\uFF84\\uFF85\\uFF86\\uFF87\\uFF88\\uFF89\\uFF8A\\uFF8B\\uFF8C\\uFF8D\\uFF8E\\uFF8F\\uFF90\\uFF91\\uFF92\\uFF93\\uFF94\\uFF95\\uFF96\\uFF97\\uFF98\\uFF99\\uFF9A\\uFF9B\\uFF9C\\uFF9D\\uFFA0\\uFFA1\\uFFA2\\uFFA3\\uFFA4\\uFFA5\\uFFA6\\uFFA7\\uFFA8\\uFFA9\\uFFAA\\uFFAB\\uFFAC\\uFFAD\\uFFAE\\uFFAF\\uFFB0\\uFFB1\\uFFB2\\uFFB3\\uFFB4\\uFFB5\\uFFB6\\uFFB7\\uFFB8\\uFFB9\\uFFBA\\uFFBB\\uFFBC\\uFFBD\\uFFBE\\uFFC2\\uFFC3\\uFFC4\\uFFC5\\uFFC6\\uFFC7\\uFFCA\\uFFCB\\uFFCC\\uFFCD\\uFFCE\\uFFCF\\uFFD2\\uFFD3\\uFFD4\\uFFD5\\uFFD6\\uFFD7\\uFFDA\\uFFDB\\uFFDC]", description: "[\\u01BB\\u01C0\\u01C1\\u01C2\\u01C3\\u0294\\u05D0\\u05D1\\u05D2\\u05D3\\u05D4\\u05D5\\u05D6\\u05D7\\u05D8\\u05D9\\u05DA\\u05DB\\u05DC\\u05DD\\u05DE\\u05DF\\u05E0\\u05E1\\u05E2\\u05E3\\u05E4\\u05E5\\u05E6\\u05E7\\u05E8\\u05E9\\u05EA\\u05F0\\u05F1\\u05F2\\u0621\\u0622\\u0623\\u0624\\u0625\\u0626\\u0627\\u0628\\u0629\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u0630\\u0631\\u0632\\u0633\\u0634\\u0635\\u0636\\u0637\\u0638\\u0639\\u063A\\u063B\\u063C\\u063D\\u063E\\u063F\\u0641\\u0642\\u0643\\u0644\\u0645\\u0646\\u0647\\u0648\\u0649\\u064A\\u066E\\u066F\\u0671\\u0672\\u0673\\u0674\\u0675\\u0676\\u0677\\u0678\\u0679\\u067A\\u067B\\u067C\\u067D\\u067E\\u067F\\u0680\\u0681\\u0682\\u0683\\u0684\\u0685\\u0686\\u0687\\u0688\\u0689\\u068A\\u068B\\u068C\\u068D\\u068E\\u068F\\u0690\\u0691\\u0692\\u0693\\u0694\\u0695\\u0696\\u0697\\u0698\\u0699\\u069A\\u069B\\u069C\\u069D\\u069E\\u069F\\u06A0\\u06A1\\u06A2\\u06A3\\u06A4\\u06A5\\u06A6\\u06A7\\u06A8\\u06A9\\u06AA\\u06AB\\u06AC\\u06AD\\u06AE\\u06AF\\u06B0\\u06B1\\u06B2\\u06B3\\u06B4\\u06B5\\u06B6\\u06B7\\u06B8\\u06B9\\u06BA\\u06BB\\u06BC\\u06BD\\u06BE\\u06BF\\u06C0\\u06C1\\u06C2\\u06C3\\u06C4\\u06C5\\u06C6\\u06C7\\u06C8\\u06C9\\u06CA\\u06CB\\u06CC\\u06CD\\u06CE\\u06CF\\u06D0\\u06D1\\u06D2\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA\\u06FB\\u06FC\\u06FF\\u0710\\u0712\\u0713\\u0714\\u0715\\u0716\\u0717\\u0718\\u0719\\u071A\\u071B\\u071C\\u071D\\u071E\\u071F\\u0720\\u0721\\u0722\\u0723\\u0724\\u0725\\u0726\\u0727\\u0728\\u0729\\u072A\\u072B\\u072C\\u072D\\u072E\\u072F\\u074D\\u074E\\u074F\\u0750\\u0751\\u0752\\u0753\\u0754\\u0755\\u0756\\u0757\\u0758\\u0759\\u075A\\u075B\\u075C\\u075D\\u075E\\u075F\\u0760\\u0761\\u0762\\u0763\\u0764\\u0765\\u0766\\u0767\\u0768\\u0769\\u076A\\u076B\\u076C\\u076D\\u076E\\u076F\\u0770\\u0771\\u0772\\u0773\\u0774\\u0775\\u0776\\u0777\\u0778\\u0779\\u077A\\u077B\\u077C\\u077D\\u077E\\u077F\\u0780\\u0781\\u0782\\u0783\\u0784\\u0785\\u0786\\u0787\\u0788\\u0789\\u078A\\u078B\\u078C\\u078D\\u078E\\u078F\\u0790\\u0791\\u0792\\u0793\\u0794\\u0795\\u0796\\u0797\\u0798\\u0799\\u079A\\u079B\\u079C\\u079D\\u079E\\u079F\\u07A0\\u07A1\\u07A2\\u07A3\\u07A4\\u07A5\\u07B1\\u07CA\\u07CB\\u07CC\\u07CD\\u07CE\\u07CF\\u07D0\\u07D1\\u07D2\\u07D3\\u07D4\\u07D5\\u07D6\\u07D7\\u07D8\\u07D9\\u07DA\\u07DB\\u07DC\\u07DD\\u07DE\\u07DF\\u07E0\\u07E1\\u07E2\\u07E3\\u07E4\\u07E5\\u07E6\\u07E7\\u07E8\\u07E9\\u07EA\\u0904\\u0905\\u0906\\u0907\\u0908\\u0909\\u090A\\u090B\\u090C\\u090D\\u090E\\u090F\\u0910\\u0911\\u0912\\u0913\\u0914\\u0915\\u0916\\u0917\\u0918\\u0919\\u091A\\u091B\\u091C\\u091D\\u091E\\u091F\\u0920\\u0921\\u0922\\u0923\\u0924\\u0925\\u0926\\u0927\\u0928\\u0929\\u092A\\u092B\\u092C\\u092D\\u092E\\u092F\\u0930\\u0931\\u0932\\u0933\\u0934\\u0935\\u0936\\u0937\\u0938\\u0939\\u093D\\u0950\\u0958\\u0959\\u095A\\u095B\\u095C\\u095D\\u095E\\u095F\\u0960\\u0961\\u0972\\u097B\\u097C\\u097D\\u097E\\u097F\\u0985\\u0986\\u0987\\u0988\\u0989\\u098A\\u098B\\u098C\\u098F\\u0990\\u0993\\u0994\\u0995\\u0996\\u0997\\u0998\\u0999\\u099A\\u099B\\u099C\\u099D\\u099E\\u099F\\u09A0\\u09A1\\u09A2\\u09A3\\u09A4\\u09A5\\u09A6\\u09A7\\u09A8\\u09AA\\u09AB\\u09AC\\u09AD\\u09AE\\u09AF\\u09B0\\u09B2\\u09B6\\u09B7\\u09B8\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF\\u09E0\\u09E1\\u09F0\\u09F1\\u0A05\\u0A06\\u0A07\\u0A08\\u0A09\\u0A0A\\u0A0F\\u0A10\\u0A13\\u0A14\\u0A15\\u0A16\\u0A17\\u0A18\\u0A19\\u0A1A\\u0A1B\\u0A1C\\u0A1D\\u0A1E\\u0A1F\\u0A20\\u0A21\\u0A22\\u0A23\\u0A24\\u0A25\\u0A26\\u0A27\\u0A28\\u0A2A\\u0A2B\\u0A2C\\u0A2D\\u0A2E\\u0A2F\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59\\u0A5A\\u0A5B\\u0A5C\\u0A5E\\u0A72\\u0A73\\u0A74\\u0A85\\u0A86\\u0A87\\u0A88\\u0A89\\u0A8A\\u0A8B\\u0A8C\\u0A8D\\u0A8F\\u0A90\\u0A91\\u0A93\\u0A94\\u0A95\\u0A96\\u0A97\\u0A98\\u0A99\\u0A9A\\u0A9B\\u0A9C\\u0A9D\\u0A9E\\u0A9F\\u0AA0\\u0AA1\\u0AA2\\u0AA3\\u0AA4\\u0AA5\\u0AA6\\u0AA7\\u0AA8\\u0AAA\\u0AAB\\u0AAC\\u0AAD\\u0AAE\\u0AAF\\u0AB0\\u0AB2\\u0AB3\\u0AB5\\u0AB6\\u0AB7\\u0AB8\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05\\u0B06\\u0B07\\u0B08\\u0B09\\u0B0A\\u0B0B\\u0B0C\\u0B0F\\u0B10\\u0B13\\u0B14\\u0B15\\u0B16\\u0B17\\u0B18\\u0B19\\u0B1A\\u0B1B\\u0B1C\\u0B1D\\u0B1E\\u0B1F\\u0B20\\u0B21\\u0B22\\u0B23\\u0B24\\u0B25\\u0B26\\u0B27\\u0B28\\u0B2A\\u0B2B\\u0B2C\\u0B2D\\u0B2E\\u0B2F\\u0B30\\u0B32\\u0B33\\u0B35\\u0B36\\u0B37\\u0B38\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F\\u0B60\\u0B61\\u0B71\\u0B83\\u0B85\\u0B86\\u0B87\\u0B88\\u0B89\\u0B8A\\u0B8E\\u0B8F\\u0B90\\u0B92\\u0B93\\u0B94\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8\\u0BA9\\u0BAA\\u0BAE\\u0BAF\\u0BB0\\u0BB1\\u0BB2\\u0BB3\\u0BB4\\u0BB5\\u0BB6\\u0BB7\\u0BB8\\u0BB9\\u0BD0\\u0C05\\u0C06\\u0C07\\u0C08\\u0C09\\u0C0A\\u0C0B\\u0C0C\\u0C0E\\u0C0F\\u0C10\\u0C12\\u0C13\\u0C14\\u0C15\\u0C16\\u0C17\\u0C18\\u0C19\\u0C1A\\u0C1B\\u0C1C\\u0C1D\\u0C1E\\u0C1F\\u0C20\\u0C21\\u0C22\\u0C23\\u0C24\\u0C25\\u0C26\\u0C27\\u0C28\\u0C2A\\u0C2B\\u0C2C\\u0C2D\\u0C2E\\u0C2F\\u0C30\\u0C31\\u0C32\\u0C33\\u0C35\\u0C36\\u0C37\\u0C38\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85\\u0C86\\u0C87\\u0C88\\u0C89\\u0C8A\\u0C8B\\u0C8C\\u0C8E\\u0C8F\\u0C90\\u0C92\\u0C93\\u0C94\\u0C95\\u0C96\\u0C97\\u0C98\\u0C99\\u0C9A\\u0C9B\\u0C9C\\u0C9D\\u0C9E\\u0C9F\\u0CA0\\u0CA1\\u0CA2\\u0CA3\\u0CA4\\u0CA5\\u0CA6\\u0CA7\\u0CA8\\u0CAA\\u0CAB\\u0CAC\\u0CAD\\u0CAE\\u0CAF\\u0CB0\\u0CB1\\u0CB2\\u0CB3\\u0CB5\\u0CB6\\u0CB7\\u0CB8\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0D05\\u0D06\\u0D07\\u0D08\\u0D09\\u0D0A\\u0D0B\\u0D0C\\u0D0E\\u0D0F\\u0D10\\u0D12\\u0D13\\u0D14\\u0D15\\u0D16\\u0D17\\u0D18\\u0D19\\u0D1A\\u0D1B\\u0D1C\\u0D1D\\u0D1E\\u0D1F\\u0D20\\u0D21\\u0D22\\u0D23\\u0D24\\u0D25\\u0D26\\u0D27\\u0D28\\u0D2A\\u0D2B\\u0D2C\\u0D2D\\u0D2E\\u0D2F\\u0D30\\u0D31\\u0D32\\u0D33\\u0D34\\u0D35\\u0D36\\u0D37\\u0D38\\u0D39\\u0D3D\\u0D60\\u0D61\\u0D7A\\u0D7B\\u0D7C\\u0D7D\\u0D7E\\u0D7F\\u0D85\\u0D86\\u0D87\\u0D88\\u0D89\\u0D8A\\u0D8B\\u0D8C\\u0D8D\\u0D8E\\u0D8F\\u0D90\\u0D91\\u0D92\\u0D93\\u0D94\\u0D95\\u0D96\\u0D9A\\u0D9B\\u0D9C\\u0D9D\\u0D9E\\u0D9F\\u0DA0\\u0DA1\\u0DA2\\u0DA3\\u0DA4\\u0DA5\\u0DA6\\u0DA7\\u0DA8\\u0DA9\\u0DAA\\u0DAB\\u0DAC\\u0DAD\\u0DAE\\u0DAF\\u0DB0\\u0DB1\\u0DB3\\u0DB4\\u0DB5\\u0DB6\\u0DB7\\u0DB8\\u0DB9\\u0DBA\\u0DBB\\u0DBD\\u0DC0\\u0DC1\\u0DC2\\u0DC3\\u0DC4\\u0DC5\\u0DC6\\u0E01\\u0E02\\u0E03\\u0E04\\u0E05\\u0E06\\u0E07\\u0E08\\u0E09\\u0E0A\\u0E0B\\u0E0C\\u0E0D\\u0E0E\\u0E0F\\u0E10\\u0E11\\u0E12\\u0E13\\u0E14\\u0E15\\u0E16\\u0E17\\u0E18\\u0E19\\u0E1A\\u0E1B\\u0E1C\\u0E1D\\u0E1E\\u0E1F\\u0E20\\u0E21\\u0E22\\u0E23\\u0E24\\u0E25\\u0E26\\u0E27\\u0E28\\u0E29\\u0E2A\\u0E2B\\u0E2C\\u0E2D\\u0E2E\\u0E2F\\u0E30\\u0E32\\u0E33\\u0E40\\u0E41\\u0E42\\u0E43\\u0E44\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94\\u0E95\\u0E96\\u0E97\\u0E99\\u0E9A\\u0E9B\\u0E9C\\u0E9D\\u0E9E\\u0E9F\\u0EA1\\u0EA2\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD\\u0EAE\\u0EAF\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0\\u0EC1\\u0EC2\\u0EC3\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40\\u0F41\\u0F42\\u0F43\\u0F44\\u0F45\\u0F46\\u0F47\\u0F49\\u0F4A\\u0F4B\\u0F4C\\u0F4D\\u0F4E\\u0F4F\\u0F50\\u0F51\\u0F52\\u0F53\\u0F54\\u0F55\\u0F56\\u0F57\\u0F58\\u0F59\\u0F5A\\u0F5B\\u0F5C\\u0F5D\\u0F5E\\u0F5F\\u0F60\\u0F61\\u0F62\\u0F63\\u0F64\\u0F65\\u0F66\\u0F67\\u0F68\\u0F69\\u0F6A\\u0F6B\\u0F6C\\u0F88\\u0F89\\u0F8A\\u0F8B\\u1000\\u1001\\u1002\\u1003\\u1004\\u1005\\u1006\\u1007\\u1008\\u1009\\u100A\\u100B\\u100C\\u100D\\u100E\\u100F\\u1010\\u1011\\u1012\\u1013\\u1014\\u1015\\u1016\\u1017\\u1018\\u1019\\u101A\\u101B\\u101C\\u101D\\u101E\\u101F\\u1020\\u1021\\u1022\\u1023\\u1024\\u1025\\u1026\\u1027\\u1028\\u1029\\u102A\\u103F\\u1050\\u1051\\u1052\\u1053\\u1054\\u1055\\u105A\\u105B\\u105C\\u105D\\u1061\\u1065\\u1066\\u106E\\u106F\\u1070\\u1075\\u1076\\u1077\\u1078\\u1079\\u107A\\u107B\\u107C\\u107D\\u107E\\u107F\\u1080\\u1081\\u108E\\u10D0\\u10D1\\u10D2\\u10D3\\u10D4\\u10D5\\u10D6\\u10D7\\u10D8\\u10D9\\u10DA\\u10DB\\u10DC\\u10DD\\u10DE\\u10DF\\u10E0\\u10E1\\u10E2\\u10E3\\u10E4\\u10E5\\u10E6\\u10E7\\u10E8\\u10E9\\u10EA\\u10EB\\u10EC\\u10ED\\u10EE\\u10EF\\u10F0\\u10F1\\u10F2\\u10F3\\u10F4\\u10F5\\u10F6\\u10F7\\u10F8\\u10F9\\u10FA\\u1100\\u1101\\u1102\\u1103\\u1104\\u1105\\u1106\\u1107\\u1108\\u1109\\u110A\\u110B\\u110C\\u110D\\u110E\\u110F\\u1110\\u1111\\u1112\\u1113\\u1114\\u1115\\u1116\\u1117\\u1118\\u1119\\u111A\\u111B\\u111C\\u111D\\u111E\\u111F\\u1120\\u1121\\u1122\\u1123\\u1124\\u1125\\u1126\\u1127\\u1128\\u1129\\u112A\\u112B\\u112C\\u112D\\u112E\\u112F\\u1130\\u1131\\u1132\\u1133\\u1134\\u1135\\u1136\\u1137\\u1138\\u1139\\u113A\\u113B\\u113C\\u113D\\u113E\\u113F\\u1140\\u1141\\u1142\\u1143\\u1144\\u1145\\u1146\\u1147\\u1148\\u1149\\u114A\\u114B\\u114C\\u114D\\u114E\\u114F\\u1150\\u1151\\u1152\\u1153\\u1154\\u1155\\u1156\\u1157\\u1158\\u1159\\u115F\\u1160\\u1161\\u1162\\u1163\\u1164\\u1165\\u1166\\u1167\\u1168\\u1169\\u116A\\u116B\\u116C\\u116D\\u116E\\u116F\\u1170\\u1171\\u1172\\u1173\\u1174\\u1175\\u1176\\u1177\\u1178\\u1179\\u117A\\u117B\\u117C\\u117D\\u117E\\u117F\\u1180\\u1181\\u1182\\u1183\\u1184\\u1185\\u1186\\u1187\\u1188\\u1189\\u118A\\u118B\\u118C\\u118D\\u118E\\u118F\\u1190\\u1191\\u1192\\u1193\\u1194\\u1195\\u1196\\u1197\\u1198\\u1199\\u119A\\u119B\\u119C\\u119D\\u119E\\u119F\\u11A0\\u11A1\\u11A2\\u11A8\\u11A9\\u11AA\\u11AB\\u11AC\\u11AD\\u11AE\\u11AF\\u11B0\\u11B1\\u11B2\\u11B3\\u11B4\\u11B5\\u11B6\\u11B7\\u11B8\\u11B9\\u11BA\\u11BB\\u11BC\\u11BD\\u11BE\\u11BF\\u11C0\\u11C1\\u11C2\\u11C3\\u11C4\\u11C5\\u11C6\\u11C7\\u11C8\\u11C9\\u11CA\\u11CB\\u11CC\\u11CD\\u11CE\\u11CF\\u11D0\\u11D1\\u11D2\\u11D3\\u11D4\\u11D5\\u11D6\\u11D7\\u11D8\\u11D9\\u11DA\\u11DB\\u11DC\\u11DD\\u11DE\\u11DF\\u11E0\\u11E1\\u11E2\\u11E3\\u11E4\\u11E5\\u11E6\\u11E7\\u11E8\\u11E9\\u11EA\\u11EB\\u11EC\\u11ED\\u11EE\\u11EF\\u11F0\\u11F1\\u11F2\\u11F3\\u11F4\\u11F5\\u11F6\\u11F7\\u11F8\\u11F9\\u1200\\u1201\\u1202\\u1203\\u1204\\u1205\\u1206\\u1207\\u1208\\u1209\\u120A\\u120B\\u120C\\u120D\\u120E\\u120F\\u1210\\u1211\\u1212\\u1213\\u1214\\u1215\\u1216\\u1217\\u1218\\u1219\\u121A\\u121B\\u121C\\u121D\\u121E\\u121F\\u1220\\u1221\\u1222\\u1223\\u1224\\u1225\\u1226\\u1227\\u1228\\u1229\\u122A\\u122B\\u122C\\u122D\\u122E\\u122F\\u1230\\u1231\\u1232\\u1233\\u1234\\u1235\\u1236\\u1237\\u1238\\u1239\\u123A\\u123B\\u123C\\u123D\\u123E\\u123F\\u1240\\u1241\\u1242\\u1243\\u1244\\u1245\\u1246\\u1247\\u1248\\u124A\\u124B\\u124C\\u124D\\u1250\\u1251\\u1252\\u1253\\u1254\\u1255\\u1256\\u1258\\u125A\\u125B\\u125C\\u125D\\u1260\\u1261\\u1262\\u1263\\u1264\\u1265\\u1266\\u1267\\u1268\\u1269\\u126A\\u126B\\u126C\\u126D\\u126E\\u126F\\u1270\\u1271\\u1272\\u1273\\u1274\\u1275\\u1276\\u1277\\u1278\\u1279\\u127A\\u127B\\u127C\\u127D\\u127E\\u127F\\u1280\\u1281\\u1282\\u1283\\u1284\\u1285\\u1286\\u1287\\u1288\\u128A\\u128B\\u128C\\u128D\\u1290\\u1291\\u1292\\u1293\\u1294\\u1295\\u1296\\u1297\\u1298\\u1299\\u129A\\u129B\\u129C\\u129D\\u129E\\u129F\\u12A0\\u12A1\\u12A2\\u12A3\\u12A4\\u12A5\\u12A6\\u12A7\\u12A8\\u12A9\\u12AA\\u12AB\\u12AC\\u12AD\\u12AE\\u12AF\\u12B0\\u12B2\\u12B3\\u12B4\\u12B5\\u12B8\\u12B9\\u12BA\\u12BB\\u12BC\\u12BD\\u12BE\\u12C0\\u12C2\\u12C3\\u12C4\\u12C5\\u12C8\\u12C9\\u12CA\\u12CB\\u12CC\\u12CD\\u12CE\\u12CF\\u12D0\\u12D1\\u12D2\\u12D3\\u12D4\\u12D5\\u12D6\\u12D8\\u12D9\\u12DA\\u12DB\\u12DC\\u12DD\\u12DE\\u12DF\\u12E0\\u12E1\\u12E2\\u12E3\\u12E4\\u12E5\\u12E6\\u12E7\\u12E8\\u12E9\\u12EA\\u12EB\\u12EC\\u12ED\\u12EE\\u12EF\\u12F0\\u12F1\\u12F2\\u12F3\\u12F4\\u12F5\\u12F6\\u12F7\\u12F8\\u12F9\\u12FA\\u12FB\\u12FC\\u12FD\\u12FE\\u12FF\\u1300\\u1301\\u1302\\u1303\\u1304\\u1305\\u1306\\u1307\\u1308\\u1309\\u130A\\u130B\\u130C\\u130D\\u130E\\u130F\\u1310\\u1312\\u1313\\u1314\\u1315\\u1318\\u1319\\u131A\\u131B\\u131C\\u131D\\u131E\\u131F\\u1320\\u1321\\u1322\\u1323\\u1324\\u1325\\u1326\\u1327\\u1328\\u1329\\u132A\\u132B\\u132C\\u132D\\u132E\\u132F\\u1330\\u1331\\u1332\\u1333\\u1334\\u1335\\u1336\\u1337\\u1338\\u1339\\u133A\\u133B\\u133C\\u133D\\u133E\\u133F\\u1340\\u1341\\u1342\\u1343\\u1344\\u1345\\u1346\\u1347\\u1348\\u1349\\u134A\\u134B\\u134C\\u134D\\u134E\\u134F\\u1350\\u1351\\u1352\\u1353\\u1354\\u1355\\u1356\\u1357\\u1358\\u1359\\u135A\\u1380\\u1381\\u1382\\u1383\\u1384\\u1385\\u1386\\u1387\\u1388\\u1389\\u138A\\u138B\\u138C\\u138D\\u138E\\u138F\\u13A0\\u13A1\\u13A2\\u13A3\\u13A4\\u13A5\\u13A6\\u13A7\\u13A8\\u13A9\\u13AA\\u13AB\\u13AC\\u13AD\\u13AE\\u13AF\\u13B0\\u13B1\\u13B2\\u13B3\\u13B4\\u13B5\\u13B6\\u13B7\\u13B8\\u13B9\\u13BA\\u13BB\\u13BC\\u13BD\\u13BE\\u13BF\\u13C0\\u13C1\\u13C2\\u13C3\\u13C4\\u13C5\\u13C6\\u13C7\\u13C8\\u13C9\\u13CA\\u13CB\\u13CC\\u13CD\\u13CE\\u13CF\\u13D0\\u13D1\\u13D2\\u13D3\\u13D4\\u13D5\\u13D6\\u13D7\\u13D8\\u13D9\\u13DA\\u13DB\\u13DC\\u13DD\\u13DE\\u13DF\\u13E0\\u13E1\\u13E2\\u13E3\\u13E4\\u13E5\\u13E6\\u13E7\\u13E8\\u13E9\\u13EA\\u13EB\\u13EC\\u13ED\\u13EE\\u13EF\\u13F0\\u13F1\\u13F2\\u13F3\\u13F4\\u1401\\u1402\\u1403\\u1404\\u1405\\u1406\\u1407\\u1408\\u1409\\u140A\\u140B\\u140C\\u140D\\u140E\\u140F\\u1410\\u1411\\u1412\\u1413\\u1414\\u1415\\u1416\\u1417\\u1418\\u1419\\u141A\\u141B\\u141C\\u141D\\u141E\\u141F\\u1420\\u1421\\u1422\\u1423\\u1424\\u1425\\u1426\\u1427\\u1428\\u1429\\u142A\\u142B\\u142C\\u142D\\u142E\\u142F\\u1430\\u1431\\u1432\\u1433\\u1434\\u1435\\u1436\\u1437\\u1438\\u1439\\u143A\\u143B\\u143C\\u143D\\u143E\\u143F\\u1440\\u1441\\u1442\\u1443\\u1444\\u1445\\u1446\\u1447\\u1448\\u1449\\u144A\\u144B\\u144C\\u144D\\u144E\\u144F\\u1450\\u1451\\u1452\\u1453\\u1454\\u1455\\u1456\\u1457\\u1458\\u1459\\u145A\\u145B\\u145C\\u145D\\u145E\\u145F\\u1460\\u1461\\u1462\\u1463\\u1464\\u1465\\u1466\\u1467\\u1468\\u1469\\u146A\\u146B\\u146C\\u146D\\u146E\\u146F\\u1470\\u1471\\u1472\\u1473\\u1474\\u1475\\u1476\\u1477\\u1478\\u1479\\u147A\\u147B\\u147C\\u147D\\u147E\\u147F\\u1480\\u1481\\u1482\\u1483\\u1484\\u1485\\u1486\\u1487\\u1488\\u1489\\u148A\\u148B\\u148C\\u148D\\u148E\\u148F\\u1490\\u1491\\u1492\\u1493\\u1494\\u1495\\u1496\\u1497\\u1498\\u1499\\u149A\\u149B\\u149C\\u149D\\u149E\\u149F\\u14A0\\u14A1\\u14A2\\u14A3\\u14A4\\u14A5\\u14A6\\u14A7\\u14A8\\u14A9\\u14AA\\u14AB\\u14AC\\u14AD\\u14AE\\u14AF\\u14B0\\u14B1\\u14B2\\u14B3\\u14B4\\u14B5\\u14B6\\u14B7\\u14B8\\u14B9\\u14BA\\u14BB\\u14BC\\u14BD\\u14BE\\u14BF\\u14C0\\u14C1\\u14C2\\u14C3\\u14C4\\u14C5\\u14C6\\u14C7\\u14C8\\u14C9\\u14CA\\u14CB\\u14CC\\u14CD\\u14CE\\u14CF\\u14D0\\u14D1\\u14D2\\u14D3\\u14D4\\u14D5\\u14D6\\u14D7\\u14D8\\u14D9\\u14DA\\u14DB\\u14DC\\u14DD\\u14DE\\u14DF\\u14E0\\u14E1\\u14E2\\u14E3\\u14E4\\u14E5\\u14E6\\u14E7\\u14E8\\u14E9\\u14EA\\u14EB\\u14EC\\u14ED\\u14EE\\u14EF\\u14F0\\u14F1\\u14F2\\u14F3\\u14F4\\u14F5\\u14F6\\u14F7\\u14F8\\u14F9\\u14FA\\u14FB\\u14FC\\u14FD\\u14FE\\u14FF\\u1500\\u1501\\u1502\\u1503\\u1504\\u1505\\u1506\\u1507\\u1508\\u1509\\u150A\\u150B\\u150C\\u150D\\u150E\\u150F\\u1510\\u1511\\u1512\\u1513\\u1514\\u1515\\u1516\\u1517\\u1518\\u1519\\u151A\\u151B\\u151C\\u151D\\u151E\\u151F\\u1520\\u1521\\u1522\\u1523\\u1524\\u1525\\u1526\\u1527\\u1528\\u1529\\u152A\\u152B\\u152C\\u152D\\u152E\\u152F\\u1530\\u1531\\u1532\\u1533\\u1534\\u1535\\u1536\\u1537\\u1538\\u1539\\u153A\\u153B\\u153C\\u153D\\u153E\\u153F\\u1540\\u1541\\u1542\\u1543\\u1544\\u1545\\u1546\\u1547\\u1548\\u1549\\u154A\\u154B\\u154C\\u154D\\u154E\\u154F\\u1550\\u1551\\u1552\\u1553\\u1554\\u1555\\u1556\\u1557\\u1558\\u1559\\u155A\\u155B\\u155C\\u155D\\u155E\\u155F\\u1560\\u1561\\u1562\\u1563\\u1564\\u1565\\u1566\\u1567\\u1568\\u1569\\u156A\\u156B\\u156C\\u156D\\u156E\\u156F\\u1570\\u1571\\u1572\\u1573\\u1574\\u1575\\u1576\\u1577\\u1578\\u1579\\u157A\\u157B\\u157C\\u157D\\u157E\\u157F\\u1580\\u1581\\u1582\\u1583\\u1584\\u1585\\u1586\\u1587\\u1588\\u1589\\u158A\\u158B\\u158C\\u158D\\u158E\\u158F\\u1590\\u1591\\u1592\\u1593\\u1594\\u1595\\u1596\\u1597\\u1598\\u1599\\u159A\\u159B\\u159C\\u159D\\u159E\\u159F\\u15A0\\u15A1\\u15A2\\u15A3\\u15A4\\u15A5\\u15A6\\u15A7\\u15A8\\u15A9\\u15AA\\u15AB\\u15AC\\u15AD\\u15AE\\u15AF\\u15B0\\u15B1\\u15B2\\u15B3\\u15B4\\u15B5\\u15B6\\u15B7\\u15B8\\u15B9\\u15BA\\u15BB\\u15BC\\u15BD\\u15BE\\u15BF\\u15C0\\u15C1\\u15C2\\u15C3\\u15C4\\u15C5\\u15C6\\u15C7\\u15C8\\u15C9\\u15CA\\u15CB\\u15CC\\u15CD\\u15CE\\u15CF\\u15D0\\u15D1\\u15D2\\u15D3\\u15D4\\u15D5\\u15D6\\u15D7\\u15D8\\u15D9\\u15DA\\u15DB\\u15DC\\u15DD\\u15DE\\u15DF\\u15E0\\u15E1\\u15E2\\u15E3\\u15E4\\u15E5\\u15E6\\u15E7\\u15E8\\u15E9\\u15EA\\u15EB\\u15EC\\u15ED\\u15EE\\u15EF\\u15F0\\u15F1\\u15F2\\u15F3\\u15F4\\u15F5\\u15F6\\u15F7\\u15F8\\u15F9\\u15FA\\u15FB\\u15FC\\u15FD\\u15FE\\u15FF\\u1600\\u1601\\u1602\\u1603\\u1604\\u1605\\u1606\\u1607\\u1608\\u1609\\u160A\\u160B\\u160C\\u160D\\u160E\\u160F\\u1610\\u1611\\u1612\\u1613\\u1614\\u1615\\u1616\\u1617\\u1618\\u1619\\u161A\\u161B\\u161C\\u161D\\u161E\\u161F\\u1620\\u1621\\u1622\\u1623\\u1624\\u1625\\u1626\\u1627\\u1628\\u1629\\u162A\\u162B\\u162C\\u162D\\u162E\\u162F\\u1630\\u1631\\u1632\\u1633\\u1634\\u1635\\u1636\\u1637\\u1638\\u1639\\u163A\\u163B\\u163C\\u163D\\u163E\\u163F\\u1640\\u1641\\u1642\\u1643\\u1644\\u1645\\u1646\\u1647\\u1648\\u1649\\u164A\\u164B\\u164C\\u164D\\u164E\\u164F\\u1650\\u1651\\u1652\\u1653\\u1654\\u1655\\u1656\\u1657\\u1658\\u1659\\u165A\\u165B\\u165C\\u165D\\u165E\\u165F\\u1660\\u1661\\u1662\\u1663\\u1664\\u1665\\u1666\\u1667\\u1668\\u1669\\u166A\\u166B\\u166C\\u166F\\u1670\\u1671\\u1672\\u1673\\u1674\\u1675\\u1676\\u1681\\u1682\\u1683\\u1684\\u1685\\u1686\\u1687\\u1688\\u1689\\u168A\\u168B\\u168C\\u168D\\u168E\\u168F\\u1690\\u1691\\u1692\\u1693\\u1694\\u1695\\u1696\\u1697\\u1698\\u1699\\u169A\\u16A0\\u16A1\\u16A2\\u16A3\\u16A4\\u16A5\\u16A6\\u16A7\\u16A8\\u16A9\\u16AA\\u16AB\\u16AC\\u16AD\\u16AE\\u16AF\\u16B0\\u16B1\\u16B2\\u16B3\\u16B4\\u16B5\\u16B6\\u16B7\\u16B8\\u16B9\\u16BA\\u16BB\\u16BC\\u16BD\\u16BE\\u16BF\\u16C0\\u16C1\\u16C2\\u16C3\\u16C4\\u16C5\\u16C6\\u16C7\\u16C8\\u16C9\\u16CA\\u16CB\\u16CC\\u16CD\\u16CE\\u16CF\\u16D0\\u16D1\\u16D2\\u16D3\\u16D4\\u16D5\\u16D6\\u16D7\\u16D8\\u16D9\\u16DA\\u16DB\\u16DC\\u16DD\\u16DE\\u16DF\\u16E0\\u16E1\\u16E2\\u16E3\\u16E4\\u16E5\\u16E6\\u16E7\\u16E8\\u16E9\\u16EA\\u1700\\u1701\\u1702\\u1703\\u1704\\u1705\\u1706\\u1707\\u1708\\u1709\\u170A\\u170B\\u170C\\u170E\\u170F\\u1710\\u1711\\u1720\\u1721\\u1722\\u1723\\u1724\\u1725\\u1726\\u1727\\u1728\\u1729\\u172A\\u172B\\u172C\\u172D\\u172E\\u172F\\u1730\\u1731\\u1740\\u1741\\u1742\\u1743\\u1744\\u1745\\u1746\\u1747\\u1748\\u1749\\u174A\\u174B\\u174C\\u174D\\u174E\\u174F\\u1750\\u1751\\u1760\\u1761\\u1762\\u1763\\u1764\\u1765\\u1766\\u1767\\u1768\\u1769\\u176A\\u176B\\u176C\\u176E\\u176F\\u1770\\u1780\\u1781\\u1782\\u1783\\u1784\\u1785\\u1786\\u1787\\u1788\\u1789\\u178A\\u178B\\u178C\\u178D\\u178E\\u178F\\u1790\\u1791\\u1792\\u1793\\u1794\\u1795\\u1796\\u1797\\u1798\\u1799\\u179A\\u179B\\u179C\\u179D\\u179E\\u179F\\u17A0\\u17A1\\u17A2\\u17A3\\u17A4\\u17A5\\u17A6\\u17A7\\u17A8\\u17A9\\u17AA\\u17AB\\u17AC\\u17AD\\u17AE\\u17AF\\u17B0\\u17B1\\u17B2\\u17B3\\u17DC\\u1820\\u1821\\u1822\\u1823\\u1824\\u1825\\u1826\\u1827\\u1828\\u1829\\u182A\\u182B\\u182C\\u182D\\u182E\\u182F\\u1830\\u1831\\u1832\\u1833\\u1834\\u1835\\u1836\\u1837\\u1838\\u1839\\u183A\\u183B\\u183C\\u183D\\u183E\\u183F\\u1840\\u1841\\u1842\\u1844\\u1845\\u1846\\u1847\\u1848\\u1849\\u184A\\u184B\\u184C\\u184D\\u184E\\u184F\\u1850\\u1851\\u1852\\u1853\\u1854\\u1855\\u1856\\u1857\\u1858\\u1859\\u185A\\u185B\\u185C\\u185D\\u185E\\u185F\\u1860\\u1861\\u1862\\u1863\\u1864\\u1865\\u1866\\u1867\\u1868\\u1869\\u186A\\u186B\\u186C\\u186D\\u186E\\u186F\\u1870\\u1871\\u1872\\u1873\\u1874\\u1875\\u1876\\u1877\\u1880\\u1881\\u1882\\u1883\\u1884\\u1885\\u1886\\u1887\\u1888\\u1889\\u188A\\u188B\\u188C\\u188D\\u188E\\u188F\\u1890\\u1891\\u1892\\u1893\\u1894\\u1895\\u1896\\u1897\\u1898\\u1899\\u189A\\u189B\\u189C\\u189D\\u189E\\u189F\\u18A0\\u18A1\\u18A2\\u18A3\\u18A4\\u18A5\\u18A6\\u18A7\\u18A8\\u18AA\\u1900\\u1901\\u1902\\u1903\\u1904\\u1905\\u1906\\u1907\\u1908\\u1909\\u190A\\u190B\\u190C\\u190D\\u190E\\u190F\\u1910\\u1911\\u1912\\u1913\\u1914\\u1915\\u1916\\u1917\\u1918\\u1919\\u191A\\u191B\\u191C\\u1950\\u1951\\u1952\\u1953\\u1954\\u1955\\u1956\\u1957\\u1958\\u1959\\u195A\\u195B\\u195C\\u195D\\u195E\\u195F\\u1960\\u1961\\u1962\\u1963\\u1964\\u1965\\u1966\\u1967\\u1968\\u1969\\u196A\\u196B\\u196C\\u196D\\u1970\\u1971\\u1972\\u1973\\u1974\\u1980\\u1981\\u1982\\u1983\\u1984\\u1985\\u1986\\u1987\\u1988\\u1989\\u198A\\u198B\\u198C\\u198D\\u198E\\u198F\\u1990\\u1991\\u1992\\u1993\\u1994\\u1995\\u1996\\u1997\\u1998\\u1999\\u199A\\u199B\\u199C\\u199D\\u199E\\u199F\\u19A0\\u19A1\\u19A2\\u19A3\\u19A4\\u19A5\\u19A6\\u19A7\\u19A8\\u19A9\\u19C1\\u19C2\\u19C3\\u19C4\\u19C5\\u19C6\\u19C7\\u1A00\\u1A01\\u1A02\\u1A03\\u1A04\\u1A05\\u1A06\\u1A07\\u1A08\\u1A09\\u1A0A\\u1A0B\\u1A0C\\u1A0D\\u1A0E\\u1A0F\\u1A10\\u1A11\\u1A12\\u1A13\\u1A14\\u1A15\\u1A16\\u1B05\\u1B06\\u1B07\\u1B08\\u1B09\\u1B0A\\u1B0B\\u1B0C\\u1B0D\\u1B0E\\u1B0F\\u1B10\\u1B11\\u1B12\\u1B13\\u1B14\\u1B15\\u1B16\\u1B17\\u1B18\\u1B19\\u1B1A\\u1B1B\\u1B1C\\u1B1D\\u1B1E\\u1B1F\\u1B20\\u1B21\\u1B22\\u1B23\\u1B24\\u1B25\\u1B26\\u1B27\\u1B28\\u1B29\\u1B2A\\u1B2B\\u1B2C\\u1B2D\\u1B2E\\u1B2F\\u1B30\\u1B31\\u1B32\\u1B33\\u1B45\\u1B46\\u1B47\\u1B48\\u1B49\\u1B4A\\u1B4B\\u1B83\\u1B84\\u1B85\\u1B86\\u1B87\\u1B88\\u1B89\\u1B8A\\u1B8B\\u1B8C\\u1B8D\\u1B8E\\u1B8F\\u1B90\\u1B91\\u1B92\\u1B93\\u1B94\\u1B95\\u1B96\\u1B97\\u1B98\\u1B99\\u1B9A\\u1B9B\\u1B9C\\u1B9D\\u1B9E\\u1B9F\\u1BA0\\u1BAE\\u1BAF\\u1C00\\u1C01\\u1C02\\u1C03\\u1C04\\u1C05\\u1C06\\u1C07\\u1C08\\u1C09\\u1C0A\\u1C0B\\u1C0C\\u1C0D\\u1C0E\\u1C0F\\u1C10\\u1C11\\u1C12\\u1C13\\u1C14\\u1C15\\u1C16\\u1C17\\u1C18\\u1C19\\u1C1A\\u1C1B\\u1C1C\\u1C1D\\u1C1E\\u1C1F\\u1C20\\u1C21\\u1C22\\u1C23\\u1C4D\\u1C4E\\u1C4F\\u1C5A\\u1C5B\\u1C5C\\u1C5D\\u1C5E\\u1C5F\\u1C60\\u1C61\\u1C62\\u1C63\\u1C64\\u1C65\\u1C66\\u1C67\\u1C68\\u1C69\\u1C6A\\u1C6B\\u1C6C\\u1C6D\\u1C6E\\u1C6F\\u1C70\\u1C71\\u1C72\\u1C73\\u1C74\\u1C75\\u1C76\\u1C77\\u2135\\u2136\\u2137\\u2138\\u2D30\\u2D31\\u2D32\\u2D33\\u2D34\\u2D35\\u2D36\\u2D37\\u2D38\\u2D39\\u2D3A\\u2D3B\\u2D3C\\u2D3D\\u2D3E\\u2D3F\\u2D40\\u2D41\\u2D42\\u2D43\\u2D44\\u2D45\\u2D46\\u2D47\\u2D48\\u2D49\\u2D4A\\u2D4B\\u2D4C\\u2D4D\\u2D4E\\u2D4F\\u2D50\\u2D51\\u2D52\\u2D53\\u2D54\\u2D55\\u2D56\\u2D57\\u2D58\\u2D59\\u2D5A\\u2D5B\\u2D5C\\u2D5D\\u2D5E\\u2D5F\\u2D60\\u2D61\\u2D62\\u2D63\\u2D64\\u2D65\\u2D80\\u2D81\\u2D82\\u2D83\\u2D84\\u2D85\\u2D86\\u2D87\\u2D88\\u2D89\\u2D8A\\u2D8B\\u2D8C\\u2D8D\\u2D8E\\u2D8F\\u2D90\\u2D91\\u2D92\\u2D93\\u2D94\\u2D95\\u2D96\\u2DA0\\u2DA1\\u2DA2\\u2DA3\\u2DA4\\u2DA5\\u2DA6\\u2DA8\\u2DA9\\u2DAA\\u2DAB\\u2DAC\\u2DAD\\u2DAE\\u2DB0\\u2DB1\\u2DB2\\u2DB3\\u2DB4\\u2DB5\\u2DB6\\u2DB8\\u2DB9\\u2DBA\\u2DBB\\u2DBC\\u2DBD\\u2DBE\\u2DC0\\u2DC1\\u2DC2\\u2DC3\\u2DC4\\u2DC5\\u2DC6\\u2DC8\\u2DC9\\u2DCA\\u2DCB\\u2DCC\\u2DCD\\u2DCE\\u2DD0\\u2DD1\\u2DD2\\u2DD3\\u2DD4\\u2DD5\\u2DD6\\u2DD8\\u2DD9\\u2DDA\\u2DDB\\u2DDC\\u2DDD\\u2DDE\\u3006\\u303C\\u3041\\u3042\\u3043\\u3044\\u3045\\u3046\\u3047\\u3048\\u3049\\u304A\\u304B\\u304C\\u304D\\u304E\\u304F\\u3050\\u3051\\u3052\\u3053\\u3054\\u3055\\u3056\\u3057\\u3058\\u3059\\u305A\\u305B\\u305C\\u305D\\u305E\\u305F\\u3060\\u3061\\u3062\\u3063\\u3064\\u3065\\u3066\\u3067\\u3068\\u3069\\u306A\\u306B\\u306C\\u306D\\u306E\\u306F\\u3070\\u3071\\u3072\\u3073\\u3074\\u3075\\u3076\\u3077\\u3078\\u3079\\u307A\\u307B\\u307C\\u307D\\u307E\\u307F\\u3080\\u3081\\u3082\\u3083\\u3084\\u3085\\u3086\\u3087\\u3088\\u3089\\u308A\\u308B\\u308C\\u308D\\u308E\\u308F\\u3090\\u3091\\u3092\\u3093\\u3094\\u3095\\u3096\\u309F\\u30A1\\u30A2\\u30A3\\u30A4\\u30A5\\u30A6\\u30A7\\u30A8\\u30A9\\u30AA\\u30AB\\u30AC\\u30AD\\u30AE\\u30AF\\u30B0\\u30B1\\u30B2\\u30B3\\u30B4\\u30B5\\u30B6\\u30B7\\u30B8\\u30B9\\u30BA\\u30BB\\u30BC\\u30BD\\u30BE\\u30BF\\u30C0\\u30C1\\u30C2\\u30C3\\u30C4\\u30C5\\u30C6\\u30C7\\u30C8\\u30C9\\u30CA\\u30CB\\u30CC\\u30CD\\u30CE\\u30CF\\u30D0\\u30D1\\u30D2\\u30D3\\u30D4\\u30D5\\u30D6\\u30D7\\u30D8\\u30D9\\u30DA\\u30DB\\u30DC\\u30DD\\u30DE\\u30DF\\u30E0\\u30E1\\u30E2\\u30E3\\u30E4\\u30E5\\u30E6\\u30E7\\u30E8\\u30E9\\u30EA\\u30EB\\u30EC\\u30ED\\u30EE\\u30EF\\u30F0\\u30F1\\u30F2\\u30F3\\u30F4\\u30F5\\u30F6\\u30F7\\u30F8\\u30F9\\u30FA\\u30FF\\u3105\\u3106\\u3107\\u3108\\u3109\\u310A\\u310B\\u310C\\u310D\\u310E\\u310F\\u3110\\u3111\\u3112\\u3113\\u3114\\u3115\\u3116\\u3117\\u3118\\u3119\\u311A\\u311B\\u311C\\u311D\\u311E\\u311F\\u3120\\u3121\\u3122\\u3123\\u3124\\u3125\\u3126\\u3127\\u3128\\u3129\\u312A\\u312B\\u312C\\u312D\\u3131\\u3132\\u3133\\u3134\\u3135\\u3136\\u3137\\u3138\\u3139\\u313A\\u313B\\u313C\\u313D\\u313E\\u313F\\u3140\\u3141\\u3142\\u3143\\u3144\\u3145\\u3146\\u3147\\u3148\\u3149\\u314A\\u314B\\u314C\\u314D\\u314E\\u314F\\u3150\\u3151\\u3152\\u3153\\u3154\\u3155\\u3156\\u3157\\u3158\\u3159\\u315A\\u315B\\u315C\\u315D\\u315E\\u315F\\u3160\\u3161\\u3162\\u3163\\u3164\\u3165\\u3166\\u3167\\u3168\\u3169\\u316A\\u316B\\u316C\\u316D\\u316E\\u316F\\u3170\\u3171\\u3172\\u3173\\u3174\\u3175\\u3176\\u3177\\u3178\\u3179\\u317A\\u317B\\u317C\\u317D\\u317E\\u317F\\u3180\\u3181\\u3182\\u3183\\u3184\\u3185\\u3186\\u3187\\u3188\\u3189\\u318A\\u318B\\u318C\\u318D\\u318E\\u31A0\\u31A1\\u31A2\\u31A3\\u31A4\\u31A5\\u31A6\\u31A7\\u31A8\\u31A9\\u31AA\\u31AB\\u31AC\\u31AD\\u31AE\\u31AF\\u31B0\\u31B1\\u31B2\\u31B3\\u31B4\\u31B5\\u31B6\\u31B7\\u31F0\\u31F1\\u31F2\\u31F3\\u31F4\\u31F5\\u31F6\\u31F7\\u31F8\\u31F9\\u31FA\\u31FB\\u31FC\\u31FD\\u31FE\\u31FF\\u3400\\u4DB5\\u4E00\\u9FC3\\uA000\\uA001\\uA002\\uA003\\uA004\\uA005\\uA006\\uA007\\uA008\\uA009\\uA00A\\uA00B\\uA00C\\uA00D\\uA00E\\uA00F\\uA010\\uA011\\uA012\\uA013\\uA014\\uA016\\uA017\\uA018\\uA019\\uA01A\\uA01B\\uA01C\\uA01D\\uA01E\\uA01F\\uA020\\uA021\\uA022\\uA023\\uA024\\uA025\\uA026\\uA027\\uA028\\uA029\\uA02A\\uA02B\\uA02C\\uA02D\\uA02E\\uA02F\\uA030\\uA031\\uA032\\uA033\\uA034\\uA035\\uA036\\uA037\\uA038\\uA039\\uA03A\\uA03B\\uA03C\\uA03D\\uA03E\\uA03F\\uA040\\uA041\\uA042\\uA043\\uA044\\uA045\\uA046\\uA047\\uA048\\uA049\\uA04A\\uA04B\\uA04C\\uA04D\\uA04E\\uA04F\\uA050\\uA051\\uA052\\uA053\\uA054\\uA055\\uA056\\uA057\\uA058\\uA059\\uA05A\\uA05B\\uA05C\\uA05D\\uA05E\\uA05F\\uA060\\uA061\\uA062\\uA063\\uA064\\uA065\\uA066\\uA067\\uA068\\uA069\\uA06A\\uA06B\\uA06C\\uA06D\\uA06E\\uA06F\\uA070\\uA071\\uA072\\uA073\\uA074\\uA075\\uA076\\uA077\\uA078\\uA079\\uA07A\\uA07B\\uA07C\\uA07D\\uA07E\\uA07F\\uA080\\uA081\\uA082\\uA083\\uA084\\uA085\\uA086\\uA087\\uA088\\uA089\\uA08A\\uA08B\\uA08C\\uA08D\\uA08E\\uA08F\\uA090\\uA091\\uA092\\uA093\\uA094\\uA095\\uA096\\uA097\\uA098\\uA099\\uA09A\\uA09B\\uA09C\\uA09D\\uA09E\\uA09F\\uA0A0\\uA0A1\\uA0A2\\uA0A3\\uA0A4\\uA0A5\\uA0A6\\uA0A7\\uA0A8\\uA0A9\\uA0AA\\uA0AB\\uA0AC\\uA0AD\\uA0AE\\uA0AF\\uA0B0\\uA0B1\\uA0B2\\uA0B3\\uA0B4\\uA0B5\\uA0B6\\uA0B7\\uA0B8\\uA0B9\\uA0BA\\uA0BB\\uA0BC\\uA0BD\\uA0BE\\uA0BF\\uA0C0\\uA0C1\\uA0C2\\uA0C3\\uA0C4\\uA0C5\\uA0C6\\uA0C7\\uA0C8\\uA0C9\\uA0CA\\uA0CB\\uA0CC\\uA0CD\\uA0CE\\uA0CF\\uA0D0\\uA0D1\\uA0D2\\uA0D3\\uA0D4\\uA0D5\\uA0D6\\uA0D7\\uA0D8\\uA0D9\\uA0DA\\uA0DB\\uA0DC\\uA0DD\\uA0DE\\uA0DF\\uA0E0\\uA0E1\\uA0E2\\uA0E3\\uA0E4\\uA0E5\\uA0E6\\uA0E7\\uA0E8\\uA0E9\\uA0EA\\uA0EB\\uA0EC\\uA0ED\\uA0EE\\uA0EF\\uA0F0\\uA0F1\\uA0F2\\uA0F3\\uA0F4\\uA0F5\\uA0F6\\uA0F7\\uA0F8\\uA0F9\\uA0FA\\uA0FB\\uA0FC\\uA0FD\\uA0FE\\uA0FF\\uA100\\uA101\\uA102\\uA103\\uA104\\uA105\\uA106\\uA107\\uA108\\uA109\\uA10A\\uA10B\\uA10C\\uA10D\\uA10E\\uA10F\\uA110\\uA111\\uA112\\uA113\\uA114\\uA115\\uA116\\uA117\\uA118\\uA119\\uA11A\\uA11B\\uA11C\\uA11D\\uA11E\\uA11F\\uA120\\uA121\\uA122\\uA123\\uA124\\uA125\\uA126\\uA127\\uA128\\uA129\\uA12A\\uA12B\\uA12C\\uA12D\\uA12E\\uA12F\\uA130\\uA131\\uA132\\uA133\\uA134\\uA135\\uA136\\uA137\\uA138\\uA139\\uA13A\\uA13B\\uA13C\\uA13D\\uA13E\\uA13F\\uA140\\uA141\\uA142\\uA143\\uA144\\uA145\\uA146\\uA147\\uA148\\uA149\\uA14A\\uA14B\\uA14C\\uA14D\\uA14E\\uA14F\\uA150\\uA151\\uA152\\uA153\\uA154\\uA155\\uA156\\uA157\\uA158\\uA159\\uA15A\\uA15B\\uA15C\\uA15D\\uA15E\\uA15F\\uA160\\uA161\\uA162\\uA163\\uA164\\uA165\\uA166\\uA167\\uA168\\uA169\\uA16A\\uA16B\\uA16C\\uA16D\\uA16E\\uA16F\\uA170\\uA171\\uA172\\uA173\\uA174\\uA175\\uA176\\uA177\\uA178\\uA179\\uA17A\\uA17B\\uA17C\\uA17D\\uA17E\\uA17F\\uA180\\uA181\\uA182\\uA183\\uA184\\uA185\\uA186\\uA187\\uA188\\uA189\\uA18A\\uA18B\\uA18C\\uA18D\\uA18E\\uA18F\\uA190\\uA191\\uA192\\uA193\\uA194\\uA195\\uA196\\uA197\\uA198\\uA199\\uA19A\\uA19B\\uA19C\\uA19D\\uA19E\\uA19F\\uA1A0\\uA1A1\\uA1A2\\uA1A3\\uA1A4\\uA1A5\\uA1A6\\uA1A7\\uA1A8\\uA1A9\\uA1AA\\uA1AB\\uA1AC\\uA1AD\\uA1AE\\uA1AF\\uA1B0\\uA1B1\\uA1B2\\uA1B3\\uA1B4\\uA1B5\\uA1B6\\uA1B7\\uA1B8\\uA1B9\\uA1BA\\uA1BB\\uA1BC\\uA1BD\\uA1BE\\uA1BF\\uA1C0\\uA1C1\\uA1C2\\uA1C3\\uA1C4\\uA1C5\\uA1C6\\uA1C7\\uA1C8\\uA1C9\\uA1CA\\uA1CB\\uA1CC\\uA1CD\\uA1CE\\uA1CF\\uA1D0\\uA1D1\\uA1D2\\uA1D3\\uA1D4\\uA1D5\\uA1D6\\uA1D7\\uA1D8\\uA1D9\\uA1DA\\uA1DB\\uA1DC\\uA1DD\\uA1DE\\uA1DF\\uA1E0\\uA1E1\\uA1E2\\uA1E3\\uA1E4\\uA1E5\\uA1E6\\uA1E7\\uA1E8\\uA1E9\\uA1EA\\uA1EB\\uA1EC\\uA1ED\\uA1EE\\uA1EF\\uA1F0\\uA1F1\\uA1F2\\uA1F3\\uA1F4\\uA1F5\\uA1F6\\uA1F7\\uA1F8\\uA1F9\\uA1FA\\uA1FB\\uA1FC\\uA1FD\\uA1FE\\uA1FF\\uA200\\uA201\\uA202\\uA203\\uA204\\uA205\\uA206\\uA207\\uA208\\uA209\\uA20A\\uA20B\\uA20C\\uA20D\\uA20E\\uA20F\\uA210\\uA211\\uA212\\uA213\\uA214\\uA215\\uA216\\uA217\\uA218\\uA219\\uA21A\\uA21B\\uA21C\\uA21D\\uA21E\\uA21F\\uA220\\uA221\\uA222\\uA223\\uA224\\uA225\\uA226\\uA227\\uA228\\uA229\\uA22A\\uA22B\\uA22C\\uA22D\\uA22E\\uA22F\\uA230\\uA231\\uA232\\uA233\\uA234\\uA235\\uA236\\uA237\\uA238\\uA239\\uA23A\\uA23B\\uA23C\\uA23D\\uA23E\\uA23F\\uA240\\uA241\\uA242\\uA243\\uA244\\uA245\\uA246\\uA247\\uA248\\uA249\\uA24A\\uA24B\\uA24C\\uA24D\\uA24E\\uA24F\\uA250\\uA251\\uA252\\uA253\\uA254\\uA255\\uA256\\uA257\\uA258\\uA259\\uA25A\\uA25B\\uA25C\\uA25D\\uA25E\\uA25F\\uA260\\uA261\\uA262\\uA263\\uA264\\uA265\\uA266\\uA267\\uA268\\uA269\\uA26A\\uA26B\\uA26C\\uA26D\\uA26E\\uA26F\\uA270\\uA271\\uA272\\uA273\\uA274\\uA275\\uA276\\uA277\\uA278\\uA279\\uA27A\\uA27B\\uA27C\\uA27D\\uA27E\\uA27F\\uA280\\uA281\\uA282\\uA283\\uA284\\uA285\\uA286\\uA287\\uA288\\uA289\\uA28A\\uA28B\\uA28C\\uA28D\\uA28E\\uA28F\\uA290\\uA291\\uA292\\uA293\\uA294\\uA295\\uA296\\uA297\\uA298\\uA299\\uA29A\\uA29B\\uA29C\\uA29D\\uA29E\\uA29F\\uA2A0\\uA2A1\\uA2A2\\uA2A3\\uA2A4\\uA2A5\\uA2A6\\uA2A7\\uA2A8\\uA2A9\\uA2AA\\uA2AB\\uA2AC\\uA2AD\\uA2AE\\uA2AF\\uA2B0\\uA2B1\\uA2B2\\uA2B3\\uA2B4\\uA2B5\\uA2B6\\uA2B7\\uA2B8\\uA2B9\\uA2BA\\uA2BB\\uA2BC\\uA2BD\\uA2BE\\uA2BF\\uA2C0\\uA2C1\\uA2C2\\uA2C3\\uA2C4\\uA2C5\\uA2C6\\uA2C7\\uA2C8\\uA2C9\\uA2CA\\uA2CB\\uA2CC\\uA2CD\\uA2CE\\uA2CF\\uA2D0\\uA2D1\\uA2D2\\uA2D3\\uA2D4\\uA2D5\\uA2D6\\uA2D7\\uA2D8\\uA2D9\\uA2DA\\uA2DB\\uA2DC\\uA2DD\\uA2DE\\uA2DF\\uA2E0\\uA2E1\\uA2E2\\uA2E3\\uA2E4\\uA2E5\\uA2E6\\uA2E7\\uA2E8\\uA2E9\\uA2EA\\uA2EB\\uA2EC\\uA2ED\\uA2EE\\uA2EF\\uA2F0\\uA2F1\\uA2F2\\uA2F3\\uA2F4\\uA2F5\\uA2F6\\uA2F7\\uA2F8\\uA2F9\\uA2FA\\uA2FB\\uA2FC\\uA2FD\\uA2FE\\uA2FF\\uA300\\uA301\\uA302\\uA303\\uA304\\uA305\\uA306\\uA307\\uA308\\uA309\\uA30A\\uA30B\\uA30C\\uA30D\\uA30E\\uA30F\\uA310\\uA311\\uA312\\uA313\\uA314\\uA315\\uA316\\uA317\\uA318\\uA319\\uA31A\\uA31B\\uA31C\\uA31D\\uA31E\\uA31F\\uA320\\uA321\\uA322\\uA323\\uA324\\uA325\\uA326\\uA327\\uA328\\uA329\\uA32A\\uA32B\\uA32C\\uA32D\\uA32E\\uA32F\\uA330\\uA331\\uA332\\uA333\\uA334\\uA335\\uA336\\uA337\\uA338\\uA339\\uA33A\\uA33B\\uA33C\\uA33D\\uA33E\\uA33F\\uA340\\uA341\\uA342\\uA343\\uA344\\uA345\\uA346\\uA347\\uA348\\uA349\\uA34A\\uA34B\\uA34C\\uA34D\\uA34E\\uA34F\\uA350\\uA351\\uA352\\uA353\\uA354\\uA355\\uA356\\uA357\\uA358\\uA359\\uA35A\\uA35B\\uA35C\\uA35D\\uA35E\\uA35F\\uA360\\uA361\\uA362\\uA363\\uA364\\uA365\\uA366\\uA367\\uA368\\uA369\\uA36A\\uA36B\\uA36C\\uA36D\\uA36E\\uA36F\\uA370\\uA371\\uA372\\uA373\\uA374\\uA375\\uA376\\uA377\\uA378\\uA379\\uA37A\\uA37B\\uA37C\\uA37D\\uA37E\\uA37F\\uA380\\uA381\\uA382\\uA383\\uA384\\uA385\\uA386\\uA387\\uA388\\uA389\\uA38A\\uA38B\\uA38C\\uA38D\\uA38E\\uA38F\\uA390\\uA391\\uA392\\uA393\\uA394\\uA395\\uA396\\uA397\\uA398\\uA399\\uA39A\\uA39B\\uA39C\\uA39D\\uA39E\\uA39F\\uA3A0\\uA3A1\\uA3A2\\uA3A3\\uA3A4\\uA3A5\\uA3A6\\uA3A7\\uA3A8\\uA3A9\\uA3AA\\uA3AB\\uA3AC\\uA3AD\\uA3AE\\uA3AF\\uA3B0\\uA3B1\\uA3B2\\uA3B3\\uA3B4\\uA3B5\\uA3B6\\uA3B7\\uA3B8\\uA3B9\\uA3BA\\uA3BB\\uA3BC\\uA3BD\\uA3BE\\uA3BF\\uA3C0\\uA3C1\\uA3C2\\uA3C3\\uA3C4\\uA3C5\\uA3C6\\uA3C7\\uA3C8\\uA3C9\\uA3CA\\uA3CB\\uA3CC\\uA3CD\\uA3CE\\uA3CF\\uA3D0\\uA3D1\\uA3D2\\uA3D3\\uA3D4\\uA3D5\\uA3D6\\uA3D7\\uA3D8\\uA3D9\\uA3DA\\uA3DB\\uA3DC\\uA3DD\\uA3DE\\uA3DF\\uA3E0\\uA3E1\\uA3E2\\uA3E3\\uA3E4\\uA3E5\\uA3E6\\uA3E7\\uA3E8\\uA3E9\\uA3EA\\uA3EB\\uA3EC\\uA3ED\\uA3EE\\uA3EF\\uA3F0\\uA3F1\\uA3F2\\uA3F3\\uA3F4\\uA3F5\\uA3F6\\uA3F7\\uA3F8\\uA3F9\\uA3FA\\uA3FB\\uA3FC\\uA3FD\\uA3FE\\uA3FF\\uA400\\uA401\\uA402\\uA403\\uA404\\uA405\\uA406\\uA407\\uA408\\uA409\\uA40A\\uA40B\\uA40C\\uA40D\\uA40E\\uA40F\\uA410\\uA411\\uA412\\uA413\\uA414\\uA415\\uA416\\uA417\\uA418\\uA419\\uA41A\\uA41B\\uA41C\\uA41D\\uA41E\\uA41F\\uA420\\uA421\\uA422\\uA423\\uA424\\uA425\\uA426\\uA427\\uA428\\uA429\\uA42A\\uA42B\\uA42C\\uA42D\\uA42E\\uA42F\\uA430\\uA431\\uA432\\uA433\\uA434\\uA435\\uA436\\uA437\\uA438\\uA439\\uA43A\\uA43B\\uA43C\\uA43D\\uA43E\\uA43F\\uA440\\uA441\\uA442\\uA443\\uA444\\uA445\\uA446\\uA447\\uA448\\uA449\\uA44A\\uA44B\\uA44C\\uA44D\\uA44E\\uA44F\\uA450\\uA451\\uA452\\uA453\\uA454\\uA455\\uA456\\uA457\\uA458\\uA459\\uA45A\\uA45B\\uA45C\\uA45D\\uA45E\\uA45F\\uA460\\uA461\\uA462\\uA463\\uA464\\uA465\\uA466\\uA467\\uA468\\uA469\\uA46A\\uA46B\\uA46C\\uA46D\\uA46E\\uA46F\\uA470\\uA471\\uA472\\uA473\\uA474\\uA475\\uA476\\uA477\\uA478\\uA479\\uA47A\\uA47B\\uA47C\\uA47D\\uA47E\\uA47F\\uA480\\uA481\\uA482\\uA483\\uA484\\uA485\\uA486\\uA487\\uA488\\uA489\\uA48A\\uA48B\\uA48C\\uA500\\uA501\\uA502\\uA503\\uA504\\uA505\\uA506\\uA507\\uA508\\uA509\\uA50A\\uA50B\\uA50C\\uA50D\\uA50E\\uA50F\\uA510\\uA511\\uA512\\uA513\\uA514\\uA515\\uA516\\uA517\\uA518\\uA519\\uA51A\\uA51B\\uA51C\\uA51D\\uA51E\\uA51F\\uA520\\uA521\\uA522\\uA523\\uA524\\uA525\\uA526\\uA527\\uA528\\uA529\\uA52A\\uA52B\\uA52C\\uA52D\\uA52E\\uA52F\\uA530\\uA531\\uA532\\uA533\\uA534\\uA535\\uA536\\uA537\\uA538\\uA539\\uA53A\\uA53B\\uA53C\\uA53D\\uA53E\\uA53F\\uA540\\uA541\\uA542\\uA543\\uA544\\uA545\\uA546\\uA547\\uA548\\uA549\\uA54A\\uA54B\\uA54C\\uA54D\\uA54E\\uA54F\\uA550\\uA551\\uA552\\uA553\\uA554\\uA555\\uA556\\uA557\\uA558\\uA559\\uA55A\\uA55B\\uA55C\\uA55D\\uA55E\\uA55F\\uA560\\uA561\\uA562\\uA563\\uA564\\uA565\\uA566\\uA567\\uA568\\uA569\\uA56A\\uA56B\\uA56C\\uA56D\\uA56E\\uA56F\\uA570\\uA571\\uA572\\uA573\\uA574\\uA575\\uA576\\uA577\\uA578\\uA579\\uA57A\\uA57B\\uA57C\\uA57D\\uA57E\\uA57F\\uA580\\uA581\\uA582\\uA583\\uA584\\uA585\\uA586\\uA587\\uA588\\uA589\\uA58A\\uA58B\\uA58C\\uA58D\\uA58E\\uA58F\\uA590\\uA591\\uA592\\uA593\\uA594\\uA595\\uA596\\uA597\\uA598\\uA599\\uA59A\\uA59B\\uA59C\\uA59D\\uA59E\\uA59F\\uA5A0\\uA5A1\\uA5A2\\uA5A3\\uA5A4\\uA5A5\\uA5A6\\uA5A7\\uA5A8\\uA5A9\\uA5AA\\uA5AB\\uA5AC\\uA5AD\\uA5AE\\uA5AF\\uA5B0\\uA5B1\\uA5B2\\uA5B3\\uA5B4\\uA5B5\\uA5B6\\uA5B7\\uA5B8\\uA5B9\\uA5BA\\uA5BB\\uA5BC\\uA5BD\\uA5BE\\uA5BF\\uA5C0\\uA5C1\\uA5C2\\uA5C3\\uA5C4\\uA5C5\\uA5C6\\uA5C7\\uA5C8\\uA5C9\\uA5CA\\uA5CB\\uA5CC\\uA5CD\\uA5CE\\uA5CF\\uA5D0\\uA5D1\\uA5D2\\uA5D3\\uA5D4\\uA5D5\\uA5D6\\uA5D7\\uA5D8\\uA5D9\\uA5DA\\uA5DB\\uA5DC\\uA5DD\\uA5DE\\uA5DF\\uA5E0\\uA5E1\\uA5E2\\uA5E3\\uA5E4\\uA5E5\\uA5E6\\uA5E7\\uA5E8\\uA5E9\\uA5EA\\uA5EB\\uA5EC\\uA5ED\\uA5EE\\uA5EF\\uA5F0\\uA5F1\\uA5F2\\uA5F3\\uA5F4\\uA5F5\\uA5F6\\uA5F7\\uA5F8\\uA5F9\\uA5FA\\uA5FB\\uA5FC\\uA5FD\\uA5FE\\uA5FF\\uA600\\uA601\\uA602\\uA603\\uA604\\uA605\\uA606\\uA607\\uA608\\uA609\\uA60A\\uA60B\\uA610\\uA611\\uA612\\uA613\\uA614\\uA615\\uA616\\uA617\\uA618\\uA619\\uA61A\\uA61B\\uA61C\\uA61D\\uA61E\\uA61F\\uA62A\\uA62B\\uA66E\\uA7FB\\uA7FC\\uA7FD\\uA7FE\\uA7FF\\uA800\\uA801\\uA803\\uA804\\uA805\\uA807\\uA808\\uA809\\uA80A\\uA80C\\uA80D\\uA80E\\uA80F\\uA810\\uA811\\uA812\\uA813\\uA814\\uA815\\uA816\\uA817\\uA818\\uA819\\uA81A\\uA81B\\uA81C\\uA81D\\uA81E\\uA81F\\uA820\\uA821\\uA822\\uA840\\uA841\\uA842\\uA843\\uA844\\uA845\\uA846\\uA847\\uA848\\uA849\\uA84A\\uA84B\\uA84C\\uA84D\\uA84E\\uA84F\\uA850\\uA851\\uA852\\uA853\\uA854\\uA855\\uA856\\uA857\\uA858\\uA859\\uA85A\\uA85B\\uA85C\\uA85D\\uA85E\\uA85F\\uA860\\uA861\\uA862\\uA863\\uA864\\uA865\\uA866\\uA867\\uA868\\uA869\\uA86A\\uA86B\\uA86C\\uA86D\\uA86E\\uA86F\\uA870\\uA871\\uA872\\uA873\\uA882\\uA883\\uA884\\uA885\\uA886\\uA887\\uA888\\uA889\\uA88A\\uA88B\\uA88C\\uA88D\\uA88E\\uA88F\\uA890\\uA891\\uA892\\uA893\\uA894\\uA895\\uA896\\uA897\\uA898\\uA899\\uA89A\\uA89B\\uA89C\\uA89D\\uA89E\\uA89F\\uA8A0\\uA8A1\\uA8A2\\uA8A3\\uA8A4\\uA8A5\\uA8A6\\uA8A7\\uA8A8\\uA8A9\\uA8AA\\uA8AB\\uA8AC\\uA8AD\\uA8AE\\uA8AF\\uA8B0\\uA8B1\\uA8B2\\uA8B3\\uA90A\\uA90B\\uA90C\\uA90D\\uA90E\\uA90F\\uA910\\uA911\\uA912\\uA913\\uA914\\uA915\\uA916\\uA917\\uA918\\uA919\\uA91A\\uA91B\\uA91C\\uA91D\\uA91E\\uA91F\\uA920\\uA921\\uA922\\uA923\\uA924\\uA925\\uA930\\uA931\\uA932\\uA933\\uA934\\uA935\\uA936\\uA937\\uA938\\uA939\\uA93A\\uA93B\\uA93C\\uA93D\\uA93E\\uA93F\\uA940\\uA941\\uA942\\uA943\\uA944\\uA945\\uA946\\uAA00\\uAA01\\uAA02\\uAA03\\uAA04\\uAA05\\uAA06\\uAA07\\uAA08\\uAA09\\uAA0A\\uAA0B\\uAA0C\\uAA0D\\uAA0E\\uAA0F\\uAA10\\uAA11\\uAA12\\uAA13\\uAA14\\uAA15\\uAA16\\uAA17\\uAA18\\uAA19\\uAA1A\\uAA1B\\uAA1C\\uAA1D\\uAA1E\\uAA1F\\uAA20\\uAA21\\uAA22\\uAA23\\uAA24\\uAA25\\uAA26\\uAA27\\uAA28\\uAA40\\uAA41\\uAA42\\uAA44\\uAA45\\uAA46\\uAA47\\uAA48\\uAA49\\uAA4A\\uAA4B\\uAC00\\uD7A3\\uF900\\uF901\\uF902\\uF903\\uF904\\uF905\\uF906\\uF907\\uF908\\uF909\\uF90A\\uF90B\\uF90C\\uF90D\\uF90E\\uF90F\\uF910\\uF911\\uF912\\uF913\\uF914\\uF915\\uF916\\uF917\\uF918\\uF919\\uF91A\\uF91B\\uF91C\\uF91D\\uF91E\\uF91F\\uF920\\uF921\\uF922\\uF923\\uF924\\uF925\\uF926\\uF927\\uF928\\uF929\\uF92A\\uF92B\\uF92C\\uF92D\\uF92E\\uF92F\\uF930\\uF931\\uF932\\uF933\\uF934\\uF935\\uF936\\uF937\\uF938\\uF939\\uF93A\\uF93B\\uF93C\\uF93D\\uF93E\\uF93F\\uF940\\uF941\\uF942\\uF943\\uF944\\uF945\\uF946\\uF947\\uF948\\uF949\\uF94A\\uF94B\\uF94C\\uF94D\\uF94E\\uF94F\\uF950\\uF951\\uF952\\uF953\\uF954\\uF955\\uF956\\uF957\\uF958\\uF959\\uF95A\\uF95B\\uF95C\\uF95D\\uF95E\\uF95F\\uF960\\uF961\\uF962\\uF963\\uF964\\uF965\\uF966\\uF967\\uF968\\uF969\\uF96A\\uF96B\\uF96C\\uF96D\\uF96E\\uF96F\\uF970\\uF971\\uF972\\uF973\\uF974\\uF975\\uF976\\uF977\\uF978\\uF979\\uF97A\\uF97B\\uF97C\\uF97D\\uF97E\\uF97F\\uF980\\uF981\\uF982\\uF983\\uF984\\uF985\\uF986\\uF987\\uF988\\uF989\\uF98A\\uF98B\\uF98C\\uF98D\\uF98E\\uF98F\\uF990\\uF991\\uF992\\uF993\\uF994\\uF995\\uF996\\uF997\\uF998\\uF999\\uF99A\\uF99B\\uF99C\\uF99D\\uF99E\\uF99F\\uF9A0\\uF9A1\\uF9A2\\uF9A3\\uF9A4\\uF9A5\\uF9A6\\uF9A7\\uF9A8\\uF9A9\\uF9AA\\uF9AB\\uF9AC\\uF9AD\\uF9AE\\uF9AF\\uF9B0\\uF9B1\\uF9B2\\uF9B3\\uF9B4\\uF9B5\\uF9B6\\uF9B7\\uF9B8\\uF9B9\\uF9BA\\uF9BB\\uF9BC\\uF9BD\\uF9BE\\uF9BF\\uF9C0\\uF9C1\\uF9C2\\uF9C3\\uF9C4\\uF9C5\\uF9C6\\uF9C7\\uF9C8\\uF9C9\\uF9CA\\uF9CB\\uF9CC\\uF9CD\\uF9CE\\uF9CF\\uF9D0\\uF9D1\\uF9D2\\uF9D3\\uF9D4\\uF9D5\\uF9D6\\uF9D7\\uF9D8\\uF9D9\\uF9DA\\uF9DB\\uF9DC\\uF9DD\\uF9DE\\uF9DF\\uF9E0\\uF9E1\\uF9E2\\uF9E3\\uF9E4\\uF9E5\\uF9E6\\uF9E7\\uF9E8\\uF9E9\\uF9EA\\uF9EB\\uF9EC\\uF9ED\\uF9EE\\uF9EF\\uF9F0\\uF9F1\\uF9F2\\uF9F3\\uF9F4\\uF9F5\\uF9F6\\uF9F7\\uF9F8\\uF9F9\\uF9FA\\uF9FB\\uF9FC\\uF9FD\\uF9FE\\uF9FF\\uFA00\\uFA01\\uFA02\\uFA03\\uFA04\\uFA05\\uFA06\\uFA07\\uFA08\\uFA09\\uFA0A\\uFA0B\\uFA0C\\uFA0D\\uFA0E\\uFA0F\\uFA10\\uFA11\\uFA12\\uFA13\\uFA14\\uFA15\\uFA16\\uFA17\\uFA18\\uFA19\\uFA1A\\uFA1B\\uFA1C\\uFA1D\\uFA1E\\uFA1F\\uFA20\\uFA21\\uFA22\\uFA23\\uFA24\\uFA25\\uFA26\\uFA27\\uFA28\\uFA29\\uFA2A\\uFA2B\\uFA2C\\uFA2D\\uFA30\\uFA31\\uFA32\\uFA33\\uFA34\\uFA35\\uFA36\\uFA37\\uFA38\\uFA39\\uFA3A\\uFA3B\\uFA3C\\uFA3D\\uFA3E\\uFA3F\\uFA40\\uFA41\\uFA42\\uFA43\\uFA44\\uFA45\\uFA46\\uFA47\\uFA48\\uFA49\\uFA4A\\uFA4B\\uFA4C\\uFA4D\\uFA4E\\uFA4F\\uFA50\\uFA51\\uFA52\\uFA53\\uFA54\\uFA55\\uFA56\\uFA57\\uFA58\\uFA59\\uFA5A\\uFA5B\\uFA5C\\uFA5D\\uFA5E\\uFA5F\\uFA60\\uFA61\\uFA62\\uFA63\\uFA64\\uFA65\\uFA66\\uFA67\\uFA68\\uFA69\\uFA6A\\uFA70\\uFA71\\uFA72\\uFA73\\uFA74\\uFA75\\uFA76\\uFA77\\uFA78\\uFA79\\uFA7A\\uFA7B\\uFA7C\\uFA7D\\uFA7E\\uFA7F\\uFA80\\uFA81\\uFA82\\uFA83\\uFA84\\uFA85\\uFA86\\uFA87\\uFA88\\uFA89\\uFA8A\\uFA8B\\uFA8C\\uFA8D\\uFA8E\\uFA8F\\uFA90\\uFA91\\uFA92\\uFA93\\uFA94\\uFA95\\uFA96\\uFA97\\uFA98\\uFA99\\uFA9A\\uFA9B\\uFA9C\\uFA9D\\uFA9E\\uFA9F\\uFAA0\\uFAA1\\uFAA2\\uFAA3\\uFAA4\\uFAA5\\uFAA6\\uFAA7\\uFAA8\\uFAA9\\uFAAA\\uFAAB\\uFAAC\\uFAAD\\uFAAE\\uFAAF\\uFAB0\\uFAB1\\uFAB2\\uFAB3\\uFAB4\\uFAB5\\uFAB6\\uFAB7\\uFAB8\\uFAB9\\uFABA\\uFABB\\uFABC\\uFABD\\uFABE\\uFABF\\uFAC0\\uFAC1\\uFAC2\\uFAC3\\uFAC4\\uFAC5\\uFAC6\\uFAC7\\uFAC8\\uFAC9\\uFACA\\uFACB\\uFACC\\uFACD\\uFACE\\uFACF\\uFAD0\\uFAD1\\uFAD2\\uFAD3\\uFAD4\\uFAD5\\uFAD6\\uFAD7\\uFAD8\\uFAD9\\uFB1D\\uFB1F\\uFB20\\uFB21\\uFB22\\uFB23\\uFB24\\uFB25\\uFB26\\uFB27\\uFB28\\uFB2A\\uFB2B\\uFB2C\\uFB2D\\uFB2E\\uFB2F\\uFB30\\uFB31\\uFB32\\uFB33\\uFB34\\uFB35\\uFB36\\uFB38\\uFB39\\uFB3A\\uFB3B\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46\\uFB47\\uFB48\\uFB49\\uFB4A\\uFB4B\\uFB4C\\uFB4D\\uFB4E\\uFB4F\\uFB50\\uFB51\\uFB52\\uFB53\\uFB54\\uFB55\\uFB56\\uFB57\\uFB58\\uFB59\\uFB5A\\uFB5B\\uFB5C\\uFB5D\\uFB5E\\uFB5F\\uFB60\\uFB61\\uFB62\\uFB63\\uFB64\\uFB65\\uFB66\\uFB67\\uFB68\\uFB69\\uFB6A\\uFB6B\\uFB6C\\uFB6D\\uFB6E\\uFB6F\\uFB70\\uFB71\\uFB72\\uFB73\\uFB74\\uFB75\\uFB76\\uFB77\\uFB78\\uFB79\\uFB7A\\uFB7B\\uFB7C\\uFB7D\\uFB7E\\uFB7F\\uFB80\\uFB81\\uFB82\\uFB83\\uFB84\\uFB85\\uFB86\\uFB87\\uFB88\\uFB89\\uFB8A\\uFB8B\\uFB8C\\uFB8D\\uFB8E\\uFB8F\\uFB90\\uFB91\\uFB92\\uFB93\\uFB94\\uFB95\\uFB96\\uFB97\\uFB98\\uFB99\\uFB9A\\uFB9B\\uFB9C\\uFB9D\\uFB9E\\uFB9F\\uFBA0\\uFBA1\\uFBA2\\uFBA3\\uFBA4\\uFBA5\\uFBA6\\uFBA7\\uFBA8\\uFBA9\\uFBAA\\uFBAB\\uFBAC\\uFBAD\\uFBAE\\uFBAF\\uFBB0\\uFBB1\\uFBD3\\uFBD4\\uFBD5\\uFBD6\\uFBD7\\uFBD8\\uFBD9\\uFBDA\\uFBDB\\uFBDC\\uFBDD\\uFBDE\\uFBDF\\uFBE0\\uFBE1\\uFBE2\\uFBE3\\uFBE4\\uFBE5\\uFBE6\\uFBE7\\uFBE8\\uFBE9\\uFBEA\\uFBEB\\uFBEC\\uFBED\\uFBEE\\uFBEF\\uFBF0\\uFBF1\\uFBF2\\uFBF3\\uFBF4\\uFBF5\\uFBF6\\uFBF7\\uFBF8\\uFBF9\\uFBFA\\uFBFB\\uFBFC\\uFBFD\\uFBFE\\uFBFF\\uFC00\\uFC01\\uFC02\\uFC03\\uFC04\\uFC05\\uFC06\\uFC07\\uFC08\\uFC09\\uFC0A\\uFC0B\\uFC0C\\uFC0D\\uFC0E\\uFC0F\\uFC10\\uFC11\\uFC12\\uFC13\\uFC14\\uFC15\\uFC16\\uFC17\\uFC18\\uFC19\\uFC1A\\uFC1B\\uFC1C\\uFC1D\\uFC1E\\uFC1F\\uFC20\\uFC21\\uFC22\\uFC23\\uFC24\\uFC25\\uFC26\\uFC27\\uFC28\\uFC29\\uFC2A\\uFC2B\\uFC2C\\uFC2D\\uFC2E\\uFC2F\\uFC30\\uFC31\\uFC32\\uFC33\\uFC34\\uFC35\\uFC36\\uFC37\\uFC38\\uFC39\\uFC3A\\uFC3B\\uFC3C\\uFC3D\\uFC3E\\uFC3F\\uFC40\\uFC41\\uFC42\\uFC43\\uFC44\\uFC45\\uFC46\\uFC47\\uFC48\\uFC49\\uFC4A\\uFC4B\\uFC4C\\uFC4D\\uFC4E\\uFC4F\\uFC50\\uFC51\\uFC52\\uFC53\\uFC54\\uFC55\\uFC56\\uFC57\\uFC58\\uFC59\\uFC5A\\uFC5B\\uFC5C\\uFC5D\\uFC5E\\uFC5F\\uFC60\\uFC61\\uFC62\\uFC63\\uFC64\\uFC65\\uFC66\\uFC67\\uFC68\\uFC69\\uFC6A\\uFC6B\\uFC6C\\uFC6D\\uFC6E\\uFC6F\\uFC70\\uFC71\\uFC72\\uFC73\\uFC74\\uFC75\\uFC76\\uFC77\\uFC78\\uFC79\\uFC7A\\uFC7B\\uFC7C\\uFC7D\\uFC7E\\uFC7F\\uFC80\\uFC81\\uFC82\\uFC83\\uFC84\\uFC85\\uFC86\\uFC87\\uFC88\\uFC89\\uFC8A\\uFC8B\\uFC8C\\uFC8D\\uFC8E\\uFC8F\\uFC90\\uFC91\\uFC92\\uFC93\\uFC94\\uFC95\\uFC96\\uFC97\\uFC98\\uFC99\\uFC9A\\uFC9B\\uFC9C\\uFC9D\\uFC9E\\uFC9F\\uFCA0\\uFCA1\\uFCA2\\uFCA3\\uFCA4\\uFCA5\\uFCA6\\uFCA7\\uFCA8\\uFCA9\\uFCAA\\uFCAB\\uFCAC\\uFCAD\\uFCAE\\uFCAF\\uFCB0\\uFCB1\\uFCB2\\uFCB3\\uFCB4\\uFCB5\\uFCB6\\uFCB7\\uFCB8\\uFCB9\\uFCBA\\uFCBB\\uFCBC\\uFCBD\\uFCBE\\uFCBF\\uFCC0\\uFCC1\\uFCC2\\uFCC3\\uFCC4\\uFCC5\\uFCC6\\uFCC7\\uFCC8\\uFCC9\\uFCCA\\uFCCB\\uFCCC\\uFCCD\\uFCCE\\uFCCF\\uFCD0\\uFCD1\\uFCD2\\uFCD3\\uFCD4\\uFCD5\\uFCD6\\uFCD7\\uFCD8\\uFCD9\\uFCDA\\uFCDB\\uFCDC\\uFCDD\\uFCDE\\uFCDF\\uFCE0\\uFCE1\\uFCE2\\uFCE3\\uFCE4\\uFCE5\\uFCE6\\uFCE7\\uFCE8\\uFCE9\\uFCEA\\uFCEB\\uFCEC\\uFCED\\uFCEE\\uFCEF\\uFCF0\\uFCF1\\uFCF2\\uFCF3\\uFCF4\\uFCF5\\uFCF6\\uFCF7\\uFCF8\\uFCF9\\uFCFA\\uFCFB\\uFCFC\\uFCFD\\uFCFE\\uFCFF\\uFD00\\uFD01\\uFD02\\uFD03\\uFD04\\uFD05\\uFD06\\uFD07\\uFD08\\uFD09\\uFD0A\\uFD0B\\uFD0C\\uFD0D\\uFD0E\\uFD0F\\uFD10\\uFD11\\uFD12\\uFD13\\uFD14\\uFD15\\uFD16\\uFD17\\uFD18\\uFD19\\uFD1A\\uFD1B\\uFD1C\\uFD1D\\uFD1E\\uFD1F\\uFD20\\uFD21\\uFD22\\uFD23\\uFD24\\uFD25\\uFD26\\uFD27\\uFD28\\uFD29\\uFD2A\\uFD2B\\uFD2C\\uFD2D\\uFD2E\\uFD2F\\uFD30\\uFD31\\uFD32\\uFD33\\uFD34\\uFD35\\uFD36\\uFD37\\uFD38\\uFD39\\uFD3A\\uFD3B\\uFD3C\\uFD3D\\uFD50\\uFD51\\uFD52\\uFD53\\uFD54\\uFD55\\uFD56\\uFD57\\uFD58\\uFD59\\uFD5A\\uFD5B\\uFD5C\\uFD5D\\uFD5E\\uFD5F\\uFD60\\uFD61\\uFD62\\uFD63\\uFD64\\uFD65\\uFD66\\uFD67\\uFD68\\uFD69\\uFD6A\\uFD6B\\uFD6C\\uFD6D\\uFD6E\\uFD6F\\uFD70\\uFD71\\uFD72\\uFD73\\uFD74\\uFD75\\uFD76\\uFD77\\uFD78\\uFD79\\uFD7A\\uFD7B\\uFD7C\\uFD7D\\uFD7E\\uFD7F\\uFD80\\uFD81\\uFD82\\uFD83\\uFD84\\uFD85\\uFD86\\uFD87\\uFD88\\uFD89\\uFD8A\\uFD8B\\uFD8C\\uFD8D\\uFD8E\\uFD8F\\uFD92\\uFD93\\uFD94\\uFD95\\uFD96\\uFD97\\uFD98\\uFD99\\uFD9A\\uFD9B\\uFD9C\\uFD9D\\uFD9E\\uFD9F\\uFDA0\\uFDA1\\uFDA2\\uFDA3\\uFDA4\\uFDA5\\uFDA6\\uFDA7\\uFDA8\\uFDA9\\uFDAA\\uFDAB\\uFDAC\\uFDAD\\uFDAE\\uFDAF\\uFDB0\\uFDB1\\uFDB2\\uFDB3\\uFDB4\\uFDB5\\uFDB6\\uFDB7\\uFDB8\\uFDB9\\uFDBA\\uFDBB\\uFDBC\\uFDBD\\uFDBE\\uFDBF\\uFDC0\\uFDC1\\uFDC2\\uFDC3\\uFDC4\\uFDC5\\uFDC6\\uFDC7\\uFDF0\\uFDF1\\uFDF2\\uFDF3\\uFDF4\\uFDF5\\uFDF6\\uFDF7\\uFDF8\\uFDF9\\uFDFA\\uFDFB\\uFE70\\uFE71\\uFE72\\uFE73\\uFE74\\uFE76\\uFE77\\uFE78\\uFE79\\uFE7A\\uFE7B\\uFE7C\\uFE7D\\uFE7E\\uFE7F\\uFE80\\uFE81\\uFE82\\uFE83\\uFE84\\uFE85\\uFE86\\uFE87\\uFE88\\uFE89\\uFE8A\\uFE8B\\uFE8C\\uFE8D\\uFE8E\\uFE8F\\uFE90\\uFE91\\uFE92\\uFE93\\uFE94\\uFE95\\uFE96\\uFE97\\uFE98\\uFE99\\uFE9A\\uFE9B\\uFE9C\\uFE9D\\uFE9E\\uFE9F\\uFEA0\\uFEA1\\uFEA2\\uFEA3\\uFEA4\\uFEA5\\uFEA6\\uFEA7\\uFEA8\\uFEA9\\uFEAA\\uFEAB\\uFEAC\\uFEAD\\uFEAE\\uFEAF\\uFEB0\\uFEB1\\uFEB2\\uFEB3\\uFEB4\\uFEB5\\uFEB6\\uFEB7\\uFEB8\\uFEB9\\uFEBA\\uFEBB\\uFEBC\\uFEBD\\uFEBE\\uFEBF\\uFEC0\\uFEC1\\uFEC2\\uFEC3\\uFEC4\\uFEC5\\uFEC6\\uFEC7\\uFEC8\\uFEC9\\uFECA\\uFECB\\uFECC\\uFECD\\uFECE\\uFECF\\uFED0\\uFED1\\uFED2\\uFED3\\uFED4\\uFED5\\uFED6\\uFED7\\uFED8\\uFED9\\uFEDA\\uFEDB\\uFEDC\\uFEDD\\uFEDE\\uFEDF\\uFEE0\\uFEE1\\uFEE2\\uFEE3\\uFEE4\\uFEE5\\uFEE6\\uFEE7\\uFEE8\\uFEE9\\uFEEA\\uFEEB\\uFEEC\\uFEED\\uFEEE\\uFEEF\\uFEF0\\uFEF1\\uFEF2\\uFEF3\\uFEF4\\uFEF5\\uFEF6\\uFEF7\\uFEF8\\uFEF9\\uFEFA\\uFEFB\\uFEFC\\uFF66\\uFF67\\uFF68\\uFF69\\uFF6A\\uFF6B\\uFF6C\\uFF6D\\uFF6E\\uFF6F\\uFF71\\uFF72\\uFF73\\uFF74\\uFF75\\uFF76\\uFF77\\uFF78\\uFF79\\uFF7A\\uFF7B\\uFF7C\\uFF7D\\uFF7E\\uFF7F\\uFF80\\uFF81\\uFF82\\uFF83\\uFF84\\uFF85\\uFF86\\uFF87\\uFF88\\uFF89\\uFF8A\\uFF8B\\uFF8C\\uFF8D\\uFF8E\\uFF8F\\uFF90\\uFF91\\uFF92\\uFF93\\uFF94\\uFF95\\uFF96\\uFF97\\uFF98\\uFF99\\uFF9A\\uFF9B\\uFF9C\\uFF9D\\uFFA0\\uFFA1\\uFFA2\\uFFA3\\uFFA4\\uFFA5\\uFFA6\\uFFA7\\uFFA8\\uFFA9\\uFFAA\\uFFAB\\uFFAC\\uFFAD\\uFFAE\\uFFAF\\uFFB0\\uFFB1\\uFFB2\\uFFB3\\uFFB4\\uFFB5\\uFFB6\\uFFB7\\uFFB8\\uFFB9\\uFFBA\\uFFBB\\uFFBC\\uFFBD\\uFFBE\\uFFC2\\uFFC3\\uFFC4\\uFFC5\\uFFC6\\uFFC7\\uFFCA\\uFFCB\\uFFCC\\uFFCD\\uFFCE\\uFFCF\\uFFD2\\uFFD3\\uFFD4\\uFFD5\\uFFD6\\uFFD7\\uFFDA\\uFFDB\\uFFDC]" },
        peg$c80 = /^[\u01C5\u01C8\u01CB\u01F2\u1F88\u1F89\u1F8A\u1F8B\u1F8C\u1F8D\u1F8E\u1F8F\u1F98\u1F99\u1F9A\u1F9B\u1F9C\u1F9D\u1F9E\u1F9F\u1FA8\u1FA9\u1FAA\u1FAB\u1FAC\u1FAD\u1FAE\u1FAF\u1FBC\u1FCC\u1FFC]/,
        peg$c81 = { type: "class", value: "[\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88\\u1F89\\u1F8A\\u1F8B\\u1F8C\\u1F8D\\u1F8E\\u1F8F\\u1F98\\u1F99\\u1F9A\\u1F9B\\u1F9C\\u1F9D\\u1F9E\\u1F9F\\u1FA8\\u1FA9\\u1FAA\\u1FAB\\u1FAC\\u1FAD\\u1FAE\\u1FAF\\u1FBC\\u1FCC\\u1FFC]", description: "[\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88\\u1F89\\u1F8A\\u1F8B\\u1F8C\\u1F8D\\u1F8E\\u1F8F\\u1F98\\u1F99\\u1F9A\\u1F9B\\u1F9C\\u1F9D\\u1F9E\\u1F9F\\u1FA8\\u1FA9\\u1FAA\\u1FAB\\u1FAC\\u1FAD\\u1FAE\\u1FAF\\u1FBC\\u1FCC\\u1FFC]" },
        peg$c82 = /^[ABCDEFGHIJKLMNOPQRSTUVWXYZ\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189\u018A\u018B\u018E\u018F\u0190\u0191\u0193\u0194\u0196\u0197\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1\u01B2\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6\u01F7\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243\u0244\u0245\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388\u0389\u038A\u038C\u038E\u038F\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03CF\u03D2\u03D3\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD\u03FE\u03FF\u0400\u0401\u0402\u0403\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\u040D\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0531\u0532\u0533\u0534\u0535\u0536\u0537\u0538\u0539\u053A\u053B\u053C\u053D\u053E\u053F\u0540\u0541\u0542\u0543\u0544\u0545\u0546\u0547\u0548\u0549\u054A\u054B\u054C\u054D\u054E\u054F\u0550\u0551\u0552\u0553\u0554\u0555\u0556\u10A0\u10A1\u10A2\u10A3\u10A4\u10A5\u10A6\u10A7\u10A8\u10A9\u10AA\u10AB\u10AC\u10AD\u10AE\u10AF\u10B0\u10B1\u10B2\u10B3\u10B4\u10B5\u10B6\u10B7\u10B8\u10B9\u10BA\u10BB\u10BC\u10BD\u10BE\u10BF\u10C0\u10C1\u10C2\u10C3\u10C4\u10C5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08\u1F09\u1F0A\u1F0B\u1F0C\u1F0D\u1F0E\u1F0F\u1F18\u1F19\u1F1A\u1F1B\u1F1C\u1F1D\u1F28\u1F29\u1F2A\u1F2B\u1F2C\u1F2D\u1F2E\u1F2F\u1F38\u1F39\u1F3A\u1F3B\u1F3C\u1F3D\u1F3E\u1F3F\u1F48\u1F49\u1F4A\u1F4B\u1F4C\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68\u1F69\u1F6A\u1F6B\u1F6C\u1F6D\u1F6E\u1F6F\u1FB8\u1FB9\u1FBA\u1FBB\u1FC8\u1FC9\u1FCA\u1FCB\u1FD8\u1FD9\u1FDA\u1FDB\u1FE8\u1FE9\u1FEA\u1FEB\u1FEC\u1FF8\u1FF9\u1FFA\u1FFB\u2102\u2107\u210B\u210C\u210D\u2110\u2111\u2112\u2115\u2119\u211A\u211B\u211C\u211D\u2124\u2126\u2128\u212A\u212B\u212C\u212D\u2130\u2131\u2132\u2133\u213E\u213F\u2145\u2183\u2C00\u2C01\u2C02\u2C03\u2C04\u2C05\u2C06\u2C07\u2C08\u2C09\u2C0A\u2C0B\u2C0C\u2C0D\u2C0E\u2C0F\u2C10\u2C11\u2C12\u2C13\u2C14\u2C15\u2C16\u2C17\u2C18\u2C19\u2C1A\u2C1B\u2C1C\u2C1D\u2C1E\u2C1F\u2C20\u2C21\u2C22\u2C23\u2C24\u2C25\u2C26\u2C27\u2C28\u2C29\u2C2A\u2C2B\u2C2C\u2C2D\u2C2E\u2C60\u2C62\u2C63\u2C64\u2C67\u2C69\u2C6B\u2C6D\u2C6E\u2C6F\u2C72\u2C75\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A]/,
        peg$c83 = { type: "class", value: "[ABCDEFGHIJKLMNOPQRSTUVWXYZ\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\xC6\\xC7\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\\xD2\\xD3\\xD4\\xD5\\xD6\\xD8\\xD9\\xDA\\xDB\\xDC\\xDD\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189\\u018A\\u018B\\u018E\\u018F\\u0190\\u0191\\u0193\\u0194\\u0196\\u0197\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1\\u01B2\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6\\u01F7\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243\\u0244\\u0245\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388\\u0389\\u038A\\u038C\\u038E\\u038F\\u0391\\u0392\\u0393\\u0394\\u0395\\u0396\\u0397\\u0398\\u0399\\u039A\\u039B\\u039C\\u039D\\u039E\\u039F\\u03A0\\u03A1\\u03A3\\u03A4\\u03A5\\u03A6\\u03A7\\u03A8\\u03A9\\u03AA\\u03AB\\u03CF\\u03D2\\u03D3\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041A\\u041B\\u041C\\u041D\\u041E\\u041F\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042A\\u042B\\u042C\\u042D\\u042E\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0531\\u0532\\u0533\\u0534\\u0535\\u0536\\u0537\\u0538\\u0539\\u053A\\u053B\\u053C\\u053D\\u053E\\u053F\\u0540\\u0541\\u0542\\u0543\\u0544\\u0545\\u0546\\u0547\\u0548\\u0549\\u054A\\u054B\\u054C\\u054D\\u054E\\u054F\\u0550\\u0551\\u0552\\u0553\\u0554\\u0555\\u0556\\u10A0\\u10A1\\u10A2\\u10A3\\u10A4\\u10A5\\u10A6\\u10A7\\u10A8\\u10A9\\u10AA\\u10AB\\u10AC\\u10AD\\u10AE\\u10AF\\u10B0\\u10B1\\u10B2\\u10B3\\u10B4\\u10B5\\u10B6\\u10B7\\u10B8\\u10B9\\u10BA\\u10BB\\u10BC\\u10BD\\u10BE\\u10BF\\u10C0\\u10C1\\u10C2\\u10C3\\u10C4\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08\\u1F09\\u1F0A\\u1F0B\\u1F0C\\u1F0D\\u1F0E\\u1F0F\\u1F18\\u1F19\\u1F1A\\u1F1B\\u1F1C\\u1F1D\\u1F28\\u1F29\\u1F2A\\u1F2B\\u1F2C\\u1F2D\\u1F2E\\u1F2F\\u1F38\\u1F39\\u1F3A\\u1F3B\\u1F3C\\u1F3D\\u1F3E\\u1F3F\\u1F48\\u1F49\\u1F4A\\u1F4B\\u1F4C\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68\\u1F69\\u1F6A\\u1F6B\\u1F6C\\u1F6D\\u1F6E\\u1F6F\\u1FB8\\u1FB9\\u1FBA\\u1FBB\\u1FC8\\u1FC9\\u1FCA\\u1FCB\\u1FD8\\u1FD9\\u1FDA\\u1FDB\\u1FE8\\u1FE9\\u1FEA\\u1FEB\\u1FEC\\u1FF8\\u1FF9\\u1FFA\\u1FFB\\u2102\\u2107\\u210B\\u210C\\u210D\\u2110\\u2111\\u2112\\u2115\\u2119\\u211A\\u211B\\u211C\\u211D\\u2124\\u2126\\u2128\\u212A\\u212B\\u212C\\u212D\\u2130\\u2131\\u2132\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00\\u2C01\\u2C02\\u2C03\\u2C04\\u2C05\\u2C06\\u2C07\\u2C08\\u2C09\\u2C0A\\u2C0B\\u2C0C\\u2C0D\\u2C0E\\u2C0F\\u2C10\\u2C11\\u2C12\\u2C13\\u2C14\\u2C15\\u2C16\\u2C17\\u2C18\\u2C19\\u2C1A\\u2C1B\\u2C1C\\u2C1D\\u2C1E\\u2C1F\\u2C20\\u2C21\\u2C22\\u2C23\\u2C24\\u2C25\\u2C26\\u2C27\\u2C28\\u2C29\\u2C2A\\u2C2B\\u2C2C\\u2C2D\\u2C2E\\u2C60\\u2C62\\u2C63\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D\\u2C6E\\u2C6F\\u2C72\\u2C75\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uFF21\\uFF22\\uFF23\\uFF24\\uFF25\\uFF26\\uFF27\\uFF28\\uFF29\\uFF2A\\uFF2B\\uFF2C\\uFF2D\\uFF2E\\uFF2F\\uFF30\\uFF31\\uFF32\\uFF33\\uFF34\\uFF35\\uFF36\\uFF37\\uFF38\\uFF39\\uFF3A]", description: "[ABCDEFGHIJKLMNOPQRSTUVWXYZ\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\xC6\\xC7\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\\xD2\\xD3\\xD4\\xD5\\xD6\\xD8\\xD9\\xDA\\xDB\\xDC\\xDD\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189\\u018A\\u018B\\u018E\\u018F\\u0190\\u0191\\u0193\\u0194\\u0196\\u0197\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1\\u01B2\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6\\u01F7\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243\\u0244\\u0245\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388\\u0389\\u038A\\u038C\\u038E\\u038F\\u0391\\u0392\\u0393\\u0394\\u0395\\u0396\\u0397\\u0398\\u0399\\u039A\\u039B\\u039C\\u039D\\u039E\\u039F\\u03A0\\u03A1\\u03A3\\u03A4\\u03A5\\u03A6\\u03A7\\u03A8\\u03A9\\u03AA\\u03AB\\u03CF\\u03D2\\u03D3\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041A\\u041B\\u041C\\u041D\\u041E\\u041F\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042A\\u042B\\u042C\\u042D\\u042E\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0531\\u0532\\u0533\\u0534\\u0535\\u0536\\u0537\\u0538\\u0539\\u053A\\u053B\\u053C\\u053D\\u053E\\u053F\\u0540\\u0541\\u0542\\u0543\\u0544\\u0545\\u0546\\u0547\\u0548\\u0549\\u054A\\u054B\\u054C\\u054D\\u054E\\u054F\\u0550\\u0551\\u0552\\u0553\\u0554\\u0555\\u0556\\u10A0\\u10A1\\u10A2\\u10A3\\u10A4\\u10A5\\u10A6\\u10A7\\u10A8\\u10A9\\u10AA\\u10AB\\u10AC\\u10AD\\u10AE\\u10AF\\u10B0\\u10B1\\u10B2\\u10B3\\u10B4\\u10B5\\u10B6\\u10B7\\u10B8\\u10B9\\u10BA\\u10BB\\u10BC\\u10BD\\u10BE\\u10BF\\u10C0\\u10C1\\u10C2\\u10C3\\u10C4\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08\\u1F09\\u1F0A\\u1F0B\\u1F0C\\u1F0D\\u1F0E\\u1F0F\\u1F18\\u1F19\\u1F1A\\u1F1B\\u1F1C\\u1F1D\\u1F28\\u1F29\\u1F2A\\u1F2B\\u1F2C\\u1F2D\\u1F2E\\u1F2F\\u1F38\\u1F39\\u1F3A\\u1F3B\\u1F3C\\u1F3D\\u1F3E\\u1F3F\\u1F48\\u1F49\\u1F4A\\u1F4B\\u1F4C\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68\\u1F69\\u1F6A\\u1F6B\\u1F6C\\u1F6D\\u1F6E\\u1F6F\\u1FB8\\u1FB9\\u1FBA\\u1FBB\\u1FC8\\u1FC9\\u1FCA\\u1FCB\\u1FD8\\u1FD9\\u1FDA\\u1FDB\\u1FE8\\u1FE9\\u1FEA\\u1FEB\\u1FEC\\u1FF8\\u1FF9\\u1FFA\\u1FFB\\u2102\\u2107\\u210B\\u210C\\u210D\\u2110\\u2111\\u2112\\u2115\\u2119\\u211A\\u211B\\u211C\\u211D\\u2124\\u2126\\u2128\\u212A\\u212B\\u212C\\u212D\\u2130\\u2131\\u2132\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00\\u2C01\\u2C02\\u2C03\\u2C04\\u2C05\\u2C06\\u2C07\\u2C08\\u2C09\\u2C0A\\u2C0B\\u2C0C\\u2C0D\\u2C0E\\u2C0F\\u2C10\\u2C11\\u2C12\\u2C13\\u2C14\\u2C15\\u2C16\\u2C17\\u2C18\\u2C19\\u2C1A\\u2C1B\\u2C1C\\u2C1D\\u2C1E\\u2C1F\\u2C20\\u2C21\\u2C22\\u2C23\\u2C24\\u2C25\\u2C26\\u2C27\\u2C28\\u2C29\\u2C2A\\u2C2B\\u2C2C\\u2C2D\\u2C2E\\u2C60\\u2C62\\u2C63\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D\\u2C6E\\u2C6F\\u2C72\\u2C75\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uFF21\\uFF22\\uFF23\\uFF24\\uFF25\\uFF26\\uFF27\\uFF28\\uFF29\\uFF2A\\uFF2B\\uFF2C\\uFF2D\\uFF2E\\uFF2F\\uFF30\\uFF31\\uFF32\\uFF33\\uFF34\\uFF35\\uFF36\\uFF37\\uFF38\\uFF39\\uFF3A]" },
        peg$c84 = /^[\u0903\u093E\u093F\u0940\u0949\u094A\u094B\u094C\u0982\u0983\u09BE\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E\u0A3F\u0A40\u0A83\u0ABE\u0ABF\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6\u0BC7\u0BC8\u0BCA\u0BCB\u0BCC\u0BD7\u0C01\u0C02\u0C03\u0C41\u0C42\u0C43\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC2\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E\u0D3F\u0D40\u0D46\u0D47\u0D48\u0D4A\u0D4B\u0D4C\u0D57\u0D82\u0D83\u0DCF\u0DD0\u0DD1\u0DD8\u0DD9\u0DDA\u0DDB\u0DDC\u0DDD\u0DDE\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062\u1063\u1064\u1067\u1068\u1069\u106A\u106B\u106C\u106D\u1083\u1084\u1087\u1088\u1089\u108A\u108B\u108C\u108F\u17B6\u17BE\u17BF\u17C0\u17C1\u17C2\u17C3\u17C4\u17C5\u17C7\u17C8\u1923\u1924\u1925\u1926\u1929\u192A\u192B\u1930\u1931\u1933\u1934\u1935\u1936\u1937\u1938\u19B0\u19B1\u19B2\u19B3\u19B4\u19B5\u19B6\u19B7\u19B8\u19B9\u19BA\u19BB\u19BC\u19BD\u19BE\u19BF\u19C0\u19C8\u19C9\u1A19\u1A1A\u1A1B\u1B04\u1B35\u1B3B\u1B3D\u1B3E\u1B3F\u1B40\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1C24\u1C25\u1C26\u1C27\u1C28\u1C29\u1C2A\u1C2B\u1C34\u1C35\uA823\uA824\uA827\uA880\uA881\uA8B4\uA8B5\uA8B6\uA8B7\uA8B8\uA8B9\uA8BA\uA8BB\uA8BC\uA8BD\uA8BE\uA8BF\uA8C0\uA8C1\uA8C2\uA8C3\uA952\uA953\uAA2F\uAA30\uAA33\uAA34\uAA4D]/,
        peg$c85 = { type: "class", value: "[\\u0903\\u093E\\u093F\\u0940\\u0949\\u094A\\u094B\\u094C\\u0982\\u0983\\u09BE\\u09BF\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E\\u0A3F\\u0A40\\u0A83\\u0ABE\\u0ABF\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6\\u0BC7\\u0BC8\\u0BCA\\u0BCB\\u0BCC\\u0BD7\\u0C01\\u0C02\\u0C03\\u0C41\\u0C42\\u0C43\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0\\u0CC1\\u0CC2\\u0CC3\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E\\u0D3F\\u0D40\\u0D46\\u0D47\\u0D48\\u0D4A\\u0D4B\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF\\u0DD0\\u0DD1\\u0DD8\\u0DD9\\u0DDA\\u0DDB\\u0DDC\\u0DDD\\u0DDE\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062\\u1063\\u1064\\u1067\\u1068\\u1069\\u106A\\u106B\\u106C\\u106D\\u1083\\u1084\\u1087\\u1088\\u1089\\u108A\\u108B\\u108C\\u108F\\u17B6\\u17BE\\u17BF\\u17C0\\u17C1\\u17C2\\u17C3\\u17C4\\u17C5\\u17C7\\u17C8\\u1923\\u1924\\u1925\\u1926\\u1929\\u192A\\u192B\\u1930\\u1931\\u1933\\u1934\\u1935\\u1936\\u1937\\u1938\\u19B0\\u19B1\\u19B2\\u19B3\\u19B4\\u19B5\\u19B6\\u19B7\\u19B8\\u19B9\\u19BA\\u19BB\\u19BC\\u19BD\\u19BE\\u19BF\\u19C0\\u19C8\\u19C9\\u1A19\\u1A1A\\u1A1B\\u1B04\\u1B35\\u1B3B\\u1B3D\\u1B3E\\u1B3F\\u1B40\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1C24\\u1C25\\u1C26\\u1C27\\u1C28\\u1C29\\u1C2A\\u1C2B\\u1C34\\u1C35\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4\\uA8B5\\uA8B6\\uA8B7\\uA8B8\\uA8B9\\uA8BA\\uA8BB\\uA8BC\\uA8BD\\uA8BE\\uA8BF\\uA8C0\\uA8C1\\uA8C2\\uA8C3\\uA952\\uA953\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D]", description: "[\\u0903\\u093E\\u093F\\u0940\\u0949\\u094A\\u094B\\u094C\\u0982\\u0983\\u09BE\\u09BF\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E\\u0A3F\\u0A40\\u0A83\\u0ABE\\u0ABF\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6\\u0BC7\\u0BC8\\u0BCA\\u0BCB\\u0BCC\\u0BD7\\u0C01\\u0C02\\u0C03\\u0C41\\u0C42\\u0C43\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0\\u0CC1\\u0CC2\\u0CC3\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E\\u0D3F\\u0D40\\u0D46\\u0D47\\u0D48\\u0D4A\\u0D4B\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF\\u0DD0\\u0DD1\\u0DD8\\u0DD9\\u0DDA\\u0DDB\\u0DDC\\u0DDD\\u0DDE\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062\\u1063\\u1064\\u1067\\u1068\\u1069\\u106A\\u106B\\u106C\\u106D\\u1083\\u1084\\u1087\\u1088\\u1089\\u108A\\u108B\\u108C\\u108F\\u17B6\\u17BE\\u17BF\\u17C0\\u17C1\\u17C2\\u17C3\\u17C4\\u17C5\\u17C7\\u17C8\\u1923\\u1924\\u1925\\u1926\\u1929\\u192A\\u192B\\u1930\\u1931\\u1933\\u1934\\u1935\\u1936\\u1937\\u1938\\u19B0\\u19B1\\u19B2\\u19B3\\u19B4\\u19B5\\u19B6\\u19B7\\u19B8\\u19B9\\u19BA\\u19BB\\u19BC\\u19BD\\u19BE\\u19BF\\u19C0\\u19C8\\u19C9\\u1A19\\u1A1A\\u1A1B\\u1B04\\u1B35\\u1B3B\\u1B3D\\u1B3E\\u1B3F\\u1B40\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1C24\\u1C25\\u1C26\\u1C27\\u1C28\\u1C29\\u1C2A\\u1C2B\\u1C34\\u1C35\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4\\uA8B5\\uA8B6\\uA8B7\\uA8B8\\uA8B9\\uA8BA\\uA8BB\\uA8BC\\uA8BD\\uA8BE\\uA8BF\\uA8C0\\uA8C1\\uA8C2\\uA8C3\\uA952\\uA953\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D]" },
        peg$c86 = /^[\u0300\u0301\u0302\u0303\u0304\u0305\u0306\u0307\u0308\u0309\u030A\u030B\u030C\u030D\u030E\u030F\u0310\u0311\u0312\u0313\u0314\u0315\u0316\u0317\u0318\u0319\u031A\u031B\u031C\u031D\u031E\u031F\u0320\u0321\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u032A\u032B\u032C\u032D\u032E\u032F\u0330\u0331\u0332\u0333\u0334\u0335\u0336\u0337\u0338\u0339\u033A\u033B\u033C\u033D\u033E\u033F\u0340\u0341\u0342\u0343\u0344\u0345\u0346\u0347\u0348\u0349\u034A\u034B\u034C\u034D\u034E\u034F\u0350\u0351\u0352\u0353\u0354\u0355\u0356\u0357\u0358\u0359\u035A\u035B\u035C\u035D\u035E\u035F\u0360\u0361\u0362\u0363\u0364\u0365\u0366\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u0483\u0484\u0485\u0486\u0487\u0591\u0592\u0593\u0594\u0595\u0596\u0597\u0598\u0599\u059A\u059B\u059C\u059D\u059E\u059F\u05A0\u05A1\u05A2\u05A3\u05A4\u05A5\u05A6\u05A7\u05A8\u05A9\u05AA\u05AB\u05AC\u05AD\u05AE\u05AF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\u05BA\u05BB\u05BC\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610\u0611\u0612\u0613\u0614\u0615\u0616\u0617\u0618\u0619\u061A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\u0653\u0654\u0655\u0656\u0657\u0658\u0659\u065A\u065B\u065C\u065D\u065E\u0670\u06D6\u06D7\u06D8\u06D9\u06DA\u06DB\u06DC\u06DF\u06E0\u06E1\u06E2\u06E3\u06E4\u06E7\u06E8\u06EA\u06EB\u06EC\u06ED\u0711\u0730\u0731\u0732\u0733\u0734\u0735\u0736\u0737\u0738\u0739\u073A\u073B\u073C\u073D\u073E\u073F\u0740\u0741\u0742\u0743\u0744\u0745\u0746\u0747\u0748\u0749\u074A\u07A6\u07A7\u07A8\u07A9\u07AA\u07AB\u07AC\u07AD\u07AE\u07AF\u07B0\u07EB\u07EC\u07ED\u07EE\u07EF\u07F0\u07F1\u07F2\u07F3\u0901\u0902\u093C\u0941\u0942\u0943\u0944\u0945\u0946\u0947\u0948\u094D\u0951\u0952\u0953\u0954\u0962\u0963\u0981\u09BC\u09C1\u09C2\u09C3\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1\u0AC2\u0AC3\u0AC4\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41\u0B42\u0B43\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C3E\u0C3F\u0C40\u0C46\u0C47\u0C48\u0C4A\u0C4B\u0C4C\u0C4D\u0C55\u0C56\u0C62\u0C63\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D41\u0D42\u0D43\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2\u0DD3\u0DD4\u0DD6\u0E31\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0EB1\u0EB4\u0EB5\u0EB6\u0EB7\u0EB8\u0EB9\u0EBB\u0EBC\u0EC8\u0EC9\u0ECA\u0ECB\u0ECC\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71\u0F72\u0F73\u0F74\u0F75\u0F76\u0F77\u0F78\u0F79\u0F7A\u0F7B\u0F7C\u0F7D\u0F7E\u0F80\u0F81\u0F82\u0F83\u0F84\u0F86\u0F87\u0F90\u0F91\u0F92\u0F93\u0F94\u0F95\u0F96\u0F97\u0F99\u0F9A\u0F9B\u0F9C\u0F9D\u0F9E\u0F9F\u0FA0\u0FA1\u0FA2\u0FA3\u0FA4\u0FA5\u0FA6\u0FA7\u0FA8\u0FA9\u0FAA\u0FAB\u0FAC\u0FAD\u0FAE\u0FAF\u0FB0\u0FB1\u0FB2\u0FB3\u0FB4\u0FB5\u0FB6\u0FB7\u0FB8\u0FB9\u0FBA\u0FBB\u0FBC\u0FC6\u102D\u102E\u102F\u1030\u1032\u1033\u1034\u1035\u1036\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E\u105F\u1060\u1071\u1072\u1073\u1074\u1082\u1085\u1086\u108D\u135F\u1712\u1713\u1714\u1732\u1733\u1734\u1752\u1753\u1772\u1773\u17B7\u17B8\u17B9\u17BA\u17BB\u17BC\u17BD\u17C6\u17C9\u17CA\u17CB\u17CC\u17CD\u17CE\u17CF\u17D0\u17D1\u17D2\u17D3\u17DD\u180B\u180C\u180D\u18A9\u1920\u1921\u1922\u1927\u1928\u1932\u1939\u193A\u193B\u1A17\u1A18\u1B00\u1B01\u1B02\u1B03\u1B34\u1B36\u1B37\u1B38\u1B39\u1B3A\u1B3C\u1B42\u1B6B\u1B6C\u1B6D\u1B6E\u1B6F\u1B70\u1B71\u1B72\u1B73\u1B80\u1B81\u1BA2\u1BA3\u1BA4\u1BA5\u1BA8\u1BA9\u1C2C\u1C2D\u1C2E\u1C2F\u1C30\u1C31\u1C32\u1C33\u1C36\u1C37\u1DC0\u1DC1\u1DC2\u1DC3\u1DC4\u1DC5\u1DC6\u1DC7\u1DC8\u1DC9\u1DCA\u1DCB\u1DCC\u1DCD\u1DCE\u1DCF\u1DD0\u1DD1\u1DD2\u1DD3\u1DD4\u1DD5\u1DD6\u1DD7\u1DD8\u1DD9\u1DDA\u1DDB\u1DDC\u1DDD\u1DDE\u1DDF\u1DE0\u1DE1\u1DE2\u1DE3\u1DE4\u1DE5\u1DE6\u1DFE\u1DFF\u20D0\u20D1\u20D2\u20D3\u20D4\u20D5\u20D6\u20D7\u20D8\u20D9\u20DA\u20DB\u20DC\u20E1\u20E5\u20E6\u20E7\u20E8\u20E9\u20EA\u20EB\u20EC\u20ED\u20EE\u20EF\u20F0\u2DE0\u2DE1\u2DE2\u2DE3\u2DE4\u2DE5\u2DE6\u2DE7\u2DE8\u2DE9\u2DEA\u2DEB\u2DEC\u2DED\u2DEE\u2DEF\u2DF0\u2DF1\u2DF2\u2DF3\u2DF4\u2DF5\u2DF6\u2DF7\u2DF8\u2DF9\u2DFA\u2DFB\u2DFC\u2DFD\u2DFE\u2DFF\u302A\u302B\u302C\u302D\u302E\u302F\u3099\u309A\uA66F\uA67C\uA67D\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA926\uA927\uA928\uA929\uA92A\uA92B\uA92C\uA92D\uA947\uA948\uA949\uA94A\uA94B\uA94C\uA94D\uA94E\uA94F\uA950\uA951\uAA29\uAA2A\uAA2B\uAA2C\uAA2D\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uFB1E\uFE00\uFE01\uFE02\uFE03\uFE04\uFE05\uFE06\uFE07\uFE08\uFE09\uFE0A\uFE0B\uFE0C\uFE0D\uFE0E\uFE0F\uFE20\uFE21\uFE22\uFE23\uFE24\uFE25\uFE26]/,
        peg$c87 = { type: "class", value: "[\\u0300\\u0301\\u0302\\u0303\\u0304\\u0305\\u0306\\u0307\\u0308\\u0309\\u030A\\u030B\\u030C\\u030D\\u030E\\u030F\\u0310\\u0311\\u0312\\u0313\\u0314\\u0315\\u0316\\u0317\\u0318\\u0319\\u031A\\u031B\\u031C\\u031D\\u031E\\u031F\\u0320\\u0321\\u0322\\u0323\\u0324\\u0325\\u0326\\u0327\\u0328\\u0329\\u032A\\u032B\\u032C\\u032D\\u032E\\u032F\\u0330\\u0331\\u0332\\u0333\\u0334\\u0335\\u0336\\u0337\\u0338\\u0339\\u033A\\u033B\\u033C\\u033D\\u033E\\u033F\\u0340\\u0341\\u0342\\u0343\\u0344\\u0345\\u0346\\u0347\\u0348\\u0349\\u034A\\u034B\\u034C\\u034D\\u034E\\u034F\\u0350\\u0351\\u0352\\u0353\\u0354\\u0355\\u0356\\u0357\\u0358\\u0359\\u035A\\u035B\\u035C\\u035D\\u035E\\u035F\\u0360\\u0361\\u0362\\u0363\\u0364\\u0365\\u0366\\u0367\\u0368\\u0369\\u036A\\u036B\\u036C\\u036D\\u036E\\u036F\\u0483\\u0484\\u0485\\u0486\\u0487\\u0591\\u0592\\u0593\\u0594\\u0595\\u0596\\u0597\\u0598\\u0599\\u059A\\u059B\\u059C\\u059D\\u059E\\u059F\\u05A0\\u05A1\\u05A2\\u05A3\\u05A4\\u05A5\\u05A6\\u05A7\\u05A8\\u05A9\\u05AA\\u05AB\\u05AC\\u05AD\\u05AE\\u05AF\\u05B0\\u05B1\\u05B2\\u05B3\\u05B4\\u05B5\\u05B6\\u05B7\\u05B8\\u05B9\\u05BA\\u05BB\\u05BC\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610\\u0611\\u0612\\u0613\\u0614\\u0615\\u0616\\u0617\\u0618\\u0619\\u061A\\u064B\\u064C\\u064D\\u064E\\u064F\\u0650\\u0651\\u0652\\u0653\\u0654\\u0655\\u0656\\u0657\\u0658\\u0659\\u065A\\u065B\\u065C\\u065D\\u065E\\u0670\\u06D6\\u06D7\\u06D8\\u06D9\\u06DA\\u06DB\\u06DC\\u06DF\\u06E0\\u06E1\\u06E2\\u06E3\\u06E4\\u06E7\\u06E8\\u06EA\\u06EB\\u06EC\\u06ED\\u0711\\u0730\\u0731\\u0732\\u0733\\u0734\\u0735\\u0736\\u0737\\u0738\\u0739\\u073A\\u073B\\u073C\\u073D\\u073E\\u073F\\u0740\\u0741\\u0742\\u0743\\u0744\\u0745\\u0746\\u0747\\u0748\\u0749\\u074A\\u07A6\\u07A7\\u07A8\\u07A9\\u07AA\\u07AB\\u07AC\\u07AD\\u07AE\\u07AF\\u07B0\\u07EB\\u07EC\\u07ED\\u07EE\\u07EF\\u07F0\\u07F1\\u07F2\\u07F3\\u0901\\u0902\\u093C\\u0941\\u0942\\u0943\\u0944\\u0945\\u0946\\u0947\\u0948\\u094D\\u0951\\u0952\\u0953\\u0954\\u0962\\u0963\\u0981\\u09BC\\u09C1\\u09C2\\u09C3\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1\\u0AC2\\u0AC3\\u0AC4\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41\\u0B42\\u0B43\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E\\u0C3F\\u0C40\\u0C46\\u0C47\\u0C48\\u0C4A\\u0C4B\\u0C4C\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41\\u0D42\\u0D43\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2\\u0DD3\\u0DD4\\u0DD6\\u0E31\\u0E34\\u0E35\\u0E36\\u0E37\\u0E38\\u0E39\\u0E3A\\u0E47\\u0E48\\u0E49\\u0E4A\\u0E4B\\u0E4C\\u0E4D\\u0E4E\\u0EB1\\u0EB4\\u0EB5\\u0EB6\\u0EB7\\u0EB8\\u0EB9\\u0EBB\\u0EBC\\u0EC8\\u0EC9\\u0ECA\\u0ECB\\u0ECC\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71\\u0F72\\u0F73\\u0F74\\u0F75\\u0F76\\u0F77\\u0F78\\u0F79\\u0F7A\\u0F7B\\u0F7C\\u0F7D\\u0F7E\\u0F80\\u0F81\\u0F82\\u0F83\\u0F84\\u0F86\\u0F87\\u0F90\\u0F91\\u0F92\\u0F93\\u0F94\\u0F95\\u0F96\\u0F97\\u0F99\\u0F9A\\u0F9B\\u0F9C\\u0F9D\\u0F9E\\u0F9F\\u0FA0\\u0FA1\\u0FA2\\u0FA3\\u0FA4\\u0FA5\\u0FA6\\u0FA7\\u0FA8\\u0FA9\\u0FAA\\u0FAB\\u0FAC\\u0FAD\\u0FAE\\u0FAF\\u0FB0\\u0FB1\\u0FB2\\u0FB3\\u0FB4\\u0FB5\\u0FB6\\u0FB7\\u0FB8\\u0FB9\\u0FBA\\u0FBB\\u0FBC\\u0FC6\\u102D\\u102E\\u102F\\u1030\\u1032\\u1033\\u1034\\u1035\\u1036\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E\\u105F\\u1060\\u1071\\u1072\\u1073\\u1074\\u1082\\u1085\\u1086\\u108D\\u135F\\u1712\\u1713\\u1714\\u1732\\u1733\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7\\u17B8\\u17B9\\u17BA\\u17BB\\u17BC\\u17BD\\u17C6\\u17C9\\u17CA\\u17CB\\u17CC\\u17CD\\u17CE\\u17CF\\u17D0\\u17D1\\u17D2\\u17D3\\u17DD\\u180B\\u180C\\u180D\\u18A9\\u1920\\u1921\\u1922\\u1927\\u1928\\u1932\\u1939\\u193A\\u193B\\u1A17\\u1A18\\u1B00\\u1B01\\u1B02\\u1B03\\u1B34\\u1B36\\u1B37\\u1B38\\u1B39\\u1B3A\\u1B3C\\u1B42\\u1B6B\\u1B6C\\u1B6D\\u1B6E\\u1B6F\\u1B70\\u1B71\\u1B72\\u1B73\\u1B80\\u1B81\\u1BA2\\u1BA3\\u1BA4\\u1BA5\\u1BA8\\u1BA9\\u1C2C\\u1C2D\\u1C2E\\u1C2F\\u1C30\\u1C31\\u1C32\\u1C33\\u1C36\\u1C37\\u1DC0\\u1DC1\\u1DC2\\u1DC3\\u1DC4\\u1DC5\\u1DC6\\u1DC7\\u1DC8\\u1DC9\\u1DCA\\u1DCB\\u1DCC\\u1DCD\\u1DCE\\u1DCF\\u1DD0\\u1DD1\\u1DD2\\u1DD3\\u1DD4\\u1DD5\\u1DD6\\u1DD7\\u1DD8\\u1DD9\\u1DDA\\u1DDB\\u1DDC\\u1DDD\\u1DDE\\u1DDF\\u1DE0\\u1DE1\\u1DE2\\u1DE3\\u1DE4\\u1DE5\\u1DE6\\u1DFE\\u1DFF\\u20D0\\u20D1\\u20D2\\u20D3\\u20D4\\u20D5\\u20D6\\u20D7\\u20D8\\u20D9\\u20DA\\u20DB\\u20DC\\u20E1\\u20E5\\u20E6\\u20E7\\u20E8\\u20E9\\u20EA\\u20EB\\u20EC\\u20ED\\u20EE\\u20EF\\u20F0\\u2DE0\\u2DE1\\u2DE2\\u2DE3\\u2DE4\\u2DE5\\u2DE6\\u2DE7\\u2DE8\\u2DE9\\u2DEA\\u2DEB\\u2DEC\\u2DED\\u2DEE\\u2DEF\\u2DF0\\u2DF1\\u2DF2\\u2DF3\\u2DF4\\u2DF5\\u2DF6\\u2DF7\\u2DF8\\u2DF9\\u2DFA\\u2DFB\\u2DFC\\u2DFD\\u2DFE\\u2DFF\\u302A\\u302B\\u302C\\u302D\\u302E\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA926\\uA927\\uA928\\uA929\\uA92A\\uA92B\\uA92C\\uA92D\\uA947\\uA948\\uA949\\uA94A\\uA94B\\uA94C\\uA94D\\uA94E\\uA94F\\uA950\\uA951\\uAA29\\uAA2A\\uAA2B\\uAA2C\\uAA2D\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uFB1E\\uFE00\\uFE01\\uFE02\\uFE03\\uFE04\\uFE05\\uFE06\\uFE07\\uFE08\\uFE09\\uFE0A\\uFE0B\\uFE0C\\uFE0D\\uFE0E\\uFE0F\\uFE20\\uFE21\\uFE22\\uFE23\\uFE24\\uFE25\\uFE26]", description: "[\\u0300\\u0301\\u0302\\u0303\\u0304\\u0305\\u0306\\u0307\\u0308\\u0309\\u030A\\u030B\\u030C\\u030D\\u030E\\u030F\\u0310\\u0311\\u0312\\u0313\\u0314\\u0315\\u0316\\u0317\\u0318\\u0319\\u031A\\u031B\\u031C\\u031D\\u031E\\u031F\\u0320\\u0321\\u0322\\u0323\\u0324\\u0325\\u0326\\u0327\\u0328\\u0329\\u032A\\u032B\\u032C\\u032D\\u032E\\u032F\\u0330\\u0331\\u0332\\u0333\\u0334\\u0335\\u0336\\u0337\\u0338\\u0339\\u033A\\u033B\\u033C\\u033D\\u033E\\u033F\\u0340\\u0341\\u0342\\u0343\\u0344\\u0345\\u0346\\u0347\\u0348\\u0349\\u034A\\u034B\\u034C\\u034D\\u034E\\u034F\\u0350\\u0351\\u0352\\u0353\\u0354\\u0355\\u0356\\u0357\\u0358\\u0359\\u035A\\u035B\\u035C\\u035D\\u035E\\u035F\\u0360\\u0361\\u0362\\u0363\\u0364\\u0365\\u0366\\u0367\\u0368\\u0369\\u036A\\u036B\\u036C\\u036D\\u036E\\u036F\\u0483\\u0484\\u0485\\u0486\\u0487\\u0591\\u0592\\u0593\\u0594\\u0595\\u0596\\u0597\\u0598\\u0599\\u059A\\u059B\\u059C\\u059D\\u059E\\u059F\\u05A0\\u05A1\\u05A2\\u05A3\\u05A4\\u05A5\\u05A6\\u05A7\\u05A8\\u05A9\\u05AA\\u05AB\\u05AC\\u05AD\\u05AE\\u05AF\\u05B0\\u05B1\\u05B2\\u05B3\\u05B4\\u05B5\\u05B6\\u05B7\\u05B8\\u05B9\\u05BA\\u05BB\\u05BC\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610\\u0611\\u0612\\u0613\\u0614\\u0615\\u0616\\u0617\\u0618\\u0619\\u061A\\u064B\\u064C\\u064D\\u064E\\u064F\\u0650\\u0651\\u0652\\u0653\\u0654\\u0655\\u0656\\u0657\\u0658\\u0659\\u065A\\u065B\\u065C\\u065D\\u065E\\u0670\\u06D6\\u06D7\\u06D8\\u06D9\\u06DA\\u06DB\\u06DC\\u06DF\\u06E0\\u06E1\\u06E2\\u06E3\\u06E4\\u06E7\\u06E8\\u06EA\\u06EB\\u06EC\\u06ED\\u0711\\u0730\\u0731\\u0732\\u0733\\u0734\\u0735\\u0736\\u0737\\u0738\\u0739\\u073A\\u073B\\u073C\\u073D\\u073E\\u073F\\u0740\\u0741\\u0742\\u0743\\u0744\\u0745\\u0746\\u0747\\u0748\\u0749\\u074A\\u07A6\\u07A7\\u07A8\\u07A9\\u07AA\\u07AB\\u07AC\\u07AD\\u07AE\\u07AF\\u07B0\\u07EB\\u07EC\\u07ED\\u07EE\\u07EF\\u07F0\\u07F1\\u07F2\\u07F3\\u0901\\u0902\\u093C\\u0941\\u0942\\u0943\\u0944\\u0945\\u0946\\u0947\\u0948\\u094D\\u0951\\u0952\\u0953\\u0954\\u0962\\u0963\\u0981\\u09BC\\u09C1\\u09C2\\u09C3\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1\\u0AC2\\u0AC3\\u0AC4\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41\\u0B42\\u0B43\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E\\u0C3F\\u0C40\\u0C46\\u0C47\\u0C48\\u0C4A\\u0C4B\\u0C4C\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41\\u0D42\\u0D43\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2\\u0DD3\\u0DD4\\u0DD6\\u0E31\\u0E34\\u0E35\\u0E36\\u0E37\\u0E38\\u0E39\\u0E3A\\u0E47\\u0E48\\u0E49\\u0E4A\\u0E4B\\u0E4C\\u0E4D\\u0E4E\\u0EB1\\u0EB4\\u0EB5\\u0EB6\\u0EB7\\u0EB8\\u0EB9\\u0EBB\\u0EBC\\u0EC8\\u0EC9\\u0ECA\\u0ECB\\u0ECC\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71\\u0F72\\u0F73\\u0F74\\u0F75\\u0F76\\u0F77\\u0F78\\u0F79\\u0F7A\\u0F7B\\u0F7C\\u0F7D\\u0F7E\\u0F80\\u0F81\\u0F82\\u0F83\\u0F84\\u0F86\\u0F87\\u0F90\\u0F91\\u0F92\\u0F93\\u0F94\\u0F95\\u0F96\\u0F97\\u0F99\\u0F9A\\u0F9B\\u0F9C\\u0F9D\\u0F9E\\u0F9F\\u0FA0\\u0FA1\\u0FA2\\u0FA3\\u0FA4\\u0FA5\\u0FA6\\u0FA7\\u0FA8\\u0FA9\\u0FAA\\u0FAB\\u0FAC\\u0FAD\\u0FAE\\u0FAF\\u0FB0\\u0FB1\\u0FB2\\u0FB3\\u0FB4\\u0FB5\\u0FB6\\u0FB7\\u0FB8\\u0FB9\\u0FBA\\u0FBB\\u0FBC\\u0FC6\\u102D\\u102E\\u102F\\u1030\\u1032\\u1033\\u1034\\u1035\\u1036\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E\\u105F\\u1060\\u1071\\u1072\\u1073\\u1074\\u1082\\u1085\\u1086\\u108D\\u135F\\u1712\\u1713\\u1714\\u1732\\u1733\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7\\u17B8\\u17B9\\u17BA\\u17BB\\u17BC\\u17BD\\u17C6\\u17C9\\u17CA\\u17CB\\u17CC\\u17CD\\u17CE\\u17CF\\u17D0\\u17D1\\u17D2\\u17D3\\u17DD\\u180B\\u180C\\u180D\\u18A9\\u1920\\u1921\\u1922\\u1927\\u1928\\u1932\\u1939\\u193A\\u193B\\u1A17\\u1A18\\u1B00\\u1B01\\u1B02\\u1B03\\u1B34\\u1B36\\u1B37\\u1B38\\u1B39\\u1B3A\\u1B3C\\u1B42\\u1B6B\\u1B6C\\u1B6D\\u1B6E\\u1B6F\\u1B70\\u1B71\\u1B72\\u1B73\\u1B80\\u1B81\\u1BA2\\u1BA3\\u1BA4\\u1BA5\\u1BA8\\u1BA9\\u1C2C\\u1C2D\\u1C2E\\u1C2F\\u1C30\\u1C31\\u1C32\\u1C33\\u1C36\\u1C37\\u1DC0\\u1DC1\\u1DC2\\u1DC3\\u1DC4\\u1DC5\\u1DC6\\u1DC7\\u1DC8\\u1DC9\\u1DCA\\u1DCB\\u1DCC\\u1DCD\\u1DCE\\u1DCF\\u1DD0\\u1DD1\\u1DD2\\u1DD3\\u1DD4\\u1DD5\\u1DD6\\u1DD7\\u1DD8\\u1DD9\\u1DDA\\u1DDB\\u1DDC\\u1DDD\\u1DDE\\u1DDF\\u1DE0\\u1DE1\\u1DE2\\u1DE3\\u1DE4\\u1DE5\\u1DE6\\u1DFE\\u1DFF\\u20D0\\u20D1\\u20D2\\u20D3\\u20D4\\u20D5\\u20D6\\u20D7\\u20D8\\u20D9\\u20DA\\u20DB\\u20DC\\u20E1\\u20E5\\u20E6\\u20E7\\u20E8\\u20E9\\u20EA\\u20EB\\u20EC\\u20ED\\u20EE\\u20EF\\u20F0\\u2DE0\\u2DE1\\u2DE2\\u2DE3\\u2DE4\\u2DE5\\u2DE6\\u2DE7\\u2DE8\\u2DE9\\u2DEA\\u2DEB\\u2DEC\\u2DED\\u2DEE\\u2DEF\\u2DF0\\u2DF1\\u2DF2\\u2DF3\\u2DF4\\u2DF5\\u2DF6\\u2DF7\\u2DF8\\u2DF9\\u2DFA\\u2DFB\\u2DFC\\u2DFD\\u2DFE\\u2DFF\\u302A\\u302B\\u302C\\u302D\\u302E\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA926\\uA927\\uA928\\uA929\\uA92A\\uA92B\\uA92C\\uA92D\\uA947\\uA948\\uA949\\uA94A\\uA94B\\uA94C\\uA94D\\uA94E\\uA94F\\uA950\\uA951\\uAA29\\uAA2A\\uAA2B\\uAA2C\\uAA2D\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uFB1E\\uFE00\\uFE01\\uFE02\\uFE03\\uFE04\\uFE05\\uFE06\\uFE07\\uFE08\\uFE09\\uFE0A\\uFE0B\\uFE0C\\uFE0D\\uFE0E\\uFE0F\\uFE20\\uFE21\\uFE22\\uFE23\\uFE24\\uFE25\\uFE26]" },
        peg$c88 = /^[0123456789\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9\u07C0\u07C1\u07C2\u07C3\u07C4\u07C5\u07C6\u07C7\u07C8\u07C9\u0966\u0967\u0968\u0969\u096A\u096B\u096C\u096D\u096E\u096F\u09E6\u09E7\u09E8\u09E9\u09EA\u09EB\u09EC\u09ED\u09EE\u09EF\u0A66\u0A67\u0A68\u0A69\u0A6A\u0A6B\u0A6C\u0A6D\u0A6E\u0A6F\u0AE6\u0AE7\u0AE8\u0AE9\u0AEA\u0AEB\u0AEC\u0AED\u0AEE\u0AEF\u0B66\u0B67\u0B68\u0B69\u0B6A\u0B6B\u0B6C\u0B6D\u0B6E\u0B6F\u0BE6\u0BE7\u0BE8\u0BE9\u0BEA\u0BEB\u0BEC\u0BED\u0BEE\u0BEF\u0C66\u0C67\u0C68\u0C69\u0C6A\u0C6B\u0C6C\u0C6D\u0C6E\u0C6F\u0CE6\u0CE7\u0CE8\u0CE9\u0CEA\u0CEB\u0CEC\u0CED\u0CEE\u0CEF\u0D66\u0D67\u0D68\u0D69\u0D6A\u0D6B\u0D6C\u0D6D\u0D6E\u0D6F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0ED0\u0ED1\u0ED2\u0ED3\u0ED4\u0ED5\u0ED6\u0ED7\u0ED8\u0ED9\u0F20\u0F21\u0F22\u0F23\u0F24\u0F25\u0F26\u0F27\u0F28\u0F29\u1040\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1090\u1091\u1092\u1093\u1094\u1095\u1096\u1097\u1098\u1099\u17E0\u17E1\u17E2\u17E3\u17E4\u17E5\u17E6\u17E7\u17E8\u17E9\u1810\u1811\u1812\u1813\u1814\u1815\u1816\u1817\u1818\u1819\u1946\u1947\u1948\u1949\u194A\u194B\u194C\u194D\u194E\u194F\u19D0\u19D1\u19D2\u19D3\u19D4\u19D5\u19D6\u19D7\u19D8\u19D9\u1B50\u1B51\u1B52\u1B53\u1B54\u1B55\u1B56\u1B57\u1B58\u1B59\u1BB0\u1BB1\u1BB2\u1BB3\u1BB4\u1BB5\u1BB6\u1BB7\u1BB8\u1BB9\u1C40\u1C41\u1C42\u1C43\u1C44\u1C45\u1C46\u1C47\u1C48\u1C49\u1C50\u1C51\u1C52\u1C53\u1C54\u1C55\u1C56\u1C57\u1C58\u1C59\uA620\uA621\uA622\uA623\uA624\uA625\uA626\uA627\uA628\uA629\uA8D0\uA8D1\uA8D2\uA8D3\uA8D4\uA8D5\uA8D6\uA8D7\uA8D8\uA8D9\uA900\uA901\uA902\uA903\uA904\uA905\uA906\uA907\uA908\uA909\uAA50\uAA51\uAA52\uAA53\uAA54\uAA55\uAA56\uAA57\uAA58\uAA59\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19]/,
        peg$c89 = { type: "class", value: "[0123456789\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\\u06F0\\u06F1\\u06F2\\u06F3\\u06F4\\u06F5\\u06F6\\u06F7\\u06F8\\u06F9\\u07C0\\u07C1\\u07C2\\u07C3\\u07C4\\u07C5\\u07C6\\u07C7\\u07C8\\u07C9\\u0966\\u0967\\u0968\\u0969\\u096A\\u096B\\u096C\\u096D\\u096E\\u096F\\u09E6\\u09E7\\u09E8\\u09E9\\u09EA\\u09EB\\u09EC\\u09ED\\u09EE\\u09EF\\u0A66\\u0A67\\u0A68\\u0A69\\u0A6A\\u0A6B\\u0A6C\\u0A6D\\u0A6E\\u0A6F\\u0AE6\\u0AE7\\u0AE8\\u0AE9\\u0AEA\\u0AEB\\u0AEC\\u0AED\\u0AEE\\u0AEF\\u0B66\\u0B67\\u0B68\\u0B69\\u0B6A\\u0B6B\\u0B6C\\u0B6D\\u0B6E\\u0B6F\\u0BE6\\u0BE7\\u0BE8\\u0BE9\\u0BEA\\u0BEB\\u0BEC\\u0BED\\u0BEE\\u0BEF\\u0C66\\u0C67\\u0C68\\u0C69\\u0C6A\\u0C6B\\u0C6C\\u0C6D\\u0C6E\\u0C6F\\u0CE6\\u0CE7\\u0CE8\\u0CE9\\u0CEA\\u0CEB\\u0CEC\\u0CED\\u0CEE\\u0CEF\\u0D66\\u0D67\\u0D68\\u0D69\\u0D6A\\u0D6B\\u0D6C\\u0D6D\\u0D6E\\u0D6F\\u0E50\\u0E51\\u0E52\\u0E53\\u0E54\\u0E55\\u0E56\\u0E57\\u0E58\\u0E59\\u0ED0\\u0ED1\\u0ED2\\u0ED3\\u0ED4\\u0ED5\\u0ED6\\u0ED7\\u0ED8\\u0ED9\\u0F20\\u0F21\\u0F22\\u0F23\\u0F24\\u0F25\\u0F26\\u0F27\\u0F28\\u0F29\\u1040\\u1041\\u1042\\u1043\\u1044\\u1045\\u1046\\u1047\\u1048\\u1049\\u1090\\u1091\\u1092\\u1093\\u1094\\u1095\\u1096\\u1097\\u1098\\u1099\\u17E0\\u17E1\\u17E2\\u17E3\\u17E4\\u17E5\\u17E6\\u17E7\\u17E8\\u17E9\\u1810\\u1811\\u1812\\u1813\\u1814\\u1815\\u1816\\u1817\\u1818\\u1819\\u1946\\u1947\\u1948\\u1949\\u194A\\u194B\\u194C\\u194D\\u194E\\u194F\\u19D0\\u19D1\\u19D2\\u19D3\\u19D4\\u19D5\\u19D6\\u19D7\\u19D8\\u19D9\\u1B50\\u1B51\\u1B52\\u1B53\\u1B54\\u1B55\\u1B56\\u1B57\\u1B58\\u1B59\\u1BB0\\u1BB1\\u1BB2\\u1BB3\\u1BB4\\u1BB5\\u1BB6\\u1BB7\\u1BB8\\u1BB9\\u1C40\\u1C41\\u1C42\\u1C43\\u1C44\\u1C45\\u1C46\\u1C47\\u1C48\\u1C49\\u1C50\\u1C51\\u1C52\\u1C53\\u1C54\\u1C55\\u1C56\\u1C57\\u1C58\\u1C59\\uA620\\uA621\\uA622\\uA623\\uA624\\uA625\\uA626\\uA627\\uA628\\uA629\\uA8D0\\uA8D1\\uA8D2\\uA8D3\\uA8D4\\uA8D5\\uA8D6\\uA8D7\\uA8D8\\uA8D9\\uA900\\uA901\\uA902\\uA903\\uA904\\uA905\\uA906\\uA907\\uA908\\uA909\\uAA50\\uAA51\\uAA52\\uAA53\\uAA54\\uAA55\\uAA56\\uAA57\\uAA58\\uAA59\\uFF10\\uFF11\\uFF12\\uFF13\\uFF14\\uFF15\\uFF16\\uFF17\\uFF18\\uFF19]", description: "[0123456789\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\\u06F0\\u06F1\\u06F2\\u06F3\\u06F4\\u06F5\\u06F6\\u06F7\\u06F8\\u06F9\\u07C0\\u07C1\\u07C2\\u07C3\\u07C4\\u07C5\\u07C6\\u07C7\\u07C8\\u07C9\\u0966\\u0967\\u0968\\u0969\\u096A\\u096B\\u096C\\u096D\\u096E\\u096F\\u09E6\\u09E7\\u09E8\\u09E9\\u09EA\\u09EB\\u09EC\\u09ED\\u09EE\\u09EF\\u0A66\\u0A67\\u0A68\\u0A69\\u0A6A\\u0A6B\\u0A6C\\u0A6D\\u0A6E\\u0A6F\\u0AE6\\u0AE7\\u0AE8\\u0AE9\\u0AEA\\u0AEB\\u0AEC\\u0AED\\u0AEE\\u0AEF\\u0B66\\u0B67\\u0B68\\u0B69\\u0B6A\\u0B6B\\u0B6C\\u0B6D\\u0B6E\\u0B6F\\u0BE6\\u0BE7\\u0BE8\\u0BE9\\u0BEA\\u0BEB\\u0BEC\\u0BED\\u0BEE\\u0BEF\\u0C66\\u0C67\\u0C68\\u0C69\\u0C6A\\u0C6B\\u0C6C\\u0C6D\\u0C6E\\u0C6F\\u0CE6\\u0CE7\\u0CE8\\u0CE9\\u0CEA\\u0CEB\\u0CEC\\u0CED\\u0CEE\\u0CEF\\u0D66\\u0D67\\u0D68\\u0D69\\u0D6A\\u0D6B\\u0D6C\\u0D6D\\u0D6E\\u0D6F\\u0E50\\u0E51\\u0E52\\u0E53\\u0E54\\u0E55\\u0E56\\u0E57\\u0E58\\u0E59\\u0ED0\\u0ED1\\u0ED2\\u0ED3\\u0ED4\\u0ED5\\u0ED6\\u0ED7\\u0ED8\\u0ED9\\u0F20\\u0F21\\u0F22\\u0F23\\u0F24\\u0F25\\u0F26\\u0F27\\u0F28\\u0F29\\u1040\\u1041\\u1042\\u1043\\u1044\\u1045\\u1046\\u1047\\u1048\\u1049\\u1090\\u1091\\u1092\\u1093\\u1094\\u1095\\u1096\\u1097\\u1098\\u1099\\u17E0\\u17E1\\u17E2\\u17E3\\u17E4\\u17E5\\u17E6\\u17E7\\u17E8\\u17E9\\u1810\\u1811\\u1812\\u1813\\u1814\\u1815\\u1816\\u1817\\u1818\\u1819\\u1946\\u1947\\u1948\\u1949\\u194A\\u194B\\u194C\\u194D\\u194E\\u194F\\u19D0\\u19D1\\u19D2\\u19D3\\u19D4\\u19D5\\u19D6\\u19D7\\u19D8\\u19D9\\u1B50\\u1B51\\u1B52\\u1B53\\u1B54\\u1B55\\u1B56\\u1B57\\u1B58\\u1B59\\u1BB0\\u1BB1\\u1BB2\\u1BB3\\u1BB4\\u1BB5\\u1BB6\\u1BB7\\u1BB8\\u1BB9\\u1C40\\u1C41\\u1C42\\u1C43\\u1C44\\u1C45\\u1C46\\u1C47\\u1C48\\u1C49\\u1C50\\u1C51\\u1C52\\u1C53\\u1C54\\u1C55\\u1C56\\u1C57\\u1C58\\u1C59\\uA620\\uA621\\uA622\\uA623\\uA624\\uA625\\uA626\\uA627\\uA628\\uA629\\uA8D0\\uA8D1\\uA8D2\\uA8D3\\uA8D4\\uA8D5\\uA8D6\\uA8D7\\uA8D8\\uA8D9\\uA900\\uA901\\uA902\\uA903\\uA904\\uA905\\uA906\\uA907\\uA908\\uA909\\uAA50\\uAA51\\uAA52\\uAA53\\uAA54\\uAA55\\uAA56\\uAA57\\uAA58\\uAA59\\uFF10\\uFF11\\uFF12\\uFF13\\uFF14\\uFF15\\uFF16\\uFF17\\uFF18\\uFF19]" },
        peg$c90 = /^[\u16EE\u16EF\u16F0\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u216A\u216B\u216C\u216D\u216E\u216F\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\u217A\u217B\u217C\u217D\u217E\u217F\u2180\u2181\u2182\u2185\u2186\u2187\u2188\u3007\u3021\u3022\u3023\u3024\u3025\u3026\u3027\u3028\u3029\u3038\u3039\u303A]/,
        peg$c91 = { type: "class", value: "[\\u16EE\\u16EF\\u16F0\\u2160\\u2161\\u2162\\u2163\\u2164\\u2165\\u2166\\u2167\\u2168\\u2169\\u216A\\u216B\\u216C\\u216D\\u216E\\u216F\\u2170\\u2171\\u2172\\u2173\\u2174\\u2175\\u2176\\u2177\\u2178\\u2179\\u217A\\u217B\\u217C\\u217D\\u217E\\u217F\\u2180\\u2181\\u2182\\u2185\\u2186\\u2187\\u2188\\u3007\\u3021\\u3022\\u3023\\u3024\\u3025\\u3026\\u3027\\u3028\\u3029\\u3038\\u3039\\u303A]", description: "[\\u16EE\\u16EF\\u16F0\\u2160\\u2161\\u2162\\u2163\\u2164\\u2165\\u2166\\u2167\\u2168\\u2169\\u216A\\u216B\\u216C\\u216D\\u216E\\u216F\\u2170\\u2171\\u2172\\u2173\\u2174\\u2175\\u2176\\u2177\\u2178\\u2179\\u217A\\u217B\\u217C\\u217D\\u217E\\u217F\\u2180\\u2181\\u2182\\u2185\\u2186\\u2187\\u2188\\u3007\\u3021\\u3022\\u3023\\u3024\\u3025\\u3026\\u3027\\u3028\\u3029\\u3038\\u3039\\u303A]" },
        peg$c92 = /^[_\u203F\u2040\u2054\uFE33\uFE34\uFE4D\uFE4E\uFE4F\uFF3F]/,
        peg$c93 = { type: "class", value: "[_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D\\uFE4E\\uFE4F\\uFF3F]", description: "[_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D\\uFE4E\\uFE4F\\uFF3F]" },
        peg$c94 = /^[ \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]/,
        peg$c95 = { type: "class", value: "[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]", description: "[ \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000]" },
        peg$c96 = function(name) { return ['#', name]; },
        peg$c97 = "(",
        peg$c98 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c99 = ")",
        peg$c100 = { type: "literal", value: ")", description: "\")\"" },
        peg$c101 = function(name, args) {
            var result = [name].concat(args.shift());
            while (args.length > 0) {
              result = [result].concat(args.shift());
            }
            return result;
          },
        peg$c102 = function(args) {
            return args !== null ? args : [];
          },
        peg$c103 = ",",
        peg$c104 = { type: "literal", value: ",", description: "\",\"" },
        peg$c105 = function(head, tail) {
            var result = [head];
            for (var i = 0; i < tail.length; i++) {
              result.push(tail[i][3]);
            }
            return result;
          },
        peg$c106 = function(operator, expression) {
              return [operator, expression];
            },
        peg$c107 = "+",
        peg$c108 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c109 = "-",
        peg$c110 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c111 = "!",
        peg$c112 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c113 = function(head, tail) {
              var result = head;
              for (var i = 0; i < tail.length; i++) {
                result = [tail[i][1], result, tail[i][3]];
              }
              return result;
            },
        peg$c114 = "*",
        peg$c115 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c116 = "/",
        peg$c117 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c118 = "%",
        peg$c119 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c120 = "=",
        peg$c121 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c122 = function(operator) { return operator; },
        peg$c123 = function() { return "+"; },
        peg$c124 = function() { return "-"; },
        peg$c125 = "<=",
        peg$c126 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c127 = ">=",
        peg$c128 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c129 = "<",
        peg$c130 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c131 = ">",
        peg$c132 = { type: "literal", value: ">", description: "\">\"" },
        peg$c133 = "==",
        peg$c134 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c135 = "!=",
        peg$c136 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c137 = "&&",
        peg$c138 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c139 = function() { return "&&"; },
        peg$c140 = "||",
        peg$c141 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c142 = function() { return "||"; },
        peg$c143 = "if",
        peg$c144 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c145 = "then",
        peg$c146 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c147 = "else",
        peg$c148 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c149 = function(condition, trueExpression, falseExpression) {
              return ['if', condition, trueExpression, falseExpression];
            },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c1(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSourceCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }

      return s0;
    }

    function peg$parseWhiteSpace() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c4.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseZs();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseReservedWord();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c7;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifierName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c8(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }

      return s0;
    }

    function peg$parseIdentifierName() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseIdentifierStart();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseIdentifierPart();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseIdentifierPart();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c10(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }

      return s0;
    }

    function peg$parseIdentifierStart() {
      var s0, s1, s2;

      s0 = peg$parseUnicodeLetter();
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s0 = peg$c11;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s0 = peg$c13;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c15;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseUnicodeEscapeSequence();
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c17(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseIdentifierPart() {
      var s0, s1;

      s0 = peg$parseIdentifierStart();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnicodeCombiningMark();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNd();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePc();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 8204) {
                s1 = peg$c18;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c20();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 8205) {
                  s1 = peg$c21;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c23();
                }
                s0 = s1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnicodeLetter() {
      var s0;

      s0 = peg$parseLu();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLl();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLm();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLo();
              if (s0 === peg$FAILED) {
                s0 = peg$parseNl();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnicodeCombiningMark() {
      var s0;

      s0 = peg$parseMn();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMc();
      }

      return s0;
    }

    function peg$parseReservedWord() {
      var s0;

      s0 = peg$parseNullLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBooleanLiteral();
      }

      return s0;
    }

    function peg$parseLiteral() {
      var s0;

      s0 = peg$parseNullLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBooleanLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumericLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStringLiteral();
          }
        }
      }

      return s0;
    }

    function peg$parseNullLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c24) {
        s1 = peg$c24;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c26();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBooleanLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c27) {
        s1 = peg$c27;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c29();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c30) {
          s1 = peg$c30;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseIdentifierPart();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c7;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c32();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseNumericLiteral() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseHexIntegerLiteral();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDecimalLiteral();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierStart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c34(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }

      return s0;
    }

    function peg$parseDecimalLiteral() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseDecimalIntegerLiteral();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c35;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDecimalDigits();
          if (s5 === peg$FAILED) {
            s5 = peg$c37;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseExponentPart();
            if (s6 === peg$FAILED) {
              s6 = peg$c37;
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c38(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDecimalDigits();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExponentPart();
            if (s5 === peg$FAILED) {
              s5 = peg$c37;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s2 = input.substring(s1, peg$currPos);
        }
        s1 = s2;
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c39(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          s3 = peg$parseDecimalIntegerLiteral();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExponentPart();
            if (s4 === peg$FAILED) {
              s4 = peg$c37;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s2 = input.substring(s1, peg$currPos);
          }
          s1 = s2;
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c39(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseDecimalIntegerLiteral() {
      var s0, s1, s2;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c40;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNonZeroDigit();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDecimalDigits();
          if (s2 === peg$FAILED) {
            s2 = peg$c37;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseDecimalDigits() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseDecimalDigit();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseDecimalDigit();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDecimalDigit() {
      var s0;

      if (peg$c42.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }

      return s0;
    }

    function peg$parseNonZeroDigit() {
      var s0;

      if (peg$c44.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }

      return s0;
    }

    function peg$parseExponentPart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseExponentIndicator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSignedInteger();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseExponentIndicator() {
      var s0;

      if (peg$c46.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }

      return s0;
    }

    function peg$parseSignedInteger() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c48.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c37;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalDigits();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHexIntegerLiteral() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c40;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c50.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseHexDigit();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseHexDigit();
            }
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s4 = input.substring(s3, peg$currPos);
          }
          s3 = s4;
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c52(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHexDigit() {
      var s0;

      if (peg$c53.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }

      return s0;
    }

    function peg$parseStringLiteral() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c56;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDoubleStringCharacters();
        if (s3 === peg$FAILED) {
          s3 = peg$c37;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s4 = peg$c56;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c57); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c58;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c59); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSingleStringCharacters();
          if (s3 === peg$FAILED) {
            s3 = peg$c37;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s4 = peg$c58;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c60(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }

      return s0;
    }

    function peg$parseDoubleStringCharacters() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDoubleStringCharacter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseDoubleStringCharacter();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c61(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSingleStringCharacters() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseSingleStringCharacter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseSingleStringCharacter();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c61(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDoubleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c56;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c15;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c7;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c15;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c63(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseSingleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c58;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c15;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c7;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c15;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c63(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseEscapeSequence() {
      var s0, s1, s2, s3;

      s0 = peg$parseCharacterEscapeSequence();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c40;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseDecimalDigit();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c7;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c64();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseHexEscapeSequence();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUnicodeEscapeSequence();
          }
        }
      }

      return s0;
    }

    function peg$parseCharacterEscapeSequence() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNonEscapeCharacter();
      }

      return s0;
    }

    function peg$parseSingleEscapeCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c65.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c67(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNonEscapeCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseEscapeCharacter();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c7;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c68(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEscapeCharacter() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 120) {
            s0 = peg$c69;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 117) {
              s0 = peg$c71;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseHexEscapeSequence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 120) {
        s1 = peg$c69;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseUnicodeEscapeSequence() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 117) {
        s1 = peg$c71;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseHexDigit();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseHexDigit();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLl() {
      var s0;

      if (peg$c74.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }

      return s0;
    }

    function peg$parseLm() {
      var s0;

      if (peg$c76.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }

      return s0;
    }

    function peg$parseLo() {
      var s0;

      if (peg$c78.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }

      return s0;
    }

    function peg$parseLt() {
      var s0;

      if (peg$c80.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }

      return s0;
    }

    function peg$parseLu() {
      var s0;

      if (peg$c82.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }

      return s0;
    }

    function peg$parseMc() {
      var s0;

      if (peg$c84.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }

      return s0;
    }

    function peg$parseMn() {
      var s0;

      if (peg$c86.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }

      return s0;
    }

    function peg$parseNd() {
      var s0;

      if (peg$c88.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      return s0;
    }

    function peg$parseNl() {
      var s0;

      if (peg$c90.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }

      return s0;
    }

    function peg$parsePc() {
      var s0;

      if (peg$c92.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }

      return s0;
    }

    function peg$parseZs() {
      var s0;

      if (peg$c94.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseWhiteSpace();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();
      }

      return s0;
    }

    function peg$parsePrimaryExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c96(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c97;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c98); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseExpression();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s5 = peg$c99;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c100); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c1(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseCallExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseArguments();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseArguments();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c101(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseArguments() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c97;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseArgumentList();
          if (s3 === peg$FAILED) {
            s3 = peg$c37;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c99;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c100); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c102(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseArgumentList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c103;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c104); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c103;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c104); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c105(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseUnaryExpression() {
      var s0, s1, s2, s3;

      s0 = peg$parseCallExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePrimaryExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseUnaryOperator();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseUnaryExpression();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c106(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseUnaryOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c107;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c109;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c110); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s0 = peg$c111;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
        }
      }

      return s0;
    }

    function peg$parseMultiplicativeExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseMultiplicativeOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseUnaryExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseMultiplicativeOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseUnaryExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMultiplicativeOperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c114;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s1 = peg$c116;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c117); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 37) {
            s1 = peg$c118;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c119); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c120;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c122(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAdditiveExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseMultiplicativeExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAdditiveOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseMultiplicativeExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAdditiveOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseMultiplicativeExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAdditiveOperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c107;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 43) {
          s3 = peg$c107;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c108); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c120;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c123();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c109;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c110); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 45) {
            s3 = peg$c109;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c110); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c120;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c7;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c124();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseRelationalExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseAdditiveExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRelationalOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseAdditiveExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRelationalOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAdditiveExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRelationalOperator() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c125) {
        s0 = peg$c125;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c127) {
          s0 = peg$c127;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c128); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s0 = peg$c129;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c130); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s0 = peg$c131;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c132); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseEqualityExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseRelationalExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseEqualityOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseRelationalExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEqualityOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseRelationalExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEqualityOperator() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c133) {
        s0 = peg$c133;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c135) {
          s0 = peg$c135;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c136); }
        }
      }

      return s0;
    }

    function peg$parseLogicalANDExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseEqualityExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLogicalANDOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseEqualityExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLogicalANDOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseEqualityExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLogicalANDOperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c137) {
        s1 = peg$c137;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c120;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c139();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLogicalORExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLogicalANDExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLogicalOROperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseLogicalANDExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLogicalOROperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseLogicalANDExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c113(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLogicalOROperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c140) {
        s1 = peg$c140;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c120;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c7;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c142();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c143) {
        s1 = peg$c143;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLogicalORExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c145) {
                s5 = peg$c145;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c146); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseExpression();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c147) {
                        s9 = peg$c147;
                        peg$currPos += 4;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c148); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse__();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseExpression();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c149(s3, s7, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLogicalORExpression();
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
}]);


/***/ }),

/***/ "./core/templates/dev/head/expressions/ExpressionSyntaxTreeService.ts":
/*!****************************************************************************!*\
  !*** ./core/templates/dev/head/expressions/ExpressionSyntaxTreeService.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Expression syntax tree service.
 */
__webpack_require__(/*! expressions/ExpressionParserService.js */ "./core/templates/dev/head/expressions/ExpressionParserService.js");
angular.module('oppia').factory('ExpressionSyntaxTreeService', [
    'ExpressionParserService', 'PARAMETER_TYPES',
    function (ExpressionParserService, PARAMETER_TYPES) {
        // Exceptions that can be thrown from the evaluation of expressions.
        var ExpressionError = function () { };
        ExpressionError.prototype = new Error();
        ExpressionError.prototype.constructor = ExpressionError;
        var ExprUndefinedVarError = function (varname, envs) {
            this.varname = varname;
            this.envs = envs;
        };
        ExprUndefinedVarError.prototype = new ExpressionError();
        ExprUndefinedVarError.prototype.constructor = ExprUndefinedVarError;
        ExprUndefinedVarError.prototype.name = 'ExprUndefinedVarError';
        ExprUndefinedVarError.prototype.toString = function () {
            return this.name + ': ' + this.varname + ' not found in ' + this.envs;
        };
        var ExprWrongNumArgsError = function (args, expectedMin, expectedMax) {
            this.args = args;
            this.expectedMin = expectedMin;
            this.expectedMax = expectedMax;
        };
        ExprWrongNumArgsError.prototype = new ExpressionError();
        ExprWrongNumArgsError.prototype.constructor = ExprWrongNumArgsError;
        ExprWrongNumArgsError.prototype.name = 'ExprWrongNumArgsError';
        ExprWrongNumArgsError.prototype.toString = function () {
            return this.name + ': {' + this.args + '} not in range [' +
                this.expectedMin + ',' + this.expectedMax + ']';
        };
        var ExprWrongArgTypeError = function (arg, actualType, expectedType) {
            this.arg = arg;
            this.actualType = actualType;
            this.expectedType = expectedType;
        };
        ExprWrongArgTypeError.prototype = new ExpressionError();
        ExprWrongArgTypeError.prototype.constructor = ExprWrongArgTypeError;
        ExprWrongArgTypeError.prototype.name = 'ExprWrongArgTypeError';
        ExprWrongArgTypeError.prototype.toString = function () {
            if (this.arg === null) {
                return this.name + ': Type ' + this.actualType +
                    ' does not match expected type ' + this.expectedType;
            }
            return this.name + ': ' + this.arg + ' has type ' + this.actualType +
                ' which does not match expected type ' + this.expectedType;
        };
        var getParamsUsedInExpression = function (expression) {
            var _findParams = function (parseTree) {
                var paramsFound = [];
                if (parseTree instanceof Array) {
                    if (parseTree[0] === '#') {
                        paramsFound.push(parseTree[1]);
                    }
                    else {
                        for (var i = 1; i < parseTree.length; i++) {
                            paramsFound = paramsFound.concat(_findParams(parseTree[i]));
                        }
                    }
                }
                var uniqueParams = [];
                for (var i = 0; i < paramsFound.length; i++) {
                    if (uniqueParams.indexOf(paramsFound[i]) === -1) {
                        uniqueParams.push(paramsFound[i]);
                    }
                }
                return uniqueParams.sort();
            };
            var parsed = ExpressionParserService.parse(expression);
            return _findParams(parsed);
        };
        // Checks if the args array has the expectedNum number of elements and
        // throws an error if not. If optional expectedMax is specified, it
        // verifies the number of args is in [expectedNum, expectedMax] range
        // inclusive.
        var verifyNumArgs = function (args, expectedNum, expectedMax) {
            if (expectedMax === void 0) { expectedMax = expectedNum; }
            if (expectedMax === undefined) {
                expectedMax = expectedNum;
            }
            if (args.length >= expectedNum && args.length <= expectedMax) {
                return;
            }
            throw new ExprWrongNumArgsError(args, expectedNum, expectedMax);
        };
        var _verifyArgTypesMatchExpectedType = function (argTypes, expectedType) {
            for (var i = 0; i < argTypes.length; i++) {
                if (argTypes[i] !== expectedType) {
                    throw new ExprWrongArgTypeError(null, argTypes[i], expectedType);
                }
            }
            return true;
        };
        var _verifyArgTypesMatch = function (argType1, argType2) {
            if (argType1 !== argType2) {
                throw new ExprWrongArgTypeError(null, argType1, argType2);
            }
            return true;
        };
        var applyFunctionToParseTree = function (parsed, envs, func) {
            return func(parsed, envs.concat(system));
        };
        /**
         * Looks up a variable of the given name in the env. Here the variable
         * can be system or user defined functions and parameters, as well as
         * system operators.
         * @param {string} name The name to look up.
         * @param {!Array.<!object>} envs Represents a nested name space
         *     environment to look up the name in. The first element is looked up
         *     first (i.e. has higher precedence).
         * @throws {ExprUndefinedVarError} The named variable was not found in
         *     the given environment.
         */
        var lookupEnvs = function (name, envs) {
            for (var _i = 0, envs_1 = envs; _i < envs_1.length; _i++) {
                var env = envs_1[_i];
                if (env.hasOwnProperty(name)) {
                    return env[name];
                }
            }
            throw new ExprUndefinedVarError(name, envs);
        };
        // Coerces the argument to a Number, and throws an error if the result
        // is NaN.
        var _coerceToNumber = function (originalValue) {
            var coercedValue = (+originalValue);
            if (!isNaN(coercedValue)) {
                return coercedValue;
            }
            throw new ExprWrongArgTypeError(originalValue, typeof originalValue, 'Number');
        };
        // Coerces all values in the given argument array to Number, and throws
        // an error if the result is NaN.
        var _coerceAllArgsToNumber = function (args) {
            for (var i = 0; i < args.length; i++) {
                args[i] = _coerceToNumber(args[i]);
            }
            return args;
        };
        // NOTE TO DEVELOPERS: When adding a new reserved word to this object,
        //   please first ensure that existing explorations do not use this
        //   parameter name. Also, to prevent future explorations using it,
        //   modify constants.INVALID_PARAMETER_NAMES accordingly.
        // TODO(kashida): Document all operators input and output contracts.
        // Arguments:
        // args: for eval(): list of values of the evaluated sub-expression
        //       for getType(): list of types of the evaluated sub-expression
        var system = {
            '+': {
                eval: function (args) {
                    verifyNumArgs(args, 1, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs.length === 1 ? numericArgs[0] :
                        numericArgs[0] + numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 1, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            '-': {
                eval: function (args) {
                    verifyNumArgs(args, 1, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs.length === 1 ? -numericArgs[0] :
                        numericArgs[0] - numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 1, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            '*': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] * numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            '/': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] / numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            '%': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] % numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            '<=': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] <= numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '>=': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] >= numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '<': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] < numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '>': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return numericArgs[0] > numericArgs[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '!': {
                eval: function (args) {
                    verifyNumArgs(args, 1);
                    return !args[0];
                },
                getType: function (args) {
                    verifyNumArgs(args, 1);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.UNICODE_STRING);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '==': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    return args[0] === args[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '!=': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    return args[0] !== args[1];
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '&&': {
                eval: function (args) {
                    // TODO(kashida): Make this short-circuit.
                    verifyNumArgs(args, 2);
                    return Boolean(args[0] && args[1]);
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.UNICODE_STRING);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            '||': {
                eval: function (args) {
                    // TODO(kashida): Make this short-circuit.
                    verifyNumArgs(args, 2);
                    return Boolean(args[0] || args[1]);
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.UNICODE_STRING);
                    return PARAMETER_TYPES.UNICODE_STRING;
                }
            },
            // Note that removing quotation marks from this key causes issues with
            // minification (when running the deployment scripts).
            /* eslint-disable quote-props */
            'if': {
                eval: function (args) {
                    // TODO(kashida): Make this short-circuit.
                    verifyNumArgs(args, 3);
                    return args[0] ? args[1] : args[2];
                },
                getType: function (args) {
                    verifyNumArgs(args, 3);
                    _verifyArgTypesMatchExpectedType([args[0]], PARAMETER_TYPES.UNICODE_STRING);
                    _verifyArgTypesMatch(args[1], args[2]);
                    return args[1];
                }
            },
            'floor': {
                eval: function (args) {
                    verifyNumArgs(args, 1);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return Math.floor(numericArgs[0]);
                },
                getType: function (args) {
                    verifyNumArgs(args, 1);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            'pow': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return Math.pow(args[0], args[1]);
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            'log': {
                eval: function (args) {
                    verifyNumArgs(args, 2);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    var preciseAns = Math.log(numericArgs[0]) / Math.log(numericArgs[1]);
                    // We round answers to 9 decimal places, so that we don't run into
                    // issues like log(9, 3) = 2.0000000000004.
                    return Math.round(preciseAns * Math.pow(10, 9)) / Math.pow(10, 9);
                },
                getType: function (args) {
                    verifyNumArgs(args, 2);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            },
            'abs': {
                eval: function (args) {
                    verifyNumArgs(args, 1);
                    var numericArgs = _coerceAllArgsToNumber(args);
                    return Math.abs(numericArgs[0]);
                },
                getType: function (args) {
                    verifyNumArgs(args, 1);
                    _verifyArgTypesMatchExpectedType(args, PARAMETER_TYPES.REAL);
                    return PARAMETER_TYPES.REAL;
                }
            }
            /* eslint-enable quote-props */
        };
        return {
            ExpressionError: ExpressionError,
            ExprUndefinedVarError: ExprUndefinedVarError,
            ExprWrongNumArgsError: ExprWrongNumArgsError,
            ExprWrongArgTypeError: ExprWrongArgTypeError,
            applyFunctionToParseTree: applyFunctionToParseTree,
            getParamsUsedInExpression: getParamsUsedInExpression,
            lookupEnvs: lookupEnvs
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/convert-html-to-unicode.filter.ts":
/*!***************************************************************************!*\
  !*** ./core/templates/dev/head/filters/convert-html-to-unicode.filter.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Converts HTML to unicode.
 */
angular.module('oppia').filter('convertHtmlToUnicode', [function () {
        return function (html) {
            return angular.element('<div>' + html + '</div>').text();
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/filters/format-rte-preview.filter.ts":
/*!**********************************************************************!*\
  !*** ./core/templates/dev/head/filters/format-rte-preview.filter.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview FormatRtePreview filter for Oppia.
 */
/* The following filter replaces each RTE element occurrence in the input html
   by its corresponding name in square brackets and returns a string
   which contains the name in the same location as in the input html.
   eg: <p>Sample1 <oppia-noninteractive-math></oppia-noninteractive-math>
        Sample2 </p>
   will give as output: Sample1 [Math] Sample2 */
angular.module('oppia').filter('formatRtePreview', [
    '$filter', function ($filter) {
        return function (html) {
            html = html.replace(/&nbsp;/ig, ' ');
            html = html.replace(/&quot;/ig, '');
            // Replace all html tags other than <oppia-noninteractive-**> ones to ''.
            html = html.replace(/<(?!oppia-noninteractive\s*?)[^>]+>/g, '');
            var formattedOutput = html.replace(/(<([^>]+)>)/g, function (rteTag) {
                var replaceString = $filter('capitalize')(rteTag.split('-')[2].split(' ')[0]);
                if (replaceString[replaceString.length - 1] === '>') {
                    replaceString = replaceString.slice(0, -1);
                }
                return ' [' + replaceString + '] ';
            });
            return formattedOutput.trim();
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/camel-case-to-hyphens.filter.ts":
/*!************************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/camel-case-to-hyphens.filter.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview CamelCaseToHyphens filter for Oppia.
 */
angular.module('oppia').filter('camelCaseToHyphens', [function () {
        return function (input) {
            var result = input.replace(/([a-z])?([A-Z])/g, '$1-$2').toLowerCase();
            if (result[0] === '-') {
                result = result.substring(1);
            }
            return result;
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/convert-to-plain-text.filter.ts":
/*!************************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/convert-to-plain-text.filter.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview ConvertToPlainText filter for Oppia.
 */
angular.module('oppia').filter('convertToPlainText', [function () {
        return function (input) {
            var strippedText = input.replace(/(<([^>]+)>)/ig, '');
            strippedText = strippedText.replace(/&nbsp;/ig, ' ');
            strippedText = strippedText.replace(/&quot;/ig, '');
            var trimmedText = strippedText.trim();
            if (trimmedText.length === 0) {
                return strippedText;
            }
            else {
                return trimmedText;
            }
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/get-abbreviated-text.filter.ts":
/*!***********************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/get-abbreviated-text.filter.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview GetAbbreviatedText filter for Oppia.
 */
angular.module('oppia').filter('getAbbreviatedText', [function () {
        return function (text, characterCount) {
            if (text.length > characterCount) {
                var subject = text.substr(0, characterCount);
                if (subject.indexOf(' ') !== -1) {
                    subject = subject.split(' ').slice(0, -1).join(' ');
                }
                return subject.concat('...');
            }
            return text;
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts":
/*!***********************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview NormalizeWhitespace filter for Oppia.
 */
__webpack_require__(/*! services/UtilsService.ts */ "./core/templates/dev/head/services/UtilsService.ts");
// Filter that removes whitespace from the beginning and end of a string, and
// replaces interior whitespace with a single space character.
angular.module('oppia').filter('normalizeWhitespace', [
    'UtilsService', function (UtilsService) {
        return function (input) {
            if (UtilsService.isString(input)) {
                // Remove whitespace from the beginning and end of the string, and
                // replace interior whitespace with a single space character.
                input = input.trim();
                input = input.replace(/\s{2,}/g, ' ');
                return input;
            }
            else {
                return input;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/truncate-and-capitalize.filter.ts":
/*!**************************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/truncate-and-capitalize.filter.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview TruncateAndCapitalize filter for Oppia.
 */
// Note that this filter does not truncate at the middle of a word.
angular.module('oppia').filter('truncateAndCapitalize', [function () {
        return function (input, maxNumberOfCharacters) {
            if (!input) {
                return input;
            }
            var words = input.trim().match(/\S+/g);
            // Capitalize the first word and add it to the result.
            var result = words[0].charAt(0).toUpperCase() + words[0].slice(1);
            // Add the remaining words to the result until the character limit is
            // reached.
            for (var i = 1; i < words.length; i++) {
                if (!maxNumberOfCharacters ||
                    result.length + 1 + words[i].length <= maxNumberOfCharacters) {
                    result += ' ';
                    result += words[i];
                }
                else {
                    result += '...';
                    break;
                }
            }
            return result;
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts":
/*!*************************************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview TruncateAtFirstLine filter for Oppia.
 */
angular.module('oppia').filter('truncateAtFirstLine', [function () {
        return function (input) {
            if (!input) {
                return input;
            }
            var pattern = /(\r\n|[\n\v\f\r\x85\u2028\u2029])/g;
            // Normalize line endings then split using the normalized delimiter.
            var lines = input.replace(pattern, '\n').split('\n');
            var firstNonemptyLineIndex = -1;
            var otherNonemptyLinesExist = false;
            for (var i = 0; i < lines.length; i++) {
                if (lines[i].length > 0) {
                    if (firstNonemptyLineIndex === -1) {
                        firstNonemptyLineIndex = i;
                    }
                    else {
                        otherNonemptyLinesExist = true;
                        break;
                    }
                }
            }
            var suffix = otherNonemptyLinesExist ? '...' : '';
            return (firstNonemptyLineIndex !== -1 ?
                lines[firstNonemptyLineIndex] + suffix : '');
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/filters/string-utility-filters/truncate.filter.ts":
/*!***********************************************************************************!*\
  !*** ./core/templates/dev/head/filters/string-utility-filters/truncate.filter.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Truncate filter for Oppia.
 */
__webpack_require__(/*! filters/string-utility-filters/convert-to-plain-text.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/convert-to-plain-text.filter.ts");
// Filter that truncates long descriptors.
angular.module('oppia').filter('truncate', ['$filter', function ($filter) {
        return function (input, length, suffix) {
            if (!input) {
                return '';
            }
            if (isNaN(length)) {
                length = 70;
            }
            if (suffix === undefined) {
                suffix = '...';
            }
            if (!angular.isString(input)) {
                input = String(input);
            }
            input = $filter('convertToPlainText')(input);
            return (input.length <= length ? input : (input.substring(0, length - suffix.length) + suffix));
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/filters/summarize-nonnegative-number.filter.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/filters/summarize-nonnegative-number.filter.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview SummarizeNonnegativeNumber filter for Oppia.
 */
// Filter that summarizes a large number to a decimal followed by
// the appropriate metric prefix (K, M or B). For example, 167656
// becomes 167.7K.
// Users of this filter should ensure that the input is a non-negative number.
angular.module('oppia').filter('summarizeNonnegativeNumber', [function () {
        return function (input) {
            input = Number(input);
            // Nine zeros for billions (e.g. 146008788788 --> 146.0B).
            // Six zeros for millions (e.g. 146008788 --> 146.0M).
            // Three zeros for thousands (e.g. 146008 --> 146.0K).
            // No change for small numbers (e.g. 12 --> 12).
            return (input >= 1.0e+9 ? (input / 1.0e+9).toFixed(1) + 'B' :
                input >= 1.0e+6 ? (input / 1.0e+6).toFixed(1) + 'M' :
                    input >= 1.0e+3 ? (input / 1.0e+3).toFixed(1) + 'K' :
                        input);
        };
    }]);


/***/ }),

/***/ "./core/templates/dev/head/pages/OppiaFooterDirective.ts":
/*!***************************************************************!*\
  !*** ./core/templates/dev/head/pages/OppiaFooterDirective.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the footer.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('oppiaFooter', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/oppia_footer_directive.html'),
            controllerAs: '$ctrl',
            controller: [
                function () { }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/editor-tab/services/solution-validity.service.ts":
/*!****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/editor-tab/services/solution-validity.service.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service for keeping track of solution validity.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var SolutionValidityService = /** @class */ (function () {
    function SolutionValidityService() {
        this.solutionValidities = {};
    }
    SolutionValidityService.prototype.init = function (stateNames) {
        var _this = this;
        stateNames.forEach(function (stateName) {
            _this.solutionValidities[stateName] = true;
        });
    };
    SolutionValidityService.prototype.deleteSolutionValidity = function (stateName) {
        delete this.solutionValidities[stateName];
    };
    SolutionValidityService.prototype.onRenameState = function (newStateName, oldStateName) {
        this.solutionValidities[newStateName] =
            this.solutionValidities[oldStateName];
        this.deleteSolutionValidity(oldStateName);
    };
    SolutionValidityService.prototype.updateValidity = function (stateName, solutionIsValid) {
        this.solutionValidities[stateName] = solutionIsValid;
    };
    SolutionValidityService.prototype.isSolutionValid = function (stateName) {
        if (this.solutionValidities.hasOwnProperty(stateName)) {
            return this.solutionValidities[stateName];
        }
    };
    SolutionValidityService.prototype.getAllValidities = function () {
        return this.solutionValidities;
    };
    SolutionValidityService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], SolutionValidityService);
    return SolutionValidityService;
}());
exports.SolutionValidityService = SolutionValidityService;
angular.module('oppia').factory('SolutionValidityService', static_1.downgradeInjectable(SolutionValidityService));


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/services/angular-name.service.ts":
/*!************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/services/angular-name.service.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview A service that maps IDs to Angular names.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var AngularNameService = /** @class */ (function () {
    function AngularNameService() {
    }
    AngularNameService_1 = AngularNameService;
    AngularNameService.prototype.getNameOfInteractionRulesService = function (interactionId) {
        AngularNameService_1.angularName = interactionId.charAt(0) +
            interactionId.slice(1) + 'RulesService';
        return AngularNameService_1.angularName;
    };
    var AngularNameService_1;
    AngularNameService.angularName = null;
    AngularNameService = AngularNameService_1 = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], AngularNameService);
    return AngularNameService;
}());
exports.AngularNameService = AngularNameService;
angular.module('oppia').factory('AngularNameService', static_1.downgradeInjectable(AngularNameService));


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/services/autosave-info-modals.service.ts":
/*!********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/services/autosave-info-modals.service.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for displaying different types of modals depending
 * on the type of response received as a result of the autosaving request.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-editor-page/services/changes-in-human-readable-form.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/services/changes-in-human-readable-form.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/services/exploration-data.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/services/exploration-data.service.ts");
__webpack_require__(/*! services/LocalStorageService.ts */ "./core/templates/dev/head/services/LocalStorageService.ts");
angular.module('oppia').factory('AutosaveInfoModalsService', [
    '$log', '$timeout', '$uibModal', '$window',
    'ChangesInHumanReadableFormService', 'ExplorationDataService',
    'LocalStorageService', 'UrlInterpolationService',
    function ($log, $timeout, $uibModal, $window, ChangesInHumanReadableFormService, ExplorationDataService, LocalStorageService, UrlInterpolationService) {
        var _isModalOpen = false;
        var _refreshPage = function (delay) {
            $timeout(function () {
                $window.location.reload();
            }, delay);
        };
        return {
            showNonStrictValidationFailModal: function () {
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/modal-templates/' +
                        'save-validation-fail-modal.template.html'),
                    // Prevent modal from closing when the user clicks outside it.
                    backdrop: 'static',
                    controller: [
                        '$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
                            $scope.closeAndRefresh = function () {
                                $uibModalInstance.dismiss('cancel');
                                _refreshPage(20);
                            };
                        }
                    ]
                }).result.then(function () {
                    _isModalOpen = false;
                }, function () {
                    _isModalOpen = false;
                });
                _isModalOpen = true;
            },
            isModalOpen: function () {
                return _isModalOpen;
            },
            showVersionMismatchModal: function (lostChanges) {
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/modal-templates/' +
                        'save-version-mismatch-modal.template.html'),
                    // Prevent modal from closing when the user clicks outside it.
                    backdrop: 'static',
                    controller: ['$scope', function ($scope) {
                            // When the user clicks on discard changes button, signal backend
                            // to discard the draft and reload the page thereafter.
                            $scope.discardChanges = function () {
                                ExplorationDataService.discardDraft(function () {
                                    _refreshPage(20);
                                });
                            };
                            $scope.hasLostChanges = (lostChanges && lostChanges.length > 0);
                            if ($scope.hasLostChanges) {
                                // TODO(sll): This should also include changes to exploration
                                // properties (such as the exploration title, category, etc.).
                                $scope.lostChangesHtml = (ChangesInHumanReadableFormService.makeHumanReadable(lostChanges).html());
                                $log.error('Lost changes: ' + JSON.stringify(lostChanges));
                            }
                        }],
                    windowClass: 'oppia-autosave-version-mismatch-modal'
                }).result.then(function () {
                    _isModalOpen = false;
                }, function () {
                    _isModalOpen = false;
                });
                _isModalOpen = true;
            },
            showLostChangesModal: function (lostChanges, explorationId) {
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/modal-templates/' +
                        'lost-changes-modal.template.html'),
                    // Prevent modal from closing when the user clicks outside it.
                    backdrop: 'static',
                    controller: ['$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
                            // When the user clicks on discard changes button, signal backend
                            // to discard the draft and reload the page thereafter.
                            $scope.close = function () {
                                LocalStorageService.removeExplorationDraft(explorationId);
                                $uibModalInstance.dismiss('cancel');
                            };
                            $scope.lostChangesHtml = (ChangesInHumanReadableFormService.makeHumanReadable(lostChanges).html());
                            $log.error('Lost changes: ' + JSON.stringify(lostChanges));
                        }],
                    windowClass: 'oppia-lost-changes-modal'
                }).result.then(function () {
                    _isModalOpen = false;
                }, function () {
                    _isModalOpen = false;
                });
                _isModalOpen = true;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/services/change-list.service.ts":
/*!***********************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/services/change-list.service.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A service that maintains a provisional list of changes to be
 * committed to the server.
 */
__webpack_require__(/*! pages/exploration-editor-page/services/autosave-info-modals.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/services/autosave-info-modals.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/services/exploration-data.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/services/exploration-data.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('oppia').factory('ChangeListService', [
    '$log', '$rootScope', 'AlertsService', 'AutosaveInfoModalsService',
    'ExplorationDataService',
    function ($log, $rootScope, AlertsService, AutosaveInfoModalsService, ExplorationDataService) {
        // TODO(sll): Implement undo, redo functionality. Show a message on each
        // step saying what the step is doing.
        // TODO(sll): Allow the user to view the list of changes made so far, as
        // well as the list of changes in the undo stack.
        // Temporary buffer for changes made to the exploration.
        var explorationChangeList = [];
        // Stack for storing undone changes. The last element is the most recently
        // undone change.
        var undoneChangeStack = [];
        // All these constants should correspond to those in exp_domain.py.
        // TODO(sll): Enforce this in code.
        var CMD_ADD_STATE = 'add_state';
        var CMD_RENAME_STATE = 'rename_state';
        var CMD_DELETE_STATE = 'delete_state';
        var CMD_EDIT_STATE_PROPERTY = 'edit_state_property';
        var CMD_EDIT_EXPLORATION_PROPERTY = 'edit_exploration_property';
        var ALLOWED_EXPLORATION_BACKEND_NAMES = {
            category: true,
            init_state_name: true,
            language_code: true,
            objective: true,
            param_changes: true,
            param_specs: true,
            tags: true,
            title: true,
            auto_tts_enabled: true,
            correctness_feedback_enabled: true
        };
        var ALLOWED_STATE_BACKEND_NAMES = {
            answer_groups: true,
            confirmed_unclassified_answers: true,
            content: true,
            recorded_voiceovers: true,
            default_outcome: true,
            hints: true,
            param_changes: true,
            param_specs: true,
            solicit_answer_details: true,
            solution: true,
            state_name: true,
            widget_customization_args: true,
            widget_id: true,
            written_translations: true
        };
        var autosaveChangeListOnChange = function (explorationChangeList) {
            // Asynchronously send an autosave request, and check for errors in the
            // response:
            // If error is present -> Check for the type of error occurred
            // (Display the corresponding modals in both cases, if not already
            // opened):
            // - Version Mismatch.
            // - Non-strict Validation Fail.
            ExplorationDataService.autosaveChangeList(explorationChangeList, function (response) {
                if (!response.data.is_version_of_draft_valid) {
                    if (!AutosaveInfoModalsService.isModalOpen()) {
                        AutosaveInfoModalsService.showVersionMismatchModal(explorationChangeList);
                    }
                }
            }, function () {
                AlertsService.clearWarnings();
                $log.error('nonStrictValidationFailure: ' +
                    JSON.stringify(explorationChangeList));
                if (!AutosaveInfoModalsService.isModalOpen()) {
                    AutosaveInfoModalsService.showNonStrictValidationFailModal();
                }
            });
        };
        var addChange = function (changeDict) {
            if ($rootScope.loadingMessage) {
                return;
            }
            explorationChangeList.push(changeDict);
            undoneChangeStack = [];
            autosaveChangeListOnChange(explorationChangeList);
        };
        return {
            /**
             * Saves a change dict that represents adding a new state. It is the
             * responsbility of the caller to check that the new state name is valid.
             *
             * @param {string} stateName - The name of the newly-added state
             */
            addState: function (stateName) {
                addChange({
                    cmd: CMD_ADD_STATE,
                    state_name: stateName
                });
            },
            /**
             * Saves a change dict that represents deleting a new state. It is the
             * responsbility of the caller to check that the deleted state name
             * corresponds to an existing state.
             *
             * @param {string} stateName - The name of the deleted state.
             */
            deleteState: function (stateName) {
                addChange({
                    cmd: CMD_DELETE_STATE,
                    state_name: stateName
                });
            },
            discardAllChanges: function () {
                explorationChangeList = [];
                undoneChangeStack = [];
                ExplorationDataService.discardDraft();
            },
            /**
             * Saves a change dict that represents a change to an exploration
             * property (such as its title, category, ...). It is the responsibility
             * of the caller to check that the old and new values are not equal.
             *
             * @param {string} backendName - The backend name of the property
             *   (e.g. title, category)
             * @param {string} newValue - The new value of the property
             * @param {string} oldValue - The previous value of the property
             */
            editExplorationProperty: function (backendName, newValue, oldValue) {
                if (!ALLOWED_EXPLORATION_BACKEND_NAMES.hasOwnProperty(backendName)) {
                    AlertsService.addWarning('Invalid exploration property: ' + backendName);
                    return;
                }
                addChange({
                    cmd: CMD_EDIT_EXPLORATION_PROPERTY,
                    new_value: angular.copy(newValue),
                    old_value: angular.copy(oldValue),
                    property_name: backendName
                });
            },
            /**
             * Saves a change dict that represents a change to a state property. It
             * is the responsibility of the caller to check that the old and new
             * values are not equal.
             *
             * @param {string} stateName - The name of the state that is being edited
             * @param {string} backendName - The backend name of the edited property
             * @param {string} newValue - The new value of the property
             * @param {string} oldValue - The previous value of the property
             */
            editStateProperty: function (stateName, backendName, newValue, oldValue) {
                if (!ALLOWED_STATE_BACKEND_NAMES.hasOwnProperty(backendName)) {
                    AlertsService.addWarning('Invalid state property: ' + backendName);
                    return;
                }
                addChange({
                    cmd: CMD_EDIT_STATE_PROPERTY,
                    new_value: angular.copy(newValue),
                    old_value: angular.copy(oldValue),
                    property_name: backendName,
                    state_name: stateName
                });
            },
            getChangeList: function () {
                return angular.copy(explorationChangeList);
            },
            isExplorationLockedForEditing: function () {
                return explorationChangeList.length > 0;
            },
            /**
             * Initializes the current changeList with the one received from backend.
             * This behavior exists only in case of an autosave.
             *
             * @param {object} changeList - Autosaved changeList data
             */
            loadAutosavedChangeList: function (changeList) {
                explorationChangeList = changeList;
            },
            /**
             * Saves a change dict that represents the renaming of a state. This
             * is also intended to change the initial state name if necessary
             * (that is, the latter change is implied and does not have to be
             * recorded separately in another change dict). It is the responsibility
             * of the caller to check that the two names are not equal.
             *
             * @param {string} newStateName - The new name of the state
             * @param {string} oldStateName - The previous name of the state
             */
            renameState: function (newStateName, oldStateName) {
                addChange({
                    cmd: CMD_RENAME_STATE,
                    new_state_name: newStateName,
                    old_state_name: oldStateName
                });
            },
            undoLastChange: function () {
                if (explorationChangeList.length === 0) {
                    AlertsService.addWarning('There are no changes to undo.');
                    return;
                }
                var lastChange = explorationChangeList.pop();
                undoneChangeStack.push(lastChange);
                autosaveChangeListOnChange(explorationChangeList);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/services/changes-in-human-readable-form.service.ts":
/*!******************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/services/changes-in-human-readable-form.service.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to get changes in human readable form.
 */
__webpack_require__(/*! services/UtilsService.ts */ "./core/templates/dev/head/services/UtilsService.ts");
angular.module('oppia').factory('ChangesInHumanReadableFormService', [
    'UtilsService', function (UtilsService) {
        var CMD_ADD_STATE = 'add_state';
        var CMD_RENAME_STATE = 'rename_state';
        var CMD_DELETE_STATE = 'delete_state';
        var CMD_EDIT_STATE_PROPERTY = 'edit_state_property';
        var makeRulesListHumanReadable = function (answerGroupValue) {
            var rulesList = [];
            answerGroupValue.rules.forEach(function (rule) {
                var ruleElm = angular.element('<li></li>');
                ruleElm.html('<p>Type: ' + rule.type + '</p>');
                ruleElm.append('<p>Value: ' + (Object.keys(rule.inputs).map(function (input) {
                    return rule.inputs[input];
                })).toString() + '</p>');
                rulesList.push(ruleElm);
            });
            return rulesList;
        };
        // An edit is represented either as an object or an array. If it's an
        // object, then simply return that object. In case of an array, return
        // the last item.
        var getStatePropertyValue = function (statePropertyValue) {
            return angular.isArray(statePropertyValue) ?
                statePropertyValue[statePropertyValue.length - 1] : statePropertyValue;
        };
        // Detects whether an object of the type 'answer_group' or
        // 'default_outcome' has been added, edited or deleted.
        // Returns - 'addded', 'edited' or 'deleted' accordingly.
        var getRelativeChangeToGroups = function (changeObject) {
            var newValue = changeObject.new_value;
            var oldValue = changeObject.old_value;
            var result = '';
            if (angular.isArray(newValue) && angular.isArray(oldValue)) {
                result = (newValue.length > oldValue.length) ?
                    'added' : (newValue.length === oldValue.length) ?
                    'edited' : 'deleted';
            }
            else {
                if (!UtilsService.isEmpty(oldValue)) {
                    if (!UtilsService.isEmpty(newValue)) {
                        result = 'edited';
                    }
                    else {
                        result = 'deleted';
                    }
                }
                else if (!UtilsService.isEmpty(newValue)) {
                    result = 'added';
                }
            }
            return result;
        };
        var makeHumanReadable = function (lostChanges) {
            var outerHtml = angular.element('<ul></ul>');
            var stateWiseEditsMapping = {};
            // The variable stateWiseEditsMapping stores the edits grouped by state.
            // For instance, you made the following edits:
            // 1. Changed content to 'Welcome!' instead of '' in 'Introduction'.
            // 2. Added an interaction in this state.
            // 2. Added a new state 'End'.
            // 3. Ended Exporation from state 'End'.
            // stateWiseEditsMapping will look something like this:
            // - 'Introduction': [
            //   - 'Edited Content: Welcome!',:
            //   - 'Added Interaction: Continue',
            //   - 'Added interaction customizations']
            // - 'End': ['Ended exploration']
            lostChanges.forEach(function (lostChange) {
                switch (lostChange.cmd) {
                    case CMD_ADD_STATE:
                        outerHtml.append(angular.element('<li></li>').html('Added state: ' + lostChange.state_name));
                        break;
                    case CMD_RENAME_STATE:
                        outerHtml.append(angular.element('<li></li>').html('Renamed state: ' + lostChange.old_state_name + ' to ' +
                            lostChange.new_state_name));
                        break;
                    case CMD_DELETE_STATE:
                        outerHtml.append(angular.element('<li></li>').html('Deleted state: ' + lostChange.state_name));
                        break;
                    case CMD_EDIT_STATE_PROPERTY:
                        var newValue = getStatePropertyValue(lostChange.new_value);
                        var oldValue = getStatePropertyValue(lostChange.old_value);
                        var stateName = lostChange.state_name;
                        if (!stateWiseEditsMapping[stateName]) {
                            stateWiseEditsMapping[stateName] = [];
                        }
                        switch (lostChange.property_name) {
                            case 'content':
                                if (newValue !== null) {
                                    // TODO(sll): Also add display of audio translations here.
                                    stateWiseEditsMapping[stateName].push(angular.element('<div></div>').html('<strong>Edited content: </strong><div class="content">' +
                                        newValue.html + '</div>')
                                        .addClass('state-edit-desc'));
                                }
                                break;
                            case 'widget_id':
                                var lostChangeValue = '';
                                if (oldValue === null) {
                                    if (newValue !== 'EndExploration') {
                                        lostChangeValue = ('<strong>Added Interaction: </strong>' +
                                            newValue);
                                    }
                                    else {
                                        lostChangeValue = 'Ended Exploration';
                                    }
                                }
                                else {
                                    lostChangeValue = ('<strong>Deleted Interaction: </strong>' +
                                        oldValue);
                                }
                                stateWiseEditsMapping[stateName].push(angular.element('<div></div>').html(lostChangeValue)
                                    .addClass('state-edit-desc'));
                                break;
                            case 'widget_customization_args':
                                var lostChangeValue = '';
                                if (UtilsService.isEmpty(oldValue)) {
                                    lostChangeValue = 'Added Interaction Customizations';
                                }
                                else if (UtilsService.isEmpty(newValue)) {
                                    lostChangeValue = 'Removed Interaction Customizations';
                                }
                                else {
                                    lostChangeValue = 'Edited Interaction Customizations';
                                }
                                stateWiseEditsMapping[stateName].push(angular.element('<div></div>').html(lostChangeValue)
                                    .addClass('state-edit-desc'));
                                break;
                            case 'answer_groups':
                                var answerGroupChanges = getRelativeChangeToGroups(lostChange);
                                var answerGroupHtml = '';
                                if (answerGroupChanges === 'added') {
                                    answerGroupHtml += ('<p class="sub-edit"><i>Destination: </i>' +
                                        newValue.outcome.dest + '</p>');
                                    answerGroupHtml += ('<div class="sub-edit"><i>Feedback: </i>' +
                                        '<div class="feedback">' +
                                        newValue.outcome.feedback.getHtml() + '</div></div>');
                                    var rulesList = makeRulesListHumanReadable(newValue);
                                    if (rulesList.length > 0) {
                                        answerGroupHtml += '<p class="sub-edit"><i>Rules: </i></p>';
                                        var rulesListHtml = (angular.element('<ol></ol>').addClass('rules-list'));
                                        for (var rule in rulesList) {
                                            rulesListHtml.html(rulesList[rule][0].outerHTML);
                                        }
                                        answerGroupHtml += rulesListHtml[0].outerHTML;
                                    }
                                    stateWiseEditsMapping[stateName].push(angular.element('<div><strong>Added answer group: ' +
                                        '</strong></div>')
                                        .append(answerGroupHtml)
                                        .addClass('state-edit-desc answer-group'));
                                }
                                else if (answerGroupChanges === 'edited') {
                                    if (newValue.outcome.dest !== oldValue.outcome.dest) {
                                        answerGroupHtml += ('<p class="sub-edit"><i>Destination: </i>' +
                                            newValue.outcome.dest + '</p>');
                                    }
                                    if (!angular.equals(newValue.outcome.feedback.getHtml(), oldValue.outcome.feedback.getHtml())) {
                                        answerGroupHtml += ('<div class="sub-edit"><i>Feedback: </i>' +
                                            '<div class="feedback">' +
                                            newValue.outcome.feedback.getHtml() +
                                            '</div></div>');
                                    }
                                    if (!angular.equals(newValue.rules, oldValue.rules)) {
                                        var rulesList = makeRulesListHumanReadable(newValue);
                                        if (rulesList.length > 0) {
                                            answerGroupHtml += ('<p class="sub-edit"><i>Rules: </i></p>');
                                            var rulesListHtml = (angular.element('<ol></ol>')
                                                .addClass('rules-list'));
                                            for (var rule in rulesList) {
                                                rulesListHtml.html(rulesList[rule][0].outerHTML);
                                            }
                                            answerGroupChanges = rulesListHtml[0].outerHTML;
                                        }
                                    }
                                    stateWiseEditsMapping[stateName].push(angular.element('<div><strong>Edited answer group: <strong>' +
                                        '</div>')
                                        .append(answerGroupHtml)
                                        .addClass('state-edit-desc answer-group'));
                                }
                                else if (answerGroupChanges === 'deleted') {
                                    stateWiseEditsMapping[stateName].push(angular.element('<div>Deleted answer group</div>')
                                        .addClass('state-edit-desc'));
                                }
                                break;
                            case 'default_outcome':
                                var defaultOutcomeChanges = getRelativeChangeToGroups(lostChange);
                                var defaultOutcomeHtml = '';
                                if (defaultOutcomeChanges === 'added') {
                                    defaultOutcomeHtml += ('<p class="sub-edit"><i>Destination: </i>' +
                                        newValue.dest + '</p>');
                                    defaultOutcomeHtml += ('<div class="sub-edit"><i>Feedback: </i>' +
                                        '<div class="feedback">' + newValue.feedback.getHtml() +
                                        '</div></div>');
                                    stateWiseEditsMapping[stateName].push(angular.element('<div>Added default outcome: </div>')
                                        .append(defaultOutcomeHtml)
                                        .addClass('state-edit-desc default-outcome'));
                                }
                                else if (defaultOutcomeChanges === 'edited') {
                                    if (newValue.dest !== oldValue.dest) {
                                        defaultOutcomeHtml += ('<p class="sub-edit"><i>Destination: </i>' +
                                            newValue.dest +
                                            '</p>');
                                    }
                                    if (!angular.equals(newValue.feedback.getHtml(), oldValue.feedback.getHtml())) {
                                        defaultOutcomeHtml += ('<div class="sub-edit"><i>Feedback: </i>' +
                                            '<div class="feedback">' + newValue.feedback +
                                            '</div></div>');
                                    }
                                    stateWiseEditsMapping[stateName].push(angular.element('<div>Edited default outcome: </div>')
                                        .append(defaultOutcomeHtml)
                                        .addClass('state-edit-desc default-outcome'));
                                }
                                else if (defaultOutcomeChanges === 'deleted') {
                                    stateWiseEditsMapping[stateName].push(angular.element('<div>Deleted default outcome</div>')
                                        .addClass('state-edit-desc'));
                                }
                        }
                }
            });
            for (var stateName in stateWiseEditsMapping) {
                var stateChangesEl = angular.element('<li>Edits to state: ' + stateName + '</li>');
                for (var stateEdit in stateWiseEditsMapping[stateName]) {
                    stateChangesEl.append(stateWiseEditsMapping[stateName][stateEdit]);
                }
                outerHtml.append(stateChangesEl);
            }
            return outerHtml;
        };
        return {
            makeHumanReadable: function (lostChanges) {
                try {
                    return makeHumanReadable(lostChanges);
                }
                catch (e) {
                    return angular.element('<div>Error: Could not recover lost changes.</div>');
                }
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/services/exploration-data.service.ts":
/*!****************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/services/exploration-data.service.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for handling all interactions
 * with the exploration editor backend.
 */
__webpack_require__(/*! domain/exploration/EditableExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/EditableExplorationBackendApiService.ts");
__webpack_require__(/*! domain/exploration/ReadOnlyExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/LocalStorageService.ts */ "./core/templates/dev/head/services/LocalStorageService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/services.constants.ajs.ts */ "./core/templates/dev/head/services/services.constants.ajs.ts");
angular.module('oppia').factory('ExplorationDataService', [
    '$http', '$log', '$q', '$window', 'AlertsService',
    'EditableExplorationBackendApiService', 'LocalStorageService',
    'ReadOnlyExplorationBackendApiService', 'UrlService',
    function ($http, $log, $q, $window, AlertsService, EditableExplorationBackendApiService, LocalStorageService, ReadOnlyExplorationBackendApiService, UrlService) {
        // The pathname (without the hash) should be: .../create/{exploration_id}
        var explorationId = '';
        var draftChangeListId = null;
        var pathnameArray = UrlService.getPathname().split('/');
        for (var i = 0; i < pathnameArray.length; i++) {
            if (pathnameArray[i] === 'create') {
                explorationId = pathnameArray[i + 1];
                break;
            }
        }
        if (!explorationId) {
            $log.error('Unexpected call to ExplorationDataService for pathname ', pathnameArray[i]);
            // Note: if we do not return anything, Karma unit tests fail.
            return {};
        }
        var resolvedAnswersUrlPrefix = ('/createhandler/resolved_answers/' + explorationId);
        var explorationDraftAutosaveUrl = ('/createhandler/autosave_draft/' + explorationId);
        // Put exploration variables here.
        var explorationData = {
            explorationId: explorationId,
            data: null,
            // Note that the changeList is the full changeList since the last
            // committed version (as opposed to the most recent autosave).
            autosaveChangeList: function (changeList, successCallback, errorCallback) {
                if (successCallback === void 0) { successCallback = function (response) { }; }
                if (errorCallback === void 0) { errorCallback = function () { }; }
                // First save locally to be retrieved later if save is unsuccessful.
                LocalStorageService.saveExplorationDraft(explorationId, changeList, draftChangeListId);
                $http.put(explorationDraftAutosaveUrl, {
                    change_list: changeList,
                    version: explorationData.data.version
                }).then(function (response) {
                    draftChangeListId = response.data.draft_change_list_id;
                    // We can safely remove the locally saved draft copy if it was saved
                    // to the backend.
                    LocalStorageService.removeExplorationDraft(explorationId);
                    if (successCallback) {
                        successCallback(response);
                    }
                }, function () {
                    if (errorCallback) {
                        errorCallback();
                    }
                });
            },
            discardDraft: function (successCallback, errorCallback) {
                $http.post(explorationDraftAutosaveUrl, {}).then(function () {
                    LocalStorageService.removeExplorationDraft(explorationId);
                    if (successCallback) {
                        successCallback();
                    }
                }, function () {
                    if (errorCallback) {
                        errorCallback();
                    }
                });
            },
            // Returns a promise that supplies the data for the current exploration.
            getData: function (errorCallback) {
                if (explorationData.data) {
                    $log.info('Found exploration data in cache.');
                    return $q.resolve(explorationData.data);
                }
                else {
                    // Retrieve data from the server.
                    // WARNING: Note that this is a version of the exploration with draft
                    // changes applied. This makes a force-refresh necessary when changes
                    // are discarded, otherwise the exploration-with-draft-changes
                    // (which is cached here) will be reused.
                    return (EditableExplorationBackendApiService.fetchApplyDraftExploration(explorationId).then(function (response) {
                        $log.info('Retrieved exploration data.');
                        $log.info(response);
                        draftChangeListId = response.draft_change_list_id;
                        explorationData.data = response;
                        var draft = LocalStorageService.getExplorationDraft(explorationId);
                        if (draft) {
                            if (draft.isValid(draftChangeListId)) {
                                var changeList = draft.getChanges();
                                explorationData.autosaveChangeList(changeList, function () {
                                    // A reload is needed so that the changelist just saved is
                                    // loaded as opposed to the exploration returned by this
                                    // response.
                                    $window.location.reload();
                                });
                            }
                            else {
                                errorCallback(explorationId, draft.getChanges());
                            }
                        }
                        return response;
                    }));
                }
            },
            // Returns a promise supplying the last saved version for the current
            // exploration.
            getLastSavedData: function () {
                return ReadOnlyExplorationBackendApiService.loadLatestExploration(explorationId).then(function (response) {
                    $log.info('Retrieved saved exploration data.');
                    $log.info(response);
                    return response.exploration;
                });
            },
            resolveAnswers: function (stateName, resolvedAnswersList) {
                AlertsService.clearWarnings();
                $http.put(resolvedAnswersUrlPrefix + '/' + encodeURIComponent(stateName), {
                    resolved_answers: resolvedAnswersList
                });
            },
            /**
             * Saves the exploration to the backend, and, on a success callback,
             * updates the local copy of the exploration data.
             * @param {object} changeList - Represents the change list for
             *   this save. Each element of the list is a command representing an
             *   editing action (such as add state, delete state, etc.). See the
             *  _'Change' class in exp_services.py for full documentation.
             * @param {string} commitMessage - The user-entered commit message for
             *   this save operation.
             */
            save: function (changeList, commitMessage, successCallback, errorCallback) {
                EditableExplorationBackendApiService.updateExploration(explorationId, explorationData.data.version, commitMessage, changeList).then(function (response) {
                    AlertsService.clearWarnings();
                    explorationData.data = response;
                    if (successCallback) {
                        successCallback(response.is_version_of_draft_valid, response.draft_changes);
                    }
                }, function () {
                    if (errorCallback) {
                        errorCallback();
                    }
                });
            }
        };
        return explorationData;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/services/exploration-init-state-name.service.ts":
/*!***************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/services/exploration-init-state-name.service.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A data service that stores the name of the exploration's
 * initial state. NOTE: This service does not perform validation. Users of this
 * service should ensure that new initial state names passed to the service are
 * valid.
 */
__webpack_require__(/*! pages/exploration-editor-page/services/exploration-property.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/services/exploration-property.service.ts");
angular.module('oppia').factory('ExplorationInitStateNameService', [
    'ExplorationPropertyService', function (ExplorationPropertyService) {
        var child = Object.create(ExplorationPropertyService);
        child.propertyName = 'init_state_name';
        return child;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/services/exploration-property.service.ts":
/*!********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/services/exploration-property.service.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Services for storing exploration properties for
 * displaying and editing them in multiple places in the UI,
 * with base class as ExplorationPropertyService.
 */
__webpack_require__(/*! pages/exploration-editor-page/services/change-list.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/services/change-list.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
angular.module('oppia').factory('ExplorationPropertyService', [
    '$log', '$rootScope', 'AlertsService', 'ChangeListService',
    function ($log, $rootScope, AlertsService, ChangeListService) {
        // Public base API for data services corresponding to exploration properties
        // (title, category, etc.)
        var BACKEND_CONVERSIONS = {
            param_changes: function (paramChanges) {
                return paramChanges.map(function (paramChange) {
                    return paramChange.toBackendDict();
                });
            },
            param_specs: function (paramSpecs) {
                return paramSpecs.toBackendDict();
            },
        };
        return {
            init: function (value) {
                if (this.propertyName === null) {
                    throw 'Exploration property name cannot be null.';
                }
                $log.info('Initializing exploration ' + this.propertyName + ':', value);
                // The current value of the property (which may not have been saved to
                // the frontend yet). In general, this will be bound directly to the UI.
                this.displayed = angular.copy(value);
                // The previous (saved-in-the-frontend) value of the property. Here,
                // 'saved' means that this is the latest value of the property as
                // determined by the frontend change list.
                this.savedMemento = angular.copy(value);
                $rootScope.$broadcast('explorationPropertyChanged');
            },
            // Returns whether the current value has changed from the memento.
            hasChanged: function () {
                return !angular.equals(this.savedMemento, this.displayed);
            },
            // The backend name for this property. THIS MUST BE SPECIFIED BY
            // SUBCLASSES.
            propertyName: null,
            // Transforms the given value into a normalized form. THIS CAN BE
            // OVERRIDDEN BY SUBCLASSES. The default behavior is to do nothing.
            _normalize: function (value) {
                return value;
            },
            // Validates the given value and returns a boolean stating whether it
            // is valid or not. THIS CAN BE OVERRIDDEN BY SUBCLASSES. The default
            // behavior is to always return true.
            _isValid: function (value) {
                return true;
            },
            // Normalizes the displayed value. Then, if the memento and the displayed
            // value are the same, does nothing. Otherwise, creates a new entry in the
            // change list, and updates the memento to the displayed value.
            saveDisplayedValue: function () {
                if (this.propertyName === null) {
                    throw 'Exploration property name cannot be null.';
                }
                this.displayed = this._normalize(this.displayed);
                if (!this._isValid(this.displayed) || !this.hasChanged()) {
                    this.restoreFromMemento();
                    return;
                }
                if (angular.equals(this.displayed, this.savedMemento)) {
                    return;
                }
                AlertsService.clearWarnings();
                var newBackendValue = angular.copy(this.displayed);
                var oldBackendValue = angular.copy(this.savedMemento);
                if (BACKEND_CONVERSIONS.hasOwnProperty(this.propertyName)) {
                    newBackendValue =
                        BACKEND_CONVERSIONS[this.propertyName](this.displayed);
                    oldBackendValue =
                        BACKEND_CONVERSIONS[this.propertyName](this.savedMemento);
                }
                ChangeListService.editExplorationProperty(this.propertyName, newBackendValue, oldBackendValue);
                this.savedMemento = angular.copy(this.displayed);
                $rootScope.$broadcast('explorationPropertyChanged');
            },
            // Reverts the displayed value to the saved memento.
            restoreFromMemento: function () {
                this.displayed = angular.copy(this.savedMemento);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/services/exploration-states.service.ts":
/*!******************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/services/exploration-states.service.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Data service for keeping track of the exploration's states.
 * Note that this is unlike the other exploration property services, in that it
 * keeps no mementos.
 */
__webpack_require__(/*! domain/exploration/StatesObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/StatesObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts");
__webpack_require__(/*! pages/exploration-editor-page/services/angular-name.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/services/angular-name.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/services/change-list.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/services/change-list.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/services/exploration-init-state-name.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/services/exploration-init-state-name.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/editor-tab/services/solution-validity.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/editor-tab/services/solution-validity.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/answer-classification.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/answer-classification.service.ts");
__webpack_require__(/*! components/state-editor/state-editor-properties-services/state-editor.service.ts */ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-editor.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/ValidatorsService.ts */ "./core/templates/dev/head/services/ValidatorsService.ts");
angular.module('oppia').factory('ExplorationStatesService', [
    '$filter', '$injector', '$location', '$q', '$rootScope', '$uibModal',
    'AlertsService', 'AngularNameService', 'AnswerClassificationService',
    'ChangeListService', 'ContextService', 'ExplorationInitStateNameService',
    'SolutionValidityService', 'StateEditorService', 'StatesObjectFactory',
    'UrlInterpolationService', 'ValidatorsService',
    function ($filter, $injector, $location, $q, $rootScope, $uibModal, AlertsService, AngularNameService, AnswerClassificationService, ChangeListService, ContextService, ExplorationInitStateNameService, SolutionValidityService, StateEditorService, StatesObjectFactory, UrlInterpolationService, ValidatorsService) {
        var _states = null;
        var stateAddedCallbacks = [];
        var stateDeletedCallbacks = [];
        var stateRenamedCallbacks = [];
        var stateInteractionSavedCallbacks = [];
        // Properties that have a different backend representation from the
        // frontend and must be converted.
        var BACKEND_CONVERSIONS = {
            answer_groups: function (answerGroups) {
                return answerGroups.map(function (answerGroup) {
                    return answerGroup.toBackendDict();
                });
            },
            content: function (content) {
                return content.toBackendDict();
            },
            recorded_voiceovers: function (recordedVoiceovers) {
                return recordedVoiceovers.toBackendDict();
            },
            default_outcome: function (defaultOutcome) {
                if (defaultOutcome) {
                    return defaultOutcome.toBackendDict();
                }
                else {
                    return null;
                }
            },
            hints: function (hints) {
                return hints.map(function (hint) {
                    return hint.toBackendDict();
                });
            },
            param_changes: function (paramChanges) {
                return paramChanges.map(function (paramChange) {
                    return paramChange.toBackendDict();
                });
            },
            param_specs: function (paramSpecs) {
                return paramSpecs.toBackendDict();
            },
            solution: function (solution) {
                if (solution) {
                    return solution.toBackendDict();
                }
                else {
                    return null;
                }
            },
            written_translations: function (writtenTranslations) {
                return writtenTranslations.toBackendDict();
            }
        };
        // Maps backend names to the corresponding frontend dict accessor lists.
        var PROPERTY_REF_DATA = {
            answer_groups: ['interaction', 'answerGroups'],
            confirmed_unclassified_answers: [
                'interaction', 'confirmedUnclassifiedAnswers'
            ],
            content: ['content'],
            recorded_voiceovers: ['recordedVoiceovers'],
            default_outcome: ['interaction', 'defaultOutcome'],
            param_changes: ['paramChanges'],
            param_specs: ['paramSpecs'],
            hints: ['interaction', 'hints'],
            solicit_answer_details: ['solicitAnswerDetails'],
            solution: ['interaction', 'solution'],
            widget_id: ['interaction', 'id'],
            widget_customization_args: ['interaction', 'customizationArgs'],
            written_translations: ['writtenTranslations']
        };
        var CONTENT_ID_EXTRACTORS = {
            answer_groups: function (answerGroups) {
                var contentIds = new Set();
                answerGroups.forEach(function (answerGroup) {
                    contentIds.add(answerGroup.outcome.feedback.getContentId());
                });
                return contentIds;
            },
            default_outcome: function (defaultOutcome) {
                var contentIds = new Set();
                if (defaultOutcome) {
                    contentIds.add(defaultOutcome.feedback.getContentId());
                }
                return contentIds;
            },
            hints: function (hints) {
                var contentIds = new Set();
                hints.forEach(function (hint) {
                    contentIds.add(hint.hintContent.getContentId());
                });
                return contentIds;
            },
            solution: function (solution) {
                var contentIds = new Set();
                if (solution) {
                    contentIds.add(solution.explanation.getContentId());
                }
                return contentIds;
            }
        };
        var _getElementsInFirstSetButNotInSecond = function (setA, setB) {
            var diffList = Array.from(setA).filter(function (element) {
                return !setB.has(element);
            });
            return diffList;
        };
        var _setState = function (stateName, stateData, refreshGraph) {
            _states.setState(stateName, angular.copy(stateData));
            if (refreshGraph) {
                $rootScope.$broadcast('refreshGraph');
            }
        };
        var getStatePropertyMemento = function (stateName, backendName) {
            var accessorList = PROPERTY_REF_DATA[backendName];
            var propertyRef = _states.getState(stateName);
            try {
                accessorList.forEach(function (key) {
                    propertyRef = propertyRef[key];
                });
            }
            catch (e) {
                var additionalInfo = ('\nUndefined states error debug logs:' +
                    '\nRequested state name: ' + stateName +
                    '\nExploration ID: ' + ContextService.getExplorationId() +
                    '\nChange list: ' + JSON.stringify(ChangeListService.getChangeList()) +
                    '\nAll states names: ' + _states.getStateNames());
                e.message += additionalInfo;
                throw e;
            }
            return angular.copy(propertyRef);
        };
        var saveStateProperty = function (stateName, backendName, newValue) {
            var oldValue = getStatePropertyMemento(stateName, backendName);
            var newBackendValue = angular.copy(newValue);
            var oldBackendValue = angular.copy(oldValue);
            if (BACKEND_CONVERSIONS.hasOwnProperty(backendName)) {
                newBackendValue = convertToBackendRepresentation(newValue, backendName);
                oldBackendValue = convertToBackendRepresentation(oldValue, backendName);
            }
            if (!angular.equals(oldValue, newValue)) {
                ChangeListService.editStateProperty(stateName, backendName, newBackendValue, oldBackendValue);
                var newStateData = _states.getState(stateName);
                var accessorList = PROPERTY_REF_DATA[backendName];
                if (CONTENT_ID_EXTRACTORS.hasOwnProperty(backendName)) {
                    var oldContentIds = CONTENT_ID_EXTRACTORS[backendName](oldValue);
                    var newContentIds = CONTENT_ID_EXTRACTORS[backendName](newValue);
                    var contentIdsToDelete = _getElementsInFirstSetButNotInSecond(oldContentIds, newContentIds);
                    var contentIdsToAdd = _getElementsInFirstSetButNotInSecond(newContentIds, oldContentIds);
                    contentIdsToDelete.forEach(function (contentId) {
                        newStateData.recordedVoiceovers.deleteContentId(contentId);
                        newStateData.writtenTranslations.deleteContentId(contentId);
                    });
                    contentIdsToAdd.forEach(function (contentId) {
                        newStateData.recordedVoiceovers.addContentId(contentId);
                        newStateData.writtenTranslations.addContentId(contentId);
                    });
                }
                var propertyRef = newStateData;
                for (var i = 0; i < accessorList.length - 1; i++) {
                    propertyRef = propertyRef[accessorList[i]];
                }
                propertyRef[accessorList[accessorList.length - 1]] = angular.copy(newValue);
                // We do not refresh the state editor immediately after the interaction
                // id alone is saved, because the customization args dict will be
                // temporarily invalid. A change in interaction id will always entail
                // a change in the customization args dict anyway, so the graph will
                // get refreshed after both properties have been updated.
                var refreshGraph = (backendName !== 'widget_id');
                _setState(stateName, newStateData, refreshGraph);
            }
        };
        var convertToBackendRepresentation = function (frontendValue, backendName) {
            var conversionFunction = BACKEND_CONVERSIONS[backendName];
            return conversionFunction(frontendValue);
        };
        // TODO(sll): Add unit tests for all get/save methods.
        return {
            init: function (statesBackendDict) {
                _states = StatesObjectFactory.createFromBackendDict(statesBackendDict);
                // Initialize the solutionValidityService.
                SolutionValidityService.init(_states.getStateNames());
                _states.getStateNames().forEach(function (stateName) {
                    var solution = _states.getState(stateName).interaction.solution;
                    if (solution) {
                        var result = (AnswerClassificationService.getMatchingClassificationResult(stateName, _states.getState(stateName).interaction, solution.correctAnswer, $injector.get(AngularNameService.getNameOfInteractionRulesService(_states.getState(stateName).interaction.id))));
                        var solutionIsValid = stateName !== result.outcome.dest;
                        SolutionValidityService.updateValidity(stateName, solutionIsValid);
                    }
                });
            },
            getStates: function () {
                return angular.copy(_states);
            },
            getStateNames: function () {
                return _states.getStateNames();
            },
            hasState: function (stateName) {
                return _states.hasState(stateName);
            },
            getState: function (stateName) {
                return angular.copy(_states.getState(stateName));
            },
            setState: function (stateName, stateData) {
                _setState(stateName, stateData, true);
            },
            isNewStateNameValid: function (newStateName, showWarnings) {
                if (_states.hasState(newStateName)) {
                    if (showWarnings) {
                        AlertsService.addWarning('A state with this name already exists.');
                    }
                    return false;
                }
                return (ValidatorsService.isValidStateName(newStateName, showWarnings));
            },
            getStateContentMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'content');
            },
            saveStateContent: function (stateName, newContent) {
                saveStateProperty(stateName, 'content', newContent);
            },
            getStateParamChangesMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'param_changes');
            },
            saveStateParamChanges: function (stateName, newParamChanges) {
                saveStateProperty(stateName, 'param_changes', newParamChanges);
            },
            getInteractionIdMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'widget_id');
            },
            saveInteractionId: function (stateName, newInteractionId) {
                saveStateProperty(stateName, 'widget_id', newInteractionId);
                stateInteractionSavedCallbacks.forEach(function (callback) {
                    callback(stateName);
                });
            },
            getInteractionCustomizationArgsMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'widget_customization_args');
            },
            saveInteractionCustomizationArgs: function (stateName, newCustomizationArgs) {
                saveStateProperty(stateName, 'widget_customization_args', newCustomizationArgs);
                stateInteractionSavedCallbacks.forEach(function (callback) {
                    callback(stateName);
                });
            },
            getInteractionAnswerGroupsMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'answer_groups');
            },
            saveInteractionAnswerGroups: function (stateName, newAnswerGroups) {
                saveStateProperty(stateName, 'answer_groups', newAnswerGroups);
                stateInteractionSavedCallbacks.forEach(function (callback) {
                    callback(stateName);
                });
            },
            getConfirmedUnclassifiedAnswersMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'confirmed_unclassified_answers');
            },
            saveConfirmedUnclassifiedAnswers: function (stateName, newAnswers) {
                saveStateProperty(stateName, 'confirmed_unclassified_answers', newAnswers);
                stateInteractionSavedCallbacks.forEach(function (callback) {
                    callback(stateName);
                });
            },
            getInteractionDefaultOutcomeMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'default_outcome');
            },
            saveInteractionDefaultOutcome: function (stateName, newDefaultOutcome) {
                saveStateProperty(stateName, 'default_outcome', newDefaultOutcome);
            },
            getHintsMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'hints');
            },
            saveHints: function (stateName, newHints) {
                saveStateProperty(stateName, 'hints', newHints);
            },
            getSolutionMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'solution');
            },
            saveSolution: function (stateName, newSolution) {
                saveStateProperty(stateName, 'solution', newSolution);
            },
            getRecordedVoiceoversMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'recorded_voiceovers');
            },
            saveRecordedVoiceovers: function (stateName, newRecordedVoiceovers) {
                saveStateProperty(stateName, 'recorded_voiceovers', newRecordedVoiceovers);
            },
            getSolicitAnswerDetailsMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'solicit_answer_details');
            },
            saveSolicitAnswerDetails: function (stateName, newSolicitAnswerDetails) {
                saveStateProperty(stateName, 'solicit_answer_details', newSolicitAnswerDetails);
            },
            getWrittenTranslationsMemento: function (stateName) {
                return getStatePropertyMemento(stateName, 'written_translations');
            },
            saveWrittenTranslations: function (stateName, newWrittenTranslations) {
                saveStateProperty(stateName, 'written_translations', newWrittenTranslations);
            },
            isInitialized: function () {
                return _states !== null;
            },
            addState: function (newStateName, successCallback) {
                newStateName = $filter('normalizeWhitespace')(newStateName);
                if (!ValidatorsService.isValidStateName(newStateName, true)) {
                    return;
                }
                if (_states.hasState(newStateName)) {
                    AlertsService.addWarning('A state with this name already exists.');
                    return;
                }
                AlertsService.clearWarnings();
                _states.addState(newStateName);
                ChangeListService.addState(newStateName);
                stateAddedCallbacks.forEach(function (callback) {
                    callback(newStateName);
                });
                $rootScope.$broadcast('refreshGraph');
                if (successCallback) {
                    successCallback(newStateName);
                }
            },
            deleteState: function (deleteStateName) {
                AlertsService.clearWarnings();
                var initStateName = ExplorationInitStateNameService.displayed;
                if (deleteStateName === initStateName) {
                    return $q.reject('The initial state can not be deleted.');
                }
                if (!_states.hasState(deleteStateName)) {
                    var message = 'No state with name ' + deleteStateName + ' exists.';
                    AlertsService.addWarning(message);
                    return $q.reject(message);
                }
                return $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/editor-tab/templates/' +
                        'modal-templates/confirm-delete-state-modal.template.html'),
                    backdrop: true,
                    controller: [
                        '$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
                            $scope.deleteStateWarningText = ('Are you sure you want to delete the card "' +
                                deleteStateName + '"?');
                            $scope.reallyDelete = function () {
                                $uibModalInstance.close();
                            };
                            $scope.cancel = function () {
                                $uibModalInstance.dismiss();
                                AlertsService.clearWarnings();
                            };
                        }
                    ]
                }).result.then(function () {
                    _states.deleteState(deleteStateName);
                    ChangeListService.deleteState(deleteStateName);
                    if (StateEditorService.getActiveStateName() === deleteStateName) {
                        StateEditorService.setActiveStateName(ExplorationInitStateNameService.savedMemento);
                    }
                    stateDeletedCallbacks.forEach(function (callback) {
                        callback(deleteStateName);
                    });
                    $location.path('/gui/' + StateEditorService.getActiveStateName());
                    $rootScope.$broadcast('refreshGraph');
                    // This ensures that if the deletion changes rules in the current
                    // state, they get updated in the view.
                    $rootScope.$broadcast('refreshStateEditor');
                });
            },
            renameState: function (oldStateName, newStateName) {
                newStateName = $filter('normalizeWhitespace')(newStateName);
                if (!ValidatorsService.isValidStateName(newStateName, true)) {
                    return;
                }
                if (_states.hasState(newStateName)) {
                    AlertsService.addWarning('A state with this name already exists.');
                    return;
                }
                AlertsService.clearWarnings();
                _states.renameState(oldStateName, newStateName);
                StateEditorService.setActiveStateName(newStateName);
                // The 'rename state' command must come before the 'change
                // init_state_name' command in the change list, otherwise the backend
                // will raise an error because the new initial state name does not
                // exist.
                ChangeListService.renameState(newStateName, oldStateName);
                SolutionValidityService.onRenameState(newStateName, oldStateName);
                // Amend initStateName appropriately, if necessary. Note that this
                // must come after the state renaming, otherwise saving will lead to
                // a complaint that the new name is not a valid state name.
                if (ExplorationInitStateNameService.displayed === oldStateName) {
                    ExplorationInitStateNameService.displayed = newStateName;
                    ExplorationInitStateNameService.saveDisplayedValue(newStateName);
                }
                stateRenamedCallbacks.forEach(function (callback) {
                    callback(oldStateName, newStateName);
                });
                $rootScope.$broadcast('refreshGraph');
            },
            registerOnStateAddedCallback: function (callback) {
                stateAddedCallbacks.push(callback);
            },
            registerOnStateDeletedCallback: function (callback) {
                stateDeletedCallbacks.push(callback);
            },
            registerOnStateRenamedCallback: function (callback) {
                stateRenamedCallbacks.push(callback);
            },
            registerOnStateInteractionSavedCallback: function (callback) {
                stateInteractionSavedCallbacks.push(callback);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/statistics-tab/issues/answer-submit-action.directive.ts":
/*!***********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/statistics-tab/issues/answer-submit-action.directive.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Answer Submit Learner Action.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('answerSubmitAction', [
    'ExplorationHtmlFormatterService', 'HtmlEscaperService',
    'UrlInterpolationService',
    function (ExplorationHtmlFormatterService, HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/statistics-tab/issues/' +
                'answer-submit-action.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.currentStateName = $attrs.currentStateName;
                    ctrl.destStateName = $attrs.destStateName;
                    ctrl.actionIndex = $attrs.actionIndex;
                    ctrl.timeSpentInStateSecs = $attrs.timeSpentInStateSecs;
                    var _customizationArgs = HtmlEscaperService.escapedJsonToObj($attrs.interactionCustomizationArgs);
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    ctrl.getShortAnswerHtml = function () {
                        return ExplorationHtmlFormatterService.getShortAnswerHtml(_answer, $attrs.interactionId, _customizationArgs);
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-editor-page/statistics-tab/services/learner-action-render.service.ts":
/*!************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-editor-page/statistics-tab/services/learner-action-render.service.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for rendering learner action HTML strings.
 *
 * The service should be used in the following way:
 *
 * 1. All learner actions for the playthrough should be passed as an arg to the
 *  function that splits them up into Display blocks. Display blocks are the
 *  blocks in which learner actions will be displayed in their modal.
 * 2. Now, to render one Display block's HTML equivalent, we would pass it to
 *  the renderDisplayBlockHTML() function. This function converts each learner
 *  action in the block to its corresponding HTML string and joins all such
 * learner actions and then returns a giant HTML string.
 */
__webpack_require__(/*! pages/exploration-editor-page/services/exploration-states.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/services/exploration-states.service.ts");
__webpack_require__(/*! pages/exploration-editor-page/statistics-tab/issues/answer-submit-action.directive.ts */ "./core/templates/dev/head/pages/exploration-editor-page/statistics-tab/issues/answer-submit-action.directive.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
angular.module('oppia').factory('LearnerActionRenderService', [
    '$sce', 'ExplorationStatesService',
    'HtmlEscaperService', 'ACTION_TYPE_ANSWER_SUBMIT',
    'ACTION_TYPE_EXPLORATION_QUIT', 'ACTION_TYPE_EXPLORATION_START',
    function ($sce, ExplorationStatesService, HtmlEscaperService, ACTION_TYPE_ANSWER_SUBMIT, ACTION_TYPE_EXPLORATION_QUIT, ACTION_TYPE_EXPLORATION_START) {
        var renderExplorationStartActionHTML = function (stateName, actionIndex) {
            var statement = actionIndex + '. Started exploration at card "' + stateName + '".';
            return ($('<span>').text(statement)).html();
        };
        var renderExplorationQuitActionHTML = function (stateName, timeSpentInStateSecs, actionIndex) {
            var statement = actionIndex + '. Left the exploration after spending a total of ' +
                timeSpentInStateSecs + ' seconds on card "' + stateName + '".';
            return ($('<span>').text(statement)).html();
        };
        var renderContinueButtonSubmitActionHTML = function (stateName, timeSpentInStateSecs, actionIndex) {
            var statement = actionIndex + '. Pressed "Continue" to move to card "' + stateName +
                '" after ' + timeSpentInStateSecs + ' seconds.';
            return ($('<span>').text(statement)).html();
        };
        /**
         * Renders the correct HTML for AnswerSubmit action after checking for a
         * change in state.
         * @param {string} answer.
         * @param {string} destStateName.
         * @param {int} timeSpentInStateSecs.
         * @param {string} currentStateName.
         * @param {int} actionIndex.
         * @param {Interaction} interaction.
         * @returns {string}
         */
        var renderAnswerSubmitActionHTML = function (answer, destStateName, timeSpentInStateSecs, currentStateName, actionIndex, interaction) {
            var el = $('<answer-submit-action>');
            el.attr('answer', HtmlEscaperService.objToEscapedJson(answer));
            el.attr('dest-state-name', destStateName);
            el.attr('time-spent-in-state-secs', timeSpentInStateSecs);
            el.attr('current-state-name', currentStateName);
            el.attr('action-index', actionIndex);
            el.attr('interaction-id', interaction.id);
            el.attr('interaction-customization-args', HtmlEscaperService.objToEscapedJson(interaction.customizationArgs));
            return ($('<span>').append(el)).html();
        };
        /**
         * Renders the correct HTML for the table display for MultipleIncorrect
         * issue.
         * @param {LearnerAction[]} finalBlock.
         * @returns {string}
         */
        var renderLearnerActionsTableForMultipleIncorrectIssue = function (finalBlock) {
            var index = finalBlock.length - 1;
            var stateName = finalBlock[index].actionCustomizationArgs.state_name.value;
            var tableHTML = '<table class="oppia-issues-learner-action-table"><tr><th>Answer</th>' +
                '<th>Feedback</th></tr>';
            for (var i = 0; i < index; i++) {
                if (finalBlock[i].actionType !== ACTION_TYPE_ANSWER_SUBMIT) {
                    continue;
                }
                var answer = finalBlock[i].actionCustomizationArgs.submitted_answer.value;
                var feedback = finalBlock[i].actionCustomizationArgs.feedback.value._html;
                feedback = feedback.replace('{{answer}}', answer);
                tableHTML +=
                    '<tr><td>' + answer + '</td><td>' + feedback + '</td></tr>';
            }
            tableHTML += '</table>';
            return tableHTML;
        };
        /**
         * Renders the correct HTML for the learner action.
         * @param {LearnerAction} learnerAction.
         * @param {int} actionIndex.
         * @returns {string}
         */
        var renderLearnerActionHTML = function (learnerAction, actionIndex) {
            var actionType = learnerAction.actionType;
            var custArgs = learnerAction.actionCustomizationArgs;
            var interaction = ExplorationStatesService.getState(custArgs.state_name.value).interaction;
            if (actionType === ACTION_TYPE_EXPLORATION_START) {
                return renderExplorationStartActionHTML(custArgs.state_name.value, actionIndex);
            }
            else if (actionType === ACTION_TYPE_EXPLORATION_QUIT) {
                return renderExplorationQuitActionHTML(custArgs.state_name.value, custArgs.time_spent_in_state_in_msecs.value, actionIndex);
            }
            else if (actionType === ACTION_TYPE_ANSWER_SUBMIT) {
                var interactionId = custArgs.interaction_id.value;
                if (interactionId === 'Continue') {
                    return renderContinueButtonSubmitActionHTML(custArgs.dest_state_name.value, custArgs.time_spent_state_in_msecs.value, actionIndex);
                }
                else {
                    return renderAnswerSubmitActionHTML(custArgs.submitted_answer.value, custArgs.dest_state_name.value, custArgs.time_spent_state_in_msecs.value, custArgs.state_name.value, actionIndex, interaction);
                }
            }
        };
        /**
         * Checks whether the block length is less than an explicit maximum value.
         * The block is limitied to a maximum number of learner actions so that the
         * display modal is cleaner. When this bound is exceeded, actions are added
         * to the next block which can be accessed by an 'extend' button.
         */
        var withinBlockUpperBound = function (blockLength) {
            return blockLength < 4;
        };
        /**
         * Helper object to maintain the status of different display blocks while
         * splitting up learner actions. This object will be updated as learner
         * actions are inserted.
         */
        var groupedDisplayBlocks = {
            displayBlocks: null,
            localBlock: null,
            latestStateName: null,
            /**
             * Inserts new learner action into existing block or creates a new block
             * correctly, following a change in state.
             */
            handleChangeInState: function (action) {
                this.latestStateName = action.actionCustomizationArgs.state_name.value;
                if (withinBlockUpperBound(this.localBlock.length)) {
                    // Add action to block.
                    this.localBlock.unshift(action);
                    return;
                }
                // Push current block to list of blocks and action into new block.
                this.displayBlocks.push(this.localBlock);
                this.localBlock = [action];
            },
            handleSameState: function (action) {
                this.localBlock.unshift(action);
            }
        };
        return {
            /**
             * Returns the HTML for the final display block in a MultipleIncorrect
             * issue. This accounts for the table to be displayed.
             * @param {LearnerAction[]} block.
             * @param {int} actionStartIndex.
             * @returns {string}
             */
            renderFinalDisplayBlockForMISIssueHTML: function (block, actionStartIndex) {
                var index = block.length - 1;
                var stateName = block[index].actionCustomizationArgs.state_name.value;
                var htmlString = '';
                for (var i = 0; block[i].actionType !== ACTION_TYPE_ANSWER_SUBMIT; i++) {
                    htmlString += renderLearnerActionHTML(block[i], actionStartIndex + i);
                }
                htmlString +=
                    '<span class="oppia-issues-learner-action">' +
                        (actionStartIndex + i).toString() +
                        '. Submitted the following answers in card "' + stateName +
                        '"</span>';
                htmlString += renderLearnerActionsTableForMultipleIncorrectIssue(block);
                htmlString += renderLearnerActionHTML(block[index], actionStartIndex + i + 1);
                return $sce.trustAsHtml(htmlString);
            },
            renderLearnerAction: function (learnerAction, blockIndex, actionIndex) {
                return renderLearnerActionHTML(learnerAction, blockIndex + actionIndex);
            },
            renderDisplayBlockHTML: function (block, actionStartIndex) {
                var htmlString = '';
                for (var i = 0; i < block.length; i++) {
                    htmlString += renderLearnerActionHTML(block[i], actionStartIndex + i);
                }
                return $sce.trustAsHtml(htmlString);
            },
            /**
             * Splits up the entire set of learner actions into correct display blocks
             * to be displayed in sequence in the playthroughs modal.
             * @param {LearnerActions[]} learnerActions.
             * @returns {LearnerActions[][]}
             */
            getDisplayBlocks: function (learnerActions) {
                var lastIndex = learnerActions.length - 1;
                groupedDisplayBlocks.displayBlocks = [];
                groupedDisplayBlocks.localBlock = [learnerActions[lastIndex]];
                groupedDisplayBlocks.latestStateName =
                    learnerActions[lastIndex].actionCustomizationArgs.state_name.value;
                for (var i = lastIndex - 1; i >= 0; i--) {
                    var action = learnerActions[i];
                    var currentStateName = action.actionCustomizationArgs.state_name.value;
                    if (currentStateName !== groupedDisplayBlocks.latestStateName) {
                        groupedDisplayBlocks.handleChangeInState(action);
                    }
                    else {
                        groupedDisplayBlocks.handleSameState(action);
                    }
                }
                // If there is a local block with actions at the end, push it.
                if (groupedDisplayBlocks.localBlock) {
                    groupedDisplayBlocks.displayBlocks.push(groupedDisplayBlocks.localBlock);
                }
                return groupedDisplayBlocks.displayBlocks;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts":
/*!********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants to be used in the learner view.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var exploration_player_page_constants_1 = __webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ts");
angular.module('oppia').constant('CONTENT_FOCUS_LABEL_PREFIX', exploration_player_page_constants_1.ExplorationPlayerConstants.CONTENT_FOCUS_LABEL_PREFIX);
angular.module('oppia').constant('TWO_CARD_THRESHOLD_PX', exploration_player_page_constants_1.ExplorationPlayerConstants.TWO_CARD_THRESHOLD_PX);
angular.module('oppia').constant('CONTINUE_BUTTON_FOCUS_LABEL', exploration_player_page_constants_1.ExplorationPlayerConstants.CONTINUE_BUTTON_FOCUS_LABEL);
/* Called when a new audio-equippable component is loaded and displayed
   to the user, allowing for the automatic playing of audio if necessary. */
angular.module('oppia').constant('EVENT_AUTOPLAY_AUDIO', exploration_player_page_constants_1.ExplorationPlayerConstants.EVENT_AUTOPLAY_AUDIO);
// The enforced waiting period before the first hint request.
angular.module('oppia').constant('WAIT_FOR_FIRST_HINT_MSEC', exploration_player_page_constants_1.ExplorationPlayerConstants.WAIT_FOR_FIRST_HINT_MSEC);
// The enforced waiting period before each of the subsequent hint requests.
angular.module('oppia').constant('WAIT_FOR_SUBSEQUENT_HINTS_MSEC', exploration_player_page_constants_1.ExplorationPlayerConstants.WAIT_FOR_SUBSEQUENT_HINTS_MSEC);
// The time delay between the learner clicking the hint button
// and the appearance of the hint.
angular.module('oppia').constant('DELAY_FOR_HINT_FEEDBACK_MSEC', exploration_player_page_constants_1.ExplorationPlayerConstants.DELAY_FOR_HINT_FEEDBACK_MSEC);
// Array of i18n IDs for the possible hint request strings.
angular.module('oppia').constant('HINT_REQUEST_STRING_I18N_IDS', exploration_player_page_constants_1.ExplorationPlayerConstants.HINT_REQUEST_STRING_I18N_IDS);
/* This should match the CSS class defined in the tutor card directive. */
angular.module('oppia').constant('AUDIO_HIGHLIGHT_CSS_CLASS', exploration_player_page_constants_1.ExplorationPlayerConstants.AUDIO_HIGHLIGHT_CSS_CLASS);
angular.module('oppia').constant('FLAG_EXPLORATION_URL_TEMPLATE', exploration_player_page_constants_1.ExplorationPlayerConstants.FLAG_EXPLORATION_URL_TEMPLATE);
// TODO(bhenning): Find a better place for these constants.
// NOTE TO DEVELOPERS: These constants must be the same (in name and value) as
// the corresponding classification constants defined in core.domain.exp_domain.
angular.module('oppia').constant('EXPLICIT_CLASSIFICATION', exploration_player_page_constants_1.ExplorationPlayerConstants.EXPLICIT_CLASSIFICATION);
angular.module('oppia').constant('TRAINING_DATA_CLASSIFICATION', exploration_player_page_constants_1.ExplorationPlayerConstants.TRAINING_DATA_CLASSIFICATION);
angular.module('oppia').constant('STATISTICAL_CLASSIFICATION', exploration_player_page_constants_1.ExplorationPlayerConstants.STATISTICAL_CLASSIFICATION);
angular.module('oppia').constant('DEFAULT_OUTCOME_CLASSIFICATION', exploration_player_page_constants_1.ExplorationPlayerConstants.DEFAULT_OUTCOME_CLASSIFICATION);
angular.module('oppia').constant('EXPLORATION_MODE', exploration_player_page_constants_1.ExplorationPlayerConstants.EXPLORATION_MODE);
angular.module('oppia').constant('STATS_EVENT_TYPES', exploration_player_page_constants_1.ExplorationPlayerConstants.STATS_EVENT_TYPES);
angular.module('oppia').constant('STATS_REPORTING_URLS', exploration_player_page_constants_1.ExplorationPlayerConstants.STATS_REPORTING_URLS);
angular.module('oppia').constant('FEEDBACK_POPOVER_PATH', exploration_player_page_constants_1.ExplorationPlayerConstants.FEEDBACK_POPOVER_PATH);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ts":
/*!****************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants to be used in the learner view.
 */
var ExplorationPlayerConstants = /** @class */ (function () {
    function ExplorationPlayerConstants() {
    }
    ExplorationPlayerConstants.CONTENT_FOCUS_LABEL_PREFIX = 'content-focus-label-';
    ExplorationPlayerConstants.TWO_CARD_THRESHOLD_PX = 960;
    ExplorationPlayerConstants.CONTINUE_BUTTON_FOCUS_LABEL = 'continueButton';
    /* Called when a new audio-equippable component is loaded and displayed
       to the user, allowing for the automatic playing of audio if necessary. */
    ExplorationPlayerConstants.EVENT_AUTOPLAY_AUDIO = 'autoPlayAudio';
    // The enforced waiting period before the first hint request.
    ExplorationPlayerConstants.WAIT_FOR_FIRST_HINT_MSEC = 60000;
    // The enforced waiting period before each of the subsequent hint requests.
    ExplorationPlayerConstants.WAIT_FOR_SUBSEQUENT_HINTS_MSEC = 30000;
    // The time delay between the learner clicking the hint button
    // and the appearance of the hint.
    ExplorationPlayerConstants.DELAY_FOR_HINT_FEEDBACK_MSEC = 100;
    // Array of i18n IDs for the possible hint request strings.
    ExplorationPlayerConstants.HINT_REQUEST_STRING_I18N_IDS = [
        'I18N_PLAYER_HINT_REQUEST_STRING_1',
        'I18N_PLAYER_HINT_REQUEST_STRING_2',
        'I18N_PLAYER_HINT_REQUEST_STRING_3'
    ];
    /* This should match the CSS class defined in the tutor card directive. */
    ExplorationPlayerConstants.AUDIO_HIGHLIGHT_CSS_CLASS = 'conversation-skin-audio-highlight';
    ExplorationPlayerConstants.FLAG_EXPLORATION_URL_TEMPLATE = '/flagexplorationhandler/<exploration_id>';
    // TODO(bhenning): Find a better place for these constants.
    // NOTE TO DEVELOPERS: These constants must be the same (in name and value) as
    // the corresponding classification constants defined in
    // core.domain.exp_domain.
    ExplorationPlayerConstants.EXPLICIT_CLASSIFICATION = 'explicit';
    ExplorationPlayerConstants.TRAINING_DATA_CLASSIFICATION = 'training_data_match';
    ExplorationPlayerConstants.STATISTICAL_CLASSIFICATION = 'statistical_classifier';
    ExplorationPlayerConstants.DEFAULT_OUTCOME_CLASSIFICATION = 'default_outcome';
    ExplorationPlayerConstants.EXPLORATION_MODE = {
        EXPLORATION: 'exploration',
        PRETEST: 'pretest',
        QUESTION_PLAYER: 'question_player',
        STORY_CHAPTER: 'story_chapter',
        OTHER: 'other'
    };
    ExplorationPlayerConstants.STATS_EVENT_TYPES = {
        EVENT_TYPE_START_EXPLORATION: 'start',
        EVENT_TYPE_ACTUAL_START_EXPLORATION: 'actual_start',
        EVENT_TYPE_COMPLETE_EXPLORATION: 'complete',
        EVENT_TYPE_STATE_HIT: 'state_hit',
        EVENT_TYPE_STATE_COMPLETED: 'state_complete',
        EVENT_TYPE_ANSWER_SUBMITTED: 'answer_submitted',
        EVENT_TYPE_SOLUTION_HIT: 'solution_hit',
        EVENT_TYPE_LEAVE_FOR_REFRESHER_EXP: 'leave_for_refresher_exp',
    };
    ExplorationPlayerConstants.STATS_REPORTING_URLS = {
        ANSWER_SUBMITTED: '/explorehandler/answer_submitted_event/<exploration_id>',
        EXPLORATION_COMPLETED: ('/explorehandler/exploration_complete_event/<exploration_id>'),
        EXPLORATION_MAYBE_LEFT: ('/explorehandler/exploration_maybe_leave_event/<exploration_id>'),
        EXPLORATION_STARTED: ('/explorehandler/exploration_start_event/<exploration_id>'),
        STATE_HIT: '/explorehandler/state_hit_event/<exploration_id>',
        STATE_COMPLETED: '/explorehandler/state_complete_event/<exploration_id>',
        EXPLORATION_ACTUALLY_STARTED: ('/explorehandler/exploration_actual_start_event/<exploration_id>'),
        SOLUTION_HIT: '/explorehandler/solution_hit_event/<exploration_id>',
        LEAVE_FOR_REFRESHER_EXP: ('/explorehandler/leave_for_refresher_exp_event/<exploration_id>'),
        STATS_EVENTS: '/explorehandler/stats_events/<exploration_id>'
    };
    ExplorationPlayerConstants.FEEDBACK_POPOVER_PATH = '/pages/exploration-player-page/templates/' +
        'feedback-popup-container.template.html';
    return ExplorationPlayerConstants;
}());
exports.ExplorationPlayerConstants = ExplorationPlayerConstants;


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/audio-bar.directive.ts":
/*!********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/layout-directives/audio-bar.directive.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for a set of audio controls for a specific
 * audio translation in the learner view.
 */
__webpack_require__(/*! domain/utilities/BrowserCheckerService.ts */ "./core/templates/dev/head/domain/utilities/BrowserCheckerService.ts");
__webpack_require__(/*! domain/utilities/LanguageUtilService.ts */ "./core/templates/dev/head/domain/utilities/LanguageUtilService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-preloader.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-preloader.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-translation-language.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-language.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-translation-manager.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-manager.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-position.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts");
__webpack_require__(/*! services/AssetsBackendApiService.ts */ "./core/templates/dev/head/services/AssetsBackendApiService.ts");
__webpack_require__(/*! services/AudioPlayerService.ts */ "./core/templates/dev/head/services/AudioPlayerService.ts");
__webpack_require__(/*! services/AutogeneratedAudioPlayerService.ts */ "./core/templates/dev/head/services/AutogeneratedAudioPlayerService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
angular.module('oppia').directive('audioBar', [
    'AudioPreloaderService', 'UrlInterpolationService',
    function (AudioPreloaderService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/layout-directives/' +
                'audio-bar.directive.html'),
            controller: [
                '$scope', '$interval', '$timeout', 'AudioTranslationLanguageService',
                'AudioPlayerService', 'LanguageUtilService', 'AssetsBackendApiService',
                'AutogeneratedAudioPlayerService', 'PlayerPositionService',
                'WindowDimensionsService', 'AudioTranslationManagerService',
                'EVENT_AUTOPLAY_AUDIO', 'BrowserCheckerService',
                function ($scope, $interval, $timeout, AudioTranslationLanguageService, AudioPlayerService, LanguageUtilService, AssetsBackendApiService, AutogeneratedAudioPlayerService, PlayerPositionService, WindowDimensionsService, AudioTranslationManagerService, EVENT_AUTOPLAY_AUDIO, BrowserCheckerService) {
                    $scope.audioBarIsExpanded = false;
                    $scope.progressBarIsShown = false;
                    $scope.languagesInExploration =
                        AudioTranslationLanguageService.getLanguageOptionsForDropdown();
                    $scope.selectedLanguage = {
                        value: AudioTranslationLanguageService.getCurrentAudioLanguageCode()
                    };
                    $scope.$on(EVENT_AUTOPLAY_AUDIO, function (e, params) {
                        if ($scope.audioBarIsExpanded) {
                            AudioPlayerService.stop();
                            AutogeneratedAudioPlayerService.cancel();
                            // We use a timeout to allow for any previous audio to have
                            // their 'onend' callback called. This is primarily used to
                            // address delays with autogenerated audio callbacks.
                            $timeout(function () {
                                if (params) {
                                    AudioTranslationManagerService.setSecondaryAudioTranslations(params.audioTranslations, params.html, params.componentName);
                                }
                                $scope.onPlayButtonClicked();
                            }, 100);
                        }
                    });
                    $scope.isAudioBarAvailable = function () {
                        return $scope.languagesInExploration.length > 0;
                    };
                    $scope.onNewLanguageSelected = function () {
                        AudioTranslationLanguageService.setCurrentAudioLanguageCode($scope.selectedLanguage.value);
                        AudioPlayerService.stop();
                        AudioPlayerService.clear();
                        AutogeneratedAudioPlayerService.cancel();
                        if ($scope.isAudioAvailableInCurrentLanguage() &&
                            !isAutogeneratedLanguageCodeSelected()) {
                            var audioTranslation = getVoiceoverInCurrentLanguage();
                            AudioPreloaderService.setMostRecentlyRequestedAudioFilename(audioTranslation.filename);
                            AudioPreloaderService.restartAudioPreloader(PlayerPositionService.getCurrentStateName());
                        }
                    };
                    $scope.expandAudioBar = function () {
                        $scope.audioBarIsExpanded = true;
                    };
                    $scope.collapseAudioBar = function () {
                        $scope.audioBarIsExpanded = false;
                        AudioPlayerService.stop();
                        AudioPlayerService.clear();
                        AutogeneratedAudioPlayerService.cancel();
                    };
                    var lastScrollTop = 0;
                    $(window).scroll(function (event) {
                        if (WindowDimensionsService.isWindowNarrow()) {
                            updateAudioHeaderPosition();
                        }
                    });
                    var updateAudioHeaderPosition = function () {
                        var scrollTop = $(this).scrollTop();
                        var audioHeader = angular.element($('.audio-header:first'));
                        if (scrollTop > lastScrollTop) {
                            audioHeader.addClass('audio-bar-nav-up');
                            if (!$scope.audioBarIsExpanded) {
                                audioHeader.addClass('audio-bar-nav-hidden');
                            }
                        }
                        else if (scrollTop === 0 ||
                            scrollTop + $(window).height() < $(document).height()) {
                            audioHeader.removeClass('audio-bar-nav-up');
                            audioHeader.removeClass('audio-bar-nav-hidden');
                        }
                        lastScrollTop = scrollTop;
                    };
                    var getCurrentAudioLanguageCode = function () {
                        return AudioTranslationLanguageService
                            .getCurrentAudioLanguageCode();
                    };
                    $scope.getCurrentAudioLanguageDescription = function () {
                        return AudioTranslationLanguageService
                            .getCurrentAudioLanguageDescription();
                    };
                    var getVoiceoverInCurrentLanguage = function () {
                        return AudioTranslationManagerService.getCurrentAudioTranslations()[AudioTranslationLanguageService.getCurrentAudioLanguageCode()];
                    };
                    $scope.isAudioPlaying = function () {
                        return AudioPlayerService.isPlaying() ||
                            AutogeneratedAudioPlayerService.isPlaying();
                    };
                    $scope.audioLoadingIndicatorIsShown = false;
                    $scope.AudioPlayerService = AudioPlayerService;
                    $scope.isAudioAvailableInCurrentLanguage = function () {
                        return Boolean(getVoiceoverInCurrentLanguage()) ||
                            isAutogeneratedLanguageCodeSelected();
                    };
                    $scope.doesCurrentAudioTranslationNeedUpdate = function () {
                        if (!isAutogeneratedLanguageCodeSelected()) {
                            var audioTranslation = getVoiceoverInCurrentLanguage();
                            return (audioTranslation && audioTranslation.needsUpdate);
                        }
                        else {
                            return false;
                        }
                    };
                    var isAutogeneratedLanguageCodeSelected = function () {
                        return AudioTranslationLanguageService
                            .isAutogeneratedLanguageCodeSelected();
                    };
                    $scope.onPlayButtonClicked = function () {
                        $scope.progressBarIsShown = !isAutogeneratedLanguageCodeSelected();
                        if (isAutogeneratedLanguageCodeSelected()) {
                            playPauseAutogeneratedAudioTranslation();
                        }
                        else {
                            var audioTranslation = getVoiceoverInCurrentLanguage();
                            if (audioTranslation) {
                                playPauseUploadedAudioTranslation(getCurrentAudioLanguageCode());
                            }
                        }
                    };
                    $scope.track = {
                        progress: function (progressPercentage) {
                            // Returns the current track progress. In addition, sets the
                            // track progress if the progressPercentage argument is defined.
                            if (angular.isDefined(progressPercentage)) {
                                AudioPlayerService.setProgress(progressPercentage / 100);
                            }
                            return AudioPlayerService.getProgress() * 100;
                        }
                    };
                    var isCached = function (audioTranslation) {
                        return AssetsBackendApiService.isCached(audioTranslation.filename);
                    };
                    var playPauseAudioTranslation = function (languageCode) {
                        if (AudioTranslationLanguageService
                            .isAutogeneratedLanguageCodeSelected()) {
                            playPauseAutogeneratedAudioTranslation();
                        }
                        else {
                            playPauseUploadedAudioTranslation(languageCode);
                        }
                    };
                    var playPauseAutogeneratedAudioTranslation = function () {
                        // SpeechSynthesis in Chrome seems to have a bug
                        // where if you pause the utterance, wait for around
                        // 15 or more seconds, then try resuming, nothing
                        // will sound. As a temporary fix, just restart the
                        // utterance from the beginning instead of resuming.
                        if (AutogeneratedAudioPlayerService.isPlaying()) {
                            AutogeneratedAudioPlayerService.cancel();
                        }
                        else {
                            AutogeneratedAudioPlayerService.play(AudioTranslationManagerService
                                .getCurrentHtmlForAutogeneratedAudio(), AudioTranslationLanguageService
                                .getSpeechSynthesisLanguageCode(), function () {
                                // Used to update bindings to show a silent speaker after
                                // autogenerated audio has finished playing.
                                $scope.$applyAsync();
                                AudioTranslationManagerService
                                    .clearSecondaryAudioTranslations();
                            });
                        }
                    };
                    var playPauseUploadedAudioTranslation = function (languageCode) {
                        if (!AudioPlayerService.isPlaying()) {
                            if (AudioPlayerService.isTrackLoaded()) {
                                AudioPlayerService.play();
                            }
                            else {
                                loadAndPlayAudioTranslation();
                            }
                        }
                        else {
                            AudioPlayerService.pause();
                        }
                    };
                    var playCachedAudioTranslation = function (audioFilename) {
                        AudioPlayerService.load(audioFilename)
                            .then(function () {
                            $scope.audioLoadingIndicatorIsShown = false;
                            AudioPlayerService.play();
                        });
                    };
                    /**
                     * Called when an audio file finishes loading.
                     * @param {string} audioFilename - Filename of the audio file that
                     *                                 finished loading.
                     */
                    var onFinishedLoadingAudio = function (audioFilename) {
                        var mostRecentlyRequestedAudioFilename = AudioPreloaderService.getMostRecentlyRequestedAudioFilename();
                        if ($scope.audioLoadingIndicatorIsShown &&
                            audioFilename === mostRecentlyRequestedAudioFilename) {
                            playCachedAudioTranslation(audioFilename);
                        }
                    };
                    AudioPreloaderService.setAudioLoadedCallback(onFinishedLoadingAudio);
                    var loadAndPlayAudioTranslation = function () {
                        $scope.audioLoadingIndicatorIsShown = true;
                        var audioTranslation = getVoiceoverInCurrentLanguage();
                        AudioPreloaderService.setMostRecentlyRequestedAudioFilename(audioTranslation.filename);
                        if (audioTranslation) {
                            if (isCached(audioTranslation)) {
                                playCachedAudioTranslation(audioTranslation.filename);
                            }
                            else if (!AudioPreloaderService.isLoadingAudioFile(audioTranslation.filename)) {
                                AudioPreloaderService.restartAudioPreloader(PlayerPositionService.getCurrentStateName());
                            }
                        }
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/correctness-footer.directive.ts":
/*!*****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/layout-directives/correctness-footer.directive.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the correctness footer in the exploration player.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('correctnessFooter', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/layout-directives/' +
                'correctness-footer.directive.html')
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/exploration-footer.directive.ts":
/*!*****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/layout-directives/exploration-footer.directive.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for showing author/share footer
 * in exploration player.
 */
__webpack_require__(/*! components/button-directives/hint-and-solution-buttons.directive.ts */ "./core/templates/dev/head/components/button-directives/hint-and-solution-buttons.directive.ts");
__webpack_require__(/*! domain/summary/ExplorationSummaryBackendApiService.ts */ "./core/templates/dev/head/domain/summary/ExplorationSummaryBackendApiService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
angular.module('oppia').directive('explorationFooter', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/layout-directives/' +
                'exploration-footer.directive.html'),
            controller: [
                '$scope', '$http', '$log', 'ContextService',
                'ExplorationSummaryBackendApiService', 'UrlService',
                'WindowDimensionsService',
                function ($scope, $http, $log, ContextService, ExplorationSummaryBackendApiService, UrlService, WindowDimensionsService) {
                    $scope.explorationId = ContextService.getExplorationId();
                    $scope.getStaticImageUrl = UrlInterpolationService.getStaticImageUrl;
                    $scope.iframed = UrlService.isIframed();
                    $scope.windowIsNarrow = WindowDimensionsService.isWindowNarrow();
                    WindowDimensionsService.registerOnResizeHook(function () {
                        $scope.windowIsNarrow = WindowDimensionsService.isWindowNarrow();
                        $scope.$apply();
                    });
                    $scope.contributorNames = [];
                    if (!ContextService.isInQuestionPlayerMode()) {
                        ExplorationSummaryBackendApiService
                            .loadPublicAndPrivateExplorationSummaries([$scope.explorationId])
                            .then(function (summaries) {
                            var summaryBackendObject = null;
                            if (summaries.length > 0) {
                                var contributorSummary = (summaries[0].human_readable_contributors_summary);
                                $scope.contributorNames = (Object.keys(contributorSummary).sort(function (contributorUsername1, contributorUsername2) {
                                    var commitsOfContributor1 = contributorSummary[contributorUsername1].num_commits;
                                    var commitsOfContributor2 = contributorSummary[contributorUsername2].num_commits;
                                    return commitsOfContributor2 - commitsOfContributor1;
                                }));
                            }
                        });
                    }
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/feedback-popup.directive.ts":
/*!*************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/layout-directives/feedback-popup.directive.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the feedback popup.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! filters/string-utility-filters/get-abbreviated-text.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/get-abbreviated-text.filter.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-position.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/stateful/BackgroundMaskService.ts */ "./core/templates/dev/head/services/stateful/BackgroundMaskService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
// This directive is unusual in that it should only be invoked indirectly, as
// follows:
//
// <some-html-element popover-placement="bottom"
//                    uib-popover-template="'<[getFeedbackPopoverUrl()]>'"
//                    popover-trigger="click" state-name="<[STATE_NAME]>">
// </some-html-element>
//
// The state-name argument is optional. If it is not provided, the feedback is
// assumed to apply to the exploration as a whole.
angular.module('oppia').directive('feedbackPopup', [
    'ExplorationEngineService', 'UrlInterpolationService',
    function (ExplorationEngineService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/layout-directives/' +
                'feedback-popup.directive.html'),
            controller: [
                '$scope', '$element', '$filter', '$http', '$log', '$timeout',
                'AlertsService', 'BackgroundMaskService', 'FocusManagerService',
                'PlayerPositionService', 'UserService', 'WindowDimensionsService',
                'FEEDBACK_SUBJECT_MAX_CHAR_LIMIT',
                function ($scope, $element, $filter, $http, $log, $timeout, AlertsService, BackgroundMaskService, FocusManagerService, PlayerPositionService, UserService, WindowDimensionsService, FEEDBACK_SUBJECT_MAX_CHAR_LIMIT) {
                    $scope.feedbackText = '';
                    $scope.isSubmitterAnonymized = false;
                    $scope.isLoggedIn = null;
                    UserService.getUserInfoAsync().then(function (userInfo) {
                        $scope.isLoggedIn = userInfo.isLoggedIn();
                    });
                    $scope.feedbackSubmitted = false;
                    // We generate a random id since there may be multiple popover
                    // elements on the same page.
                    $scope.feedbackPopoverId = ('feedbackPopover' + Math.random().toString(36).slice(2));
                    $scope.feedbackTitle = ('Feedback when the user was at card "' +
                        PlayerPositionService.getCurrentStateName() + '"');
                    if (WindowDimensionsService.isWindowNarrow()) {
                        BackgroundMaskService.activateMask();
                    }
                    FocusManagerService.setFocus($scope.feedbackPopoverId);
                    var feedbackUrl = ('/explorehandler/give_feedback/' +
                        ExplorationEngineService.getExplorationId());
                    var getTriggerElt = function () {
                        // Find the popover trigger node (the one with a popover-template
                        // attribute). This is also the DOM node that contains the state
                        // name. Since the popover DOM node is inserted as a sibling to the
                        // node, we therefore climb up the DOM tree until we find the
                        // top-level popover element. The trigger will be one of its
                        // siblings.
                        //
                        // If the trigger element cannot be found, a value of undefined is
                        // returned. This could happen if the trigger is clicked while the
                        // feedback confirmation message is being displayed.
                        var elt = $element;
                        var popoverChildElt = null;
                        for (var i = 0; i < 10; i++) {
                            elt = elt.parent();
                            if (!angular.isUndefined(elt.attr('uib-popover-template-popup'))) {
                                popoverChildElt = elt;
                                break;
                            }
                        }
                        if (!popoverChildElt) {
                            $log.error('Could not close popover element.');
                            return undefined;
                        }
                        var popoverElt = popoverChildElt.parent();
                        var triggerElt = null;
                        var childElts = popoverElt.children();
                        for (var i = 0; i < childElts.length; i++) {
                            var childElt = $(childElts[i]);
                            if (childElt.attr('uib-popover-template')) {
                                triggerElt = childElt;
                                break;
                            }
                        }
                        if (!triggerElt) {
                            $log.error('Could not find popover trigger.');
                            return undefined;
                        }
                        return triggerElt;
                    };
                    $scope.saveFeedback = function () {
                        if ($scope.feedbackText) {
                            $http.post(feedbackUrl, {
                                subject: $scope.feedbackTitle,
                                feedback: $scope.feedbackText,
                                include_author: (!$scope.isSubmitterAnonymized && $scope.isLoggedIn),
                                state_name: PlayerPositionService.getCurrentStateName()
                            });
                        }
                        $scope.feedbackSubmitted = true;
                        $timeout(function () {
                            var triggerElt = getTriggerElt();
                            if (triggerElt) {
                                triggerElt.trigger('click');
                            }
                        }, 2000);
                    };
                    $scope.closePopover = function () {
                        // Closing the popover is done by clicking on the popover trigger.
                        // The timeout is needed to postpone the click event to
                        // the subsequent digest cycle. Otherwise, an "$apply already
                        // in progress" error is raised.
                        $timeout(function () {
                            getTriggerElt().trigger('click');
                        });
                        BackgroundMaskService.deactivateMask();
                    };
                    $scope.$on('$destroy', function () {
                        BackgroundMaskService.deactivateMask();
                    });
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/learner-local-nav.directive.ts":
/*!****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/layout-directives/learner-local-nav.directive.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the local navigation in the learner view.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! domain/exploration/ReadOnlyExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-player-state.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-player-state.service.ts");
__webpack_require__(/*! pages/exploration-player-page/layout-directives/feedback-popup.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/feedback-popup.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-position.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts");
__webpack_require__(/*! pages/exploration-player-page/suggestion-modal-for-learner-local-view/suggestion-modal-for-exploration-player.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/suggestion-modal-for-learner-local-view/suggestion-modal-for-exploration-player.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
angular.module('oppia').directive('learnerLocalNav', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/layout-directives/' +
                'learner-local-nav.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$http', '$rootScope', '$uibModal', 'AlertsService',
                'ExplorationEngineService', 'ExplorationPlayerStateService',
                'FocusManagerService', 'ReadOnlyExplorationBackendApiService',
                'SuggestionModalForExplorationPlayerService',
                'UrlInterpolationService', 'UserService', 'FEEDBACK_POPOVER_PATH',
                'FLAG_EXPLORATION_URL_TEMPLATE',
                function ($http, $rootScope, $uibModal, AlertsService, ExplorationEngineService, ExplorationPlayerStateService, FocusManagerService, ReadOnlyExplorationBackendApiService, SuggestionModalForExplorationPlayerService, UrlInterpolationService, UserService, FEEDBACK_POPOVER_PATH, FLAG_EXPLORATION_URL_TEMPLATE) {
                    var ctrl = this;
                    ctrl.explorationId = ExplorationEngineService.getExplorationId();
                    ReadOnlyExplorationBackendApiService
                        .loadExploration(ctrl.explorationId)
                        .then(function (exploration) {
                        ctrl.canEdit = exploration.can_edit;
                    });
                    ctrl.username = '';
                    $rootScope.loadingMessage = 'Loading';
                    UserService.getUserInfoAsync().then(function (userInfo) {
                        ctrl.username = userInfo.getUsername();
                        $rootScope.loadingMessage = '';
                    });
                    ctrl.getFeedbackPopoverUrl = function () {
                        return UrlInterpolationService.getDirectiveTemplateUrl(FEEDBACK_POPOVER_PATH);
                    };
                    ctrl.showLearnerSuggestionModal = function () {
                        SuggestionModalForExplorationPlayerService.showSuggestionModal('edit_exploration_state_content', {});
                    };
                    ctrl.showFlagExplorationModal = function () {
                        $uibModal.open({
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
                                'flag-exploration-modal.template.html'),
                            backdrop: true,
                            controller: [
                                '$scope', '$uibModalInstance', 'PlayerPositionService',
                                function ($scope, $uibModalInstance, PlayerPositionService) {
                                    $scope.flagMessageTextareaIsShown = false;
                                    var stateName = PlayerPositionService.getCurrentStateName();
                                    $scope.showFlagMessageTextarea = function (value) {
                                        if (value) {
                                            $scope.flagMessageTextareaIsShown = true;
                                            FocusManagerService.setFocus('flagMessageTextarea');
                                        }
                                    };
                                    $scope.submitReport = function () {
                                        if ($scope.flagMessage) {
                                            $uibModalInstance.close({
                                                report_type: $scope.flag,
                                                report_text: $scope.flagMessage,
                                                state: stateName
                                            });
                                        }
                                    };
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                }
                            ]
                        }).result.then(function (result) {
                            var flagExplorationUrl = UrlInterpolationService.interpolateUrl(FLAG_EXPLORATION_URL_TEMPLATE, {
                                exploration_id: ctrl.explorationId
                            });
                            var report = ('[' + result.state + '] (' + result.report_type + ') ' +
                                result.report_text);
                            $http.post(flagExplorationUrl, {
                                report_text: report
                            }).error(function (error) {
                                AlertsService.addWarning(error);
                            });
                            $uibModal.open({
                                templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
                                    'exploration-successfully-flagged-modal.template.html'),
                                backdrop: true,
                                controller: [
                                    '$scope', '$uibModalInstance',
                                    function ($scope, $uibModalInstance) {
                                        $scope.close = function () {
                                            $uibModalInstance.dismiss('cancel');
                                        };
                                    }
                                ]
                            });
                        });
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/learner-view-info.directive.ts":
/*!****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/layout-directives/learner-view-info.directive.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the learner view info section of the
 * footer.
 */
__webpack_require__(/*! components/profile-link-directives/profile-link-image.directive.ts */ "./core/templates/dev/head/components/profile-link-directives/profile-link-image.directive.ts");
__webpack_require__(/*! components/common-layout-directives/common-elements/sharing-links.directive.ts */ "./core/templates/dev/head/components/common-layout-directives/common-elements/sharing-links.directive.ts");
__webpack_require__(/*! filters/summarize-nonnegative-number.filter.ts */ "./core/templates/dev/head/filters/summarize-nonnegative-number.filter.ts");
__webpack_require__(/*! filters/string-utility-filters/truncate-and-capitalize.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-and-capitalize.filter.ts");
__webpack_require__(/*! components/ratings/rating-computation/rating-computation.service.ts */ "./core/templates/dev/head/components/ratings/rating-computation/rating-computation.service.ts");
__webpack_require__(/*! domain/exploration/ReadOnlyExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/DateTimeFormatService.ts */ "./core/templates/dev/head/services/DateTimeFormatService.ts");
angular.module('oppia').directive('learnerViewInfo', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/layout-directives/' +
                'learner-view-info.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$http', '$log', '$uibModal', 'ContextService',
                'ReadOnlyExplorationBackendApiService', 'UrlInterpolationService',
                'UrlService', 'DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR',
                'EXPLORATION_SUMMARY_DATA_URL_TEMPLATE',
                function ($http, $log, $uibModal, ContextService, ReadOnlyExplorationBackendApiService, UrlInterpolationService, UrlService, DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR, EXPLORATION_SUMMARY_DATA_URL_TEMPLATE) {
                    var ctrl = this;
                    var explorationId = ContextService.getExplorationId();
                    var expInfo = null;
                    ctrl.explorationTitle = 'Loading...';
                    ReadOnlyExplorationBackendApiService.fetchExploration(explorationId, UrlService.getExplorationVersionFromUrl())
                        .then(function (response) {
                        ctrl.explorationTitle = response.exploration.title;
                    });
                    ctrl.showInformationCard = function () {
                        if (expInfo) {
                            openInformationCardModal();
                        }
                        else {
                            $http.get(EXPLORATION_SUMMARY_DATA_URL_TEMPLATE, {
                                params: {
                                    stringified_exp_ids: JSON.stringify([explorationId]),
                                    include_private_explorations: JSON.stringify(true)
                                }
                            }).then(function (response) {
                                expInfo = response.data.summaries[0];
                                openInformationCardModal();
                            }, function () {
                                $log.error('Information card failed to load for exploration ' +
                                    explorationId);
                            });
                        }
                    };
                    var openInformationCardModal = function () {
                        $uibModal.open({
                            animation: true,
                            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
                                'information-card-modal.directive.html'),
                            windowClass: 'oppia-modal-information-card',
                            resolve: {
                                expInfo: function () {
                                    return expInfo;
                                }
                            },
                            controller: [
                                '$scope', '$uibModalInstance',
                                'DateTimeFormatService', 'RatingComputationService', 'expInfo',
                                'UrlInterpolationService',
                                function ($scope, $uibModalInstance, DateTimeFormatService, RatingComputationService, expInfo, UrlInterpolationService) {
                                    var getExplorationTagsSummary = function (arrayOfTags) {
                                        var tagsToShow = [];
                                        var tagsInTooltip = [];
                                        var MAX_CHARS_TO_SHOW = 45;
                                        for (var i = 0; i < arrayOfTags.length; i++) {
                                            var newLength = (tagsToShow.toString() + arrayOfTags[i]).length;
                                            if (newLength < MAX_CHARS_TO_SHOW) {
                                                tagsToShow.push(arrayOfTags[i]);
                                            }
                                            else {
                                                tagsInTooltip.push(arrayOfTags[i]);
                                            }
                                        }
                                        return {
                                            tagsToShow: tagsToShow,
                                            tagsInTooltip: tagsInTooltip
                                        };
                                    };
                                    var getLastUpdatedString = function (millisSinceEpoch) {
                                        return DateTimeFormatService
                                            .getLocaleAbbreviatedDatetimeString(millisSinceEpoch);
                                    };
                                    $scope.DEFAULT_TWITTER_SHARE_MESSAGE_PLAYER = (DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR);
                                    $scope.averageRating = (RatingComputationService.computeAverageRating(expInfo.ratings));
                                    var contributorsSummary = (expInfo.human_readable_contributors_summary || {});
                                    $scope.contributorNames = Object.keys(contributorsSummary).sort(function (contributorUsername1, contributorUsername2) {
                                        var commitsOfContributor1 = contributorsSummary[contributorUsername1].num_commits;
                                        var commitsOfContributor2 = contributorsSummary[contributorUsername2].num_commits;
                                        return commitsOfContributor2 - commitsOfContributor1;
                                    });
                                    $scope.explorationId = expInfo.id;
                                    $scope.explorationTags = getExplorationTagsSummary(expInfo.tags);
                                    $scope.explorationTitle = expInfo.title;
                                    $scope.infoCardBackgroundCss = {
                                        'background-color': expInfo.thumbnail_bg_color
                                    };
                                    $scope.infoCardBackgroundImageUrl = expInfo
                                        .thumbnail_icon_url;
                                    $scope.getStaticImageUrl = (UrlInterpolationService.getStaticImageUrl);
                                    $scope.lastUpdatedString = getLastUpdatedString(expInfo.last_updated_msec);
                                    $scope.numViews = expInfo.num_views;
                                    $scope.objective = expInfo.objective;
                                    $scope.explorationIsPrivate = (expInfo.status === 'private');
                                    $scope.cancel = function () {
                                        $uibModalInstance.dismiss();
                                    };
                                }
                            ]
                        });
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/progress-nav.directive.ts":
/*!***********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/layout-directives/progress-nav.directive.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for navigation in the conversation skin.
 */
__webpack_require__(/*! pages/exploration-player-page/learner-experience/continue-button.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/continue-button.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-player-state.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-player-state.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-position.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-transcript.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
__webpack_require__(/*! pages/interaction-specs.constants.ajs.ts */ "./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts");
angular.module('oppia').directive('progressNav', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                onSubmit: '&',
                onClickContinueButton: '&',
                isLearnAgainButton: '&',
                getDisplayedCard: '&displayedCard',
                isSubmitButtonShown: '&submitButtonIsShown',
                isSubmitButtonDisabled: '&submitButtonIsDisabled'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/layout-directives/' +
                'progress-nav.directive.html'),
            controller: [
                '$scope', '$rootScope', 'PlayerPositionService', 'UrlService',
                'PlayerTranscriptService', 'ExplorationEngineService',
                'WindowDimensionsService', 'TWO_CARD_THRESHOLD_PX',
                'CONTINUE_BUTTON_FOCUS_LABEL', 'INTERACTION_SPECS',
                'ExplorationPlayerStateService',
                function ($scope, $rootScope, PlayerPositionService, UrlService, PlayerTranscriptService, ExplorationEngineService, WindowDimensionsService, TWO_CARD_THRESHOLD_PX, CONTINUE_BUTTON_FOCUS_LABEL, INTERACTION_SPECS, ExplorationPlayerStateService) {
                    $scope.CONTINUE_BUTTON_FOCUS_LABEL = CONTINUE_BUTTON_FOCUS_LABEL;
                    $scope.isIframed = UrlService.isIframed();
                    var transcriptLength = 0;
                    var interactionIsInline = true;
                    var interactionHasNavSubmitButton = false;
                    var updateDisplayedCardInfo = function () {
                        transcriptLength = PlayerTranscriptService.getNumCards();
                        $scope.displayedCardIndex =
                            PlayerPositionService.getDisplayedCardIndex();
                        $scope.displayedCard = $scope.getDisplayedCard();
                        $scope.hasPrevious = $scope.displayedCardIndex > 0;
                        $scope.hasNext = !PlayerTranscriptService.isLastCard($scope.displayedCardIndex);
                        $scope.conceptCardIsBeingShown = ($scope.displayedCard.getStateName() === null &&
                            !ExplorationPlayerStateService.isInQuestionMode());
                        var interaction = $scope.displayedCard.getInteraction();
                        if (!$scope.conceptCardIsBeingShown) {
                            interactionIsInline = ($scope.displayedCard.isInteractionInline());
                            $scope.interactionCustomizationArgs =
                                $scope.displayedCard.getInteractionCustomizationArgs();
                            $scope.interactionId = $scope.displayedCard.getInteractionId();
                            if ($scope.interactionId) {
                                interactionHasNavSubmitButton = (doesInteractionHaveNavSubmitButton());
                            }
                        }
                        $scope.helpCardHasContinueButton = false;
                    };
                    $scope.$watch(function () {
                        return PlayerPositionService.getDisplayedCardIndex();
                    }, updateDisplayedCardInfo);
                    $scope.$on('helpCardAvailable', function (evt, helpCard) {
                        $scope.helpCardHasContinueButton = helpCard.hasContinueButton;
                    });
                    var doesInteractionHaveNavSubmitButton = function () {
                        return (Boolean($scope.interactionId) &&
                            INTERACTION_SPECS[$scope.interactionId].
                                show_generic_submit_button);
                    };
                    $scope.changeCard = function (index) {
                        if (index >= 0 && index < transcriptLength) {
                            PlayerPositionService.recordNavigationButtonClick();
                            PlayerPositionService.setDisplayedCardIndex(index);
                            $rootScope.$broadcast('updateActiveStateIfInEditor', PlayerPositionService.getCurrentStateName());
                            $rootScope.$broadcast('currentQuestionChanged', index);
                        }
                        else {
                            throw Error('Target card index out of bounds.');
                        }
                    };
                    // Returns whether the screen is wide enough to fit two
                    // cards (e.g., the tutor and supplemental cards) side-by-side.
                    $scope.canWindowShowTwoCards = function () {
                        return WindowDimensionsService.getWidth() > TWO_CARD_THRESHOLD_PX;
                    };
                    $scope.shouldGenericSubmitButtonBeShown = function () {
                        if ($scope.interactionId === 'ItemSelectionInput' &&
                            $scope.interactionCustomizationArgs
                                .maxAllowableSelectionCount.value > 1) {
                            return true;
                        }
                        return (doesInteractionHaveNavSubmitButton() && (interactionIsInline ||
                            !$scope.canWindowShowTwoCards()));
                    };
                    $scope.shouldContinueButtonBeShown = function () {
                        if ($scope.conceptCardIsBeingShown) {
                            return true;
                        }
                        return Boolean(interactionIsInline &&
                            $scope.displayedCard.isCompleted() &&
                            $scope.displayedCard.getLastOppiaResponse());
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/continue-button.directive.ts":
/*!***************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/learner-experience/continue-button.directive.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the Continue button in exploration player and
 * editor.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').directive('continueButton', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                onClickContinueButton: '&',
                isLearnAgainButton: '&',
                focusLabel: '@'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/learner-experience/' +
                'continue-button.directive.html')
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/conversation-skin.directive.ts":
/*!*****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/learner-experience/conversation-skin.directive.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the conversation skin.
 */
__webpack_require__(/*! components/question-directives/question-player/services/question-player-state.service.ts */ "./core/templates/dev/head/components/question-directives/question-player/services/question-player-state.service.ts");
__webpack_require__(/*! components/ratings/rating-display/rating-display.directive.ts */ "./core/templates/dev/head/components/ratings/rating-display/rating-display.directive.ts");
__webpack_require__(/*! components/summary-tile/exploration-summary-tile.directive.ts */ "./core/templates/dev/head/components/summary-tile/exploration-summary-tile.directive.ts");
__webpack_require__(/*! components/summary-tile/collection-summary-tile.directive.ts */ "./core/templates/dev/head/components/summary-tile/collection-summary-tile.directive.ts");
__webpack_require__(/*! directives/angular-html-bind.directive.ts */ "./core/templates/dev/head/directives/angular-html-bind.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/layout-directives/correctness-footer.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/correctness-footer.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/layout-directives/progress-nav.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/progress-nav.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/learner-experience/learner-answer-info-card.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/learner-answer-info-card.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/learner-experience/supplemental-card.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/supplemental-card.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/learner-experience/tutor-card.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/tutor-card.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/services/learner-answer-info.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/learner-answer-info.service.ts");
__webpack_require__(/*! domain/collection/GuestCollectionProgressService.ts */ "./core/templates/dev/head/domain/collection/GuestCollectionProgressService.ts");
__webpack_require__(/*! domain/collection/ReadOnlyCollectionBackendApiService.ts */ "./core/templates/dev/head/domain/collection/ReadOnlyCollectionBackendApiService.ts");
__webpack_require__(/*! domain/exploration/EditableExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/EditableExplorationBackendApiService.ts");
__webpack_require__(/*! domain/exploration/ReadOnlyExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts");
__webpack_require__(/*! domain/question/PretestQuestionBackendApiService.ts */ "./core/templates/dev/head/domain/question/PretestQuestionBackendApiService.ts");
__webpack_require__(/*! domain/skill/ConceptCardBackendApiService.ts */ "./core/templates/dev/head/domain/skill/ConceptCardBackendApiService.ts");
__webpack_require__(/*! domain/skill/ConceptCardObjectFactory.ts */ "./core/templates/dev/head/domain/skill/ConceptCardObjectFactory.ts");
__webpack_require__(/*! domain/state_card/StateCardObjectFactory.ts */ "./core/templates/dev/head/domain/state_card/StateCardObjectFactory.ts");
__webpack_require__(/*! domain/story_viewer/ReadOnlyStoryNodeObjectFactory.ts */ "./core/templates/dev/head/domain/story_viewer/ReadOnlyStoryNodeObjectFactory.ts");
__webpack_require__(/*! domain/story_viewer/StoryViewerBackendApiService.ts */ "./core/templates/dev/head/domain/story_viewer/StoryViewerBackendApiService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-translation-manager.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-manager.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-player-state.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-player-state.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-recommendations.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-recommendations.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/fatigue-detection.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/fatigue-detection.service.ts");
__webpack_require__(/*! pages/exploration-player-page/layout-directives/feedback-popup.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/feedback-popup.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/services/hints-and-solution-manager.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/hints-and-solution-manager.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/image-preloader.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/image-preloader.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/learner-params.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/learner-params.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/learner-view-rating.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/learner-view-rating.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/number-attempts.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/number-attempts.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-correctness-feedback-enabled.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-correctness-feedback-enabled.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-position.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-transcript.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/question-player-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/question-player-engine.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/refresher-exploration-confirmation-modal.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/refresher-exploration-confirmation-modal.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/state-classifier-mapping.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/state-classifier-mapping.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/stats-reporting.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/stats-reporting.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/AutogeneratedAudioPlayerService.ts */ "./core/templates/dev/head/services/AutogeneratedAudioPlayerService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/MessengerService.ts */ "./core/templates/dev/head/services/MessengerService.ts");
__webpack_require__(/*! services/PlaythroughService.ts */ "./core/templates/dev/head/services/PlaythroughService.ts");
__webpack_require__(/*! services/SiteAnalyticsService.ts */ "./core/templates/dev/head/services/SiteAnalyticsService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
__webpack_require__(/*! pages/interaction-specs.constants.ajs.ts */ "./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts");
// Note: This file should be assumed to be in an IIFE, and the constants below
// should only be used within this file.
var TIME_FADEOUT_MSEC = 100;
var TIME_HEIGHT_CHANGE_MSEC = 500;
var TIME_FADEIN_MSEC = 100;
var TIME_NUM_CARDS_CHANGE_MSEC = 500;
angular.module('oppia').animation('.conversation-skin-animate-tutor-card-on-narrow', function () {
    var tutorCardLeft, tutorCardWidth, tutorCardHeight, oppiaAvatarLeft;
    var tutorCardAnimatedLeft, tutorCardAnimatedWidth;
    var beforeAddClass = function (element, className, done) {
        if (className !== 'ng-hide') {
            done();
            return;
        }
        var tutorCard = element;
        var supplementalCard = $('.conversation-skin-supplemental-card-container');
        var oppiaAvatar = $('.conversation-skin-oppia-avatar.show-tutor-card');
        oppiaAvatarLeft = supplementalCard.position().left +
            supplementalCard.width() - oppiaAvatar.width();
        tutorCardLeft = tutorCard.position().left;
        tutorCardWidth = tutorCard.width();
        tutorCardHeight = tutorCard.height();
        if (tutorCard.offset().left + tutorCardWidth > oppiaAvatar.offset().left) {
            var animationLength = Math.min(oppiaAvatarLeft - tutorCard.offset().left, tutorCardWidth);
            tutorCardAnimatedLeft = tutorCardLeft + animationLength;
            tutorCardAnimatedWidth = tutorCardWidth - animationLength;
        }
        else {
            tutorCardAnimatedLeft = oppiaAvatarLeft;
            tutorCardAnimatedWidth = 0;
        }
        oppiaAvatar.hide();
        tutorCard.css({
            'min-width': 0
        });
        tutorCard.animate({
            left: tutorCardAnimatedLeft,
            width: tutorCardAnimatedWidth,
            height: 0,
            opacity: 1
        }, 500, function () {
            oppiaAvatar.show();
            tutorCard.css({
                left: '',
                width: '',
                height: '',
                opacity: '',
                'min-width': ''
            });
            done();
        });
    };
    var removeClass = function (element, className, done) {
        if (className !== 'ng-hide') {
            done();
            return;
        }
        var tutorCard = element;
        $('.conversation-skin-oppia-avatar.show-tutor-card').hide(0, function () {
            tutorCard.css({
                left: tutorCardAnimatedLeft,
                width: tutorCardAnimatedWidth,
                height: 0,
                opacity: 0,
                'min-width': 0
            });
            tutorCard.animate({
                left: tutorCardLeft,
                width: tutorCardWidth,
                height: tutorCardHeight,
                opacity: 1
            }, 500, function () {
                tutorCard.css({
                    left: '',
                    width: '',
                    height: '',
                    opacity: '',
                    'min-width': ''
                });
                done();
            });
        });
    };
    return {
        beforeAddClass: beforeAddClass,
        removeClass: removeClass
    };
});
angular.module('oppia').animation('.conversation-skin-animate-tutor-card-content', function () {
    var animateCardChange = function (element, className, done) {
        if (className !== 'animate-card-change') {
            return;
        }
        var currentHeight = element.height();
        var expectedNextHeight = $('.conversation-skin-future-tutor-card ' +
            '.oppia-learner-view-card-content').height();
        // Fix the current card height, so that it does not change during the
        // animation, even though its contents might.
        element.css('height', currentHeight);
        jQuery(element).animate({
            opacity: 0
        }, TIME_FADEOUT_MSEC).animate({
            height: expectedNextHeight
        }, TIME_HEIGHT_CHANGE_MSEC).animate({
            opacity: 1
        }, TIME_FADEIN_MSEC, function () {
            element.css('height', '');
            done();
        });
        return function (cancel) {
            if (cancel) {
                element.css('opacity', '1.0');
                element.css('height', '');
                element.stop();
            }
        };
    };
    return {
        addClass: animateCardChange
    };
});
angular.module('oppia').animation('.conversation-skin-animate-cards', function () {
    // This removes the newly-added class once the animation is finished.
    var animateCards = function (element, className, done) {
        var tutorCardElt = jQuery(element).find('.conversation-skin-main-tutor-card');
        var supplementalCardElt = jQuery(element).find('.conversation-skin-supplemental-card-container');
        if (className === 'animate-to-two-cards') {
            var supplementalWidth = supplementalCardElt.width();
            supplementalCardElt.css({
                width: 0,
                'min-width': '0',
                opacity: '0'
            });
            supplementalCardElt.animate({
                width: supplementalWidth
            }, TIME_NUM_CARDS_CHANGE_MSEC, function () {
                supplementalCardElt.animate({
                    opacity: '1'
                }, TIME_FADEIN_MSEC, function () {
                    supplementalCardElt.css({
                        width: '',
                        'min-width': '',
                        opacity: ''
                    });
                    jQuery(element).removeClass('animate-to-two-cards');
                    done();
                });
            });
            return function (cancel) {
                if (cancel) {
                    supplementalCardElt.css({
                        width: '',
                        'min-width': '',
                        opacity: ''
                    });
                    supplementalCardElt.stop();
                    jQuery(element).removeClass('animate-to-two-cards');
                }
            };
        }
        else if (className === 'animate-to-one-card') {
            supplementalCardElt.css({
                opacity: 0,
                'min-width': 0
            });
            supplementalCardElt.animate({
                width: 0
            }, TIME_NUM_CARDS_CHANGE_MSEC, function () {
                jQuery(element).removeClass('animate-to-one-card');
                done();
            });
            return function (cancel) {
                if (cancel) {
                    supplementalCardElt.css({
                        opacity: '',
                        'min-width': '',
                        width: ''
                    });
                    supplementalCardElt.stop();
                    jQuery(element).removeClass('animate-to-one-card');
                }
            };
        }
        else {
            return;
        }
    };
    return {
        addClass: animateCards
    };
});
angular.module('oppia').directive('conversationSkin', [
    'UrlInterpolationService', 'UrlService',
    function (UrlInterpolationService, UrlService) {
        return {
            restrict: 'E',
            scope: {
                getQuestionPlayerConfig: '&questionPlayerConfig',
            },
            link: function (scope) {
                var isIframed = UrlService.isIframed();
                scope.directiveTemplate = isIframed ?
                    UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/learner-experience/' +
                        'conversation-skin-embed.directive.html') :
                    UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/learner-experience/' +
                        'conversation-skin.directive.html');
            },
            template: '<div ng-include="directiveTemplate"></div>',
            controller: [
                '$http', '$location', '$q', '$rootScope', '$scope', '$timeout',
                '$translate', '$window', 'AlertsService',
                'AudioTranslationManagerService', 'AutogeneratedAudioPlayerService',
                'ConceptCardBackendApiService', 'ConceptCardObjectFactory',
                'ContextService', 'CurrentInteractionService',
                'EditableExplorationBackendApiService', 'ExplorationEngineService',
                'ExplorationPlayerStateService', 'ExplorationRecommendationsService',
                'FatigueDetectionService', 'FocusManagerService',
                'GuestCollectionProgressService', 'HintsAndSolutionManagerService',
                'ImagePreloaderService', 'LearnerAnswerInfoService',
                'LearnerParamsService', 'LearnerViewRatingService', 'MessengerService',
                'NumberAttemptsService', 'PlayerCorrectnessFeedbackEnabledService',
                'PlayerPositionService', 'PlayerTranscriptService',
                'PlaythroughService', 'PretestQuestionBackendApiService',
                'QuestionPlayerEngineService', 'QuestionPlayerStateService',
                'ReadOnlyCollectionBackendApiService',
                'ReadOnlyExplorationBackendApiService',
                'ReadOnlyStoryNodeObjectFactory',
                'RefresherExplorationConfirmationModalService',
                'StateClassifierMappingService', 'SiteAnalyticsService',
                'StateCardObjectFactory', 'StatsReportingService',
                'StoryViewerBackendApiService', 'UrlService', 'UserService',
                'WindowDimensionsService', 'COMPONENT_NAME_FEEDBACK',
                'CONTENT_FOCUS_LABEL_PREFIX', 'CONTINUE_BUTTON_FOCUS_LABEL',
                'DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR',
                'ENABLE_SOLICIT_ANSWER_DETAILS_FEATURE',
                'EVENT_ACTIVE_CARD_CHANGED', 'EVENT_AUTOPLAY_AUDIO',
                'EVENT_NEW_CARD_AVAILABLE', 'EVENT_NEW_CARD_OPENED',
                'EXPLORATION_SUMMARY_DATA_URL_TEMPLATE', 'FEEDBACK_POPOVER_PATH',
                'INTERACTION_DISPLAY_MODE_INLINE',
                'INTERACTION_SPECS', 'NUM_EXPLORATIONS_PER_REVIEW_TEST',
                'PAGE_CONTEXT', 'SUPPORTED_SITE_LANGUAGES', 'TWO_CARD_THRESHOLD_PX',
                'WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS',
                function ($http, $location, $q, $rootScope, $scope, $timeout, $translate, $window, AlertsService, AudioTranslationManagerService, AutogeneratedAudioPlayerService, ConceptCardBackendApiService, ConceptCardObjectFactory, ContextService, CurrentInteractionService, EditableExplorationBackendApiService, ExplorationEngineService, ExplorationPlayerStateService, ExplorationRecommendationsService, FatigueDetectionService, FocusManagerService, GuestCollectionProgressService, HintsAndSolutionManagerService, ImagePreloaderService, LearnerAnswerInfoService, LearnerParamsService, LearnerViewRatingService, MessengerService, NumberAttemptsService, PlayerCorrectnessFeedbackEnabledService, PlayerPositionService, PlayerTranscriptService, PlaythroughService, PretestQuestionBackendApiService, QuestionPlayerEngineService, QuestionPlayerStateService, ReadOnlyCollectionBackendApiService, ReadOnlyExplorationBackendApiService, ReadOnlyStoryNodeObjectFactory, RefresherExplorationConfirmationModalService, StateClassifierMappingService, SiteAnalyticsService, StateCardObjectFactory, StatsReportingService, StoryViewerBackendApiService, UrlService, UserService, WindowDimensionsService, COMPONENT_NAME_FEEDBACK, CONTENT_FOCUS_LABEL_PREFIX, CONTINUE_BUTTON_FOCUS_LABEL, DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR, ENABLE_SOLICIT_ANSWER_DETAILS_FEATURE, EVENT_ACTIVE_CARD_CHANGED, EVENT_AUTOPLAY_AUDIO, EVENT_NEW_CARD_AVAILABLE, EVENT_NEW_CARD_OPENED, EXPLORATION_SUMMARY_DATA_URL_TEMPLATE, FEEDBACK_POPOVER_PATH, INTERACTION_DISPLAY_MODE_INLINE, INTERACTION_SPECS, NUM_EXPLORATIONS_PER_REVIEW_TEST, PAGE_CONTEXT, SUPPORTED_SITE_LANGUAGES, TWO_CARD_THRESHOLD_PX, WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS) {
                    $scope.CONTINUE_BUTTON_FOCUS_LABEL = CONTINUE_BUTTON_FOCUS_LABEL;
                    // The minimum width, in pixels, needed to be able to show two cards
                    // side-by-side.
                    var TIME_PADDING_MSEC = 250;
                    var TIME_SCROLL_MSEC = 600;
                    var MIN_CARD_LOADING_DELAY_MSEC = 950;
                    $scope.isLoggedIn = null;
                    UserService.getUserInfoAsync().then(function (userInfo) {
                        $scope.isLoggedIn = userInfo.isLoggedIn();
                    });
                    $scope.collectionId = UrlService.getCollectionIdFromExplorationUrl();
                    if ($scope.collectionId) {
                        ReadOnlyCollectionBackendApiService
                            .loadCollection($scope.collectionId)
                            .then(function (collection) {
                            $scope.collectionTitle = collection.title;
                        });
                    }
                    else {
                        $scope.collectionTitle = null;
                    }
                    $scope.getFeedbackPopoverUrl = function () {
                        return UrlInterpolationService.getDirectiveTemplateUrl(FEEDBACK_POPOVER_PATH);
                    };
                    var alwaysAskLearnerForAnswerDetails = (ExplorationEngineService.getAlwaysAskLearnerForAnswerDetails);
                    $scope.canAskLearnerForAnswerInfo = (LearnerAnswerInfoService.canAskLearnerForAnswerInfo);
                    var initLearnerAnswerInfoService = (LearnerAnswerInfoService.initLearnerAnswerInfoService);
                    var hasInteractedAtLeastOnce = false;
                    $scope.answerIsBeingProcessed = false;
                    var _nextFocusLabel = null;
                    var _editorPreviewMode = ContextService.isInExplorationEditorPage();
                    // This variable is used only when viewport is narrow.
                    // Indicates whether the tutor card is displayed.
                    var tutorCardIsDisplayedIfNarrow = true;
                    $scope.explorationId = ExplorationEngineService.getExplorationId();
                    var questionPlayerConfig = $scope.getQuestionPlayerConfig();
                    $scope.isInPreviewMode = ExplorationEngineService.isInPreviewMode();
                    $scope.isIframed = UrlService.isIframed();
                    $rootScope.loadingMessage = 'Loading';
                    $scope.hasFullyLoaded = false;
                    $scope.recommendedExplorationSummaries = null;
                    $scope.answerIsCorrect = false;
                    $scope.nextCard = null;
                    $scope.pendingCardWasSeenBefore = false;
                    $scope.isCorrectnessFeedbackEnabled = function () {
                        return PlayerCorrectnessFeedbackEnabledService.isEnabled();
                    };
                    $scope.isCorrectnessFooterEnabled = function () {
                        return ($scope.answerIsCorrect && $scope.isCorrectnessFeedbackEnabled() &&
                            PlayerPositionService.hasLearnerJustSubmittedAnAnswer());
                    };
                    $scope.isLearnAgainButton = function () {
                        var conceptCardIsBeingShown = ($scope.displayedCard.getStateName() === null &&
                            !ExplorationPlayerStateService.isInQuestionMode());
                        if (conceptCardIsBeingShown) {
                            return false;
                        }
                        var interaction = $scope.displayedCard.getInteraction();
                        if (INTERACTION_SPECS[interaction.id].is_linear) {
                            return false;
                        }
                        return ($scope.pendingCardWasSeenBefore && !$scope.answerIsCorrect &&
                            $scope.isCorrectnessFeedbackEnabled());
                    };
                    var _getRandomSuffix = function () {
                        // This is a bit of a hack. When a refresh to a $scope variable
                        // happens,
                        // AngularJS compares the new value of the variable to its previous
                        // value. If they are the same, then the variable is not updated.
                        // Appending a random suffix makes the new value different from the
                        // previous one, and thus indirectly forces a refresh.
                        var randomSuffix = '';
                        var N = Math.round(Math.random() * 1000);
                        for (var i = 0; i < N; i++) {
                            randomSuffix += ' ';
                        }
                        return randomSuffix;
                    };
                    $scope.OPPIA_AVATAR_IMAGE_URL = (UrlInterpolationService.getStaticImageUrl('/avatar/oppia_avatar_100px.svg'));
                    $scope.getStaticImageUrl = (UrlInterpolationService.getStaticImageUrl);
                    $scope.displayedCard = null;
                    var explorationActuallyStarted = false;
                    $scope.upcomingInlineInteractionHtml = null;
                    $scope.DEFAULT_TWITTER_SHARE_MESSAGE_PLAYER =
                        DEFAULT_TWITTER_SHARE_MESSAGE_EDITOR;
                    $scope.getContentFocusLabel = function (index) {
                        return CONTENT_FOCUS_LABEL_PREFIX + index;
                    };
                    // If the exploration is iframed, send data to its parent about its
                    // height so that the parent can be resized as necessary.
                    $scope.lastRequestedHeight = 0;
                    $scope.lastRequestedScroll = false;
                    $scope.adjustPageHeight = function (scroll, callback) {
                        $timeout(function () {
                            var newHeight = document.body.scrollHeight;
                            if (Math.abs($scope.lastRequestedHeight - newHeight) > 50.5 ||
                                (scroll && !$scope.lastRequestedScroll)) {
                                // Sometimes setting iframe height to the exact content height
                                // still produces scrollbar, so adding 50 extra px.
                                newHeight += 50;
                                MessengerService.sendMessage(MessengerService.HEIGHT_CHANGE, {
                                    height: newHeight,
                                    scroll: scroll
                                });
                                $scope.lastRequestedHeight = newHeight;
                                $scope.lastRequestedScroll = scroll;
                            }
                            if (callback) {
                                callback();
                            }
                        }, 100);
                    };
                    $scope.reloadExploration = function () {
                        $window.location.reload();
                    };
                    $scope.isOnTerminalCard = function () {
                        return ($scope.displayedCard && $scope.displayedCard.isTerminal());
                    };
                    var isSupplementalCardNonempty = function (card) {
                        return !card.isInteractionInline();
                    };
                    $scope.isCurrentSupplementalCardNonempty = function () {
                        return $scope.displayedCard && isSupplementalCardNonempty($scope.displayedCard);
                    };
                    $scope.isSupplementalNavShown = function () {
                        if ($scope.displayedCard.getStateName() === null &&
                            !ExplorationPlayerStateService.isInQuestionMode()) {
                            return false;
                        }
                        var interaction = $scope.displayedCard.getInteraction();
                        return (Boolean(interaction.id) &&
                            INTERACTION_SPECS[interaction.id].show_generic_submit_button &&
                            $scope.isCurrentCardAtEndOfTranscript());
                    };
                    var _recordLeaveForRefresherExp = function (refresherExpId) {
                        if (!_editorPreviewMode) {
                            StatsReportingService.recordLeaveForRefresherExp(PlayerPositionService.getCurrentStateName(), refresherExpId);
                        }
                    };
                    // Navigates to the currently-active card, and resets the
                    // 'show previous responses' setting.
                    var _navigateToDisplayedCard = function () {
                        var index = PlayerPositionService.getDisplayedCardIndex();
                        $scope.displayedCard = PlayerTranscriptService.getCard(index);
                        $rootScope.$broadcast(EVENT_ACTIVE_CARD_CHANGED);
                        $scope.$broadcast(EVENT_AUTOPLAY_AUDIO);
                        /* A hash value is added to URL for scrolling to Oppia feedback
                           when answer is submitted by user in mobile view. This hash value
                           has to be reset each time a new card is loaded to prevent
                           unwanted scrolling in the new card. */
                        $location.hash(null);
                        $scope.pendingCardWasSeenBefore = false;
                        if (PlayerTranscriptService.hasEncounteredStateBefore($scope.displayedCard.getStateName())) {
                            $scope.pendingCardWasSeenBefore = true;
                        }
                        // We must cancel the autogenerated audio player here, or else a
                        // bug where the autogenerated audio player generates duplicate
                        // utterances occurs.
                        AutogeneratedAudioPlayerService.cancel();
                        tutorCardIsDisplayedIfNarrow = true;
                        if (_nextFocusLabel && PlayerTranscriptService.isLastCard(index)) {
                            FocusManagerService.setFocusIfOnDesktop(_nextFocusLabel);
                        }
                        else {
                            FocusManagerService.setFocusIfOnDesktop($scope.getContentFocusLabel(index));
                        }
                    };
                    $scope.returnToExplorationAfterConceptCard = function () {
                        PlayerTranscriptService.addPreviousCard();
                        var numCards = PlayerTranscriptService.getNumCards();
                        PlayerPositionService.setDisplayedCardIndex(numCards - 1);
                    };
                    var animateToTwoCards = function (doneCallback) {
                        $scope.isAnimatingToTwoCards = true;
                        $timeout(function () {
                            $scope.isAnimatingToTwoCards = false;
                            if (doneCallback) {
                                doneCallback();
                            }
                        }, TIME_NUM_CARDS_CHANGE_MSEC + TIME_FADEIN_MSEC +
                            TIME_PADDING_MSEC);
                    };
                    var animateToOneCard = function (doneCallback) {
                        $scope.isAnimatingToOneCard = true;
                        $timeout(function () {
                            $scope.isAnimatingToOneCard = false;
                            if (doneCallback) {
                                doneCallback();
                            }
                        }, TIME_NUM_CARDS_CHANGE_MSEC);
                    };
                    if (ExplorationPlayerStateService.isInQuestionPlayerMode()) {
                        $rootScope.$on('hintConsumed', function (evt) {
                            QuestionPlayerStateService.hintUsed(QuestionPlayerEngineService.getCurrentQuestion());
                        });
                        $rootScope.$on('solutionViewed', function (evt, timestamp) {
                            QuestionPlayerStateService.solutionViewed(QuestionPlayerEngineService.getCurrentQuestion());
                        });
                    }
                    $scope.isCurrentCardAtEndOfTranscript = function () {
                        return PlayerTranscriptService.isLastCard(PlayerPositionService.getDisplayedCardIndex());
                    };
                    var _addNewCard = function (newCard) {
                        PlayerTranscriptService.addNewCard(newCard);
                        var totalNumCards = PlayerTranscriptService.getNumCards();
                        var previousSupplementalCardIsNonempty = (totalNumCards > 1 &&
                            isSupplementalCardNonempty(PlayerTranscriptService.getCard(totalNumCards - 2)));
                        var nextSupplementalCardIsNonempty = isSupplementalCardNonempty(PlayerTranscriptService.getLastCard());
                        if (totalNumCards > 1 &&
                            $scope.canWindowShowTwoCards() &&
                            !previousSupplementalCardIsNonempty &&
                            nextSupplementalCardIsNonempty) {
                            PlayerPositionService.setDisplayedCardIndex(totalNumCards - 1);
                            animateToTwoCards(function () { });
                        }
                        else if (totalNumCards > 1 &&
                            $scope.canWindowShowTwoCards() &&
                            previousSupplementalCardIsNonempty &&
                            !nextSupplementalCardIsNonempty) {
                            animateToOneCard(function () {
                                PlayerPositionService.setDisplayedCardIndex(totalNumCards - 1);
                            });
                        }
                        else {
                            PlayerPositionService.setDisplayedCardIndex(totalNumCards - 1);
                        }
                        $rootScope.$broadcast('currentQuestionChanged', PlayerPositionService.getDisplayedCardIndex());
                        if ($scope.displayedCard.isTerminal()) {
                            $scope.isRefresherExploration = false;
                            $scope.parentExplorationIds =
                                UrlService.getQueryFieldValuesAsList('parent');
                            var recommendedExplorationIds = [];
                            var includeAutogeneratedRecommendations = false;
                            if ($scope.parentExplorationIds.length > 0) {
                                $scope.isRefresherExploration = true;
                                var parentExplorationId = $scope.parentExplorationIds[$scope.parentExplorationIds.length - 1];
                                recommendedExplorationIds.push(parentExplorationId);
                            }
                            else {
                                recommendedExplorationIds =
                                    ExplorationEngineService.getAuthorRecommendedExpIds();
                                includeAutogeneratedRecommendations = true;
                            }
                            ExplorationRecommendationsService.getRecommendedSummaryDicts(recommendedExplorationIds, includeAutogeneratedRecommendations, function (summaries) {
                                $scope.recommendedExplorationSummaries = summaries;
                            });
                        }
                    };
                    var _initializeDirectiveComponents = function (initialCard, focusLabel) {
                        _addNewCard(initialCard);
                        $scope.nextCard = initialCard;
                        $rootScope.$broadcast('playerStateChange', $scope.nextCard.getStateName());
                        FocusManagerService.setFocusIfOnDesktop(focusLabel);
                        $rootScope.loadingMessage = '';
                        $scope.hasFullyLoaded = true;
                        // If the exploration is embedded, use the exploration language
                        // as site language. If the exploration language is not supported
                        // as site language, English is used as default.
                        var langCodes = SUPPORTED_SITE_LANGUAGES.map(function (language) {
                            return language.id;
                        });
                        if ($scope.isIframed) {
                            var explorationLanguageCode = (ExplorationPlayerStateService.getLanguageCode());
                            if (langCodes.indexOf(explorationLanguageCode) !== -1) {
                                $translate.use(explorationLanguageCode);
                            }
                            else {
                                $translate.use('en');
                            }
                        }
                        $scope.adjustPageHeight(false, null);
                        $window.scrollTo(0, 0);
                        // The timeout is needed in order to give the recipient of the
                        // broadcast sufficient time to load.
                        $timeout(function () {
                            $rootScope.$broadcast(EVENT_NEW_CARD_OPENED, initialCard);
                        });
                    };
                    $scope.initializePage = function () {
                        hasInteractedAtLeastOnce = false;
                        $scope.recommendedExplorationSummaries = null;
                        PlayerPositionService.init(_navigateToDisplayedCard);
                        if (questionPlayerConfig) {
                            ExplorationPlayerStateService.initializeQuestionPlayer(questionPlayerConfig, _initializeDirectiveComponents);
                        }
                        else {
                            ExplorationPlayerStateService.initializePlayer(_initializeDirectiveComponents);
                        }
                    };
                    $rootScope.$on('playerStateChange', function (evt, newStateName) {
                        if (!newStateName) {
                            return;
                        }
                        // To restart the preloader for the new state if required.
                        if (!_editorPreviewMode) {
                            ImagePreloaderService.onStateChange(newStateName);
                        }
                        // Ensure the transition to a terminal state properly logs the end
                        // of the exploration.
                        if (!_editorPreviewMode && $scope.nextCard.isTerminal()) {
                            StatsReportingService.recordExplorationCompleted(newStateName, LearnerParamsService.getAllParams());
                            // If the user is a guest, has completed this exploration within
                            // the context of a collection, and the collection is whitelisted,
                            // record their temporary progress.
                            var collectionAllowsGuestProgress = (WHITELISTED_COLLECTION_IDS_FOR_SAVING_GUEST_PROGRESS.indexOf($scope.collectionId) !== -1);
                            if (collectionAllowsGuestProgress && !$scope.isLoggedIn) {
                                GuestCollectionProgressService.
                                    recordExplorationCompletedInCollection($scope.collectionId, $scope.explorationId);
                            }
                            if (ExplorationPlayerStateService.isInStoryChapterMode() &&
                                $scope.nextCard.isTerminal()) {
                                var storyId = UrlService.getUrlParams().story_id;
                                var nodeId = UrlService.getUrlParams().node_id;
                                StoryViewerBackendApiService.recordStoryNodeCompletion(storyId, nodeId);
                                StoryViewerBackendApiService.fetchStoryData(storyId).then(function (storyDataDict) {
                                    var storyNodes = storyDataDict.story_nodes.map(function (storyNodeDict) {
                                        return ReadOnlyStoryNodeObjectFactory
                                            .createFromBackendDict(storyNodeDict);
                                    });
                                    var completedStoryNodes = [];
                                    storyNodes.forEach(function (storyNode) {
                                        if (storyNode.isCompleted) {
                                            completedStoryNodes.push(storyNode);
                                        }
                                    });
                                    if (completedStoryNodes.length %
                                        NUM_EXPLORATIONS_PER_REVIEW_TEST === 0 ||
                                        completedStoryNodes.length === storyNodes.length) {
                                        var REVIEW_TEST_URL_TEMPLATE = ('/review_test/<story_id>');
                                        $window.location =
                                            UrlInterpolationService.interpolateUrl(REVIEW_TEST_URL_TEMPLATE, {
                                                story_id: storyId
                                            });
                                    }
                                });
                            }
                            // For single state explorations, when the exploration reaches the
                            // terminal state and explorationActuallyStarted is false, record
                            // exploration actual start event.
                            if (!explorationActuallyStarted) {
                                StatsReportingService.recordExplorationActuallyStarted(newStateName);
                                explorationActuallyStarted = true;
                            }
                        }
                    });
                    $scope.submitAnswer = function (answer, interactionRulesService) {
                        // Safety check to prevent double submissions from occurring.
                        if ($scope.answerIsBeingProcessed ||
                            !$scope.isCurrentCardAtEndOfTranscript() ||
                            $scope.displayedCard.isCompleted()) {
                            return;
                        }
                        if (!$scope.isInPreviewMode) {
                            FatigueDetectionService.recordSubmissionTimestamp();
                            if (FatigueDetectionService.isSubmittingTooFast()) {
                                FatigueDetectionService.displayTakeBreakMessage();
                                $scope.$broadcast('oppiaFeedbackAvailable');
                                return;
                            }
                        }
                        if (!$scope.isInPreviewMode &&
                            ENABLE_SOLICIT_ANSWER_DETAILS_FEATURE) {
                            initLearnerAnswerInfoService($scope.explorationId, ExplorationEngineService.getState(), answer, interactionRulesService, alwaysAskLearnerForAnswerDetails());
                        }
                        NumberAttemptsService.submitAttempt();
                        $scope.answerIsBeingProcessed = true;
                        hasInteractedAtLeastOnce = true;
                        PlayerTranscriptService.addNewInput(answer, false);
                        if ($scope.canAskLearnerForAnswerInfo()) {
                            $timeout(function () {
                                PlayerTranscriptService.addNewResponse(LearnerAnswerInfoService.getSolicitAnswerDetailsQuestion());
                                $scope.answerIsBeingProcessed = false;
                                $scope.$broadcast('helpCardAvailable', {
                                    helpCardHtml: (LearnerAnswerInfoService.getSolicitAnswerDetailsQuestion()),
                                    hasContinueButton: false
                                });
                            }, 100);
                            return;
                        }
                        var timeAtServerCall = new Date().getTime();
                        PlayerPositionService.recordAnswerSubmission();
                        var currentEngineService = ExplorationPlayerStateService.getCurrentEngineService();
                        $scope.answerIsCorrect = currentEngineService.submitAnswer(answer, interactionRulesService, function (nextCard, refreshInteraction, feedbackHtml, feedbackAudioTranslations, refresherExplorationId, missingPrerequisiteSkillId, remainOnCurrentCard, taggedSkillMisconceptionId, wasOldStateInitial, isFirstHit, isFinalQuestion, focusLabel) {
                            $scope.nextCard = nextCard;
                            if (!_editorPreviewMode &&
                                !ExplorationPlayerStateService.isInQuestionMode()) {
                                var oldStateName = PlayerPositionService.getCurrentStateName();
                                if (!remainOnCurrentCard) {
                                    StatsReportingService.recordStateTransition(oldStateName, nextCard.getStateName(), answer, LearnerParamsService.getAllParams(), isFirstHit);
                                    StatsReportingService.recordStateCompleted(oldStateName);
                                }
                                if (nextCard.isTerminal()) {
                                    StatsReportingService.recordStateCompleted(nextCard.getStateName());
                                }
                                if (wasOldStateInitial && !explorationActuallyStarted) {
                                    StatsReportingService.recordExplorationActuallyStarted(oldStateName);
                                    explorationActuallyStarted = true;
                                }
                            }
                            if (!ExplorationPlayerStateService.isInQuestionMode()) {
                                $rootScope.$broadcast('playerStateChange', nextCard.getStateName());
                            }
                            else {
                                QuestionPlayerStateService.answerSubmitted(QuestionPlayerEngineService.getCurrentQuestion(), !remainOnCurrentCard, taggedSkillMisconceptionId);
                            }
                            // Do not wait if the interaction is supplemental -- there's
                            // already a delay bringing in the help card.
                            var millisecsLeftToWait = (!$scope.displayedCard.isInteractionInline() ? 1.0 :
                                Math.max(MIN_CARD_LOADING_DELAY_MSEC - (new Date().getTime() - timeAtServerCall), 1.0));
                            $timeout(function () {
                                $scope.$broadcast('oppiaFeedbackAvailable');
                                var pairs = (PlayerTranscriptService.getLastCard().
                                    getInputResponsePairs());
                                var lastAnswerFeedbackPair = pairs[pairs.length - 1];
                                $scope.$broadcast(EVENT_AUTOPLAY_AUDIO, {
                                    audioTranslations: feedbackAudioTranslations,
                                    html: feedbackHtml,
                                    componentName: COMPONENT_NAME_FEEDBACK
                                });
                                if (remainOnCurrentCard) {
                                    // Stay on the same card.
                                    HintsAndSolutionManagerService.recordWrongAnswer();
                                    PlayerTranscriptService.addNewResponse(feedbackHtml);
                                    var helpCardAvailable = false;
                                    if (feedbackHtml &&
                                        !$scope.displayedCard.isInteractionInline()) {
                                        helpCardAvailable = true;
                                    }
                                    if (helpCardAvailable) {
                                        $scope.$broadcast('helpCardAvailable', {
                                            helpCardHtml: feedbackHtml,
                                            hasContinueButton: false
                                        });
                                    }
                                    if (missingPrerequisiteSkillId) {
                                        $scope.displayedCard.markAsCompleted();
                                        ConceptCardBackendApiService.loadConceptCards([missingPrerequisiteSkillId]).then(function (conceptCardBackendDict) {
                                            $scope.conceptCard =
                                                ConceptCardObjectFactory.createFromBackendDict(conceptCardBackendDict);
                                            if (helpCardAvailable) {
                                                $scope.$broadcast('helpCardAvailable', {
                                                    helpCardHtml: feedbackHtml,
                                                    hasContinueButton: true
                                                });
                                            }
                                        });
                                    }
                                    if (refreshInteraction) {
                                        // Replace the previous interaction with another of the
                                        // same type.
                                        _nextFocusLabel =
                                            FocusManagerService.generateFocusLabel();
                                        PlayerTranscriptService.updateLatestInteractionHtml($scope.displayedCard.getInteractionHtml(_nextFocusLabel) + _getRandomSuffix());
                                    }
                                    $scope.redirectToRefresherExplorationConfirmed = false;
                                    if (refresherExplorationId) {
                                        // TODO(bhenning): Add tests to verify the event is
                                        // properly recorded.
                                        var confirmRedirection = function () {
                                            $scope.redirectToRefresherExplorationConfirmed = true;
                                            _recordLeaveForRefresherExp(refresherExplorationId);
                                        };
                                        $http.get(EXPLORATION_SUMMARY_DATA_URL_TEMPLATE, {
                                            params: {
                                                stringified_exp_ids: JSON.stringify([refresherExplorationId])
                                            }
                                        }).then(function (response) {
                                            if (response.data.summaries.length > 0) {
                                                RefresherExplorationConfirmationModalService.
                                                    displayRedirectConfirmationModal(refresherExplorationId, confirmRedirection);
                                            }
                                        });
                                    }
                                    FocusManagerService.setFocusIfOnDesktop(_nextFocusLabel);
                                    scrollToBottom();
                                }
                                else {
                                    // There is a new card. If there is no feedback, move on
                                    // immediately. Otherwise, give the learner a chance to read
                                    // the feedback, and display a 'Continue' button.
                                    $scope.displayedCard.markAsCompleted();
                                    if (isFinalQuestion) {
                                        if (ExplorationPlayerStateService.
                                            isInQuestionPlayerMode()) {
                                            // We will redirect to the results page here
                                            $scope.questionSessionCompleted = true;
                                        }
                                        $scope.moveToExploration = true;
                                        if (feedbackHtml) {
                                            PlayerTranscriptService.addNewResponse(feedbackHtml);
                                            if (!$scope.displayedCard.isInteractionInline()) {
                                                $scope.$broadcast('helpCardAvailable', {
                                                    helpCardHtml: feedbackHtml,
                                                    hasContinueButton: true
                                                });
                                            }
                                        }
                                        else {
                                            $scope.showUpcomingCard();
                                        }
                                        $scope.answerIsBeingProcessed = false;
                                        return;
                                    }
                                    FatigueDetectionService.reset();
                                    NumberAttemptsService.reset();
                                    var _isNextInteractionInline = $scope.nextCard.isInteractionInline();
                                    $scope.upcomingInlineInteractionHtml = (_isNextInteractionInline ?
                                        $scope.nextCard.getInteractionHtml() : '');
                                    $scope.upcomingInteractionInstructions =
                                        $scope.nextCard.getInteractionInstructions();
                                    if (feedbackHtml) {
                                        if (PlayerTranscriptService.hasEncounteredStateBefore(nextCard.getStateName())) {
                                            $scope.pendingCardWasSeenBefore = true;
                                        }
                                        PlayerTranscriptService.addNewResponse(feedbackHtml);
                                        if (!$scope.displayedCard.isInteractionInline()) {
                                            $scope.$broadcast('helpCardAvailable', {
                                                helpCardHtml: feedbackHtml,
                                                hasContinueButton: true
                                            });
                                        }
                                        $rootScope.$broadcast(EVENT_NEW_CARD_AVAILABLE);
                                        _nextFocusLabel = $scope.CONTINUE_BUTTON_FOCUS_LABEL;
                                        FocusManagerService.setFocusIfOnDesktop(_nextFocusLabel);
                                        scrollToBottom();
                                    }
                                    else {
                                        PlayerTranscriptService.addNewResponse(feedbackHtml);
                                        // If there is no feedback, it immediately moves on
                                        // to next card. Therefore $scope.answerIsCorrect needs
                                        // to be set to false before it proceeds to next card.
                                        $scope.answerIsCorrect = false;
                                        $scope.showPendingCard();
                                    }
                                    CurrentInteractionService.clearPresubmitHooks();
                                }
                                $scope.answerIsBeingProcessed = false;
                            }, millisecsLeftToWait);
                        });
                    };
                    CurrentInteractionService.setOnSubmitFn($scope.submitAnswer);
                    $scope.startCardChangeAnimation = false;
                    $scope.showPendingCard = function () {
                        $scope.startCardChangeAnimation = true;
                        ExplorationPlayerStateService.recordNewCardAdded();
                        $timeout(function () {
                            _addNewCard($scope.nextCard);
                            $scope.upcomingInlineInteractionHtml = null;
                            $scope.upcomingInteractionInstructions = null;
                        }, TIME_FADEOUT_MSEC + 0.1 * TIME_HEIGHT_CHANGE_MSEC);
                        $timeout(function () {
                            FocusManagerService.setFocusIfOnDesktop(_nextFocusLabel);
                            scrollToTop();
                        }, TIME_FADEOUT_MSEC + TIME_HEIGHT_CHANGE_MSEC +
                            0.5 * TIME_FADEIN_MSEC);
                        $timeout(function () {
                            $scope.startCardChangeAnimation = false;
                        }, TIME_FADEOUT_MSEC + TIME_HEIGHT_CHANGE_MSEC + TIME_FADEIN_MSEC +
                            TIME_PADDING_MSEC);
                        $rootScope.$broadcast(EVENT_NEW_CARD_OPENED, $scope.nextCard);
                    };
                    $scope.showUpcomingCard = function () {
                        var currentIndex = PlayerPositionService.getDisplayedCardIndex();
                        var conceptCardIsBeingShown = ($scope.displayedCard.getStateName() === null &&
                            !ExplorationPlayerStateService.isInQuestionMode());
                        if (conceptCardIsBeingShown &&
                            PlayerTranscriptService.isLastCard(currentIndex)) {
                            $scope.returnToExplorationAfterConceptCard();
                            return;
                        }
                        if ($scope.questionSessionCompleted) {
                            $rootScope.$broadcast('questionSessionCompleted', QuestionPlayerStateService.getQuestionPlayerStateData());
                            return;
                        }
                        if ($scope.moveToExploration) {
                            $scope.moveToExploration = false;
                            ExplorationPlayerStateService.moveToExploration(_initializeDirectiveComponents);
                            return;
                        }
                        if ($scope.displayedCard.isCompleted() &&
                            ($scope.nextCard.getStateName() ===
                                $scope.displayedCard.getStateName()) && $scope.conceptCard) {
                            ExplorationPlayerStateService.recordNewCardAdded();
                            _addNewCard(StateCardObjectFactory.createNewCard(null, $scope.conceptCard.getExplanation(), null, null, null, null));
                            return;
                        }
                        /* This is for the following situation:
                           if A->B->C is the arrangement of cards and C redirected to A,
                           then after this, B and C are visited cards and hence
                           pendingCardWasSeenBefore would be true during both these
                           transitions and as answerIsCorrect is set to false below,
                           Continue would briefly change to Learn Again (after it is
                           clicked) during these transitions which is not required.
                           Also, if the 'if' check is not there, Learn Again button would
                           briefly switched to Continue before going to next card. */
                        if ($scope.answerIsCorrect) {
                            $scope.pendingCardWasSeenBefore = false;
                        }
                        $scope.answerIsCorrect = false;
                        $scope.showPendingCard();
                    };
                    var scrollToBottom = function () {
                        $timeout(function () {
                            var tutorCard = $('.conversation-skin-main-tutor-card');
                            if (tutorCard.length === 0) {
                                return;
                            }
                            var tutorCardBottom = (tutorCard.offset().top + tutorCard.outerHeight());
                            if ($(window).scrollTop() +
                                $(window).height() < tutorCardBottom) {
                                $('html, body').animate({
                                    scrollTop: tutorCardBottom - $(window).height() + 12
                                }, {
                                    duration: TIME_SCROLL_MSEC,
                                    easing: 'easeOutQuad'
                                });
                            }
                        }, 100);
                    };
                    var scrollToTop = function () {
                        $timeout(function () {
                            $('html, body').animate({
                                scrollTop: 0
                            }, 800, 'easeOutQuart');
                            return false;
                        });
                    };
                    $scope.submitUserRating = function (ratingValue) {
                        LearnerViewRatingService.submitUserRating(ratingValue);
                    };
                    $scope.$on('ratingUpdated', function () {
                        $scope.userRating = LearnerViewRatingService.getUserRating();
                    });
                    $window.addEventListener('beforeunload', function (e) {
                        if ($scope.redirectToRefresherExplorationConfirmed) {
                            return;
                        }
                        if (hasInteractedAtLeastOnce && !$scope.isInPreviewMode &&
                            !$scope.displayedCard.isTerminal()) {
                            StatsReportingService.recordMaybeLeaveEvent(PlayerTranscriptService.getLastStateName(), LearnerParamsService.getAllParams());
                            var confirmationMessage = ('If you navigate away from this page, your progress on the ' +
                                'exploration will be lost.');
                            (e || $window.event).returnValue = confirmationMessage;
                            return confirmationMessage;
                        }
                    });
                    // Returns whether the screen is wide enough to fit two
                    // cards (e.g., the tutor and supplemental cards) side-by-side.
                    $scope.canWindowShowTwoCards = function () {
                        return WindowDimensionsService.getWidth() > TWO_CARD_THRESHOLD_PX;
                    };
                    $window.onresize = function () {
                        $scope.adjustPageHeight(false, null);
                    };
                    $window.addEventListener('scroll', function () {
                        fixSupplementOnScroll();
                    });
                    var fixSupplementOnScroll = function () {
                        var supplementCard = $('div.conversation-skin-supplemental-card');
                        var topMargin = $('.navbar-container').height() - 20;
                        if ($(window).scrollTop() > topMargin) {
                            supplementCard.addClass('conversation-skin-supplemental-card-fixed');
                        }
                        else {
                            supplementCard.removeClass('conversation-skin-supplemental-card-fixed');
                        }
                    };
                    $scope.initializePage();
                    if (!questionPlayerConfig) {
                        LearnerViewRatingService.init(function (userRating) {
                            $scope.userRating = userRating;
                        });
                    }
                    $scope.collectionSummary = null;
                    if ($scope.collectionId) {
                        $http.get('/collectionsummarieshandler/data', {
                            params: {
                                stringified_collection_ids: JSON.stringify([$scope.collectionId])
                            }
                        }).then(function (response) {
                            $scope.collectionSummary = response.data.summaries[0];
                        }, function () {
                            AlertsService.addWarning('There was an error while fetching the collection summary.');
                        });
                    }
                    $scope.onNavigateFromIframe = function () {
                        SiteAnalyticsService.registerVisitOppiaFromIframeEvent($scope.explorationId);
                    };
                    $scope.isSubmitButtonDisabled = function () {
                        var currentIndex = PlayerPositionService.getDisplayedCardIndex();
                        // This check is added because it was observed that when returning
                        // to current card after navigating through previous cards, using
                        // the arrows, the Submit button was sometimes falsely disabled.
                        // Also, since a learner's answers would always be in the current
                        // card, this additional check doesn't interfere with its normal
                        // working.
                        if (!PlayerTranscriptService.isLastCard(currentIndex)) {
                            return false;
                        }
                        return CurrentInteractionService.isSubmitButtonDisabled();
                    };
                    $scope.submitAnswerFromProgressNav = function () {
                        CurrentInteractionService.submitAnswer();
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/input-response-pair.directive.ts":
/*!*******************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/learner-experience/input-response-pair.directive.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for an input/response pair in the learner view.
 */
__webpack_require__(/*! directives/angular-html-bind.directive.ts */ "./core/templates/dev/head/directives/angular-html-bind.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-translation-manager.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-manager.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-player-state.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-player-state.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-position.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-transcript.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts");
__webpack_require__(/*! services/AudioPlayerService.ts */ "./core/templates/dev/head/services/AudioPlayerService.ts");
__webpack_require__(/*! services/AutogeneratedAudioPlayerService.ts */ "./core/templates/dev/head/services/AutogeneratedAudioPlayerService.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
__webpack_require__(/*! pages/interaction-specs.constants.ajs.ts */ "./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts");
angular.module('oppia').directive('inputResponsePair', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                data: '=',
                oppiaAvatarImageUrl: '&',
                profilePicture: '&',
                getInputResponsePairId: '&inputResponsePairId',
                isLastPair: '&',
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/learner-experience/' +
                'input-response-pair.directive.html'),
            controller: [
                '$scope', 'ExplorationEngineService', 'PlayerTranscriptService',
                'ExplorationHtmlFormatterService', 'INTERACTION_SPECS',
                'PlayerPositionService', 'COMPONENT_NAME_FEEDBACK',
                'AudioTranslationManagerService', 'AudioPlayerService',
                'AutogeneratedAudioPlayerService', 'AUDIO_HIGHLIGHT_CSS_CLASS',
                'ExplorationPlayerStateService',
                function ($scope, ExplorationEngineService, PlayerTranscriptService, ExplorationHtmlFormatterService, INTERACTION_SPECS, PlayerPositionService, COMPONENT_NAME_FEEDBACK, AudioTranslationManagerService, AudioPlayerService, AutogeneratedAudioPlayerService, AUDIO_HIGHLIGHT_CSS_CLASS, ExplorationPlayerStateService) {
                    $scope.getAnswerPopoverUrl = function () {
                        return UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
                            'answer-popup-container.template.html');
                    };
                    $scope.isCurrentCardAtEndOfTranscript = function () {
                        return PlayerTranscriptService.isLastCard(PlayerPositionService.getDisplayedCardIndex());
                    };
                    $scope.getAnswerHtml = function () {
                        var displayedCard = PlayerTranscriptService.getCard(PlayerPositionService.getDisplayedCardIndex());
                        var interaction = displayedCard.getInteraction();
                        if ($scope.data) {
                            return ExplorationHtmlFormatterService.getAnswerHtml($scope.data.learnerInput, interaction.id, interaction.customizationArgs);
                        }
                    };
                    // Returns a HTML string representing a short summary of the answer
                    // , or null if the answer does not have to be summarized.
                    $scope.getShortAnswerHtml = function () {
                        var displayedCard = PlayerTranscriptService.getCard(PlayerPositionService.getDisplayedCardIndex());
                        var interaction = displayedCard.getInteraction();
                        var shortAnswerHtml = '';
                        if ($scope.data.learnerInput.hasOwnProperty('answerDetails')) {
                            shortAnswerHtml = $scope.data.learnerInput.answerDetails;
                        }
                        else if ($scope.data && interaction.id &&
                            INTERACTION_SPECS[interaction.id].needs_summary) {
                            shortAnswerHtml = (ExplorationHtmlFormatterService.getShortAnswerHtml($scope.data.learnerInput, interaction.id, interaction.customizationArgs));
                        }
                        return shortAnswerHtml;
                    };
                    $scope.getFeedbackAudioHighlightClass = function () {
                        if (!$scope.isLastPair) {
                            return '';
                        }
                        if (AudioTranslationManagerService
                            .getCurrentComponentName() ===
                            COMPONENT_NAME_FEEDBACK &&
                            (AudioPlayerService.isPlaying() ||
                                AutogeneratedAudioPlayerService.isPlaying())) {
                            return AUDIO_HIGHLIGHT_CSS_CLASS;
                        }
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/learner-answer-info-card.directive.ts":
/*!************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/learner-experience/learner-answer-info-card.directive.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for asking learner for answer details.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-transcript.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/learner-answer-info.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/learner-answer-info.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
angular.module('oppia').directive('learnerAnswerInfoCard', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getSubmitAnswerFn: '&submitAnswer'
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/learner-experience/' +
                'learner-answer-info-card.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                'ExplorationEngineService', 'ExplorationHtmlFormatterService',
                'LearnerAnswerInfoService', 'PlayerTranscriptService',
                function (ExplorationEngineService, ExplorationHtmlFormatterService, LearnerAnswerInfoService, PlayerTranscriptService) {
                    var ctrl = this;
                    ctrl.answerDetails = null;
                    var interaction = ExplorationEngineService.getState().interaction;
                    ctrl.submitLearnerAnswerInfo = function () {
                        LearnerAnswerInfoService.recordLearnerAnswerInfo(ctrl.answerDetails);
                        PlayerTranscriptService.addNewInput({ answerDetails: ctrl.answerDetails }, false);
                        PlayerTranscriptService.addNewResponse(LearnerAnswerInfoService.getSolicitAnswerDetailsFeedback());
                        ctrl.getSubmitAnswerFn()(LearnerAnswerInfoService.getCurrentAnswer(), LearnerAnswerInfoService.getCurrentInteractionRulesService());
                    };
                    ctrl.displayCurrentAnswer = function () {
                        return ExplorationHtmlFormatterService.getAnswerHtml(LearnerAnswerInfoService.getCurrentAnswer(), interaction.id, interaction.customizationArgs);
                    };
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/supplemental-card.directive.ts":
/*!*****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/learner-experience/supplemental-card.directive.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2016 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the supplemental card.
 */
__webpack_require__(/*! directives/angular-html-bind.directive.ts */ "./core/templates/dev/head/directives/angular-html-bind.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-translation-manager.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-manager.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/AudioPlayerService.ts */ "./core/templates/dev/head/services/AudioPlayerService.ts");
__webpack_require__(/*! services/AutogeneratedAudioPlayerService.ts */ "./core/templates/dev/head/services/AutogeneratedAudioPlayerService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
angular.module('oppia').directive('supplementalCard', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                onClickContinueButton: '&',
                isLearnAgainButton: '&',
                getDisplayedCard: '&displayedCard',
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/learner-experience/' +
                'supplemental-card.directive.html'),
            controller: [
                '$scope', '$timeout', '$window',
                'WindowDimensionsService', 'CONTENT_FOCUS_LABEL_PREFIX',
                'TWO_CARD_THRESHOLD_PX', 'EVENT_ACTIVE_CARD_CHANGED',
                'CONTINUE_BUTTON_FOCUS_LABEL', 'AudioTranslationManagerService',
                'AudioPlayerService', 'AutogeneratedAudioPlayerService',
                'COMPONENT_NAME_FEEDBACK', 'AUDIO_HIGHLIGHT_CSS_CLASS',
                'CurrentInteractionService',
                function ($scope, $timeout, $window, WindowDimensionsService, CONTENT_FOCUS_LABEL_PREFIX, TWO_CARD_THRESHOLD_PX, EVENT_ACTIVE_CARD_CHANGED, CONTINUE_BUTTON_FOCUS_LABEL, AudioTranslationManagerService, AudioPlayerService, AutogeneratedAudioPlayerService, COMPONENT_NAME_FEEDBACK, AUDIO_HIGHLIGHT_CSS_CLASS, CurrentInteractionService) {
                    var updateDisplayedCard = function () {
                        $scope.displayedCard = $scope.getDisplayedCard();
                        $scope.clearHelpCard();
                        $scope.lastAnswer = null;
                        if ($scope.displayedCard.isCompleted()) {
                            $scope.lastAnswer = $scope.displayedCard.getLastAnswer();
                        }
                    };
                    $scope.OPPIA_AVATAR_IMAGE_URL = (UrlInterpolationService.getStaticImageUrl('/avatar/oppia_avatar_100px.svg'));
                    $scope.CONTINUE_BUTTON_FOCUS_LABEL = CONTINUE_BUTTON_FOCUS_LABEL;
                    $scope.helpCardHtml = null;
                    $scope.helpCardHasContinueButton = false;
                    $scope.windowDimensionsService = WindowDimensionsService;
                    // We use the max because the height property of the help card is
                    // unstable while animating, causing infinite digest errors.
                    var maxHelpCardHeightSeen = 0;
                    $scope.clearHelpCard = function () {
                        $scope.helpCardHtml = null;
                        $scope.helpCardHasContinueButton = false;
                        maxHelpCardHeightSeen = 0;
                    };
                    $scope.isHelpCardTall = function () {
                        var helpCard = $('.conversation-skin-help-card');
                        if (helpCard.height() > maxHelpCardHeightSeen) {
                            maxHelpCardHeightSeen = helpCard.height();
                        }
                        return maxHelpCardHeightSeen > $(window).height() - 100;
                    };
                    $scope.getHelpCardBottomPosition = function () {
                        var helpCard = $('.conversation-skin-help-card');
                        var container = $('.conversation-skin-supplemental-card-container');
                        return Math.max(container.height() - helpCard.height() / 2, 0);
                    };
                    CurrentInteractionService.registerPresubmitHook(function () {
                        // Do not clear the help card or submit an answer if there is an
                        // upcoming card.
                        if ($scope.displayedCard.isCompleted()) {
                            return;
                        }
                        $scope.clearHelpCard();
                    });
                    $scope.$on(EVENT_ACTIVE_CARD_CHANGED, function () {
                        updateDisplayedCard();
                    });
                    $scope.$on('helpCardAvailable', function (event, helpCard) {
                        $scope.helpCardHtml = helpCard.helpCardHtml;
                        $scope.helpCardHasContinueButton = helpCard.hasContinueButton;
                    });
                    $scope.getFeedbackAudioHighlightClass = function () {
                        if (AudioTranslationManagerService
                            .getCurrentComponentName() ===
                            COMPONENT_NAME_FEEDBACK &&
                            (AudioPlayerService.isPlaying() ||
                                AutogeneratedAudioPlayerService.isPlaying())) {
                            return AUDIO_HIGHLIGHT_CSS_CLASS;
                        }
                    };
                    updateDisplayedCard();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/tutor-card.directive.ts":
/*!**********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/learner-experience/tutor-card.directive.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Controller for the Tutor Card.
 */
__webpack_require__(/*! directives/angular-html-bind.directive.ts */ "./core/templates/dev/head/directives/angular-html-bind.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/layout-directives/audio-bar.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/layout-directives/audio-bar.directive.ts");
__webpack_require__(/*! pages/exploration-player-page/learner-experience/input-response-pair.directive.ts */ "./core/templates/dev/head/pages/exploration-player-page/learner-experience/input-response-pair.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-preloader.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-preloader.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-translation-manager.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-manager.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-player-state.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-player-state.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/learner-answer-info.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/learner-answer-info.service.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ts");
__webpack_require__(/*! services/AudioPlayerService.ts */ "./core/templates/dev/head/services/AudioPlayerService.ts");
__webpack_require__(/*! services/AutogeneratedAudioPlayerService.ts */ "./core/templates/dev/head/services/AutogeneratedAudioPlayerService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! services/contextual/DeviceInfoService.ts */ "./core/templates/dev/head/services/contextual/DeviceInfoService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
__webpack_require__(/*! pages/interaction-specs.constants.ajs.ts */ "./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts");
angular.module('oppia').animation('.conversation-skin-responses-animate-slide', function () {
    return {
        removeClass: function (element, className, done) {
            if (className !== 'ng-hide') {
                done();
                return;
            }
            element.hide().slideDown(400, done);
        },
        addClass: function (element, className, done) {
            if (className !== 'ng-hide') {
                done();
                return;
            }
            element.slideUp(400, done);
        }
    };
});
angular.module('oppia').directive('tutorCard', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {
                isLearnAgainButton: '&',
                onDismiss: '&',
                getDisplayedCard: '&displayedCard',
                startCardChangeAnimation: '=',
            },
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/learner-experience/' +
                'tutor-card.directive.html'),
            controller: [
                '$anchorScroll', '$location', '$rootScope', '$scope', '$timeout',
                'AudioPlayerService', 'AudioPreloaderService',
                'AudioTranslationManagerService', 'AutogeneratedAudioPlayerService',
                'ContextService', 'CurrentInteractionService', 'DeviceInfoService',
                'ExplorationEngineService', 'ExplorationPlayerStateService',
                'LearnerAnswerInfoService', 'UrlService', 'UserService',
                'WindowDimensionsService', 'AUDIO_HIGHLIGHT_CSS_CLASS',
                'COMPONENT_NAME_CONTENT', 'CONTENT_FOCUS_LABEL_PREFIX',
                'CONTINUE_BUTTON_FOCUS_LABEL', 'DEFAULT_PROFILE_IMAGE_PATH',
                'EVENT_ACTIVE_CARD_CHANGED', 'EVENT_NEW_CARD_AVAILABLE',
                'INTERACTION_DISPLAY_MODE_INLINE', 'INTERACTION_SPECS', 'PAGE_CONTEXT',
                'TWO_CARD_THRESHOLD_PX',
                function ($anchorScroll, $location, $rootScope, $scope, $timeout, AudioPlayerService, AudioPreloaderService, AudioTranslationManagerService, AutogeneratedAudioPlayerService, ContextService, CurrentInteractionService, DeviceInfoService, ExplorationEngineService, ExplorationPlayerStateService, LearnerAnswerInfoService, UrlService, UserService, WindowDimensionsService, AUDIO_HIGHLIGHT_CSS_CLASS, COMPONENT_NAME_CONTENT, CONTENT_FOCUS_LABEL_PREFIX, CONTINUE_BUTTON_FOCUS_LABEL, DEFAULT_PROFILE_IMAGE_PATH, EVENT_ACTIVE_CARD_CHANGED, EVENT_NEW_CARD_AVAILABLE, INTERACTION_DISPLAY_MODE_INLINE, INTERACTION_SPECS, PAGE_CONTEXT, TWO_CARD_THRESHOLD_PX) {
                    var _editorPreviewMode = ContextService.isInExplorationEditorPage();
                    var updateDisplayedCard = function () {
                        $scope.arePreviousResponsesShown = false;
                        $scope.lastAnswer = null;
                        $scope.conceptCardIsBeingShown = Boolean(!$scope.getDisplayedCard().getInteraction());
                        $scope.interactionIsActive =
                            !$scope.getDisplayedCard().isCompleted();
                        $scope.$on(EVENT_NEW_CARD_AVAILABLE, function (evt, data) {
                            $scope.interactionIsActive = false;
                        });
                        CurrentInteractionService.registerPresubmitHook(function () {
                            $scope.waitingForOppiaFeedback = true;
                        });
                        if (!$scope.interactionIsActive) {
                            $scope.lastAnswer = $scope.getDisplayedCard().getLastAnswer();
                        }
                        if (!$scope.conceptCardIsBeingShown) {
                            $scope.interactionInstructions = ($scope.getDisplayedCard().getInteractionInstructions());
                            $scope.contentAudioTranslations = ($scope.getDisplayedCard().getVoiceovers());
                            AudioTranslationManagerService
                                .clearSecondaryAudioTranslations();
                            AudioTranslationManagerService.setContentAudioTranslations(angular.copy($scope.contentAudioTranslations), $scope.getDisplayedCard().getContentHtml(), COMPONENT_NAME_CONTENT);
                            AudioPlayerService.stop();
                            AudioPreloaderService.clearMostRecentlyRequestedAudioFilename();
                            AutogeneratedAudioPlayerService.cancel();
                        }
                    };
                    $scope.isInteractionInline = function () {
                        if ($scope.conceptCardIsBeingShown) {
                            return true;
                        }
                        return $scope.getDisplayedCard().isInteractionInline();
                    };
                    $scope.getContentAudioHighlightClass = function () {
                        if (AudioTranslationManagerService
                            .getCurrentComponentName() ===
                            COMPONENT_NAME_CONTENT &&
                            (AudioPlayerService.isPlaying() ||
                                AutogeneratedAudioPlayerService.isPlaying())) {
                            return AUDIO_HIGHLIGHT_CSS_CLASS;
                        }
                    };
                    $scope.arePreviousResponsesShown = false;
                    $scope.waitingForOppiaFeedback = false;
                    $scope.windowDimensionsService = WindowDimensionsService;
                    $scope.isIframed = UrlService.isIframed();
                    $scope.canAskLearnerForAnswerInfo = (LearnerAnswerInfoService.canAskLearnerForAnswerInfo);
                    $scope.OPPIA_AVATAR_IMAGE_URL = (UrlInterpolationService.getStaticImageUrl('/avatar/oppia_avatar_100px.svg'));
                    $scope.profilePicture = UrlInterpolationService.getStaticImageUrl('/avatar/user_blue_72px.png');
                    if (!_editorPreviewMode) {
                        UserService.getProfileImageDataUrlAsync()
                            .then(function (dataUrl) {
                            $scope.profilePicture = dataUrl;
                        });
                    }
                    else {
                        $scope.profilePicture = (UrlInterpolationService.getStaticImageUrl(DEFAULT_PROFILE_IMAGE_PATH));
                    }
                    $scope.getContentFocusLabel = function (index) {
                        return CONTENT_FOCUS_LABEL_PREFIX + index;
                    };
                    $scope.toggleShowPreviousResponses = function () {
                        $scope.arePreviousResponsesShown =
                            !$scope.arePreviousResponsesShown;
                    };
                    $scope.isWindowNarrow = function () {
                        return WindowDimensionsService.isWindowNarrow();
                    };
                    $scope.canWindowShowTwoCards = function () {
                        return WindowDimensionsService.getWidth() > TWO_CARD_THRESHOLD_PX;
                    };
                    $scope.showAudioBar = function () {
                        return (!$scope.isIframed &&
                            !ExplorationPlayerStateService.isInQuestionMode());
                    };
                    $scope.isContentAudioTranslationAvailable = function () {
                        if ($scope.conceptCardIsBeingShown) {
                            return false;
                        }
                        return ($scope.getDisplayedCard().isContentAudioTranslationAvailable());
                    };
                    $scope.isCurrentCardAtEndOfTranscript = function () {
                        return !$scope.getDisplayedCard().isCompleted();
                    };
                    $scope.isOnTerminalCard = function () {
                        return ($scope.getDisplayedCard().isTerminal());
                    };
                    $scope.getInputResponsePairId = function (index) {
                        return 'input-response-pair-' + index;
                    };
                    $scope.$on(EVENT_ACTIVE_CARD_CHANGED, function () {
                        updateDisplayedCard();
                    });
                    $scope.$on('oppiaFeedbackAvailable', function () {
                        $scope.waitingForOppiaFeedback = false;
                        // Auto scroll to the new feedback on mobile device.
                        if (DeviceInfoService.isMobileDevice()) {
                            var latestFeedbackIndex = ($scope.getDisplayedCard().getInputResponsePairs().length - 1);
                            /* Reference: https://stackoverflow.com/questions/40134381
                              $anchorScroll() without changing actual hash value of url
                              works only when written inside a timeout of 0 ms. */
                            $anchorScroll.yOffset = 80;
                            $location.hash($scope.getInputResponsePairId(latestFeedbackIndex));
                            $anchorScroll();
                        }
                    });
                    updateDisplayedCard();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/answer-classification.service.ts":
/*!*********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/answer-classification.service.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Classification service for answer groups.
 */
__webpack_require__(/*! domain/classifier/AnswerClassificationResultObjectFactory.ts */ "./core/templates/dev/head/domain/classifier/AnswerClassificationResultObjectFactory.ts");
__webpack_require__(/*! pages/exploration-player-page/services/prediction-algorithm-registry.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/prediction-algorithm-registry.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/state-classifier-mapping.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/state-classifier-mapping.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
__webpack_require__(/*! pages/interaction-specs.constants.ajs.ts */ "./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts");
angular.module('oppia').factory('AnswerClassificationService', [
    'AlertsService', 'AnswerClassificationResultObjectFactory',
    'PredictionAlgorithmRegistryService', 'StateClassifierMappingService',
    'DEFAULT_OUTCOME_CLASSIFICATION', 'ENABLE_ML_CLASSIFIERS',
    'EXPLICIT_CLASSIFICATION',
    'INTERACTION_SPECS', 'STATISTICAL_CLASSIFICATION',
    'TRAINING_DATA_CLASSIFICATION',
    function (AlertsService, AnswerClassificationResultObjectFactory, PredictionAlgorithmRegistryService, StateClassifierMappingService, DEFAULT_OUTCOME_CLASSIFICATION, ENABLE_ML_CLASSIFIERS, EXPLICIT_CLASSIFICATION, INTERACTION_SPECS, STATISTICAL_CLASSIFICATION, TRAINING_DATA_CLASSIFICATION) {
        /**
         * Finds the first answer group with a rule that returns true.
         *
         * @param {*} answer - The answer that the user has submitted.
         * @param {array} answerGroups - The answer groups of the interaction. Each
         *     answer group contains rule_specs, which is a list of rules.
         * @param {object} defaultOutcome - The default outcome of the interaction.
         * @param {function} interactionRulesService The service which contains the
         *     explicit rules of that interaction.
         *
         * @return {object} An AnswerClassificationResult domain object.
         */
        var classifyAnswer = function (answer, answerGroups, defaultOutcome, interactionRulesService) {
            // Find the first group that contains a rule which returns true
            // TODO(bhenning): Implement training data classification.
            for (var i = 0; i < answerGroups.length; i++) {
                for (var j = 0; j < answerGroups[i].rules.length; j++) {
                    var rule = answerGroups[i].rules[j];
                    if (interactionRulesService[rule.type](answer, rule.inputs)) {
                        return AnswerClassificationResultObjectFactory.createNew(answerGroups[i].outcome, i, j, EXPLICIT_CLASSIFICATION);
                    }
                }
            }
            // If no rule in any answer group returns true, the default 'group' is
            // returned. Throws an error if the default outcome is not defined.
            if (defaultOutcome) {
                return AnswerClassificationResultObjectFactory.createNew(defaultOutcome, answerGroups.length, 0, DEFAULT_OUTCOME_CLASSIFICATION);
            }
            else {
                AlertsService.addWarning('Something went wrong with the exploration.');
            }
        };
        return {
            /**
             * Classifies the answer according to the answer groups. and returns the
             * corresponding answer classification result.
             *
             * @param {string} stateName - The name of the state where the user
             *   submitted the answer.
             * @param {object} interactionInOldState - The interaction present in the
             *   state where the user submitted the answer.
             * @param {*} answer - The answer that the user has submitted.
             * @param {function} interactionRulesService - The service which contains
             *   the explicit rules of that interaction.
             *
             * @return {AnswerClassificationResult} The resulting
             *   AnswerClassificationResult domain object.
             */
            getMatchingClassificationResult: function (stateName, interactionInOldState, answer, interactionRulesService) {
                var answerClassificationResult = null;
                var answerGroups = interactionInOldState.answerGroups;
                var defaultOutcome = interactionInOldState.defaultOutcome;
                if (interactionRulesService) {
                    answerClassificationResult = classifyAnswer(answer, answerGroups, defaultOutcome, interactionRulesService);
                }
                else {
                    AlertsService.addWarning('Something went wrong with the exploration: no ' +
                        'interactionRulesService was available.');
                    throw Error('No interactionRulesService was available to classify the answer.');
                }
                var ruleBasedOutcomeIsDefault = (answerClassificationResult.outcome === defaultOutcome);
                var interactionIsTrainable = INTERACTION_SPECS[interactionInOldState.id].is_trainable;
                if (ruleBasedOutcomeIsDefault && interactionIsTrainable) {
                    for (var i = 0; i < answerGroups.length; i++) {
                        if (answerGroups[i].trainingData) {
                            for (var j = 0; j < answerGroups[i].trainingData.length; j++) {
                                if (angular.equals(answer, answerGroups[i].trainingData[j])) {
                                    return AnswerClassificationResultObjectFactory.createNew(answerGroups[i].outcome, i, null, TRAINING_DATA_CLASSIFICATION);
                                }
                            }
                        }
                    }
                    if (ENABLE_ML_CLASSIFIERS) {
                        var classifier = StateClassifierMappingService.getClassifier(stateName);
                        if (classifier && classifier.classifierData && (classifier.algorithmId && classifier.dataSchemaVersion)) {
                            var predictionService = (PredictionAlgorithmRegistryService.getPredictionService(classifier.algorithmId, classifier.dataSchemaVersion));
                            // If prediction service exists, we run classifier. We return the
                            // default outcome otherwise.
                            if (predictionService) {
                                var predictedAnswerGroupIndex = predictionService.predict(classifier.classifierData, answer);
                                if (predictedAnswerGroupIndex === -1) {
                                    answerClassificationResult = (AnswerClassificationResultObjectFactory.createNew(defaultOutcome, answerGroups.length, 0, DEFAULT_OUTCOME_CLASSIFICATION));
                                }
                                answerClassificationResult = (AnswerClassificationResultObjectFactory.createNew(answerGroups[predictedAnswerGroupIndex].outcome, predictedAnswerGroupIndex, null, STATISTICAL_CLASSIFICATION));
                            }
                        }
                    }
                }
                return answerClassificationResult;
            },
            isClassifiedExplicitlyOrGoesToNewState: function (stateName, state, answer, interactionRulesService) {
                var result = this.getMatchingClassificationResult(stateName, state.interaction, answer, interactionRulesService);
                return (result.outcome.dest !== state.name ||
                    result.classificationCategorization !==
                        DEFAULT_OUTCOME_CLASSIFICATION);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/audio-preloader.service.ts":
/*!***************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/audio-preloader.service.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to preload audio into AssetsBackendApiService's cache.
 */
__webpack_require__(/*! domain/utilities/LanguageUtilService.ts */ "./core/templates/dev/head/domain/utilities/LanguageUtilService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-translation-language.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-language.service.ts");
__webpack_require__(/*! services/AssetsBackendApiService.ts */ "./core/templates/dev/head/services/AssetsBackendApiService.ts");
__webpack_require__(/*! services/ComputeGraphService.ts */ "./core/templates/dev/head/services/ComputeGraphService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
angular.module('oppia').factory('AudioPreloaderService', [
    'AssetsBackendApiService', 'AudioTranslationLanguageService',
    'ComputeGraphService', 'ContextService',
    function (AssetsBackendApiService, AudioTranslationLanguageService, ComputeGraphService, ContextService) {
        var MAX_NUM_AUDIO_FILES_TO_DOWNLOAD_SIMULTANEOUSLY = 3;
        var _filenamesOfAudioCurrentlyDownloading = [];
        var _filenamesOfAudioToBeDownloaded = [];
        var _exploration = null;
        var _audioLoadedCallback = null;
        var _mostRecentlyRequestedAudioFilename = null;
        var _init = function (exploration) {
            _exploration = exploration;
        };
        var _getAudioFilenamesInBfsOrder = function (sourceStateName) {
            var languageCode = AudioTranslationLanguageService
                .getCurrentAudioLanguageCode();
            var stateNamesInBfsOrder = ComputeGraphService.computeBfsTraversalOfStates(_exploration.getInitialState().name, _exploration.getStates(), sourceStateName);
            var audioFilenames = [];
            var allAudioTranslations = _exploration.getAllVoiceovers(languageCode);
            stateNamesInBfsOrder.forEach(function (stateName) {
                var allAudioTranslationsForState = allAudioTranslations[stateName];
                allAudioTranslationsForState.forEach(function (audioTranslation) {
                    audioFilenames.push(audioTranslation.filename);
                });
            });
            return audioFilenames;
        };
        var _loadAudio = function (audioFilename) {
            AssetsBackendApiService.loadAudio(ContextService.getExplorationId(), audioFilename).then(function (loadedAudio) {
                for (var i = 0; i < _filenamesOfAudioCurrentlyDownloading.length; i++) {
                    if (_filenamesOfAudioCurrentlyDownloading[i] ===
                        loadedAudio.filename) {
                        _filenamesOfAudioCurrentlyDownloading.splice(i, 1);
                        break;
                    }
                }
                if (_filenamesOfAudioToBeDownloaded.length > 0) {
                    var nextAudioFilename = _filenamesOfAudioToBeDownloaded.shift();
                    _filenamesOfAudioCurrentlyDownloading.push(nextAudioFilename);
                    _loadAudio(nextAudioFilename);
                }
                if (_audioLoadedCallback) {
                    _audioLoadedCallback(loadedAudio.filename);
                }
            });
        };
        var _kickOffAudioPreloader = function (sourceStateName) {
            _filenamesOfAudioToBeDownloaded =
                _getAudioFilenamesInBfsOrder(sourceStateName);
            while (_filenamesOfAudioCurrentlyDownloading.length <
                MAX_NUM_AUDIO_FILES_TO_DOWNLOAD_SIMULTANEOUSLY &&
                _filenamesOfAudioToBeDownloaded.length > 0) {
                var audioFilename = _filenamesOfAudioToBeDownloaded.shift();
                _filenamesOfAudioCurrentlyDownloading.push(audioFilename);
                _loadAudio(audioFilename);
            }
        };
        var _cancelPreloading = function () {
            AssetsBackendApiService.abortAllCurrentAudioDownloads();
            _filenamesOfAudioCurrentlyDownloading = [];
        };
        return {
            init: function (exploration) {
                _init(exploration);
            },
            kickOffAudioPreloader: function (sourceStateName) {
                _kickOffAudioPreloader(sourceStateName);
            },
            isLoadingAudioFile: function (filename) {
                return _filenamesOfAudioCurrentlyDownloading.indexOf(filename) !== -1;
            },
            restartAudioPreloader: function (sourceStateName) {
                _cancelPreloading();
                _kickOffAudioPreloader(sourceStateName);
            },
            setAudioLoadedCallback: function (audioLoadedCallback) {
                _audioLoadedCallback = audioLoadedCallback;
            },
            setMostRecentlyRequestedAudioFilename: function (mostRecentlyRequestedAudioFilename) {
                _mostRecentlyRequestedAudioFilename =
                    mostRecentlyRequestedAudioFilename;
            },
            clearMostRecentlyRequestedAudioFilename: function () {
                _mostRecentlyRequestedAudioFilename = null;
            },
            getMostRecentlyRequestedAudioFilename: function () {
                return _mostRecentlyRequestedAudioFilename;
            },
            getFilenamesOfAudioCurrentlyDownloading: function () {
                return _filenamesOfAudioCurrentlyDownloading;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-language.service.ts":
/*!**************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-language.service.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to manage the current language being
 * used for audio translations.
 */
__webpack_require__(/*! domain/utilities/BrowserCheckerService.ts */ "./core/templates/dev/head/domain/utilities/BrowserCheckerService.ts");
__webpack_require__(/*! domain/utilities/LanguageUtilService.ts */ "./core/templates/dev/head/domain/utilities/LanguageUtilService.ts");
angular.module('oppia').factory('AudioTranslationLanguageService', [
    'BrowserCheckerService', 'LanguageUtilService',
    function (BrowserCheckerService, LanguageUtilService) {
        var _currentAudioLanguageCode = null;
        var _allAudioLanguageCodesInExploration = null;
        var _explorationLanguageCode = null;
        var _automaticTextToSpeechEnabled = null;
        var _languagesInExploration = [];
        var attemptToSetAudioLanguageToExplorationLanguage = function () {
            // We minimize the number of related languages, because we want to
            // pick the language that is the most directly related to the exploration
            // language. For example, this would prioritize Hindi over Hinglish
            // if both were available as audio languages.
            var numRelatedLanguages = Number.MAX_VALUE;
            _allAudioLanguageCodesInExploration.forEach(function (audioLanguageCode) {
                var relatedLanguageCodes = LanguageUtilService.getLanguageCodesRelatedToAudioLanguageCode(audioLanguageCode);
                if (relatedLanguageCodes.length < numRelatedLanguages &&
                    relatedLanguageCodes.indexOf(_explorationLanguageCode) !== -1) {
                    _currentAudioLanguageCode = audioLanguageCode;
                    numRelatedLanguages = relatedLanguageCodes.length;
                }
            });
        };
        var _isAutogeneratedAudioAllowed = function () {
            return _automaticTextToSpeechEnabled &&
                LanguageUtilService.supportsAutogeneratedAudio(_explorationLanguageCode);
        };
        var _init = function (allAudioLanguageCodesInExploration, preferredAudioLanguageCode, explorationLanguageCode, automaticTextToSpeechEnabled) {
            _allAudioLanguageCodesInExploration = allAudioLanguageCodesInExploration;
            _explorationLanguageCode = explorationLanguageCode;
            _automaticTextToSpeechEnabled = automaticTextToSpeechEnabled;
            _languagesInExploration = [];
            // Set the audio language that is chosen initially.
            // Use the following priority (highest to lowest):
            // 1. If the learner has a preferred audio language set, then set it to
            // that language if it is available.
            // 2. If the exploration language has a related audio language, then set
            // it to that.
            // 3. If only the autogenerated audio language is available, then set it
            // to that.
            // 4. Otherwise, just pick an available non-autogenerated audio language
            // at random.
            if (preferredAudioLanguageCode &&
                allAudioLanguageCodesInExploration.indexOf(preferredAudioLanguageCode) !== -1) {
                _currentAudioLanguageCode = preferredAudioLanguageCode;
            }
            if (_currentAudioLanguageCode === null) {
                attemptToSetAudioLanguageToExplorationLanguage();
            }
            if (_currentAudioLanguageCode === null &&
                _allAudioLanguageCodesInExploration.length >= 1) {
                _currentAudioLanguageCode = _allAudioLanguageCodesInExploration[0];
            }
            if (_currentAudioLanguageCode === null &&
                _allAudioLanguageCodesInExploration.length === 0 &&
                _isAutogeneratedAudioAllowed()) {
                _currentAudioLanguageCode =
                    LanguageUtilService.getAutogeneratedAudioLanguage(_explorationLanguageCode).id;
            }
            _allAudioLanguageCodesInExploration.forEach(function (languageCode) {
                var languageDescription = LanguageUtilService.getAudioLanguageDescription(languageCode);
                _languagesInExploration.push({
                    value: languageCode,
                    displayed: languageDescription
                });
            });
            if (_isAutogeneratedAudioAllowed()) {
                var autogeneratedAudioLanguage = LanguageUtilService.getAutogeneratedAudioLanguage(_explorationLanguageCode);
                _languagesInExploration.push({
                    value: autogeneratedAudioLanguage.id,
                    displayed: autogeneratedAudioLanguage.description
                });
            }
        };
        return {
            init: function (allAudioLanguageCodesInExploration, preferredAudioLanguageCode, explorationLanguageCode, automaticTextToSpeechEnabled) {
                _init(allAudioLanguageCodesInExploration, preferredAudioLanguageCode, explorationLanguageCode, automaticTextToSpeechEnabled);
            },
            getCurrentAudioLanguageCode: function () {
                return _currentAudioLanguageCode;
            },
            getCurrentAudioLanguageDescription: function () {
                return LanguageUtilService.getAudioLanguageDescription(_currentAudioLanguageCode);
            },
            getallAudioLanguageCodesInExploration: function () {
                return _allAudioLanguageCodesInExploration;
            },
            getLanguageOptionsForDropdown: function () {
                return _languagesInExploration;
            },
            clearCurrentAudioLanguageCode: function () {
                _currentAudioLanguageCode = null;
            },
            setCurrentAudioLanguageCode: function (newLanguageCode) {
                _currentAudioLanguageCode = newLanguageCode;
            },
            isAutogeneratedAudioAllowed: function () {
                return _isAutogeneratedAudioAllowed();
            },
            isAutogeneratedLanguageCodeSelected: function () {
                return LanguageUtilService.isAutogeneratedAudioLanguage(_currentAudioLanguageCode);
            },
            isAutomaticTextToSpeechEnabled: function () {
                return _automaticTextToSpeechEnabled;
            },
            getSpeechSynthesisLanguageCode: function () {
                var autogeneratedAudioLanguage = LanguageUtilService.getAutogeneratedAudioLanguage(_explorationLanguageCode);
                if (BrowserCheckerService.isMobileDevice()) {
                    return autogeneratedAudioLanguage.speechSynthesisCodeMobile;
                }
                return autogeneratedAudioLanguage.speechSynthesisCode;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-manager.service.ts":
/*!*************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-manager.service.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service to manage what audio translations are currently
 * being played or paused.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var AudioTranslationManagerService = /** @class */ (function () {
    function AudioTranslationManagerService() {
        // Audio translations for the main content of a card at the top.
        this._contentAudioTranslations = null;
        this._contentHtmlForAutogeneratedAudio = null;
        // Audio translations for everything other than the main content, such as
        // those for feedback, hints, and solutions.
        this._secondaryAudioTranslations = null;
        this._secondaryHtmlForAutogeneratedAudio = null;
        this._currentPrimaryComponentName = null;
        this._currentSecondaryComponentName = null;
    }
    AudioTranslationManagerService.prototype.setContentAudioTranslations = function (audioTranslations, html, componentName) {
        this._contentAudioTranslations = audioTranslations;
        this._contentHtmlForAutogeneratedAudio = html;
        this._currentPrimaryComponentName = componentName;
    };
    AudioTranslationManagerService.prototype.setSecondaryAudioTranslations = function (audioTranslations, html, componentName) {
        this._secondaryAudioTranslations = audioTranslations;
        this._secondaryHtmlForAutogeneratedAudio = html;
        this._currentSecondaryComponentName = componentName;
    };
    AudioTranslationManagerService.prototype.clearSecondaryAudioTranslations = function () {
        this._secondaryAudioTranslations = null;
        this._secondaryHtmlForAutogeneratedAudio = null;
        this._currentSecondaryComponentName = null;
    };
    AudioTranslationManagerService.prototype.getCurrentAudioTranslations = function () {
        if (this._secondaryAudioTranslations !== null) {
            return this._secondaryAudioTranslations;
        }
        return this._contentAudioTranslations;
    };
    AudioTranslationManagerService.prototype.getCurrentHtmlForAutogeneratedAudio = function () {
        if (this._secondaryHtmlForAutogeneratedAudio !== null) {
            return this._secondaryHtmlForAutogeneratedAudio;
        }
        return this._contentHtmlForAutogeneratedAudio;
    };
    AudioTranslationManagerService.prototype.getCurrentComponentName = function () {
        if (this._currentSecondaryComponentName !== null) {
            return this._currentSecondaryComponentName;
        }
        return this._currentPrimaryComponentName;
    };
    AudioTranslationManagerService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], AudioTranslationManagerService);
    return AudioTranslationManagerService;
}());
exports.AudioTranslationManagerService = AudioTranslationManagerService;
angular.module('oppia').factory('AudioTranslationManagerService', static_1.downgradeInjectable(AudioTranslationManagerService));


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Facilitates communication between the current interaction
 * and the progress nav. The former holds data about the learner's answer,
 * while the latter contains the actual "Submit" button which triggers the
 * answer submission process.
 */
__webpack_require__(/*! components/state-editor/state-editor-properties-services/state-editor.service.ts */ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-editor.service.ts");
__webpack_require__(/*! components/state-editor/state-editor-properties-services/state-interaction-id.service.ts */ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-interaction-id.service.ts");
__webpack_require__(/*! components/state-editor/state-editor-properties-services/state-property.service.ts */ "./core/templates/dev/head/components/state-editor/state-editor-properties-services/state-property.service.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
angular.module('oppia').factory('CurrentInteractionService', [
    'ContextService', 'StateEditorService', 'StateInteractionIdService', function (ContextService, StateEditorService, StateInteractionIdService) {
        var _submitAnswerFn = null;
        var _onSubmitFn = null;
        var _validityCheckFn = null;
        var _presubmitHooks = [];
        return {
            setOnSubmitFn: function (onSubmit) {
                /**
                 * The ConversationSkinDirective should register its onSubmit
                 * callback here.
                 *
                 * @param {function(answer, interactionRulesService)} onSubmit
                 */
                _onSubmitFn = onSubmit;
            },
            registerCurrentInteraction: function (submitAnswerFn, validityCheckFn) {
                /**
                 * Each interaction directive should call registerCurrentInteraction
                 * when the interaction directive is first created.
                 *
                 * @param {function|null} submitAnswerFn - Should grab the learner's
                 *   answer and pass it to onSubmit. The interaction can pass in
                 *   null if it does not use the progress nav's submit button
                 *   (ex: MultipleChoiceInput).
                 * @param {function} validityCheckFn - The progress nav will use this
                 *   to decide whether or not to disable the submit button. If the
                 *   interaction passes in null, the submit button will remain
                 *   enabled (for the entire duration of the current interaction).
                 */
                _submitAnswerFn = submitAnswerFn || null;
                _validityCheckFn = validityCheckFn || null;
            },
            registerPresubmitHook: function (hookFn) {
                /* Register a hook that will be called right before onSubmit.
                 * All hooks for the current interaction will be cleared right
                 * before loading the next card.
                 */
                _presubmitHooks.push(hookFn);
            },
            clearPresubmitHooks: function () {
                /* Clear out all the hooks for the current interaction. Should
                 * be called before loading the next card.
                 */
                _presubmitHooks = [];
            },
            onSubmit: function (answer, interactionRulesService) {
                for (var i = 0; i < _presubmitHooks.length; i++) {
                    _presubmitHooks[i]();
                }
                _onSubmitFn(answer, interactionRulesService);
            },
            submitAnswer: function () {
                /* This starts the answer submit process, it should be called once the
                 * learner presses the "Submit" button.
                 */
                if (_submitAnswerFn === null) {
                    var additionalInfo = ('\nUndefined submit answer debug logs:' +
                        '\nInteraction ID: ' + StateInteractionIdService.savedMemento +
                        '\nExploration ID: ' + ContextService.getExplorationId() +
                        '\nState name: ' + StateEditorService.getActiveStateName());
                    throw Error('The current interaction did not ' +
                        'register a _submitAnswerFn.' + additionalInfo);
                }
                else {
                    _submitAnswerFn();
                }
            },
            isSubmitButtonDisabled: function () {
                /* Returns whether or not the Submit button should be disabled based on
                 * the validity of the current answer. If the interaction does not pass
                 * in a _validityCheckFn, then _validityCheckFn will be null and by
                 * default we assume the answer is valid, so the submit button should
                 * not be disabled.
                 */
                if (_validityCheckFn === null) {
                    return false;
                }
                return !_validityCheckFn();
            },
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts":
/*!******************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Utility service for the learner's view of an exploration.
 */
__webpack_require__(/*! domain/collection/GuestCollectionProgressService.ts */ "./core/templates/dev/head/domain/collection/GuestCollectionProgressService.ts");
__webpack_require__(/*! domain/exploration/EditableExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/EditableExplorationBackendApiService.ts");
__webpack_require__(/*! domain/exploration/ExplorationObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ExplorationObjectFactory.ts");
__webpack_require__(/*! domain/exploration/ReadOnlyExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts");
__webpack_require__(/*! domain/state_card/StateCardObjectFactory.ts */ "./core/templates/dev/head/domain/state_card/StateCardObjectFactory.ts");
__webpack_require__(/*! domain/utilities/LanguageUtilService.ts */ "./core/templates/dev/head/domain/utilities/LanguageUtilService.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! expressions/ExpressionInterpolationService.ts */ "./core/templates/dev/head/expressions/ExpressionInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/answer-classification.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/answer-classification.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-preloader.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-preloader.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-translation-language.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-language.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/image-preloader.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/image-preloader.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/learner-params.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/learner-params.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/number-attempts.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/number-attempts.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-transcript.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/state-classifier-mapping.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/state-classifier-mapping.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/stats-reporting.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/stats-reporting.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/ExplorationFeaturesBackendApiService.ts */ "./core/templates/dev/head/services/ExplorationFeaturesBackendApiService.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
__webpack_require__(/*! services/UserService.ts */ "./core/templates/dev/head/services/UserService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
__webpack_require__(/*! pages/interaction-specs.constants.ajs.ts */ "./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts");
// A service that provides a number of utility functions for JS used by
// the player skin.
// Note that this service is used both in the learner and the editor views.
// The URL determines which of these it is. Some methods may need to be
// implemented differently depending on whether the skin is being played
// in the learner view, or whether it is being previewed in the editor view.
angular.module('oppia').factory('ExplorationEngineService', [
    '$rootScope', 'AlertsService', 'AnswerClassificationService',
    'AudioPreloaderService', 'AudioTranslationLanguageService', 'ContextService',
    'ExplorationFeaturesBackendApiService', 'ExplorationHtmlFormatterService',
    'ExplorationObjectFactory', 'ExpressionInterpolationService',
    'FocusManagerService', 'ImagePreloaderService', 'LearnerParamsService',
    'PlayerTranscriptService', 'ReadOnlyExplorationBackendApiService',
    'StateCardObjectFactory', 'StatsReportingService', 'UrlService',
    function ($rootScope, AlertsService, AnswerClassificationService, AudioPreloaderService, AudioTranslationLanguageService, ContextService, ExplorationFeaturesBackendApiService, ExplorationHtmlFormatterService, ExplorationObjectFactory, ExpressionInterpolationService, FocusManagerService, ImagePreloaderService, LearnerParamsService, PlayerTranscriptService, ReadOnlyExplorationBackendApiService, StateCardObjectFactory, StatsReportingService, UrlService) {
        var _explorationId = ContextService.getExplorationId();
        var _editorPreviewMode = ContextService.isInExplorationEditorPage();
        var _questionPlayerMode = ContextService.isInQuestionPlayerMode();
        var answerIsBeingProcessed = false;
        var alwaysAskLearnersForAnswerDetails = false;
        var exploration = null;
        // This list may contain duplicates. A state name is added to it each time
        // the learner moves to a new card.
        var visitedStateNames = [];
        var currentStateName = null;
        var nextStateName = null;
        // Param changes to be used ONLY in editor preview mode.
        var manualParamChanges = null;
        var initStateName = null;
        var version = UrlService.getExplorationVersionFromUrl();
        if (!_questionPlayerMode) {
            ReadOnlyExplorationBackendApiService
                .loadExploration(_explorationId, version)
                .then(function (exploration) {
                version = exploration.version;
            });
        }
        var randomFromArray = function (arr) {
            return arr[Math.floor(Math.random() * arr.length)];
        };
        // Evaluate feedback.
        var makeFeedback = function (feedbackHtml, envs) {
            return ExpressionInterpolationService.processHtml(feedbackHtml, envs);
        };
        var _getRandomSuffix = function () {
            // This is a bit of a hack. When a refresh to a $scope variable
            // happens,
            // AngularJS compares the new value of the variable to its previous
            // value. If they are the same, then the variable is not updated.
            // Appending a random suffix makes the new value different from the
            // previous one, and thus indirectly forces a refresh.
            var randomSuffix = '';
            var N = Math.round(Math.random() * 1000);
            for (var i = 0; i < N; i++) {
                randomSuffix += ' ';
            }
            return randomSuffix;
        };
        // Evaluate parameters. Returns null if any evaluation fails.
        var makeParams = function (oldParams, paramChanges, envs) {
            var newParams = angular.copy(oldParams);
            if (paramChanges.every(function (pc) {
                if (pc.generatorId === 'Copier') {
                    if (!pc.customizationArgs.parse_with_jinja) {
                        newParams[pc.name] = pc.customizationArgs.value;
                    }
                    else {
                        var paramValue = ExpressionInterpolationService.processUnicode(pc.customizationArgs.value, [newParams].concat(envs));
                        if (paramValue === null) {
                            return false;
                        }
                        newParams[pc.name] = paramValue;
                    }
                }
                else {
                    // RandomSelector.
                    newParams[pc.name] = randomFromArray(pc.customizationArgs.list_of_values);
                }
                return true;
            })) {
                // All parameters were evaluated successfully.
                return newParams;
            }
            // Evaluation of some parameter failed.
            return null;
        };
        // Evaluate question string.
        var makeQuestion = function (newState, envs) {
            return ExpressionInterpolationService.processHtml(newState.content.getHtml(), envs);
        };
        // This should only be called when 'exploration' is non-null.
        var _loadInitialState = function (successCallback) {
            var initialState = exploration.getInitialState();
            var oldParams = LearnerParamsService.getAllParams();
            var newParams = makeParams(oldParams, initialState.paramChanges, [oldParams]);
            if (newParams === null) {
                AlertsService.addWarning('Expression parsing error.');
                return;
            }
            if (newParams) {
                LearnerParamsService.init(newParams);
            }
            currentStateName = exploration.initStateName;
            nextStateName = exploration.initStateName;
            var interaction = exploration.getInteraction(exploration.initStateName);
            var nextFocusLabel = FocusManagerService.generateFocusLabel();
            var interactionId = interaction.id;
            var interactionHtml = null;
            if (interactionId) {
                interactionHtml = ExplorationHtmlFormatterService.getInteractionHtml(interactionId, exploration.getInteractionCustomizationArgs(currentStateName), true, nextFocusLabel);
            }
            var questionHtml = makeQuestion(initialState, [newParams]);
            if (questionHtml === null) {
                AlertsService.addWarning('Expression parsing error.');
                return;
            }
            if (!_editorPreviewMode) {
                StatsReportingService.recordExplorationStarted(exploration.initStateName, newParams);
            }
            var initialCard = StateCardObjectFactory.createNewCard(currentStateName, questionHtml, interactionHtml, interaction, initialState.recordedVoiceovers, initialState.content.getContentId());
            successCallback(initialCard, nextFocusLabel);
        };
        // Initialize the parameters in the exploration as specified in the
        // exploration-level initial parameter changes list, followed by any
        // manual parameter changes (in editor preview mode).
        var initParams = function (manualParamChanges) {
            var baseParams = {};
            exploration.paramSpecs.forEach(function (paramName, paramSpec) {
                baseParams[paramName] = paramSpec.getType().createDefaultValue();
            });
            var startingParams = makeParams(baseParams, exploration.paramChanges.concat(manualParamChanges), [baseParams]);
            LearnerParamsService.init(startingParams);
        };
        var _getNextInteractionHtml = function (labelForFocusTarget) {
            var interactionId = exploration.getInteractionId(nextStateName);
            return ExplorationHtmlFormatterService.getInteractionHtml(interactionId, exploration.getInteractionCustomizationArgs(nextStateName), true, labelForFocusTarget);
        };
        var checkAlwaysAskLearnersForAnswerDetails = function () {
            ExplorationFeaturesBackendApiService.fetchExplorationFeatures(_explorationId).then(function (featuresData) {
                alwaysAskLearnersForAnswerDetails = (featuresData.always_ask_learners_for_answer_details);
            });
        };
        return {
            // This should only be used in editor preview mode. It sets the
            // exploration data from what's currently specified in the editor, and
            // also initializes the parameters to empty strings.
            initSettingsFromEditor: function (activeStateNameFromPreviewTab, manualParamChangesToInit) {
                if (_editorPreviewMode) {
                    manualParamChanges = manualParamChangesToInit;
                    initStateName = activeStateNameFromPreviewTab;
                }
                else {
                    throw 'Error: cannot populate exploration in learner mode.';
                }
            },
            /**
             * Initializes an exploration, passing the data for the first state to
             * successCallback.
             *
             * In editor preview mode, populateExploration() must be called before
             * calling init().
             *
             * @param {function} successCallback - The function to execute after the
             *   initial exploration data is successfully loaded. This function will
             *   be passed two arguments:
             *   - stateName {string}, the name of the first state
             *   - initHtml {string}, an HTML string representing the content of the
             *       first state.
             */
            init: function (explorationDict, explorationVersion, preferredAudioLanguage, autoTtsEnabled, successCallback) {
                answerIsBeingProcessed = false;
                if (_editorPreviewMode) {
                    exploration = ExplorationObjectFactory.createFromBackendDict(explorationDict);
                    exploration.setInitialStateName(initStateName);
                    visitedStateNames = [exploration.getInitialState().name];
                    initParams(manualParamChanges);
                    AudioTranslationLanguageService.init(exploration.getAllVoiceoverLanguageCodes(), null, exploration.getLanguageCode(), explorationDict.auto_tts_enabled);
                    AudioPreloaderService.init(exploration);
                    AudioPreloaderService.kickOffAudioPreloader(initStateName);
                    _loadInitialState(successCallback);
                }
                else {
                    exploration = ExplorationObjectFactory.createFromBackendDict(explorationDict);
                    visitedStateNames.push(exploration.getInitialState().name);
                    version = explorationVersion;
                    initParams([]);
                    AudioTranslationLanguageService.init(exploration.getAllVoiceoverLanguageCodes(), preferredAudioLanguage, exploration.getLanguageCode(), autoTtsEnabled);
                    AudioPreloaderService.init(exploration);
                    AudioPreloaderService.kickOffAudioPreloader(exploration.getInitialState().name);
                    ImagePreloaderService.init(exploration);
                    ImagePreloaderService.kickOffImagePreloader(exploration.getInitialState().name);
                    checkAlwaysAskLearnersForAnswerDetails();
                    _loadInitialState(successCallback);
                }
            },
            moveToExploration: function (successCallback) {
                _loadInitialState(successCallback);
            },
            isCurrentStateInitial: function () {
                return currentStateName === exploration.initStateName;
            },
            recordNewCardAdded: function () {
                currentStateName = nextStateName;
            },
            getState: function () {
                var stateName = PlayerTranscriptService.getLastStateName();
                return exploration.getState(stateName);
            },
            getExplorationId: function () {
                return _explorationId;
            },
            getExplorationTitle: function () {
                return exploration.title;
            },
            getExplorationVersion: function () {
                return version;
            },
            getAuthorRecommendedExpIds: function () {
                return exploration.getAuthorRecommendedExpIds(currentStateName);
            },
            getLanguageCode: function () {
                return exploration.getLanguageCode();
            },
            isInPreviewMode: function () {
                return !!_editorPreviewMode;
            },
            submitAnswer: function (answer, interactionRulesService, successCallback) {
                if (answerIsBeingProcessed) {
                    return;
                }
                answerIsBeingProcessed = true;
                var oldStateName = PlayerTranscriptService.getLastStateName();
                var oldState = exploration.getState(oldStateName);
                var recordedVoiceovers = oldState.recordedVoiceovers;
                var classificationResult = (AnswerClassificationService.getMatchingClassificationResult(oldStateName, oldState.interaction, answer, interactionRulesService));
                var answerIsCorrect = classificationResult.outcome.labelledAsCorrect;
                // Use angular.copy() to clone the object
                // since classificationResult.outcome points
                // at oldState.interaction.default_outcome
                var outcome = angular.copy(classificationResult.outcome);
                var newStateName = outcome.dest;
                if (!_editorPreviewMode) {
                    var feedbackIsUseful = (AnswerClassificationService.isClassifiedExplicitlyOrGoesToNewState(oldStateName, oldState, answer, interactionRulesService));
                    StatsReportingService.recordAnswerSubmitted(oldStateName, LearnerParamsService.getAllParams(), answer, classificationResult.answerGroupIndex, classificationResult.ruleIndex, classificationResult.classificationCategorization, feedbackIsUseful);
                    StatsReportingService.recordAnswerSubmitAction(oldStateName, newStateName, oldState.interaction.id, answer, outcome.feedback);
                }
                var refresherExplorationId = outcome.refresherExplorationId;
                var missingPrerequisiteSkillId = outcome.missingPrerequisiteSkillId;
                var newState = exploration.getState(newStateName);
                var isFirstHit = Boolean(visitedStateNames.indexOf(newStateName) === -1);
                if (oldStateName !== newStateName) {
                    visitedStateNames.push(newStateName);
                }
                // Compute the data for the next state.
                var oldParams = LearnerParamsService.getAllParams();
                oldParams.answer = answer;
                var feedbackHtml = makeFeedback(outcome.feedback.getHtml(), [oldParams]);
                var feedbackContentId = outcome.feedback.getContentId();
                var feedbackAudioTranslations = (recordedVoiceovers.getBindableVoiceovers(feedbackContentId));
                if (feedbackHtml === null) {
                    answerIsBeingProcessed = false;
                    AlertsService.addWarning('Expression parsing error.');
                    return;
                }
                var newParams = (newState ? makeParams(oldParams, newState.paramChanges, [oldParams]) : oldParams);
                if (newParams === null) {
                    answerIsBeingProcessed = false;
                    AlertsService.addWarning('Expression parsing error.');
                    return;
                }
                var questionHtml = makeQuestion(newState, [newParams, {
                        answer: 'answer'
                    }]);
                if (questionHtml === null) {
                    answerIsBeingProcessed = false;
                    AlertsService.addWarning('Expression parsing error.');
                    return;
                }
                // TODO(sll): Remove the 'answer' key from newParams.
                newParams.answer = answer;
                answerIsBeingProcessed = false;
                var refreshInteraction = (oldStateName !== newStateName ||
                    exploration.isInteractionInline(oldStateName));
                nextStateName = newStateName;
                var onSameCard = (oldStateName === newStateName);
                $rootScope.$broadcast('updateActiveStateIfInEditor', newStateName);
                var _nextFocusLabel = FocusManagerService.generateFocusLabel();
                var nextInteractionHtml = null;
                if (exploration.getInteraction(nextStateName).id) {
                    nextInteractionHtml = _getNextInteractionHtml(_nextFocusLabel);
                }
                if (newParams) {
                    LearnerParamsService.init(newParams);
                }
                questionHtml = questionHtml + _getRandomSuffix();
                nextInteractionHtml = nextInteractionHtml + _getRandomSuffix();
                var nextCard = StateCardObjectFactory.createNewCard(nextStateName, questionHtml, nextInteractionHtml, exploration.getInteraction(nextStateName), exploration.getState(nextStateName).recordedVoiceovers, exploration.getState(nextStateName).content.getContentId());
                successCallback(nextCard, refreshInteraction, feedbackHtml, feedbackAudioTranslations, refresherExplorationId, missingPrerequisiteSkillId, onSameCard, null, (oldStateName === exploration.initStateName), isFirstHit, false, _nextFocusLabel);
                return answerIsCorrect;
            },
            isAnswerBeingProcessed: function () {
                return answerIsBeingProcessed;
            },
            getAlwaysAskLearnerForAnswerDetails: function () {
                return alwaysAskLearnersForAnswerDetails;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-player-state.service.ts":
/*!************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/exploration-player-state.service.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview A service that maintains a record of the state of the player,
 *  like engine service.
 */
__webpack_require__(/*! domain/exploration/EditableExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/EditableExplorationBackendApiService.ts");
__webpack_require__(/*! domain/exploration/ReadOnlyExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts");
__webpack_require__(/*! domain/question/PretestQuestionBackendApiService.ts */ "./core/templates/dev/head/domain/question/PretestQuestionBackendApiService.ts");
__webpack_require__(/*! domain/question/QuestionBackendApiService.ts */ "./core/templates/dev/head/domain/question/QuestionBackendApiService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/number-attempts.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/number-attempts.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-position.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-transcript.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/question-player-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/question-player-engine.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/state-classifier-mapping.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/state-classifier-mapping.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/stats-reporting.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/stats-reporting.service.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/ExplorationFeaturesBackendApiService.ts */ "./core/templates/dev/head/services/ExplorationFeaturesBackendApiService.ts");
__webpack_require__(/*! services/ExplorationFeaturesService.ts */ "./core/templates/dev/head/services/ExplorationFeaturesService.ts");
__webpack_require__(/*! services/PlaythroughIssuesService.ts */ "./core/templates/dev/head/services/PlaythroughIssuesService.ts");
__webpack_require__(/*! services/PlaythroughService.ts */ "./core/templates/dev/head/services/PlaythroughService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
angular.module('oppia').factory('ExplorationPlayerStateService', [
    '$q', '$rootScope', 'ContextService',
    'EditableExplorationBackendApiService',
    'ExplorationEngineService', 'ExplorationFeaturesBackendApiService',
    'ExplorationFeaturesService', 'NumberAttemptsService',
    'PlayerCorrectnessFeedbackEnabledService',
    'PlayerTranscriptService', 'PlaythroughIssuesService', 'PlaythroughService',
    'PretestQuestionBackendApiService',
    'QuestionBackendApiService', 'QuestionPlayerEngineService',
    'ReadOnlyExplorationBackendApiService', 'StateClassifierMappingService',
    'StatsReportingService', 'UrlService', 'EXPLORATION_MODE',
    function ($q, $rootScope, ContextService, EditableExplorationBackendApiService, ExplorationEngineService, ExplorationFeaturesBackendApiService, ExplorationFeaturesService, NumberAttemptsService, PlayerCorrectnessFeedbackEnabledService, PlayerTranscriptService, PlaythroughIssuesService, PlaythroughService, PretestQuestionBackendApiService, QuestionBackendApiService, QuestionPlayerEngineService, ReadOnlyExplorationBackendApiService, StateClassifierMappingService, StatsReportingService, UrlService, EXPLORATION_MODE) {
        var currentEngineService = null;
        var explorationMode = EXPLORATION_MODE.OTHER;
        var editorPreviewMode = ContextService.isInExplorationEditorPage();
        var questionPlayerMode = ContextService.isInQuestionPlayerMode();
        var explorationId = ContextService.getExplorationId();
        var version = UrlService.getExplorationVersionFromUrl();
        if (!questionPlayerMode) {
            ReadOnlyExplorationBackendApiService
                .loadExploration(explorationId, version)
                .then(function (exploration) {
                version = exploration.version;
            });
        }
        var storyId = UrlService.getStoryIdInPlayer();
        var initializeExplorationServices = function (returnDict, arePretestsAvailable, callback) {
            StateClassifierMappingService.init(returnDict.state_classifier_mapping);
            StatsReportingService.initSession(explorationId, returnDict.exploration.title, version, returnDict.session_id, UrlService.getCollectionIdFromExplorationUrl());
            PlaythroughService.initSession(explorationId, version, returnDict.record_playthrough_probability);
            PlaythroughIssuesService.initSession(explorationId, version);
            PlayerCorrectnessFeedbackEnabledService.init(returnDict.correctness_feedback_enabled);
            ExplorationEngineService.init(returnDict.exploration, returnDict.version, returnDict.preferred_audio_language_code, returnDict.auto_tts_enabled, arePretestsAvailable ? function () { } : callback);
        };
        var initializePretestServices = function (pretestQuestionDicts, callback) {
            PlayerCorrectnessFeedbackEnabledService.init(true);
            QuestionPlayerEngineService.init(pretestQuestionDicts, callback);
        };
        var initializeQuestionPlayerServices = function (questionDicts, callback) {
            PlayerCorrectnessFeedbackEnabledService.init(true);
            QuestionPlayerEngineService.init(questionDicts, callback);
        };
        var setExplorationMode = function () {
            explorationMode = EXPLORATION_MODE.EXPLORATION;
            currentEngineService = ExplorationEngineService;
        };
        var setPretestMode = function () {
            explorationMode = EXPLORATION_MODE.PRETEST;
            currentEngineService = QuestionPlayerEngineService;
        };
        var setQuestionPlayerMode = function () {
            explorationMode = EXPLORATION_MODE.QUESTION_PLAYER;
            currentEngineService = QuestionPlayerEngineService;
        };
        var setStoryChapterMode = function () {
            explorationMode = EXPLORATION_MODE.STORY_CHAPTER;
            currentEngineService = ExplorationEngineService;
        };
        var initExplorationPreviewPlayer = function (callback) {
            setExplorationMode();
            $q.all([
                EditableExplorationBackendApiService.fetchApplyDraftExploration(explorationId),
                ExplorationFeaturesBackendApiService.fetchExplorationFeatures(explorationId),
            ]).then(function (combinedData) {
                var explorationData = combinedData[0];
                var featuresData = combinedData[1];
                ExplorationFeaturesService.init(explorationData, featuresData);
                ExplorationEngineService.init(explorationData, null, null, null, callback);
                PlayerCorrectnessFeedbackEnabledService.init(explorationData.correctness_feedback_enabled);
                NumberAttemptsService.reset();
            });
        };
        var initQuestionPlayer = function (questionPlayerConfig, callback) {
            setQuestionPlayerMode();
            QuestionBackendApiService.fetchQuestions(questionPlayerConfig.skillList, questionPlayerConfig.questionCount, questionPlayerConfig.questionsSortedByDifficulty).then(function (questionData) {
                $rootScope.$broadcast('totalQuestionsReceived', questionData.length);
                initializeQuestionPlayerServices(questionData, callback);
            });
        };
        var initExplorationPlayer = function (callback) {
            var explorationDataPromise = version ?
                ReadOnlyExplorationBackendApiService.loadExploration(explorationId, version) :
                ReadOnlyExplorationBackendApiService.loadLatestExploration(explorationId);
            $q.all([
                explorationDataPromise,
                PretestQuestionBackendApiService.fetchPretestQuestions(explorationId, storyId),
                ExplorationFeaturesBackendApiService.fetchExplorationFeatures(explorationId),
            ]).then(function (combinedData) {
                var explorationData = combinedData[0];
                var pretestQuestionsData = combinedData[1];
                var featuresData = combinedData[2];
                ExplorationFeaturesService.init(explorationData, featuresData);
                if (pretestQuestionsData.length > 0) {
                    setPretestMode();
                    initializeExplorationServices(explorationData, true, callback);
                    initializePretestServices(pretestQuestionsData, callback);
                }
                else if (UrlService.getUrlParams().hasOwnProperty('story_id') &&
                    UrlService.getUrlParams().hasOwnProperty('node_id')) {
                    setStoryChapterMode();
                    initializeExplorationServices(explorationData, false, callback);
                }
                else {
                    setExplorationMode();
                    initializeExplorationServices(explorationData, false, callback);
                }
            });
        };
        return {
            initializePlayer: function (callback) {
                PlayerTranscriptService.init();
                if (editorPreviewMode) {
                    initExplorationPreviewPlayer(callback);
                }
                else {
                    initExplorationPlayer(callback);
                }
            },
            initializeQuestionPlayer: function (config, callback) {
                PlayerTranscriptService.init();
                initQuestionPlayer(config, callback);
            },
            getCurrentEngineService: function () {
                return currentEngineService;
            },
            isInPretestMode: function () {
                return explorationMode === EXPLORATION_MODE.PRETEST;
            },
            isInQuestionMode: function () {
                return explorationMode === EXPLORATION_MODE.PRETEST ||
                    explorationMode === EXPLORATION_MODE.QUESTION_PLAYER;
            },
            isInQuestionPlayerMode: function () {
                return explorationMode === EXPLORATION_MODE.QUESTION_PLAYER;
            },
            isInStoryChapterMode: function () {
                return explorationMode === EXPLORATION_MODE.STORY_CHAPTER;
            },
            getPretestQuestionCount: function () {
                return QuestionPlayerEngineService.getPretestQuestionCount();
            },
            moveToExploration: function (callback) {
                setExplorationMode();
                ExplorationEngineService.moveToExploration(callback);
            },
            getLanguageCode: function () {
                return currentEngineService.getLanguageCode();
            },
            recordNewCardAdded: function () {
                return currentEngineService.recordNewCardAdded();
            },
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-recommendations.service.ts":
/*!***************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/exploration-recommendations.service.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for recommending explorations at the end of an
 * exploration.
 */
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('oppia').factory('ExplorationRecommendationsService', [
    '$http', 'ContextService', 'UrlService', 'EXPLORATION_EDITOR_TAB_CONTEXT',
    'PAGE_CONTEXT',
    function ($http, ContextService, UrlService, EXPLORATION_EDITOR_TAB_CONTEXT, PAGE_CONTEXT) {
        var isIframed = UrlService.isIframed();
        var isInEditorPage = (ContextService.getPageContext() === PAGE_CONTEXT.EXPLORATION_EDITOR);
        var isInEditorPreviewMode = isInEditorPage && (ContextService.getEditorTabContext() ===
            EXPLORATION_EDITOR_TAB_CONTEXT.PREVIEW);
        var explorationId = ContextService.getExplorationId();
        return {
            getRecommendedSummaryDicts: function (authorRecommendedExpIds, includeAutogeneratedRecommendations, successCallback) {
                var recommendationsUrlParams = {
                    stringified_author_recommended_ids: JSON.stringify(authorRecommendedExpIds),
                    collection_id: UrlService.getCollectionIdFromExplorationUrl(),
                    include_system_recommendations: null
                };
                if (includeAutogeneratedRecommendations && !isInEditorPage) {
                    recommendationsUrlParams.include_system_recommendations = 'true';
                }
                $http.get('/explorehandler/recommendations/' + explorationId, {
                    params: recommendationsUrlParams
                }).then(function (response) {
                    successCallback(response.data.summaries);
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/fatigue-detection.service.ts":
/*!*****************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/fatigue-detection.service.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for detecting spamming behavior from the learner.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
angular.module('oppia').factory('FatigueDetectionService', [
    '$uibModal', 'UrlInterpolationService',
    function ($uibModal, UrlInterpolationService) {
        // 4 submissions in under 10 seconds triggers modal.
        var SPAM_COUNT_THRESHOLD = 4;
        var SPAM_WINDOW_MSEC = 10000;
        var submissionTimesMsec = [];
        return {
            recordSubmissionTimestamp: function () {
                submissionTimesMsec.push((new Date()).getTime());
            },
            isSubmittingTooFast: function () {
                if (submissionTimesMsec.length >= SPAM_COUNT_THRESHOLD) {
                    var windowStartTime = submissionTimesMsec.shift();
                    var windowEndTime = submissionTimesMsec[submissionTimesMsec.length - 1];
                    if (windowEndTime - windowStartTime < SPAM_WINDOW_MSEC) {
                        return true;
                    }
                }
                return false;
            },
            displayTakeBreakMessage: function () {
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
                        'take-break-modal.template.html'),
                    backdrop: 'static',
                    resolve: {},
                    controller: [
                        '$scope', '$uibModalInstance',
                        function ($scope, $uibModalInstance) {
                            $scope.okay = function () {
                                $uibModalInstance.close('okay');
                            };
                        }
                    ]
                });
            },
            reset: function () {
                submissionTimesMsec = [];
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/hint-and-solution-modal.service.ts":
/*!***********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/hint-and-solution-modal.service.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for showing the hint and solution modals.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/audio-translation-manager.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/audio-translation-manager.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/hints-and-solution-manager.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/hints-and-solution-manager.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-position.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-transcript.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts");
__webpack_require__(/*! services/AudioPlayerService.ts */ "./core/templates/dev/head/services/AudioPlayerService.ts");
__webpack_require__(/*! services/AutogeneratedAudioPlayerService.ts */ "./core/templates/dev/head/services/AutogeneratedAudioPlayerService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
angular.module('oppia').factory('HintAndSolutionModalService', [
    '$uibModal', 'AudioPlayerService',
    'AudioTranslationManagerService',
    'AutogeneratedAudioPlayerService',
    'HintsAndSolutionManagerService', 'PlayerPositionService',
    'PlayerTranscriptService', 'UrlInterpolationService', 'COMPONENT_NAME_HINT',
    'COMPONENT_NAME_SOLUTION', 'EVENT_AUTOPLAY_AUDIO',
    function ($uibModal, AudioPlayerService, AudioTranslationManagerService, AutogeneratedAudioPlayerService, HintsAndSolutionManagerService, PlayerPositionService, PlayerTranscriptService, UrlInterpolationService, COMPONENT_NAME_HINT, COMPONENT_NAME_SOLUTION, EVENT_AUTOPLAY_AUDIO) {
        return {
            displayHintModal: function (index) {
                return $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
                        'hint-and-solution-modal.template.html'),
                    backdrop: 'static',
                    controller: [
                        '$scope', '$rootScope', '$uibModalInstance',
                        function ($scope, $rootScope, $uibModalInstance) {
                            $scope.isHint = true;
                            $scope.hint = HintsAndSolutionManagerService.displayHint(index);
                            var displayedCard = PlayerTranscriptService.getCard(PlayerPositionService.getDisplayedCardIndex());
                            var recordedVoiceovers = displayedCard.getRecordedVoiceovers();
                            var hintContentId = $scope.hint.getContentId();
                            AudioTranslationManagerService.setSecondaryAudioTranslations(recordedVoiceovers.getBindableVoiceovers(hintContentId), $scope.hint.getHtml(), COMPONENT_NAME_HINT);
                            $rootScope.$broadcast(EVENT_AUTOPLAY_AUDIO);
                            $scope.closeModal = function () {
                                AudioPlayerService.stop();
                                AutogeneratedAudioPlayerService.cancel();
                                AudioTranslationManagerService
                                    .clearSecondaryAudioTranslations();
                                $uibModalInstance.dismiss('cancel');
                            };
                        }
                    ]
                });
            },
            displaySolutionModal: function () {
                return $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
                        'hint-and-solution-modal.template.html'),
                    backdrop: 'static',
                    controller: [
                        '$scope', '$rootScope', '$uibModalInstance',
                        function ($scope, $rootScope, $uibModalInstance) {
                            $scope.isHint = false;
                            var solution = HintsAndSolutionManagerService.displaySolution();
                            var solutionContentId = solution.explanation.getContentId();
                            var displayedCard = PlayerTranscriptService.getCard(PlayerPositionService.getDisplayedCardIndex());
                            var recordedVoiceovers = displayedCard.getRecordedVoiceovers();
                            AudioTranslationManagerService.setSecondaryAudioTranslations(recordedVoiceovers.getBindableVoiceovers(solutionContentId), solution.explanation.getHtml(), COMPONENT_NAME_SOLUTION);
                            $rootScope.$broadcast(EVENT_AUTOPLAY_AUDIO);
                            var interaction = displayedCard.getInteraction();
                            $scope.shortAnswerHtml = solution.getOppiaShortAnswerResponseHtml(interaction);
                            $scope.solutionExplanationHtml =
                                solution.getOppiaSolutionExplanationResponseHtml();
                            $scope.closeModal = function () {
                                AudioPlayerService.stop();
                                AutogeneratedAudioPlayerService.cancel();
                                AudioTranslationManagerService
                                    .clearSecondaryAudioTranslations();
                                $uibModalInstance.dismiss('cancel');
                            };
                        }
                    ]
                });
            },
            displaySolutionInterstitialModal: function () {
                return $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
                        'solution-interstitial-modal.template.html'),
                    backdrop: 'static',
                    controller: [
                        '$scope', '$uibModalInstance',
                        function ($scope, $uibModalInstance) {
                            $scope.continueToSolution = function () {
                                $uibModalInstance.close();
                            };
                            $scope.cancel = function () {
                                $uibModalInstance.dismiss('cancel');
                            };
                        }
                    ]
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/hints-and-solution-manager.service.ts":
/*!**************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/hints-and-solution-manager.service.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Utility service for Hints in the learner's view.
 */
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
angular.module('oppia').factory('HintsAndSolutionManagerService', [
    '$rootScope', '$timeout', 'EVENT_NEW_CARD_AVAILABLE',
    'WAIT_FOR_FIRST_HINT_MSEC', 'WAIT_FOR_SUBSEQUENT_HINTS_MSEC',
    function ($rootScope, $timeout, EVENT_NEW_CARD_AVAILABLE, WAIT_FOR_FIRST_HINT_MSEC, WAIT_FOR_SUBSEQUENT_HINTS_MSEC) {
        var timeout = null;
        var ACCELERATED_HINT_WAIT_TIME_MSEC = 10000;
        var WAIT_FOR_TOOLTIP_TO_BE_SHOWN_MSEC = 60000;
        var numHintsReleased = 0;
        var numHintsConsumed = 0;
        var solutionReleased = false;
        var solutionConsumed = false;
        var hintsForLatestCard = [];
        var solutionForLatestCard = null;
        var wrongAnswersSinceLastHintConsumed = 0;
        var correctAnswerSubmitted = false;
        // tooltipIsOpen is a flag which says that the tooltip is currently
        // visible to the learner.
        var tooltipIsOpen = false;
        // This is set to true as soon as a hint/solution is clicked or when the
        // tooltip has been triggered.
        var hintsDiscovered = false;
        var tooltipTimeout = null;
        $rootScope.$on(EVENT_NEW_CARD_AVAILABLE, function () {
            correctAnswerSubmitted = true;
            // This prevents tooltip to hide the Continue button of the help card in
            // mobile view.
            tooltipIsOpen = false;
        });
        // This replaces any timeouts that are already queued.
        var enqueueTimeout = function (func, timeToWaitMsec) {
            if (timeout) {
                $timeout.cancel(timeout);
            }
            timeout = $timeout(func, timeToWaitMsec);
        };
        var showTooltip = function () {
            tooltipIsOpen = true;
            hintsDiscovered = true;
        };
        var releaseHint = function () {
            if (!correctAnswerSubmitted) {
                numHintsReleased++;
                if (!hintsDiscovered && !tooltipTimeout) {
                    tooltipTimeout = $timeout(showTooltip, WAIT_FOR_TOOLTIP_TO_BE_SHOWN_MSEC);
                }
            }
        };
        var releaseSolution = function () {
            solutionReleased = true;
        };
        var accelerateHintRelease = function () {
            enqueueTimeout(releaseHint, ACCELERATED_HINT_WAIT_TIME_MSEC);
        };
        var areAllHintsExhausted = function () {
            return numHintsReleased === hintsForLatestCard.length;
        };
        var isAHintWaitingToBeViewed = function () {
            return numHintsConsumed < numHintsReleased;
        };
        var consumeHint = function () {
            hintsDiscovered = true;
            tooltipIsOpen = false;
            if (tooltipTimeout) {
                $timeout.cancel(tooltipTimeout);
            }
            $rootScope.$broadcast('hintConsumed');
            numHintsConsumed++;
            wrongAnswersSinceLastHintConsumed = 0;
            var funcToEnqueue = null;
            if (!areAllHintsExhausted()) {
                funcToEnqueue = releaseHint;
            }
            else if (!!solutionForLatestCard && !solutionReleased) {
                funcToEnqueue = releaseSolution;
            }
            if (funcToEnqueue) {
                enqueueTimeout(funcToEnqueue, WAIT_FOR_SUBSEQUENT_HINTS_MSEC);
            }
        };
        return {
            reset: function (newHints, newSolution) {
                numHintsReleased = 0;
                numHintsConsumed = 0;
                solutionReleased = false;
                solutionConsumed = false;
                hintsForLatestCard = newHints;
                solutionForLatestCard = newSolution;
                wrongAnswersSinceLastHintConsumed = 0;
                correctAnswerSubmitted = false;
                if (timeout) {
                    $timeout.cancel(timeout);
                }
                if (tooltipTimeout) {
                    $timeout.cancel(tooltipTimeout);
                }
                if (hintsForLatestCard.length > 0) {
                    enqueueTimeout(releaseHint, WAIT_FOR_FIRST_HINT_MSEC);
                }
            },
            // WARNING: This method has a side-effect. If the retrieved hint is a
            // pending hint that's being viewed, it starts the timer for the next
            // hint.
            displayHint: function (index) {
                if (index === numHintsConsumed && numHintsConsumed < numHintsReleased) {
                    // The latest hint has been consumed. Start the timer.
                    consumeHint();
                }
                if (index < numHintsReleased) {
                    return hintsForLatestCard[index].hintContent;
                }
                return null;
            },
            displaySolution: function () {
                hintsDiscovered = true;
                solutionConsumed = true;
                $rootScope.$broadcast('solutionViewed');
                if (tooltipTimeout) {
                    $timeout.cancel(tooltipTimeout);
                }
                return solutionForLatestCard;
            },
            getNumHints: function () {
                return hintsForLatestCard.length;
            },
            isHintViewable: function (index) {
                return index < numHintsReleased;
            },
            isHintConsumed: function (index) {
                return index < numHintsConsumed;
            },
            isHintTooltipOpen: function () {
                return tooltipIsOpen;
            },
            isSolutionViewable: function () {
                return solutionReleased;
            },
            isSolutionConsumed: function () {
                return solutionConsumed;
            },
            recordWrongAnswer: function () {
                if (isAHintWaitingToBeViewed()) {
                    return;
                }
                wrongAnswersSinceLastHintConsumed++;
                if (!areAllHintsExhausted() && !isAHintWaitingToBeViewed()) {
                    if (numHintsReleased === 0 &&
                        wrongAnswersSinceLastHintConsumed >= 2) {
                        accelerateHintRelease();
                    }
                    else if (numHintsReleased > 0 && wrongAnswersSinceLastHintConsumed >= 1) {
                        accelerateHintRelease();
                    }
                }
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/learner-answer-info.service.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/learner-answer-info.service.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for learner answer info.
 */
__webpack_require__(/*! pages/exploration-player-page/services/answer-classification.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/answer-classification.service.ts");
__webpack_require__(/*! domain/statistics/LearnerAnswerDetailsBackendApiService.ts */ "./core/templates/dev/head/domain/statistics/LearnerAnswerDetailsBackendApiService.ts");
angular.module('oppia').factory('LearnerAnswerInfoService', [
    'AnswerClassificationService', 'LearnerAnswerDetailsBackendApiService',
    'INTERACTION_IDS_WITHOUT_ANSWER_DETAILS',
    function (AnswerClassificationService, LearnerAnswerDetailsBackendApiService, INTERACTION_IDS_WITHOUT_ANSWER_DETAILS) {
        var submittedAnswerInfoCount = 0;
        var currentEntityId = null;
        var stateName = null;
        var interactionId = null;
        var currentAnswer = null;
        var currentInteractionRulesService = null;
        var canAskLearnerForAnswerInfo = false;
        var visitedStates = [];
        var probabilityIndexes = {
            // The probability that a request for explanation of the answer that is
            // submitted by the learner. There are three different probabilities
            // based on the outcome of the answer.
            // The probability index when the outcome is equal to the default outcome
            // for an interaction.
            typeA: 0.25,
            // The probability index when the outcome is marked as correct i.e
            // labelled_as_correct property is true.
            typeB: 0.10,
            // The probability index when the outcome is not the default outcome
            // and it is not marked as correct i.e. it is any general outcome.
            typeC: 0.05
        };
        var getRandomProbabilityIndex = function () {
            var min = 0;
            var max = 100;
            return (Math.floor(Math.random() * (max - min + 1)) + min) / 100;
        };
        return {
            initLearnerAnswerInfoService: function (entityId, state, answer, interactionRulesService, alwaysAskLearnerForAnswerInfo) {
                currentEntityId = entityId;
                currentAnswer = answer;
                currentInteractionRulesService = interactionRulesService;
                stateName = state.name;
                interactionId = state.interaction.id;
                var defaultOutcome = state.interaction.defaultOutcome;
                if (submittedAnswerInfoCount === 2) {
                    return;
                }
                if (!state.solicitAnswerDetails) {
                    return;
                }
                if (INTERACTION_IDS_WITHOUT_ANSWER_DETAILS.indexOf(interactionId) !== -1) {
                    return;
                }
                if (visitedStates.indexOf(stateName) !== -1) {
                    return;
                }
                if (alwaysAskLearnerForAnswerInfo === true) {
                    canAskLearnerForAnswerInfo = true;
                    return;
                }
                var classificationResult = (AnswerClassificationService.getMatchingClassificationResult(stateName, state.interaction, answer, interactionRulesService));
                var outcome = classificationResult.outcome;
                var thresholdProbabilityIndex = null;
                var randomProbabilityIndex = getRandomProbabilityIndex();
                if (outcome === defaultOutcome) {
                    thresholdProbabilityIndex = probabilityIndexes.typeA;
                }
                else if (outcome.labelledAsCorrect) {
                    thresholdProbabilityIndex = probabilityIndexes.typeB;
                }
                else {
                    thresholdProbabilityIndex = probabilityIndexes.typeC;
                }
                canAskLearnerForAnswerInfo = (randomProbabilityIndex <= thresholdProbabilityIndex);
            },
            resetSubmittedAnswerInfoCount: function () {
                submittedAnswerInfoCount = 0;
            },
            recordLearnerAnswerInfo: function (answerDetails) {
                LearnerAnswerDetailsBackendApiService.recordLearnerAnswerDetails(currentEntityId, stateName, interactionId, currentAnswer, answerDetails);
                submittedAnswerInfoCount++;
                visitedStates.push(stateName);
                canAskLearnerForAnswerInfo = false;
            },
            canAskLearnerForAnswerInfo: function () {
                return canAskLearnerForAnswerInfo;
            },
            getCurrentAnswer: function () {
                return currentAnswer;
            },
            getCurrentInteractionRulesService: function () {
                return currentInteractionRulesService;
            },
            getSolicitAnswerDetailsQuestion: function () {
                var el = $('<p>');
                el.attr('translate', 'I18N_SOLICIT_ANSWER_DETAILS_QUESTION');
                return ($('<span>').append(el)).html();
            },
            getSolicitAnswerDetailsFeedback: function () {
                var el = $('<p>');
                el.attr('translate', 'I18N_SOLICIT_ANSWER_DETAILS_FEEDBACK');
                return ($('<span>').append(el)).html();
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/learner-params.service.ts":
/*!**************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/learner-params.service.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview A service that maintains the current set of parameters for the
 * learner.
 */
var cloneDeep_1 = __importDefault(__webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js"));
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var LearnerParamsService = /** @class */ (function () {
    function LearnerParamsService() {
        this._paramDict = {};
    }
    // TODO(sll): Forbid use of 'answer', 'choices' as possible keys.
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since 'initParamSpecs' is a dict with ParamSpec type object
    // values which is in AngularJS. Replace this with the exact type once it is
    // upgraded.
    LearnerParamsService.prototype.init = function (initParamSpecs) {
        // The initParamSpecs arg is a dict mapping the parameter names used in
        // the exploration to their default values.
        this._paramDict = cloneDeep_1.default(initParamSpecs);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been typed
    // as 'any' since the return type is a dict with ParamSpec type object
    // values which is in AngularJS. Replace this with the exact type once it is
    // upgraded.
    LearnerParamsService.prototype.getValue = function (paramName) {
        if (!this._paramDict.hasOwnProperty(paramName)) {
            throw 'Invalid parameter name: ' + paramName;
        }
        else {
            return cloneDeep_1.default(this._paramDict[paramName]);
        }
    };
    LearnerParamsService.prototype.setValue = function (paramName, newParamValue) {
        // TODO(sll): Currently, all parameters are strings. In the future, we
        // will need to maintain information about parameter types.
        if (!this._paramDict.hasOwnProperty(paramName)) {
            throw 'Cannot set unknown parameter: ' + paramName;
        }
        else {
            this._paramDict[paramName] = String(newParamValue);
        }
    };
    LearnerParamsService.prototype.getAllParams = function () {
        return cloneDeep_1.default(this._paramDict);
    };
    LearnerParamsService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], LearnerParamsService);
    return LearnerParamsService;
}());
exports.LearnerParamsService = LearnerParamsService;
angular.module('oppia').factory('LearnerParamsService', static_1.downgradeInjectable(LearnerParamsService));


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/learner-view-rating.service.ts":
/*!*******************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/learner-view-rating.service.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for the rating functionality in the learner view.
 */
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
angular.module('oppia').factory('LearnerViewRatingService', [
    '$http', '$rootScope', 'ExplorationEngineService',
    function ($http, $rootScope, ExplorationEngineService) {
        var explorationId = ExplorationEngineService.getExplorationId();
        var ratingsUrl = '/explorehandler/rating/' + explorationId;
        var userRating;
        return {
            init: function (successCallback) {
                $http.get(ratingsUrl).then(function (response) {
                    successCallback(response.data.user_rating);
                    userRating = response.data.user_rating;
                    $rootScope.$broadcast('ratingServiceInitialized');
                });
            },
            submitUserRating: function (ratingValue) {
                $http.put(ratingsUrl, {
                    user_rating: ratingValue
                });
                userRating = ratingValue;
                $rootScope.$broadcast('ratingUpdated');
            },
            getUserRating: function () {
                return userRating;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/number-attempts.service.ts":
/*!***************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/number-attempts.service.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service to track the number of answer attempts by the learner
 * within a card.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var NumberAttemptsService = /** @class */ (function () {
    function NumberAttemptsService() {
    }
    NumberAttemptsService_1 = NumberAttemptsService;
    NumberAttemptsService.prototype.submitAttempt = function () {
        NumberAttemptsService_1.numberAttempts++;
    };
    NumberAttemptsService.prototype.reset = function () {
        NumberAttemptsService_1.numberAttempts = 0;
    };
    NumberAttemptsService.prototype.getNumberAttempts = function () {
        return NumberAttemptsService_1.numberAttempts;
    };
    var NumberAttemptsService_1;
    NumberAttemptsService.numberAttempts = 0;
    NumberAttemptsService = NumberAttemptsService_1 = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], NumberAttemptsService);
    return NumberAttemptsService;
}());
exports.NumberAttemptsService = NumberAttemptsService;
angular.module('oppia').factory('NumberAttemptsService', static_1.downgradeInjectable(NumberAttemptsService));


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/player-correctness-feedback-enabled.service.ts":
/*!***********************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/player-correctness-feedback-enabled.service.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service which sets and determines whether the correctness
 * feedback is enabled or not.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var PlayerCorrectnessFeedbackEnabledService = /** @class */ (function () {
    function PlayerCorrectnessFeedbackEnabledService() {
    }
    PlayerCorrectnessFeedbackEnabledService_1 = PlayerCorrectnessFeedbackEnabledService;
    PlayerCorrectnessFeedbackEnabledService._init = function (correctnessFeedbackIsEnabled) {
        PlayerCorrectnessFeedbackEnabledService_1._correctnessFeedbackIsEnabled = (correctnessFeedbackIsEnabled);
    };
    PlayerCorrectnessFeedbackEnabledService.prototype.init = function (correctnessFeedbackIsEnabled) {
        PlayerCorrectnessFeedbackEnabledService_1._init(correctnessFeedbackIsEnabled);
    };
    PlayerCorrectnessFeedbackEnabledService.prototype.isEnabled = function () {
        return (PlayerCorrectnessFeedbackEnabledService_1._correctnessFeedbackIsEnabled);
    };
    var PlayerCorrectnessFeedbackEnabledService_1;
    PlayerCorrectnessFeedbackEnabledService._correctnessFeedbackIsEnabled = false;
    PlayerCorrectnessFeedbackEnabledService = PlayerCorrectnessFeedbackEnabledService_1 = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], PlayerCorrectnessFeedbackEnabledService);
    return PlayerCorrectnessFeedbackEnabledService;
}());
exports.PlayerCorrectnessFeedbackEnabledService = PlayerCorrectnessFeedbackEnabledService;
angular.module('oppia').factory('PlayerCorrectnessFeedbackEnabledService', static_1.downgradeInjectable(PlayerCorrectnessFeedbackEnabledService));


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts":
/*!***************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for keeping track of the learner's position.
 */
__webpack_require__(/*! pages/exploration-player-page/services/player-transcript.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
angular.module('oppia').factory('PlayerPositionService', [
    'ContextService', 'PlayerTranscriptService', function (ContextService, PlayerTranscriptService) {
        var displayedCardIndex = null;
        var onChangeCallback = null;
        var learnerJustSubmittedAnAnswer = false;
        return {
            init: function (callback) {
                displayedCardIndex = null;
                onChangeCallback = callback;
            },
            getCurrentStateName: function () {
                try {
                    return (PlayerTranscriptService.getCard(displayedCardIndex).getStateName());
                }
                catch (e) {
                    var additionalInfo = ('\nUndefined card error debug logs:' +
                        '\nRequested card index: ' + displayedCardIndex +
                        '\nExploration ID: ' + ContextService.getExplorationId() +
                        '\nTotal cards: ' + PlayerTranscriptService.getNumCards() +
                        '\nLast state name: ' + PlayerTranscriptService.getLastStateName());
                    e.message += additionalInfo;
                    throw e;
                }
            },
            setDisplayedCardIndex: function (index) {
                var oldIndex = displayedCardIndex;
                displayedCardIndex = index;
                if (oldIndex !== displayedCardIndex) {
                    onChangeCallback();
                }
            },
            getDisplayedCardIndex: function () {
                return displayedCardIndex;
            },
            recordAnswerSubmission: function () {
                learnerJustSubmittedAnAnswer = true;
            },
            recordNavigationButtonClick: function () {
                learnerJustSubmittedAnAnswer = false;
            },
            hasLearnerJustSubmittedAnAnswer: function () {
                return learnerJustSubmittedAnAnswer;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts":
/*!*****************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for the learner view transcript.
 */
__webpack_require__(/*! domain/state_card/StateCardObjectFactory.ts */ "./core/templates/dev/head/domain/state_card/StateCardObjectFactory.ts");
// A service that maintains the transcript of the playthrough (i.e., what cards
// are shown, what answers have been given, etc. Note that this service does
// not maintain the currently-active card -- it's more like a log of what the
// learner has 'discovered' so far.
angular.module('oppia').factory('PlayerTranscriptService', [
    '$log', function ($log) {
        // Each element of this array represents a 'StateCard' domain object.
        //
        // Note that every card in this transcript is visible on the screen. The
        // 'card.getDestStateName()' field is intended to identify transcripts where
        // there is a card 'in reserve', but the learner has not yet navigated to it
        // -- this happens if the current card offers feedback to the learner before
        // they carry on.
        var transcript = [];
        var numAnswersSubmitted = 0;
        return {
            restore: function (oldTranscript) {
                transcript = angular.copy(oldTranscript);
            },
            init: function () {
                transcript = [];
                numAnswersSubmitted = 0;
            },
            hasEncounteredStateBefore: function (stateName) {
                return transcript.some(function (transcriptItem) {
                    return transcriptItem.getStateName() === stateName;
                });
            },
            addNewCard: function (newCard) {
                transcript.push(newCard);
                numAnswersSubmitted = 0;
            },
            addPreviousCard: function () {
                if (transcript.length === 1) {
                    throw Error('Exploration player is on the first card and hence no previous ' +
                        'card exists.');
                }
                // TODO(aks681): Once worked examples are introduced, modify the below
                // line to take into account the number of worked examples displayed.
                var copyOfPreviousCard = angular.copy(transcript[transcript.length - 2]);
                copyOfPreviousCard.markAsNotCompleted();
                transcript.push(copyOfPreviousCard);
            },
            addNewInput: function (input, isHint) {
                var card = this.getLastCard();
                var pairs = card.getInputResponsePairs();
                if (pairs.length > 0 && card.getLastOppiaResponse() === null) {
                    throw Error('Trying to add an input before the response for the previous ' +
                        'input has been received.');
                }
                if (!isHint) {
                    numAnswersSubmitted += 1;
                }
                transcript[transcript.length - 1].addInputResponsePair({
                    learnerInput: input,
                    oppiaResponse: null,
                    isHint: isHint
                });
            },
            addNewResponse: function (response) {
                var card = this.getLastCard();
                card.setLastOppiaResponse(response);
            },
            getNumCards: function () {
                return transcript.length;
            },
            getCard: function (index) {
                if (index < 0 || index >= transcript.length) {
                    $log.error('Requested card with index ' + index +
                        ', but transcript only has length ' +
                        transcript.length + ' cards.');
                }
                return transcript[index];
            },
            getLastAnswerOnDisplayedCard: function (displayedCardIndex) {
                if (this.isLastCard(displayedCardIndex) ||
                    transcript[displayedCardIndex].getStateName() === null ||
                    transcript[displayedCardIndex].getInputResponsePairs().length === 0) {
                    return null;
                }
                else {
                    return transcript[displayedCardIndex].
                        getInputResponsePairs().slice(-1)[0].learnerInput;
                }
            },
            isLastCard: function (index) {
                return index === transcript.length - 1;
            },
            getLastCard: function () {
                return this.getCard(transcript.length - 1);
            },
            getNumSubmitsForLastCard: function () {
                return numAnswersSubmitted;
            },
            updateLatestInteractionHtml: function (newInteractionHtml) {
                this.getLastCard().setInteractionHtml(newInteractionHtml);
            },
            getLastStateName: function () {
                return this.getLastCard().getStateName();
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/prediction-algorithm-registry.service.ts":
/*!*****************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/prediction-algorithm-registry.service.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2015 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for mapping algorithmId to PredictionAlgorithmService.
 */
angular.module('oppia').factory('PredictionAlgorithmRegistryService', [
    '$injector', function ($injector) {
        /**
         * This mapping needs to be updated whenever a new prediction service needs
         * to be added for classification. The mapping is from algorithmId to a
         * list of objects. The mapping should be of the type:
         * {
         *   algorithmId: {
         *     dataSchemaVersion: predictionService
         *   }
         * }
         */
        var algorithmIdPredictionServiceMapping = {
            CodeClassifier: {
                v1: 'CodeReplPredictionService'
            },
            TextClassifier: {
                v1: 'TextInputPredictionService'
            }
        };
        return {
            getPredictionService: function (algorithmId, dataSchemaVersion) {
                if (algorithmIdPredictionServiceMapping.hasOwnProperty(algorithmId)) {
                    // We convert dataSchemaVersion to a string below since JS objects
                    // can't have integer properties.
                    var serviceName = (algorithmIdPredictionServiceMapping[algorithmId]['v' + dataSchemaVersion.toString()]);
                    return $injector.get(serviceName);
                }
                else {
                    return null;
                }
            },
            // The below function is required for running tests with sample
            // prediction services.
            setMapping: function (newAlgorithmIdPredictionServiceMapping) {
                algorithmIdPredictionServiceMapping = (newAlgorithmIdPredictionServiceMapping);
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/question-player-engine.service.ts":
/*!**********************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/question-player-engine.service.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Utility service for the question player for an exploration.
 */
__webpack_require__(/*! domain/exploration/ReadOnlyExplorationBackendApiService.ts */ "./core/templates/dev/head/domain/exploration/ReadOnlyExplorationBackendApiService.ts");
__webpack_require__(/*! domain/question/QuestionObjectFactory.ts */ "./core/templates/dev/head/domain/question/QuestionObjectFactory.ts");
__webpack_require__(/*! domain/state_card/StateCardObjectFactory.ts */ "./core/templates/dev/head/domain/state_card/StateCardObjectFactory.ts");
__webpack_require__(/*! expressions/ExpressionInterpolationService.ts */ "./core/templates/dev/head/expressions/ExpressionInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/answer-classification.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/answer-classification.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
__webpack_require__(/*! services/ExplorationHtmlFormatterService.ts */ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
__webpack_require__(/*! pages/interaction-specs.constants.ajs.ts */ "./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts");
angular.module('oppia').factory('QuestionPlayerEngineService', [
    'AlertsService', 'AnswerClassificationService',
    'ContextService', 'ExplorationHtmlFormatterService',
    'ExpressionInterpolationService', 'FocusManagerService',
    'QuestionObjectFactory', 'ReadOnlyExplorationBackendApiService',
    'StateCardObjectFactory', 'UrlService', 'INTERACTION_DISPLAY_MODE_INLINE',
    'INTERACTION_SPECS',
    function (AlertsService, AnswerClassificationService, ContextService, ExplorationHtmlFormatterService, ExpressionInterpolationService, FocusManagerService, QuestionObjectFactory, ReadOnlyExplorationBackendApiService, StateCardObjectFactory, UrlService, INTERACTION_DISPLAY_MODE_INLINE, INTERACTION_SPECS) {
        var _explorationId = ContextService.getExplorationId();
        var _questionPlayerMode = ContextService.isInQuestionPlayerMode();
        var version = UrlService.getExplorationVersionFromUrl();
        if (!_questionPlayerMode) {
            ReadOnlyExplorationBackendApiService
                .loadExploration(_explorationId, version)
                .then(function (exploration) {
                version = exploration.version;
            });
        }
        var answerIsBeingProcessed = false;
        var questions = [];
        var currentIndex = null;
        var nextIndex = null;
        var randomFromArray = function (arr) {
            return arr[Math.floor(Math.random() * arr.length)];
        };
        // Evaluate feedback.
        var makeFeedback = function (feedbackHtml, envs) {
            return ExpressionInterpolationService.processHtml(feedbackHtml, envs);
        };
        // Evaluate question string.
        var makeQuestion = function (newState, envs) {
            return ExpressionInterpolationService.processHtml(newState.content.getHtml(), envs);
        };
        var _getRandomSuffix = function () {
            // This is a bit of a hack. When a refresh to a $scope variable
            // happens,
            // AngularJS compares the new value of the variable to its previous
            // value. If they are the same, then the variable is not updated.
            // Appending a random suffix makes the new value different from the
            // previous one, and thus indirectly forces a refresh.
            var randomSuffix = '';
            var N = Math.round(Math.random() * 1000);
            for (var i = 0; i < N; i++) {
                randomSuffix += ' ';
            }
            return randomSuffix;
        };
        // This should only be called when 'exploration' is non-null.
        var _loadInitialQuestion = function (successCallback) {
            var initialState = questions[0].getStateData();
            var questionHtml = makeQuestion(initialState, []);
            if (questionHtml === null) {
                AlertsService.addWarning('Expression parsing error.');
                return;
            }
            currentIndex = 0;
            nextIndex = 0;
            var interaction = initialState.interaction;
            var nextFocusLabel = FocusManagerService.generateFocusLabel();
            var interactionId = interaction.id;
            var interactionHtml = null;
            if (interactionId) {
                interactionHtml = ExplorationHtmlFormatterService.getInteractionHtml(interactionId, interaction.customizationArgs, true, nextFocusLabel);
            }
            var initialCard = StateCardObjectFactory.createNewCard(null, questionHtml, interactionHtml, interaction, initialState.recordedVoiceovers, initialState.content.getContentId());
            successCallback(initialCard, nextFocusLabel);
        };
        var _getCurrentStateData = function () {
            return questions[currentIndex].getStateData();
        };
        var _getNextStateData = function () {
            return questions[nextIndex].getStateData();
        };
        var _getNextInteractionHtml = function (labelForFocusTarget) {
            var interactionId = _getNextStateData().interaction.id;
            return ExplorationHtmlFormatterService.getInteractionHtml(interactionId, _getNextStateData().interaction.customizationArgs, true, labelForFocusTarget);
        };
        return {
            /**
             * Initializes the question player for an exploration,
             * passing the data for the first question to successCallback.
             *
             *
             * @param {function} successCallback - The function to execute after the
             *   question data is successfully loaded. This function will
             *   be passed two arguments:
             *   - initHtml {string}, an HTML string representing the content of the
             *       first state.
             */
            init: function (questionDicts, successCallback) {
                answerIsBeingProcessed = false;
                for (var i = 0; i < questionDicts.length; i++) {
                    questions.push(QuestionObjectFactory.createFromBackendDict(questionDicts[i]));
                }
                _loadInitialQuestion(successCallback);
            },
            recordNewCardAdded: function () {
                currentIndex = nextIndex;
            },
            getCurrentQuestion: function () {
                return questions[currentIndex];
            },
            getCurrentQuestionId: function () {
                return questions[currentIndex].getId();
            },
            getQuestionCount: function () {
                return questions.length;
            },
            getExplorationId: function () {
                return _explorationId;
            },
            getExplorationVersion: function () {
                return version;
            },
            getLanguageCode: function () {
                return questions[currentIndex].getLanguageCode();
            },
            isInPreviewMode: function () {
                return false;
            },
            submitAnswer: function (answer, interactionRulesService, successCallback) {
                if (answerIsBeingProcessed) {
                    return;
                }
                answerIsBeingProcessed = true;
                var oldIndex = currentIndex;
                var oldState = _getCurrentStateData();
                var recordedVoiceovers = oldState.recordedVoiceovers;
                var classificationResult = (AnswerClassificationService.getMatchingClassificationResult(null, oldState.interaction, answer, interactionRulesService));
                var answerIsCorrect = classificationResult.outcome.labelledAsCorrect;
                var taggedSkillMisconceptionId = null;
                if (oldState.interaction.answerGroups[answer]) {
                    taggedSkillMisconceptionId =
                        oldState.interaction.answerGroups[answer]
                            .taggedSkillMisconceptionId;
                }
                // Use angular.copy() to clone the object
                // since classificationResult.outcome points
                // at oldState.interaction.default_outcome
                var outcome = angular.copy(classificationResult.outcome);
                // Compute the data for the next state.
                var oldParams = {
                    answer: answer
                };
                var feedbackHtml = makeFeedback(outcome.feedback.getHtml(), [oldParams]);
                var feedbackContentId = outcome.feedback.getContentId();
                var feedbackAudioTranslations = (recordedVoiceovers.getBindableVoiceovers(feedbackContentId));
                if (feedbackHtml === null) {
                    answerIsBeingProcessed = false;
                    AlertsService.addWarning('Expression parsing error.');
                    return;
                }
                var newState = null;
                if (answerIsCorrect && (currentIndex < questions.length - 1)) {
                    newState = questions[currentIndex + 1].getStateData();
                }
                else {
                    newState = oldState;
                }
                var questionHtml = makeQuestion(newState, [oldParams, {
                        answer: 'answer'
                    }]);
                if (questionHtml === null) {
                    answerIsBeingProcessed = false;
                    AlertsService.addWarning('Expression parsing error.');
                    return;
                }
                answerIsBeingProcessed = false;
                var interactionId = oldState.interaction.id;
                var interactionIsInline = (!interactionId ||
                    INTERACTION_SPECS[interactionId].display_mode ===
                        INTERACTION_DISPLAY_MODE_INLINE);
                var refreshInteraction = (answerIsCorrect || interactionIsInline);
                nextIndex = currentIndex + 1;
                var isFinalQuestion = (nextIndex === questions.length);
                var onSameCard = !answerIsCorrect;
                var _nextFocusLabel = FocusManagerService.generateFocusLabel();
                var nextCard = null;
                if (!isFinalQuestion) {
                    var nextInteractionHtml = _getNextInteractionHtml(_nextFocusLabel);
                    questionHtml = questionHtml + _getRandomSuffix();
                    nextInteractionHtml = nextInteractionHtml + _getRandomSuffix();
                    nextCard = StateCardObjectFactory.createNewCard(true, questionHtml, nextInteractionHtml, _getNextStateData().interaction, _getNextStateData().recordedVoiceovers, _getNextStateData().content.getContentId());
                }
                successCallback(nextCard, refreshInteraction, feedbackHtml, feedbackAudioTranslations, null, null, onSameCard, taggedSkillMisconceptionId, null, null, isFinalQuestion, _nextFocusLabel);
                return answerIsCorrect;
            },
            isAnswerBeingProcessed: function () {
                return answerIsBeingProcessed;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/refresher-exploration-confirmation-modal.service.ts":
/*!****************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/refresher-exploration-confirmation-modal.service.ts ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for managing the redirection to a refresher
 * exploration.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('oppia').factory('RefresherExplorationConfirmationModalService', [
    '$uibModal', 'ExplorationEngineService', 'UrlInterpolationService',
    'UrlService',
    function ($uibModal, ExplorationEngineService, UrlInterpolationService, UrlService) {
        return {
            displayRedirectConfirmationModal: function (refresherExplorationId, redirectConfirmationCallback) {
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
                        'refresher-exploration-confirmation-modal.template.html'),
                    backdrop: 'static',
                    controller: [
                        '$scope', '$uibModalInstance', '$window', '$timeout',
                        function ($scope, $uibModalInstance, $window, $timeout) {
                            $scope.confirmRedirect = function () {
                                redirectConfirmationCallback();
                                var collectionId = UrlService.getUrlParams().collection_id;
                                var parentIdList = UrlService.getQueryFieldValuesAsList('parent');
                                var EXPLORATION_URL_TEMPLATE = '/explore/<exploration_id>';
                                var url = UrlInterpolationService.interpolateUrl(EXPLORATION_URL_TEMPLATE, {
                                    exploration_id: refresherExplorationId
                                });
                                if (collectionId) {
                                    url = UrlService.addField(url, 'collection_id', collectionId);
                                }
                                for (var i = 0; i < parentIdList.length; i++) {
                                    url = UrlService.addField(url, 'parent', parentIdList[i]);
                                }
                                url = UrlService.addField(url, 'parent', ExplorationEngineService.getExplorationId());
                                // Wait a little before redirecting the page to ensure other
                                // tasks started here (e.g. event recording) have sufficient
                                // time to complete.
                                // TODO(bhenning): Find a reliable way to send events that
                                // does not get interrupted with browser redirection.
                                $timeout(function () {
                                    $window.open(url, '_self');
                                }, 150);
                                // Close the dialog to ensure the confirmation cannot be
                                // called multiple times.
                                $uibModalInstance.close();
                            };
                            $scope.cancelRedirect = function () {
                                $uibModalInstance.dismiss('cancel');
                            };
                        }
                    ]
                });
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/state-classifier-mapping.service.ts":
/*!************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/state-classifier-mapping.service.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Services for mapping state names to classifier details.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var ClassifierObjectFactory_1 = __webpack_require__(/*! domain/classifier/ClassifierObjectFactory */ "./core/templates/dev/head/domain/classifier/ClassifierObjectFactory.ts");
var StateClassifierMappingService = /** @class */ (function () {
    function StateClassifierMappingService(classifierObjectFactory) {
        this.classifierObjectFactory = classifierObjectFactory;
        this.stateClassifierMapping = null;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'backendStateClassifierMapping' is a dict with
    // underscore_cased keys which give tslint errors against underscore_casing in
    // favor of camelCasing.
    StateClassifierMappingService.prototype.init = function (backendStateClassifierMapping) {
        this.stateClassifierMapping = {};
        var algorithmId, classifierData, dataSchemaVersion;
        for (var stateName in backendStateClassifierMapping) {
            if (backendStateClassifierMapping.hasOwnProperty(stateName)) {
                algorithmId = backendStateClassifierMapping[stateName].algorithm_id;
                classifierData = backendStateClassifierMapping[stateName].classifier_data;
                dataSchemaVersion = backendStateClassifierMapping[stateName].data_schema_version;
                this.stateClassifierMapping[stateName] =
                    this.classifierObjectFactory.create(algorithmId, classifierData, dataSchemaVersion);
            }
        }
    };
    StateClassifierMappingService.prototype.getClassifier = function (stateName) {
        if (this.stateClassifierMapping &&
            this.stateClassifierMapping.hasOwnProperty(stateName)) {
            return this.stateClassifierMapping[stateName];
        }
        else {
            return null;
        }
    };
    var _a;
    StateClassifierMappingService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof ClassifierObjectFactory_1.ClassifierObjectFactory !== "undefined" && ClassifierObjectFactory_1.ClassifierObjectFactory) === "function" ? _a : Object])
    ], StateClassifierMappingService);
    return StateClassifierMappingService;
}());
exports.StateClassifierMappingService = StateClassifierMappingService;
angular.module('oppia').factory('StateClassifierMappingService', static_1.downgradeInjectable(StateClassifierMappingService));


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/services/stats-reporting.service.ts":
/*!***************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/services/stats-reporting.service.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Services for stats reporting.
 */
__webpack_require__(/*! domain/utilities/StopwatchObjectFactory.ts */ "./core/templates/dev/head/domain/utilities/StopwatchObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/answer-classification.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/answer-classification.service.ts");
__webpack_require__(/*! services/ContextService.ts */ "./core/templates/dev/head/services/ContextService.ts");
__webpack_require__(/*! services/MessengerService.ts */ "./core/templates/dev/head/services/MessengerService.ts");
__webpack_require__(/*! services/PlaythroughService.ts */ "./core/templates/dev/head/services/PlaythroughService.ts");
__webpack_require__(/*! services/SiteAnalyticsService.ts */ "./core/templates/dev/head/services/SiteAnalyticsService.ts");
__webpack_require__(/*! pages/exploration-player-page/exploration-player-page.constants.ajs.ts */ "./core/templates/dev/head/pages/exploration-player-page/exploration-player-page.constants.ajs.ts");
angular.module('oppia').factory('StatsReportingService', [
    '$http', '$interval', 'ContextService', 'MessengerService',
    'PlaythroughService', 'SiteAnalyticsService', 'StopwatchObjectFactory',
    'UrlInterpolationService', 'STATS_REPORTING_URLS',
    function ($http, $interval, ContextService, MessengerService, PlaythroughService, SiteAnalyticsService, StopwatchObjectFactory, UrlInterpolationService, STATS_REPORTING_URLS) {
        var explorationId = null;
        var explorationTitle = null;
        var explorationVersion = null;
        var sessionId = null;
        var stateStopwatch = null;
        var optionalCollectionId = undefined;
        var statesVisited = {};
        var numStatesVisited = 0;
        var explorationStarted = false;
        var explorationActuallyStarted = false;
        var explorationIsComplete = false;
        var currentStateName = null;
        var nextExpId = null;
        var previousStateName = null;
        var nextStateName = null;
        var _editorPreviewMode = ContextService.isInExplorationEditorPage();
        var _questionPlayerMode = ContextService.isInQuestionPlayerMode();
        // The following dict will contain all stats data accumulated over the
        // interval time and will be reset when the dict is sent to backend for
        // recording.
        var aggregatedStats = {
            num_starts: null,
            num_completions: null,
            num_actual_starts: null,
            state_stats_mapping: null
        };
        var refreshAggregatedStats = function () {
            aggregatedStats = {
                num_starts: 0,
                num_completions: 0,
                num_actual_starts: 0,
                state_stats_mapping: {}
            };
        };
        var createDefaultStateStatsMapping = function (stateName) {
            aggregatedStats.state_stats_mapping[stateName] = {
                total_answers_count: 0,
                useful_feedback_count: 0,
                total_hit_count: 0,
                first_hit_count: 0,
                num_times_solution_viewed: 0,
                num_completions: 0
            };
        };
        var getFullStatsUrl = function (urlIdentifier) {
            try {
                return UrlInterpolationService.interpolateUrl(STATS_REPORTING_URLS[urlIdentifier], {
                    exploration_id: explorationId
                });
            }
            catch (e) {
                var additionalInfo = ('\nUndefined exploration id error debug logs:' +
                    '\nThe event being recorded: ' + urlIdentifier +
                    '\nExploration ID: ' + ContextService.getExplorationId());
                if (currentStateName) {
                    additionalInfo += ('\nCurrent State name: ' + currentStateName);
                }
                if (nextExpId) {
                    additionalInfo += ('\nRefresher exp id: ' + nextExpId);
                }
                if (previousStateName && nextStateName) {
                    additionalInfo += ('\nOld State name: ' + previousStateName +
                        '\nNew State name: ' + nextStateName);
                }
                e.message += additionalInfo;
                throw e;
            }
        };
        if (!_editorPreviewMode && !_questionPlayerMode) {
            $interval(function () {
                postStatsToBackend();
            }, 300000);
        }
        // This method is called whenever a learner tries to leave an exploration,
        // when a learner starts an exploration, when a learner completes an
        // exploration and also every five minutes.
        var postStatsToBackend = function () {
            if (explorationIsComplete) {
                return;
            }
            $http.post(getFullStatsUrl('STATS_EVENTS'), {
                aggregated_stats: aggregatedStats,
                exp_version: explorationVersion
            });
            refreshAggregatedStats();
        };
        return {
            initSession: function (newExplorationId, newExplorationTitle, newExplorationVersion, newSessionId, collectionId) {
                explorationId = newExplorationId;
                explorationTitle = newExplorationTitle;
                explorationVersion = newExplorationVersion;
                sessionId = newSessionId;
                stateStopwatch = StopwatchObjectFactory.create();
                optionalCollectionId = collectionId;
                refreshAggregatedStats();
            },
            // Note that this also resets the stateStopwatch.
            recordExplorationStarted: function (stateName, params) {
                if (explorationStarted) {
                    return;
                }
                aggregatedStats.num_starts += 1;
                createDefaultStateStatsMapping(stateName);
                aggregatedStats.state_stats_mapping[stateName].total_hit_count += 1;
                aggregatedStats.state_stats_mapping[stateName].first_hit_count += 1;
                postStatsToBackend();
                currentStateName = stateName;
                $http.post(getFullStatsUrl('EXPLORATION_STARTED'), {
                    params: params,
                    session_id: sessionId,
                    state_name: stateName,
                    version: explorationVersion
                });
                $http.post(getFullStatsUrl('STATE_HIT'), {
                    client_time_spent_in_secs: 0.0,
                    exploration_version: explorationVersion,
                    new_state_name: stateName,
                    old_params: params,
                    session_id: sessionId,
                });
                MessengerService.sendMessage(MessengerService.EXPLORATION_LOADED, {
                    explorationVersion: explorationVersion,
                    explorationTitle: explorationTitle
                });
                statesVisited[stateName] = true;
                numStatesVisited = 1;
                SiteAnalyticsService.registerNewCard(1);
                stateStopwatch.reset();
                explorationStarted = true;
            },
            recordExplorationActuallyStarted: function (stateName) {
                if (explorationActuallyStarted) {
                    return;
                }
                aggregatedStats.num_actual_starts += 1;
                currentStateName = stateName;
                $http.post(getFullStatsUrl('EXPLORATION_ACTUALLY_STARTED'), {
                    exploration_version: explorationVersion,
                    state_name: stateName,
                    session_id: sessionId
                });
                PlaythroughService.recordExplorationStartAction(stateName);
                explorationActuallyStarted = true;
            },
            recordSolutionHit: function (stateName) {
                if (!aggregatedStats.state_stats_mapping.hasOwnProperty(stateName)) {
                    createDefaultStateStatsMapping(stateName);
                }
                aggregatedStats.state_stats_mapping[stateName].num_times_solution_viewed += 1;
                currentStateName = stateName;
                $http.post(getFullStatsUrl('SOLUTION_HIT'), {
                    exploration_version: explorationVersion,
                    state_name: stateName,
                    session_id: sessionId,
                    time_spent_in_state_secs: stateStopwatch.getTimeInSecs()
                });
            },
            recordLeaveForRefresherExp: function (stateName, refresherExpId) {
                currentStateName = stateName;
                nextExpId = refresherExpId;
                $http.post(getFullStatsUrl('LEAVE_FOR_REFRESHER_EXP'), {
                    exploration_version: explorationVersion,
                    refresher_exp_id: refresherExpId,
                    state_name: stateName,
                    session_id: sessionId,
                    time_spent_in_state_secs: stateStopwatch.getTimeInSecs()
                });
            },
            // Note that this also resets the stateStopwatch.
            recordStateTransition: function (oldStateName, newStateName, answer, oldParams, isFirstHit) {
                if (!aggregatedStats.state_stats_mapping.hasOwnProperty(newStateName)) {
                    createDefaultStateStatsMapping(newStateName);
                }
                aggregatedStats.state_stats_mapping[newStateName].total_hit_count += 1;
                if (isFirstHit) {
                    aggregatedStats.state_stats_mapping[newStateName].first_hit_count += 1;
                }
                previousStateName = oldStateName;
                nextStateName = newStateName;
                $http.post(getFullStatsUrl('STATE_HIT'), {
                    // This is the time spent since the last submission.
                    client_time_spent_in_secs: stateStopwatch.getTimeInSecs(),
                    exploration_version: explorationVersion,
                    new_state_name: newStateName,
                    old_params: oldParams,
                    session_id: sessionId,
                });
                // Broadcast information about the state transition to listeners.
                MessengerService.sendMessage(MessengerService.STATE_TRANSITION, {
                    explorationVersion: explorationVersion,
                    jsonAnswer: JSON.stringify(answer),
                    newStateName: newStateName,
                    oldStateName: oldStateName,
                    paramValues: oldParams
                });
                if (!statesVisited.hasOwnProperty(newStateName)) {
                    statesVisited[newStateName] = true;
                    numStatesVisited++;
                    SiteAnalyticsService.registerNewCard(numStatesVisited);
                }
                stateStopwatch.reset();
            },
            recordStateCompleted: function (stateName) {
                if (!aggregatedStats.state_stats_mapping.hasOwnProperty(stateName)) {
                    createDefaultStateStatsMapping(stateName);
                }
                aggregatedStats.state_stats_mapping[stateName].num_completions += 1;
                currentStateName = stateName;
                $http.post(getFullStatsUrl('STATE_COMPLETED'), {
                    exp_version: explorationVersion,
                    state_name: stateName,
                    session_id: sessionId,
                    time_spent_in_state_secs: stateStopwatch.getTimeInSecs()
                });
            },
            recordExplorationCompleted: function (stateName, params) {
                aggregatedStats.num_completions += 1;
                currentStateName = stateName;
                $http.post(getFullStatsUrl('EXPLORATION_COMPLETED'), {
                    client_time_spent_in_secs: stateStopwatch.getTimeInSecs(),
                    collection_id: optionalCollectionId,
                    params: params,
                    session_id: sessionId,
                    state_name: stateName,
                    version: explorationVersion
                });
                MessengerService.sendMessage(MessengerService.EXPLORATION_COMPLETED, {
                    explorationVersion: explorationVersion,
                    paramValues: params
                });
                SiteAnalyticsService.registerFinishExploration();
                postStatsToBackend();
                PlaythroughService.recordExplorationQuitAction(stateName, stateStopwatch.getTimeInSecs());
                PlaythroughService.recordPlaythrough(true);
                explorationIsComplete = true;
            },
            recordAnswerSubmitted: function (stateName, params, answer, answerGroupIndex, ruleIndex, classificationCategorization, feedbackIsUseful) {
                if (!aggregatedStats.state_stats_mapping.hasOwnProperty(stateName)) {
                    createDefaultStateStatsMapping(stateName);
                }
                aggregatedStats.state_stats_mapping[stateName].total_answers_count += 1;
                if (feedbackIsUseful) {
                    aggregatedStats.state_stats_mapping[stateName].useful_feedback_count += 1;
                }
                currentStateName = stateName;
                $http.post(getFullStatsUrl('ANSWER_SUBMITTED'), {
                    answer: answer,
                    params: params,
                    version: explorationVersion,
                    session_id: sessionId,
                    client_time_spent_in_secs: stateStopwatch.getTimeInSecs(),
                    old_state_name: stateName,
                    answer_group_index: answerGroupIndex,
                    rule_spec_index: ruleIndex,
                    classification_categorization: classificationCategorization
                });
            },
            recordMaybeLeaveEvent: function (stateName, params) {
                currentStateName = stateName;
                $http.post(getFullStatsUrl('EXPLORATION_MAYBE_LEFT'), {
                    client_time_spent_in_secs: stateStopwatch.getTimeInSecs(),
                    collection_id: optionalCollectionId,
                    params: params,
                    session_id: sessionId,
                    state_name: stateName,
                    version: explorationVersion
                });
                postStatsToBackend();
                PlaythroughService.recordExplorationQuitAction(stateName, stateStopwatch.getTimeInSecs());
                PlaythroughService.recordPlaythrough();
            },
            recordAnswerSubmitAction: function (stateName, destStateName, interactionId, answer, feedback) {
                PlaythroughService.recordAnswerSubmitAction(stateName, destStateName, interactionId, answer, feedback, stateStopwatch.getTimeInSecs());
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/exploration-player-page/suggestion-modal-for-learner-local-view/suggestion-modal-for-exploration-player.service.ts":
/*!**********************************************************************************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/exploration-player-page/suggestion-modal-for-learner-local-view/suggestion-modal-for-exploration-player.service.ts ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to display suggestion modal in learner local view.
 */
__webpack_require__(/*! components/ck-editor-helpers/ck-editor-4-rte.directive.ts */ "./core/templates/dev/head/components/ck-editor-helpers/ck-editor-4-rte.directive.ts");
__webpack_require__(/*! components/ck-editor-helpers/ck-editor-4-widgets.initializer.ts */ "./core/templates/dev/head/components/ck-editor-helpers/ck-editor-4-widgets.initializer.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/exploration-engine.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/exploration-engine.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-position.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-position.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/player-transcript.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/player-transcript.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/SuggestionModalService.ts */ "./core/templates/dev/head/services/SuggestionModalService.ts");
angular.module('oppia').factory('SuggestionModalForExplorationPlayerService', [
    '$http', '$uibModal', 'AlertsService', 'UrlInterpolationService',
    function ($http, $uibModal, AlertsService, UrlInterpolationService) {
        var _templateUrl = UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
            'exploration-player-suggestion-modal.directive.html');
        var _showEditStateContentSuggestionModal = function () {
            $uibModal.open({
                templateUrl: _templateUrl,
                backdrop: 'static',
                resolve: {},
                controller: [
                    '$scope', '$timeout', '$uibModalInstance', 'ExplorationEngineService',
                    'PlayerPositionService', 'PlayerTranscriptService',
                    'SuggestionModalService',
                    function ($scope, $timeout, $uibModalInstance, ExplorationEngineService, PlayerPositionService, PlayerTranscriptService, SuggestionModalService) {
                        var stateName = PlayerPositionService.getCurrentStateName();
                        var displayedCard = PlayerTranscriptService.getCard(PlayerPositionService.getDisplayedCardIndex());
                        $scope.originalHtml = displayedCard.getContentHtml();
                        $scope.description = '';
                        // ng-model needs to bind to a property of an object on
                        // the scope (the property cannot sit directly on the scope)
                        // Reference https://stackoverflow.com/q/12618342
                        $scope.suggestionData = { suggestionHtml: $scope.originalHtml };
                        $scope.showEditor = false;
                        // Rte initially displays content unrendered for a split second
                        $timeout(function () {
                            $scope.showEditor = true;
                        }, 500);
                        $scope.cancelSuggestion = function () {
                            SuggestionModalService.cancelSuggestion($uibModalInstance);
                        };
                        $scope.submitSuggestion = function () {
                            var data = {
                                target_id: ExplorationEngineService.getExplorationId(),
                                version: ExplorationEngineService.getExplorationVersion(),
                                stateName: stateName,
                                suggestion_type: 'edit_exploration_state_content',
                                target_type: 'exploration',
                                description: $scope.description,
                                suggestionHtml: $scope.suggestionData.suggestionHtml,
                            };
                            $uibModalInstance.close(data);
                        };
                    }
                ],
            }).result.then(function (result) {
                var data = {
                    suggestion_type: result.suggestion_type,
                    target_type: result.target_type,
                    target_id: result.target_id,
                    target_version_at_submission: result.version,
                    assigned_reviewer_id: null,
                    final_reviewer_id: null,
                    description: result.description,
                    change: {
                        cmd: 'edit_state_property',
                        property_name: 'content',
                        state_name: result.stateName,
                        new_value: {
                            html: result.suggestionHtml
                        }
                    }
                };
                var url = '/suggestionhandler/';
                $http.post(url, data).error(function (res) {
                    AlertsService.addWarning(res);
                });
                $uibModal.open({
                    templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-player-page/templates/' +
                        'learner-suggestion-submitted-modal.template.html'),
                    backdrop: true,
                    resolve: {},
                    controller: [
                        '$scope', '$uibModalInstance',
                        function ($scope, $uibModalInstance) {
                            $scope.close = function () {
                                $uibModalInstance.dismiss();
                            };
                        }
                    ]
                });
            });
        };
        return {
            showSuggestionModal: function (suggestionType, extraParams) {
                if (suggestionType === 'edit_exploration_state_content') {
                    _showEditStateContentSuggestionModal();
                }
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts":
/*!**************************************************************************!*\
  !*** ./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Constant file for the INTERACTION_SPECS constant.
 */
var INTERACTION_SPECS = __webpack_require__(/*! interactions/interaction_specs.json */ "./extensions/interactions/interaction_specs.json");
angular.module('oppia').constant('INTERACTION_SPECS', INTERACTION_SPECS);


/***/ }),

/***/ "./core/templates/dev/head/pages/review-test-page/review-test-engine.service.ts":
/*!**************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/review-test-page/review-test-engine.service.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Utility service for the review tests.
 */
angular.module('oppia').factory('ReviewTestEngineService', [
    function () {
        return {
            getReviewTestQuestionCount: function (numOfSkills) {
                // numOfSkills should be a non-negative integer.
                if (numOfSkills < 0) {
                    return 0;
                }
                else if (numOfSkills < 6) {
                    return numOfSkills * 3;
                }
                else if (numOfSkills < 10) {
                    return numOfSkills * 2;
                }
                else {
                    return numOfSkills;
                }
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/review-test-page/review-test-page.constants.ajs.ts":
/*!******************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/review-test-page/review-test-page.constants.ajs.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for the review tests.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var review_test_page_constants_1 = __webpack_require__(/*! pages/review-test-page/review-test-page.constants */ "./core/templates/dev/head/pages/review-test-page/review-test-page.constants.ts");
angular.module('oppia').constant('REVIEW_TEST_DATA_URL', review_test_page_constants_1.ReviewTestPageConstants.REVIEW_TEST_DATA_URL);
angular.module('oppia').constant('REVIEW_TESTS_URL', review_test_page_constants_1.ReviewTestPageConstants.REVIEW_TESTS_URL);
angular.module('oppia').constant('STORY_VIEWER_PAGE', review_test_page_constants_1.ReviewTestPageConstants.STORY_VIEWER_PAGE);


/***/ }),

/***/ "./core/templates/dev/head/pages/review-test-page/review-test-page.constants.ts":
/*!**************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/review-test-page/review-test-page.constants.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for the review tests.
 */
var ReviewTestPageConstants = /** @class */ (function () {
    function ReviewTestPageConstants() {
    }
    ReviewTestPageConstants.REVIEW_TEST_DATA_URL = '/review_test_handler/data/<story_id>';
    ReviewTestPageConstants.REVIEW_TESTS_URL = '/review_test/<story_id>';
    ReviewTestPageConstants.STORY_VIEWER_PAGE = '/story/<story_id>';
    return ReviewTestPageConstants;
}());
exports.ReviewTestPageConstants = ReviewTestPageConstants;


/***/ }),

/***/ "./core/templates/dev/head/pages/review-test-page/review-test-page.directive.ts":
/*!**************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/review-test-page/review-test-page.directive.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the review tests page.
 */
__webpack_require__(/*! components/common-layout-directives/common-elements/background-banner.directive.ts */ "./core/templates/dev/head/components/common-layout-directives/common-elements/background-banner.directive.ts");
__webpack_require__(/*! components/question-directives/question-player/question-player.directive.ts */ "./core/templates/dev/head/components/question-directives/question-player/question-player.directive.ts");
__webpack_require__(/*! interactions/interactionsQuestionsRequires.ts */ "./extensions/interactions/interactionsQuestionsRequires.ts");
__webpack_require__(/*! objects/objectComponentsRequiresForPlayers.ts */ "./extensions/objects/objectComponentsRequiresForPlayers.ts");
__webpack_require__(/*! pages/interaction-specs.constants.ajs.ts */ "./core/templates/dev/head/pages/interaction-specs.constants.ajs.ts");
__webpack_require__(/*! pages/review-test-page/review-test-page.constants.ajs.ts */ "./core/templates/dev/head/pages/review-test-page/review-test-page.constants.ajs.ts");
__webpack_require__(/*! pages/review-test-page/review-test-engine.service.ts */ "./core/templates/dev/head/pages/review-test-page/review-test-engine.service.ts");
__webpack_require__(/*! services/AlertsService.ts */ "./core/templates/dev/head/services/AlertsService.ts");
__webpack_require__(/*! services/PageTitleService.ts */ "./core/templates/dev/head/services/PageTitleService.ts");
__webpack_require__(/*! services/contextual/UrlService.ts */ "./core/templates/dev/head/services/contextual/UrlService.ts");
angular.module('oppia').directive('reviewTestPage', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/review-test-page/review-test-page.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$http', '$rootScope', 'AlertsService', 'PageTitleService',
                'ReviewTestEngineService', 'UrlInterpolationService', 'UrlService',
                'FATAL_ERROR_CODES', 'QUESTION_PLAYER_MODE', 'REVIEW_TEST_DATA_URL',
                'REVIEW_TESTS_URL', 'STORY_VIEWER_PAGE',
                function ($http, $rootScope, AlertsService, PageTitleService, ReviewTestEngineService, UrlInterpolationService, UrlService, FATAL_ERROR_CODES, QUESTION_PLAYER_MODE, REVIEW_TEST_DATA_URL, REVIEW_TESTS_URL, STORY_VIEWER_PAGE) {
                    var ctrl = this;
                    ctrl.storyId = UrlService.getStoryIdFromUrl();
                    ctrl.questionPlayerConfig = null;
                    var _fetchSkillDetails = function () {
                        var reviewTestsDataUrl = UrlInterpolationService.interpolateUrl(REVIEW_TEST_DATA_URL, {
                            story_id: ctrl.storyId
                        });
                        var reviewTestsUrl = UrlInterpolationService.interpolateUrl(REVIEW_TESTS_URL, {
                            story_id: ctrl.storyId
                        });
                        var storyViewerUrl = UrlInterpolationService.interpolateUrl(STORY_VIEWER_PAGE, {
                            story_id: ctrl.storyId
                        });
                        $http.get(reviewTestsDataUrl).then(function (result) {
                            var skillIdList = [];
                            var skillDescriptions = [];
                            PageTitleService.setPageTitle('Review Test: ' + result.data.story_name + ' - Oppia');
                            for (var skillId in result.data.skill_descriptions) {
                                skillIdList.push(skillId);
                                skillDescriptions.push(result.data.skill_descriptions[skillId]);
                            }
                            var questionPlayerConfig = {
                                resultActionButtons: [
                                    {
                                        type: 'BOOST_SCORE',
                                        i18nId: 'I18N_QUESTION_PLAYER_BOOST_SCORE'
                                    },
                                    {
                                        type: 'RETRY_SESSION',
                                        i18nId: 'I18N_QUESTION_PLAYER_RETRY_TEST',
                                        url: reviewTestsUrl
                                    },
                                    {
                                        type: 'DASHBOARD',
                                        i18nId: 'I18N_QUESTION_PLAYER_RETURN_TO_STORY',
                                        url: storyViewerUrl
                                    }
                                ],
                                skillList: skillIdList,
                                skillDescriptions: skillDescriptions,
                                questionCount: ReviewTestEngineService
                                    .getReviewTestQuestionCount(skillIdList.length),
                                questionPlayerMode: {
                                    modeType: QUESTION_PLAYER_MODE.PASS_FAIL_MODE,
                                    passCutoff: 0.75
                                },
                                questionsSortedByDifficulty: true
                            };
                            ctrl.questionPlayerConfig = questionPlayerConfig;
                        });
                    };
                    _fetchSkillDetails();
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/pages/review-test-page/review-test-page.module.ts":
/*!***********************************************************************************!*\
  !*** ./core/templates/dev/head/pages/review-test-page/review-test-page.module.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Module for the review tests page.
 */
__webpack_require__(/*! core-js/es7/reflect */ "./node_modules/core-js/es7/reflect.js");
__webpack_require__(/*! zone.js */ "./node_modules/zone.js/dist/zone.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var platform_browser_1 = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var http_1 = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
// This component is needed to force-bootstrap Angular at the beginning of the
// app.
var ServiceBootstrapComponent = /** @class */ (function () {
    function ServiceBootstrapComponent() {
    }
    ServiceBootstrapComponent = __decorate([
        core_1.Component({
            selector: 'service-bootstrap',
            template: ''
        })
    ], ServiceBootstrapComponent);
    return ServiceBootstrapComponent;
}());
exports.ServiceBootstrapComponent = ServiceBootstrapComponent;
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var interactions_extension_constants_1 = __webpack_require__(/*! interactions/interactions-extension.constants */ "./extensions/interactions/interactions-extension.constants.ts");
var objects_domain_constants_1 = __webpack_require__(/*! domain/objects/objects-domain.constants */ "./core/templates/dev/head/domain/objects/objects-domain.constants.ts");
var question_player_constants_1 = __webpack_require__(/*! components/question-directives/question-player/question-player.constants */ "./core/templates/dev/head/components/question-directives/question-player/question-player.constants.ts");
var services_constants_1 = __webpack_require__(/*! services/services.constants */ "./core/templates/dev/head/services/services.constants.ts");
var review_test_page_constants_1 = __webpack_require__(/*! pages/review-test-page/review-test-page.constants */ "./core/templates/dev/head/pages/review-test-page/review-test-page.constants.ts");
var ReviewTestPageModule = /** @class */ (function () {
    function ReviewTestPageModule() {
    }
    // Empty placeholder method to satisfy the `Compiler`.
    ReviewTestPageModule.prototype.ngDoBootstrap = function () { };
    ReviewTestPageModule = __decorate([
        core_1.NgModule({
            imports: [
                platform_browser_1.BrowserModule,
                http_1.HttpClientModule
            ],
            declarations: [
                ServiceBootstrapComponent
            ],
            entryComponents: [
                ServiceBootstrapComponent
            ],
            providers: [
                app_constants_1.AppConstants,
                interactions_extension_constants_1.InteractionsExtensionsConstants,
                objects_domain_constants_1.ObjectsDomainConstants,
                question_player_constants_1.QuestionPlayerConstants,
                services_constants_1.ServicesConstants,
                review_test_page_constants_1.ReviewTestPageConstants
            ]
        })
    ], ReviewTestPageModule);
    return ReviewTestPageModule;
}());
var platform_browser_dynamic_1 = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
var static_2 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var bootstrapFn = function (extraProviders) {
    var platformRef = platform_browser_dynamic_1.platformBrowserDynamic(extraProviders);
    return platformRef.bootstrapModule(ReviewTestPageModule);
};
var downgradedModule = static_2.downgradeModule(bootstrapFn);
angular.module('oppia', [
    'dndLists', 'headroom', 'infinite-scroll', 'ngAnimate',
    'ngAudio', 'ngCookies', 'ngImgCrop', 'ngJoyRide', 'ngMaterial',
    'ngResource', 'ngSanitize', 'ngTouch', 'pascalprecht.translate',
    'toastr', 'ui.bootstrap', 'ui.sortable', 'ui.tree', 'ui.validate',
    downgradedModule
])
    // This directive is the downgraded version of the Angular component to
    // bootstrap the Angular 8.
    .directive('serviceBootstrap', static_1.downgradeComponent({
    component: ServiceBootstrapComponent
}));


/***/ }),

/***/ "./core/templates/dev/head/pages/review-test-page/review-test-page.scripts.ts":
/*!************************************************************************************!*\
  !*** ./core/templates/dev/head/pages/review-test-page/review-test-page.scripts.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Scripts for the review tests.
 */
// The module needs to be loaded before everything else since it defines the
// main module the elements are attached to.
__webpack_require__(/*! pages/review-test-page/review-test-page.module.ts */ "./core/templates/dev/head/pages/review-test-page/review-test-page.module.ts");
__webpack_require__(/*! App.ts */ "./core/templates/dev/head/App.ts");
__webpack_require__(/*! base_components/BaseContentDirective.ts */ "./core/templates/dev/head/base_components/BaseContentDirective.ts");
__webpack_require__(/*! pages/review-test-page/review-test-page.directive.ts */ "./core/templates/dev/head/pages/review-test-page/review-test-page.directive.ts");


/***/ }),

/***/ "./core/templates/dev/head/services/AudioPlayerService.ts":
/*!****************************************************************!*\
  !*** ./core/templates/dev/head/services/AudioPlayerService.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service to operate the playback of audio.
 */
angular.module('oppia').factory('AudioPlayerService', [
    '$q', '$timeout', 'AssetsBackendApiService', 'AudioTranslationManagerService',
    'ContextService', 'ngAudio',
    function ($q, $timeout, AssetsBackendApiService, AudioTranslationManagerService, ContextService, ngAudio) {
        var _currentTrackFilename = null;
        var _currentTrack = null;
        var _currentTrackDuration = null;
        var _load = function (filename, successCallback, errorCallback) {
            if (filename !== _currentTrackFilename) {
                AssetsBackendApiService.loadAudio(ContextService.getExplorationId(), filename)
                    .then(function (loadedAudiofile) {
                    var blobUrl = URL.createObjectURL(loadedAudiofile.data);
                    _currentTrack = ngAudio.load(blobUrl);
                    _currentTrackFilename = filename;
                    // ngAudio doesn't seem to provide any way of detecting
                    // when native audio object has finished loading -- see
                    // https://github.com/danielstern/ngAudio/issues/139. It seems
                    // that after creating an ngAudio object, the native audio
                    // object is asynchronously loaded. So we use a timeout
                    // to grab native audio.
                    // TODO(tjiang11): Look for a better way to handle this.
                    $timeout(function () {
                        // _currentTrack could be null if the learner stops audio
                        // shortly after loading a new card or language. In such
                        // cases, we do not want to attempt setting the 'onended'
                        // property of the audio.
                        if (_currentTrack !== null) {
                            _currentTrack.audio.onended = function () {
                                _currentTrack = null;
                                _currentTrackFilename = null;
                                AudioTranslationManagerService
                                    .clearSecondaryAudioTranslations();
                            };
                        }
                    }, 100);
                    successCallback();
                }, function (reason) {
                    errorCallback(reason);
                });
            }
        };
        var _play = function () {
            if (_currentTrack) {
                _currentTrack.play();
            }
        };
        var _pause = function () {
            if (_currentTrack) {
                _currentTrack.pause();
            }
        };
        var _stop = function () {
            if (_currentTrack) {
                _currentTrack.stop();
                _currentTrackFilename = null;
                _currentTrack = null;
            }
        };
        var _rewind = function (seconds) {
            if (_currentTrack) {
                var currentSeconds = _currentTrack.progress * _currentTrack.duration;
                var rewindedProgress = (currentSeconds - seconds) / _currentTrack.duration;
                _currentTrack.progress = rewindedProgress;
            }
        };
        return {
            load: function (filename) {
                return $q(function (resolve, reject) {
                    _load(filename, resolve, reject);
                });
            },
            play: function () {
                _play();
            },
            pause: function () {
                _pause();
            },
            stop: function () {
                _stop();
            },
            rewind: function (seconds) {
                _rewind(seconds);
            },
            getCurrentTime: function () {
                if (_currentTrack) {
                    return Math.round(_currentTrack.currentTime);
                }
                else {
                    return 0;
                }
            },
            getAudioDuration: function () {
                if (_currentTrack && _currentTrack.audio) {
                    return Math.round(_currentTrack.audio.duration);
                }
                else {
                    return 0;
                }
            },
            getProgress: function () {
                if (!_currentTrack) {
                    return 0;
                }
                return _currentTrack.progress;
            },
            setProgress: function (progress) {
                if (_currentTrack) {
                    _currentTrack.progress = progress;
                }
            },
            isPlaying: function () {
                return Boolean(_currentTrack && !_currentTrack.paused);
            },
            isTrackLoaded: function () {
                return Boolean(_currentTrack);
            },
            clear: function () {
                _currentTrack = null;
                _currentTrackFilename = null;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/AutogeneratedAudioPlayerService.ts":
/*!*****************************************************************************!*\
  !*** ./core/templates/dev/head/services/AutogeneratedAudioPlayerService.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service to operate the playback of autogenerated audio
 * using the SpeechSynthesis API.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var SpeechSynthesisChunkerService_1 = __webpack_require__(/*! services/SpeechSynthesisChunkerService */ "./core/templates/dev/head/services/SpeechSynthesisChunkerService.ts");
var AutogeneratedAudioPlayerService = /** @class */ (function () {
    function AutogeneratedAudioPlayerService(speechSynthesisChunkerService) {
        this.speechSynthesisChunkerService = speechSynthesisChunkerService;
        this.DEFAULT_PLAYBACK_RATE = 0.92;
        this.DEFAULT_PLAYBACK_VOLUME = 1;
        // Not all browsers support SpeechSynthesisUtterance, so we need the
        // check to prevent a "SpeechSynthesisUtterance is not defined" error.
        this._speechSynthesis = (window.hasOwnProperty('speechSynthesis')) ? window.speechSynthesis : null;
        this.utterance = (window.hasOwnProperty('speechSynthesis')) ? new SpeechSynthesisUtterance() : null;
    }
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the type of 'html' needs to be determined correctly. The
    // type of the callback needs to be determined too.
    AutogeneratedAudioPlayerService.prototype._play = function (html, language, audioFinishedCallback) {
        this.speechSynthesisChunkerService.cancel();
        var message = this.speechSynthesisChunkerService.convertToSpeakableText(html);
        this.utterance.text = message;
        this.utterance.lang = language;
        this.utterance.rate = this.DEFAULT_PLAYBACK_RATE;
        this.utterance.volume = this.DEFAULT_PLAYBACK_VOLUME;
        this.speechSynthesisChunkerService.speak(this.utterance, function () {
            audioFinishedCallback();
        });
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the type of 'html' needs to be determined correctly. The
    // type of the callback needs to be determined too.
    AutogeneratedAudioPlayerService.prototype.play = function (html, language, audioFinishedCallback) {
        return this._play(html, language, audioFinishedCallback);
    };
    AutogeneratedAudioPlayerService.prototype.cancel = function () {
        this.speechSynthesisChunkerService.cancel();
    };
    AutogeneratedAudioPlayerService.prototype.isPlaying = function () {
        return this._speechSynthesis && this._speechSynthesis.speaking;
    };
    var _a;
    AutogeneratedAudioPlayerService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof SpeechSynthesisChunkerService_1.SpeechSynthesisChunkerService !== "undefined" && SpeechSynthesisChunkerService_1.SpeechSynthesisChunkerService) === "function" ? _a : Object])
    ], AutogeneratedAudioPlayerService);
    return AutogeneratedAudioPlayerService;
}());
exports.AutogeneratedAudioPlayerService = AutogeneratedAudioPlayerService;
angular.module('oppia').factory('AutogeneratedAudioPlayerService', static_1.downgradeInjectable(AutogeneratedAudioPlayerService));


/***/ }),

/***/ "./core/templates/dev/head/services/ExplorationFeaturesBackendApiService.ts":
/*!**********************************************************************************!*\
  !*** ./core/templates/dev/head/services/ExplorationFeaturesBackendApiService.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for fetching the features the exploration editor is
 * configured to support.
 */
__webpack_require__(/*! services/services.constants.ajs.ts */ "./core/templates/dev/head/services/services.constants.ajs.ts");
angular.module('oppia').factory('ExplorationFeaturesBackendApiService', [
    '$http', 'UrlInterpolationService', 'EXPLORATION_FEATURES_URL',
    function ($http, UrlInterpolationService, EXPLORATION_FEATURES_URL) {
        return {
            /**
             * Retrieves data regarding the features the given exploration supports.
             *
             * NOTE: This service requires play-access for the Exploration so that the
             * features can be fetched in both the exploration player and editor.
             *
             * @returns {Object.<string, *>} - Describes the features the given
             *     exploration supports.
             */
            fetchExplorationFeatures: function (explorationId) {
                return $http.get(UrlInterpolationService.interpolateUrl(EXPLORATION_FEATURES_URL, { exploration_id: explorationId })).then(function (response) {
                    return response.data;
                });
            },
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/ExplorationFeaturesService.ts":
/*!************************************************************************!*\
  !*** ./core/templates/dev/head/services/ExplorationFeaturesService.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service for determining the visibility of advanced features in
 *               the exploration editor.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var ExplorationFeaturesService = /** @class */ (function () {
    function ExplorationFeaturesService() {
    }
    ExplorationFeaturesService_1 = ExplorationFeaturesService;
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'explorationData' and 'featuresData' are dicts with
    // underscore_cased keys which give tslint errors against underscore_casing
    // in favor of camelCasing.
    ExplorationFeaturesService.prototype.init = function (explorationData, featuresData) {
        if (ExplorationFeaturesService_1.serviceIsInitialized) {
            return;
        }
        ExplorationFeaturesService_1.settings.isImprovementsTabEnabled =
            featuresData.is_improvements_tab_enabled;
        ExplorationFeaturesService_1.settings.isPlaythroughRecordingEnabled =
            featuresData.is_exploration_whitelisted;
        if (explorationData.param_changes &&
            explorationData.param_changes.length > 0) {
            this.enableParameters();
        }
        else {
            for (var state in explorationData.states) {
                if (explorationData.states[state].param_changes.length > 0) {
                    this.enableParameters();
                    break;
                }
            }
        }
        ExplorationFeaturesService_1.serviceIsInitialized = true;
    };
    ExplorationFeaturesService.prototype.isInitialized = function () {
        return ExplorationFeaturesService_1.serviceIsInitialized;
    };
    ExplorationFeaturesService.prototype.areParametersEnabled = function () {
        return ExplorationFeaturesService_1.settings.areParametersEnabled;
    };
    ExplorationFeaturesService.prototype.isImprovementsTabEnabled = function () {
        return ExplorationFeaturesService_1.settings.isImprovementsTabEnabled;
    };
    ExplorationFeaturesService.prototype.isPlaythroughRecordingEnabled = function () {
        return ExplorationFeaturesService_1.settings.isPlaythroughRecordingEnabled;
    };
    ExplorationFeaturesService.prototype.enableParameters = function () {
        ExplorationFeaturesService_1.settings.areParametersEnabled = true;
    };
    var ExplorationFeaturesService_1;
    ExplorationFeaturesService.serviceIsInitialized = false;
    ExplorationFeaturesService.settings = {
        isImprovementsTabEnabled: false,
        isPlaythroughRecordingEnabled: false,
        areParametersEnabled: false
    };
    ExplorationFeaturesService = ExplorationFeaturesService_1 = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], ExplorationFeaturesService);
    return ExplorationFeaturesService;
}());
exports.ExplorationFeaturesService = ExplorationFeaturesService;
angular.module('oppia').factory('ExplorationFeaturesService', static_1.downgradeInjectable(ExplorationFeaturesService));


/***/ }),

/***/ "./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts":
/*!*****************************************************************************!*\
  !*** ./core/templates/dev/head/services/ExplorationHtmlFormatterService.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Utility services for explorations which may be shared by both
 * the learner and editor views.
 */
__webpack_require__(/*! filters/string-utility-filters/camel-case-to-hyphens.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/camel-case-to-hyphens.filter.ts");
__webpack_require__(/*! services/ExtensionTagAssemblerService.ts */ "./core/templates/dev/head/services/ExtensionTagAssemblerService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
// A service that provides a number of utility functions useful to both the
// editor and player.
angular.module('oppia').factory('ExplorationHtmlFormatterService', [
    '$filter', 'ExtensionTagAssemblerService', 'HtmlEscaperService',
    function ($filter, ExtensionTagAssemblerService, HtmlEscaperService) {
        return {
            /**
             * @param {string} interactionId - The interaction id.
             * @param {object} interactionCustomizationArgSpecs - The various
             *   attributes that the interaction depends on.
             * @param {boolean} parentHasLastAnswerProperty - If this function is
             *   called in the exploration_player view (including the preview mode),
             *   callers should ensure that parentHasLastAnswerProperty is set to
             *   true and $scope.lastAnswer =
             *   PlayerTranscriptService.getLastAnswerOnDisplayedCard(index) is set on
             *   the parent controller of the returned tag.
             *   Otherwise, parentHasLastAnswerProperty should be set to false.
             * @param {string} labelForFocusTarget - The label for setting focus on
             *   the interaction.
             */
            getInteractionHtml: function (interactionId, interactionCustomizationArgSpecs, parentHasLastAnswerProperty, labelForFocusTarget) {
                var htmlInteractionId = $filter('camelCaseToHyphens')(interactionId);
                var element = $('<oppia-interactive-' + htmlInteractionId + '>');
                element = (ExtensionTagAssemblerService.formatCustomizationArgAttrs(element, interactionCustomizationArgSpecs));
                element.attr('last-answer', parentHasLastAnswerProperty ?
                    'lastAnswer' : 'null');
                if (labelForFocusTarget) {
                    element.attr('label-for-focus-target', labelForFocusTarget);
                }
                return element.get(0).outerHTML;
            },
            getAnswerHtml: function (answer, interactionId, interactionCustomizationArgs) {
                // TODO(sll): Get rid of this special case for multiple choice.
                var interactionChoices = null;
                if (interactionCustomizationArgs.choices) {
                    interactionChoices = interactionCustomizationArgs.choices.value;
                }
                var el = $('<oppia-response-' + $filter('camelCaseToHyphens')(interactionId) + '>');
                el.attr('answer', HtmlEscaperService.objToEscapedJson(answer));
                if (interactionChoices) {
                    el.attr('choices', HtmlEscaperService.objToEscapedJson(interactionChoices));
                }
                return ($('<div>').append(el)).html();
            },
            getShortAnswerHtml: function (answer, interactionId, interactionCustomizationArgs) {
                // TODO(sll): Get rid of this special case for multiple choice.
                var interactionChoices = null;
                if (interactionCustomizationArgs.choices) {
                    interactionChoices = interactionCustomizationArgs.choices.value;
                }
                var el = $('<oppia-short-response-' + $filter('camelCaseToHyphens')(interactionId) + '>');
                el.attr('answer', HtmlEscaperService.objToEscapedJson(answer));
                if (interactionChoices) {
                    el.attr('choices', HtmlEscaperService.objToEscapedJson(interactionChoices));
                }
                return ($('<span>').append(el)).html();
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/ExtensionTagAssemblerService.ts":
/*!**************************************************************************!*\
  !*** ./core/templates/dev/head/services/ExtensionTagAssemblerService.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Utility services for explorations which may be shared by both
 * the learner and editor views.
 */
__webpack_require__(/*! filters/string-utility-filters/camel-case-to-hyphens.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/camel-case-to-hyphens.filter.ts");
// Service for assembling extension tags (for interactions).
angular.module('oppia').factory('ExtensionTagAssemblerService', [
    '$filter', 'HtmlEscaperService', function ($filter, HtmlEscaperService) {
        return {
            formatCustomizationArgAttrs: function (element, customizationArgSpecs) {
                for (var caSpecName in customizationArgSpecs) {
                    var caSpecValue = customizationArgSpecs[caSpecName].value;
                    element.attr($filter('camelCaseToHyphens')(caSpecName) + '-with-value', HtmlEscaperService.objToEscapedJson(caSpecValue));
                }
                return element;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/LocalStorageService.ts":
/*!*****************************************************************!*\
  !*** ./core/templates/dev/head/services/LocalStorageService.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Utility service for saving data locally on the client machine.
 */
__webpack_require__(/*! domain/exploration/ExplorationDraftObjectFactory.ts */ "./core/templates/dev/head/domain/exploration/ExplorationDraftObjectFactory.ts");
// Service for saving exploration draft changes to local storage.
//
// Note that the draft is only saved if localStorage exists and works
// (i.e. has storage capacity).
angular.module('oppia').factory('LocalStorageService', [
    'ExplorationDraftObjectFactory',
    function (ExplorationDraftObjectFactory) {
        // Check that local storage exists and works as expected.
        // If it does storage stores the localStorage object,
        // else storage is undefined or false.
        var storage = (function () {
            var test = 'test';
            var result;
            try {
                localStorage.setItem(test, test);
                result = localStorage.getItem(test) === test;
                localStorage.removeItem(test);
                return result && localStorage;
            }
            catch (exception) { }
        }());
        var LAST_SELECTED_TRANSLATION_LANGUAGE_KEY = ('last_selected_translation_lang');
        /**
         * Create the key to access the changeList in localStorage
         * @param {String} explorationId - The exploration id of the changeList
         *   to be accessed.
         */
        var _createExplorationDraftKey = function (explorationId) {
            return 'draft_' + explorationId;
        };
        return {
            /**
             * Check that localStorage is available to the client.
             * @returns {boolean} true iff the client has access to localStorage.
             */
            isStorageAvailable: function () {
                return Boolean(storage);
            },
            /**
             * Save the given changeList to localStorage along with its
             * draftChangeListId
             * @param {String} explorationId - The id of the exploration
             *   associated with the changeList to be saved.
             * @param {List} changeList - The exploration change list to be saved.
             * @param {Integer} draftChangeListId - The id of the draft to be saved.
             */
            saveExplorationDraft: function (explorationId, changeList, draftChangeListId) {
                var localSaveKey = _createExplorationDraftKey(explorationId);
                if (storage) {
                    var draftDict = ExplorationDraftObjectFactory.toLocalStorageDict(changeList, draftChangeListId);
                    storage.setItem(localSaveKey, JSON.stringify(draftDict));
                }
            },
            /**
             * Retrieve the local save of the changeList associated with the given
             * exploration id.
             * @param {String} explorationId - The exploration id of the change list
             *   to be retrieved.
             * @returns {Object} The local save draft object if it exists,
             *   else null.
             */
            getExplorationDraft: function (explorationId) {
                if (storage) {
                    var draftDict = JSON.parse(storage.getItem(_createExplorationDraftKey(explorationId)));
                    if (draftDict) {
                        return ExplorationDraftObjectFactory.createFromLocalStorageDict(draftDict);
                    }
                }
                return null;
            },
            /**
             * Remove the local save of the changeList associated with the given
             * exploration id.
             * @param {String} explorationId - The exploration id of the change list
             *   to be removed.
             */
            removeExplorationDraft: function (explorationId) {
                if (storage) {
                    storage.removeItem(_createExplorationDraftKey(explorationId));
                }
            },
            /**
             * Save the given language code to localStorage along.
             * @param {List} changeList - The last selected language code to be saved.
             */
            updateLastSelectedTranslationLanguageCode: function (languageCode) {
                if (storage) {
                    storage.setItem(LAST_SELECTED_TRANSLATION_LANGUAGE_KEY, languageCode);
                }
            },
            /**
             * Retrieve the local save of the last selected language for translation.
             * @returns {String} The local save of the last selected language for
             *   translation if it exists, else null.
             */
            getLastSelectedTranslationLanguageCode: function () {
                if (storage) {
                    var languageCode = (storage.getItem(LAST_SELECTED_TRANSLATION_LANGUAGE_KEY));
                    return languageCode;
                }
                return null;
            },
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/MessengerService.ts":
/*!**************************************************************!*\
  !*** ./core/templates/dev/head/services/MessengerService.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for sending messages to a parent iframe. All outbound
 * communication with a parent iframe should pass through here. (This
 * communication should be outbound only; reverse communication should NOT
 * be attempted due to cross-domain security issues.)
 */
angular.module('oppia').factory('MessengerService', [
    '$log', '$window', function ($log, $window) {
        var isPositiveInteger = function (n) {
            return (typeof n === 'number' && n % 1 === 0 && n > 0);
        };
        var isBoolean = function (b) {
            return typeof b === 'boolean';
        };
        var SUPPORTED_HASHDICT_VERSIONS = [
            '0.0.0', '0.0.1', '0.0.2', '0.0.3'
        ];
        var MESSAGE_VALIDATORS = {
            heightChange: function (payload) {
                return isPositiveInteger(payload.height) && isBoolean(payload.scroll);
            },
            explorationLoaded: function () {
                return true;
            },
            stateTransition: function (payload) {
                return Boolean(payload.oldStateName) || Boolean(payload.newStateName);
            },
            explorationReset: function (payload) {
                return Boolean(payload.stateName);
            },
            explorationCompleted: function () {
                return true;
            }
        };
        var getPayload = {
            heightChange: function (data) {
                return {
                    height: data.height,
                    scroll: data.scroll
                };
            },
            explorationLoaded: function (data) {
                return {
                    explorationVersion: data.explorationVersion,
                    explorationTitle: data.explorationTitle
                };
            },
            stateTransition: function (data) {
                return {
                    explorationVersion: data.explorationVersion,
                    oldStateName: data.oldStateName,
                    jsonAnswer: data.jsonAnswer,
                    newStateName: data.newStateName
                };
            },
            explorationCompleted: function (data) {
                return {
                    explorationVersion: data.explorationVersion
                };
            },
            // DEPRECATED
            explorationReset: function (data) {
                return {
                    stateName: data
                };
            }
        };
        var messenger = {
            HEIGHT_CHANGE: 'heightChange',
            EXPLORATION_LOADED: 'explorationLoaded',
            STATE_TRANSITION: 'stateTransition',
            EXPLORATION_RESET: 'explorationReset',
            EXPLORATION_COMPLETED: 'explorationCompleted',
            sendMessage: function (messageTitle, messageData) {
                // TODO(sll): For the stateTransition and explorationCompleted events,
                // we now send paramValues in the messageData. We should broadcast these
                // to the parent page as well.
                // TODO(sll): Delete/deprecate 'reset exploration' from the list of
                // events sent to a container page.
                // Only send a message to the parent if the oppia window is iframed and
                // a hash is passed in.
                var rawHash = $window.location.hash.substring(1);
                if ($window.parent !== $window && rawHash &&
                    MESSAGE_VALIDATORS.hasOwnProperty(messageTitle)) {
                    // Protractor tests may prepend a / to this hash, which we remove:
                    var hash = (rawHash.charAt(0) === '/') ? rawHash.substring(1) : rawHash;
                    var hashParts = hash.split('&');
                    var hashDict = {
                        version: null,
                        secret: null,
                        tagid: null
                    };
                    for (var i = 0; i < hashParts.length; i++) {
                        if (hashParts[i].indexOf('=') === -1) {
                            $log.error('Invalid hash for embedding: ' + hash);
                            return;
                        }
                        var separatorLocation = hashParts[i].indexOf('=');
                        hashDict[hashParts[i].substring(0, separatorLocation)] = (hashParts[i].substring(separatorLocation + 1));
                    }
                    if (!hashDict.version || !hashDict.secret) {
                        $log.error('Invalid hash for embedding: ' + hash);
                        return;
                    }
                    if (SUPPORTED_HASHDICT_VERSIONS.indexOf(hashDict.version) !== -1) {
                        $log.info('Posting message to parent: ' + messageTitle);
                        var payload = getPayload[messageTitle](messageData);
                        if (!MESSAGE_VALIDATORS[messageTitle](payload)) {
                            $log.error('Error validating payload: ' + payload);
                            return;
                        }
                        $log.info(payload);
                        var objToSendToParent = {
                            title: messageTitle,
                            payload: payload,
                            sourceTagId: null,
                            secret: null
                        };
                        if (hashDict.version === '0.0.0') {
                            // Ensure backwards-compatibility.
                            objToSendToParent.sourceTagId = hashDict.tagid;
                            objToSendToParent.secret = hashDict.secret;
                        }
                        // The targetOrigin needs to be * because any page can iframe an
                        // exploration.
                        $window.parent.postMessage(JSON.stringify(objToSendToParent), '*');
                    }
                    else {
                        $log.error('Unknown version for embedding: ' + hashDict.version);
                        return;
                    }
                }
            }
        };
        return messenger;
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/PageTitleService.ts":
/*!**************************************************************!*\
  !*** ./core/templates/dev/head/services/PageTitleService.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service to set the title of the page.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var platform_browser_1 = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
var PageTitleService = /** @class */ (function () {
    function PageTitleService(titleService) {
        this.titleService = titleService;
    }
    PageTitleService.prototype.setPageTitle = function (title) {
        this.titleService.setTitle(title);
    };
    var _a;
    PageTitleService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof platform_browser_1.Title !== "undefined" && platform_browser_1.Title) === "function" ? _a : Object])
    ], PageTitleService);
    return PageTitleService;
}());
exports.PageTitleService = PageTitleService;
angular.module('oppia').factory('PageTitleService', static_1.downgradeInjectable(PageTitleService));


/***/ }),

/***/ "./core/templates/dev/head/services/PlaythroughIssuesBackendApiService.ts":
/*!********************************************************************************!*\
  !*** ./core/templates/dev/head/services/PlaythroughIssuesBackendApiService.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for fetching issues and playthroughs from the backend.
 */
__webpack_require__(/*! domain/statistics/PlaythroughObjectFactory.ts */ "./core/templates/dev/head/domain/statistics/PlaythroughObjectFactory.ts");
__webpack_require__(/*! domain/statistics/PlaythroughIssueObjectFactory.ts */ "./core/templates/dev/head/domain/statistics/PlaythroughIssueObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/services.constants.ajs.ts */ "./core/templates/dev/head/services/services.constants.ajs.ts");
angular.module('oppia').factory('PlaythroughIssuesBackendApiService', [
    '$http', '$q', 'PlaythroughIssueObjectFactory', 'PlaythroughObjectFactory',
    'UrlInterpolationService', 'FETCH_ISSUES_URL', 'FETCH_PLAYTHROUGH_URL',
    'RESOLVE_ISSUE_URL',
    function ($http, $q, PlaythroughIssueObjectFactory, PlaythroughObjectFactory, UrlInterpolationService, FETCH_ISSUES_URL, FETCH_PLAYTHROUGH_URL, RESOLVE_ISSUE_URL) {
        /** @type {PlaythroughIssue[]} */
        var cachedIssues = null;
        var getFullIssuesUrl = function (explorationId) {
            return UrlInterpolationService.interpolateUrl(FETCH_ISSUES_URL, {
                exploration_id: explorationId
            });
        };
        var getFullPlaythroughUrl = function (expId, playthroughId) {
            return UrlInterpolationService.interpolateUrl(FETCH_PLAYTHROUGH_URL, {
                exploration_id: expId,
                playthrough_id: playthroughId
            });
        };
        var getFullResolveIssueUrl = function (explorationId) {
            return UrlInterpolationService.interpolateUrl(RESOLVE_ISSUE_URL, {
                exploration_id: explorationId
            });
        };
        return {
            fetchIssues: function (explorationId, explorationVersion) {
                if (cachedIssues !== null) {
                    return $q.resolve(cachedIssues);
                }
                else {
                    return $http.get(getFullIssuesUrl(explorationId), {
                        params: {
                            exp_version: explorationVersion
                        }
                    }).then(function (response) {
                        var unresolvedIssueBackendDicts = response.data;
                        cachedIssues = unresolvedIssueBackendDicts.map(PlaythroughIssueObjectFactory.createFromBackendDict);
                        return cachedIssues;
                    });
                }
            },
            fetchPlaythrough: function (expId, playthroughId) {
                return $http.get(getFullPlaythroughUrl(expId, playthroughId)).then(function (response) {
                    var playthroughBackendDict = response.data;
                    return PlaythroughObjectFactory.createFromBackendDict(playthroughBackendDict);
                });
            },
            resolveIssue: function (issueToResolve, expId, expVersion) {
                return $http.post(getFullResolveIssueUrl(expId), {
                    exp_issue_dict: issueToResolve.toBackendDict(),
                    exp_version: expVersion
                }).then(function () {
                    var issueIndex = cachedIssues.findIndex(function (issue) {
                        return angular.equals(issue, issueToResolve);
                    });
                    if (issueIndex === -1) {
                        var invalidIssueError = new Error('An issue which was not fetched from the backend has been ' +
                            'resolved');
                        return $q.reject(invalidIssueError);
                    }
                    else {
                        cachedIssues.splice(issueIndex, 1);
                    }
                });
            },
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/PlaythroughIssuesService.ts":
/*!**********************************************************************!*\
  !*** ./core/templates/dev/head/services/PlaythroughIssuesService.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for retrieving issues and playthroughs.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/PlaythroughIssuesBackendApiService.ts */ "./core/templates/dev/head/services/PlaythroughIssuesBackendApiService.ts");
__webpack_require__(/*! pages/exploration-editor-page/statistics-tab/services/learner-action-render.service.ts */ "./core/templates/dev/head/pages/exploration-editor-page/statistics-tab/services/learner-action-render.service.ts");
angular.module('oppia').factory('PlaythroughIssuesService', [
    '$uibModal', 'PlaythroughIssuesBackendApiService', 'UrlInterpolationService',
    'ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS', 'ISSUE_TYPE_EARLY_QUIT',
    'ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS',
    function ($uibModal, PlaythroughIssuesBackendApiService, UrlInterpolationService, ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS, ISSUE_TYPE_EARLY_QUIT, ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS) {
        var issues = null;
        var explorationId = null;
        var explorationVersion = null;
        var currentPlaythrough = null;
        var renderEarlyQuitIssueStatement = function () {
            return 'Several learners exited the exploration in less than a minute.';
        };
        var renderMultipleIncorrectIssueStatement = function (stateName) {
            return 'Several learners submitted answers to card "' + stateName +
                '" several times, then gave up and quit.';
        };
        var renderCyclicTransitionsIssueStatement = function (stateName) {
            return 'Several learners ended up in a cyclic loop revisiting card "' +
                stateName + '" many times.';
        };
        var renderEarlyQuitIssueSuggestions = function (issue) {
            var suggestions = [
                ('Review the cards up to and including "' +
                    issue.issueCustomizationArgs.state_name.value + '" for errors, ' +
                    'ambiguities, or insufficient motivation.'),
            ];
            return suggestions;
        };
        var renderMultipleIncorrectIssueSuggestions = function (stateName) {
            var suggestions = [
                ('Check the wording of the card "' + stateName + '" to ensure it is ' +
                    'not confusing.'),
                ('Consider addressing the answers submitted in the sample ' +
                    'playthroughs explicitly using answer groups.'),
            ];
            return suggestions;
        };
        var renderCyclicTransitionsIssueSuggestions = function (issue) {
            var stateNames = issue.issueCustomizationArgs.state_names.value;
            var finalIndex = stateNames.length - 1;
            var suggestions = [
                ('Check that the concept presented in "' + stateNames[0] + '" has ' +
                    'been reinforced sufficiently by the time the learner gets to "' +
                    stateNames[finalIndex] + '".'),
            ];
            return suggestions;
        };
        return {
            /** Prepares the PlaythroughIssuesService for subsequent calls to other
             * functions.
             *
             * @param {string} newExplorationId - the exploration id the service will
             *    be targeting.
             * @param {number} newExplorationVersion - the version of the exploration
             *    the service will be targeting.
             */
            initSession: function (newExplorationId, newExplorationVersion) {
                explorationId = newExplorationId;
                explorationVersion = newExplorationVersion;
            },
            getIssues: function () {
                return PlaythroughIssuesBackendApiService.fetchIssues(explorationId, explorationVersion);
            },
            getPlaythrough: function (playthroughId) {
                return PlaythroughIssuesBackendApiService.fetchPlaythrough(explorationId, playthroughId);
            },
            renderIssueStatement: function (issue) {
                var issueType = issue.issueType;
                if (issueType === ISSUE_TYPE_EARLY_QUIT) {
                    return renderEarlyQuitIssueStatement();
                }
                else if (issueType === ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS) {
                    return renderMultipleIncorrectIssueStatement(issue.issueCustomizationArgs.state_name.value);
                }
                else if (issueType === ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS) {
                    return renderCyclicTransitionsIssueStatement(issue.issueCustomizationArgs.state_names.value[0]);
                }
            },
            renderIssueSuggestions: function (issue) {
                var issueType = issue.issueType;
                if (issueType === ISSUE_TYPE_EARLY_QUIT) {
                    return renderEarlyQuitIssueSuggestions(issue);
                }
                else if (issueType === ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS) {
                    return renderMultipleIncorrectIssueSuggestions(issue.issueCustomizationArgs.state_name.value);
                }
                else if (issueType === ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS) {
                    return renderCyclicTransitionsIssueSuggestions(issue);
                }
            },
            resolveIssue: function (issue) {
                return PlaythroughIssuesBackendApiService.resolveIssue(issue, explorationId, explorationVersion);
            },
            openPlaythroughModal: function (playthroughId, index) {
                this.getPlaythrough(playthroughId).then(function (playthrough) {
                    $uibModal.open({
                        templateUrl: UrlInterpolationService.getDirectiveTemplateUrl('/pages/exploration-editor-page/statistics-tab/templates/' +
                            'playthrough-modal.template.html'),
                        backdrop: true,
                        resolve: {
                            playthrough: function () {
                                return playthrough;
                            },
                            playthroughIndex: function () {
                                return index;
                            }
                        },
                        controller: [
                            '$scope', '$uibModalInstance', 'playthroughIndex',
                            'playthrough', 'AlertsService', 'LearnerActionRenderService',
                            function ($scope, $uibModalInstance, playthroughIndex, playthrough, AlertsService, LearnerActionRenderService) {
                                $scope.playthroughIndex = playthroughIndex;
                                $scope.displayBlocks =
                                    LearnerActionRenderService.getDisplayBlocks(playthrough.actions);
                                $scope.reversedDisplayBlocks =
                                    $scope.displayBlocks.slice().reverse();
                                var blockActionIndexMapping = {};
                                $scope.displayBlocks.reduce(function (runningTotal, displayBlock, i) {
                                    blockActionIndexMapping[i] =
                                        runningTotal - displayBlock.length;
                                    return blockActionIndexMapping[i];
                                }, playthrough.actions.length + 1);
                                $scope.maxHidden = $scope.displayBlocks.length - 1;
                                $scope.getDisplayBlockIndex = function (displayBlock) {
                                    return $scope.displayBlocks.indexOf(displayBlock);
                                };
                                $scope.isDisplayBlockOnInitDisplay = function (block) {
                                    return $scope.getDisplayBlockIndex(block) === 0;
                                };
                                $scope.createDisplayBlockNavId = function (block) {
                                    return $scope.getDisplayBlockIndex(block) + 1;
                                };
                                $scope.renderBlockHtml = function (displayBlock) {
                                    var index = $scope.getDisplayBlockIndex(displayBlock);
                                    return LearnerActionRenderService.renderDisplayBlockHTML(displayBlock, blockActionIndexMapping[index]);
                                };
                                /**
                                 * Returns the index of the learner action wihtin the display
                                 * block.
                                 * @param {LearnerAction} learnerAction.
                                 * @param {LearnerAction[]} displayBlock.
                                 * @returns {int}
                                 */
                                $scope.getLearnerActionIndex = function (learnerAction, displayBlock) {
                                    return displayBlock.indexOf(learnerAction);
                                };
                                /**
                                 * Renders the HTML of the learner action. The index of the
                                 * learner action will be the sum of the starting action index
                                 * of the block (a block is a list of learner actions grouped
                                 * together for display) computed using the
                                 * blockActionIndexMapping field and the index of the learner
                                 * action within the block.
                                 * @param {LearnerAction} learnerAction.
                                 * @param {int} blockIndex - The index of the block among all
                                 *  the display blocks.
                                 * @param {int} actionIndex - The index of the learner action
                                 *  within it's display block.
                                 * @returns {string}
                                 */
                                $scope.renderLearnerAction = function (learnerAction, blockIndex, actionIndex) {
                                    return LearnerActionRenderService.renderLearnerAction(learnerAction, blockActionIndexMapping[blockIndex], actionIndex);
                                };
                                var getRemainingActionsElements = function (pIdx, i) {
                                    // We only expect one element to match the below statement and
                                    // thus, we take the first element.
                                    return (document.getElementsByClassName('remaining-actions' + pIdx.toString() + i.toString())[0]);
                                };
                                /**
                                 * Shows the remaining display blocks and the arrow div. If
                                 * there is only one display block, the arrow div is not
                                 * shown at all. If the current shown display block is the
                                 * second last display block, the arrow div is hidden after
                                 * the final display block is shown. Else, the following
                                 * display block is displayed.
                                 */
                                $scope.showRemainingActions = function (pIdx) {
                                    // If there is only one display block left to be shown,
                                    // the arrow is not required.
                                    if ($scope.maxHidden === 1) {
                                        getRemainingActionsElements(pIdx, $scope.maxHidden)
                                            .style.display = 'block';
                                        document.getElementById('arrowDiv').style.display = 'none';
                                    }
                                    else {
                                        var currentShown = 0;
                                        var i;
                                        for (i = $scope.maxHidden; i > 0; i--) {
                                            if (getRemainingActionsElements(pIdx, i).style.display ===
                                                'block') {
                                                currentShown = i;
                                                break;
                                            }
                                        }
                                        if (currentShown === 0) {
                                            getRemainingActionsElements(pIdx, currentShown + 1)
                                                .style.display = 'block';
                                        }
                                        else if (currentShown === $scope.maxHidden - 1) {
                                            getRemainingActionsElements(pIdx, $scope.maxHidden)
                                                .style.display = 'block';
                                            document.getElementById('arrowDiv').style.display =
                                                'none';
                                        }
                                        else {
                                            getRemainingActionsElements(pIdx, currentShown + 1)
                                                .style.display = 'block';
                                        }
                                    }
                                };
                                $scope.cancel = function () {
                                    $uibModalInstance.dismiss('cancel');
                                    AlertsService.clearWarnings();
                                };
                            }
                        ]
                    });
                });
            },
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/PlaythroughService.ts":
/*!****************************************************************!*\
  !*** ./core/templates/dev/head/services/PlaythroughService.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for recording and scrutinizing playthroughs.
 */
__webpack_require__(/*! domain/statistics/LearnerActionObjectFactory.ts */ "./core/templates/dev/head/domain/statistics/LearnerActionObjectFactory.ts");
__webpack_require__(/*! domain/statistics/PlaythroughObjectFactory.ts */ "./core/templates/dev/head/domain/statistics/PlaythroughObjectFactory.ts");
__webpack_require__(/*! domain/utilities/StopwatchObjectFactory.ts */ "./core/templates/dev/head/domain/utilities/StopwatchObjectFactory.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/ExplorationFeaturesService.ts */ "./core/templates/dev/head/services/ExplorationFeaturesService.ts");
__webpack_require__(/*! services/services.constants.ajs.ts */ "./core/templates/dev/head/services/services.constants.ajs.ts");
angular.module('oppia').factory('PlaythroughService', [
    '$http', 'ExplorationFeaturesService', 'LearnerActionObjectFactory',
    'PlaythroughObjectFactory', 'StopwatchObjectFactory',
    'UrlInterpolationService', 'ACTION_TYPE_ANSWER_SUBMIT',
    'ACTION_TYPE_EXPLORATION_QUIT', 'ACTION_TYPE_EXPLORATION_START',
    'CURRENT_ACTION_SCHEMA_VERSION', 'CURRENT_ISSUE_SCHEMA_VERSION',
    'EARLY_QUIT_THRESHOLD_IN_SECS', 'ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS',
    'ISSUE_TYPE_EARLY_QUIT', 'ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS',
    'NUM_INCORRECT_ANSWERS_THRESHOLD', 'NUM_REPEATED_CYCLES_THRESHOLD',
    'STORE_PLAYTHROUGH_URL',
    function ($http, ExplorationFeaturesService, LearnerActionObjectFactory, PlaythroughObjectFactory, StopwatchObjectFactory, UrlInterpolationService, ACTION_TYPE_ANSWER_SUBMIT, ACTION_TYPE_EXPLORATION_QUIT, ACTION_TYPE_EXPLORATION_START, CURRENT_ACTION_SCHEMA_VERSION, CURRENT_ISSUE_SCHEMA_VERSION, EARLY_QUIT_THRESHOLD_IN_SECS, ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS, ISSUE_TYPE_EARLY_QUIT, ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS, NUM_INCORRECT_ANSWERS_THRESHOLD, NUM_REPEATED_CYCLES_THRESHOLD, STORE_PLAYTHROUGH_URL) {
        var playthrough = null;
        var expStopwatch = null;
        var isLearnerInSamplePopulation = null;
        var multipleIncorrectStateName = {
            state_name: null,
            num_times_incorrect: null
        };
        var cycleIdentifier = {
            cycle: null,
            num_cycles: null
        };
        var visitedStates = [];
        var misTracker = false;
        var cstTracker = false;
        var removeOldQuitAction = function () {
            var quitAction = playthrough.actions[playthrough.actions.length - 1];
            // After the second quit action is recorded, the first quit is removed
            // using this method. This ensures that there are only two quit actions
            // in the playthrough actions list at a time.
            playthrough.actions = playthrough.actions.filter(function (action) {
                return action.actionType !== ACTION_TYPE_EXPLORATION_QUIT;
            });
            playthrough.actions.push(quitAction);
        };
        var _determineIfLearnerIsInSamplePopulation = function (probability) {
            return Math.random() < probability;
        };
        var createMultipleIncorrectIssueTracker = function (initStateName) {
            if (misTracker) {
                return;
            }
            multipleIncorrectStateName = {
                state_name: initStateName,
                num_times_incorrect: 0
            };
            misTracker = true;
        };
        var createCyclicIssueTracker = function (initStateName) {
            if (cstTracker) {
                return;
            }
            cycleIdentifier = {
                cycle: '',
                num_cycles: 0
            };
            visitedStates.unshift(initStateName);
            cstTracker = true;
        };
        var incrementIncorrectAnswerInMultipleIncorrectIssueTracker = function () {
            multipleIncorrectStateName.num_times_incorrect += 1;
        };
        var recordStateTransitionInMultipleIncorrectIssueTracker = function (destStateName) {
            if (multipleIncorrectStateName.num_times_incorrect <
                NUM_INCORRECT_ANSWERS_THRESHOLD) {
                multipleIncorrectStateName.state_name = destStateName;
                multipleIncorrectStateName.num_times_incorrect = 0;
            }
        };
        var recordStateTransitionInCyclicIssueTracker = function (destStateName) {
            if (cycleIdentifier.num_cycles < NUM_REPEATED_CYCLES_THRESHOLD) {
                if (visitedStates.indexOf(destStateName) !== -1) {
                    // Cycle identified.
                    var cycleStartIndex = visitedStates.indexOf(destStateName);
                    visitedStates.push(destStateName);
                    var cycleString = visitedStates.slice(cycleStartIndex, visitedStates.length).toString();
                    if (cycleIdentifier.cycle === cycleString) {
                        cycleIdentifier.num_cycles += 1;
                    }
                    else {
                        cycleIdentifier.cycle = cycleString;
                        cycleIdentifier.num_cycles = 1;
                    }
                    visitedStates = [destStateName];
                }
                else {
                    visitedStates.push(destStateName);
                }
            }
        };
        var isMultipleIncorrectSubmissionsIssue = function () {
            return multipleIncorrectStateName.num_times_incorrect >=
                NUM_INCORRECT_ANSWERS_THRESHOLD;
        };
        var isCyclicStateTransitionsIssue = function () {
            return cycleIdentifier.num_cycles >= NUM_REPEATED_CYCLES_THRESHOLD;
        };
        var isEarlyQuitIssue = function (timeSpentInExpInSecs) {
            return timeSpentInExpInSecs < EARLY_QUIT_THRESHOLD_IN_SECS;
        };
        var analyzePlaythrough = function () {
            // The ordering of checks in this method is such that the priority of
            // issues to be recorded in case of multiple issues is captured. This
            // follows MultipleIncorrectSubmissionsIssue ->
            // CyclicStateTransitionsIssue -> EarlyQuitIssue.
            var timeSpentInExpInSecs = expStopwatch.getTimeInSecs();
            if (isMultipleIncorrectSubmissionsIssue()) {
                playthrough.issueType = ISSUE_TYPE_MULTIPLE_INCORRECT_SUBMISSIONS;
                playthrough.issueCustomizationArgs = {
                    state_name: {
                        value: multipleIncorrectStateName.state_name
                    },
                    num_times_answered_incorrectly: {
                        value: multipleIncorrectStateName.num_times_incorrect
                    }
                };
            }
            else if (isCyclicStateTransitionsIssue()) {
                playthrough.issueType = ISSUE_TYPE_CYCLIC_STATE_TRANSITIONS;
                playthrough.issueCustomizationArgs = {
                    state_names: {
                        value: cycleIdentifier.cycle.split(',')
                    }
                };
            }
            else if (isEarlyQuitIssue(timeSpentInExpInSecs)) {
                playthrough.issueType = ISSUE_TYPE_EARLY_QUIT;
                playthrough.issueCustomizationArgs = {
                    state_name: {
                        value: playthrough.actions[playthrough.actions.length - 1].actionCustomizationArgs
                            .state_name.value
                    },
                    time_spent_in_exp_in_secs: {
                        value: timeSpentInExpInSecs
                    }
                };
            }
        };
        var storePlaythrough = function (isNewPlaythrough) {
            var playthroughId = isNewPlaythrough ? null : playthrough.playthroughId;
            var promise = $http.post(getFullPlaythroughUrl(), {
                playthrough_data: playthrough.toBackendDict(),
                issue_schema_version: CURRENT_ISSUE_SCHEMA_VERSION,
                playthrough_id: playthroughId
            });
            if (isNewPlaythrough) {
                promise.then(function (response) {
                    if (response.data.playthrough_stored) {
                        // In cases where maximum number of playthroughs already exists, the
                        // above flag is not True and playthrough ID is not set.
                        playthrough.playthroughId = response.data.playthrough_id;
                    }
                });
            }
        };
        var getFullPlaythroughUrl = function () {
            return UrlInterpolationService.interpolateUrl(STORE_PLAYTHROUGH_URL, {
                exploration_id: playthrough.expId
            });
        };
        var isPlaythroughDiscarded = function () {
            return !ExplorationFeaturesService.isPlaythroughRecordingEnabled() ||
                !isLearnerInSamplePopulation;
        };
        return {
            initSession: function (explorationId, explorationVersion, playthroughProbability) {
                isLearnerInSamplePopulation =
                    _determineIfLearnerIsInSamplePopulation(playthroughProbability);
                playthrough = PlaythroughObjectFactory.createNew(null, explorationId, explorationVersion, null, {}, []);
                expStopwatch = StopwatchObjectFactory.create();
            },
            getPlaythrough: function () {
                return playthrough;
            },
            recordExplorationStartAction: function (initStateName) {
                if (isPlaythroughDiscarded()) {
                    return;
                }
                var expStartLearnerAction = LearnerActionObjectFactory.createNew(ACTION_TYPE_EXPLORATION_START, {
                    state_name: {
                        value: initStateName
                    }
                }, CURRENT_ACTION_SCHEMA_VERSION);
                playthrough.actions.unshift(expStartLearnerAction);
                createMultipleIncorrectIssueTracker(initStateName);
                createCyclicIssueTracker(initStateName);
                expStopwatch.reset();
            },
            recordAnswerSubmitAction: function (stateName, destStateName, interactionId, answer, feedback, timeSpentInStateSecs) {
                if (isPlaythroughDiscarded()) {
                    return;
                }
                if (!cstTracker) {
                    createCyclicIssueTracker(stateName);
                }
                if (!misTracker) {
                    createMultipleIncorrectIssueTracker(stateName);
                }
                playthrough.actions.push(LearnerActionObjectFactory.createNew(ACTION_TYPE_ANSWER_SUBMIT, {
                    state_name: {
                        value: stateName
                    },
                    dest_state_name: {
                        value: destStateName
                    },
                    interaction_id: {
                        value: interactionId
                    },
                    submitted_answer: {
                        value: answer
                    },
                    feedback: {
                        value: feedback
                    },
                    time_spent_state_in_msecs: {
                        value: timeSpentInStateSecs
                    }
                }, CURRENT_ACTION_SCHEMA_VERSION));
                var didNotMoveToNextState = (destStateName === stateName);
                if (didNotMoveToNextState) {
                    incrementIncorrectAnswerInMultipleIncorrectIssueTracker();
                }
                else {
                    recordStateTransitionInMultipleIncorrectIssueTracker(destStateName);
                    recordStateTransitionInCyclicIssueTracker(destStateName);
                }
            },
            recordExplorationQuitAction: function (stateName, timeSpentInStateSecs) {
                if (isPlaythroughDiscarded()) {
                    return;
                }
                playthrough.actions.push(LearnerActionObjectFactory.createNew(ACTION_TYPE_EXPLORATION_QUIT, {
                    state_name: {
                        value: stateName
                    },
                    time_spent_in_state_in_msecs: {
                        value: timeSpentInStateSecs
                    }
                }, CURRENT_ACTION_SCHEMA_VERSION));
            },
            recordPlaythrough: function (isExplorationComplete) {
                if (isPlaythroughDiscarded()) {
                    return;
                }
                if (isExplorationComplete) {
                    // If the exploration is completed, do not check for issues.
                    return;
                }
                if (playthrough.playthroughId) {
                    // Playthrough ID exists, so issue has already been identified.
                    removeOldQuitAction();
                    if (playthrough.issueType === ISSUE_TYPE_EARLY_QUIT) {
                        // If the existing issue is of type early quit, and some other issue
                        // can be identified, update the issue since early quit has lower
                        // priority.
                        analyzePlaythrough();
                    }
                    storePlaythrough(false);
                }
                else {
                    // Playthrough ID doesn't exist.
                    analyzePlaythrough();
                    if (playthrough.issueType) {
                        // Issue type exists, so an issue is identified after analyzing the
                        // playthrough, and the playthrough is stored.
                        storePlaythrough(true);
                    }
                }
            },
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/SpeechSynthesisChunkerService.ts":
/*!***************************************************************************!*\
  !*** ./core/templates/dev/head/services/SpeechSynthesisChunkerService.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service to chunk a piece of text into smaller parts
 * to feed into SpeechSynthesis, because SpeechSynthesis always times
 * out after 200-300 characters.
 *
 * Code is adapted from:
 * https://gist.github.com/woollsta/2d146f13878a301b36d7
 *
 * Credits to Peter Woolley and Brett Zamir.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var services_constants_ts_1 = __webpack_require__(/*! services/services.constants.ts */ "./core/templates/dev/head/services/services.constants.ts");
var SpeechSynthesisChunkerService = /** @class */ (function () {
    function SpeechSynthesisChunkerService() {
        // Max number of characters to fit into one chunk.
        this.CHUNK_LENGTH = 160;
        this._speechSynthesis = window.speechSynthesis;
        this.RTE_COMPONENT_NAMES = {
            Collapsible: '',
            Image: '',
            Link: '',
            Math: '',
            Tabs: '',
            Video: ''
        };
        // Punctuation marks that should result in an audible pause when playing
        // back autogenerated audio.
        this.PUNCTUATION_MARKS_TO_END_CHUNKS = '.!?:;';
        // Punctuation marks that we don't want to influence the playing back of
        // autogenerated audio.
        this.PUNCTUATION_MARKS_TO_IGNORE = '"';
        this.cancelRequested = false;
    }
    /**
     * Takes an utterance, and plays it in separate utterances each of at
     *    most 160 characters in length.
     * @param {SpeechSynthesisUtterance} utterance - The original utterance
     *    that contains the whole message to speak.
     * @param {Number} offset - An integer indicating what offset in the text
     *    to begin the next chunked utterance.
     * @param {requestCallback} - Callback that is activated when the last
     *    chunked utterance finishes playing.
     */
    SpeechSynthesisChunkerService.prototype._speechUtteranceChunker = function (utterance, offset, callback) {
        var _this = this;
        var newUtterance;
        var text = (offset !== undefined ?
            utterance.text.substring(offset) : utterance.text);
        // This regex pattern finds the next string at most 160
        // characters in length that ends on a punctuation mark in
        // PUNCTUATION_MARKS_TO_END_CHUNKS.
        var delimitChunkRegex = new RegExp('^[\\s\\S]{' +
            Math.floor(this.CHUNK_LENGTH / 4) + ',' + this.CHUNK_LENGTH + '}[' +
            this.PUNCTUATION_MARKS_TO_END_CHUNKS + ']{1}|^[\\s\\S]{1,' +
            this.CHUNK_LENGTH + '}$|^[\\s\\S]{1,' + this.CHUNK_LENGTH + '} ');
        var chunkArray = text.match(delimitChunkRegex);
        if (chunkArray === null ||
            chunkArray[0] === undefined ||
            chunkArray[0].length <= 2) {
            // Call once all text has been spoken.
            if (callback !== undefined) {
                callback();
            }
            return;
        }
        var chunk = chunkArray[0];
        newUtterance = new SpeechSynthesisUtterance(chunk);
        // Copy properties from the current utterance to the next utterance,
        // excluding the text being spoken.
        for (var property in utterance) {
            if (property !== 'text') {
                newUtterance[property] = utterance[property];
            }
        }
        newUtterance.onend = function () {
            if (_this.cancelRequested) {
                _this.cancelRequested = false;
                return;
            }
            offset += chunk.length;
            _this._speechUtteranceChunker(utterance, offset, callback);
        };
        // IMPORTANT!! Do not remove: Logging the object out fixes some onend
        // firing issues. Placing the speak invocation inside a callback
        // fixes ordering and onend issues.
        // eslint-disable-next-line no-console
        console.log(newUtterance);
        setTimeout(function () {
            speechSynthesis.speak(newUtterance);
        }, 0);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the type of 'latex' needs to be determined correctly.
    SpeechSynthesisChunkerService.prototype._formatLatexToSpeakableText = function (latex) {
        return latex
            .replace(/&quot;/g, '')
            .replace(/\\/g, '')
            .replace(/\s+/, ' ')
            // Separate consecutive characters with spaces so that 'ab'
            // is pronounced 'a' followed by 'b'.
            .split('').join(' ')
            .replace(/\s*(\d+)\s*/g, '$1')
            // Replace dashes with 'minus'.
            .replace(/-/g, ' minus ')
            // Ensure that 'x^2' is pronounced 'x squared' rather than
            // 'x caret 2'.
            .replace(/\s*\^\s*/g, '^')
            // Speak 'x^y' as 'x to the power of y' unless the exponent is two or
            // three, in which case Web Speech will read 'squared' and 'cubed'
            // respectively.
            .replace(/(.*)\^(\{*[0-9].+|[0-14-9]\}*)/g, '$1 to the power of $2')
            // Handle simple fractions.
            .replace(/f\sr\sa\sc\s\{\s*(.+)\s*\}\s\{\s*(.+)\s*\}/g, '$1/$2')
            // If a fraction contains a variable, then say (numerator) 'over'
            // (denominator).
            .replace(/(\d*\D+)\/(\d*\D*)|(\d*\D*)\/(\d*\D+)/g, '$1 over $2')
            // Handle basic trigonometric functions.
            .replace(/t\sa\sn/g, 'the tangent of')
            .replace(/s\si\sn/g, 'the sine of')
            .replace(/c\so\ss/g, 'the cosine of')
            // Handle square roots.
            .replace(/s\sq\sr\st\s\{\s*(.+)\s*\}/g, 'the square root of $1')
            // Remove brackets.
            .replace(/[\}\{]/g, '')
            // Replace multiple spaces with single space.
            .replace(/\s\s+/g, ' ')
            .trim();
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the type of 'html' needs to be determined correctly.
    SpeechSynthesisChunkerService.prototype._convertToSpeakableText = function (html) {
        var _this = this;
        Object.keys(services_constants_ts_1.ServicesConstants.RTE_COMPONENT_SPECS).forEach(function (componentSpec) {
            _this.RTE_COMPONENT_NAMES[componentSpec] =
                services_constants_ts_1.ServicesConstants.RTE_COMPONENT_SPECS[componentSpec].frontend_id;
        });
        var elt = $('<div>' + html + '</div>');
        // Convert links into speakable text by extracting the readable value.
        elt.find('oppia-noninteractive-' + this.RTE_COMPONENT_NAMES.Link)
            .replaceWith(function () {
            if (_this.attributes['text-with-value'] !== undefined) {
                return _this.attributes['text-with-value'].textContent.replace(/&quot;/g, '');
            }
        });
        // Convert LaTeX to speakable text.
        elt.find('oppia-noninteractive-' + this.RTE_COMPONENT_NAMES.Math)
            .replaceWith(function () {
            if (_this.attributes['raw_latex-with-value'] !== undefined) {
                return _this._formatLatexToSpeakableText(_this.attributes['raw_latex-with-value'].textContent);
            }
        });
        html = elt.html();
        // Replace certain HTML elements with periods to indicate
        // pauses in speaking. Also, for some reason, there's a lot
        // of whitespace (like hundreds of characters) so we trim
        // it off to avoid blank chunks.
        html = html.replace(new RegExp('</li>', 'g'), '.').trim();
        // Strip away HTML tags.
        var tmp = $('<div></div>');
        tmp.html(html);
        var textToSpeakWithoutPauses = tmp.text();
        var textToSpeak = '';
        // Insert a space after punctuation marks to ensure that chunking will
        // end on the desired punctuation marks so that SpeechSynthesis will
        // pause more naturally. Remove any punctuation marks that have no
        // effect on speaking.
        for (var i = 0; i < textToSpeakWithoutPauses.length; i++) {
            if (this.PUNCTUATION_MARKS_TO_IGNORE.indexOf(textToSpeakWithoutPauses.charAt(i)) > -1) {
                continue;
            }
            textToSpeak += textToSpeakWithoutPauses.charAt(i);
            if (this.PUNCTUATION_MARKS_TO_END_CHUNKS.indexOf(textToSpeakWithoutPauses.charAt(i)) > -1) {
                textToSpeak += ' ';
            }
        }
        return textToSpeak;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'callback' is a function and its type needs to be researched
    // thoroughly.
    SpeechSynthesisChunkerService.prototype.speak = function (utterance, callback) {
        this.cancelRequested = false;
        this._speechUtteranceChunker(utterance, 0, callback);
    };
    SpeechSynthesisChunkerService.prototype.cancel = function () {
        this.cancelRequested = true;
        if (this._speechSynthesis) {
            this._speechSynthesis.cancel();
        }
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the type of 'html' needs to be determined correctly.
    SpeechSynthesisChunkerService.prototype.convertToSpeakableText = function (html) {
        return this._convertToSpeakableText(html);
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because the type of 'latex' needs to be determined correctly.
    SpeechSynthesisChunkerService.prototype.formatLatexToSpeakableText = function (latex) {
        return this._formatLatexToSpeakableText(latex);
    };
    SpeechSynthesisChunkerService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], SpeechSynthesisChunkerService);
    return SpeechSynthesisChunkerService;
}());
exports.SpeechSynthesisChunkerService = SpeechSynthesisChunkerService;
angular.module('oppia').factory('SpeechSynthesisChunkerService', static_1.downgradeInjectable(SpeechSynthesisChunkerService));


/***/ }),

/***/ "./core/templates/dev/head/services/SuggestionModalService.ts":
/*!********************************************************************!*\
  !*** ./core/templates/dev/head/services/SuggestionModalService.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service to handle common code for suggestion modal display.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var SuggestionModalService = /** @class */ (function () {
    function SuggestionModalService() {
        this.SUGGESTION_ACCEPTED_MSG = ('This suggestion has already been accepted.');
        this.SUGGESTION_REJECTED_MSG = ('This suggestion has already been rejected.');
        this.SUGGESTION_INVALID_MSG = ('This suggestion was made for a state that no longer exists.' +
            ' It cannot be accepted.');
        this.UNSAVED_CHANGES_MSG = ('You have unsaved changes to this exploration. Please save/discard your ' +
            'unsaved changes if you wish to accept.');
        this.ACTION_ACCEPT_SUGGESTION = 'accept';
        this.ACTION_REJECT_SUGGESTION = 'reject';
        this.ACTION_RESUBMIT_SUGGESTION = 'resubmit';
        this.SUGGESTION_ACCEPTED = 'accepted';
        this.SUGGESTION_REJECTED = 'rejected';
    }
    // TODO(YashJipkate): Replace 'any' with the exact type. This has been kept as
    // 'any' since '$uibModalInstance' is a AngularJS native object and does not
    // have a TS interface.
    SuggestionModalService.prototype.acceptSuggestion = function ($uibModalInstance, paramDict) {
        $uibModalInstance.close(paramDict);
    };
    // TODO(YashJipkate): Replace 'any' with the exact type. This has been kept as
    // 'any' since '$uibModalInstance' is a AngularJS native object and does not
    // have a TS interface.
    SuggestionModalService.prototype.rejectSuggestion = function ($uibModalInstance, paramDict) {
        $uibModalInstance.close(paramDict);
    };
    // TODO(YashJipkate): Replace 'any' with the exact type. This has been kept as
    // 'any' since '$uibModalInstance' is a AngularJS native object and does not
    // have a TS interface.
    SuggestionModalService.prototype.cancelSuggestion = function ($uibModalInstance) {
        $uibModalInstance.dismiss('cancel');
    };
    SuggestionModalService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], SuggestionModalService);
    return SuggestionModalService;
}());
exports.SuggestionModalService = SuggestionModalService;
angular.module('oppia').factory('SuggestionModalService', static_1.downgradeInjectable(SuggestionModalService));


/***/ }),

/***/ "./core/templates/dev/head/services/ValidatorsService.ts":
/*!***************************************************************!*\
  !*** ./core/templates/dev/head/services/ValidatorsService.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Service for validating things and (optionally) displaying
 * warning messages if the validation fails.
 */
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts");
angular.module('oppia').factory('ValidatorsService', [
    '$filter', 'AlertsService', 'INVALID_NAME_CHARS',
    function ($filter, AlertsService, INVALID_NAME_CHARS) {
        return {
            /**
             * Checks whether an entity name is valid, and displays a warning message
             * if it isn't.
             * @param {string} input - The input to be checked.
             * @param {boolean} showWarnings - Whether to show warnings in the
             *   butterbar.
             * @return {boolean} True if the entity name is valid, false otherwise.
             */
            isValidEntityName: function (input, showWarnings, allowEmpty) {
                input = $filter('normalizeWhitespace')(input);
                if (!input && !allowEmpty) {
                    if (showWarnings) {
                        AlertsService.addWarning('Please enter a non-empty name.');
                    }
                    return false;
                }
                for (var i = 0; i < INVALID_NAME_CHARS.length; i++) {
                    if (input.indexOf(INVALID_NAME_CHARS[i]) !== -1) {
                        if (showWarnings) {
                            AlertsService.addWarning('Invalid input. Please use a non-empty description ' +
                                'consisting of alphanumeric characters, spaces and/or hyphens.');
                        }
                        return false;
                    }
                }
                return true;
            },
            isValidExplorationTitle: function (input, showWarnings) {
                if (!this.isValidEntityName(input, showWarnings)) {
                    return false;
                }
                if (input.length > 40) {
                    if (showWarnings) {
                        AlertsService.addWarning('Exploration titles should be at most 40 characters long.');
                    }
                    return false;
                }
                return true;
            },
            // NB: this does not check whether the card name already exists in the
            // states dict.
            isValidStateName: function (input, showWarnings) {
                if (!this.isValidEntityName(input, showWarnings)) {
                    return false;
                }
                if (input.length > 50) {
                    if (showWarnings) {
                        AlertsService.addWarning('Card names should be at most 50 characters long.');
                    }
                    return false;
                }
                return true;
            },
            isNonempty: function (input, showWarnings) {
                if (!input) {
                    if (showWarnings) {
                        // TODO(sll): Allow this warning to be more specific in terms of
                        // what needs to be entered.
                        AlertsService.addWarning('Please enter a non-empty value.');
                    }
                    return false;
                }
                return true;
            },
            isValidExplorationId: function (input, showWarnings) {
                // Exploration IDs are urlsafe base64-encoded.
                var VALID_ID_CHARS_REGEX = /^[a-zA-Z0-9_\-]+$/g;
                if (!input || !VALID_ID_CHARS_REGEX.test(input)) {
                    if (showWarnings) {
                        AlertsService.addWarning('Please enter a valid exploration ID.');
                    }
                    return false;
                }
                return true;
            }
        };
    }
]);


/***/ }),

/***/ "./core/templates/dev/head/services/contextual/WindowRefService.ts":
/*!*************************************************************************!*\
  !*** ./core/templates/dev/head/services/contextual/WindowRefService.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Service to wrap the window object.
 */
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var WindowRef = /** @class */ (function () {
    function WindowRef() {
    }
    WindowRef.prototype._window = function () {
        // return the global native browser window object
        return window;
    };
    Object.defineProperty(WindowRef.prototype, "nativeWindow", {
        get: function () {
            return this._window();
        },
        enumerable: true,
        configurable: true
    });
    WindowRef = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], WindowRef);
    return WindowRef;
}());
exports.WindowRef = WindowRef;


/***/ }),

/***/ "./extensions/classifiers/count-vectorizer.service.ts":
/*!************************************************************!*\
  !*** ./extensions/classifiers/count-vectorizer.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Vectorizer function which mirrors the CountVectorizer feature
 * extractor of sklearn.
 *
 * IMPORTANT NOTE: The Vectorizer function uses the vocabulary that was
 * extracted during the training. During training scikit's
 * CountVectorizer class is used for this purpose. If there are any changes
 * in scikit's CountVectorize class then corresponding changes must be
 * propagated here.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var CountVectorizerService = /** @class */ (function () {
    function CountVectorizerService() {
    }
    CountVectorizerService.prototype.vectorize = function (tokens, vocabulary) {
        var vectorLength = Object.keys(vocabulary).length;
        var vector = [];
        for (var i = 0; i < vectorLength; i++) {
            vector.push(0);
        }
        if (tokens === null) {
            return vector;
        }
        tokens.forEach(function (token) {
            if (vocabulary.hasOwnProperty(token)) {
                vector[vocabulary[token]] += 1;
            }
        });
        return vector;
    };
    CountVectorizerService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], CountVectorizerService);
    return CountVectorizerService;
}());
exports.CountVectorizerService = CountVectorizerService;
angular.module('oppia').factory('CountVectorizerService', static_1.downgradeInjectable(CountVectorizerService));


/***/ }),

/***/ "./extensions/classifiers/svm-prediction.service.ts":
/*!**********************************************************!*\
  !*** ./extensions/classifiers/svm-prediction.service.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview SVM predict function for SVC classifier of sklearn.
 *
 * IMPORTANT NOTE: The predict function uses svm data that was extracted
 * after training of classifier on Oppia-ml. If there are any changes in
 * format of extracted data then corresponding changes must be propagated here.
 * Oppia-ml uses scikit's SVC class during training classifier which uses
 * libsvm's implementation. If there are any changes in following part of
 * code in libsvm then corresponding changes must be propagated here.
 *
 * libsvm's code for prediction:
 * https://github.com/arnaudsj/libsvm/blob/master/svm.cpp#L2481
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var PredictionResultObjectFactory_1 = __webpack_require__(/*! domain/classifier/PredictionResultObjectFactory */ "./core/templates/dev/head/domain/classifier/PredictionResultObjectFactory.ts");
var IKernelParams = /** @class */ (function () {
    function IKernelParams() {
    }
    return IKernelParams;
}());
exports.IKernelParams = IKernelParams;
var SVMPredictionService = /** @class */ (function () {
    function SVMPredictionService(predictionResultObjectFactory) {
        this.predictionResultObjectFactory = predictionResultObjectFactory;
    }
    SVMPredictionService.prototype.kernel = function (kernelParams, supportVectors, input) {
        var kernel = kernelParams.kernel;
        var kvalues = [];
        if (kernel === 'rbf') {
            var gamma = kernelParams.gamma;
            var vectorLength = input.length;
            for (var i = 0; i < supportVectors.length; i++) {
                var sum = 0;
                for (var j = 0; j < input.length; j++) {
                    sum += Math.pow((supportVectors[i][j] - input[j]), 2);
                }
                kvalues.push(Math.exp(-gamma * sum));
            }
        }
        else if (kernel === 'linear') {
            var vectorLength = input.length;
            for (var i = 0; i < supportVectors.length; i++) {
                var sum = 0;
                for (var j = 0; j < input.length; j++) {
                    sum += supportVectors[i][j] * input[j];
                }
                kvalues.push(sum);
            }
        }
        return kvalues;
    };
    // Find multiclass probabilities.
    // NOTE: This function is implemented as it is given in LibSVM.
    // For more information on exact approach used, read following paper:
    // https://www.csie.ntu.edu.tw/~cjlin/papers/svmprob/svmprob.pdf
    // Also take a look at implementation by LibSVM:
    // https://github.com/arnaudsj/libsvm/blob/master/svm.cpp#L1829
    SVMPredictionService.prototype.calculateMulticlassProbabilities = function (nClasses, pairwiseProb) {
        var Q = [];
        for (var i = 0; i < nClasses; i++) {
            Q.push([]);
            for (var j = 0; j < nClasses; j++) {
                Q[i].push(0);
            }
        }
        var Qp = [];
        for (var i = 0; i < nClasses; i++) {
            Qp.push(0);
        }
        var P = [];
        for (var i = 0; i < nClasses; i++) {
            P.push(0);
        }
        var maxIter = Math.max(100, nClasses);
        var eps = 0.005 / nClasses;
        for (var t = 0; t < nClasses; t++) {
            P[t] = 1.0 / nClasses;
            Q[t][t] = 0.0;
            for (var j = 0; j < t; j++) {
                Q[t][t] += pairwiseProb[j][t] * pairwiseProb[j][t];
                Q[t][j] = Q[j][t];
            }
            for (var j = t + 1; j < nClasses; j++) {
                Q[t][t] += pairwiseProb[j][t] * pairwiseProb[j][t];
                Q[t][j] = -pairwiseProb[j][t] * pairwiseProb[t][j];
            }
        }
        var iter = 0;
        for (iter = 0; iter < maxIter; iter++) {
            var pQp = 0.0;
            for (var t = 0; t < nClasses; t++) {
                Qp[t] = 0;
                for (var j = 0; j < nClasses; j++) {
                    Qp[t] += Q[t][j] * P[j];
                }
                pQp += P[t] * Qp[t];
            }
            var maxError = 0;
            for (var t = 0; t < nClasses; t++) {
                var error = Math.abs(Qp[t] - pQp);
                if (error > maxError) {
                    maxError = error;
                }
            }
            if (maxError < eps) {
                break;
            }
            for (var t = 0; t < nClasses; t++) {
                var diff = (-Qp[t] + pQp) / Q[t][t];
                P[t] += diff;
                pQp = ((pQp + diff * (diff * Q[t][t] + 2 * Qp[t])) /
                    (1 + diff) / (1 + diff));
                for (var j = 0; j < nClasses; j++) {
                    Qp[j] = (Qp[j] + diff * Q[t][j]) / (1 + diff);
                    P[j] /= (1 + diff);
                }
            }
        }
        if (iter >= maxIter) {
            console.warn('Exceeds maxIter in calculateMulticlassProbabilities');
        }
        return P;
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'classifierData' is a dict with underscore_cased keys which
    // give tslint errors against underscore_casing in favor of camelCasing. Same
    // goes for 'input'.
    SVMPredictionService.prototype.predict = function (classifierData, input) {
        var nSupport = classifierData.n_support;
        var supportVectors = classifierData.support_vectors;
        var dualCoef = classifierData.dual_coef;
        var intercept = classifierData.intercept;
        var classes = classifierData.classes;
        var kernelParams = classifierData.kernel_params;
        var probA = classifierData.probA;
        var probB = classifierData.probB;
        var startIndices = [];
        startIndices[0] = 0;
        for (var i = 1; i < nSupport.length; i++) {
            startIndices[i] = startIndices[i - 1] + nSupport[i - 1];
        }
        if (supportVectors[0].length !== input.length) {
            // Support vector and input dimensions do not match.
            console.error('Dimension of support vectors and given input is different.');
        }
        // Find kernel values for supportVectors and given input. Assumes that
        // input has same dimension and data type as any of the supportVectors.
        var kvalues = this.kernel(kernelParams, supportVectors, input);
        var votes = [];
        for (var i = 0; i < classes.length; i++) {
            votes.push(0);
        }
        var pairwiseProb = [];
        for (var i = 0; i < classes.length; i++) {
            pairwiseProb.push([]);
            for (var j = 0; j < classes.length; j++) {
                pairwiseProb[i].push(0);
            }
        }
        var p = 0;
        for (var i = 0; i < classes.length; i++) {
            for (var j = i + 1; j < classes.length; j++) {
                var si = startIndices[i];
                var sj = startIndices[j];
                var ci = nSupport[i];
                var cj = nSupport[j];
                var minProb = 1e-7;
                var coef1 = dualCoef[j - 1];
                var coef2 = dualCoef[i];
                var sum = 0;
                for (var k = 0; k < ci; k++) {
                    sum += kvalues[si + k] * coef1[si + k];
                }
                for (var k = 0; k < cj; k++) {
                    sum += kvalues[sj + k] * coef2[sj + k];
                }
                // NOTE: libsvm substracts the intercept from sum in its prediction
                // function. Here intercept is added because sci-kit negates the
                // intercept before passing it on to libsvm for prediction.
                // For more info see github following issue:
                // https://github.com/oppia/oppia/issues/4166
                sum += intercept[p];
                // The following approach to calculate pairwise probabilities was
                // proposed by platt. For more info on LibSVM's implementation
                // of platt scaling, read following paper:
                // https://www.csie.ntu.edu.tw/~cjlin/papers/plattprob.pdf
                // Also take a look at following implementation by LibSVM:
                // https://github.com/arnaudsj/libsvm/blob/master/svm.cpp#L2552
                var f = probA[p] * sum + probB[p];
                var prob = 0;
                if (f >= 0) {
                    prob = Math.exp(-f) / (1 + Math.exp(-f));
                }
                else {
                    prob = 1 / (1 + Math.exp(f));
                }
                prob = Math.min(Math.max(prob, minProb), 1 - minProb);
                pairwiseProb[i][j] = prob;
                pairwiseProb[j][i] = 1 - prob;
                p++;
            }
        }
        var probabilities = this.calculateMulticlassProbabilities(classes.length, pairwiseProb);
        var maxProbIdx = 0;
        for (var i = 1; i < classes.length; i++) {
            if (probabilities[i] > probabilities[maxProbIdx]) {
                maxProbIdx = i;
            }
        }
        var predictedLabel = classes[maxProbIdx];
        var prediction = this.predictionResultObjectFactory.createNew(predictedLabel, probabilities[maxProbIdx]);
        return prediction;
    };
    var _a;
    SVMPredictionService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof PredictionResultObjectFactory_1.PredictionResultObjectFactory !== "undefined" && PredictionResultObjectFactory_1.PredictionResultObjectFactory) === "function" ? _a : Object])
    ], SVMPredictionService);
    return SVMPredictionService;
}());
exports.SVMPredictionService = SVMPredictionService;
angular.module('oppia').factory('SVMPredictionService', static_1.downgradeInjectable(SVMPredictionService));


/***/ }),

/***/ "./extensions/classifiers/text-input.tokenizer.ts":
/*!********************************************************!*\
  !*** ./extensions/classifiers/text-input.tokenizer.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Tokenizer for TextInput.
 *
 * Note: This is a simple tokenizer for tokenizing text input. The parameter
 * n_grams is used for deciding if we need to add n_gram tokens other than
 * the unigram tokens. As of now, we are only interested in unigrams but if
 * needed in the future, this tokenizer should be able to generate n-grams
 * also.
 *
 * For reference: https://github.com/scikit-learn/scikit-learn/
 *     blob/master/sklearn/feature_extraction/text.py#L541
 */
// TODO(anmol): Add functionality to add n_grams, remove stop words.
angular.module('oppia').factory('TextInputTokenizer', [function () {
        return {
            generateTokens: function (textInput) {
                var tokenizedTextInput;
                // The default regexp select tokens of 2 or more alphanumeric
                // characters (punctuation is completely ignored and always treated
                // as a token separator).
                var tokenPattern = '\\b\\w\\w+\\b';
                var regexp = new RegExp(tokenPattern, 'g');
                tokenizedTextInput = textInput.match(regexp);
                return tokenizedTextInput;
            }
        };
    }]);


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/MultipleChoiceInput.ts":
/*!****************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/MultipleChoiceInput.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for MultipleChoiceInput interaction.
 */
__webpack_require__(/*! interactions/MultipleChoiceInput/static/multiple_choice_input.css */ "./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts */ "./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/multiple-choice-input-validation.service.ts */ "./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-validation.service.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/oppia-interactive-multiple-choice-input.directive.ts */ "./extensions/interactions/MultipleChoiceInput/directives/oppia-interactive-multiple-choice-input.directive.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/oppia-response-multiple-choice-input.directive.ts */ "./extensions/interactions/MultipleChoiceInput/directives/oppia-response-multiple-choice-input.directive.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/oppia-short-response-multiple-choice-input.directive.ts */ "./extensions/interactions/MultipleChoiceInput/directives/oppia-short-response-multiple-choice-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts":
/*!*******************************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
angular.module('oppia').factory('MultipleChoiceInputRulesService', [function () {
        return {
            Equals: function (answer, inputs) {
                return answer === inputs.x;
            }
        };
    }]);


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-validation.service.ts":
/*!************************************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-validation.service.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var MultipleChoiceInputValidationService = /** @class */ (function () {
    function MultipleChoiceInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    MultipleChoiceInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        var warningsList = [];
        this.baseInteractionValidationServiceInstance.requireCustomizationArguments(customizationArgs, ['choices']);
        var areAnyChoicesEmpty = false;
        var areAnyChoicesDuplicated = false;
        var seenChoices = [];
        var numChoices = customizationArgs.choices.value.length;
        for (var i = 0; i < customizationArgs.choices.value.length; i++) {
            var choice = customizationArgs.choices.value[i];
            if (choice.trim().length === 0) {
                areAnyChoicesEmpty = true;
            }
            if (seenChoices.indexOf(choice) !== -1) {
                areAnyChoicesDuplicated = true;
            }
            seenChoices.push(choice);
        }
        if (areAnyChoicesEmpty) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please ensure the choices are nonempty.'
            });
        }
        if (areAnyChoicesDuplicated) {
            warningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                message: 'Please ensure the choices are unique.'
            });
        }
        return warningsList;
    };
    MultipleChoiceInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = [];
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        var numChoices = customizationArgs.choices.value.length;
        var selectedEqualsChoices = [];
        for (var i = 0; i < answerGroups.length; i++) {
            var rules = answerGroups[i].rules;
            for (var j = 0; j < rules.length; j++) {
                if (rules[j].type === 'Equals') {
                    var choicePreviouslySelected = (selectedEqualsChoices.indexOf(rules[j].inputs.x) !== -1);
                    if (!choicePreviouslySelected) {
                        selectedEqualsChoices.push(rules[j].inputs.x);
                    }
                    else {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                            message: 'Please ensure rule ' + String(j + 1) +
                                ' in group ' + String(i + 1) + ' is not equaling the ' +
                                'same multiple choice option as another rule.'
                        });
                    }
                    if (rules[j].inputs.x >= numChoices) {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.CRITICAL,
                            message: 'Please ensure rule ' + String(j + 1) +
                                ' in group ' + String(i + 1) + ' refers to a valid choice.'
                        });
                    }
                }
            }
        }
        warningsList = warningsList.concat(this.baseInteractionValidationServiceInstance.getAnswerGroupWarnings(answerGroups, stateName));
        // Only require a default rule if some choices have not been taken care
        // of by rules.
        if (selectedEqualsChoices.length < numChoices) {
            if (!defaultOutcome || defaultOutcome.isConfusing(stateName)) {
                warningsList.push({
                    type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                    message: 'Please add something for Oppia to say in the ' +
                        '\"All other answers\" response.'
                });
            }
        }
        return warningsList;
    };
    var _a;
    MultipleChoiceInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], MultipleChoiceInputValidationService);
    return MultipleChoiceInputValidationService;
}());
exports.MultipleChoiceInputValidationService = MultipleChoiceInputValidationService;
angular.module('oppia').factory('MultipleChoiceInputValidationService', static_1.downgradeInjectable(MultipleChoiceInputValidationService));


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/directives/oppia-interactive-multiple-choice-input.directive.ts":
/*!*********************************************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/directives/oppia-interactive-multiple-choice-input.directive.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the MultipleChoiceInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts */ "./extensions/interactions/MultipleChoiceInput/directives/multiple-choice-input-rules.service.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaInteractiveMultipleChoiceInput', [
    'HtmlEscaperService', 'MultipleChoiceInputRulesService',
    'UrlInterpolationService',
    function (HtmlEscaperService, MultipleChoiceInputRulesService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MultipleChoiceInput/directives/' +
                'multiple-choice-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'CurrentInteractionService',
                function ($attrs, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.choices = HtmlEscaperService.escapedJsonToObj($attrs.choicesWithValue);
                    ctrl.answer = null;
                    ctrl.submitAnswer = function (answer) {
                        if (answer === null) {
                            return;
                        }
                        answer = parseInt(answer, 10);
                        CurrentInteractionService.onSubmit(answer, MultipleChoiceInputRulesService);
                    };
                    CurrentInteractionService.registerCurrentInteraction(null, null);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/directives/oppia-response-multiple-choice-input.directive.ts":
/*!******************************************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/directives/oppia-response-multiple-choice-input.directive.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the MultipleChoiceInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseMultipleChoiceInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MultipleChoiceInput/directives/' +
                'multiple-choice-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    var _choices = HtmlEscaperService.escapedJsonToObj($attrs.choices);
                    ctrl.response = _choices[_answer];
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/directives/oppia-short-response-multiple-choice-input.directive.ts":
/*!************************************************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/directives/oppia-short-response-multiple-choice-input.directive.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the MultipleChoiceInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! filters/string-utility-filters/convert-to-plain-text.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/convert-to-plain-text.filter.ts");
__webpack_require__(/*! filters/string-utility-filters/truncate-at-first-line.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseMultipleChoiceInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/MultipleChoiceInput/directives/' +
                'multiple-choice-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', '$filter',
                function ($attrs, $filter) {
                    var ctrl = this;
                    var _answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    var _choices = HtmlEscaperService.escapedJsonToObj($attrs.choices);
                    var response = $filter('convertToPlainText')(_choices[_answer]);
                    ctrl.response = $filter('truncateAtFirstLine')(response);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css":
/*!**************************************************************************************!*\
  !*** ./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js!./multiple_choice_input.css */ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./extensions/interactions/NumericInput/NumericInput.ts":
/*!**************************************************************!*\
  !*** ./extensions/interactions/NumericInput/NumericInput.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for NumericInput interaction.
 */
__webpack_require__(/*! interactions/NumericInput/directives/numeric-input-rules.service.ts */ "./extensions/interactions/NumericInput/directives/numeric-input-rules.service.ts");
__webpack_require__(/*! interactions/NumericInput/directives/numeric-input-validation.service.ts */ "./extensions/interactions/NumericInput/directives/numeric-input-validation.service.ts");
__webpack_require__(/*! interactions/NumericInput/directives/oppia-interactive-numeric-input.directive.ts */ "./extensions/interactions/NumericInput/directives/oppia-interactive-numeric-input.directive.ts");
__webpack_require__(/*! interactions/NumericInput/directives/oppia-response-numeric-input.directive.ts */ "./extensions/interactions/NumericInput/directives/oppia-response-numeric-input.directive.ts");
__webpack_require__(/*! interactions/NumericInput/directives/oppia-short-response-numeric-input.directive.ts */ "./extensions/interactions/NumericInput/directives/oppia-short-response-numeric-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/NumericInput/directives/numeric-input-rules.service.ts":
/*!****************************************************************************************!*\
  !*** ./extensions/interactions/NumericInput/directives/numeric-input-rules.service.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
angular.module('oppia').factory('NumericInputRulesService', [function () {
        return {
            Equals: function (answer, inputs) {
                return answer === inputs.x;
            },
            IsLessThan: function (answer, inputs) {
                return answer < inputs.x;
            },
            IsGreaterThan: function (answer, inputs) {
                return answer > inputs.x;
            },
            IsLessThanOrEqualTo: function (answer, inputs) {
                return answer <= inputs.x;
            },
            IsGreaterThanOrEqualTo: function (answer, inputs) {
                return answer >= inputs.x;
            },
            IsInclusivelyBetween: function (answer, inputs) {
                // TODO(wxy): have frontend validation at creation time to check that
                // inputs.a <= inputs.b
                return answer >= inputs.a && answer <= inputs.b;
            },
            IsWithinTolerance: function (answer, inputs) {
                return answer >= inputs.x - inputs.tol &&
                    answer <= inputs.x + inputs.tol;
            }
        };
    }]);


/***/ }),

/***/ "./extensions/interactions/NumericInput/directives/numeric-input-validation.service.ts":
/*!*********************************************************************************************!*\
  !*** ./extensions/interactions/NumericInput/directives/numeric-input-validation.service.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Validator service for the interaction.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var base_interaction_validation_service_1 = __webpack_require__(/*! interactions/base-interaction-validation.service */ "./extensions/interactions/base-interaction-validation.service.ts");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var NumericInputValidationService = /** @class */ (function () {
    function NumericInputValidationService(baseInteractionValidationServiceInstance) {
        this.baseInteractionValidationServiceInstance = baseInteractionValidationServiceInstance;
    }
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    NumericInputValidationService.prototype.getCustomizationArgsWarnings = function (customizationArgs) {
        return [];
    };
    // TODO(#7176): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'customizationArgs' is a dict with possible underscore_cased
    // keys which give tslint errors against underscore_casing in favor of
    // camelCasing.
    NumericInputValidationService.prototype.getAllWarnings = function (stateName, customizationArgs, answerGroups, defaultOutcome) {
        var warningsList = [];
        warningsList = warningsList.concat(this.getCustomizationArgsWarnings(customizationArgs));
        /*
        Store an answer range for every rule, then check for redundant
        ranges. A range is an object of the form:
        {
          lb: float, lower bound
          ub: float, upper bound
          lbi: bool, is lower bound inclusive
          ubi: bool, is upper bound inclusive
        }
        */
        var setLowerAndUpperBounds = function (range, lb, ub, lbi, ubi) {
            range.lb = lb;
            range.ub = ub;
            range.lbi = lbi;
            range.ubi = ubi;
        };
        var isEnclosedBy = function (ra, rb) {
            // Checks if range ra is enclosed by range rb.
            var lowerBoundConditionIsSatisfied = (rb.lb < ra.lb) || (rb.lb === ra.lb && (!ra.lbi || rb.lbi));
            var upperBoundConditionIsSatisfied = (rb.ub > ra.ub) || (rb.ub === ra.ub && (!ra.ubi || rb.ubi));
            return lowerBoundConditionIsSatisfied &&
                upperBoundConditionIsSatisfied;
        };
        var ranges = [];
        for (var i = 0; i < answerGroups.length; i++) {
            var rules = answerGroups[i].rules;
            for (var j = 0; j < rules.length; j++) {
                var rule = rules[j];
                var range = {
                    answerGroupIndex: i + 1,
                    ruleIndex: j + 1,
                    lb: null,
                    ub: null,
                    lbi: false,
                    ubi: false,
                };
                switch (rule.type) {
                    case 'Equals':
                        var x = rule.inputs.x;
                        setLowerAndUpperBounds(range, x, x, true, true);
                        break;
                    case 'IsInclusivelyBetween':
                        var a = rule.inputs.a;
                        var b = rule.inputs.b;
                        setLowerAndUpperBounds(range, a, b, true, true);
                        break;
                    case 'IsGreaterThan':
                        var x = rule.inputs.x;
                        setLowerAndUpperBounds(range, x, Infinity, false, false);
                        break;
                    case 'IsGreaterThanOrEqualTo':
                        var x = rule.inputs.x;
                        setLowerAndUpperBounds(range, x, Infinity, true, false);
                        break;
                    case 'IsLessThan':
                        var x = rule.inputs.x;
                        setLowerAndUpperBounds(range, -Infinity, x, false, false);
                        break;
                    case 'IsLessThanOrEqualTo':
                        var x = rule.inputs.x;
                        setLowerAndUpperBounds(range, -Infinity, x, false, true);
                        break;
                    case 'IsWithinTolerance':
                        var x = rule.inputs.x;
                        var tol = rule.inputs.tol;
                        setLowerAndUpperBounds(range, x - tol, x + tol, true, true);
                        break;
                    default:
                }
                for (var k = 0; k < ranges.length; k++) {
                    if (isEnclosedBy(range, ranges[k])) {
                        warningsList.push({
                            type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                            message: ('Rule ' + (j + 1) + ' from answer group ' +
                                (i + 1) + ' will never be matched because it ' +
                                'is made redundant by rule ' + ranges[k].ruleIndex +
                                ' from answer group ' + ranges[k].answerGroupIndex + '.')
                        });
                    }
                }
                ranges.push(range);
            }
        }
        warningsList = warningsList.concat(this.baseInteractionValidationServiceInstance.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
        return warningsList;
    };
    var _a;
    NumericInputValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [typeof (_a = typeof base_interaction_validation_service_1.baseInteractionValidationService !== "undefined" && base_interaction_validation_service_1.baseInteractionValidationService) === "function" ? _a : Object])
    ], NumericInputValidationService);
    return NumericInputValidationService;
}());
exports.NumericInputValidationService = NumericInputValidationService;
angular.module('oppia').factory('NumericInputValidationService', static_1.downgradeInjectable(NumericInputValidationService));


/***/ }),

/***/ "./extensions/interactions/NumericInput/directives/oppia-interactive-numeric-input.directive.ts":
/*!******************************************************************************************************!*\
  !*** ./extensions/interactions/NumericInput/directives/oppia-interactive-numeric-input.directive.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the NumericInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/NumericInput/directives/numeric-input-rules.service.ts */ "./extensions/interactions/NumericInput/directives/numeric-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
angular.module('oppia').directive('oppiaInteractiveNumericInput', [
    'UrlInterpolationService', function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/NumericInput/directives/' +
                'numeric-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'FocusManagerService', 'NumericInputRulesService',
                'WindowDimensionsService', 'CurrentInteractionService',
                function ($attrs, FocusManagerService, NumericInputRulesService, WindowDimensionsService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.answer = '';
                    ctrl.labelForFocusTarget = $attrs.labelForFocusTarget || null;
                    ctrl.NUMERIC_INPUT_FORM_SCHEMA = {
                        type: 'float',
                        ui_config: {}
                    };
                    var isAnswerValid = function () {
                        return (ctrl.answer !== undefined &&
                            ctrl.answer !== null && ctrl.answer !== '');
                    };
                    ctrl.submitAnswer = function (answer) {
                        if (isAnswerValid()) {
                            CurrentInteractionService.onSubmit(answer, NumericInputRulesService);
                        }
                    };
                    var submitAnswerFn = function () {
                        ctrl.submitAnswer(ctrl.answer);
                    };
                    CurrentInteractionService.registerCurrentInteraction(submitAnswerFn, isAnswerValid);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/NumericInput/directives/oppia-response-numeric-input.directive.ts":
/*!***************************************************************************************************!*\
  !*** ./extensions/interactions/NumericInput/directives/oppia-response-numeric-input.directive.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the NumericInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseNumericInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/NumericInput/directives/' +
                'numeric-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    // If the answer is an integer, omit the fractional part.
                    if (ctrl.answer % 1 === 0) {
                        ctrl.answer = Math.round(ctrl.answer);
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/NumericInput/directives/oppia-short-response-numeric-input.directive.ts":
/*!*********************************************************************************************************!*\
  !*** ./extensions/interactions/NumericInput/directives/oppia-short-response-numeric-input.directive.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the NumericInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseNumericInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/NumericInput/directives/' +
                'numeric-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                    // If the answer is an integer, omit the fractional part.
                    if (ctrl.answer % 1 === 0) {
                        ctrl.answer = Math.round(ctrl.answer);
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/TextInput.ts":
/*!********************************************************!*\
  !*** ./extensions/interactions/TextInput/TextInput.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for TextInput interaction.
 */
__webpack_require__(/*! interactions/TextInput/text-input-prediction.service.ts */ "./extensions/interactions/TextInput/text-input-prediction.service.ts");
__webpack_require__(/*! interactions/TextInput/directives/text-input-rules.service.ts */ "./extensions/interactions/TextInput/directives/text-input-rules.service.ts");
__webpack_require__(/*! interactions/TextInput/directives/text-input-validation.service.ts */ "./extensions/interactions/TextInput/directives/text-input-validation.service.ts");
__webpack_require__(/*! interactions/TextInput/directives/oppia-interactive-text-input.directive.ts */ "./extensions/interactions/TextInput/directives/oppia-interactive-text-input.directive.ts");
__webpack_require__(/*! interactions/TextInput/directives/oppia-response-text-input.directive.ts */ "./extensions/interactions/TextInput/directives/oppia-response-text-input.directive.ts");
__webpack_require__(/*! interactions/TextInput/directives/oppia-short-response-text-input.directive.ts */ "./extensions/interactions/TextInput/directives/oppia-short-response-text-input.directive.ts");


/***/ }),

/***/ "./extensions/interactions/TextInput/directives/oppia-interactive-text-input.directive.ts":
/*!************************************************************************************************!*\
  !*** ./extensions/interactions/TextInput/directives/oppia-interactive-text-input.directive.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the TextInput interaction.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! interactions/TextInput/directives/text-input-rules.service.ts */ "./extensions/interactions/TextInput/directives/text-input-rules.service.ts");
__webpack_require__(/*! pages/exploration-player-page/services/current-interaction.service.ts */ "./core/templates/dev/head/pages/exploration-player-page/services/current-interaction.service.ts");
__webpack_require__(/*! services/contextual/WindowDimensionsService.ts */ "./core/templates/dev/head/services/contextual/WindowDimensionsService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
__webpack_require__(/*! services/stateful/FocusManagerService.ts */ "./core/templates/dev/head/services/stateful/FocusManagerService.ts");
angular.module('oppia').directive('oppiaInteractiveTextInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/TextInput/directives/' +
                'text-input-interaction.directive.html'),
            controllerAs: '$ctrl',
            controller: [
                '$attrs', 'FocusManagerService', 'TextInputRulesService',
                'WindowDimensionsService', 'CurrentInteractionService',
                function ($attrs, FocusManagerService, TextInputRulesService, WindowDimensionsService, CurrentInteractionService) {
                    var ctrl = this;
                    ctrl.placeholder = HtmlEscaperService.escapedJsonToObj($attrs.placeholderWithValue);
                    ctrl.rows = (HtmlEscaperService.escapedJsonToObj($attrs.rowsWithValue));
                    ctrl.answer = '';
                    ctrl.labelForFocusTarget = $attrs.labelForFocusTarget || null;
                    ctrl.schema = {
                        type: 'unicode',
                        ui_config: {}
                    };
                    if (ctrl.placeholder) {
                        ctrl.schema.ui_config.placeholder = ctrl.placeholder;
                    }
                    if (ctrl.rows && ctrl.rows !== 1) {
                        ctrl.schema.ui_config.rows = ctrl.rows;
                    }
                    ctrl.submitAnswer = function (answer) {
                        if (!answer) {
                            return;
                        }
                        CurrentInteractionService.onSubmit(answer, TextInputRulesService);
                    };
                    var submitAnswerFn = function () {
                        ctrl.submitAnswer(ctrl.answer);
                    };
                    var validityCheckFn = function () {
                        return ctrl.answer.length > 0;
                    };
                    CurrentInteractionService.registerCurrentInteraction(submitAnswerFn, validityCheckFn);
                }
            ]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/directives/oppia-response-text-input.directive.ts":
/*!*********************************************************************************************!*\
  !*** ./extensions/interactions/TextInput/directives/oppia-response-text-input.directive.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the TextInput response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaResponseTextInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/TextInput/directives/' +
                'text-input-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/directives/oppia-short-response-text-input.directive.ts":
/*!***************************************************************************************************!*\
  !*** ./extensions/interactions/TextInput/directives/oppia-short-response-text-input.directive.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for the TextInput short response.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
__webpack_require__(/*! filters/string-utility-filters/truncate-at-first-line.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/truncate-at-first-line.filter.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
__webpack_require__(/*! services/HtmlEscaperService.ts */ "./core/templates/dev/head/services/HtmlEscaperService.ts");
angular.module('oppia').directive('oppiaShortResponseTextInput', [
    'HtmlEscaperService', 'UrlInterpolationService',
    function (HtmlEscaperService, UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {},
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/interactions/TextInput/directives/' +
                'text-input-short-response.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$attrs', function ($attrs) {
                    var ctrl = this;
                    ctrl.answer = HtmlEscaperService.escapedJsonToObj($attrs.answer);
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/directives/text-input-rules.service.ts":
/*!**********************************************************************************!*\
  !*** ./extensions/interactions/TextInput/directives/text-input-rules.service.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Rules service for the interaction.
 */
__webpack_require__(/*! filters/string-utility-filters/normalize-whitespace.filter.ts */ "./core/templates/dev/head/filters/string-utility-filters/normalize-whitespace.filter.ts");
angular.module('oppia').factory('TextInputRulesService', [
    '$filter', function ($filter) {
        return {
            Equals: function (answer, inputs) {
                var normalizedAnswer = $filter('normalizeWhitespace')(answer);
                var normalizedInput = $filter('normalizeWhitespace')(inputs.x);
                return normalizedAnswer.toLowerCase() === normalizedInput.toLowerCase();
            },
            FuzzyEquals: function (answer, inputs) {
                var normalizedAnswer = $filter('normalizeWhitespace')(answer);
                var answerString = normalizedAnswer.toLowerCase();
                var normalizedInput = $filter('normalizeWhitespace')(inputs.x);
                var inputString = normalizedInput.toLowerCase();
                if (inputString === answerString) {
                    return true;
                }
                var editDistance = [];
                for (var i = 0; i <= inputString.length; i++) {
                    editDistance.push([i]);
                }
                for (var j = 1; j <= answerString.length; j++) {
                    editDistance[0].push(j);
                }
                for (var i = 1; i <= inputString.length; i++) {
                    for (var j = 1; j <= answerString.length; j++) {
                        if (inputString.charAt(i - 1) === answerString.charAt(j - 1)) {
                            editDistance[i][j] = editDistance[i - 1][j - 1];
                        }
                        else {
                            editDistance[i][j] = Math.min(editDistance[i - 1][j - 1], editDistance[i][j - 1], editDistance[i - 1][j]) + 1;
                        }
                    }
                }
                return editDistance[inputString.length][answerString.length] === 1;
            },
            CaseSensitiveEquals: function (answer, inputs) {
                var normalizedAnswer = $filter('normalizeWhitespace')(answer);
                var normalizedInput = $filter('normalizeWhitespace')(inputs.x);
                return normalizedAnswer === normalizedInput;
            },
            StartsWith: function (answer, inputs) {
                var normalizedAnswer = $filter('normalizeWhitespace')(answer);
                var normalizedInput = $filter('normalizeWhitespace')(inputs.x);
                return normalizedAnswer.toLowerCase().indexOf(normalizedInput.toLowerCase()) === 0;
            },
            Contains: function (answer, inputs) {
                var normalizedAnswer = $filter('normalizeWhitespace')(answer);
                var normalizedInput = $filter('normalizeWhitespace')(inputs.x);
                return normalizedAnswer.toLowerCase().indexOf(normalizedInput.toLowerCase()) !== -1;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/directives/text-input-validation.service.ts":
/*!***************************************************************************************!*\
  !*** ./extensions/interactions/TextInput/directives/text-input-validation.service.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Validator service for the interaction.
 */
__webpack_require__(/*! interactions/base-interaction-validation.service.ts */ "./extensions/interactions/base-interaction-validation.service.ts");
angular.module('oppia').factory('TextInputValidationService', [
    'baseInteractionValidationService', 'INTERACTION_SPECS', 'WARNING_TYPES',
    function (baseInteractionValidationService, INTERACTION_SPECS, WARNING_TYPES) {
        return {
            getCustomizationArgsWarnings: function (customizationArgs) {
                var warningsList = [];
                baseInteractionValidationService.requireCustomizationArguments(customizationArgs, ['placeholder', 'rows']);
                var placeholder = customizationArgs.placeholder.value;
                if (!angular.isString(placeholder)) {
                    warningsList.push({
                        type: WARNING_TYPES.ERROR,
                        message: ('Placeholder text must be a string.')
                    });
                }
                var isInt = function (n) {
                    return angular.isNumber(n) && n % 1 === 0;
                };
                var rows = customizationArgs.rows.value;
                if (isInt(rows)) {
                    var textSpecs = INTERACTION_SPECS.TextInput;
                    var customizationArgSpecs = textSpecs.customization_arg_specs;
                    var rowsSpecs = customizationArgSpecs[1];
                    var minRows = rowsSpecs.schema.validators[0].min_value;
                    var maxRows = rowsSpecs.schema.validators[1].max_value;
                    if (rows < minRows || rows > maxRows) {
                        warningsList.push({
                            type: WARNING_TYPES.ERROR,
                            message: ('Number of rows must be between ' + minRows + ' and ' +
                                maxRows + '.')
                        });
                    }
                }
                else {
                    warningsList.push({
                        type: WARNING_TYPES.ERROR,
                        message: ('Number of rows must be integral.')
                    });
                }
                return warningsList;
            },
            getAllWarnings: function (stateName, customizationArgs, answerGroups, defaultOutcome) {
                return this.getCustomizationArgsWarnings(customizationArgs).concat(baseInteractionValidationService.getAllOutcomeWarnings(answerGroups, defaultOutcome, stateName));
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/TextInput/text-input-prediction.service.ts":
/*!****************************************************************************!*\
  !*** ./extensions/interactions/TextInput/text-input-prediction.service.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2017 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview TextInput interaction prediction functions.
 *
 * IMPORTANT NOTE: The prediction function uses the classifier data
 * of trained model (text classifier model) for inference. These functions
 * must be changed if there are any changes in corresponding classifier training
 * function on Oppia-ml.
 */
__webpack_require__(/*! classifiers/svm-prediction.service.ts */ "./extensions/classifiers/svm-prediction.service.ts");
__webpack_require__(/*! classifiers/text-input.tokenizer.ts */ "./extensions/classifiers/text-input.tokenizer.ts");
__webpack_require__(/*! classifiers/count-vectorizer.service.ts */ "./extensions/classifiers/count-vectorizer.service.ts");
__webpack_require__(/*! interactions/interactions-extension.constants.ajs.ts */ "./extensions/interactions/interactions-extension.constants.ajs.ts");
angular.module('oppia').factory('TextInputPredictionService', [
    'CountVectorizerService', 'SVMPredictionService',
    'TextInputTokenizer', 'TEXT_INPUT_PREDICTION_SERVICE_THRESHOLD', function (CountVectorizerService, SVMPredictionService, TextInputTokenizer, TEXT_INPUT_PREDICTION_SERVICE_THRESHOLD) {
        return {
            predict: function (classifierData, textInput) {
                var cvVocabulary = classifierData.cv_vocabulary;
                var svmData = classifierData.SVM;
                // Tokenize the text input.
                textInput = textInput.toLowerCase();
                var textInputTokens = TextInputTokenizer.generateTokens(textInput);
                var textVector = CountVectorizerService.vectorize(textInputTokens, cvVocabulary);
                var predictionResult = SVMPredictionService.predict(svmData, textVector);
                if (predictionResult.predictionConfidence >
                    TEXT_INPUT_PREDICTION_SERVICE_THRESHOLD) {
                    return predictionResult.predictionLabel;
                }
                return -1;
            }
        };
    }
]);


/***/ }),

/***/ "./extensions/interactions/base-interaction-validation.service.ts":
/*!************************************************************************!*\
  !*** ./extensions/interactions/base-interaction-validation.service.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Base validation service for interactions.
 */
var static_1 = __webpack_require__(/*! @angular/upgrade/static */ "./node_modules/@angular/upgrade/bundles/upgrade-static.umd.js");
var core_1 = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var app_constants_1 = __webpack_require__(/*! app.constants */ "./core/templates/dev/head/app.constants.ts");
var baseInteractionValidationService = /** @class */ (function () {
    function baseInteractionValidationService() {
    }
    // 'argNames' is an array of top-level customization argument names (such
    // as 'chocies') used to verify the basic structure of the input
    // customization arguments object.
    baseInteractionValidationService.prototype.requireCustomizationArguments = function (customizationArguments, argNames) {
        var missingArgs = [];
        for (var i = 0; i < argNames.length; i++) {
            if (!customizationArguments.hasOwnProperty(argNames[i])) {
                missingArgs.push(argNames[i]);
            }
        }
        if (missingArgs.length > 0) {
            if (missingArgs.length === 1) {
                throw 'Expected customization arguments to have property: ' +
                    missingArgs[0];
            }
            else {
                throw 'Expected customization arguments to have properties: ' +
                    missingArgs.join(', ');
            }
        }
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'answerGroups' is an answer group domain object and can be
    // typed after AnswerGroupObjectFactory.ts is upgraded.
    baseInteractionValidationService.prototype.getAnswerGroupWarnings = function (answerGroups, stateName) {
        var partialWarningsList = [];
        // This does not check the default outcome.
        for (var i = 0; i < answerGroups.length; i++) {
            if (answerGroups[i].outcome.isConfusing(stateName)) {
                partialWarningsList.push({
                    type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                    message: ('Please specify what Oppia should do in answer group ' +
                        String(i + 1) + '.')
                });
            }
            if (answerGroups[i].outcome.dest === stateName &&
                answerGroups[i].outcome.labelledAsCorrect) {
                partialWarningsList.push({
                    type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                    message: ('In answer group ' + String(i + 1) + ', self-loops should ' +
                        'not be labelled as correct.')
                });
            }
        }
        return partialWarningsList;
    };
    baseInteractionValidationService.prototype.getDefaultOutcomeWarnings = function (defaultOutcome, stateName) {
        var partialWarningsList = [];
        if (defaultOutcome && defaultOutcome.isConfusing(stateName)) {
            partialWarningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: ('Please add feedback for the user in the [All other answers] ' +
                    'rule.')
            });
        }
        if (defaultOutcome && defaultOutcome.dest === stateName &&
            defaultOutcome.labelledAsCorrect) {
            partialWarningsList.push({
                type: app_constants_1.AppConstants.WARNING_TYPES.ERROR,
                message: ('In the [All other answers] group, self-loops should not be ' +
                    'labelled as correct.')
            });
        }
        return partialWarningsList;
    };
    // TODO(#7165): Replace 'any' with the exact type. This has been kept as
    // 'any' because 'answerGroups' is an answer group domain object and can be
    // typed after AnswerGroupObjectFactory.ts is upgraded.
    baseInteractionValidationService.prototype.getAllOutcomeWarnings = function (answerGroups, defaultOutcome, stateName) {
        return (this.getAnswerGroupWarnings(answerGroups, stateName).concat(this.getDefaultOutcomeWarnings(defaultOutcome, stateName)));
    };
    baseInteractionValidationService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], baseInteractionValidationService);
    return baseInteractionValidationService;
}());
exports.baseInteractionValidationService = baseInteractionValidationService;
angular.module('oppia').factory('baseInteractionValidationService', static_1.downgradeInjectable(baseInteractionValidationService));


/***/ }),

/***/ "./extensions/interactions/interaction_specs.json":
/*!********************************************************!*\
  !*** ./extensions/interactions/interaction_specs.json ***!
  \********************************************************/
/*! exports provided: ImageClickInput, NumberWithUnits, NumericInput, DragAndDropSortInput, ItemSelectionInput, Continue, GraphInput, EndExploration, SetInput, CodeRepl, LogicProof, MultipleChoiceInput, PencilCodeEditor, TextInput, InteractiveMap, MusicNotesInput, MathExpressionInput, FractionInput, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"ImageClickInput\":{\"can_have_solution\":false,\"show_generic_submit_button\":false,\"instructions\":\"Click on the image\",\"is_trainable\":false,\"narrow_instructions\":\"View image\",\"description\":\"Allows learners to click on regions of an image.\",\"needs_summary\":false,\"name\":\"Image Region\",\"answer_type\":\"ClickOnImage\",\"is_linear\":false,\"display_mode\":\"supplemental\",\"id\":\"ImageClickInput\",\"customization_arg_specs\":[{\"description\":\"Image\",\"name\":\"imageAndRegions\",\"schema\":{\"obj_type\":\"ImageWithRegions\",\"type\":\"custom\"},\"default_value\":{\"imagePath\":\"\",\"labeledRegions\":[]}},{\"description\":\"Highlight regions when the learner hovers over them\",\"name\":\"highlightRegionsOnHover\",\"schema\":{\"type\":\"bool\"},\"default_value\":false}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"IsInRegion\":\"is in the region {{x|UnicodeString}}\"}},\"NumberWithUnits\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":null,\"is_trainable\":false,\"narrow_instructions\":null,\"description\":\"Allows learners to enter number with units.\",\"needs_summary\":false,\"name\":\"Number With Units\",\"answer_type\":\"NumberWithUnits\",\"is_linear\":false,\"display_mode\":\"inline\",\"id\":\"NumberWithUnits\",\"customization_arg_specs\":[],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"IsEqualTo\":\"is equal to {{f|NumberWithUnits}}\",\"IsEquivalentTo\":\"is equivalent to {{f|NumberWithUnits}}\"}},\"NumericInput\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":null,\"is_trainable\":false,\"narrow_instructions\":null,\"description\":\"Allows learners to enter integers and floating point numbers.\",\"needs_summary\":false,\"name\":\"Number Input\",\"answer_type\":\"Real\",\"is_linear\":false,\"display_mode\":\"inline\",\"id\":\"NumericInput\",\"customization_arg_specs\":[],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"Equals\":\"is equal to {{x|Real}}\",\"IsGreaterThanOrEqualTo\":\"is greater than or equal to {{x|Real}}\",\"IsLessThanOrEqualTo\":\"is less than or equal to {{x|Real}}\",\"IsLessThan\":\"is less than {{x|Real}}\",\"IsWithinTolerance\":\"is within {{tol|Real}} of {{x|Real}}\",\"IsGreaterThan\":\"is greater than {{x|Real}}\",\"IsInclusivelyBetween\":\"is between {{a|Real}} and {{b|Real}}, inclusive\"}},\"DragAndDropSortInput\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":\"Drag and drop items\",\"is_trainable\":false,\"narrow_instructions\":\"Drag and drop items\",\"description\":\"Allows learners to drag and drop items for sorting.\",\"needs_summary\":true,\"name\":\"Drag And Drop Sort\",\"answer_type\":\"ListOfSetsOfHtmlStrings\",\"is_linear\":false,\"display_mode\":\"supplemental\",\"id\":\"DragAndDropSortInput\",\"customization_arg_specs\":[{\"description\":\"Items for drag and drop\",\"name\":\"choices\",\"schema\":{\"items\":{\"type\":\"html\",\"ui_config\":{\"hide_complex_extensions\":true,\"placeholder\":\"Enter an option for the learner to drag and drop.\"}},\"type\":\"list\",\"validators\":[{\"min_value\":1,\"id\":\"has_length_at_least\"}],\"ui_config\":{\"add_element_text\":\"Add a new item\"}},\"default_value\":[\"\"]},{\"description\":\"Allow multiple sort items in the same position\",\"name\":\"allowMultipleItemsInSamePosition\",\"schema\":{\"type\":\"bool\"},\"default_value\":false}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"HasElementXAtPositionY\":\"has element {{x|DragAndDropHtmlString}} at position {{y|DragAndDropPositiveInt}}\",\"IsEqualToOrdering\":\"is equal to ordering {{x|ListOfSetsOfHtmlStrings}}\",\"HasElementXBeforeElementY\":\"has element {{x|DragAndDropHtmlString}} before element {{y|DragAndDropHtmlString}}\",\"IsEqualToOrderingWithOneItemAtIncorrectPosition\":\"is equal to ordering with one item at incorrect position {{x|ListOfSetsOfHtmlStrings}}\"}},\"ItemSelectionInput\":{\"can_have_solution\":false,\"show_generic_submit_button\":false,\"instructions\":null,\"is_trainable\":false,\"narrow_instructions\":null,\"description\":\"Allows learners to select various options.\",\"needs_summary\":false,\"name\":\"Item Selection\",\"answer_type\":\"SetOfHtmlString\",\"is_linear\":false,\"display_mode\":\"inline\",\"id\":\"ItemSelectionInput\",\"customization_arg_specs\":[{\"description\":\"Minimum number of selections permitted.\",\"name\":\"minAllowableSelectionCount\",\"schema\":{\"type\":\"int\",\"validators\":[{\"min_value\":0,\"id\":\"is_at_least\"}]},\"default_value\":1},{\"description\":\"Maximum number of selections permitted\",\"name\":\"maxAllowableSelectionCount\",\"schema\":{\"type\":\"int\",\"validators\":[{\"min_value\":1,\"id\":\"is_at_least\"}]},\"default_value\":1},{\"description\":\"Items for selection\",\"name\":\"choices\",\"schema\":{\"items\":{\"type\":\"html\",\"ui_config\":{\"hide_complex_extensions\":true,\"placeholder\":\"Sample item answer\"}},\"type\":\"list\",\"ui_config\":{\"add_element_text\":\"Add item for selection\"}},\"default_value\":[\"\"]}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"DoesNotContainAtLeastOneOf\":\"omits at least one of {{x|SetOfHtmlString}}\",\"IsProperSubsetOf\":\"is a proper subset of {{x|SetOfHtmlString}}\",\"ContainsAtLeastOneOf\":\"contains at least one of {{x|SetOfHtmlString}}\",\"Equals\":\"is equal to {{x|SetOfHtmlString}}\"}},\"Continue\":{\"can_have_solution\":false,\"show_generic_submit_button\":false,\"instructions\":null,\"is_trainable\":false,\"narrow_instructions\":null,\"description\":\"A simple 'go to next state' button.\",\"needs_summary\":false,\"name\":\"Continue Button\",\"answer_type\":null,\"is_linear\":true,\"display_mode\":\"inline\",\"id\":\"Continue\",\"customization_arg_specs\":[{\"description\":\"Button label\",\"name\":\"buttonText\",\"schema\":{\"type\":\"unicode\"},\"default_value\":\"Continue\"}],\"is_terminal\":false,\"default_outcome_heading\":\"When the button is clicked\",\"rule_descriptions\":{}},\"GraphInput\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":\"Create a graph\",\"is_trainable\":false,\"narrow_instructions\":\"View graph\",\"description\":\"Allows learners to create and manipulate graphs.\",\"needs_summary\":true,\"name\":\"Graph Theory\",\"answer_type\":\"Graph\",\"is_linear\":false,\"display_mode\":\"supplemental\",\"id\":\"GraphInput\",\"customization_arg_specs\":[{\"description\":\"Initial graph\",\"name\":\"graph\",\"schema\":{\"obj_type\":\"Graph\",\"type\":\"custom\"},\"default_value\":{\"isWeighted\":false,\"edges\":[{\"src\":0,\"dst\":1,\"weight\":1},{\"src\":1,\"dst\":2,\"weight\":1}],\"isDirected\":false,\"vertices\":[{\"x\":150,\"y\":50,\"label\":\"\"},{\"x\":200,\"y\":50,\"label\":\"\"},{\"x\":150,\"y\":100,\"label\":\"\"}],\"isLabeled\":false}},{\"description\":\"Allow learner to add vertices\",\"name\":\"canAddVertex\",\"schema\":{\"type\":\"bool\"},\"default_value\":false},{\"description\":\"Allow learner to delete vertices\",\"name\":\"canDeleteVertex\",\"schema\":{\"type\":\"bool\"},\"default_value\":false},{\"description\":\"Allow learner to move vertices\",\"name\":\"canMoveVertex\",\"schema\":{\"type\":\"bool\"},\"default_value\":true},{\"description\":\"Allow learner to edit vertex labels\",\"name\":\"canEditVertexLabel\",\"schema\":{\"type\":\"bool\"},\"default_value\":false},{\"description\":\"Allow learner to add edges\",\"name\":\"canAddEdge\",\"schema\":{\"type\":\"bool\"},\"default_value\":true},{\"description\":\"Allow learner to delete edges\",\"name\":\"canDeleteEdge\",\"schema\":{\"type\":\"bool\"},\"default_value\":true},{\"description\":\"Allow learner to edit edge weights\",\"name\":\"canEditEdgeWeight\",\"schema\":{\"type\":\"bool\"},\"default_value\":false}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"IsIsomorphicTo\":\"is isomorphic to {{g|Graph}}, including matching labels\"}},\"EndExploration\":{\"can_have_solution\":false,\"show_generic_submit_button\":false,\"instructions\":null,\"is_trainable\":false,\"narrow_instructions\":null,\"description\":\"Ends the exploration, and suggests recommendations for explorations to try next.\",\"needs_summary\":false,\"name\":\"End Exploration\",\"answer_type\":null,\"is_linear\":false,\"display_mode\":\"inline\",\"id\":\"EndExploration\",\"customization_arg_specs\":[{\"description\":\"IDs of explorations to recommend to the learner (at most 3 are shown). The ID of an exploration is the string of characters appearing after '/explore/' in the URL bar.\",\"name\":\"recommendedExplorationIds\",\"schema\":{\"items\":{\"type\":\"unicode\"},\"type\":\"list\",\"ui_config\":{\"add_element_text\":\"Add exploration ID\"}},\"default_value\":[]}],\"is_terminal\":true,\"default_outcome_heading\":null,\"rule_descriptions\":{}},\"SetInput\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":null,\"is_trainable\":false,\"narrow_instructions\":null,\"description\":\"Allows learners to enter an unordered set of strings.\",\"needs_summary\":false,\"name\":\"Set Input\",\"answer_type\":\"SetOfUnicodeString\",\"is_linear\":false,\"display_mode\":\"inline\",\"id\":\"SetInput\",\"customization_arg_specs\":[],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"HasElementsNotIn\":\"has elements not in {{x|SetOfUnicodeString}}\",\"Equals\":\"is equal to {{x|SetOfUnicodeString}}\",\"IsSupersetOf\":\"is a proper superset of {{x|SetOfUnicodeString}}\",\"OmitsElementsIn\":\"omits some elements of {{x|SetOfUnicodeString}}\",\"HasElementsIn\":\"has elements in common with {{x|SetOfUnicodeString}}\",\"IsSubsetOf\":\"is a proper subset of {{x|SetOfUnicodeString}}\",\"IsDisjointFrom\":\"has no elements in common with {{x|SetOfUnicodeString}}\"}},\"CodeRepl\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":\"Type code in the editor\",\"is_trainable\":true,\"narrow_instructions\":\"Go to code editor\",\"description\":\"Allows learners to enter code and get it evaluated.\",\"needs_summary\":true,\"name\":\"Code Editor\",\"answer_type\":\"CodeEvaluation\",\"is_linear\":false,\"display_mode\":\"supplemental\",\"id\":\"CodeRepl\",\"customization_arg_specs\":[{\"description\":\"Programming language\",\"name\":\"language\",\"schema\":{\"type\":\"unicode\",\"choices\":[\"python\"]},\"default_value\":\"python\"},{\"description\":\"Initial code displayed\",\"name\":\"placeholder\",\"schema\":{\"type\":\"unicode\",\"ui_config\":{\"coding_mode\":\"none\"}},\"default_value\":\"# Type your code here.\"},{\"description\":\"Code to prepend to the learner's submission\",\"name\":\"preCode\",\"schema\":{\"type\":\"unicode\",\"ui_config\":{\"coding_mode\":\"none\"}},\"default_value\":\"\"},{\"description\":\"Code to append after the learner's submission\",\"name\":\"postCode\",\"schema\":{\"type\":\"unicode\",\"ui_config\":{\"coding_mode\":\"none\"}},\"default_value\":\"\"}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"OutputEquals\":\"has output equal to {{x|CodeString}}\",\"CodeContains\":\"has code that contains {{x|CodeString}}\",\"CodeEquals\":\"has code equal to {{x|CodeString}}\",\"ResultsInError\":\"results in an error when run\",\"ErrorContains\":\"has error message that contains {{x|UnicodeString}}\",\"OutputContains\":\"has output that contains {{x|CodeString}}\",\"CodeDoesNotContain\":\"has code that does not contain {{x|CodeString}}\"}},\"LogicProof\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":\"Construct a proof\",\"is_trainable\":false,\"narrow_instructions\":\"Construct a proof\",\"description\":\"Allows learners to write proofs for simple logical statements.\",\"needs_summary\":true,\"name\":\"Logic Proof\",\"answer_type\":\"CheckedProof\",\"is_linear\":false,\"display_mode\":\"supplemental\",\"id\":\"LogicProof\",\"customization_arg_specs\":[{\"description\":\"Question to ask\",\"name\":\"question\",\"schema\":{\"obj_type\":\"LogicQuestion\",\"type\":\"custom\"},\"default_value\":{\"assumptions\":[{\"arguments\":[],\"top_kind_name\":\"variable\",\"dummies\":[],\"top_operator_name\":\"p\"}],\"results\":[{\"arguments\":[],\"top_kind_name\":\"variable\",\"dummies\":[],\"top_operator_name\":\"p\"}],\"default_proof_string\":\"\"}}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"Correct\":\"is correct\",\"NotCorrect\":\"is not correct\",\"NotCorrectByCategory\":\"is not correct due to {{c|LogicErrorCategory}}\"}},\"MultipleChoiceInput\":{\"can_have_solution\":false,\"show_generic_submit_button\":false,\"instructions\":null,\"is_trainable\":false,\"narrow_instructions\":null,\"description\":\"Allows learners to select one of a list of multiple-choice options.\",\"needs_summary\":false,\"name\":\"Multiple Choice\",\"answer_type\":\"NonnegativeInt\",\"is_linear\":false,\"display_mode\":\"inline\",\"id\":\"MultipleChoiceInput\",\"customization_arg_specs\":[{\"description\":\"Multiple Choice options\",\"name\":\"choices\",\"schema\":{\"items\":{\"type\":\"html\",\"ui_config\":{\"hide_complex_extensions\":true,\"placeholder\":\"Enter an option for the learner to select\"}},\"type\":\"list\",\"validators\":[{\"min_value\":1,\"id\":\"has_length_at_least\"}],\"ui_config\":{\"add_element_text\":\"Add multiple choice option\"}},\"default_value\":[\"\"]}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"Equals\":\"is equal to {{x|NonnegativeInt}}\"}},\"PencilCodeEditor\":{\"can_have_solution\":true,\"show_generic_submit_button\":false,\"instructions\":\"Edit the code. Click 'Play' to check it!\",\"is_trainable\":false,\"narrow_instructions\":\"Show code editor\",\"description\":\"Allows learners to edit code in Pencil Code.\",\"needs_summary\":true,\"name\":\"Pencil Code Editor\",\"answer_type\":\"CodeEvaluation\",\"is_linear\":false,\"display_mode\":\"supplemental\",\"id\":\"PencilCodeEditor\",\"customization_arg_specs\":[{\"description\":\"The initial code\",\"name\":\"initial_code\",\"schema\":{\"type\":\"unicode\",\"ui_config\":{\"coding_mode\":\"coffeescript\"}},\"default_value\":\"# Add the initial code snippet here.\"}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"OutputEquals\":\"has output equal to {{x|CodeString}}\",\"CodeContains\":\"has code that contains {{x|CodeString}}\",\"CodeEquals\":\"has code equal to {{x|CodeString}}\",\"ResultsInError\":\"results in an error when run\",\"ErrorContains\":\"has error message that contains {{x|UnicodeString}}\",\"OutputRoughlyEquals\":\"has output equal to {{x|CodeString}}, ignoring spacing and case\",\"CodeDoesNotContain\":\"has code that does not contain {{x|CodeString}}\"}},\"TextInput\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":null,\"is_trainable\":true,\"narrow_instructions\":null,\"description\":\"Allows learners to enter arbitrary text strings.\",\"needs_summary\":false,\"name\":\"Text Input\",\"answer_type\":\"NormalizedString\",\"is_linear\":false,\"display_mode\":\"inline\",\"id\":\"TextInput\",\"customization_arg_specs\":[{\"description\":\"Placeholder text (optional)\",\"name\":\"placeholder\",\"schema\":{\"type\":\"unicode\"},\"default_value\":\"\"},{\"description\":\"Height (in rows)\",\"name\":\"rows\",\"schema\":{\"type\":\"int\",\"validators\":[{\"min_value\":1,\"id\":\"is_at_least\"},{\"max_value\":200,\"id\":\"is_at_most\"}]},\"default_value\":1}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"StartsWith\":\"starts with {{x|NormalizedString}}\",\"Contains\":\"contains {{x|NormalizedString}}\",\"Equals\":\"is equal to {{x|NormalizedString}}\",\"CaseSensitiveEquals\":\"is equal to {{x|NormalizedString}}, taking case into account\",\"FuzzyEquals\":\"is equal to {{x|NormalizedString}}, misspelled by at most one character\"}},\"InteractiveMap\":{\"can_have_solution\":false,\"show_generic_submit_button\":false,\"instructions\":\"Click on the map\",\"is_trainable\":false,\"narrow_instructions\":\"View map\",\"description\":\"Allows learners to specify a position on a world map.\",\"needs_summary\":true,\"name\":\"World Map\",\"answer_type\":\"CoordTwoDim\",\"is_linear\":false,\"display_mode\":\"supplemental\",\"id\":\"InteractiveMap\",\"customization_arg_specs\":[{\"description\":\"Starting center latitude (-90 to 90)\",\"name\":\"latitude\",\"schema\":{\"type\":\"float\",\"validators\":[{\"min_value\":-90,\"id\":\"is_at_least\"},{\"max_value\":90,\"id\":\"is_at_most\"}]},\"default_value\":0},{\"description\":\"Starting center longitude (-180 to 180)\",\"name\":\"longitude\",\"schema\":{\"type\":\"float\",\"validators\":[{\"min_value\":-180,\"id\":\"is_at_least\"},{\"max_value\":180,\"id\":\"is_at_most\"}]},\"default_value\":0},{\"description\":\"Starting zoom level (0 shows the entire earth)\",\"name\":\"zoom\",\"schema\":{\"type\":\"float\"},\"default_value\":0}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"Within\":\"is within {{d|Real}} km of {{p|CoordTwoDim}}\",\"NotWithin\":\"is not within {{d|Real}} km of {{p|CoordTwoDim}}\"}},\"MusicNotesInput\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":\"Drag notes to the staff to form a sequence\",\"is_trainable\":false,\"narrow_instructions\":\"Show music staff\",\"description\":\"Allows learners to drag and drop notes onto the lines of a music staff.\",\"needs_summary\":true,\"name\":\"Music Notes Input\",\"answer_type\":\"MusicPhrase\",\"is_linear\":false,\"display_mode\":\"supplemental\",\"id\":\"MusicNotesInput\",\"customization_arg_specs\":[{\"description\":\"Correct sequence of notes\",\"name\":\"sequenceToGuess\",\"schema\":{\"obj_type\":\"MusicPhrase\",\"type\":\"custom\"},\"default_value\":[]},{\"description\":\"Starting notes on the staff\",\"name\":\"initialSequence\",\"schema\":{\"obj_type\":\"MusicPhrase\",\"type\":\"custom\"},\"default_value\":[]}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"Equals\":\"is equal to {{x|MusicPhrase}}\",\"IsEqualToExceptFor\":\"is equal to {{x|MusicPhrase}} except for {{k|NonnegativeInt}} notes\",\"IsTranspositionOfExceptFor\":\"is a transposition of {{x|MusicPhrase}} by {{y|Int}} semitones except for {{k|NonnegativeInt}} notes\",\"IsLongerThan\":\"has more than {{k|NonnegativeInt}} notes\",\"IsTranspositionOf\":\"is a transposition of {{x|MusicPhrase}} by {{y|Int}} semitones\",\"HasLengthInclusivelyBetween\":\"has between {{a|NonnegativeInt}} and {{b|NonnegativeInt}} notes, inclusive\"}},\"MathExpressionInput\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":null,\"is_trainable\":false,\"narrow_instructions\":null,\"description\":\"Allows learners to enter mathematical expressions.\",\"needs_summary\":false,\"name\":\"Math Expression Input\",\"answer_type\":\"MathExpression\",\"is_linear\":false,\"display_mode\":\"inline\",\"id\":\"MathExpressionInput\",\"customization_arg_specs\":[],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"IsMathematicallyEquivalentTo\":\"is mathematically equivalent to (LaTeX) {{x|UnicodeString}}\"}},\"FractionInput\":{\"can_have_solution\":true,\"show_generic_submit_button\":true,\"instructions\":null,\"is_trainable\":false,\"narrow_instructions\":null,\"description\":\"Allows learners to enter integers and fractions.\",\"needs_summary\":false,\"name\":\"Fraction Input\",\"answer_type\":\"Fraction\",\"is_linear\":false,\"display_mode\":\"inline\",\"id\":\"FractionInput\",\"customization_arg_specs\":[{\"description\":\"Require the learner's answer to be in simplest form\",\"name\":\"requireSimplestForm\",\"schema\":{\"type\":\"bool\"},\"default_value\":false},{\"description\":\"Allow improper fractions in the learner's answer\",\"name\":\"allowImproperFraction\",\"schema\":{\"type\":\"bool\"},\"default_value\":true},{\"description\":\"Allow the answer to contain an integer part\",\"name\":\"allowNonzeroIntegerPart\",\"schema\":{\"type\":\"bool\"},\"default_value\":true},{\"description\":\"Custom placeholder text (optional)\",\"name\":\"customPlaceholder\",\"schema\":{\"type\":\"unicode\"},\"default_value\":\"\"}],\"is_terminal\":false,\"default_outcome_heading\":null,\"rule_descriptions\":{\"HasNoFractionalPart\":\"has no fractional part\",\"HasFractionalPartExactlyEqualTo\":\"has fractional part exactly equal to {{f|Fraction}}\",\"IsEquivalentToAndInSimplestForm\":\"is equivalent to {{f|Fraction}} and in simplest form\",\"IsExactlyEqualTo\":\"exactly matches {{f|Fraction}}\",\"HasNumeratorEqualTo\":\"has numerator equal to {{x|Int}}\",\"IsLessThan\":\"is less than {{f|Fraction}}\",\"IsGreaterThan\":\"is greater than {{f|Fraction}}\",\"HasIntegerPartEqualTo\":\"has integer part equal to {{x|Int}}\",\"IsEquivalentTo\":\"is equivalent to {{f|Fraction}}\",\"HasDenominatorEqualTo\":\"has denominator equal to {{x|NonnegativeInt}}\"}}}");

/***/ }),

/***/ "./extensions/interactions/interactions-extension.constants.ajs.ts":
/*!*************************************************************************!*\
  !*** ./extensions/interactions/interactions-extension.constants.ajs.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Constants for interactions extensions.
 */
// TODO(#7092): Delete this file once migration is complete and these AngularJS
// equivalents of the Angular constants are no longer needed.
var interactions_extension_constants_1 = __webpack_require__(/*! interactions/interactions-extension.constants */ "./extensions/interactions/interactions-extension.constants.ts");
// Minimum confidence required for a predicted answer group to be shown to user.
// Generally a threshold of 0.7-0.8 is assumed to be a good one in practice,
// however value need not be in those bounds.
angular.module('oppia').constant('CODE_REPL_PREDICTION_SERVICE_THRESHOLD', interactions_extension_constants_1.InteractionsExtensionsConstants.CODE_REPL_PREDICTION_SERVICE_THRESHOLD);
angular.module('oppia').constant('GRAPH_INPUT_LEFT_MARGIN', interactions_extension_constants_1.InteractionsExtensionsConstants.GRAPH_INPUT_LEFT_MARGIN);
// Gives the staff-lines human readable values.
angular.module('oppia').constant('NOTE_NAMES_TO_MIDI_VALUES', interactions_extension_constants_1.InteractionsExtensionsConstants.NOTE_NAMES_TO_MIDI_VALUES);
// Minimum confidence required for a predicted answer group to be shown to user.
// Generally a threshold of 0.7-0.8 is assumed to be a good one in practice,
// however value need not be in those bounds.
angular.module('oppia').constant('TEXT_INPUT_PREDICTION_SERVICE_THRESHOLD', interactions_extension_constants_1.InteractionsExtensionsConstants.TEXT_INPUT_PREDICTION_SERVICE_THRESHOLD);


/***/ }),

/***/ "./extensions/interactions/interactionsQuestionsRequires.ts":
/*!******************************************************************!*\
  !*** ./extensions/interactions/interactionsQuestionsRequires.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for question only interactions.
 */
__webpack_require__(/*! interactions/MultipleChoiceInput/MultipleChoiceInput.ts */ "./extensions/interactions/MultipleChoiceInput/MultipleChoiceInput.ts");
__webpack_require__(/*! interactions/NumericInput/NumericInput.ts */ "./extensions/interactions/NumericInput/NumericInput.ts");
__webpack_require__(/*! interactions/TextInput/TextInput.ts */ "./extensions/interactions/TextInput/TextInput.ts");


/***/ }),

/***/ "./extensions/objects/objectComponentsRequiresForPlayers.ts":
/*!******************************************************************!*\
  !*** ./extensions/objects/objectComponentsRequiresForPlayers.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2019 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Requires for object templates required for players.
 */
__webpack_require__(/*! objects/templates/math-latex-string-editor.directive.ts */ "./extensions/objects/templates/math-latex-string-editor.directive.ts");
__webpack_require__(/*! objects/templates/sanitized-url-editor.directive.ts */ "./extensions/objects/templates/sanitized-url-editor.directive.ts");
__webpack_require__(/*! objects/templates/list-of-tabs-editor.directive.ts */ "./extensions/objects/templates/list-of-tabs-editor.directive.ts");


/***/ }),

/***/ "./extensions/objects/templates/list-of-tabs-editor.directive.ts":
/*!***********************************************************************!*\
  !*** ./extensions/objects/templates/list-of-tabs-editor.directive.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS-IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for list of tabs editor.
 */
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('listOfTabsEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/list-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'list',
                        items: {
                            type: 'dict',
                            properties: [{
                                    name: 'title',
                                    description: 'Tab title',
                                    schema: {
                                        type: 'unicode',
                                        validators: [{
                                                id: 'is_nonempty'
                                            }]
                                    }
                                }, {
                                    name: 'content',
                                    description: 'Tab content',
                                    schema: {
                                        type: 'html',
                                        ui_config: {
                                            hide_complex_extensions: true
                                        }
                                    }
                                }]
                        },
                        ui_config: {
                            add_element_text: 'Add new tab'
                        }
                    };
                    if (!ctrl.value) {
                        ctrl.value = [];
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/math-latex-string-editor.directive.ts":
/*!****************************************************************************!*\
  !*** ./extensions/objects/templates/math-latex-string-editor.directive.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for math latex string editor.
 */
__webpack_require__(/*! directives/mathjax-bind.directive.ts */ "./core/templates/dev/head/directives/mathjax-bind.directive.ts");
__webpack_require__(/*! domain/utilities/UrlInterpolationService.ts */ "./core/templates/dev/head/domain/utilities/UrlInterpolationService.ts");
// Every editor directive should implement an alwaysEditable option. There
// may be additional customization options for the editor that should be passed
// in via initArgs.
angular.module('oppia').directive('mathLatexStringEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                getAlwaysEditable: '&',
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/math-latex-string-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: ['$scope', function ($scope) {
                    var ctrl = this;
                    ctrl.placeholderText = '\\frac{x}{y}';
                    ctrl.alwaysEditable = ctrl.getAlwaysEditable();
                    // Reset the component each time the value changes (e.g. if this is part
                    // of an editable list).
                    $scope.$watch('$ctrl.value', function () {
                        ctrl.localValue = {
                            label: ctrl.value || ''
                        };
                    }, true);
                    if (ctrl.alwaysEditable) {
                        $scope.$watch('$ctrl.localValue.label', function (newValue) {
                            ctrl.value = newValue;
                        });
                    }
                    else {
                        ctrl.openEditor = function () {
                            ctrl.active = true;
                        };
                        ctrl.closeEditor = function () {
                            ctrl.active = false;
                        };
                        ctrl.replaceValue = function (newValue) {
                            ctrl.localValue = {
                                label: newValue
                            };
                            ctrl.value = newValue;
                            ctrl.closeEditor();
                        };
                        $scope.$on('externalSave', function () {
                            if (ctrl.active) {
                                ctrl.replaceValue(ctrl.localValue.label);
                                // The $scope.$apply() call is needed to propagate the replaced
                                // value.
                                $scope.$apply();
                            }
                        });
                        ctrl.closeEditor();
                    }
                }]
        };
    }
]);


/***/ }),

/***/ "./extensions/objects/templates/sanitized-url-editor.directive.ts":
/*!************************************************************************!*\
  !*** ./extensions/objects/templates/sanitized-url-editor.directive.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Directive for sanitized URL editor.
 */
angular.module('oppia').directive('sanitizedUrlEditor', [
    'UrlInterpolationService',
    function (UrlInterpolationService) {
        // Editable URL directive.
        return {
            restrict: 'E',
            scope: {},
            bindToController: {
                value: '='
            },
            templateUrl: UrlInterpolationService.getExtensionResourceUrl('/objects/templates/sanitized-url-editor.directive.html'),
            controllerAs: '$ctrl',
            controller: [function () {
                    var ctrl = this;
                    ctrl.SCHEMA = {
                        type: 'unicode',
                        validators: [{
                                id: 'is_nonempty'
                            }],
                        ui_config: {
                            placeholder: 'https://www.example.com'
                        }
                    };
                }]
        };
    }
]);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./extensions/interactions/MultipleChoiceInput/static/multiple_choice_input.css ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, ".multiple-choice-option-container {\n  padding: 4px 0;\n}\n\n.multiple-choice-option {\n  background: none;\n  border: none;\n  color: #0D48A1;\n  text-align: left;\n  /* This is needed so that images stay bounded by the container in Firefox. */\n  /* This also limits the selection area of the option to the text and radio button. */\n  width: auto;\n}\n\n.multiple-choice-radio-button-container {\n  display: table-cell;\n}\n\n.multiple-choice-content-container {\n  display: table-cell;\n  vertical-align: top;\n}\n\n.multiple-choice-option:hover {\n  color: #115FD4;\n}\n\n.multiple-choice-option:hover .multiple-choice-inner-radio-button,\n.multiple-choice-option:focus .multiple-choice-inner-radio-button {\n  background-color: #115FD4;\n  border-radius: 50%;\n  display: block;\n  height: 8px;\n  margin: 2px;\n  width: 8px;\n}\n\n.multiple-choice-option:hover .multiple-choice-outer-radio-button,\n.multiple-choice-option:focus .multiple-choice-outer-radio-button {\n  border-color: #115FD4;\n}\n\n.multiple-choice-outer-radio-button {\n  border: 2px solid #0D48A1;\n  border-radius: 50%;\n  display: inline-block;\n  height: 16px;\n  margin-bottom: -7px;\n  margin-right: 12px;\n  width: 16px;\n}\n", ""]);


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvYmFzZV9jb21wb25lbnRzL0Jhc2VDb250ZW50RGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2Jhc2VfY29tcG9uZW50cy9XYXJuaW5nTG9hZGVyRGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvYnV0dG9uLWRpcmVjdGl2ZXMvZXhwbG9yYXRpb24tZW1iZWQtYnV0dG9uLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvY29tcG9uZW50cy9idXR0b24tZGlyZWN0aXZlcy9oaW50LWFuZC1zb2x1dGlvbi1idXR0b25zLmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL2NvbW1vbi1sYXlvdXQtZGlyZWN0aXZlcy9jb21tb24tZWxlbWVudHMvYXR0cmlidXRpb24tZ3VpZGUuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvY29tbW9uLWxheW91dC1kaXJlY3RpdmVzL2NvbW1vbi1lbGVtZW50cy9iYWNrZ3JvdW5kLWJhbm5lci5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvY29tcG9uZW50cy9jb21tb24tbGF5b3V0LWRpcmVjdGl2ZXMvY29tbW9uLWVsZW1lbnRzL3NoYXJpbmctbGlua3MuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvY29uY2VwdC1jYXJkL2NvbmNlcHQtY2FyZC5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtYmFzZWQtZWRpdG9ycy9zY2hlbWEtYmFzZWQtZXhwcmVzc2lvbi1lZGl0b3IuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLXZpZXdlcnMvc2NoZW1hLWJhc2VkLWN1c3RvbS12aWV3ZXIuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLXZpZXdlcnMvc2NoZW1hLWJhc2VkLWRpY3Qtdmlld2VyLmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL2Zvcm1zL3NjaGVtYS12aWV3ZXJzL3NjaGVtYS1iYXNlZC1odG1sLXZpZXdlci5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtdmlld2Vycy9zY2hlbWEtYmFzZWQtbGlzdC12aWV3ZXIuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLXZpZXdlcnMvc2NoZW1hLWJhc2VkLXByaW1pdGl2ZS12aWV3ZXIuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLXZpZXdlcnMvc2NoZW1hLWJhc2VkLXVuaWNvZGUtdmlld2VyLmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL2Zvcm1zL3NjaGVtYS12aWV3ZXJzL3NjaGVtYS1iYXNlZC12aWV3ZXIuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvZm9ybXMvdmFsaWRhdG9ycy9pcy1hdC1sZWFzdC5maWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvY29tcG9uZW50cy9mb3Jtcy92YWxpZGF0b3JzL2lzLWF0LW1vc3QuZmlsdGVyLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvZm9ybXMvdmFsaWRhdG9ycy9pcy1pbnRlZ2VyLmZpbHRlci50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL2Zvcm1zL3ZhbGlkYXRvcnMvaXMtbm9uZW1wdHkuZmlsdGVyLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvcHJvZmlsZS1saW5rLWRpcmVjdGl2ZXMvY2lyY3VsYXItaW1hZ2UuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvcHJvZmlsZS1saW5rLWRpcmVjdGl2ZXMvcHJvZmlsZS1saW5rLWltYWdlLmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL3F1ZXN0aW9uLWRpcmVjdGl2ZXMvcXVlc3Rpb24tcGxheWVyL3F1ZXN0aW9uLXBsYXllci5jb25zdGFudHMuYWpzLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvcXVlc3Rpb24tZGlyZWN0aXZlcy9xdWVzdGlvbi1wbGF5ZXIvcXVlc3Rpb24tcGxheWVyLmNvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL3F1ZXN0aW9uLWRpcmVjdGl2ZXMvcXVlc3Rpb24tcGxheWVyL3F1ZXN0aW9uLXBsYXllci5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvY29tcG9uZW50cy9xdWVzdGlvbi1kaXJlY3RpdmVzL3F1ZXN0aW9uLXBsYXllci9zZXJ2aWNlcy9xdWVzdGlvbi1wbGF5ZXItc3RhdGUuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL3JhdGluZ3MvcmF0aW5nLWNvbXB1dGF0aW9uL3JhdGluZy1jb21wdXRhdGlvbi5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvcmF0aW5ncy9yYXRpbmctZGlzcGxheS9yYXRpbmctZGlzcGxheS5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvY29tcG9uZW50cy9zY29yZS1yaW5nL3Njb3JlLXJpbmcuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvc2tpbGwtbWFzdGVyeS9za2lsbC1tYXN0ZXJ5LmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL3NraWxscy1tYXN0ZXJ5LWxpc3Qvc2tpbGxzLW1hc3RlcnktbGlzdC5jb25zdGFudHMuYWpzLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvc2tpbGxzLW1hc3RlcnktbGlzdC9za2lsbHMtbWFzdGVyeS1saXN0LmNvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL3N0YXRlLWVkaXRvci9zdGF0ZS1lZGl0b3ItcHJvcGVydGllcy1zZXJ2aWNlcy9zdGF0ZS1lZGl0b3Iuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL3N0YXRlLWVkaXRvci9zdGF0ZS1lZGl0b3ItcHJvcGVydGllcy1zZXJ2aWNlcy9zdGF0ZS1pbnRlcmFjdGlvbi1pZC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvc3RhdGUtZWRpdG9yL3N0YXRlLWVkaXRvci1wcm9wZXJ0aWVzLXNlcnZpY2VzL3N0YXRlLXByb3BlcnR5LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvY29tcG9uZW50cy9zdW1tYXJ5LXRpbGUvY29sbGVjdGlvbi1zdW1tYXJ5LXRpbGUuY29uc3RhbnRzLmFqcy50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9jb21wb25lbnRzL3N1bW1hcnktdGlsZS9jb2xsZWN0aW9uLXN1bW1hcnktdGlsZS5jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvY29tcG9uZW50cy9zdW1tYXJ5LXRpbGUvY29sbGVjdGlvbi1zdW1tYXJ5LXRpbGUuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2NvbXBvbmVudHMvc3VtbWFyeS10aWxlL2V4cGxvcmF0aW9uLXN1bW1hcnktdGlsZS5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL2NsYXNzaWZpZXIvQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHRPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9jbGFzc2lmaWVyL0NsYXNzaWZpZXJPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9jbGFzc2lmaWVyL1ByZWRpY3Rpb25SZXN1bHRPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9jb2xsZWN0aW9uL0d1ZXN0Q29sbGVjdGlvblByb2dyZXNzT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vY29sbGVjdGlvbi9HdWVzdENvbGxlY3Rpb25Qcm9ncmVzc1NlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL2NvbGxlY3Rpb24vUmVhZE9ubHlDb2xsZWN0aW9uQmFja2VuZEFwaVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL2V4cGxvcmF0aW9uL0Fuc3dlckdyb3VwT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vZXhwbG9yYXRpb24vRWRpdGFibGVFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9leHBsb3JhdGlvbi9FeHBsb3JhdGlvbkRyYWZ0T2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vZXhwbG9yYXRpb24vRXhwbG9yYXRpb25PYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9leHBsb3JhdGlvbi9IaW50T2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vZXhwbG9yYXRpb24vSW50ZXJhY3Rpb25PYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9leHBsb3JhdGlvbi9PdXRjb21lT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vZXhwbG9yYXRpb24vUGFyYW1DaGFuZ2VPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9leHBsb3JhdGlvbi9QYXJhbUNoYW5nZXNPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9leHBsb3JhdGlvbi9QYXJhbVNwZWNPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9leHBsb3JhdGlvbi9QYXJhbVNwZWNzT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vZXhwbG9yYXRpb24vUGFyYW1UeXBlT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vZXhwbG9yYXRpb24vUmVhZE9ubHlFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9leHBsb3JhdGlvbi9SZWNvcmRlZFZvaWNlb3ZlcnNPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9leHBsb3JhdGlvbi9SdWxlT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vZXhwbG9yYXRpb24vU29sdXRpb25PYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9leHBsb3JhdGlvbi9TdGF0ZXNPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9leHBsb3JhdGlvbi9TdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vZXhwbG9yYXRpb24vVm9pY2VvdmVyT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vZXhwbG9yYXRpb24vV3JpdHRlblRyYW5zbGF0aW9uT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vZXhwbG9yYXRpb24vV3JpdHRlblRyYW5zbGF0aW9uc09iamVjdEZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL2xlYXJuZXJfZGFzaGJvYXJkL0xlYXJuZXJEYXNoYm9hcmRJY29uc0RpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vb2JqZWN0cy9GcmFjdGlvbk9iamVjdEZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL29iamVjdHMvTnVtYmVyV2l0aFVuaXRzT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vb2JqZWN0cy9Vbml0c09iamVjdEZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL29iamVjdHMvb2JqZWN0cy1kb21haW4uY29uc3RhbnRzLmFqcy50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vcXVlc3Rpb24vUHJldGVzdFF1ZXN0aW9uQmFja2VuZEFwaVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL3F1ZXN0aW9uL1F1ZXN0aW9uQmFja2VuZEFwaVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL3F1ZXN0aW9uL1F1ZXN0aW9uT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vcXVlc3Rpb24vcXVlc3Rpb24tZG9tYWluLmNvbnN0YW50cy5hanMudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL3F1ZXN0aW9uL3F1ZXN0aW9uLWRvbWFpbi5jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL3NraWxsL0NvbmNlcHRDYXJkQmFja2VuZEFwaVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL3NraWxsL0NvbmNlcHRDYXJkT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vc2tpbGwvU2tpbGxNYXN0ZXJ5QmFja2VuZEFwaVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL3NraWxsL3NraWxsLWRvbWFpbi5jb25zdGFudHMuYWpzLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9za2lsbC9za2lsbC1kb21haW4uY29uc3RhbnRzLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9zdGF0ZS9TdGF0ZU9iamVjdEZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL3N0YXRlX2NhcmQvU3RhdGVDYXJkT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vc3RhdGlzdGljcy9MZWFybmVyQWN0aW9uT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vc3RhdGlzdGljcy9MZWFybmVyQW5zd2VyRGV0YWlsc0JhY2tlbmRBcGlTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9zdGF0aXN0aWNzL1BsYXl0aHJvdWdoSXNzdWVPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9zdGF0aXN0aWNzL1BsYXl0aHJvdWdoT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vc3RhdGlzdGljcy9zdGF0aXN0aWNzLWRvbWFpbi5jb25zdGFudHMuYWpzLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi9zdGF0aXN0aWNzL3N0YXRpc3RpY3MtZG9tYWluLmNvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vc3Rvcnlfdmlld2VyL1JlYWRPbmx5U3RvcnlOb2RlT2JqZWN0RmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vc3Rvcnlfdmlld2VyL1N0b3J5Vmlld2VyQmFja2VuZEFwaVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL3N0b3J5X3ZpZXdlci9zdG9yeS12aWV3ZXItZG9tYWluLmNvbnN0YW50cy5hanMudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZG9tYWluL3N0b3J5X3ZpZXdlci9zdG9yeS12aWV3ZXItZG9tYWluLmNvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vc3VtbWFyeS9FeHBsb3JhdGlvblN1bW1hcnlCYWNrZW5kQXBpU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vdXRpbGl0aWVzL0F1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi91dGlsaXRpZXMvQXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5LnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2RvbWFpbi91dGlsaXRpZXMvTGFuZ3VhZ2VVdGlsU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9kb21haW4vdXRpbGl0aWVzL1N0b3B3YXRjaE9iamVjdEZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZXhwcmVzc2lvbnMvRXhwcmVzc2lvbkV2YWx1YXRvclNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZXhwcmVzc2lvbnMvRXhwcmVzc2lvbkludGVycG9sYXRpb25TZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2V4cHJlc3Npb25zL0V4cHJlc3Npb25QYXJzZXJTZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2V4cHJlc3Npb25zL0V4cHJlc3Npb25TeW50YXhUcmVlU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9maWx0ZXJzL2NvbnZlcnQtaHRtbC10by11bmljb2RlLmZpbHRlci50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9maWx0ZXJzL2Zvcm1hdC1ydGUtcHJldmlldy5maWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZmlsdGVycy9zdHJpbmctdXRpbGl0eS1maWx0ZXJzL2NhbWVsLWNhc2UtdG8taHlwaGVucy5maWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZmlsdGVycy9zdHJpbmctdXRpbGl0eS1maWx0ZXJzL2NvbnZlcnQtdG8tcGxhaW4tdGV4dC5maWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZmlsdGVycy9zdHJpbmctdXRpbGl0eS1maWx0ZXJzL2dldC1hYmJyZXZpYXRlZC10ZXh0LmZpbHRlci50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9maWx0ZXJzL3N0cmluZy11dGlsaXR5LWZpbHRlcnMvbm9ybWFsaXplLXdoaXRlc3BhY2UuZmlsdGVyLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2ZpbHRlcnMvc3RyaW5nLXV0aWxpdHktZmlsdGVycy90cnVuY2F0ZS1hbmQtY2FwaXRhbGl6ZS5maWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZmlsdGVycy9zdHJpbmctdXRpbGl0eS1maWx0ZXJzL3RydW5jYXRlLWF0LWZpcnN0LWxpbmUuZmlsdGVyLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL2ZpbHRlcnMvc3RyaW5nLXV0aWxpdHktZmlsdGVycy90cnVuY2F0ZS5maWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvZmlsdGVycy9zdW1tYXJpemUtbm9ubmVnYXRpdmUtbnVtYmVyLmZpbHRlci50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9PcHBpYUZvb3RlckRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9lZGl0b3ItdGFiL3NlcnZpY2VzL3NvbHV0aW9uLXZhbGlkaXR5LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2Uvc2VydmljZXMvYW5ndWxhci1uYW1lLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2Uvc2VydmljZXMvYXV0b3NhdmUtaW5mby1tb2RhbHMuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9zZXJ2aWNlcy9jaGFuZ2UtbGlzdC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLWVkaXRvci1wYWdlL3NlcnZpY2VzL2NoYW5nZXMtaW4taHVtYW4tcmVhZGFibGUtZm9ybS5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLWVkaXRvci1wYWdlL3NlcnZpY2VzL2V4cGxvcmF0aW9uLWRhdGEuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9zZXJ2aWNlcy9leHBsb3JhdGlvbi1pbml0LXN0YXRlLW5hbWUuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9zZXJ2aWNlcy9leHBsb3JhdGlvbi1wcm9wZXJ0eS5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLWVkaXRvci1wYWdlL3NlcnZpY2VzL2V4cGxvcmF0aW9uLXN0YXRlcy5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLWVkaXRvci1wYWdlL3N0YXRpc3RpY3MtdGFiL2lzc3Vlcy9hbnN3ZXItc3VibWl0LWFjdGlvbi5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2Uvc3RhdGlzdGljcy10YWIvc2VydmljZXMvbGVhcm5lci1hY3Rpb24tcmVuZGVyLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UuY29uc3RhbnRzLmFqcy50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS5jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvbGF5b3V0LWRpcmVjdGl2ZXMvYXVkaW8tYmFyLmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sYXlvdXQtZGlyZWN0aXZlcy9jb3JyZWN0bmVzcy1mb290ZXIuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xheW91dC1kaXJlY3RpdmVzL2V4cGxvcmF0aW9uLWZvb3Rlci5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvbGF5b3V0LWRpcmVjdGl2ZXMvZmVlZGJhY2stcG9wdXAuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xheW91dC1kaXJlY3RpdmVzL2xlYXJuZXItbG9jYWwtbmF2LmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sYXlvdXQtZGlyZWN0aXZlcy9sZWFybmVyLXZpZXctaW5mby5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvbGF5b3V0LWRpcmVjdGl2ZXMvcHJvZ3Jlc3MtbmF2LmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sZWFybmVyLWV4cGVyaWVuY2UvY29udGludWUtYnV0dG9uLmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sZWFybmVyLWV4cGVyaWVuY2UvY29udmVyc2F0aW9uLXNraW4uZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xlYXJuZXItZXhwZXJpZW5jZS9pbnB1dC1yZXNwb25zZS1wYWlyLmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sZWFybmVyLWV4cGVyaWVuY2UvbGVhcm5lci1hbnN3ZXItaW5mby1jYXJkLmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sZWFybmVyLWV4cGVyaWVuY2Uvc3VwcGxlbWVudGFsLWNhcmQuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xlYXJuZXItZXhwZXJpZW5jZS90dXRvci1jYXJkLmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9hbnN3ZXItY2xhc3NpZmljYXRpb24uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9hdWRpby1wcmVsb2FkZXIuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9hdWRpby10cmFuc2xhdGlvbi1sYW5ndWFnZS5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2F1ZGlvLXRyYW5zbGF0aW9uLW1hbmFnZXIuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9jdXJyZW50LWludGVyYWN0aW9uLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZXhwbG9yYXRpb24tZW5naW5lLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZXhwbG9yYXRpb24tcGxheWVyLXN0YXRlLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZXhwbG9yYXRpb24tcmVjb21tZW5kYXRpb25zLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZmF0aWd1ZS1kZXRlY3Rpb24uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9oaW50LWFuZC1zb2x1dGlvbi1tb2RhbC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2hpbnRzLWFuZC1zb2x1dGlvbi1tYW5hZ2VyLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvbGVhcm5lci1hbnN3ZXItaW5mby5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2xlYXJuZXItcGFyYW1zLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvbGVhcm5lci12aWV3LXJhdGluZy5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL251bWJlci1hdHRlbXB0cy5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3BsYXllci1jb3JyZWN0bmVzcy1mZWVkYmFjay1lbmFibGVkLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcGxheWVyLXBvc2l0aW9uLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcGxheWVyLXRyYW5zY3JpcHQuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9wcmVkaWN0aW9uLWFsZ29yaXRobS1yZWdpc3RyeS5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3F1ZXN0aW9uLXBsYXllci1lbmdpbmUuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9yZWZyZXNoZXItZXhwbG9yYXRpb24tY29uZmlybWF0aW9uLW1vZGFsLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvc3RhdGUtY2xhc3NpZmllci1tYXBwaW5nLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvc3RhdHMtcmVwb3J0aW5nLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc3VnZ2VzdGlvbi1tb2RhbC1mb3ItbGVhcm5lci1sb2NhbC12aWV3L3N1Z2dlc3Rpb24tbW9kYWwtZm9yLWV4cGxvcmF0aW9uLXBsYXllci5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL2ludGVyYWN0aW9uLXNwZWNzLmNvbnN0YW50cy5hanMudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvcmV2aWV3LXRlc3QtcGFnZS9yZXZpZXctdGVzdC1lbmdpbmUuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9yZXZpZXctdGVzdC1wYWdlL3Jldmlldy10ZXN0LXBhZ2UuY29uc3RhbnRzLmFqcy50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9yZXZpZXctdGVzdC1wYWdlL3Jldmlldy10ZXN0LXBhZ2UuY29uc3RhbnRzLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3BhZ2VzL3Jldmlldy10ZXN0LXBhZ2UvcmV2aWV3LXRlc3QtcGFnZS5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvcGFnZXMvcmV2aWV3LXRlc3QtcGFnZS9yZXZpZXctdGVzdC1wYWdlLm1vZHVsZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9yZXZpZXctdGVzdC1wYWdlL3Jldmlldy10ZXN0LXBhZ2Uuc2NyaXB0cy50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9zZXJ2aWNlcy9BdWRpb1BsYXllclNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvc2VydmljZXMvQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9zZXJ2aWNlcy9FeHBsb3JhdGlvbkZlYXR1cmVzQmFja2VuZEFwaVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvc2VydmljZXMvRXhwbG9yYXRpb25GZWF0dXJlc1NlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvc2VydmljZXMvRXhwbG9yYXRpb25IdG1sRm9ybWF0dGVyU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9zZXJ2aWNlcy9FeHRlbnNpb25UYWdBc3NlbWJsZXJTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3NlcnZpY2VzL0xvY2FsU3RvcmFnZVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvc2VydmljZXMvTWVzc2VuZ2VyU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9zZXJ2aWNlcy9QYWdlVGl0bGVTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3NlcnZpY2VzL1BsYXl0aHJvdWdoSXNzdWVzQmFja2VuZEFwaVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vY29yZS90ZW1wbGF0ZXMvZGV2L2hlYWQvc2VydmljZXMvUGxheXRocm91Z2hJc3N1ZXNTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3NlcnZpY2VzL1BsYXl0aHJvdWdoU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9zZXJ2aWNlcy9TcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9zZXJ2aWNlcy9TdWdnZXN0aW9uTW9kYWxTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3NlcnZpY2VzL1ZhbGlkYXRvcnNTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2NvcmUvdGVtcGxhdGVzL2Rldi9oZWFkL3NlcnZpY2VzL2NvbnRleHR1YWwvV2luZG93UmVmU2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2NsYXNzaWZpZXJzL2NvdW50LXZlY3Rvcml6ZXIuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2NsYXNzaWZpZXJzL3N2bS1wcmVkaWN0aW9uLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vZXh0ZW5zaW9ucy9jbGFzc2lmaWVycy90ZXh0LWlucHV0LnRva2VuaXplci50cyIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2ludGVyYWN0aW9ucy9NdWx0aXBsZUNob2ljZUlucHV0L011bHRpcGxlQ2hvaWNlSW5wdXQudHMiLCJ3ZWJwYWNrOi8vLy4vZXh0ZW5zaW9ucy9pbnRlcmFjdGlvbnMvTXVsdGlwbGVDaG9pY2VJbnB1dC9kaXJlY3RpdmVzL211bHRpcGxlLWNob2ljZS1pbnB1dC1ydWxlcy5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvZGlyZWN0aXZlcy9tdWx0aXBsZS1jaG9pY2UtaW5wdXQtdmFsaWRhdGlvbi5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvZGlyZWN0aXZlcy9vcHBpYS1pbnRlcmFjdGl2ZS1tdWx0aXBsZS1jaG9pY2UtaW5wdXQuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvZGlyZWN0aXZlcy9vcHBpYS1yZXNwb25zZS1tdWx0aXBsZS1jaG9pY2UtaW5wdXQuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvZGlyZWN0aXZlcy9vcHBpYS1zaG9ydC1yZXNwb25zZS1tdWx0aXBsZS1jaG9pY2UtaW5wdXQuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvc3RhdGljL211bHRpcGxlX2Nob2ljZV9pbnB1dC5jc3M/MDQyYSIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2ludGVyYWN0aW9ucy9OdW1lcmljSW5wdXQvTnVtZXJpY0lucHV0LnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL051bWVyaWNJbnB1dC9kaXJlY3RpdmVzL251bWVyaWMtaW5wdXQtcnVsZXMuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2ludGVyYWN0aW9ucy9OdW1lcmljSW5wdXQvZGlyZWN0aXZlcy9udW1lcmljLWlucHV0LXZhbGlkYXRpb24uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2ludGVyYWN0aW9ucy9OdW1lcmljSW5wdXQvZGlyZWN0aXZlcy9vcHBpYS1pbnRlcmFjdGl2ZS1udW1lcmljLWlucHV0LmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2ludGVyYWN0aW9ucy9OdW1lcmljSW5wdXQvZGlyZWN0aXZlcy9vcHBpYS1yZXNwb25zZS1udW1lcmljLWlucHV0LmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2ludGVyYWN0aW9ucy9OdW1lcmljSW5wdXQvZGlyZWN0aXZlcy9vcHBpYS1zaG9ydC1yZXNwb25zZS1udW1lcmljLWlucHV0LmRpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2ludGVyYWN0aW9ucy9UZXh0SW5wdXQvVGV4dElucHV0LnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL1RleHRJbnB1dC9kaXJlY3RpdmVzL29wcGlhLWludGVyYWN0aXZlLXRleHQtaW5wdXQuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL1RleHRJbnB1dC9kaXJlY3RpdmVzL29wcGlhLXJlc3BvbnNlLXRleHQtaW5wdXQuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL1RleHRJbnB1dC9kaXJlY3RpdmVzL29wcGlhLXNob3J0LXJlc3BvbnNlLXRleHQtaW5wdXQuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL1RleHRJbnB1dC9kaXJlY3RpdmVzL3RleHQtaW5wdXQtcnVsZXMuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2ludGVyYWN0aW9ucy9UZXh0SW5wdXQvZGlyZWN0aXZlcy90ZXh0LWlucHV0LXZhbGlkYXRpb24uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9leHRlbnNpb25zL2ludGVyYWN0aW9ucy9UZXh0SW5wdXQvdGV4dC1pbnB1dC1wcmVkaWN0aW9uLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vZXh0ZW5zaW9ucy9pbnRlcmFjdGlvbnMvYmFzZS1pbnRlcmFjdGlvbi12YWxpZGF0aW9uLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vZXh0ZW5zaW9ucy9pbnRlcmFjdGlvbnMvaW50ZXJhY3Rpb25zLWV4dGVuc2lvbi5jb25zdGFudHMuYWpzLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL2ludGVyYWN0aW9uc1F1ZXN0aW9uc1JlcXVpcmVzLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvb2JqZWN0cy9vYmplY3RDb21wb25lbnRzUmVxdWlyZXNGb3JQbGF5ZXJzLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvb2JqZWN0cy90ZW1wbGF0ZXMvbGlzdC1vZi10YWJzLWVkaXRvci5kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vZXh0ZW5zaW9ucy9vYmplY3RzL3RlbXBsYXRlcy9tYXRoLWxhdGV4LXN0cmluZy1lZGl0b3IuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvb2JqZWN0cy90ZW1wbGF0ZXMvc2FuaXRpemVkLXVybC1lZGl0b3IuZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uL2V4dGVuc2lvbnMvaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvc3RhdGljL211bHRpcGxlX2Nob2ljZV9pbnB1dC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQVEsb0JBQW9CO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQWlCLDRCQUE0QjtBQUM3QztBQUNBO0FBQ0EsMEJBQWtCLDJCQUEyQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0RBQTBDLGdDQUFnQztBQUMxRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdFQUF3RCxrQkFB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxnREFBZ0Q7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxnREFBZ0Q7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyx3Q0FBd0M7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsd0NBQXdDO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNyZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCw4QkFBOEI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsNENBQTRDO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7Ozs7Ozs7Ozs7OztBQzdMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDN0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDhGQUF5QjtBQUNoRCxhQUFhLG1CQUFPLENBQUMsaUVBQWU7QUFDcEMsbUNBQW1DLG1CQUFPLENBQUMsaUlBQStDO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFD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RDtBQUNBOzs7Ozs7Ozs7Ozs7QUMvREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFPLENBQUMsb0lBQWtEO0FBQzFELG1CQUFPLENBQUMsa0hBQXlDO0FBQ2pELG1CQUFPLENBQUMsZ0lBQWdEO0FBQ3hELG1CQUFPLENBQUMsZ0tBQWdFO0FBQ3hFLG1CQUFPLENBQUMsMEhBQTZDO0FBQ3JELG1CQUFPLENBQUMsZ0dBQWdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBTyxDQUFDLHdHQUFvQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOzs7Ozs7Ozs7Ozs7QUN2SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBTyxDQUFDLDBIQUE2QztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDbklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDhGQUF5QjtBQUNoRCxhQUFhLG1CQUFPLENBQUMsaUVBQWU7QUFDcEMsaUNBQWlDLG1CQUFPLENBQUMscUhBQXlDO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOzs7Ozs7Ozs7Ozs7QUM1SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7Ozs7Ozs7Ozs7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOzs7Ozs7Ozs7Ozs7QUM5REw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBTyxDQUFDLDBIQUE2QztBQUNyRCxtQkFBTyxDQUFDLG9KQUEwRDtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlC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QUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ2hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0Esb0NBQW9DLG1CQUFtQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLHdDQUF3QyxtQkFBbUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBDQUEwQyxtQkFBbUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0Esb0NBQW9DLG1CQUFtQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLHdDQUF3QyxtQkFBbUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLGdEQUFnRCxvQkFBb0I7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxvQ0FBb0MsbUJBQW1CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSw0Q0FBNEMsb0JBQW9CO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSx3Q0FBd0Msb0JBQW9CO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBDQUEwQyxvQkFBb0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxvQ0FBb0Msb0JBQW9CO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxzQ0FBc0Msb0JBQW9CO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSx3Q0FBd0Msb0JBQW9CO0FBQzVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxvQ0FBb0Msb0JBQW9CO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxzQ0FBc0Msb0JBQW9CO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSx3Q0FBd0Msb0JBQW9CO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHNDQUFzQyxvQkFBb0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxvQ0FBb0Msb0JBQW9CO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0Esc0NBQXNDLG9CQUFvQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0Esd0NBQXdDLG9CQUFvQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0Esc0NBQXNDLG9CQUFvQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLHdDQUF3QyxvQkFBb0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBDQUEwQyxvQkFBb0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxvQkFBb0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHNDQUFzQyxvQkFBb0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLHdDQUF3QyxvQkFBb0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBDQUEwQyxvQkFBb0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxvQkFBb0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHNDQUFzQyxvQkFBb0I7QUFDMUQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxvQ0FBb0Msb0JBQW9CO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0Esc0NBQXNDLG9CQUFvQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9DQUFvQyxvQkFBb0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxzQ0FBc0Msb0JBQW9CO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0Esb0NBQW9DLG9CQUFvQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsNENBQTRDLG9CQUFvQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0Esb0RBQW9ELG9CQUFvQjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBa0IsMkNBQTJDO0FBQzdEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7OztBQ3JpR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBTyxDQUFDLGdIQUF3QztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsa0JBQWtCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsc0JBQXNCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isd0JBQXdCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsMkJBQTJCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixxQkFBcUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQixtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQSxvQkFBb0Isc0JBQXNCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxvQkFBb0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsaUJBQWlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUN2WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7Ozs7Ozs7Ozs7OztBQ3BCTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2Qyx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7Ozs7Ozs7Ozs7OztBQ3hCTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RCx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7Ozs7Ozs7Ozs7OztBQzdCTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7Ozs7Ozs7Ozs7OztBQ25GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQU8sQ0FBQyxzSEFBMkM7QUFDbkQsbUJBQU8sQ0FBQyxrSEFBeUM7QUFDakQsbUJBQU8sQ0FBQywwSEFBNkM7QUFDckQsbUJBQU8sQ0FBQyxzS0FBbUU7QUFDM0UsbUJBQU8sQ0FBQyw0TEFDbUM7QUFDM0MsbUJBQU8sQ0FBQywwTEFDa0M7QUFDMUMsbUJBQU8sQ0FBQyxzS0FBbUU7QUFDM0UsbUJBQU8sQ0FBQywwR0FBcUM7QUFDN0MsbUJBQU8sQ0FBQyxnR0FBZ0M7QUFDeEMsbUJBQU8sQ0FBQywwSEFBNkM7QUFDckQsbUJBQU8sQ0FBQyxnSUFBZ0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixPQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxPQUFPO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELEVBQUU7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUN0Z0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQU8sQ0FBQyxzSEFBMkM7QUFDbkQsbUJBQU8sQ0FBQywwTEFDa0M7QUFDMUMsbUJBQU8sQ0FBQyw0S0FBc0U7QUFDOUUsbUJBQU8sQ0FBQyx3TEFBNEU7QUFDcEYsbUJBQU8sQ0FBQyxzS0FBbUU7QUFDM0UsbUJBQU8sQ0FBQywwS0FBcUU7QUFDN0UsbUJBQU8sQ0FBQyxnR0FBZ0M7QUFDeEMsbUJBQU8sQ0FBQywwSEFBNkM7QUFDckQsbUJBQU8sQ0FBQywwSEFBNkM7QUFDckQsbUJBQU8sQ0FBQyxvSEFBMEM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQU8sQ0FBQywwSEFBNkM7QUFDckQsbUJBQU8sQ0FBQywwS0FBcUU7QUFDN0UsbUJBQU8sQ0FBQyw4S0FBdUU7QUFDL0UsbUJBQU8sQ0FBQyw0S0FBc0U7QUFDOUUsbUJBQU8sQ0FBQywwSEFBNkM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsb0NBQW9DO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFPLENBQUMsc0hBQTJDO0FBQ25ELG1CQUFPLENBQUMsMEhBQTZDO0FBQ3JELG1CQUFPLENBQUMsMExBQ2tDO0FBQzFDLG1CQUFPLENBQUMsOEtBQXVFO0FBQy9FLG1CQUFPLENBQUMsZ0dBQWdDO0FBQ3hDLG1CQUFPLENBQUMsMEhBQTZDO0FBQ3JELG1CQUFPLENBQUMsZ0lBQWdEO0FBQ3hELG1CQUFPLENBQUMsZ0xBQXdFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDM0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQU8sQ0FBQyxzSEFBMkM7QUFDbkQsbUJBQU8sQ0FBQyxnTEFBd0U7QUFDaEYsbUJBQU8sQ0FBQyxzTUFDOEI7QUFDdEMsbUJBQU8sQ0FBQywwSEFBNkM7QUFDckQsbUJBQU8sQ0FBQyxzS0FBbUU7QUFDM0UsbUJBQU8sQ0FBQywwTEFDa0M7QUFDMUMsbUJBQU8sQ0FBQyw4S0FBdUU7QUFDL0UsbUJBQU8sQ0FBQyw0S0FBc0U7QUFDOUUsbUJBQU8sQ0FBQyx3TEFBNEU7QUFDcEYsbUJBQU8sQ0FBQyw4S0FBdUU7QUFDL0UsbUJBQU8sQ0FBQyx3S0FBb0U7QUFDNUUsbUJBQU8sQ0FBQyxnR0FBZ0M7QUFDeEMsbUJBQU8sQ0FBQywwSEFBNkM7QUFDckQsbUJBQU8sQ0FBQyx3RkFBNEI7QUFDcEMsbUJBQU8sQ0FBQyxrRkFBeUI7QUFDakMsbUJBQU8sQ0FBQyxvSEFBMEM7QUFDbEQsbUJBQU8sQ0FBQyxzR0FBbUM7QUFDM0MsbUJBQU8sQ0FBQyxnSUFBZ0Q7QUFDeEQsbUJBQU8sQ0FBQyxnTEFBd0U7QUFDaEYsbUJBQU8sQ0FBQyxvSEFBMEM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDak1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQU8sQ0FBQyw0SkFBOEQ7QUFDdEUsbUJBQU8sQ0FBQyxrTUFDc0M7QUFDOUMsbUJBQU8sQ0FBQyx3TEFBNEU7QUFDcEYsbUJBQU8sQ0FBQyxzRkFBMkI7QUFDbkMsbUJBQU8sQ0FBQyxnTEFBd0U7QUFDaEYsbUJBQU8sQ0FBQyxvSEFBMEM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixFQUFFO0FBQ3JCLG1CQUFtQixNQUFNO0FBQ3pCO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUIsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHlCQUF5QjtBQUNwRCwrQkFBK0Isa0NBQWtDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBLHVCQUF1QixPQUFPO0FBQzlCO0FBQ0EsdUJBQXVCLEVBQUU7QUFDekIsdUJBQXVCLFNBQVM7QUFDaEM7QUFDQTtBQUNBLHdCQUF3QiwyQkFBMkI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyx5QkFBeUI7QUFDNUQ7QUFDQSwyQ0FBMkMseUNBQXlDO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNqSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBTyxDQUFDLGtIQUF5QztBQUNqRCxtQkFBTyxDQUFDLDBIQUE2QztBQUNyRCxtQkFBTyxDQUFDLDRMQUNtQztBQUMzQyxtQkFBTyxDQUFDLDBHQUFxQztBQUM3QyxtQkFBTyxDQUFDLGtHQUFpQztBQUN6QyxtQkFBTyxDQUFDLHdGQUE0QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrREFBa0Q7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3BIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQU8sQ0FBQyxzSEFBMkM7QUFDbkQsbUJBQU8sQ0FBQyxrSEFBeUM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNySUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QyxzR0FBbUM7QUFDM0MsbUJBQU8sQ0FBQyxnSUFBZ0Q7QUFDeEQsbUJBQU8sQ0FBQyxvSEFBMEM7QUFDbEQsbUJBQU8sQ0FBQyxvSEFBMEM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLE9BQU87QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUztBQUNoQztBQUNBO0FBQ0EsOEJBQThCLE9BQU87QUFDckMsNkJBQTZCLE9BQU87QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUMvVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFPLENBQUMsd0pBQTREO0FBQ3BFLG1CQUFPLENBQUMsd0pBQTREO0FBQ3BFLG1CQUFPLENBQUMsMElBQXFEO0FBQzdELG1CQUFPLENBQUMsNEhBQThDO0FBQ3RELG1CQUFPLENBQUMsNEtBQXNFO0FBQzlFLG1CQUFPLENBQUMsc0tBQW1FO0FBQzNFLG1CQUFPLENBQUMsc0tBQW1FO0FBQzNFLG1CQUFPLENBQUMsMEtBQXFFO0FBQzdFLG1CQUFPLENBQUMsb0xBQTBFO0FBQ2xGLG1CQUFPLENBQUMsd0xBQTRFO0FBQ3BGLG1CQUFPLENBQUMsc0tBQW1FO0FBQzNFLG1CQUFPLENBQUMsd0ZBQTRCO0FBQ3BDLG1CQUFPLENBQUMsb0lBQWtEO0FBQzFELG1CQUFPLENBQUMsZ0hBQXdDO0FBQ2hELG1CQUFPLENBQUMsNEdBQXNDO0FBQzlDLG1CQUFPLENBQUMsZ0dBQWdDO0FBQ3hDLG1CQUFPLENBQUMsc0dBQW1DO0FBQzNDLG1CQUFPLENBQUMsZ0xBQXdFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlNQUFpTSxFQUFFO0FBQ25NO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQy9HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFPLENBQUMsZ0xBQXdFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQzdLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFPLENBQUMsa0xBQXlFO0FBQ2pGLG1CQUFPLENBQUMsd0pBQTREO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDdEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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Ozs7QUMvREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBTyxDQUFDLDBIQUE2QztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUN2SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNB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O0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDalRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQU8sQ0FBQyxzSkFBMkQ7QUFDbkUsbUJBQU8s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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0hBQWtIO0FBQ2xIO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUciLCJmaWxlIjoicmV2aWV3X3Rlc3QuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG4gXHRcdHZhciBleGVjdXRlTW9kdWxlcyA9IGRhdGFbMl07XG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gYWRkIGVudHJ5IG1vZHVsZXMgZnJvbSBsb2FkZWQgY2h1bmsgdG8gZGVmZXJyZWQgbGlzdFxuIFx0XHRkZWZlcnJlZE1vZHVsZXMucHVzaC5hcHBseShkZWZlcnJlZE1vZHVsZXMsIGV4ZWN1dGVNb2R1bGVzIHx8IFtdKTtcblxuIFx0XHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIGFsbCBjaHVua3MgcmVhZHlcbiBcdFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4gXHR9O1xuIFx0ZnVuY3Rpb24gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKSB7XG4gXHRcdHZhciByZXN1bHQ7XG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgZGVmZXJyZWRNb2R1bGUgPSBkZWZlcnJlZE1vZHVsZXNbaV07XG4gXHRcdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG4gXHRcdFx0Zm9yKHZhciBqID0gMTsgaiA8IGRlZmVycmVkTW9kdWxlLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgZGVwSWQgPSBkZWZlcnJlZE1vZHVsZVtqXTtcbiBcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tkZXBJZF0gIT09IDApIGZ1bGZpbGxlZCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZihmdWxmaWxsZWQpIHtcbiBcdFx0XHRcdGRlZmVycmVkTW9kdWxlcy5zcGxpY2UoaS0tLCAxKTtcbiBcdFx0XHRcdHJlc3VsdCA9IF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gZGVmZXJyZWRNb2R1bGVbMF0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdHJldHVybiByZXN1bHQ7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHQvLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbiBcdC8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHRcInJldmlld190ZXN0XCI6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goW1wiLi9jb3JlL3RlbXBsYXRlcy9kZXYvaGVhZC9wYWdlcy9yZXZpZXctdGVzdC1wYWdlL3Jldmlldy10ZXN0LXBhZ2Uuc2NyaXB0cy50c1wiLFwidmVuZG9yc35hYm91dH5hZG1pbn5jb2xsZWN0aW9uX2VkaXRvcn5jb2xsZWN0aW9uX3BsYXllcn5jb21tdW5pdHlfZGFzaGJvYXJkfmNvbnRhY3R+Y3JlYXRvcl9kYXNoYm9hcn43ODU2YzA1YVwiLFwidmVuZG9yc35hZG1pbn5jb2xsZWN0aW9uX2VkaXRvcn5jb2xsZWN0aW9uX3BsYXllcn5jcmVhdG9yX2Rhc2hib2FyZH5leHBsb3JhdGlvbl9lZGl0b3J+ZXhwbG9yYXRpb25fcH43ZjhiY2M2N1wiLFwidmVuZG9yc35hZG1pbn5jb2xsZWN0aW9uX2VkaXRvcn5jcmVhdG9yX2Rhc2hib2FyZH5leHBsb3JhdGlvbl9lZGl0b3J+ZXhwbG9yYXRpb25fcGxheWVyfnByYWN0aWNlX3Nlc345ODhjZmViMVwiLFwidmVuZG9yc35jcmVhdG9yX2Rhc2hib2FyZH5leHBsb3JhdGlvbl9lZGl0b3J+ZXhwbG9yYXRpb25fcGxheWVyfnByYWN0aWNlX3Nlc3Npb25+cmV2aWV3X3Rlc3R+c2tpbGxfZX42MWIzZDE1ZVwiLFwiYWJvdXR+YWRtaW5+Y29sbGVjdGlvbl9lZGl0b3J+Y29sbGVjdGlvbl9wbGF5ZXJ+Y29tbXVuaXR5X2Rhc2hib2FyZH5jb250YWN0fmNyZWF0b3JfZGFzaGJvYXJkfmRvbmF0ZX5lMDZhNGExN1wiLFwiYWRtaW5+Y3JlYXRvcl9kYXNoYm9hcmR+ZXhwbG9yYXRpb25fZWRpdG9yfmV4cGxvcmF0aW9uX3BsYXllcn5tb2RlcmF0b3J+cHJhY3RpY2Vfc2Vzc2lvbn5yZXZpZXdfdGVzdH5iOTU4MGVkMFwiLFwiYWRtaW5+Y3JlYXRvcl9kYXNoYm9hcmR+ZXhwbG9yYXRpb25fZWRpdG9yfmV4cGxvcmF0aW9uX3BsYXllcn5tb2RlcmF0b3J+cHJhY3RpY2Vfc2Vzc2lvbn5yZXZpZXdfdGVzdH5kMzU5NTE1NVwiLFwiYWRtaW5+ZXhwbG9yYXRpb25fZWRpdG9yfmV4cGxvcmF0aW9uX3BsYXllcn5tb2RlcmF0b3J+cHJhY3RpY2Vfc2Vzc2lvbn5yZXZpZXdfdGVzdH5za2lsbF9lZGl0b3J+c3Rvcn43NzM0Y2RkYlwiXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciB0aGUgQmFzZSBUcmFuc2NsdXNpb24gQ29tcG9uZW50LlxuICovXG5yZXF1aXJlKCdiYXNlX2NvbXBvbmVudHMvV2FybmluZ0xvYWRlckRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgncGFnZXMvT3BwaWFGb290ZXJEaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9zaWRlYmFyL1NpZGViYXJTdGF0dXNTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9jb250ZXh0dWFsL1VybFNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL3N0YXRlZnVsL0JhY2tncm91bmRNYXNrU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdiYXNlQ29udGVudCcsIFtcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHt9LFxuICAgICAgICAgICAgdHJhbnNjbHVkZToge1xuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWI6ICc/bmF2YmFyQnJlYWRjcnVtYicsXG4gICAgICAgICAgICAgICAgY29udGVudDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgIGZvb3RlcjogJz9wYWdlRm9vdGVyJyxcbiAgICAgICAgICAgICAgICBuYXZPcHRpb25zOiAnP25hdk9wdGlvbnMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL2Jhc2VfY29tcG9uZW50cy9iYXNlX2NvbnRlbnRfZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHJvb3RTY29wZScsICdCYWNrZ3JvdW5kTWFza1NlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdTaWRlYmFyU3RhdHVzU2VydmljZScsICdVcmxTZXJ2aWNlJywgJ1NJVEVfRkVFREJBQ0tfRk9STV9VUkwnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCBCYWNrZ3JvdW5kTWFza1NlcnZpY2UsIFNpZGViYXJTdGF0dXNTZXJ2aWNlLCBVcmxTZXJ2aWNlLCBTSVRFX0ZFRURCQUNLX0ZPUk1fVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgY3RybC5pZnJhbWVkID0gVXJsU2VydmljZS5pc0lmcmFtZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5zaXRlRmVlZGJhY2tGb3JtVXJsID0gU0lURV9GRUVEQkFDS19GT1JNX1VSTDtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5pc1NpZGViYXJTaG93biA9IFNpZGViYXJTdGF0dXNTZXJ2aWNlLmlzU2lkZWJhclNob3duO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmNsb3NlU2lkZWJhck9uU3dpcGUgPSBTaWRlYmFyU3RhdHVzU2VydmljZS5jbG9zZVNpZGViYXI7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuaXNCYWNrZ3JvdW5kTWFza0FjdGl2ZSA9IEJhY2tncm91bmRNYXNrU2VydmljZS5pc01hc2tBY3RpdmU7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuREVWX01PREUgPSAkcm9vdFNjb3BlLkRFVl9NT0RFO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnNraXBUb01haW5Db250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1haW5Db250ZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcHBpYS1tYWluLWNvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWFpbkNvbnRlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1ZhcmlhYmxlIG1haW5Db250ZW50RWxlbWVudCBpcyB1bmRlZmluZWQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluQ29udGVudEVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5Db250ZW50RWxlbWVudC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkNvbnRlbnRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIHdhcm5pbmdfbG9hZGVyLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BbGVydHNTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ3dhcm5pbmdMb2FkZXInLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7fSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL2Jhc2VfY29tcG9uZW50cy93YXJuaW5nX2xvYWRlcl9kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogWydBbGVydHNTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoQWxlcnRzU2VydmljZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuQWxlcnRzU2VydmljZSA9IEFsZXJ0c1NlcnZpY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIGZvciB0aGUgJ2VtYmVkIGV4cGxvcmF0aW9uJyBtb2RhbC5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvU2l0ZUFuYWx5dGljc1NlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0V4cGxvcmF0aW9uRW1iZWRCdXR0b25TZXJ2aWNlJywgW1xuICAgICckdWliTW9kYWwnLCAnU2l0ZUFuYWx5dGljc1NlcnZpY2UnLCAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uICgkdWliTW9kYWwsIFNpdGVBbmFseXRpY3NTZXJ2aWNlLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2hvd01vZGFsOiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCkge1xuICAgICAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL2NvbXBvbmVudHMvYnV0dG9uLWRpcmVjdGl2ZXMvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXhwbG9yYXRpb24tZW1iZWQtYnV0dG9uLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwbG9yYXRpb25JZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsICckd2luZG93JywgJ2V4cGxvcmF0aW9uSWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsICR3aW5kb3csIGV4cGxvcmF0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwbG9yYXRpb25JZCA9IGV4cGxvcmF0aW9uSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlcnZlck5hbWUgPSAoJHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyAkd2luZG93LmxvY2F0aW9uLmhvc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2xvc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RUZXh0ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29kZURpdiA9IGV2dC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShjb2RlRGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmRBZnRlcihjb2RlRGl2Lmxhc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgU2l0ZUFuYWx5dGljc1NlcnZpY2UucmVnaXN0ZXJPcGVuRW1iZWRJbmZvRXZlbnQoZXhwbG9yYXRpb25JZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgaGludCBhbmQgc29sdXRpb24gYnV0dG9ucy5cbiAqL1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZXhwbG9yYXRpb24tcGxheWVyLXN0YXRlLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzLycgK1xuICAgICdoaW50cy1hbmQtc29sdXRpb24tbWFuYWdlci5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9oaW50LWFuZC1zb2x1dGlvbi1tb2RhbC5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9wbGF5ZXItcG9zaXRpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcGxheWVyLXRyYW5zY3JpcHQuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvc3RhdHMtcmVwb3J0aW5nLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0NvbnRleHRTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9jb250ZXh0dWFsL0RldmljZUluZm9TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ2hpbnRBbmRTb2x1dGlvbkJ1dHRvbnMnLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9jb21wb25lbnRzL2J1dHRvbi1kaXJlY3RpdmVzLycgK1xuICAgICAgICAgICAgICAgICdoaW50LWFuZC1zb2x1dGlvbi1idXR0b25zLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgJyRzY29wZScsICckcm9vdFNjb3BlJywgJ0hpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ1BsYXllclRyYW5zY3JpcHRTZXJ2aWNlJywgJ0V4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnSGludEFuZFNvbHV0aW9uTW9kYWxTZXJ2aWNlJywgJ0RldmljZUluZm9TZXJ2aWNlJywgJ0NvbnRleHRTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnUGxheWVyUG9zaXRpb25TZXJ2aWNlJywgJ0VWRU5UX0FDVElWRV9DQVJEX0NIQU5HRUQnLFxuICAgICAgICAgICAgICAgICdFVkVOVF9ORVdfQ0FSRF9PUEVORUQnLCAnSU5URVJBQ1RJT05fU1BFQ1MnLCAnU3RhdHNSZXBvcnRpbmdTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCBIaW50c0FuZFNvbHV0aW9uTWFuYWdlclNlcnZpY2UsIFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLCBFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZSwgSGludEFuZFNvbHV0aW9uTW9kYWxTZXJ2aWNlLCBEZXZpY2VJbmZvU2VydmljZSwgQ29udGV4dFNlcnZpY2UsIFBsYXllclBvc2l0aW9uU2VydmljZSwgRVZFTlRfQUNUSVZFX0NBUkRfQ0hBTkdFRCwgRVZFTlRfTkVXX0NBUkRfT1BFTkVELCBJTlRFUkFDVElPTl9TUEVDUywgU3RhdHNSZXBvcnRpbmdTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgY3RybC5oaW50SW5kZXhlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2VkaXRvclByZXZpZXdNb2RlID0gQ29udGV4dFNlcnZpY2UuaXNJbkV4cGxvcmF0aW9uRWRpdG9yUGFnZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXByZXNlbnRzIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudGx5IHZpZXdlZCBoaW50LlxuICAgICAgICAgICAgICAgICAgICBjdHJsLmFjdGl2ZUhpbnRJbmRleCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZGlzcGxheWVkQ2FyZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuc29sdXRpb25Nb2RhbElzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuY3VycmVudGx5T25MYXRlc3RDYXJkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5pc0hpbnRDb25zdW1lZCA9IEhpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZS5pc0hpbnRDb25zdW1lZDtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5pc1NvbHV0aW9uQ29uc3VtZWQgPSAoSGludHNBbmRTb2x1dGlvbk1hbmFnZXJTZXJ2aWNlLmlzU29sdXRpb25Db25zdW1lZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNldExvY2FsSGludHNBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuaGludEluZGV4ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBudW1IaW50cyA9IEhpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZS5nZXROdW1IaW50cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG51bUhpbnRzOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5oaW50SW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5pc0hpbnRCdXR0b25WaXNpYmxlID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKEhpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZS5pc0hpbnRWaWV3YWJsZShpbmRleCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmRpc3BsYXllZENhcmQgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmRpc3BsYXllZENhcmQuZG9lc0ludGVyYWN0aW9uU3VwcG9ydEhpbnRzKCkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmlzU29sdXRpb25CdXR0b25WaXNpYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZS5pc1NvbHV0aW9uVmlld2FibGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5kaXNwbGF5SGludE1vZGFsID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmFjdGl2ZUhpbnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSAoSGludEFuZFNvbHV0aW9uTW9kYWxTZXJ2aWNlLmRpc3BsYXlIaW50TW9kYWwoaW5kZXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UucmVzdWx0LnRoZW4obnVsbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuYWN0aXZlSGludEluZGV4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLm9uQ2xpY2tTb2x1dGlvbkJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc29sdXRpb25Nb2RhbElzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChIaW50c0FuZFNvbHV0aW9uTWFuYWdlclNlcnZpY2UuaXNTb2x1dGlvbkNvbnN1bWVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmRpc3BsYXlTb2x1dGlvbk1vZGFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJzdGl0aWFsTW9kYWxQcm9taXNlID0gKEhpbnRBbmRTb2x1dGlvbk1vZGFsU2VydmljZS5kaXNwbGF5U29sdXRpb25JbnRlcnN0aXRpYWxNb2RhbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnN0aXRpYWxNb2RhbFByb21pc2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmRpc3BsYXlTb2x1dGlvbk1vZGFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNvbHV0aW9uTW9kYWxJc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmRpc3BsYXlTb2x1dGlvbk1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zb2x1dGlvbk1vZGFsSXNBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluUXVlc3Rpb25Nb2RlID0gKEV4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLmlzSW5RdWVzdGlvbk1vZGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9lZGl0b3JQcmV2aWV3TW9kZSAmJiAhaW5RdWVzdGlvbk1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0c1JlcG9ydGluZ1NlcnZpY2UucmVjb3JkU29sdXRpb25IaXQoUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldEN1cnJlbnRTdGF0ZU5hbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IEhpbnRBbmRTb2x1dGlvbk1vZGFsU2VydmljZS5kaXNwbGF5U29sdXRpb25Nb2RhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZXN1bHQudGhlbihudWxsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zb2x1dGlvbk1vZGFsSXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKEVWRU5UX05FV19DQVJEX09QRU5FRCwgZnVuY3Rpb24gKGV2dCwgbmV3Q2FyZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5kaXNwbGF5ZWRDYXJkID0gbmV3Q2FyZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZS5yZXNldChuZXdDYXJkLmdldEhpbnRzKCksIG5ld0NhcmQuZ2V0U29sdXRpb24oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldExvY2FsSGludHNBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5pc1Rvb2x0aXBWaXNpYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZS5pc0hpbnRUb29sdGlwT3BlbigpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKEVWRU5UX0FDVElWRV9DQVJEX0NIQU5HRUQsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5ZWRDYXJkSW5kZXggPSBQbGF5ZXJQb3NpdGlvblNlcnZpY2UuZ2V0RGlzcGxheWVkQ2FyZEluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmN1cnJlbnRseU9uTGF0ZXN0Q2FyZCA9IFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmlzTGFzdENhcmQoZGlzcGxheWVkQ2FyZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdHJsLmN1cnJlbnRseU9uTGF0ZXN0Q2FyZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TG9jYWxIaW50c0FycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXNldExvY2FsSGludHNBcnJheSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE2IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciB0aGUgYXR0cmlidXRpb24gZ3VpZGUuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvQnJvd3NlckNoZWNrZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ2F0dHJpYnV0aW9uR3VpZGUnLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9jb21wb25lbnRzL2NvbW1vbi1sYXlvdXQtZGlyZWN0aXZlcy9jb21tb24tZWxlbWVudHMvJyArXG4gICAgICAgICAgICAgICAgJ2F0dHJpYnV0aW9uLWd1aWRlLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgJ0Jyb3dzZXJDaGVja2VyU2VydmljZScsICdVcmxTZXJ2aWNlJywgZnVuY3Rpb24gKEJyb3dzZXJDaGVja2VyU2VydmljZSwgVXJsU2VydmljZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuaXNNb2JpbGVEZXZpY2UgPSBCcm93c2VyQ2hlY2tlclNlcnZpY2UuaXNNb2JpbGVEZXZpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5pZnJhbWVkID0gVXJsU2VydmljZS5pc0lmcmFtZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgdGhlIGJhY2tncm91bmQgYmFubmVyLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ2JhY2tncm91bmRCYW5uZXInLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9jb21wb25lbnRzL2NvbW1vbi1sYXlvdXQtZGlyZWN0aXZlcy9jb21tb24tZWxlbWVudHMvJyArXG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtYmFubmVyLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NzaWJsZUJhbm5lckZpbGVuYW1lcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdiYW5uZXJBLnN2ZycsICdiYW5uZXJCLnN2ZycsICdiYW5uZXJDLnN2ZycsICdiYW5uZXJELnN2ZydcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhbm5lckltYWdlRmlsZW5hbWUgPSBwb3NzaWJsZUJhbm5lckZpbGVuYW1lc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZUJhbm5lckZpbGVuYW1lcy5sZW5ndGgpXTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5iYW5uZXJJbWFnZUZpbGVVcmwgPSBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRTdGF0aWNJbWFnZVVybCgnL2JhY2tncm91bmQvJyArIGJhbm5lckltYWdlRmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE2IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciB0aGUgU29jaWFsIFNoYXJpbmcgTGlua3MuXG4gKi9cbnJlcXVpcmUoJ2NvbXBvbmVudHMvYnV0dG9uLWRpcmVjdGl2ZXMvZXhwbG9yYXRpb24tZW1iZWQtYnV0dG9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0h0bWxFc2NhcGVyU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvU2l0ZUFuYWx5dGljc1NlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnc2hhcmluZ0xpbmtzJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcbiAgICAgICAgICAgICAgICBsYXlvdXRUeXBlOiAnQCcsXG4gICAgICAgICAgICAgICAgbGF5b3V0QWxpZ25UeXBlOiAnQCcsXG4gICAgICAgICAgICAgICAgc2hhcmVUeXBlOiAnQCcsXG4gICAgICAgICAgICAgICAgZ2V0RXhwbG9yYXRpb25JZDogJyZleHBsb3JhdGlvbklkJyxcbiAgICAgICAgICAgICAgICBnZXRDb2xsZWN0aW9uSWQ6ICcmY29sbGVjdGlvbklkJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL2NvbXBvbmVudHMvY29tbW9uLWxheW91dC1kaXJlY3RpdmVzL2NvbW1vbi1lbGVtZW50cy8nICtcbiAgICAgICAgICAgICAgICAnc2hhcmluZy1saW5rcy5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogW1xuICAgICAgICAgICAgICAgICckd2luZG93JywgJ0h0bWxFc2NhcGVyU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ0V4cGxvcmF0aW9uRW1iZWRCdXR0b25TZXJ2aWNlJywgJ1NpdGVBbmFseXRpY3NTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnREVGQVVMVF9UV0lUVEVSX1NIQVJFX01FU1NBR0VfRURJVE9SJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJHdpbmRvdywgSHRtbEVzY2FwZXJTZXJ2aWNlLCBFeHBsb3JhdGlvbkVtYmVkQnV0dG9uU2VydmljZSwgU2l0ZUFuYWx5dGljc1NlcnZpY2UsIERFRkFVTFRfVFdJVFRFUl9TSEFSRV9NRVNTQUdFX0VESVRPUikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwucmVnaXN0ZXJTaGFyZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwuc2hhcmVUeXBlID09PSAnZXhwbG9yYXRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmV4cGxvcmF0aW9uSWQgPSBjdHJsLmdldEV4cGxvcmF0aW9uSWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuYWN0aXZpdHlUeXBlID0gJ2V4cGxvcmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5hY3Rpdml0eUlkID0gY3RybC5leHBsb3JhdGlvbklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5yZWdpc3RlclNoYXJlRXZlbnQgPSAoU2l0ZUFuYWx5dGljc1NlcnZpY2UucmVnaXN0ZXJTaGFyZUV4cGxvcmF0aW9uRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zaG93RW1iZWRFeHBsb3JhdGlvbk1vZGFsID0gKEV4cGxvcmF0aW9uRW1iZWRCdXR0b25TZXJ2aWNlLnNob3dNb2RhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY3RybC5zaGFyZVR5cGUgPT09ICdjb2xsZWN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5jb2xsZWN0aW9uSWQgPSBjdHJsLmdldENvbGxlY3Rpb25JZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5hY3Rpdml0eVR5cGUgPSAnY29sbGVjdGlvbic7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmFjdGl2aXR5SWQgPSBjdHJsLmNvbGxlY3Rpb25JZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucmVnaXN0ZXJTaGFyZUV2ZW50ID0gKFNpdGVBbmFseXRpY3NTZXJ2aWNlLnJlZ2lzdGVyU2hhcmVDb2xsZWN0aW9uRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1NoYXJpbmdMaW5rcyBkaXJlY3RpdmUgY2FuIG9ubHkgYmUgdXNlZCBlaXRoZXIgaW4gdGhlJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbGxlY3Rpb24gcGxheWVyIG9yIHRoZSBleHBsb3JhdGlvbiBwbGF5ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdHJsLnNlcnZlck5hbWUgPSAoJHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyAkd2luZG93LmxvY2F0aW9uLmhvc3QpO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmVzY2FwZWRUd2l0dGVyVGV4dCA9IChIdG1sRXNjYXBlclNlcnZpY2UudW5lc2NhcGVkU3RyVG9Fc2NhcGVkU3RyKERFRkFVTFRfVFdJVFRFUl9TSEFSRV9NRVNTQUdFX0VESVRPUikpO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmNsYXNzcm9vbVVybCA9IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldFN0YXRpY0ltYWdlVXJsKCcvZ2VuZXJhbC9jbGFzc3Jvb20ucG5nJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIHRoZSBjb25jZXB0IGNhcmRzIHZpZXdlci5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3NraWxsL0NvbmNlcHRDYXJkQmFja2VuZEFwaVNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9za2lsbC9Db25jZXB0Q2FyZE9iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2ZpbHRlcnMvZm9ybWF0LXJ0ZS1wcmV2aWV3LmZpbHRlci50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdjb25jZXB0Q2FyZCcsIFtcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCBmdW5jdGlvbiAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XG4gICAgICAgICAgICAgICAgZ2V0U2tpbGxJZHM6ICcmc2tpbGxJZHMnLFxuICAgICAgICAgICAgICAgIGluZGV4OiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9jb21wb25lbnRzL2NvbmNlcHQtY2FyZC9jb25jZXB0LWNhcmQudGVtcGxhdGUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogW1xuICAgICAgICAgICAgICAgICckc2NvcGUnLCAnJGZpbHRlcicsICckcm9vdFNjb3BlJyxcbiAgICAgICAgICAgICAgICAnQ29uY2VwdENhcmRCYWNrZW5kQXBpU2VydmljZScsICdDb25jZXB0Q2FyZE9iamVjdEZhY3RvcnknLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRmaWx0ZXIsICRyb290U2NvcGUsIENvbmNlcHRDYXJkQmFja2VuZEFwaVNlcnZpY2UsIENvbmNlcHRDYXJkT2JqZWN0RmFjdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuY29uY2VwdENhcmRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q29uY2VwdENhcmQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtYmVyT2ZXb3JrZWRFeGFtcGxlc1Nob3duID0gMDtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5sb2FkaW5nTWVzc2FnZSA9ICdMb2FkaW5nJztcbiAgICAgICAgICAgICAgICAgICAgQ29uY2VwdENhcmRCYWNrZW5kQXBpU2VydmljZS5sb2FkQ29uY2VwdENhcmRzKGN0cmwuZ2V0U2tpbGxJZHMoKSkudGhlbihmdW5jdGlvbiAoY29uY2VwdENhcmRCYWNrZW5kRGljdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmNlcHRDYXJkQmFja2VuZERpY3RzLmZvckVhY2goZnVuY3Rpb24gKGNvbmNlcHRDYXJkQmFja2VuZERpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmNvbmNlcHRDYXJkcy5wdXNoKENvbmNlcHRDYXJkT2JqZWN0RmFjdG9yeS5jcmVhdGVGcm9tQmFja2VuZERpY3QoY29uY2VwdENhcmRCYWNrZW5kRGljdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmxvYWRpbmdNZXNzYWdlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29uY2VwdENhcmQgPSBjdHJsLmNvbmNlcHRDYXJkc1tjdHJsLmluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZ2V0U2tpbGxFeHBsYW5hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkZmlsdGVyKCdmb3JtYXRSdGVQcmV2aWV3JykoY3VycmVudENvbmNlcHRDYXJkLmdldEV4cGxhbmF0aW9uKCkuZ2V0SHRtbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5pc0xhc3RXb3JrZWRFeGFtcGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck9mV29ya2VkRXhhbXBsZXNTaG93biA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29uY2VwdENhcmQuZ2V0V29ya2VkRXhhbXBsZXMoKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuc2hvd01vcmVXb3JrZWRFeGFtcGxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlck9mV29ya2VkRXhhbXBsZXNTaG93bisrO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnNob3dXb3JrZWRFeGFtcGxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3b3JrZWRFeGFtcGxlc1Nob3duID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mV29ya2VkRXhhbXBsZXNTaG93bjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VkRXhhbXBsZXNTaG93bi5wdXNoKCRmaWx0ZXIoJ2Zvcm1hdFJ0ZVByZXZpZXcnKShjdXJyZW50Q29uY2VwdENhcmQuZ2V0V29ya2VkRXhhbXBsZXMoKVtpXS5nZXRIdG1sKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3b3JrZWRFeGFtcGxlc1Nob3duO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5pbmRleCcsIGZ1bmN0aW9uIChuZXdJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbmNlcHRDYXJkID0gY3RybC5jb25jZXB0Q2FyZHNbbmV3SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZXb3JrZWRFeGFtcGxlc1Nob3duID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTYgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIGEgc2NoZW1hLWJhc2VkIGVkaXRvciBmb3IgZXhwcmVzc2lvbnMuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnc2NoZW1hQmFzZWRFeHByZXNzaW9uRWRpdG9yJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhbHVlOiAnPScsXG4gICAgICAgICAgICAgICAgaXNEaXNhYmxlZDogJyYnLFxuICAgICAgICAgICAgICAgIC8vIFRPRE8oc2xsKTogQ3VycmVudGx5IG9ubHkgdGFrZXMgYSBzdHJpbmcgd2hpY2ggaXMgZWl0aGVyICdib29sJyxcbiAgICAgICAgICAgICAgICAvLyAnaW50JyBvciAnZmxvYXQnLiBNYXkgbmVlZCB0byBnZW5lcmFsaXplLlxuICAgICAgICAgICAgICAgIG91dHB1dFR5cGU6ICcmJyxcbiAgICAgICAgICAgICAgICBsYWJlbEZvckZvY3VzVGFyZ2V0OiAnJidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9jb21wb25lbnRzL2Zvcm1zL3NjaGVtYS1iYXNlZC1lZGl0b3JzLycgK1xuICAgICAgICAgICAgICAgICdzY2hlbWEtYmFzZWQtZXhwcmVzc2lvbi1lZGl0b3IuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRSdcbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE2IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciBhIHNjaGVtYS1iYXNlZCB2aWV3ZXIgZm9yIGN1c3RvbSB2YWx1ZXMuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL05lc3RlZERpcmVjdGl2ZXNSZWN1cnNpb25UaW1lb3V0UHJldmVudGlvblNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnc2NoZW1hQmFzZWRDdXN0b21WaWV3ZXInLCBbXG4gICAgJ05lc3RlZERpcmVjdGl2ZXNSZWN1cnNpb25UaW1lb3V0UHJldmVudGlvblNlcnZpY2UnLFxuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgZnVuY3Rpb24gKE5lc3RlZERpcmVjdGl2ZXNSZWN1cnNpb25UaW1lb3V0UHJldmVudGlvblNlcnZpY2UsIFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFsdWU6ICc9JyxcbiAgICAgICAgICAgICAgICAvLyBUaGUgY2xhc3Mgb2YgdGhlIG9iamVjdCBiZWluZyBlZGl0ZWQuXG4gICAgICAgICAgICAgICAgb2JqVHlwZTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtdmlld2Vycy8nICtcbiAgICAgICAgICAgICAgICAnc2NoZW1hLWJhc2VkLWN1c3RvbS12aWV3ZXIuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBjb21waWxlOiBOZXN0ZWREaXJlY3RpdmVzUmVjdXJzaW9uVGltZW91dFByZXZlbnRpb25TZXJ2aWNlLmNvbXBpbGVcbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE2IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciBhIHNjaGVtYS1iYXNlZCB2aWV3ZXIgZm9yIGRpY3RzLlxuICovXG5yZXF1aXJlKCdjb21wb25lbnRzL2Zvcm1zL3NjaGVtYS12aWV3ZXJzL3NjaGVtYS1iYXNlZC12aWV3ZXIuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9OZXN0ZWREaXJlY3RpdmVzUmVjdXJzaW9uVGltZW91dFByZXZlbnRpb25TZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ3NjaGVtYUJhc2VkRGljdFZpZXdlcicsIFtcbiAgICAnTmVzdGVkRGlyZWN0aXZlc1JlY3Vyc2lvblRpbWVvdXRQcmV2ZW50aW9uU2VydmljZScsXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoTmVzdGVkRGlyZWN0aXZlc1JlY3Vyc2lvblRpbWVvdXRQcmV2ZW50aW9uU2VydmljZSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYWx1ZTogJz0nLFxuICAgICAgICAgICAgICAgIC8vIFJlYWQtb25seSBwcm9wZXJ0eS4gQW4gb2JqZWN0IHdob3NlIGtleXMgYW5kIHZhbHVlcyBhcmUgdGhlIGRpY3RcbiAgICAgICAgICAgICAgICAvLyBwcm9wZXJ0aWVzIGFuZCB0aGUgY29ycmVzcG9uZGluZyBzY2hlbWFzLlxuICAgICAgICAgICAgICAgIHByb3BlcnR5U2NoZW1hczogJyYnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtdmlld2Vycy8nICtcbiAgICAgICAgICAgICAgICAnc2NoZW1hLWJhc2VkLWRpY3Qtdmlld2VyLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgY29tcGlsZTogTmVzdGVkRGlyZWN0aXZlc1JlY3Vyc2lvblRpbWVvdXRQcmV2ZW50aW9uU2VydmljZS5jb21waWxlLFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRIdW1hblJlYWRhYmxlUHJvcGVydHlEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5LmRlc2NyaXB0aW9uIHx8ICdbJyArIHByb3BlcnR5Lm5hbWUgKyAnXSc7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE2IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciBhIHNjaGVtYS1iYXNlZCB2aWV3ZXIgZm9yIEhUTUwuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnc2NoZW1hQmFzZWRIdG1sVmlld2VyJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhbHVlOiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9jb21wb25lbnRzL2Zvcm1zL3NjaGVtYS12aWV3ZXJzLycgK1xuICAgICAgICAgICAgICAgICdzY2hlbWEtYmFzZWQtaHRtbC12aWV3ZXIuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRSdcbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE2IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciBhIHNjaGVtYS1iYXNlZCB2aWV3ZXIgZm9yIGxpc3RzLlxuICovXG5yZXF1aXJlKCdjb21wb25lbnRzL2Zvcm1zL3NjaGVtYS12aWV3ZXJzL3NjaGVtYS1iYXNlZC12aWV3ZXIuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9OZXN0ZWREaXJlY3RpdmVzUmVjdXJzaW9uVGltZW91dFByZXZlbnRpb25TZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ3NjaGVtYUJhc2VkTGlzdFZpZXdlcicsIFtcbiAgICAnTmVzdGVkRGlyZWN0aXZlc1JlY3Vyc2lvblRpbWVvdXRQcmV2ZW50aW9uU2VydmljZScsXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoTmVzdGVkRGlyZWN0aXZlc1JlY3Vyc2lvblRpbWVvdXRQcmV2ZW50aW9uU2VydmljZSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYWx1ZTogJz0nLFxuICAgICAgICAgICAgICAgIC8vIFJlYWQtb25seSBwcm9wZXJ0eS4gVGhlIHNjaGVtYSBkZWZpbml0aW9uIGZvciBlYWNoIGl0ZW0gaW4gdGhlIGxpc3QuXG4gICAgICAgICAgICAgICAgaXRlbVNjaGVtYTogJyYnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtdmlld2Vycy8nICtcbiAgICAgICAgICAgICAgICAnc2NoZW1hLWJhc2VkLWxpc3Qtdmlld2VyLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgY29tcGlsZTogTmVzdGVkRGlyZWN0aXZlc1JlY3Vyc2lvblRpbWVvdXRQcmV2ZW50aW9uU2VydmljZS5jb21waWxlXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNiBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgYSBzY2hlbWEtYmFzZWQgdmlld2VyIGZvciBwcmltaXRpdmUgdHlwZXMuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnc2NoZW1hQmFzZWRQcmltaXRpdmVWaWV3ZXInLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFsdWU6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLXZpZXdlcnMvJyArXG4gICAgICAgICAgICAgICAgJ3NjaGVtYS1iYXNlZC1wcmltaXRpdmUtdmlld2VyLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0V4cHJlc3Npb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmlzU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTYgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIGEgc2NoZW1hLWJhc2VkIHZpZXdlciBmb3IgdW5pY29kZSBzdHJpbmdzLlxuICovXG5yZXF1aXJlKCdmaWx0ZXJzL2NvbnZlcnQtdW5pY29kZS13aXRoLXBhcmFtcy10by1odG1sLmZpbHRlci50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdzY2hlbWFCYXNlZFVuaWNvZGVWaWV3ZXInLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFsdWU6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLXZpZXdlcnMvJyArXG4gICAgICAgICAgICAgICAgJ3NjaGVtYS1iYXNlZC11bmljb2RlLXZpZXdlci5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyRmaWx0ZXInLCAnJHNjZScsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGZpbHRlciwgJHNjZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0RGlzcGxheWVkVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjZS50cnVzdEFzSHRtbCgkZmlsdGVyKCdjb252ZXJ0VW5pY29kZVdpdGhQYXJhbXNUb0h0bWwnKSgkc2NvcGUubG9jYWxWYWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE2IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciBnZW5lcmFsIHNjaGVtYS1iYXNlZCB2aWV3ZXJzLlxuICovXG5yZXF1aXJlKCdjb21wb25lbnRzL2Zvcm1zL3NjaGVtYS12aWV3ZXJzL3NjaGVtYS1iYXNlZC1jdXN0b20tdmlld2VyLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtdmlld2Vycy9zY2hlbWEtYmFzZWQtZGljdC12aWV3ZXIuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdjb21wb25lbnRzL2Zvcm1zL3NjaGVtYS12aWV3ZXJzL3NjaGVtYS1iYXNlZC1odG1sLXZpZXdlci5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLXZpZXdlcnMvc2NoZW1hLWJhc2VkLWxpc3Qtdmlld2VyLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtdmlld2Vycy9zY2hlbWEtYmFzZWQtcHJpbWl0aXZlLXZpZXdlci5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLXZpZXdlcnMvc2NoZW1hLWJhc2VkLXVuaWNvZGUtdmlld2VyLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdzY2hlbWFCYXNlZFZpZXdlcicsIFtcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCBmdW5jdGlvbiAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XG4gICAgICAgICAgICAgICAgc2NoZW1hOiAnJicsXG4gICAgICAgICAgICAgICAgbG9jYWxWYWx1ZTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtdmlld2Vycy9zY2hlbWEtYmFzZWQtdmlld2VyLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbZnVuY3Rpb24gKCkgeyB9XVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBWYWxpZGF0b3IgdG8gY2hlY2sgaWYgaW5wdXQgaXMgZ3JlYXRlciB0aGFuXG4gICBhcmdzLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5maWx0ZXIoJ2lzQXRMZWFzdCcsIFtmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQsIGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiAoaW5wdXQgPj0gYXJncy5taW5WYWx1ZSk7XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBWYWxpZGF0b3IgdG8gY2hlY2sgaWYgaW5wdXQgaXMgbGVzcyB0aGFuXG4gICBhcmdzLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5maWx0ZXIoJ2lzQXRNb3N0JywgW2Z1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCwgYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIChpbnB1dCA8PSBhcmdzLm1heFZhbHVlKTtcbiAgICAgICAgfTtcbiAgICB9XSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFZhbGlkYXRvciB0byBjaGVjayBpZiBpbnB1dCBpcyBpbnRlZ2VyLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5maWx0ZXIoJ2lzSW50ZWdlcicsIFtmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIuaXNJbnRlZ2VyKE51bWJlcihpbnB1dCkpO1xuICAgICAgICB9O1xuICAgIH1dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVmFsaWRhdG9yIHRvIGNoZWNrIGlmIGlucHV0IGlzIG5vbmVtcHR5LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5maWx0ZXIoJ2lzTm9uZW1wdHknLCBbZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gQm9vbGVhbihpbnB1dCk7XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTUgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXNwbGF5cyBjaXJjbGVkIGltYWdlcyB3aXRoIGxpbmtpbmcgKHdoZW4gYXZhaWxhYmxlKS5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdjaXJjdWxhckltYWdlJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcbiAgICAgICAgICAgICAgICBzcmM6ICcmJyxcbiAgICAgICAgICAgICAgICBsaW5rOiAnJj8nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvY29tcG9uZW50cy9wcm9maWxlLWxpbmstZGlyZWN0aXZlcy9jaXJjdWxhci1pbWFnZS5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogW2Z1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmlzTGlua0F2YWlsYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsLmxpbmsoKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIGNyZWF0aW5nIGltYWdlIGxpbmtzIHRvIGEgdXNlcidzIHByb2ZpbGUgcGFnZS5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdwcm9maWxlTGlua0ltYWdlJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsICdTWVNURU1fVVNFUl9JRFMnLFxuICAgIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSwgU1lTVEVNX1VTRVJfSURTKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnJidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9jb21wb25lbnRzL3Byb2ZpbGUtbGluay1kaXJlY3RpdmVzLycgK1xuICAgICAgICAgICAgICAgICdwcm9maWxlLWxpbmstaW1hZ2UuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJGh0dHAnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBERUZBVUxUX1BST0ZJTEVfSU1BR0VfUEFUSCA9IChVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRTdGF0aWNJbWFnZVVybCgnL2F2YXRhci91c2VyX2JsdWVfNzJweC5wbmcnKSk7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuaXNVc2VybmFtZUxpbmthYmxlID0gZnVuY3Rpb24gKHVzZXJuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1lTVEVNX1VTRVJfSURTLmluZGV4T2YodXNlcm5hbWUpID09PSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5wcm9maWxlSW1hZ2VVcmwgPSAoJy9wcmVmZXJlbmNlc2hhbmRsZXIvcHJvZmlsZV9waWN0dXJlX2J5X3VzZXJuYW1lLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC51c2VybmFtZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5wcm9maWxlUGljdHVyZSA9IERFRkFVTFRfUFJPRklMRV9JTUFHRV9QQVRIO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHVzZXIgcHJvZmlsZSBwaWN0dXJlLCBvciB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICAvLyBpbWFnZSBpZiB1c2VyIGlzIG5vdCBsb2dnZWQgaW4gb3IgaGFzIG5vdCB1cGxvYWRlZCBhIHByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgLy8gcGljdHVyZSwgb3IgdGhlIHBsYXllciBpcyBpbiBwcmV2aWV3IG1vZGUuXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmdldChjdHJsLnByb2ZpbGVJbWFnZVVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucHJvZmlsZVBpY3R1cmUgPSAocmVzcG9uc2UuZGF0YS5wcm9maWxlX3BpY3R1cmVfZGF0YV91cmxfZm9yX3VzZXJuYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9QUk9GSUxFX0lNQUdFX1BBVEgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENvbnN0YW50cyBmb3IgdGhlIHF1ZXN0aW9uIHBsYXllciBkaXJlY3RpdmUuXG4gKi9cbi8vIFRPRE8oIzcwOTIpOiBEZWxldGUgdGhpcyBmaWxlIG9uY2UgbWlncmF0aW9uIGlzIGNvbXBsZXRlIGFuZCB0aGVzZSBBbmd1bGFySlNcbi8vIGVxdWl2YWxlbnRzIG9mIHRoZSBBbmd1bGFyIGNvbnN0YW50cyBhcmUgbm8gbG9uZ2VyIG5lZWRlZC5cbnZhciBxdWVzdGlvbl9wbGF5ZXJfY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiY29tcG9uZW50cy9xdWVzdGlvbi1kaXJlY3RpdmVzL3F1ZXN0aW9uLXBsYXllci9xdWVzdGlvbi1wbGF5ZXIuY29uc3RhbnRzXCIpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0hBU0hfUEFSQU0nLCBxdWVzdGlvbl9wbGF5ZXJfY29uc3RhbnRzXzEuUXVlc3Rpb25QbGF5ZXJDb25zdGFudHMuSEFTSF9QQVJBTSk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnTUFYX1NDT1JFX1BFUl9RVUVTVElPTicsIHF1ZXN0aW9uX3BsYXllcl9jb25zdGFudHNfMS5RdWVzdGlvblBsYXllckNvbnN0YW50cy5NQVhfU0NPUkVfUEVSX1FVRVNUSU9OKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdNQVhfTUFTVEVSWV9HQUlOX1BFUl9RVUVTVElPTicsIHF1ZXN0aW9uX3BsYXllcl9jb25zdGFudHNfMS5RdWVzdGlvblBsYXllckNvbnN0YW50cy5NQVhfTUFTVEVSWV9HQUlOX1BFUl9RVUVTVElPTik7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnTUFYX01BU1RFUllfTE9TU19QRVJfUVVFU1RJT04nLCBxdWVzdGlvbl9wbGF5ZXJfY29uc3RhbnRzXzEuUXVlc3Rpb25QbGF5ZXJDb25zdGFudHMuTUFYX01BU1RFUllfTE9TU19QRVJfUVVFU1RJT04pO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0NPTE9SU19GT1JfUEFTU19GQUlMX01PREUnLCBxdWVzdGlvbl9wbGF5ZXJfY29uc3RhbnRzXzEuUXVlc3Rpb25QbGF5ZXJDb25zdGFudHMuQ09MT1JTX0ZPUl9QQVNTX0ZBSUxfTU9ERSk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnUVVFU1RJT05fUExBWUVSX01PREUnLCBxdWVzdGlvbl9wbGF5ZXJfY29uc3RhbnRzXzEuUXVlc3Rpb25QbGF5ZXJDb25zdGFudHMuUVVFU1RJT05fUExBWUVSX01PREUpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1ZJRVdfSElOVF9QRU5BTFRZJywgcXVlc3Rpb25fcGxheWVyX2NvbnN0YW50c18xLlF1ZXN0aW9uUGxheWVyQ29uc3RhbnRzLlZJRVdfSElOVF9QRU5BTFRZKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdWSUVXX0hJTlRfUEVOQUxUWV9GT1JfTUFTVEVSWScsIHF1ZXN0aW9uX3BsYXllcl9jb25zdGFudHNfMS5RdWVzdGlvblBsYXllckNvbnN0YW50cy5WSUVXX0hJTlRfUEVOQUxUWV9GT1JfTUFTVEVSWSk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnV1JPTkdfQU5TV0VSX1BFTkFMVFknLCBxdWVzdGlvbl9wbGF5ZXJfY29uc3RhbnRzXzEuUXVlc3Rpb25QbGF5ZXJDb25zdGFudHMuV1JPTkdfQU5TV0VSX1BFTkFMVFkpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1dST05HX0FOU1dFUl9QRU5BTFRZX0ZPUl9NQVNURVJZJywgcXVlc3Rpb25fcGxheWVyX2NvbnN0YW50c18xLlF1ZXN0aW9uUGxheWVyQ29uc3RhbnRzLldST05HX0FOU1dFUl9QRU5BTFRZX0ZPUl9NQVNURVJZKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29uc3RhbnRzIGZvciB0aGUgcXVlc3Rpb24gcGxheWVyIGRpcmVjdGl2ZS5cbiAqL1xudmFyIFF1ZXN0aW9uUGxheWVyQ29uc3RhbnRzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1ZXN0aW9uUGxheWVyQ29uc3RhbnRzKCkge1xuICAgIH1cbiAgICBRdWVzdGlvblBsYXllckNvbnN0YW50cy5IQVNIX1BBUkFNID0gJ3F1ZXN0aW9uLXBsYXllci1yZXN1bHQ9JztcbiAgICBRdWVzdGlvblBsYXllckNvbnN0YW50cy5NQVhfU0NPUkVfUEVSX1FVRVNUSU9OID0gMS4wO1xuICAgIFF1ZXN0aW9uUGxheWVyQ29uc3RhbnRzLk1BWF9NQVNURVJZX0dBSU5fUEVSX1FVRVNUSU9OID0gMC4xO1xuICAgIFF1ZXN0aW9uUGxheWVyQ29uc3RhbnRzLk1BWF9NQVNURVJZX0xPU1NfUEVSX1FVRVNUSU9OID0gLTAuMTtcbiAgICBRdWVzdGlvblBsYXllckNvbnN0YW50cy5DT0xPUlNfRk9SX1BBU1NfRkFJTF9NT0RFID0ge1xuICAgICAgICAvLyBjb2xvciBvcmFuZ2VcbiAgICAgICAgRkFJTEVEX0NPTE9SOiAncmdiKDIxNywgOTIsIDEyKScsXG4gICAgICAgIC8vIGNvbG9yIHNoYWxsb3cgb3JhbmdlXG4gICAgICAgIEZBSUxFRF9DT0xPUl9PVVRFUjogJ3JnYigyNDQsIDIwNiwgMTg2KScsXG4gICAgICAgIC8vIGNvbG9yIGdyZWVuXG4gICAgICAgIFBBU1NFRF9DT0xPUjogJ3JnYigwLCAxNTAsIDEzNiknLFxuICAgICAgICAvLyBjb2xvciBzaGFsbG93IGdyZWVuXG4gICAgICAgIFBBU1NFRF9DT0xPUl9PVVRFUjogJ3JnYigxNDMsIDIxNywgMjA5KSdcbiAgICB9O1xuICAgIFF1ZXN0aW9uUGxheWVyQ29uc3RhbnRzLlFVRVNUSU9OX1BMQVlFUl9NT0RFID0ge1xuICAgICAgICBQQVNTX0ZBSUxfTU9ERTogJ1BBU1NfRkFJTCdcbiAgICB9O1xuICAgIFF1ZXN0aW9uUGxheWVyQ29uc3RhbnRzLlZJRVdfSElOVF9QRU5BTFRZID0gMC4xO1xuICAgIFF1ZXN0aW9uUGxheWVyQ29uc3RhbnRzLlZJRVdfSElOVF9QRU5BTFRZX0ZPUl9NQVNURVJZID0gMC4wMjtcbiAgICBRdWVzdGlvblBsYXllckNvbnN0YW50cy5XUk9OR19BTlNXRVJfUEVOQUxUWV9GT1JfTUFTVEVSWSA9IDAuMDU7XG4gICAgUXVlc3Rpb25QbGF5ZXJDb25zdGFudHMuV1JPTkdfQU5TV0VSX1BFTkFMVFkgPSAwLjE7XG4gICAgcmV0dXJuIFF1ZXN0aW9uUGxheWVyQ29uc3RhbnRzO1xufSgpKTtcbmV4cG9ydHMuUXVlc3Rpb25QbGF5ZXJDb25zdGFudHMgPSBRdWVzdGlvblBsYXllckNvbnN0YW50cztcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29udHJvbGxlciBmb3IgdGhlIHF1ZXN0aW9ucyBwbGF5ZXIgZGlyZWN0aXZlLlxuICovXG5yZXF1aXJlKCdjb21wb25lbnRzL2NrLWVkaXRvci1oZWxwZXJzL2NrLWVkaXRvci00LXJ0ZS5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvY2stZWRpdG9yLWhlbHBlcnMvY2stZWRpdG9yLTQtd2lkZ2V0cy5pbml0aWFsaXplci50cycpO1xucmVxdWlyZSgnZGlyZWN0aXZlcy9hbmd1bGFyLWh0bWwtYmluZC5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2RpcmVjdGl2ZXMvbWF0aGpheC1iaW5kLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnZmlsdGVycy9jb252ZXJ0LXVuaWNvZGUtd2l0aC1wYXJhbXMtdG8taHRtbC5maWx0ZXIudHMnKTtcbnJlcXVpcmUoJ2ZpbHRlcnMvY29udmVydC1odG1sLXRvLXVuaWNvZGUuZmlsdGVyLnRzJyk7XG5yZXF1aXJlKCdmaWx0ZXJzL2NvbnZlcnQtdW5pY29kZS10by1odG1sLmZpbHRlci50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9mb3Jtcy92YWxpZGF0b3JzL2lzLWF0LWxlYXN0LmZpbHRlci50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9mb3Jtcy92YWxpZGF0b3JzL2lzLWF0LW1vc3QuZmlsdGVyLnRzJyk7XG5yZXF1aXJlKCdjb21wb25lbnRzL2Zvcm1zL3ZhbGlkYXRvcnMvaXMtZmxvYXQuZmlsdGVyLnRzJyk7XG5yZXF1aXJlKCdjb21wb25lbnRzL2Zvcm1zL3ZhbGlkYXRvcnMvaXMtaW50ZWdlci5maWx0ZXIudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvdmFsaWRhdG9ycy9pcy1ub25lbXB0eS5maWx0ZXIudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvY3VzdG9tLWZvcm1zLWRpcmVjdGl2ZXMvYXBwbHktdmFsaWRhdGlvbi5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvY3VzdG9tLWZvcm1zLWRpcmVjdGl2ZXMvcmVxdWlyZS1pcy1mbG9hdC5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLWJhc2VkLWVkaXRvcnMvJyArXG4gICAgJ3NjaGVtYS1iYXNlZC1ib29sLWVkaXRvci5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLWJhc2VkLWVkaXRvcnMvJyArXG4gICAgJ3NjaGVtYS1iYXNlZC1jaG9pY2VzLWVkaXRvci5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLWJhc2VkLWVkaXRvcnMvJyArXG4gICAgJ3NjaGVtYS1iYXNlZC1jdXN0b20tZWRpdG9yLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtYmFzZWQtZWRpdG9ycy8nICtcbiAgICAnc2NoZW1hLWJhc2VkLWRpY3QtZWRpdG9yLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtYmFzZWQtZWRpdG9ycy9zY2hlbWEtYmFzZWQtZWRpdG9yLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtYmFzZWQtZWRpdG9ycy8nICtcbiAgICAnc2NoZW1hLWJhc2VkLWV4cHJlc3Npb24tZWRpdG9yLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtYmFzZWQtZWRpdG9ycy8nICtcbiAgICAnc2NoZW1hLWJhc2VkLWZsb2F0LWVkaXRvci5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLWJhc2VkLWVkaXRvcnMvJyArXG4gICAgJ3NjaGVtYS1iYXNlZC1odG1sLWVkaXRvci5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLWJhc2VkLWVkaXRvcnMvc2NoZW1hLWJhc2VkLWludC1lZGl0b3IuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdjb21wb25lbnRzL2Zvcm1zL3NjaGVtYS1iYXNlZC1lZGl0b3JzLycgK1xuICAgICdzY2hlbWEtYmFzZWQtbGlzdC1lZGl0b3IuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdjb21wb25lbnRzL2Zvcm1zL3NjaGVtYS1iYXNlZC1lZGl0b3JzLycgK1xuICAgICdzY2hlbWEtYmFzZWQtdW5pY29kZS1lZGl0b3IuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdjb21wb25lbnRzL3Njb3JlLXJpbmcvc2NvcmUtcmluZy5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLXZpZXdlcnMvc2NoZW1hLWJhc2VkLWN1c3RvbS12aWV3ZXIuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdjb21wb25lbnRzL2Zvcm1zL3NjaGVtYS12aWV3ZXJzL3NjaGVtYS1iYXNlZC1kaWN0LXZpZXdlci5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvZm9ybXMvc2NoZW1hLXZpZXdlcnMvc2NoZW1hLWJhc2VkLWh0bWwtdmlld2VyLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtdmlld2Vycy9zY2hlbWEtYmFzZWQtbGlzdC12aWV3ZXIuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdjb21wb25lbnRzL2Zvcm1zL3NjaGVtYS12aWV3ZXJzL3NjaGVtYS1iYXNlZC1wcmltaXRpdmUtdmlld2VyLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9mb3Jtcy9zY2hlbWEtdmlld2Vycy9zY2hlbWEtYmFzZWQtdW5pY29kZS12aWV3ZXIuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdjb21wb25lbnRzL3F1ZXN0aW9uLWRpcmVjdGl2ZXMvcXVlc3Rpb24tcGxheWVyLycgK1xuICAgICdxdWVzdGlvbi1wbGF5ZXIuY29uc3RhbnRzLmFqcy50cycpO1xucmVxdWlyZSgnZmlsdGVycy9zdHJpbmctdXRpbGl0eS1maWx0ZXJzL25vcm1hbGl6ZS13aGl0ZXNwYWNlLmZpbHRlci50cycpO1xuLy8gXl5eIHRoaXMgYmxvY2sgb2YgcmVxdWlyZXMgc2hvdWxkIGJlIHJlbW92ZWQgXl5eXG5yZXF1aXJlKCdjb21wb25lbnRzL2NvbW1vbi1sYXlvdXQtZGlyZWN0aXZlcy9jb21tb24tZWxlbWVudHMvJyArXG4gICAgJ2F0dHJpYnV0aW9uLWd1aWRlLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9jb21tb24tbGF5b3V0LWRpcmVjdGl2ZXMvY29tbW9uLWVsZW1lbnRzLycgK1xuICAgICdiYWNrZ3JvdW5kLWJhbm5lci5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvY29uY2VwdC1jYXJkL2NvbmNlcHQtY2FyZC5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvc2tpbGwtbWFzdGVyeS9za2lsbC1tYXN0ZXJ5LmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvbGVhcm5lci1leHBlcmllbmNlLycgK1xuICAgICdjb252ZXJzYXRpb24tc2tpbi5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xheW91dC1kaXJlY3RpdmVzLycgK1xuICAgICdleHBsb3JhdGlvbi1mb290ZXIuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sYXlvdXQtZGlyZWN0aXZlcy8nICtcbiAgICAnbGVhcm5lci1sb2NhbC1uYXYuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sYXlvdXQtZGlyZWN0aXZlcy8nICtcbiAgICAnbGVhcm5lci12aWV3LWluZm8uZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vcXVlc3Rpb24vUXVlc3Rpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3NraWxsL1NraWxsTWFzdGVyeUJhY2tlbmRBcGlTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BbGVydHNTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Vc2VyU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvY29udGV4dHVhbC9VcmxTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9pbnRlcmFjdGlvbi1zcGVjcy5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ3F1ZXN0aW9uUGxheWVyJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgICAgIGdldFF1ZXN0aW9uUGxheWVyQ29uZmlnOiAnJnBsYXllckNvbmZpZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvY29tcG9uZW50cy9xdWVzdGlvbi1kaXJlY3RpdmVzL3F1ZXN0aW9uLXBsYXllci8nICtcbiAgICAgICAgICAgICAgICAncXVlc3Rpb24tcGxheWVyLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgJ0hBU0hfUEFSQU0nLCAnTUFYX1NDT1JFX1BFUl9RVUVTVElPTicsXG4gICAgICAgICAgICAgICAgJyRzY29wZScsICckc2NlJywgJyRyb290U2NvcGUnLCAnJGxvY2F0aW9uJyxcbiAgICAgICAgICAgICAgICAnJHNhbml0aXplJywgJyR0aW1lb3V0JywgJyR1aWJNb2RhbCcsICckd2luZG93JyxcbiAgICAgICAgICAgICAgICAnQWxlcnRzU2VydmljZScsICdIdG1sRXNjYXBlclNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdRdWVzdGlvbkJhY2tlbmRBcGlTZXJ2aWNlJywgJ1NraWxsTWFzdGVyeUJhY2tlbmRBcGlTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnVXJsU2VydmljZScsICdVc2VyU2VydmljZScsICdDT0xPUlNfRk9SX1BBU1NfRkFJTF9NT0RFJyxcbiAgICAgICAgICAgICAgICAnTUFYX01BU1RFUllfR0FJTl9QRVJfUVVFU1RJT04nLCAnTUFYX01BU1RFUllfTE9TU19QRVJfUVVFU1RJT04nLFxuICAgICAgICAgICAgICAgICdRVUVTVElPTl9QTEFZRVJfTU9ERScsICdWSUVXX0hJTlRfUEVOQUxUWScsXG4gICAgICAgICAgICAgICAgJ1ZJRVdfSElOVF9QRU5BTFRZX0ZPUl9NQVNURVJZJyxcbiAgICAgICAgICAgICAgICAnV1JPTkdfQU5TV0VSX1BFTkFMVFknLCAnV1JPTkdfQU5TV0VSX1BFTkFMVFlfRk9SX01BU1RFUlknLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChIQVNIX1BBUkFNLCBNQVhfU0NPUkVfUEVSX1FVRVNUSU9OLCAkc2NvcGUsICRzY2UsICRyb290U2NvcGUsICRsb2NhdGlvbiwgJHNhbml0aXplLCAkdGltZW91dCwgJHVpYk1vZGFsLCAkd2luZG93LCBBbGVydHNTZXJ2aWNlLCBIdG1sRXNjYXBlclNlcnZpY2UsIFF1ZXN0aW9uQmFja2VuZEFwaVNlcnZpY2UsIFNraWxsTWFzdGVyeUJhY2tlbmRBcGlTZXJ2aWNlLCBVcmxTZXJ2aWNlLCBVc2VyU2VydmljZSwgQ09MT1JTX0ZPUl9QQVNTX0ZBSUxfTU9ERSwgTUFYX01BU1RFUllfR0FJTl9QRVJfUVVFU1RJT04sIE1BWF9NQVNURVJZX0xPU1NfUEVSX1FVRVNUSU9OLCBRVUVTVElPTl9QTEFZRVJfTU9ERSwgVklFV19ISU5UX1BFTkFMVFksIFZJRVdfSElOVF9QRU5BTFRZX0ZPUl9NQVNURVJZLCBXUk9OR19BTlNXRVJfUEVOQUxUWSwgV1JPTkdfQU5TV0VSX1BFTkFMVFlfRk9SX01BU1RFUlkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnVzZXJJc0xvZ2dlZEluID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgVXNlclNlcnZpY2UuZ2V0VXNlckluZm9Bc3luYygpLnRoZW4oZnVuY3Rpb24gKHVzZXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmNhbkNyZWF0ZUNvbGxlY3Rpb25zID0gdXNlckluZm8uY2FuQ3JlYXRlQ29sbGVjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwudXNlcklzTG9nZ2VkSW4gPSB1c2VySW5mby5pc0xvZ2dlZEluKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdFJlc3VsdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVzdWx0c0xvYWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5jdXJyZW50UXVlc3Rpb24gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC50b3RhbFF1ZXN0aW9ucyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmN1cnJlbnRQcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnRvdGFsU2NvcmUgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNjb3JlUGVyU2tpbGxNYXBwaW5nID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnRlc3RJc1Bhc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGluaXRSZXN1bHRzKCk7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwucXVlc3Rpb25QbGF5ZXJDb25maWcgPSBjdHJsLmdldFF1ZXN0aW9uUGxheWVyQ29uZmlnKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXRTdGF0aWNJbWFnZVVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRTdGF0aWNJbWFnZVVybCh1cmwpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmdldEFjdGlvbkJ1dHRvbk91dGVyQ2xhc3MgPSBmdW5jdGlvbiAoYWN0aW9uQnV0dG9uVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGdldENsYXNzTmFtZUZvclR5cGUoYWN0aW9uQnV0dG9uVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzTmFtZSArICdvdXRlcic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZ2V0QWN0aW9uQnV0dG9uSW5uZXJDbGFzcyA9IGZ1bmN0aW9uIChhY3Rpb25CdXR0b25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gZ2V0Q2xhc3NOYW1lRm9yVHlwZShhY3Rpb25CdXR0b25UeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xhc3NOYW1lICsgJ2lubmVyJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5nZXRBY3Rpb25CdXR0b25JY29uSHRtbCA9IGZ1bmN0aW9uIChhY3Rpb25CdXR0b25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWNvbkh0bWwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb25CdXR0b25UeXBlID09PSAnQk9PU1RfU0NPUkUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbkh0bWwgPSAnPGltZyBjbGFzcz1cImFjdGlvbi1idXR0b24taWNvblwiIHNyYz1cIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRTdGF0aWNJbWFnZVVybCgnL2ljb25zL3JvY2tldEAyeC5wbmcnKSArICdcIi8+JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFjdGlvbkJ1dHRvblR5cGUgPT09ICdSRVRSWV9TRVNTSU9OJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25IdG1sID0gJzxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnMgbWQtMzYgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24tYnV0dG9uLWljb25cIj4mI3hFNUQ1PC9pPic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhY3Rpb25CdXR0b25UeXBlID09PSAnREFTSEJPQVJEJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25IdG1sID0gJzxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnMgbWQtMzYgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24tYnV0dG9uLWljb25cIj4mI3hFODhBPC9pPic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjZS50cnVzdEFzSHRtbCgkc2FuaXRpemUoaWNvbkh0bWwpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5wZXJmb3JtQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbkJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbkJ1dHRvbi50eXBlID09PSAnQk9PU1RfU0NPUkUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vc3RTY29yZU1vZGFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhY3Rpb25CdXR0b24udXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYWN0aW9uQnV0dG9uLnVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5zaG93QWN0aW9uQnV0dG9uc0Zvb3RlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY3RybC5xdWVzdGlvblBsYXllckNvbmZpZy5yZXN1bHRBY3Rpb25CdXR0b25zICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5xdWVzdGlvblBsYXllckNvbmZpZy5yZXN1bHRBY3Rpb25CdXR0b25zLmxlbmd0aCA+IDApO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0V29yc3RTa2lsbElkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pblNjb3JlID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3b3JzdFNraWxsSWQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGN0cmwuc2NvcmVQZXJTa2lsbE1hcHBpbmcpLmZvckVhY2goZnVuY3Rpb24gKHNraWxsSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbGxTY29yZURhdGEgPSBjdHJsLnNjb3JlUGVyU2tpbGxNYXBwaW5nW3NraWxsSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY29yZVBlcmNlbnRhZ2UgPSBza2lsbFNjb3JlRGF0YS5zY29yZSAvIHNraWxsU2NvcmVEYXRhLnRvdGFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29yZVBlcmNlbnRhZ2UgPCBtaW5TY29yZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5TY29yZSA9IHNjb3JlUGVyY2VudGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yc3RTa2lsbElkID0gc2tpbGxJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3b3JzdFNraWxsSWQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcGVuQ29uY2VwdENhcmRNb2RhbCA9IGZ1bmN0aW9uIChza2lsbElkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNraWxscyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2tpbGxJZHMuZm9yRWFjaChmdW5jdGlvbiAoc2tpbGxJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraWxscy5wdXNoKGN0cmwuc2NvcmVQZXJTa2lsbE1hcHBpbmdbc2tpbGxJZF0uZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvY29tcG9uZW50cy9jb25jZXB0LWNhcmQvY29uY2VwdC1jYXJkLW1vZGFsLnRlbXBsYXRlLmh0bWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnJHdpbmRvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVcmxTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsICR3aW5kb3csIFVybFNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5za2lsbElkcyA9IHNraWxsSWRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNraWxscyA9IHNraWxscztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudFNraWxsID0gJHNjb3BlLnNraWxsc1skc2NvcGUuaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzSW5UZXN0TW9kZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNMYXN0Q29uY2VwdENhcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5pbmRleCA9PT0gJHNjb3BlLnNraWxscy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jbG9zZU1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nb1RvTmV4dENvbmNlcHRDYXJkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50U2tpbGwgPSAkc2NvcGUuc2tpbGxzWyRzY29wZS5pbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJldHJ5VGVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoVXJsU2VydmljZS5nZXRQYXRobmFtZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvb3N0U2NvcmVNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3b3JzdFNraWxsSWQgPSBnZXRXb3JzdFNraWxsSWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5Db25jZXB0Q2FyZE1vZGFsKFt3b3JzdFNraWxsSWRdKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdldENsYXNzTmFtZUZvclR5cGUgPSBmdW5jdGlvbiAoYWN0aW9uQnV0dG9uVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbkJ1dHRvblR5cGUgPT09ICdCT09TVF9TQ09SRScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2Jvb3N0LXNjb3JlLSc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uQnV0dG9uVHlwZSA9PT0gJ1JFVFJZX1NFU1NJT04nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICduZXctc2Vzc2lvbi0nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbkJ1dHRvblR5cGUgPT09ICdEQVNIQk9BUkQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdteS1kYXNoYm9hcmQtJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlQ3VycmVudFF1ZXN0aW9uID0gZnVuY3Rpb24gKGN1cnJlbnRRdWVzdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5jdXJyZW50UXVlc3Rpb24gPSBjdXJyZW50UXVlc3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVRdWVzdGlvblByb2dyZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVUb3RhbFF1ZXN0aW9ucyA9IGZ1bmN0aW9uICh0b3RhbFF1ZXN0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC50b3RhbFF1ZXN0aW9ucyA9IHRvdGFsUXVlc3Rpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUXVlc3Rpb25Qcm9ncmVzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlUXVlc3Rpb25Qcm9ncmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRUb3RhbFF1ZXN0aW9ucygpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuY3VycmVudFByb2dyZXNzID0gKGdldEN1cnJlbnRRdWVzdGlvbigpICogMTAwIC8gZ2V0VG90YWxRdWVzdGlvbnMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmN1cnJlbnRQcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXRDdXJyZW50UXVlc3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3RybC5jdXJyZW50UXVlc3Rpb247XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXRUb3RhbFF1ZXN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsLnRvdGFsUXVlc3Rpb25zO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNJblBhc3NPckZhaWxNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjdHJsLnF1ZXN0aW9uUGxheWVyQ29uZmlnLnF1ZXN0aW9uUGxheWVyTW9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucXVlc3Rpb25QbGF5ZXJDb25maWcucXVlc3Rpb25QbGF5ZXJNb2RlLm1vZGVUeXBlID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBRVUVTVElPTl9QTEFZRVJfTU9ERS5QQVNTX0ZBSUxfTU9ERSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVTY29yZVBlclNraWxsTWFwcGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY29yZVBlclNraWxsTWFwcGluZyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwucXVlc3Rpb25QbGF5ZXJDb25maWcuc2tpbGxMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdHJsLnF1ZXN0aW9uUGxheWVyQ29uZmlnLnNraWxsTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbGxJZCA9IGN0cmwucXVlc3Rpb25QbGF5ZXJDb25maWcuc2tpbGxMaXN0W2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBjdHJsLnF1ZXN0aW9uUGxheWVyQ29uZmlnLnNraWxsRGVzY3JpcHRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZVBlclNraWxsTWFwcGluZ1tza2lsbElkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbDogMC4wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zY29yZVBlclNraWxsTWFwcGluZyA9IHNjb3JlUGVyU2tpbGxNYXBwaW5nO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlTWFzdGVyeVBlclNraWxsTWFwcGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXN0ZXJ5UGVyU2tpbGxNYXBwaW5nID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC5xdWVzdGlvblBsYXllckNvbmZpZy5za2lsbExpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN0cmwucXVlc3Rpb25QbGF5ZXJDb25maWcuc2tpbGxMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBza2lsbElkID0gY3RybC5xdWVzdGlvblBsYXllckNvbmZpZy5za2lsbExpc3RbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc3RlcnlQZXJTa2lsbE1hcHBpbmdbc2tpbGxJZF0gPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5tYXN0ZXJ5UGVyU2tpbGxNYXBwaW5nID0gbWFzdGVyeVBlclNraWxsTWFwcGluZztcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZU1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvbiA9IGZ1bmN0aW9uIChxdWVzdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXN0ZXJ5Q2hhbmdlUGVyUXVlc3Rpb24gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVlc3Rpb25EYXRhLmxpbmtlZFNraWxsSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNraWxsSWQgPSBxdWVzdGlvbkRhdGEubGlua2VkU2tpbGxJZHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzdGVyeUNoYW5nZVBlclF1ZXN0aW9uW3NraWxsSWRdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTUFYX01BU1RFUllfR0FJTl9QRVJfUVVFU1RJT047XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFzdGVyeUNoYW5nZVBlclF1ZXN0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY3VsYXRlU2NvcmVzID0gZnVuY3Rpb24gKHF1ZXN0aW9uU3RhdGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVTY29yZVBlclNraWxsTWFwcGluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlc3VsdHNMb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbFF1ZXN0aW9ucyA9IE9iamVjdC5rZXlzKHF1ZXN0aW9uU3RhdGVEYXRhKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBxdWVzdGlvbiBpbiBxdWVzdGlvblN0YXRlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvbkRhdGEgPSBxdWVzdGlvblN0YXRlRGF0YVtxdWVzdGlvbl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsSGludHNQZW5hbHR5ID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3cm9uZ0Fuc3dlclBlbmFsdHkgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uRGF0YS5hbnN3ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyb25nQW5zd2VyUGVuYWx0eSA9ICgocXVlc3Rpb25EYXRhLmFuc3dlcnMubGVuZ3RoIC0gMSkgKiBXUk9OR19BTlNXRVJfUEVOQUxUWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbkRhdGEudXNlZEhpbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsSGludHNQZW5hbHR5ID0gKHF1ZXN0aW9uRGF0YS51c2VkSGludHMubGVuZ3RoICogVklFV19ISU5UX1BFTkFMVFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXVlc3Rpb25TY29yZSA9IE1BWF9TQ09SRV9QRVJfUVVFU1RJT047XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uRGF0YS52aWV3ZWRTb2x1dGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvblNjb3JlID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgcXVlc3Rpb25TY29yZSBnb2VzIG5lZ2F0aXZlLCBzZXQgaXQgdG8gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvblNjb3JlID0gTWF0aC5tYXgoMCwgcXVlc3Rpb25TY29yZSAtIHRvdGFsSGludHNQZW5hbHR5IC0gd3JvbmdBbnN3ZXJQZW5hbHR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRvdGFsIHNjb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC50b3RhbFNjb3JlICs9IHF1ZXN0aW9uU2NvcmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHNjb3JlcyBwZXIgc2tpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShxdWVzdGlvbkRhdGEubGlua2VkU2tpbGxJZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXN0aW9uRGF0YS5saW5rZWRTa2lsbElkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbGxJZCA9IHF1ZXN0aW9uRGF0YS5saW5rZWRTa2lsbElkc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoc2tpbGxJZCBpbiBjdHJsLnNjb3JlUGVyU2tpbGxNYXBwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zY29yZVBlclNraWxsTWFwcGluZ1tza2lsbElkXS5zY29yZSArPSBxdWVzdGlvblNjb3JlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNjb3JlUGVyU2tpbGxNYXBwaW5nW3NraWxsSWRdLnRvdGFsICs9IDEuMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnRvdGFsU2NvcmUgPSBNYXRoLnJvdW5kKGN0cmwudG90YWxTY29yZSAqIDEwMCAvIHRvdGFsUXVlc3Rpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXN1bHRzTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdldE1hc3RlcnlDaGFuZ2VGb3JXcm9uZ0Fuc3dlcnMgPSBmdW5jdGlvbiAoYW5zd2VycywgbWFzdGVyeUNoYW5nZVBlclF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXJzLmZvckVhY2goZnVuY3Rpb24gKGFuc3dlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5zd2VyLmlzQ29ycmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5zd2VyLnRhZ2dlZFNraWxsTWlzY29uY2VwdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbGxJZCA9IGFuc3dlci50YWdnZWRTa2lsbE1pc2NvbmNlcHRpb25JZC5zcGxpdCgnLScpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvbi5oYXNPd25Qcm9wZXJ0eShza2lsbElkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvbltza2lsbElkXSAtPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXUk9OR19BTlNXRVJfUEVOQUxUWV9GT1JfTUFTVEVSWTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1hc3RlcnlTa2lsbElkIGluIG1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvblttYXN0ZXJ5U2tpbGxJZF0gLT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV1JPTkdfQU5TV0VSX1BFTkFMVFlfRk9SX01BU1RFUlk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXN0ZXJ5Q2hhbmdlUGVyUXVlc3Rpb247XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVNYXN0ZXJ5UGVyU2tpbGxNYXBwaW5nID0gZnVuY3Rpb24gKG1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc2tpbGxJZCBpbiBtYXN0ZXJ5Q2hhbmdlUGVyUXVlc3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShza2lsbElkIGluIGN0cmwubWFzdGVyeVBlclNraWxsTWFwcGluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbG93ZXN0IGJvdW5kIG9mIG1hc3RlcnkgY2hhbmdlIGZvciBlYWNoIHF1ZXN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwubWFzdGVyeVBlclNraWxsTWFwcGluZ1tza2lsbElkXSArPSBNYXRoLm1heChtYXN0ZXJ5Q2hhbmdlUGVyUXVlc3Rpb25bc2tpbGxJZF0sIE1BWF9NQVNURVJZX0xPU1NfUEVSX1FVRVNUSU9OKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGN1bGF0ZU1hc3RlcnlEZWdyZWVzID0gZnVuY3Rpb24gKHF1ZXN0aW9uU3RhdGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVNYXN0ZXJ5UGVyU2tpbGxNYXBwaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBxdWVzdGlvbiBpbiBxdWVzdGlvblN0YXRlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvbkRhdGEgPSBxdWVzdGlvblN0YXRlRGF0YVtxdWVzdGlvbl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocXVlc3Rpb25EYXRhLmxpbmtlZFNraWxsSWRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvbiA9IGNyZWF0ZU1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvbihxdWVzdGlvbkRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbkRhdGEudmlld2VkU29sdXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc2tpbGxJZCBpbiBtYXN0ZXJ5Q2hhbmdlUGVyUXVlc3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvbltza2lsbElkXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTUFYX01BU1RFUllfTE9TU19QRVJfUVVFU1RJT047XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbkRhdGEudXNlZEhpbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBza2lsbElkIGluIG1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc3RlcnlDaGFuZ2VQZXJRdWVzdGlvbltza2lsbElkXSAtPSAocXVlc3Rpb25EYXRhLnVzZWRIaW50cy5sZW5ndGggKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWSUVXX0hJTlRfUEVOQUxUWV9GT1JfTUFTVEVSWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uRGF0YS5hbnN3ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXN0ZXJ5Q2hhbmdlUGVyUXVlc3Rpb24gPSBnZXRNYXN0ZXJ5Q2hhbmdlRm9yV3JvbmdBbnN3ZXJzKHF1ZXN0aW9uRGF0YS5hbnN3ZXJzLCBtYXN0ZXJ5Q2hhbmdlUGVyUXVlc3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU1hc3RlcnlQZXJTa2lsbE1hcHBpbmcobWFzdGVyeUNoYW5nZVBlclF1ZXN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFNraWxsTWFzdGVyeUJhY2tlbmRBcGlTZXJ2aWNlLnVwZGF0ZVNraWxsTWFzdGVyeURlZ3JlZXMoY3RybC5tYXN0ZXJ5UGVyU2tpbGxNYXBwaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc1VzZXJQYXNzZWRUZXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RJc1Bhc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmFpbGVkU2tpbGxJZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0luUGFzc09yRmFpbE1vZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGN0cmwuc2NvcmVQZXJTa2lsbE1hcHBpbmcpLmZvckVhY2goZnVuY3Rpb24gKHNraWxsSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvcnJlY3Rpb25SYXRlID0gY3RybC5zY29yZVBlclNraWxsTWFwcGluZ1tza2lsbElkXS5zY29yZSAvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNjb3JlUGVyU2tpbGxNYXBwaW5nW3NraWxsSWRdLnRvdGFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29ycmVjdGlvblJhdGUgPFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5xdWVzdGlvblBsYXllckNvbmZpZy5xdWVzdGlvblBsYXllck1vZGUucGFzc0N1dG9mZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdElzUGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsZWRTa2lsbElkcy5wdXNoKHNraWxsSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlc3RJc1Bhc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucXVlc3Rpb25QbGF5ZXJDb25maWcucmVzdWx0QWN0aW9uQnV0dG9ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuZmFpbGVkU2tpbGxJZHMgPSBmYWlsZWRTa2lsbElkcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0SXNQYXNzZWQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZ2V0U2NvcmVQZXJjZW50YWdlID0gZnVuY3Rpb24gKHNjb3JlUGVyU2tpbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29yZVBlclNraWxsLnNjb3JlIC8gc2NvcmVQZXJTa2lsbC50b3RhbCAqIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5nZXRDb2xvckZvclNjb3JlID0gZnVuY3Rpb24gKHNjb3JlUGVyU2tpbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNJblBhc3NPckZhaWxNb2RlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ09MT1JTX0ZPUl9QQVNTX0ZBSUxfTU9ERS5QQVNTRURfQ09MT1I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29ycmVjdGlvblJhdGUgPSBzY29yZVBlclNraWxsLnNjb3JlIC8gc2NvcmVQZXJTa2lsbC50b3RhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JyZWN0aW9uUmF0ZSA+PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucXVlc3Rpb25QbGF5ZXJDb25maWcucXVlc3Rpb25QbGF5ZXJNb2RlLnBhc3NDdXRvZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ09MT1JTX0ZPUl9QQVNTX0ZBSUxfTU9ERS5QQVNTRURfQ09MT1I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ09MT1JTX0ZPUl9QQVNTX0ZBSUxfTU9ERS5GQUlMRURfQ09MT1I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGN0cmwucmV2aWV3Q29uY2VwdENhcmRBbmRSZXRyeVRlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWN0cmwuZmFpbGVkU2tpbGxJZHMgfHwgY3RybC5mYWlsZWRTa2lsbElkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignTm8gZmFpbGVkIHNraWxscycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkNvbmNlcHRDYXJkTW9kYWwoY3RybC5mYWlsZWRTa2lsbElkcyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGN0cmwub3BlblNraWxsTWFzdGVyeU1vZGFsID0gZnVuY3Rpb24gKHNraWxsSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9jb21wb25lbnRzL3F1ZXN0aW9uLWRpcmVjdGl2ZXMvcXVlc3Rpb24tcGxheWVyLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2tpbGwtbWFzdGVyeS1tb2RhbC50ZW1wbGF0ZS5odG1sJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5za2lsbElkID0gc2tpbGxJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VySXNMb2dnZWRJbiA9IGN0cmwudXNlcklzTG9nZ2VkSW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnVzZXJJc0xvZ2dlZEluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hc3RlcnlDaGFuZ2UgPSBjdHJsLm1hc3RlcnlQZXJTa2lsbE1hcHBpbmdbc2tpbGxJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xvc2VNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BlbkNvbmNlcHRDYXJkTW9kYWwgPSBmdW5jdGlvbiAoc2tpbGxJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5Db25jZXB0Q2FyZE1vZGFsKFtza2lsbElkXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCdjdXJyZW50UXVlc3Rpb25DaGFuZ2VkJywgZnVuY3Rpb24gKGV2ZW50LCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUN1cnJlbnRRdWVzdGlvbihyZXN1bHQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCd0b3RhbFF1ZXN0aW9uc1JlY2VpdmVkJywgZnVuY3Rpb24gKGV2ZW50LCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRvdGFsUXVlc3Rpb25zKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRvbigncXVlc3Rpb25TZXNzaW9uQ29tcGxldGVkJywgZnVuY3Rpb24gKGV2ZW50LCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKEhBU0hfUEFSQU0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShyZXN1bHQpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaENvbnRlbnQgPSAkbG9jYXRpb24uaGFzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNoQ29udGVudCB8fCBoYXNoQ29udGVudC5pbmRleE9mKEhBU0hfUEFSQU0pID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRIYXNoU3RyaW5nID0gZGVjb2RlVVJJQ29tcG9uZW50KGhhc2hDb250ZW50LnN1YnN0cmluZyhoYXNoQ29udGVudC5pbmRleE9mKEhBU0hfUEFSQU0pICsgSEFTSF9QQVJBTS5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRIYXNoU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFJlc3VsdHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXVlc3Rpb25TdGF0ZURhdGEgPSBKU09OLnBhcnNlKHJlc3VsdEhhc2hTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZVNjb3JlcyhxdWVzdGlvblN0YXRlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwudXNlcklzTG9nZ2VkSW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlTWFzdGVyeURlZ3JlZXMocXVlc3Rpb25TdGF0ZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnRlc3RJc1Bhc3NlZCA9IGhhc1VzZXJQYXNzZWRUZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBzZXJ2aWNlIHRoYXQgbWFpbnRhaW5zIGEgcmVjb3JkIG9mIHRoZSB1c2VycyBwcm9ncmVzc2lvblxuICogaW4gdGhlIHRlc3Qgc2Vzc2lvbi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnUXVlc3Rpb25QbGF5ZXJTdGF0ZVNlcnZpY2UnLCBbXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcXVlc3Rpb25QbGF5ZXJTdGF0ZSA9IHt9O1xuICAgICAgICB2YXIgZ2V0Q3VycmVudFRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBjcmVhdGVOZXdRdWVzdGlvblBsYXllclN0YXRlID0gZnVuY3Rpb24gKHF1ZXN0aW9uSWQsIGxpbmtlZFNraWxsSWRzKSB7XG4gICAgICAgICAgICBxdWVzdGlvblBsYXllclN0YXRlW3F1ZXN0aW9uSWRdID0ge1xuICAgICAgICAgICAgICAgIGxpbmtlZFNraWxsSWRzOiBsaW5rZWRTa2lsbElkcyxcbiAgICAgICAgICAgICAgICBhbnN3ZXJzOiBbXSxcbiAgICAgICAgICAgICAgICB1c2VkSGludHM6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2hpbnRVc2VkID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgcXVlc3Rpb25JZCA9IHF1ZXN0aW9uLmdldElkKCk7XG4gICAgICAgICAgICBpZiAoIXF1ZXN0aW9uUGxheWVyU3RhdGVbcXVlc3Rpb25JZF0pIHtcbiAgICAgICAgICAgICAgICBjcmVhdGVOZXdRdWVzdGlvblBsYXllclN0YXRlKHF1ZXN0aW9uSWQsIHF1ZXN0aW9uLmdldExpbmtlZFNraWxsSWRzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVlc3Rpb25QbGF5ZXJTdGF0ZVtxdWVzdGlvbklkXS51c2VkSGludHMucHVzaCh7IHRpbWVzdGFtcDogZ2V0Q3VycmVudFRpbWUoKSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF9zb2x1dGlvblZpZXdlZCA9IGZ1bmN0aW9uIChxdWVzdGlvbikge1xuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uSWQgPSBxdWVzdGlvbi5nZXRJZCgpO1xuICAgICAgICAgICAgaWYgKCFxdWVzdGlvblBsYXllclN0YXRlW3F1ZXN0aW9uSWRdKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlTmV3UXVlc3Rpb25QbGF5ZXJTdGF0ZShxdWVzdGlvbklkLCBxdWVzdGlvbi5nZXRMaW5rZWRTa2lsbElkcygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1ZXN0aW9uUGxheWVyU3RhdGVbcXVlc3Rpb25JZF0udmlld2VkU29sdXRpb24gPSB7XG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBnZXRDdXJyZW50VGltZSgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2Fuc3dlclN1Ym1pdHRlZCA9IGZ1bmN0aW9uIChxdWVzdGlvbiwgaXNDb3JyZWN0LCB0YWdnZWRTa2lsbE1pc2NvbmNlcHRpb25JZCkge1xuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uSWQgPSBxdWVzdGlvbi5nZXRJZCgpO1xuICAgICAgICAgICAgaWYgKCFxdWVzdGlvblBsYXllclN0YXRlW3F1ZXN0aW9uSWRdKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlTmV3UXVlc3Rpb25QbGF5ZXJTdGF0ZShxdWVzdGlvbklkLCBxdWVzdGlvbi5nZXRMaW5rZWRTa2lsbElkcygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERvbid0IHN0b3JlIGEgY29ycmVjdCBhbnN3ZXIgaW4gdGhlIGNhc2Ugd2hlcmVcbiAgICAgICAgICAgIC8vIHRoZSBsZWFybmVyIHZpZXdlZCB0aGUgc29sdXRpb24gZm9yIHRoaXMgcXVlc3Rpb24uXG4gICAgICAgICAgICBpZiAoaXNDb3JyZWN0ICYmIHF1ZXN0aW9uUGxheWVyU3RhdGVbcXVlc3Rpb25JZF0udmlld2VkU29sdXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWVzdGlvblBsYXllclN0YXRlW3F1ZXN0aW9uSWRdLmFuc3dlcnMucHVzaCh7IGlzQ29ycmVjdDogaXNDb3JyZWN0LFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogZ2V0Q3VycmVudFRpbWUoKSxcbiAgICAgICAgICAgICAgICB0YWdnZWRTa2lsbE1pc2NvbmNlcHRpb25JZDogdGFnZ2VkU2tpbGxNaXNjb25jZXB0aW9uSWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGludFVzZWQ6IGZ1bmN0aW9uIChxdWVzdGlvbikge1xuICAgICAgICAgICAgICAgIF9oaW50VXNlZChxdWVzdGlvbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc29sdXRpb25WaWV3ZWQ6IGZ1bmN0aW9uIChxdWVzdGlvbikge1xuICAgICAgICAgICAgICAgIF9zb2x1dGlvblZpZXdlZChxdWVzdGlvbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5zd2VyU3VibWl0dGVkOiBmdW5jdGlvbiAocXVlc3Rpb24sIGlzQ29ycmVjdCwgdGFnZ2VkU2tpbGxNaXNjb25jZXB0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICBfYW5zd2VyU3VibWl0dGVkKHF1ZXN0aW9uLCBpc0NvcnJlY3QsIHRhZ2dlZFNraWxsTWlzY29uY2VwdGlvbklkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRRdWVzdGlvblBsYXllclN0YXRlRGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBxdWVzdGlvblBsYXllclN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIGZvciBjb21wdXRpbmcgdGhlIGF2ZXJhZ2UgcmF0aW5nLlxuICovXG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJhdGluZ0NvbXB1dGF0aW9uU2VydmljZSgpIHtcbiAgICB9XG4gICAgUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlXzEgPSBSYXRpbmdDb21wdXRhdGlvblNlcnZpY2U7XG4gICAgUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlLmFyZVJhdGluZ3NTaG93biA9IGZ1bmN0aW9uIChyYXRpbmdGcmVxdWVuY2llcykge1xuICAgICAgICB2YXIgTUlOSU1VTV9BQ0NFUFRBQkxFX05VTUJFUl9PRl9SQVRJTkdTID0gMTtcbiAgICAgICAgdmFyIHRvdGFsTnVtYmVyID0gMDtcbiAgICAgICAgZm9yICh2YXIgdmFsdWUgaW4gcmF0aW5nRnJlcXVlbmNpZXMpIHtcbiAgICAgICAgICAgIHRvdGFsTnVtYmVyICs9IHJhdGluZ0ZyZXF1ZW5jaWVzW3ZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxOdW1iZXIgPj0gTUlOSU1VTV9BQ0NFUFRBQkxFX05VTUJFUl9PRl9SQVRJTkdTO1xuICAgIH07XG4gICAgUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlLnByb3RvdHlwZS5jb21wdXRlQXZlcmFnZVJhdGluZyA9IGZ1bmN0aW9uIChyYXRpbmdGcmVxdWVuY2llcykge1xuICAgICAgICBpZiAoIVJhdGluZ0NvbXB1dGF0aW9uU2VydmljZV8xLmFyZVJhdGluZ3NTaG93bihyYXRpbmdGcmVxdWVuY2llcykpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgdG90YWxOdW1iZXIgPSAwO1xuICAgICAgICAgICAgdmFyIHRvdGFsVmFsdWUgPSAwLjA7XG4gICAgICAgICAgICBmb3IgKHZhciB2YWx1ZSBpbiByYXRpbmdGcmVxdWVuY2llcykge1xuICAgICAgICAgICAgICAgIHRvdGFsVmFsdWUgKz0gcGFyc2VJbnQodmFsdWUpICogcmF0aW5nRnJlcXVlbmNpZXNbdmFsdWVdO1xuICAgICAgICAgICAgICAgIHRvdGFsTnVtYmVyICs9IHJhdGluZ0ZyZXF1ZW5jaWVzW3ZhbHVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b3RhbE51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdG90YWxWYWx1ZSAvIHRvdGFsTnVtYmVyO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlXzE7XG4gICAgUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlID0gUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlXzEgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlKTtcbiAgICByZXR1cm4gUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlID0gUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlJywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShSYXRpbmdDb21wdXRhdGlvblNlcnZpY2UpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciBkaXNwbGF5aW5nIHN1bW1hcnkgcmF0aW5nIGluZm9ybWF0aW9uLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ3JhdGluZ0Rpc3BsYXknLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgZGlzcGxheSBhIHN0YXItcmF0aW5nIGJhc2VkIG9uIHRoZSBnaXZlbiBkYXRhLiBUaGUgYXR0cmlidXRlc1xuICAgICAgICAgICAgLy8gcGFzc2VkIGluIGFyZSBhcyBmb2xsb3dzOlxuICAgICAgICAgICAgLy8gIC0gaXNFZGl0YWJsZTogdHJ1ZSBvciBmYWxzZTsgd2hldGhlciB0aGUgcmF0aW5nIGlzIHVzZXItZWRpdGFibGUuXG4gICAgICAgICAgICAvLyAgLSBvbkVkaXQ6IHNob3VsZCBiZSBzdXBwbGllZCBpZmYgaXNFZGl0YWJsZSBpcyB0cnVlLCBhbmQgYmUgYSBmdW5jdGlvblxuICAgICAgICAgICAgLy8gICAgdGhhdCB3aWxsIGJlIHN1cHBsaWVkIHdpdGggdGhlIG5ldyByYXRpbmcgd2hlbiB0aGUgcmF0aW5nIGlzXG4gICAgICAgICAgICAvLyAgICBjaGFuZ2VkLlxuICAgICAgICAgICAgLy8gIC0gcmF0aW5nVmFsdWU6IGFuIGludGVnZXIgMS01IGdpdmluZyB0aGUgcmF0aW5nXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBpc0VkaXRhYmxlOiAnPScsXG4gICAgICAgICAgICAgICAgb25FZGl0OiAnPScsXG4gICAgICAgICAgICAgICAgcmF0aW5nVmFsdWU6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL2NvbXBvbmVudHMvcmF0aW5ncy9yYXRpbmctZGlzcGxheS9yYXRpbmctZGlzcGxheS5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBuZWVkZWQgaW4gb3JkZXIgZm9yIHRoZSBzY29wZSB0byBiZSByZXRyaWV2YWJsZSBkdXJpbmcgS2FybWFcbiAgICAgICAgICAgICAgICAvLyB1bml0IHRlc3RpbmcuIFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yOTgzMzgzMiBmb3IgbW9yZVxuICAgICAgICAgICAgICAgIC8vIGRldGFpbHMuXG4gICAgICAgICAgICAgICAgZWxlbWVudFswXS5nZXRDb250cm9sbGVyU2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgZnVuY3Rpb24gKCRzY29wZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgUE9TU0lCTEVfUkFUSU5HUyA9IFsxLCAyLCAzLCA0LCA1XTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXJzID0gUE9TU0lCTEVfUkFUSU5HUy5tYXAoZnVuY3Rpb24gKHN0YXJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ2ZhciBmYS1zdGFyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc3RhclZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIFNUQVRVU19BQ1RJVkUgPSAnYWN0aXZlJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIFNUQVRVU19JTkFDVElWRSA9ICdpbmFjdGl2ZSc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBTVEFUVVNfUkFUSU5HX1NFVCA9ICdyYXRpbmdfc2V0JztcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IFNUQVRVU19JTkFDVElWRTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlWYWx1ZSA9IGZ1bmN0aW9uIChyYXRpbmdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUuc3RhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhcnNbaV0uY3NzQ2xhc3MgPSAocmF0aW5nVmFsdWUgPT09IHVuZGVmaW5lZCA/ICdmYXIgZmEtc3RhcicgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbmdWYWx1ZSA8ICRzY29wZS5zdGFyc1tpXS52YWx1ZSAtIDAuNzUgPyAnZmFyIGZhLXN0YXInIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGluZ1ZhbHVlIDwgJHNjb3BlLnN0YXJzW2ldLnZhbHVlIC0gMC4yNSA/ICdmYXIgZmEtc3Rhci1oYWxmJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZhcyBmYS1zdGFyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zdGF0dXMgPT09IFNUQVRVU19BQ1RJVkUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW5nVmFsdWUgPj0gJHNjb3BlLnN0YXJzW2ldLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGFyc1tpXS5jc3NDbGFzcyArPSAnIG9wcGlhLXJhdGluZy1zdGFyLWFjdGl2ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VmFsdWUoJHNjb3BlLnJhdGluZ1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgncmF0aW5nVmFsdWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VmFsdWUoJHNjb3BlLnJhdGluZ1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jbGlja1N0YXIgPSBmdW5jdGlvbiAoc3RhclZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmlzRWRpdGFibGUgJiYgJHNjb3BlLnN0YXR1cyA9PT0gU1RBVFVTX0FDVElWRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSBTVEFUVVNfUkFUSU5HX1NFVDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmF0aW5nVmFsdWUgPSBzdGFyVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheVZhbHVlKHN0YXJWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9uRWRpdChzdGFyVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZW50ZXJTdGFyID0gZnVuY3Rpb24gKHN0YXJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJzSGF2ZU5vdEJlZW5DbGlja2VkID0gKCRzY29wZS5zdGF0dXMgPT09IFNUQVRVU19BQ1RJVkUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID09PSBTVEFUVVNfSU5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pc0VkaXRhYmxlICYmIHN0YXJzSGF2ZU5vdEJlZW5DbGlja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IFNUQVRVU19BQ1RJVkU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheVZhbHVlKHN0YXJWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sZWF2ZUFyZWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gU1RBVFVTX0lOQUNUSVZFO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheVZhbHVlKCRzY29wZS5yYXRpbmdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRDdXJzb3JTdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnY3Vyc29yOiAnICsgKCRzY29wZS5pc0VkaXRhYmxlID8gJ3BvaW50ZXInIDogJ2F1dG8nKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIHRoZSBhbmltYXRlZCBzY29yZSByaW5nLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ3Njb3JlUmluZycsIFtcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCBmdW5jdGlvbiAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XG4gICAgICAgICAgICAgICAgZ2V0U2NvcmU6ICcmc2NvcmUnLFxuICAgICAgICAgICAgICAgIHRlc3RJc1Bhc3NlZDogJyZ0ZXN0SXNQYXNzZWQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvY29tcG9uZW50cy9zY29yZS1yaW5nL3Njb3JlLXJpbmcuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR0aW1lb3V0JywgJyR3aW5kb3cnLCAnQ09MT1JTX0ZPUl9QQVNTX0ZBSUxfTU9ERScsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHRpbWVvdXQsICR3aW5kb3csIENPTE9SU19GT1JfUEFTU19GQUlMX01PREUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2lyY2xlID0gKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY29yZS1yaW5nLWNpcmNsZScpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IGNpcmNsZS5yLmJhc2VWYWwudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaXJjdW1mZXJlbmNlID0gKHJhZGl1cyAqIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNldFNjb3JlID0gZnVuY3Rpb24gKHBlcmNlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBjaXJjdW1mZXJlbmNlIC0gcGVyY2VudCAvIDEwMCAqIGNpcmN1bWZlcmVuY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGUuc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IG9mZnNldC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjaXJjbGUuc3R5bGUuc3Ryb2tlRGFzaGFycmF5ID0gY2lyY3VtZmVyZW5jZSArIFwiIFwiICsgY2lyY3VtZmVyZW5jZTtcbiAgICAgICAgICAgICAgICAgICAgY2lyY2xlLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBjaXJjdW1mZXJlbmNlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0cmwuZ2V0U2NvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKG5ld1Njb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3U2NvcmUgJiYgbmV3U2NvcmUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2NvcmUobmV3U2NvcmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5nZXRTY29yZVJpbmdDb2xvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdHJsLnRlc3RJc1Bhc3NlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENPTE9SU19GT1JfUEFTU19GQUlMX01PREUuUEFTU0VEX0NPTE9SO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENPTE9SU19GT1JfUEFTU19GQUlMX01PREUuRkFJTEVEX0NPTE9SO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmdldFNjb3JlT3V0ZXJSaW5nQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC50ZXN0SXNQYXNzZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBjb2xvciBncmVlbiB3aGVuIHBhc3NlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ09MT1JTX0ZPUl9QQVNTX0ZBSUxfTU9ERS5QQVNTRURfQ09MT1JfT1VURVI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gY29sb3Igb3JhbmdlIHdoZW4gZmFpbGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDT0xPUlNfRk9SX1BBU1NfRkFJTF9NT0RFLkZBSUxFRF9DT0xPUl9PVVRFUjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgdGhlIHNraWxsIG1hc3Rlcnkgdmlld2VyLlxuICovXG5yZXF1aXJlKCdjb21wb25lbnRzL3NraWxscy1tYXN0ZXJ5LWxpc3Qvc2tpbGxzLW1hc3RlcnktbGlzdC5jb25zdGFudHMuYWpzLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vc2tpbGwvU2tpbGxNYXN0ZXJ5QmFja2VuZEFwaVNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnc2tpbGxNYXN0ZXJ5Vmlld2VyJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcbiAgICAgICAgICAgICAgICBza2lsbElkOiAnPScsXG4gICAgICAgICAgICAgICAgbWFzdGVyeUNoYW5nZTogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvY29tcG9uZW50cy9za2lsbC1tYXN0ZXJ5L3NraWxsLW1hc3RlcnkuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJHNjb3BlJywgJ1NraWxsTWFzdGVyeUJhY2tlbmRBcGlTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnTUFTVEVSWV9DVVRPRkYnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsIFNraWxsTWFzdGVyeUJhY2tlbmRBcGlTZXJ2aWNlLCBNQVNURVJZX0NVVE9GRikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuc2tpbGxNYXN0ZXJ5RGVncmVlID0gMC4wO1xuICAgICAgICAgICAgICAgICAgICBTa2lsbE1hc3RlcnlCYWNrZW5kQXBpU2VydmljZS5mZXRjaFNraWxsTWFzdGVyeURlZ3JlZXMoW2N0cmwuc2tpbGxJZF0pLnRoZW4oZnVuY3Rpb24gKGRlZ3JlZXNPZk1hc3RlcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc2tpbGxNYXN0ZXJ5RGVncmVlID0gZGVncmVlc09mTWFzdGVyeVtjdHJsLnNraWxsSWRdO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5nZXRTa2lsbE1hc3RlcnlQZXJjZW50YWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoY3RybC5za2lsbE1hc3RlcnlEZWdyZWUgKiAxMDApO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmdldE1hc3RlcnlDaGFuZ2VQZXJjZW50YWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwubWFzdGVyeUNoYW5nZSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcrJyArIE1hdGgucm91bmQoY3RybC5tYXN0ZXJ5Q2hhbmdlICogMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGN0cmwubWFzdGVyeUNoYW5nZSAqIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZ2V0TGVhcm5pbmdUaXBzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwubWFzdGVyeUNoYW5nZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC5za2lsbE1hc3RlcnlEZWdyZWUgPj0gTUFTVEVSWV9DVVRPRkYuR09PRF9DVVRPRkYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdZb3UgaGF2ZSBtYXN0ZXJlZCB0aGlzIHNraWxsIHZlcnkgd2VsbCEgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnWW91IGNhbiB3b3JrIG9uIG90aGVyIHNraWxscyBvciBsZWFybiBuZXcgc2tpbGxzLic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1lvdSBoYXZlIG1hZGUgcHJvZ3Jlc3MhIFlvdSBjYW4gaW5jcmVhc2UgeW91ciAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYXN0ZXJ5IGxldmVsIGJ5IGRvaW5nIG1vcmUgcHJhY3RpY2Ugc2Vzc2lvbnMuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0xvb2tzIGxpa2UgeW91ciBtYXN0ZXJ5IG9mIHRoaXMgc2tpbGwgaGFzIGRyb3BwZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVG8gaW1wcm92ZSBpdCwgdHJ5IHJldmlld2luZyB0aGUgY29uY2VwdCBjYXJkIGJlbG93IGFuZCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RoZW4gcHJhY3RpY2luZyBtb3JlIHF1ZXN0aW9ucyBmb3IgdGhlIHNraWxsLic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgZm9yIHRoZSBza2lsbHMgbWFzdGVyeSBsaXN0LlxuICovXG52YXIgc2tpbGxzX21hc3RlcnlfbGlzdF9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJjb21wb25lbnRzL3NraWxscy1tYXN0ZXJ5LWxpc3Qvc2tpbGxzLW1hc3RlcnktbGlzdC5jb25zdGFudHNcIik7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnTUFTVEVSWV9DVVRPRkYnLCBza2lsbHNfbWFzdGVyeV9saXN0X2NvbnN0YW50c18xLlNraWxsTWFzdGVyeUxpc3RDb25zdGFudHMuTUFTVEVSWV9DVVRPRkYpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ01BU1RFUllfQ09MT1JTJywgc2tpbGxzX21hc3RlcnlfbGlzdF9jb25zdGFudHNfMS5Ta2lsbE1hc3RlcnlMaXN0Q29uc3RhbnRzLk1BU1RFUllfQ09MT1JTKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29uc3RhbnRzIGZvciB0aGUgc2tpbGxzIG1hc3RlcnkgbGlzdC5cbiAqL1xudmFyIFNraWxsTWFzdGVyeUxpc3RDb25zdGFudHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2tpbGxNYXN0ZXJ5TGlzdENvbnN0YW50cygpIHtcbiAgICB9XG4gICAgU2tpbGxNYXN0ZXJ5TGlzdENvbnN0YW50cy5NQVNURVJZX0NVVE9GRiA9IHtcbiAgICAgICAgR09PRF9DVVRPRkY6IDAuNyxcbiAgICAgICAgTUVESVVNX0NVVE9GRjogMC40XG4gICAgfTtcbiAgICBTa2lsbE1hc3RlcnlMaXN0Q29uc3RhbnRzLk1BU1RFUllfQ09MT1JTID0ge1xuICAgICAgICAvLyBjb2xvciBncmVlblxuICAgICAgICBHT09EX01BU1RFUllfQ09MT1I6ICdyZ2IoMCwgMTUwLCAxMzYpJyxcbiAgICAgICAgLy8gY29sb3Igb3JhbmdlXG4gICAgICAgIE1FRElVTV9NQVNURVJZX0NPTE9SOiAncmdiKDIxNywgOTIsIDEyKScsXG4gICAgICAgIC8vIGNvbG9yIHJlZFxuICAgICAgICBCQURfTUFTVEVSWV9DT0xPUjogJ3JnYigyMDEsIDgwLCA2NiknXG4gICAgfTtcbiAgICByZXR1cm4gU2tpbGxNYXN0ZXJ5TGlzdENvbnN0YW50cztcbn0oKSk7XG5leHBvcnRzLlNraWxsTWFzdGVyeUxpc3RDb25zdGFudHMgPSBTa2lsbE1hc3RlcnlMaXN0Q29uc3RhbnRzO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBzZXJ2aWNlIHRoYXQgbWFpbnRhaW5zIGEgcmVjb3JkIG9mIHRoZSBvYmplY3RzIGV4Y2x1c2l2ZSB0b1xuICogYSBzdGF0ZS5cbiAqL1xudmFyIGNsb25lRGVlcF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvY2xvbmVEZWVwXCIpKTtcbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBzb2x1dGlvbl92YWxpZGl0eV9zZXJ2aWNlXzEgPSByZXF1aXJlKFwicGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2UvZWRpdG9yLXRhYi9zZXJ2aWNlcy9zb2x1dGlvbi12YWxpZGl0eS5zZXJ2aWNlXCIpO1xuLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG52YXIgU3RhdGVFZGl0b3JTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXRlRWRpdG9yU2VydmljZShzb2x1dGlvblZhbGlkaXR5U2VydmljZSkge1xuICAgICAgICB0aGlzLnNvbHV0aW9uVmFsaWRpdHlTZXJ2aWNlID0gc29sdXRpb25WYWxpZGl0eVNlcnZpY2U7XG4gICAgICAgIHRoaXMuYWN0aXZlU3RhdGVOYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZU5hbWVzID0gW107XG4gICAgICAgIHRoaXMuY29ycmVjdG5lc3NGZWVkYmFja0VuYWJsZWQgPSBudWxsO1xuICAgICAgICB0aGlzLmluUXVlc3Rpb25Nb2RlID0gbnVsbDtcbiAgICAgICAgLy8gQ3VycmVudGx5LCB0aGUgb25seSBwbGFjZSB3aGVyZSB0aGlzIGlzIHVzZWQgaW4gdGhlIHN0YXRlIGVkaXRvclxuICAgICAgICAvLyBpcyBpbiBzb2x1dGlvbiB2ZXJpZmljYXRpb24uIFNvLCBvbmNlIHRoZSBpbnRlcmFjdGlvbiBpcyBzZXQgaW4gdGhpc1xuICAgICAgICAvLyBzZXJ2aWNlLCB0aGUgZ2l2ZW4gc29sdXRpb25zIHdvdWxkIGJlIGF1dG9tYXRpY2FsbHkgdmVyaWZpZWQgZm9yIHRoZSBzZXRcbiAgICAgICAgLy8gaW50ZXJhY3Rpb24uXG4gICAgICAgIC8vIFRPRE8oIzcxNjUpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgICAgICAvLyAnYW55JyBiZWNhdXNlIHRoZSByZXR1cm4gdHlwZSBpcyBhIGludGVyYWN0aW9uIGRvbWFpbiBvYmplY3Qgd2hpY2ggY2FuIGJlXG4gICAgICAgIC8vIHR5cGVkIG9uY2UgSW50ZXJhY3Rpb25PYmplY3RGYWN0b3J5IGlzIHVwZ3JhZGVkLlxuICAgICAgICB0aGlzLmludGVyYWN0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5taXNjb25jZXB0aW9uc0J5U2tpbGwgPSB7fTtcbiAgICAgICAgdGhpcy5leHBsb3JhdGlvbklzV2hpdGVsaXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zb2xpY2l0QW5zd2VyRGV0YWlscyA9IG51bGw7XG4gICAgfVxuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuZ2V0QWN0aXZlU3RhdGVOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVTdGF0ZU5hbWU7XG4gICAgfTtcbiAgICBTdGF0ZUVkaXRvclNlcnZpY2UucHJvdG90eXBlLnNldEFjdGl2ZVN0YXRlTmFtZSA9IGZ1bmN0aW9uIChuZXdBY3RpdmVTdGF0ZU5hbWUpIHtcbiAgICAgICAgaWYgKG5ld0FjdGl2ZVN0YXRlTmFtZSA9PT0gJycgfHwgbmV3QWN0aXZlU3RhdGVOYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIGFjdGl2ZSBzdGF0ZSBuYW1lOiAnICsgbmV3QWN0aXZlU3RhdGVOYW1lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGl2ZVN0YXRlTmFtZSA9IG5ld0FjdGl2ZVN0YXRlTmFtZTtcbiAgICB9O1xuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuaXNFeHBsb3JhdGlvbldoaXRlbGlzdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leHBsb3JhdGlvbklzV2hpdGVsaXN0ZWQ7XG4gICAgfTtcbiAgICBTdGF0ZUVkaXRvclNlcnZpY2UucHJvdG90eXBlLnVwZGF0ZUV4cGxvcmF0aW9uV2hpdGVsaXN0ZWRTdGF0dXMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5leHBsb3JhdGlvbklzV2hpdGVsaXN0ZWQgPSB2YWx1ZTtcbiAgICB9O1xuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuc2V0TWlzY29uY2VwdGlvbnNCeVNraWxsID0gZnVuY3Rpb24gKG5ld01pc2NvbmNlcHRpb25zQnlTa2lsbCkge1xuICAgICAgICB0aGlzLm1pc2NvbmNlcHRpb25zQnlTa2lsbCA9IG5ld01pc2NvbmNlcHRpb25zQnlTa2lsbDtcbiAgICB9O1xuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuZ2V0TWlzY29uY2VwdGlvbnNCeVNraWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taXNjb25jZXB0aW9uc0J5U2tpbGw7XG4gICAgfTtcbiAgICBTdGF0ZUVkaXRvclNlcnZpY2UucHJvdG90eXBlLnNldEludGVyYWN0aW9uID0gZnVuY3Rpb24gKG5ld0ludGVyYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb24gPSBuZXdJbnRlcmFjdGlvbjtcbiAgICB9O1xuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuc2V0SW50ZXJhY3Rpb25JZCA9IGZ1bmN0aW9uIChuZXdJZCkge1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uLnNldElkKG5ld0lkKTtcbiAgICB9O1xuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuc2V0SW50ZXJhY3Rpb25BbnN3ZXJHcm91cHMgPSBmdW5jdGlvbiAobmV3QW5zd2VyR3JvdXBzKSB7XG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb24uc2V0QW5zd2VyR3JvdXBzKG5ld0Fuc3dlckdyb3Vwcyk7XG4gICAgfTtcbiAgICBTdGF0ZUVkaXRvclNlcnZpY2UucHJvdG90eXBlLnNldEludGVyYWN0aW9uRGVmYXVsdE91dGNvbWUgPSBmdW5jdGlvbiAobmV3T3V0Y29tZSkge1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uLnNldERlZmF1bHRPdXRjb21lKG5ld091dGNvbWUpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnbmV3QXJncycgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZCBrZXlzIHdoaWNoXG4gICAgLy8gZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2YgY2FtZWxDYXNpbmcuXG4gICAgU3RhdGVFZGl0b3JTZXJ2aWNlLnByb3RvdHlwZS5zZXRJbnRlcmFjdGlvbkN1c3RvbWl6YXRpb25BcmdzID0gZnVuY3Rpb24gKG5ld0FyZ3MpIHtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbi5zZXRDdXN0b21pemF0aW9uQXJncyhuZXdBcmdzKTtcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNjUpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgJ3NvbHV0aW9uJyBpcyBhIHNvbHV0aW9uIGRvbWFpbiBvYmplY3Qgd2hpY2ggY2FuIGJlIHR5cGVkXG4gICAgLy8gb25jZSBTb2x1dGlvbk9iamVjdEZhY3RvcnkgaXMgdXBncmFkZWQuXG4gICAgU3RhdGVFZGl0b3JTZXJ2aWNlLnByb3RvdHlwZS5zZXRJbnRlcmFjdGlvblNvbHV0aW9uID0gZnVuY3Rpb24gKHNvbHV0aW9uKSB7XG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb24uc2V0U29sdXRpb24oc29sdXRpb24pO1xuICAgIH07XG4gICAgU3RhdGVFZGl0b3JTZXJ2aWNlLnByb3RvdHlwZS5zZXRJbnRlcmFjdGlvbkhpbnRzID0gZnVuY3Rpb24gKGhpbnRzKSB7XG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb24uc2V0SGludHMoaGludHMpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgcmV0dXJuIHR5cGUgaXMgYSBpbnRlcmFjdGlvbiBkb21haW4gb2JqZWN0IHdoaWNoIGNhbiBiZVxuICAgIC8vIHR5cGVkIG9uY2UgSW50ZXJhY3Rpb25PYmplY3RGYWN0b3J5IGlzIHVwZ3JhZGVkLlxuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuZ2V0SW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjbG9uZURlZXBfMS5kZWZhdWx0KHRoaXMuaW50ZXJhY3Rpb24pO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnY3VzdG9taXphdGlvbkFyZ3MnIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWQga2V5c1xuICAgIC8vIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mIGNhbWVsQ2FzaW5nLlxuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuZ2V0QW5zd2VyQ2hvaWNlcyA9IGZ1bmN0aW9uIChpbnRlcmFjdGlvbklkLCBjdXN0b21pemF0aW9uQXJncykge1xuICAgICAgICBpZiAoIWludGVyYWN0aW9uSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNwZWNpYWwgY2FzZXMgZm9yIG11bHRpcGxlIGNob2ljZSBpbnB1dCBhbmQgaW1hZ2UgY2xpY2sgaW5wdXQuXG4gICAgICAgIGlmIChpbnRlcmFjdGlvbklkID09PSAnTXVsdGlwbGVDaG9pY2VJbnB1dCcpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXN0b21pemF0aW9uQXJncy5jaG9pY2VzLnZhbHVlLm1hcChmdW5jdGlvbiAodmFsLCBpbmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB2YWw6IGluZCxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHZhbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnRlcmFjdGlvbklkID09PSAnSW1hZ2VDbGlja0lucHV0Jykge1xuICAgICAgICAgICAgdmFyIF9hbnN3ZXJDaG9pY2VzID0gW107XG4gICAgICAgICAgICB2YXIgaW1hZ2VXaXRoUmVnaW9ucyA9IGN1c3RvbWl6YXRpb25BcmdzLmltYWdlQW5kUmVnaW9ucy52YWx1ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaW1hZ2VXaXRoUmVnaW9ucy5sYWJlbGVkUmVnaW9ucy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIF9hbnN3ZXJDaG9pY2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB2YWw6IGltYWdlV2l0aFJlZ2lvbnMubGFiZWxlZFJlZ2lvbnNbal0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBpbWFnZVdpdGhSZWdpb25zLmxhYmVsZWRSZWdpb25zW2pdLmxhYmVsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX2Fuc3dlckNob2ljZXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW50ZXJhY3Rpb25JZCA9PT0gJ0l0ZW1TZWxlY3Rpb25JbnB1dCcgfHxcbiAgICAgICAgICAgIGludGVyYWN0aW9uSWQgPT09ICdEcmFnQW5kRHJvcFNvcnRJbnB1dCcpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXN0b21pemF0aW9uQXJncy5jaG9pY2VzLnZhbHVlLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsOiB2YWwsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiB2YWxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3RhdGVFZGl0b3JTZXJ2aWNlLnByb3RvdHlwZS5zZXRJblF1ZXN0aW9uTW9kZSA9IGZ1bmN0aW9uIChuZXdNb2RlVmFsdWUpIHtcbiAgICAgICAgdGhpcy5pblF1ZXN0aW9uTW9kZSA9IG5ld01vZGVWYWx1ZTtcbiAgICB9O1xuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuaXNJblF1ZXN0aW9uTW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5RdWVzdGlvbk1vZGU7XG4gICAgfTtcbiAgICBTdGF0ZUVkaXRvclNlcnZpY2UucHJvdG90eXBlLnNldENvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkID0gZnVuY3Rpb24gKG5ld0NvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkKSB7XG4gICAgICAgIHRoaXMuY29ycmVjdG5lc3NGZWVkYmFja0VuYWJsZWQgPSBuZXdDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZDtcbiAgICB9O1xuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuZ2V0Q29ycmVjdG5lc3NGZWVkYmFja0VuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkO1xuICAgIH07XG4gICAgU3RhdGVFZGl0b3JTZXJ2aWNlLnByb3RvdHlwZS5zZXRTb2xpY2l0QW5zd2VyRGV0YWlscyA9IGZ1bmN0aW9uIChuZXdTb2xpY2l0QW5zd2VyRGV0YWlscykge1xuICAgICAgICB0aGlzLnNvbGljaXRBbnN3ZXJEZXRhaWxzID0gbmV3U29saWNpdEFuc3dlckRldGFpbHM7XG4gICAgfTtcbiAgICBTdGF0ZUVkaXRvclNlcnZpY2UucHJvdG90eXBlLmdldFNvbGljaXRBbnN3ZXJEZXRhaWxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb2xpY2l0QW5zd2VyRGV0YWlscztcbiAgICB9O1xuICAgIFN0YXRlRWRpdG9yU2VydmljZS5wcm90b3R5cGUuc2V0U3RhdGVOYW1lcyA9IGZ1bmN0aW9uIChuZXdTdGF0ZU5hbWVzKSB7XG4gICAgICAgIHRoaXMuc3RhdGVOYW1lcyA9IG5ld1N0YXRlTmFtZXM7XG4gICAgfTtcbiAgICBTdGF0ZUVkaXRvclNlcnZpY2UucHJvdG90eXBlLmdldFN0YXRlTmFtZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlTmFtZXM7XG4gICAgfTtcbiAgICBTdGF0ZUVkaXRvclNlcnZpY2UucHJvdG90eXBlLmlzQ3VycmVudFNvbHV0aW9uVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvbHV0aW9uVmFsaWRpdHlTZXJ2aWNlLmlzU29sdXRpb25WYWxpZCh0aGlzLmFjdGl2ZVN0YXRlTmFtZSk7XG4gICAgfTtcbiAgICBTdGF0ZUVkaXRvclNlcnZpY2UucHJvdG90eXBlLmRlbGV0ZUN1cnJlbnRTb2x1dGlvblZhbGlkaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNvbHV0aW9uVmFsaWRpdHlTZXJ2aWNlLmRlbGV0ZVNvbHV0aW9uVmFsaWRpdHkodGhpcy5hY3RpdmVTdGF0ZU5hbWUpO1xuICAgIH07XG4gICAgdmFyIF9hO1xuICAgIFN0YXRlRWRpdG9yU2VydmljZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBzb2x1dGlvbl92YWxpZGl0eV9zZXJ2aWNlXzEuU29sdXRpb25WYWxpZGl0eVNlcnZpY2UgIT09IFwidW5kZWZpbmVkXCIgJiYgc29sdXRpb25fdmFsaWRpdHlfc2VydmljZV8xLlNvbHV0aW9uVmFsaWRpdHlTZXJ2aWNlKSA9PT0gXCJmdW5jdGlvblwiID8gX2EgOiBPYmplY3RdKVxuICAgIF0sIFN0YXRlRWRpdG9yU2VydmljZSk7XG4gICAgcmV0dXJuIFN0YXRlRWRpdG9yU2VydmljZTtcbn0oKSk7XG5leHBvcnRzLlN0YXRlRWRpdG9yU2VydmljZSA9IFN0YXRlRWRpdG9yU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1N0YXRlRWRpdG9yU2VydmljZScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoU3RhdGVFZGl0b3JTZXJ2aWNlKSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEEgZGF0YSBzZXJ2aWNlIHRoYXQgc3RvcmVzIHRoZSBjdXJyZW50IGludGVyYWN0aW9uIGlkLlxuICovXG4vLyBUT0RPKHNsbCk6IEFkZCB2YWxpZGF0aW9uLlxuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnU3RhdGVJbnRlcmFjdGlvbklkU2VydmljZScsIFtcbiAgICAnU3RhdGVQcm9wZXJ0eVNlcnZpY2UnLCBmdW5jdGlvbiAoU3RhdGVQcm9wZXJ0eVNlcnZpY2UpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gT2JqZWN0LmNyZWF0ZShTdGF0ZVByb3BlcnR5U2VydmljZSk7XG4gICAgICAgIGNoaWxkLnNldHRlck1ldGhvZEtleSA9ICdzYXZlSW50ZXJhY3Rpb25JZCc7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU3RhbmRhbG9uZSBzZXJ2aWNlcyBmb3IgdGhlIGdlbmVyYWwgc3RhdGUgZWRpdG9yIHBhZ2UuXG4gKi9cbnJlcXVpcmUoJ3NlcnZpY2VzL0FsZXJ0c1NlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1N0YXRlUHJvcGVydHlTZXJ2aWNlJywgW1xuICAgICdBbGVydHNTZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoQWxlcnRzU2VydmljZSkge1xuICAgICAgICAvLyBQdWJsaWMgYmFzZSBBUEkgZm9yIGRhdGEgc2VydmljZXMgY29ycmVzcG9uZGluZyB0byBzdGF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIChpbnRlcmFjdGlvbiBpZCwgY29udGVudCwgZXRjLilcbiAgICAgICAgLy8gV0FSTklORzogVGhpcyBzaG91bGQgYmUgaW5pdGlhbGl6ZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiB0aGUgc3RhdGVcbiAgICAgICAgLy8gZWRpdG9yLCBhbmQgZXZlcnkgdGltZSB0aGUgc3RhdGUgaXMgbG9hZGVkLCBzbyB0aGF0IHByb3BlciBiZWhhdmlvciBpc1xuICAgICAgICAvLyBtYWludGFpbmVkIGlmIGUuZy4gdGhlIHN0YXRlIGlzIHJlbmFtZWQuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoc3RhdGVOYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRlck1ldGhvZEtleSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnU3RhdGUgcHJvcGVydHkgc2V0dGVyIG1ldGhvZCBrZXkgY2Fubm90IGJlIG51bGwuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGhlIG5hbWUgb2YgdGhlIHN0YXRlLlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVOYW1lID0gc3RhdGVOYW1lO1xuICAgICAgICAgICAgICAgIC8vIFRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSAod2hpY2ggbWF5IG5vdCBoYXZlIGJlZW4gc2F2ZWQgdG9cbiAgICAgICAgICAgICAgICAvLyB0aGUgZnJvbnRlbmQgeWV0KS4gSW4gZ2VuZXJhbCwgdGhpcyB3aWxsIGJlIGJvdW5kIGRpcmVjdGx5IHRvIHRoZSBVSS5cbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXllZCA9IGFuZ3VsYXIuY29weSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHByZXZpb3VzIChzYXZlZC1pbi10aGUtZnJvbnRlbmQpIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS4gSGVyZSxcbiAgICAgICAgICAgICAgICAvLyAnc2F2ZWQnIG1lYW5zIHRoYXQgdGhpcyBpcyB0aGUgbGF0ZXN0IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBhc1xuICAgICAgICAgICAgICAgIC8vIGRldGVybWluZWQgYnkgdGhlIGZyb250ZW5kIGNoYW5nZSBsaXN0LlxuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWRNZW1lbnRvID0gYW5ndWxhci5jb3B5KHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgdmFsdWUgaGFzIGNoYW5nZWQgZnJvbSB0aGUgbWVtZW50by5cbiAgICAgICAgICAgIGhhc0NoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWFuZ3VsYXIuZXF1YWxzKHRoaXMuc2F2ZWRNZW1lbnRvLCB0aGlzLmRpc3BsYXllZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gVGhlIG5hbWUgb2YgdGhlIHNldHRlciBtZXRob2QgaW4gRXhwbG9yYXRpb25TdGF0ZXNTZXJ2aWNlIGZvciB0aGlzXG4gICAgICAgICAgICAvLyBwcm9wZXJ0eS4gVEhJUyBNVVNUIEJFIFNQRUNJRklFRCBCWSBTVUJDTEFTU0VTLlxuICAgICAgICAgICAgc2V0dGVyTWV0aG9kS2V5OiBudWxsLFxuICAgICAgICAgICAgLy8gVHJhbnNmb3JtcyB0aGUgZ2l2ZW4gdmFsdWUgaW50byBhIG5vcm1hbGl6ZWQgZm9ybS4gVEhJUyBDQU4gQkVcbiAgICAgICAgICAgIC8vIE9WRVJSSURERU4gQlkgU1VCQ0xBU1NFUy4gVGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgdG8gZG8gbm90aGluZy5cbiAgICAgICAgICAgIF9ub3JtYWxpemU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZXMgdGhlIGdpdmVuIHZhbHVlIGFuZCByZXR1cm5zIGEgYm9vbGVhbiBzdGF0aW5nIHdoZXRoZXIgaXRcbiAgICAgICAgICAgIC8vIGlzIHZhbGlkIG9yIG5vdC4gVEhJUyBDQU4gQkUgT1ZFUlJJRERFTiBCWSBTVUJDTEFTU0VTLiBUaGUgZGVmYXVsdFxuICAgICAgICAgICAgLy8gYmVoYXZpb3IgaXMgdG8gYWx3YXlzIHJldHVybiB0cnVlLlxuICAgICAgICAgICAgX2lzVmFsaWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIFVwZGF0ZXMgdGhlIG1lbWVudG8gdG8gdGhlIGRpc3BsYXllZCB2YWx1ZS5cbiAgICAgICAgICAgIHNhdmVEaXNwbGF5ZWRWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRlck1ldGhvZEtleSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnU3RhdGUgcHJvcGVydHkgc2V0dGVyIG1ldGhvZCBrZXkgY2Fubm90IGJlIG51bGwuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWQgPSB0aGlzLl9ub3JtYWxpemUodGhpcy5kaXNwbGF5ZWQpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNWYWxpZCh0aGlzLmRpc3BsYXllZCkgfHwgIXRoaXMuaGFzQ2hhbmdlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZUZyb21NZW1lbnRvKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZXF1YWxzKHRoaXMuZGlzcGxheWVkLCB0aGlzLnNhdmVkTWVtZW50bykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmNsZWFyV2FybmluZ3MoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVkTWVtZW50byA9IGFuZ3VsYXIuY29weSh0aGlzLmRpc3BsYXllZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gUmV2ZXJ0cyB0aGUgZGlzcGxheWVkIHZhbHVlIHRvIHRoZSBzYXZlZCBtZW1lbnRvLlxuICAgICAgICAgICAgcmVzdG9yZUZyb21NZW1lbnRvOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWQgPSBhbmd1bGFyLmNvcHkodGhpcy5zYXZlZE1lbWVudG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgZm9yIHN1bW1hcnkgdGlsZSBmb3IgY29sbGVjdGlvbnMuXG4gKi9cbi8vIFRPRE8oIzcwOTIpOiBEZWxldGUgdGhpcyBmaWxlIG9uY2UgbWlncmF0aW9uIGlzIGNvbXBsZXRlIGFuZCB0aGVzZSBBbmd1bGFySlNcbi8vIGVxdWl2YWxlbnRzIG9mIHRoZSBBbmd1bGFyIGNvbnN0YW50cyBhcmUgbm8gbG9uZ2VyIG5lZWRlZC5cbnZhciBjb2xsZWN0aW9uX3N1bW1hcnlfdGlsZV9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJjb21wb25lbnRzL3N1bW1hcnktdGlsZS9jb2xsZWN0aW9uLXN1bW1hcnktdGlsZS5jb25zdGFudHNcIik7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnQ09MTEVDVElPTl9WSUVXRVJfVVJMJywgY29sbGVjdGlvbl9zdW1tYXJ5X3RpbGVfY29uc3RhbnRzXzEuQ29sbGVjdGlvblN1bW1hcnlUaWxlQ29uc3RhbnRzLkNPTExFQ1RJT05fVklFV0VSX1VSTCk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnQ09MTEVDVElPTl9FRElUT1JfVVJMJywgY29sbGVjdGlvbl9zdW1tYXJ5X3RpbGVfY29uc3RhbnRzXzEuQ29sbGVjdGlvblN1bW1hcnlUaWxlQ29uc3RhbnRzLkNPTExFQ1RJT05fRURJVE9SX1VSTCk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENvbnN0YW50cyBmb3Igc3VtbWFyeSB0aWxlIGZvciBjb2xsZWN0aW9ucy5cbiAqL1xudmFyIENvbGxlY3Rpb25TdW1tYXJ5VGlsZUNvbnN0YW50cyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb2xsZWN0aW9uU3VtbWFyeVRpbGVDb25zdGFudHMoKSB7XG4gICAgfVxuICAgIENvbGxlY3Rpb25TdW1tYXJ5VGlsZUNvbnN0YW50cy5DT0xMRUNUSU9OX1ZJRVdFUl9VUkwgPSAnL2NvbGxlY3Rpb24vPGNvbGxlY3Rpb25faWQ+JztcbiAgICBDb2xsZWN0aW9uU3VtbWFyeVRpbGVDb25zdGFudHMuQ09MTEVDVElPTl9FRElUT1JfVVJMID0gJy9jb2xsZWN0aW9uX2VkaXRvci9jcmVhdGUvPGNvbGxlY3Rpb25faWQ+JztcbiAgICByZXR1cm4gQ29sbGVjdGlvblN1bW1hcnlUaWxlQ29uc3RhbnRzO1xufSgpKTtcbmV4cG9ydHMuQ29sbGVjdGlvblN1bW1hcnlUaWxlQ29uc3RhbnRzID0gQ29sbGVjdGlvblN1bW1hcnlUaWxlQ29uc3RhbnRzO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTYgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTdW1tYXJ5IHRpbGUgZm9yIGNvbGxlY3Rpb25zLlxuICovXG5yZXF1aXJlKCdkb21haW4vbGVhcm5lcl9kYXNoYm9hcmQvTGVhcm5lckRhc2hib2FyZEljb25zRGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdmaWx0ZXJzL3N0cmluZy11dGlsaXR5LWZpbHRlcnMvdHJ1bmNhdGUtYW5kLWNhcGl0YWxpemUuZmlsdGVyLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9EYXRlVGltZUZvcm1hdFNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL1VzZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdjb21wb25lbnRzL3N1bW1hcnktdGlsZS9jb2xsZWN0aW9uLXN1bW1hcnktdGlsZS5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ2NvbGxlY3Rpb25TdW1tYXJ5VGlsZScsIFtcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCBmdW5jdGlvbiAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XG4gICAgICAgICAgICAgICAgZ2V0Q29sbGVjdGlvbklkOiAnJmNvbGxlY3Rpb25JZCcsXG4gICAgICAgICAgICAgICAgZ2V0Q29sbGVjdGlvblRpdGxlOiAnJmNvbGxlY3Rpb25UaXRsZScsXG4gICAgICAgICAgICAgICAgZ2V0T2JqZWN0aXZlOiAnJm9iamVjdGl2ZScsXG4gICAgICAgICAgICAgICAgZ2V0Tm9kZUNvdW50OiAnJm5vZGVDb3VudCcsXG4gICAgICAgICAgICAgICAgZ2V0TGFzdFVwZGF0ZWRNc2VjOiAnJmxhc3RVcGRhdGVkTXNlYycsXG4gICAgICAgICAgICAgICAgZ2V0VGh1bWJuYWlsSWNvblVybDogJyZ0aHVtYm5haWxJY29uVXJsJyxcbiAgICAgICAgICAgICAgICBnZXRUaHVtYm5haWxCZ0NvbG9yOiAnJnRodW1ibmFpbEJnQ29sb3InLFxuICAgICAgICAgICAgICAgIGlzTGlua2VkVG9FZGl0b3JQYWdlOiAnPT9pc0xpbmtlZFRvRWRpdG9yUGFnZScsXG4gICAgICAgICAgICAgICAgZ2V0Q2F0ZWdvcnk6ICcmY2F0ZWdvcnknLFxuICAgICAgICAgICAgICAgIGlzUGxheWxpc3RUaWxlOiAnJmlzUGxheWxpc3RUaWxlJyxcbiAgICAgICAgICAgICAgICBzaG93TGVhcm5lckRhc2hib2FyZEljb25zSWZQb3NzaWJsZTogKCcmc2hvd0xlYXJuZXJEYXNoYm9hcmRJY29uc0lmUG9zc2libGUnKSxcbiAgICAgICAgICAgICAgICBpc0NvbnRhaW5lck5hcnJvdzogJyZjb250YWluZXJJc05hcnJvdycsXG4gICAgICAgICAgICAgICAgaXNPd25lZEJ5Q3VycmVudFVzZXI6ICcmYWN0aXZpdHlJc093bmVkQnlDdXJyZW50VXNlcicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvY29tcG9uZW50cy9zdW1tYXJ5LXRpbGUvY29sbGVjdGlvbi1zdW1tYXJ5LXRpbGUuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnRGF0ZVRpbWVGb3JtYXRTZXJ2aWNlJywgJ1VzZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnQUNUSVZJVFlfVFlQRV9DT0xMRUNUSU9OJywgJ0NPTExFQ1RJT05fVklFV0VSX1VSTCcsXG4gICAgICAgICAgICAgICAgJ0NPTExFQ1RJT05fRURJVE9SX1VSTCcsIGZ1bmN0aW9uIChEYXRlVGltZUZvcm1hdFNlcnZpY2UsIFVzZXJTZXJ2aWNlLCBBQ1RJVklUWV9UWVBFX0NPTExFQ1RJT04sIENPTExFQ1RJT05fVklFV0VSX1VSTCwgQ09MTEVDVElPTl9FRElUT1JfVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgY3RybC51c2VySXNMb2dnZWRJbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmdldFVzZXJJbmZvQXN5bmMoKS50aGVuKGZ1bmN0aW9uICh1c2VySW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC51c2VySXNMb2dnZWRJbiA9IHVzZXJJbmZvLmlzTG9nZ2VkSW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuREVGQVVMVF9FTVBUWV9USVRMRSA9ICdVbnRpdGxlZCc7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuQUNUSVZJVFlfVFlQRV9DT0xMRUNUSU9OID0gQUNUSVZJVFlfVFlQRV9DT0xMRUNUSU9OO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmdldExhc3RVcGRhdGVkRGF0ZXRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZVRpbWVGb3JtYXRTZXJ2aWNlLmdldExvY2FsZUFiYnJldmlhdGVkRGF0ZXRpbWVTdHJpbmcoY3RybC5nZXRMYXN0VXBkYXRlZE1zZWMoKSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZ2V0Q29sbGVjdGlvbkxpbmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0VXJsID0gKGN0cmwuaXNMaW5rZWRUb0VkaXRvclBhZ2UgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTExFQ1RJT05fRURJVE9SX1VSTCA6IENPTExFQ1RJT05fVklFV0VSX1VSTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuaW50ZXJwb2xhdGVVcmwodGFyZ2V0VXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbl9pZDogY3RybC5nZXRDb2xsZWN0aW9uSWQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZ2V0Q29tcGxldGVUaHVtYm5haWxJY29uVXJsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldFN0YXRpY0ltYWdlVXJsKGN0cmwuZ2V0VGh1bWJuYWlsSWNvblVybCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5nZXRTdGF0aWNJbWFnZVVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRTdGF0aWNJbWFnZVVybCh1cmwpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnNldEhvdmVyU3RhdGUgPSBmdW5jdGlvbiAoaG92ZXJTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5jb2xsZWN0aW9uSXNDdXJyZW50bHlIb3ZlcmVkT3ZlciA9IGhvdmVyU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTUgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBDb21wb25lbnQgZm9yIGFuIGV4cGxvcmF0aW9uIHN1bW1hcnkgdGlsZS5cbiAqL1xucmVxdWlyZSgnY29tcG9uZW50cy9wcm9maWxlLWxpbmstZGlyZWN0aXZlcy9jaXJjdWxhci1pbWFnZS5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9sZWFybmVyX2Rhc2hib2FyZC9MZWFybmVyRGFzaGJvYXJkSWNvbnNEaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2ZpbHRlcnMvc3VtbWFyaXplLW5vbm5lZ2F0aXZlLW51bWJlci5maWx0ZXIudHMnKTtcbnJlcXVpcmUoJ2ZpbHRlcnMvc3RyaW5nLXV0aWxpdHktZmlsdGVycy90cnVuY2F0ZS1hbmQtY2FwaXRhbGl6ZS5maWx0ZXIudHMnKTtcbnJlcXVpcmUoJ2ZpbHRlcnMvc3RyaW5nLXV0aWxpdHktZmlsdGVycy90cnVuY2F0ZS5maWx0ZXIudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvcmF0aW5ncy9yYXRpbmctY29tcHV0YXRpb24vcmF0aW5nLWNvbXB1dGF0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0RhdGVUaW1lRm9ybWF0U2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvVXNlclNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL2NvbnRleHR1YWwvVXJsU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvY29udGV4dHVhbC9XaW5kb3dEaW1lbnNpb25zU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdleHBsb3JhdGlvblN1bW1hcnlUaWxlJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgZ2V0Q29sbGVjdGlvbklkOiAnJmNvbGxlY3Rpb25JZCcsXG4gICAgICAgICAgICAgICAgZ2V0RXhwbG9yYXRpb25JZDogJyZleHBsb3JhdGlvbklkJyxcbiAgICAgICAgICAgICAgICBnZXRFeHBsb3JhdGlvblRpdGxlOiAnJmV4cGxvcmF0aW9uVGl0bGUnLFxuICAgICAgICAgICAgICAgIGdldFN0b3J5Tm9kZUlkOiAnJm5vZGVJZCcsXG4gICAgICAgICAgICAgICAgZ2V0TGFzdFVwZGF0ZWRNc2VjOiAnJmxhc3RVcGRhdGVkTXNlYycsXG4gICAgICAgICAgICAgICAgZ2V0TnVtVmlld3M6ICcmbnVtVmlld3MnLFxuICAgICAgICAgICAgICAgIGdldE9iamVjdGl2ZTogJyZvYmplY3RpdmUnLFxuICAgICAgICAgICAgICAgIGdldENhdGVnb3J5OiAnJmNhdGVnb3J5JyxcbiAgICAgICAgICAgICAgICBnZXRSYXRpbmdzOiAnJnJhdGluZ3MnLFxuICAgICAgICAgICAgICAgIGdldENvbnRyaWJ1dG9yc1N1bW1hcnk6ICcmY29udHJpYnV0b3JzU3VtbWFyeScsXG4gICAgICAgICAgICAgICAgZ2V0VGh1bWJuYWlsSWNvblVybDogJyZ0aHVtYm5haWxJY29uVXJsJyxcbiAgICAgICAgICAgICAgICBnZXRUaHVtYm5haWxCZ0NvbG9yOiAnJnRodW1ibmFpbEJnQ29sb3InLFxuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgbm90IG51bGwsIHRoZSBuZXcgZXhwbG9yYXRpb24gb3BlbnMgaW4gYSBuZXcgd2luZG93IHdoZW5cbiAgICAgICAgICAgICAgICAvLyB0aGUgc3VtbWFyeSB0aWxlIGlzIGNsaWNrZWQuXG4gICAgICAgICAgICAgICAgb3BlbkluTmV3V2luZG93OiAnQG9wZW5Jbk5ld1dpbmRvdycsXG4gICAgICAgICAgICAgICAgaXNDb21tdW5pdHlPd25lZDogJyZpc0NvbW11bml0eU93bmVkJyxcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCB1bmRlZmluZWQsIGNvbGxlY3Rpb24gcHJldmlldyB0aWxlIGZvciBtb2JpbGVcbiAgICAgICAgICAgICAgICAvLyB3aWxsIGJlIGRpc3BsYXllZC5cbiAgICAgICAgICAgICAgICBpc0NvbGxlY3Rpb25QcmV2aWV3VGlsZTogJ0Bpc0NvbGxlY3Rpb25QcmV2aWV3VGlsZScsXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNjcmVlbiB3aWR0aCBpcyBiZWxvdyB0aGUgdGhyZXNob2xkIGRlZmluZWQgaGVyZSwgdGhlIG1vYmlsZVxuICAgICAgICAgICAgICAgIC8vIHZlcnNpb24gb2YgdGhlIHN1bW1hcnkgdGlsZSBpcyBkaXNwbGF5ZWQuIFRoaXMgYXR0cmlidXRlIGlzIG9wdGlvbmFsOlxuICAgICAgICAgICAgICAgIC8vIGlmIGl0IGlzIG5vdCBzcGVjaWZpZWQsIGl0IGlzIHRyZWF0ZWQgYXMgMCwgd2hpY2ggbWVhbnMgdGhhdCB0aGVcbiAgICAgICAgICAgICAgICAvLyBkZXNrdG9wIHZlcnNpb24gb2YgdGhlIHN1bW1hcnkgdGlsZSBpcyBhbHdheXMgZGlzcGxheWVkLlxuICAgICAgICAgICAgICAgIG1vYmlsZUN1dG9mZlB4OiAnQG1vYmlsZUN1dG9mZlB4JyxcbiAgICAgICAgICAgICAgICBpc1BsYXlsaXN0VGlsZTogJyZpc1BsYXlsaXN0VGlsZScsXG4gICAgICAgICAgICAgICAgZ2V0UGFyZW50RXhwbG9yYXRpb25JZHM6ICcmcGFyZW50RXhwbG9yYXRpb25JZHMnLFxuICAgICAgICAgICAgICAgIHNob3dMZWFybmVyRGFzaGJvYXJkSWNvbnNJZlBvc3NpYmxlOiAoJyZzaG93TGVhcm5lckRhc2hib2FyZEljb25zSWZQb3NzaWJsZScpLFxuICAgICAgICAgICAgICAgIGlzQ29udGFpbmVyTmFycm93OiAnJmNvbnRhaW5lcklzTmFycm93JyxcbiAgICAgICAgICAgICAgICBpc093bmVkQnlDdXJyZW50VXNlcjogJyZhY3Rpdml0eUlzT3duZWRCeUN1cnJlbnRVc2VyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9jb21wb25lbnRzL3N1bW1hcnktdGlsZS9leHBsb3JhdGlvbi1zdW1tYXJ5LXRpbGUuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZmluZCgnLmV4cGxvcmF0aW9uLXN1bW1hcnktYXZhdGFycycpLm9uKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZpbmQoJy5tYXNrJykuYXR0cignY2xhc3MnLCAnZXhwbG9yYXRpb24tc3VtbWFyeS10aWxlLW1hc2sgbWFzaycpO1xuICAgICAgICAgICAgICAgICAgICAvLyBBcyBhbmltYXRpb24gZHVyYXRpb24gdGltZSBtYXkgYmUgNDAwbXMsIC5zdG9wKHRydWUpIGlzIHVzZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gcHJldmVudCB0aGUgZWZmZWN0cyBxdWV1ZSBmYWxsaW5nIGJlaGluZCB0aGUgbW91c2UgbW92ZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIC8vIC5oaWRlKDEpIGFuZCAuc2hvdygxKSB1c2VkIHRvIHBsYWNlIHRoZSBhbmltYXRpb24gaW4gdGhlIGVmZmVjdHNcbiAgICAgICAgICAgICAgICAgICAgLy8gcXVldWUuXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZmluZCgnLmF2YXRhcnMtbnVtLW1pbnVzLW9uZScpLnN0b3AodHJ1ZSkuaGlkZSgxLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZpbmQoJy5hbGwtYXZhdGFycycpLnN0b3AodHJ1ZSkuc2xpZGVEb3duKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZmluZCgnLmV4cGxvcmF0aW9uLXN1bW1hcnktYXZhdGFycycpLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZpbmQoJy5tYXNrJykuYXR0cignY2xhc3MnLCAndG9wLXNlY3Rpb24tbWFzayBtYXNrJyk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZmluZCgnLmFsbC1hdmF0YXJzJykuc3RvcCh0cnVlKS5zbGlkZVVwKDQwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5maW5kKCcuYXZhdGFycy1udW0tbWludXMtb25lJykuc3RvcCh0cnVlKS5zaG93KDEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgJyRzY29wZScsICckaHR0cCcsICckd2luZG93JywgJ0RhdGVUaW1lRm9ybWF0U2VydmljZScsXG4gICAgICAgICAgICAgICAgJ1JhdGluZ0NvbXB1dGF0aW9uU2VydmljZScsICdVcmxTZXJ2aWNlJywgJ1VzZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnV2luZG93RGltZW5zaW9uc1NlcnZpY2UnLCAnQUNUSVZJVFlfVFlQRV9FWFBMT1JBVElPTicsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICR3aW5kb3csIERhdGVUaW1lRm9ybWF0U2VydmljZSwgUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlLCBVcmxTZXJ2aWNlLCBVc2VyU2VydmljZSwgV2luZG93RGltZW5zaW9uc1NlcnZpY2UsIEFDVElWSVRZX1RZUEVfRVhQTE9SQVRJT04pIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJJc0xvZ2dlZEluID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgVXNlclNlcnZpY2UuZ2V0VXNlckluZm9Bc3luYygpLnRoZW4oZnVuY3Rpb24gKHVzZXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlcklzTG9nZ2VkSW4gPSB1c2VySW5mby5pc0xvZ2dlZEluKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQUNUSVZJVFlfVFlQRV9FWFBMT1JBVElPTiA9IEFDVElWSVRZX1RZUEVfRVhQTE9SQVRJT047XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250cmlidXRvcnNTdW1tYXJ5ID0gJHNjb3BlLmdldENvbnRyaWJ1dG9yc1N1bW1hcnkoKSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRyaWJ1dG9ycyA9IE9iamVjdC5rZXlzKGNvbnRyaWJ1dG9yc1N1bW1hcnkpLnNvcnQoZnVuY3Rpb24gKGNvbnRyaWJ1dG9yVXNlcm5hbWUxLCBjb250cmlidXRvclVzZXJuYW1lMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1pdHNPZkNvbnRyaWJ1dG9yMSA9IGNvbnRyaWJ1dG9yc1N1bW1hcnlbY29udHJpYnV0b3JVc2VybmFtZTFdLm51bV9jb21taXRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1pdHNPZkNvbnRyaWJ1dG9yMiA9IGNvbnRyaWJ1dG9yc1N1bW1hcnlbY29udHJpYnV0b3JVc2VybmFtZTJdLm51bV9jb21taXRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1pdHNPZkNvbnRyaWJ1dG9yMiAtIGNvbW1pdHNPZkNvbnRyaWJ1dG9yMTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1JlZnJlc2hlckV4cGxvcmF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZ2V0UGFyZW50RXhwbG9yYXRpb25JZHMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUmVmcmVzaGVyRXhwbG9yYXRpb24gPSAoJHNjb3BlLmdldFBhcmVudEV4cGxvcmF0aW9uSWRzKCkubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmF2YXRhcnNMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5NQVhfQVZBVEFSU19UT19ESVNQTEFZID0gNTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNldEhvdmVyU3RhdGUgPSBmdW5jdGlvbiAoaG92ZXJTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4cGxvcmF0aW9uSXNDdXJyZW50bHlIb3ZlcmVkT3ZlciA9IGhvdmVyU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2FkUGFyZW50RXhwbG9yYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSAkc2NvcGUuZ2V0RXhwbG9yYXRpb25MaW5rKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRBdmVyYWdlUmF0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuZ2V0UmF0aW5ncygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlLmNvbXB1dGVBdmVyYWdlUmF0aW5nKCRzY29wZS5nZXRSYXRpbmdzKCkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0TGFzdFVwZGF0ZWREYXRldGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmdldExhc3RVcGRhdGVkTXNlYygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZVRpbWVGb3JtYXRTZXJ2aWNlLmdldExvY2FsZUFiYnJldmlhdGVkRGF0ZXRpbWVTdHJpbmcoJHNjb3BlLmdldExhc3RVcGRhdGVkTXNlYygpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldEV4cGxvcmF0aW9uTGluayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmdldEV4cGxvcmF0aW9uSWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnIyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gJy9leHBsb3JlLycgKyAkc2NvcGUuZ2V0RXhwbG9yYXRpb25JZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmxQYXJhbXMgPSBVcmxTZXJ2aWNlLmdldFVybFBhcmFtcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRFeHBsb3JhdGlvbklkcyA9ICRzY29wZS5nZXRQYXJlbnRFeHBsb3JhdGlvbklkcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uSWRUb0FkZCA9ICRzY29wZS5nZXRDb2xsZWN0aW9uSWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcnlJZFRvQWRkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcnlOb2RlSWRUb0FkZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGUgY29sbGVjdGlvbiBJRCB3aXRoIHRoZSBvbmUgaW4gdGhlIFVSTCBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiB1cmxQYXJhbXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudEV4cGxvcmF0aW9uSWRzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybFBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnY29sbGVjdGlvbl9pZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZFRvQWRkID0gdXJsUGFyYW1zLmNvbGxlY3Rpb25faWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKFVybFNlcnZpY2UuZ2V0UGF0aG5hbWUoKS5tYXRjaCgvXFwvc3RvcnlcXC8oXFx3fC0pezEyfS9nKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0U3RvcnlOb2RlSWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yeUlkVG9BZGQgPSBVcmxTZXJ2aWNlLmdldFN0b3J5SWRGcm9tVmlld2VyVXJsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3J5Tm9kZUlkVG9BZGQgPSAkc2NvcGUuZ2V0U3RvcnlOb2RlSWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb25JZFRvQWRkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFVybFNlcnZpY2UuYWRkRmllbGQocmVzdWx0LCAnY29sbGVjdGlvbl9pZCcsIGNvbGxlY3Rpb25JZFRvQWRkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudEV4cGxvcmF0aW9uSWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50RXhwbG9yYXRpb25JZHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBVcmxTZXJ2aWNlLmFkZEZpZWxkKHJlc3VsdCwgJ3BhcmVudCcsIHBhcmVudEV4cGxvcmF0aW9uSWRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcnlJZFRvQWRkICYmIHN0b3J5Tm9kZUlkVG9BZGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gVXJsU2VydmljZS5hZGRGaWVsZChyZXN1bHQsICdzdG9yeV9pZCcsIHN0b3J5SWRUb0FkZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFVybFNlcnZpY2UuYWRkRmllbGQocmVzdWx0LCAnbm9kZV9pZCcsIHN0b3J5Tm9kZUlkVG9BZGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5tb2JpbGVDdXRvZmZQeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vYmlsZUN1dG9mZlB4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNXaW5kb3dMYXJnZSA9IChXaW5kb3dEaW1lbnNpb25zU2VydmljZS5nZXRXaWR0aCgpID49ICRzY29wZS5tb2JpbGVDdXRvZmZQeCk7XG4gICAgICAgICAgICAgICAgICAgIFdpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlLnJlZ2lzdGVyT25SZXNpemVIb29rKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1dpbmRvd0xhcmdlID0gKFdpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlLmdldFdpZHRoKCkgPj0gJHNjb3BlLm1vYmlsZUN1dG9mZlB4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRDb21wbGV0ZVRodW1ibmFpbEljb25VcmwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0U3RhdGljSW1hZ2VVcmwoJHNjb3BlLmdldFRodW1ibmFpbEljb25VcmwoKSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTcgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgZnJvbnRlbmQgaW5zdGFuY2VzIG9mIGFuc3dlclxuICogICAgIENsYXNzaWZpY2F0aW9uIFJlc3VsdCBkb21haW4gb2JqZWN0cy5cbiAqL1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIEFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0KG91dGNvbWUsIGFuc3dlckdyb3VwSW5kZXgsIHJ1bGVJbmRleCwgY2xhc3NpZmljYXRpb25DYXRlZ29yaXphdGlvbikge1xuICAgICAgICB0aGlzLm91dGNvbWUgPSBvdXRjb21lO1xuICAgICAgICB0aGlzLmFuc3dlckdyb3VwSW5kZXggPSBhbnN3ZXJHcm91cEluZGV4O1xuICAgICAgICB0aGlzLnJ1bGVJbmRleCA9IHJ1bGVJbmRleDtcbiAgICAgICAgdGhpcy5jbGFzc2lmaWNhdGlvbkNhdGVnb3JpemF0aW9uID0gY2xhc3NpZmljYXRpb25DYXRlZ29yaXphdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIEFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0O1xufSgpKTtcbmV4cG9ydHMuQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHQgPSBBbnN3ZXJDbGFzc2lmaWNhdGlvblJlc3VsdDtcbnZhciBBbnN3ZXJDbGFzc2lmaWNhdGlvblJlc3VsdE9iamVjdEZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHRPYmplY3RGYWN0b3J5KCkge1xuICAgIH1cbiAgICAvLyBUT0RPKCM3MTY1KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlICdvdXRjb21lJyBpcyBhbiBvdXRjb21lIGRvbWFpbiBvYmplY3QgYW5kIHRoaXMgY2FuIGJlXG4gICAgLy8gZGlyZWN0bHkgdHlwZWQgdG8gJ091dGNvbWUnIHR5cGUgb25jZSAnT3V0Y29tZU9iamVjdEZhY3RvcnknIGlzIHVwZ3JhZGVkLlxuICAgIEFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlTmV3ID0gZnVuY3Rpb24gKG91dGNvbWUsIGFuc3dlckdyb3VwSW5kZXgsIHJ1bGVJbmRleCwgY2xhc3NpZmljYXRpb25DYXRlZ29yaXphdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IEFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0KG91dGNvbWUsIGFuc3dlckdyb3VwSW5kZXgsIHJ1bGVJbmRleCwgY2xhc3NpZmljYXRpb25DYXRlZ29yaXphdGlvbik7XG4gICAgfTtcbiAgICBBbnN3ZXJDbGFzc2lmaWNhdGlvblJlc3VsdE9iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHRPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHRPYmplY3RGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHRPYmplY3RGYWN0b3J5ID0gQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHRPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHRPYmplY3RGYWN0b3J5Jywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShBbnN3ZXJDbGFzc2lmaWNhdGlvblJlc3VsdE9iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGZyb250ZW5kIGluc3RhbmNlcyBvZiBDbGFzc2lmaWVyXG4gKiAgICAgZG9tYWluIG9iamVjdHMuXG4gKi9cbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBDbGFzc2lmaWVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENsYXNzaWZpZXIoYWxnb3JpdGhtSWQsIGNsYXNzaWZpZXJEYXRhLCBkYXRhU2NoZW1hVmVyc2lvbikge1xuICAgICAgICB0aGlzLmFsZ29yaXRobUlkID0gYWxnb3JpdGhtSWQ7XG4gICAgICAgIHRoaXMuY2xhc3NpZmllckRhdGEgPSBjbGFzc2lmaWVyRGF0YTtcbiAgICAgICAgdGhpcy5kYXRhU2NoZW1hVmVyc2lvbiA9IGRhdGFTY2hlbWFWZXJzaW9uO1xuICAgIH1cbiAgICByZXR1cm4gQ2xhc3NpZmllcjtcbn0oKSk7XG5leHBvcnRzLkNsYXNzaWZpZXIgPSBDbGFzc2lmaWVyO1xudmFyIENsYXNzaWZpZXJPYmplY3RGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENsYXNzaWZpZXJPYmplY3RGYWN0b3J5KCkge1xuICAgIH1cbiAgICAvLyBUT0RPKCM3MTc2KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlICdjbGFzc2lmaWVyRGF0YScgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZCBrZXlzIHdoaWNoXG4gICAgLy8gZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2YgY2FtZWxDYXNpbmcuXG4gICAgQ2xhc3NpZmllck9iamVjdEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChhbGdvcml0aG1JZCwgY2xhc3NpZmllckRhdGEsIGRhdGFTY2hlbWFWZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2xhc3NpZmllcihhbGdvcml0aG1JZCwgY2xhc3NpZmllckRhdGEsIGRhdGFTY2hlbWFWZXJzaW9uKTtcbiAgICB9O1xuICAgIENsYXNzaWZpZXJPYmplY3RGYWN0b3J5ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KVxuICAgIF0sIENsYXNzaWZpZXJPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gQ2xhc3NpZmllck9iamVjdEZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0cy5DbGFzc2lmaWVyT2JqZWN0RmFjdG9yeSA9IENsYXNzaWZpZXJPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnQ2xhc3NpZmllck9iamVjdEZhY3RvcnknLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKENsYXNzaWZpZXJPYmplY3RGYWN0b3J5KSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2YgUHJlZGljdGlvblxuICogICAgIHJlc3VsdCBkb21haW4gb2JqZWN0cy5cbiAqL1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIFByZWRpY3Rpb25SZXN1bHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJlZGljdGlvblJlc3VsdChsYWJlbCwgY29uZmlkZW5jZSkge1xuICAgICAgICB0aGlzLnByZWRpY3Rpb25MYWJlbCA9IGxhYmVsO1xuICAgICAgICB0aGlzLnByZWRpY3Rpb25Db25maWRlbmNlID0gY29uZmlkZW5jZTtcbiAgICB9XG4gICAgUHJlZGljdGlvblJlc3VsdC5wcm90b3R5cGUuZ2V0TGFiZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWRpY3Rpb25MYWJlbDtcbiAgICB9O1xuICAgIFByZWRpY3Rpb25SZXN1bHQucHJvdG90eXBlLmdldENvbmZpZGVuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWRpY3Rpb25Db25maWRlbmNlO1xuICAgIH07XG4gICAgcmV0dXJuIFByZWRpY3Rpb25SZXN1bHQ7XG59KCkpO1xuZXhwb3J0cy5QcmVkaWN0aW9uUmVzdWx0ID0gUHJlZGljdGlvblJlc3VsdDtcbnZhciBQcmVkaWN0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQcmVkaWN0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeSgpIHtcbiAgICB9XG4gICAgUHJlZGljdGlvblJlc3VsdE9iamVjdEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZU5ldyA9IGZ1bmN0aW9uIChsYWJlbCwgY29uZmlkZW5jZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByZWRpY3Rpb25SZXN1bHQobGFiZWwsIGNvbmZpZGVuY2UpO1xuICAgIH07XG4gICAgUHJlZGljdGlvblJlc3VsdE9iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgUHJlZGljdGlvblJlc3VsdE9iamVjdEZhY3RvcnkpO1xuICAgIHJldHVybiBQcmVkaWN0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLlByZWRpY3Rpb25SZXN1bHRPYmplY3RGYWN0b3J5ID0gUHJlZGljdGlvblJlc3VsdE9iamVjdEZhY3Rvcnk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdQcmVkaWN0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoUHJlZGljdGlvblJlc3VsdE9iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRmFjdG9yeSBmb3IgY3JlYXRpbmcgYW5kIG11dGF0aW5nIGEgZG9tYWluIG9iamVjdCB3aGljaFxuICogcmVwcmVzZW50cyB0aGUgcHJvZ3Jlc3Mgb2YgYSBndWVzdCBwbGF5aW5nIHRocm91Z2ggYSBjb2xsZWN0aW9uLlxuICovXG52YXIgY2xvbmVEZWVwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC9jbG9uZURlZXBcIikpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzKGNvbXBsZXRlZEV4cGxvcmF0aW9uc01hcCkge1xuICAgICAgICB0aGlzLl9jb21wbGV0ZWRFeHBsb3JhdGlvbnNNYXAgPSBjb21wbGV0ZWRFeHBsb3JhdGlvbnNNYXA7XG4gICAgfVxuICAgIC8vIFJldHVybnMgd2hldGhlciB0aGUgZ3Vlc3QgaGFzIG1hZGUgYW55IHByb2dyZXNzIHRvd2FyZHMgY29tcGxldGluZyB0aGVcbiAgICAvLyBzcGVjaWZpZWQgY29sbGVjdGlvbiBJRC4gTm90ZSB0aGF0IHRoaXMgZG9lcyBub3QgYWNjb3VudCBmb3Igd2hldGhlciB0aGVcbiAgICAvLyBjb21wbGV0ZWQgZXhwbG9yYXRpb25zIGFyZSBzdGlsbCBjb250YWluZWQgd2l0aGluIHRoYXQgY29sbGVjdGlvbi5cbiAgICBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzcy5wcm90b3R5cGUuaGFzQ29tcGxldGlvblByb2dyZXNzID0gZnVuY3Rpb24gKGNvbGxlY3Rpb25JZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29tcGxldGVkRXhwbG9yYXRpb25zTWFwLmhhc093blByb3BlcnR5KGNvbGxlY3Rpb25JZCk7XG4gICAgfTtcbiAgICAvLyBSZXR1cm5zIGFuIGFycmF5IG9mIGV4cGxvcmF0aW9uIElEcyB3aGljaCBoYXZlIGJlZW4gY29tcGxldGVkIGJ5IHRoZVxuICAgIC8vIHNwZWNpZmllZCBjb2xsZWN0aW9uIElELCBvciBlbXB0eSBpZiBub25lIGhhdmUuXG4gICAgR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3MucHJvdG90eXBlLmdldENvbXBsZXRlZEV4cGxvcmF0aW9uSWRzID0gZnVuY3Rpb24gKGNvbGxlY3Rpb25JZCkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzQ29tcGxldGlvblByb2dyZXNzKGNvbGxlY3Rpb25JZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmVEZWVwXzEuZGVmYXVsdCh0aGlzLl9jb21wbGV0ZWRFeHBsb3JhdGlvbnNNYXBbY29sbGVjdGlvbklkXSk7XG4gICAgfTtcbiAgICAvLyBTcGVjaWZpZXMgdGhhdCBhIHNwZWNpZmljIGV4cGxvcmF0aW9uIElEIGhhcyBiZWVuIGNvbXBsZXRlZCBpbiB0aGVcbiAgICAvLyBjb250ZXh0IG9mIHRoZSBzcGVjaWZpZWQgY29sbGVjdGlvbi4gUmV0dXJucyB3aGV0aGVyIHRoYXQgZXhwbG9yYXRpb24gSURcbiAgICAvLyB3YXMgbm90IHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBhcyBjb21wbGV0ZWQgZm9yIHRoZSBjb2xsZWN0aW9uLlxuICAgIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzLnByb3RvdHlwZS5hZGRDb21wbGV0ZWRFeHBsb3JhdGlvbklkID0gZnVuY3Rpb24gKGNvbGxlY3Rpb25JZCwgZXhwbG9yYXRpb25JZCkge1xuICAgICAgICB2YXIgY29tcGxldGVkRXhwbG9yYXRpb25JZHMgPSB0aGlzLmdldENvbXBsZXRlZEV4cGxvcmF0aW9uSWRzKGNvbGxlY3Rpb25JZCk7XG4gICAgICAgIGlmIChjb21wbGV0ZWRFeHBsb3JhdGlvbklkcy5pbmRleE9mKGV4cGxvcmF0aW9uSWQpID09PSAtMSkge1xuICAgICAgICAgICAgY29tcGxldGVkRXhwbG9yYXRpb25JZHMucHVzaChleHBsb3JhdGlvbklkKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlZEV4cGxvcmF0aW9uc01hcFtjb2xsZWN0aW9uSWRdID0gY29tcGxldGVkRXhwbG9yYXRpb25JZHM7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvLyBDb252ZXJ0cyB0aGlzIG9iamVjdCB0byBKU09OIGZvciBzdG9yYWdlLlxuICAgIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzLnByb3RvdHlwZS50b0pzb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLl9jb21wbGV0ZWRFeHBsb3JhdGlvbnNNYXApO1xuICAgIH07XG4gICAgcmV0dXJuIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzO1xufSgpKTtcbmV4cG9ydHMuR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3MgPSBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzcztcbnZhciBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc09iamVjdEZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NPYmplY3RGYWN0b3J5KCkge1xuICAgIH1cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgSlNPTiBzdHJpbmcgd2hpY2ggcmVwcmVzZW50cyBhIHJhdyBjb2xsZWN0aW9uXG4gICAgLy8gb2JqZWN0IGFuZCByZXR1cm5zIGEgbmV3IEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzIGRvbWFpbiBvYmplY3QuIEEgbnVsbCBvclxuICAgIC8vIHVuZGVmaW5lZCBzdHJpbmcgaW5kaWNhdGVzIHRoYXQgYW4gZW1wdHkgcHJvZ3Jlc3Mgb2JqZWN0IHNob3VsZCBiZVxuICAgIC8vIGNyZWF0ZWQuXG4gICAgR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tSnNvbiA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uUHJvZ3Jlc3NKc29uKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uUHJvZ3Jlc3NKc29uKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzKEpTT04ucGFyc2UoY29sbGVjdGlvblByb2dyZXNzSnNvbikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzcyh7fSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzT2JqZWN0RmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSlcbiAgICBdLCBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc09iamVjdEZhY3RvcnkpO1xuICAgIHJldHVybiBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc09iamVjdEZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0cy5HdWVzdENvbGxlY3Rpb25Qcm9ncmVzc09iamVjdEZhY3RvcnkgPSBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc09iamVjdEZhY3Rvcnk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc09iamVjdEZhY3RvcnknLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzT2JqZWN0RmFjdG9yeSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0aGF0IHJlY29yZHMgcHJvZ3Jlc3MgZ3Vlc3RzIG1ha2UgZHVyaW5nIGEgY29sbGVjdGlvblxuICogcGxheXRocm91Z2guIE5vdGUgdGhhdCB0aGlzIHNlcnZpY2UgZG9lcyBub3QgY3VycmVudGx5IHN1cHBvcnQgc2F2aW5nIGFcbiAqIHVzZXIncyBwcm9ncmVzcyB3aGVuIHRoZXkgY3JlYXRlIGFuIGFjY291bnQuXG4gKi9cbi8vIFRPRE8oYmhlbm5pbmcpOiBNb3ZlIHRoaXMgdG8gYSBzZXJ2aWNlIHdoaWNoIHN0b3JlcyBzaGFyZWQgc3RhdGUgYWNyb3NzIHRoZVxuLy8gZnJvbnRlbmQgaW4gYSB3YXkgdGhhdCBjYW4gYmUgcGVyc2lzdGVkIGluIHRoZSBiYWNrZW5kIHVwb24gYWNjb3VudFxuLy8gY3JlYXRpb24sIHN1Y2ggYXMgZXhwbG9yYXRpb24gcHJvZ3Jlc3MuXG4vLyBUT0RPKGJoZW5uaW5nKTogVGhpcyBzaG91bGQgYmUgcmVzZXQgdXBvbiBsb2dpbiwgb3RoZXJ3aXNlIHRoZSBwcm9ncmVzcyB3aWxsXG4vLyBiZSBkaWZmZXJlbnQgZGVwZW5kaW5nIG9uIHRoZSB1c2VyJ3MgbG9nZ2VkIGluL2xvZ2dlZCBvdXQgc3RhdGUuXG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NPYmplY3RGYWN0b3J5XzEgPSByZXF1aXJlKFwiZG9tYWluL2NvbGxlY3Rpb24vR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NPYmplY3RGYWN0b3J5XCIpO1xudmFyIFdpbmRvd1JlZlNlcnZpY2VfMSA9IHJlcXVpcmUoXCJzZXJ2aWNlcy9jb250ZXh0dWFsL1dpbmRvd1JlZlNlcnZpY2VcIik7XG52YXIgR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzU2VydmljZShndWVzdENvbGxlY3Rpb25Qcm9ncmVzc09iamVjdEZhY3RvcnksIHdpbmRvd1JlZikge1xuICAgICAgICB0aGlzLmd1ZXN0Q29sbGVjdGlvblByb2dyZXNzT2JqZWN0RmFjdG9yeSA9IGd1ZXN0Q29sbGVjdGlvblByb2dyZXNzT2JqZWN0RmFjdG9yeTtcbiAgICAgICAgdGhpcy53aW5kb3dSZWYgPSB3aW5kb3dSZWY7XG4gICAgICAgIHRoaXMuQ09MTEVDVElPTl9TVE9SQUdFX0tFWSA9ICdjb2xsZWN0aW9uUHJvZ3Jlc3NTdG9yZV92MSc7XG4gICAgfVxuICAgIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzU2VydmljZS5wcm90b3R5cGUuc3RvcmVHdWVzdENvbGxlY3Rpb25Qcm9ncmVzcyA9IGZ1bmN0aW9uIChndWVzdENvbGxlY3Rpb25Qcm9ncmVzcykge1xuICAgICAgICB0aGlzLndpbmRvd1JlZi5uYXRpdmVXaW5kb3cubG9jYWxTdG9yYWdlW3RoaXMuQ09MTEVDVElPTl9TVE9SQUdFX0tFWV0gPSAoZ3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3MudG9Kc29uKCkpO1xuICAgIH07XG4gICAgR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZS5sb2FkR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmd1ZXN0Q29sbGVjdGlvblByb2dyZXNzT2JqZWN0RmFjdG9yeS5jcmVhdGVGcm9tSnNvbih0aGlzLndpbmRvd1JlZi5uYXRpdmVXaW5kb3cubG9jYWxTdG9yYWdlW3RoaXMuQ09MTEVDVElPTl9TVE9SQUdFX0tFWV0pO1xuICAgIH07XG4gICAgR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZS5yZWNvcmRDb21wbGV0ZWRFeHBsb3JhdGlvbiA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uSWQsIGV4cGxvcmF0aW9uSWQpIHtcbiAgICAgICAgdmFyIGd1ZXN0Q29sbGVjdGlvblByb2dyZXNzID0gdGhpcy5sb2FkR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3MoKTtcbiAgICAgICAgdmFyIGNvbXBsZXRlZEV4cGxvcmF0aW9uSWRIYXNCZWVuQWRkZWQgPSAoZ3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3MuYWRkQ29tcGxldGVkRXhwbG9yYXRpb25JZChjb2xsZWN0aW9uSWQsIGV4cGxvcmF0aW9uSWQpKTtcbiAgICAgICAgaWYgKGNvbXBsZXRlZEV4cGxvcmF0aW9uSWRIYXNCZWVuQWRkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmVHdWVzdENvbGxlY3Rpb25Qcm9ncmVzcyhndWVzdENvbGxlY3Rpb25Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzU2VydmljZS5wcm90b3R5cGUuZ2V0VmFsaWRDb21wbGV0ZWRFeHBsb3JhdGlvbklkcyA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjb2xsZWN0aW9uSWQgPSBjb2xsZWN0aW9uLmdldElkKCk7XG4gICAgICAgIHZhciBndWVzdENvbGxlY3Rpb25Qcm9ncmVzcyA9IHRoaXMubG9hZEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzKCk7XG4gICAgICAgIHZhciBjb21wbGV0ZWRFeHBsb3JhdGlvbklkcyA9IChndWVzdENvbGxlY3Rpb25Qcm9ncmVzcy5nZXRDb21wbGV0ZWRFeHBsb3JhdGlvbklkcyhjb2xsZWN0aW9uSWQpKTtcbiAgICAgICAgLy8gRmlsdGVyIHRoZSBleHBsb3JhdGlvbiBJRHMgYnkgd2hldGhlciB0aGV5IGFyZSBjb250YWluZWQgd2l0aGluIHRoZVxuICAgICAgICAvLyBzcGVjaWZpZWQgY29sbGVjdGlvbiBzdHJ1Y3R1cmUuXG4gICAgICAgIHJldHVybiBjb21wbGV0ZWRFeHBsb3JhdGlvbklkcy5maWx0ZXIoZnVuY3Rpb24gKGV4cElkKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5jb250YWluc0NvbGxlY3Rpb25Ob2RlKGV4cElkKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBUaGlzIG1ldGhvZCBjb3JyZXNwb25kcyB0byBjb2xsZWN0aW9uX2RvbWFpbi5nZXRfbmV4dF9leHBsb3JhdGlvbl9pZC5cbiAgICBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc1NlcnZpY2UucHJvdG90eXBlLl9nZXROZXh0RXhwbG9yYXRpb25JZCA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBjb21wbGV0ZWRJZHMpIHtcbiAgICAgICAgdmFyIGV4cGxvcmF0aW9uSWRzID0gY29sbGVjdGlvbi5nZXRFeHBsb3JhdGlvbklkcygpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGxvcmF0aW9uSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY29tcGxldGVkSWRzLmluZGV4T2YoZXhwbG9yYXRpb25JZHNbaV0pID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBsb3JhdGlvbklkc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlY29yZHMgdGhhdCB0aGUgc3BlY2lmaWVkIGV4cGxvcmF0aW9uIHdhcyBjb21wbGV0ZWQgaW4gdGhlIGNvbnRleHQgb2ZcbiAgICAgKiB0aGUgc3BlY2lmaWVkIGNvbGxlY3Rpb24sIGFzIGEgZ3Vlc3QuXG4gICAgICovXG4gICAgR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZS5yZWNvcmRFeHBsb3JhdGlvbkNvbXBsZXRlZEluQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uSWQsIGV4cGxvcmF0aW9uSWQpIHtcbiAgICAgICAgdGhpcy5yZWNvcmRDb21wbGV0ZWRFeHBsb3JhdGlvbihjb2xsZWN0aW9uSWQsIGV4cGxvcmF0aW9uSWQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBndWVzdCB1c2VyIGhhcyBtYWRlIGFueSBwcm9ncmVzcyB0b3dhcmQgY29tcGxldGluZ1xuICAgICAqIHRoZSBzcGVjaWZpZWQgY29sbGVjdGlvbiBieSBjb21wbGV0aW5nIGF0IGxlYXN0IG9uZSBleHBsb3JhdGlvbiByZWxhdGVkXG4gICAgICogdG8gdGhlIGNvbGxlY3Rpb24uIE5vdGUgdGhhdCB0aGlzIGRvZXMgbm90IGFjY291bnQgZm9yIGFueSBjb21wbGV0ZWRcbiAgICAgKiBleHBsb3JhdGlvbnMgd2hpY2ggYXJlIG5vIGxvbmdlciByZWZlcmVuY2VkIGJ5IHRoZSBjb2xsZWN0aW9uO1xuICAgICAqIGdldENvbXBsZXRlZEV4cGxvcmF0aW9uSWRzKCkgc2hvdWxkIGJlIHVzZWQgZm9yIHRoYXQsIGluc3RlYWQuXG4gICAgICovXG4gICAgR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZS5oYXNDb21wbGV0ZWRTb21lRXhwbG9yYXRpb24gPSBmdW5jdGlvbiAoY29sbGVjdGlvbklkKSB7XG4gICAgICAgIHZhciBndWVzdENvbGxlY3Rpb25Qcm9ncmVzcyA9IHRoaXMubG9hZEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzKCk7XG4gICAgICAgIHJldHVybiBndWVzdENvbGxlY3Rpb25Qcm9ncmVzcy5oYXNDb21wbGV0aW9uUHJvZ3Jlc3MoY29sbGVjdGlvbklkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgY29sbGVjdGlvbiBvYmplY3QsIHJldHVybnMgdGhlIGxpc3Qgb2YgZXhwbG9yYXRpb24gSURzXG4gICAgICogY29tcGxldGVkIGJ5IHRoZSBndWVzdCB1c2VyLiBUaGUgcmV0dXJuIGxpc3Qgb2YgZXhwbG9yYXRpb24gSURzIHdpbGxcbiAgICAgKiBub3QgaW5jbHVkZSBhbnkgcHJldmlvdXNseSBjb21wbGV0ZWQgZXhwbG9yYXRpb25zIGZvciB0aGUgZ2l2ZW5cbiAgICAgKiBjb2xsZWN0aW9uIHRoYXQgYXJlIG5vIGxvbmdlciBwYXJ0IG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzU2VydmljZS5wcm90b3R5cGUuZ2V0Q29tcGxldGVkRXhwbG9yYXRpb25JZHMgPSBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWxpZENvbXBsZXRlZEV4cGxvcmF0aW9uSWRzKGNvbGxlY3Rpb24pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBjb2xsZWN0aW9uIG9iamVjdCBhIGxpc3Qgb2YgY29tcGxldGVkIGV4cGxvcmF0aW9uIElEcywgcmV0dXJuc1xuICAgICAqIHRoZSBuZXh0IGV4cGxvcmF0aW9uIElEIHRoZSBndWVzdCB1c2VyIGNhbiBwbGF5IGFzIHBhcnQgb2ZcbiAgICAgKiBjb21wbGV0aW5nIHRoZSBjb2xsZWN0aW9uLiBJZiB0aGlzIG1ldGhvZCByZXR1cm5zIG51bGwsIHRoZVxuICAgICAqIGd1ZXN0IGhhcyBjb21wbGV0ZWQgdGhlIGNvbGxlY3Rpb24uXG4gICAgICovXG4gICAgR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NTZXJ2aWNlLnByb3RvdHlwZS5nZXROZXh0RXhwbG9yYXRpb25JZCA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBjb21wbGV0ZWRFeHBsb3JhdGlvbklkcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TmV4dEV4cGxvcmF0aW9uSWQoY29sbGVjdGlvbiwgY29tcGxldGVkRXhwbG9yYXRpb25JZHMpO1xuICAgIH07XG4gICAgdmFyIF9hLCBfYjtcbiAgICBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc1NlcnZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW3R5cGVvZiAoX2EgPSB0eXBlb2YgR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NPYmplY3RGYWN0b3J5XzEuR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NPYmplY3RGYWN0b3J5ICE9PSBcInVuZGVmaW5lZFwiICYmIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzT2JqZWN0RmFjdG9yeV8xLkd1ZXN0Q29sbGVjdGlvblByb2dyZXNzT2JqZWN0RmFjdG9yeSkgPT09IFwiZnVuY3Rpb25cIiA/IF9hIDogT2JqZWN0LCB0eXBlb2YgKF9iID0gdHlwZW9mIFdpbmRvd1JlZlNlcnZpY2VfMS5XaW5kb3dSZWYgIT09IFwidW5kZWZpbmVkXCIgJiYgV2luZG93UmVmU2VydmljZV8xLldpbmRvd1JlZikgPT09IFwiZnVuY3Rpb25cIiA/IF9iIDogT2JqZWN0XSlcbiAgICBdLCBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc1NlcnZpY2UpO1xuICAgIHJldHVybiBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc1NlcnZpY2U7XG59KCkpO1xuZXhwb3J0cy5HdWVzdENvbGxlY3Rpb25Qcm9ncmVzc1NlcnZpY2UgPSBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc1NlcnZpY2U7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc1NlcnZpY2UnLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzU2VydmljZSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTYgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIHRvIHJldHJpZXZlIHJlYWQgb25seSBpbmZvcm1hdGlvblxuICogYWJvdXQgY29sbGVjdGlvbnMgZnJvbSB0aGUgYmFja2VuZC5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xuLy8gVE9ETyhiaGVubmluZyk6IEZvciBwcmV2aWV3IG1vZGUsIHRoaXMgc2VydmljZSBzaG91bGQgYmUgcmVwbGFjZWQgYnkgYVxuLy8gc2VwYXJhdGUgQ29sbGVjdGlvbkRhdGFTZXJ2aWNlIGltcGxlbWVudGF0aW9uIHdoaWNoIHJldHVybnMgYSBsb2NhbCBjb3B5IG9mXG4vLyB0aGUgY29sbGVjdGlvbiBpbnN0ZWFkLiBUaGlzIGZpbGUgc2hvdWxkIG5vdCBiZSBpbmNsdWRlZCBvbiB0aGUgcGFnZSBpbiB0aGF0XG4vLyBzY2VuYXJpby5cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1JlYWRPbmx5Q29sbGVjdGlvbkJhY2tlbmRBcGlTZXJ2aWNlJywgW1xuICAgICckaHR0cCcsICckcScsICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgJ0NPTExFQ1RJT05fREFUQV9VUkxfVEVNUExBVEUnLFxuICAgIGZ1bmN0aW9uICgkaHR0cCwgJHEsIFVybEludGVycG9sYXRpb25TZXJ2aWNlLCBDT0xMRUNUSU9OX0RBVEFfVVJMX1RFTVBMQVRFKSB7XG4gICAgICAgIC8vIE1hcHMgcHJldmlvdXNseSBsb2FkZWQgY29sbGVjdGlvbnMgdG8gdGhlaXIgSURzLlxuICAgICAgICB2YXIgX2NvbGxlY3Rpb25DYWNoZSA9IFtdO1xuICAgICAgICB2YXIgX2NvbGxlY3Rpb25EZXRhaWxzQ2FjaGUgPSBbXTtcbiAgICAgICAgdmFyIF9mZXRjaENvbGxlY3Rpb24gPSBmdW5jdGlvbiAoY29sbGVjdGlvbklkLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uRGF0YVVybCA9IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKENPTExFQ1RJT05fREFUQV9VUkxfVEVNUExBVEUsIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uX2lkOiBjb2xsZWN0aW9uSWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KGNvbGxlY3Rpb25EYXRhVXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gYW5ndWxhci5jb3B5KHJlc3BvbnNlLmRhdGEuY29sbGVjdGlvbik7XG4gICAgICAgICAgICAgICAgX2NhY2hlQ29sbGVjdGlvbkRldGFpbHMocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soY29sbGVjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycm9yUmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfY2FjaGVDb2xsZWN0aW9uRGV0YWlscyA9IGZ1bmN0aW9uIChkZXRhaWxzKSB7XG4gICAgICAgICAgICBfY29sbGVjdGlvbkRldGFpbHNDYWNoZVtkZXRhaWxzLmNvbGxlY3Rpb24uaWRdID0ge1xuICAgICAgICAgICAgICAgIGNhbkVkaXQ6IGRldGFpbHMuY2FuX2VkaXQsXG4gICAgICAgICAgICAgICAgdGl0bGU6IGRldGFpbHMuY29sbGVjdGlvbi50aXRsZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfaXNDYWNoZWQgPSBmdW5jdGlvbiAoY29sbGVjdGlvbklkKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NvbGxlY3Rpb25DYWNoZS5oYXNPd25Qcm9wZXJ0eShjb2xsZWN0aW9uSWQpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXRyaWV2ZXMgYSBjb2xsZWN0aW9uIGZyb20gdGhlIGJhY2tlbmQgZ2l2ZW4gYSBjb2xsZWN0aW9uIElELiBUaGlzXG4gICAgICAgICAgICAgKiByZXR1cm5zIGEgcHJvbWlzZSBvYmplY3QgdGhhdCBhbGxvd3MgYSBzdWNjZXNzIGFuZCByZWplY3Rpb24gY2FsbGJhY2tzXG4gICAgICAgICAgICAgKiB0byBiZSByZWdpc3RlcmVkLiBJZiB0aGUgY29sbGVjdGlvbiBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkIGFuZCBhXG4gICAgICAgICAgICAgKiBzdWNjZXNzIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHRvIHRoZSBwcm9taXNlIG9iamVjdCwgdGhlXG4gICAgICAgICAgICAgKiBzdWNjZXNzIGNhbGxiYWNrIGlzIGNhbGxlZCB3aXRoIHRoZSBjb2xsZWN0aW9uIHBhc3NlZCBpbiBhcyBhXG4gICAgICAgICAgICAgKiBwYXJhbWV0ZXIuIElmIHNvbWV0aGluZyBnb2VzIHdyb25nIHdoaWxlIHRyeWluZyB0byBmZXRjaCB0aGVcbiAgICAgICAgICAgICAqIGNvbGxlY3Rpb24sIHRoZSByZWplY3Rpb24gY2FsbGJhY2sgaXMgY2FsbGVkIGluc3RlYWQsIGlmIHByZXNlbnQuIFRoZVxuICAgICAgICAgICAgICogcmVqZWN0aW9uIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHBhc3NlZCB0aGUgZXJyb3IgdGhhdCBvY2N1cnJlZCBhbmQgdGhlXG4gICAgICAgICAgICAgKiBjb2xsZWN0aW9uIElELlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmZXRjaENvbGxlY3Rpb246IGZ1bmN0aW9uIChjb2xsZWN0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBfZmV0Y2hDb2xsZWN0aW9uKGNvbGxlY3Rpb25JZCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEJlaGF2ZXMgaW4gdGhlIGV4YWN0IHNhbWUgd2F5IGFzIGZldGNoQ29sbGVjdGlvbiAoaW5jbHVkaW5nIGNhbGxiYWNrXG4gICAgICAgICAgICAgKiBiZWhhdmlvciBhbmQgcmV0dXJuaW5nIGEgcHJvbWlzZSBvYmplY3QpLCBleGNlcHQgdGhpcyBmdW5jdGlvbiB3aWxsXG4gICAgICAgICAgICAgKiBhdHRlbXB0IHRvIHNlZSB3aGV0aGVyIHRoZSBnaXZlbiBjb2xsZWN0aW9uIGhhcyBhbHJlYWR5IGJlZW4gbG9hZGVkLiBJZlxuICAgICAgICAgICAgICogaXQgaGFzIG5vdCB5ZXQgYmVlbiBsb2FkZWQsIGl0IHdpbGwgZmV0Y2ggdGhlIGNvbGxlY3Rpb24gZnJvbSB0aGVcbiAgICAgICAgICAgICAqIGJhY2tlbmQuIElmIGl0IHN1Y2Nlc3NmdWxseSByZXRyaWV2ZXMgdGhlIGNvbGxlY3Rpb24gZnJvbSB0aGUgYmFja2VuZCxcbiAgICAgICAgICAgICAqIGl0IHdpbGwgc3RvcmUgaXQgaW4gdGhlIGNhY2hlIHRvIGF2b2lkIHJlcXVlc3RzIGZyb20gdGhlIGJhY2tlbmQgaW5cbiAgICAgICAgICAgICAqIGZ1cnRoZXIgZnVuY3Rpb24gY2FsbHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxvYWRDb2xsZWN0aW9uOiBmdW5jdGlvbiAoY29sbGVjdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9pc0NhY2hlZChjb2xsZWN0aW9uSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYW5ndWxhci5jb3B5KF9jb2xsZWN0aW9uQ2FjaGVbY29sbGVjdGlvbklkXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2ZldGNoQ29sbGVjdGlvbihjb2xsZWN0aW9uSWQsIGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgZmV0Y2hlZCBjb2xsZWN0aW9uIHRvIGF2b2lkIGZ1dHVyZSBmZXRjaGVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb2xsZWN0aW9uQ2FjaGVbY29sbGVjdGlvbklkXSA9IGNvbGxlY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhbmd1bGFyLmNvcHkoY29sbGVjdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDb2xsZWN0aW9uRGV0YWlsczogZnVuY3Rpb24gKGNvbGxlY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgIGlmIChfY29sbGVjdGlvbkRldGFpbHNDYWNoZVtjb2xsZWN0aW9uSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29sbGVjdGlvbkRldGFpbHNDYWNoZVtjb2xsZWN0aW9uSWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2NvbGxlY3Rpb24gaGFzIG5vdCBiZWVuIGZldGNoZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIGNvbGxlY3Rpb24gaXMgc3RvcmVkIHdpdGhpbiB0aGUgbG9jYWwgZGF0YVxuICAgICAgICAgICAgICogY2FjaGUgb3IgaWYgaXQgbmVlZHMgdG8gYmUgcmV0cmlldmVkIGZyb20gdGhlIGJhY2tlbmQgdXBvbiBhIGxhb2QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlzQ2FjaGVkOiBmdW5jdGlvbiAoY29sbGVjdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9pc0NhY2hlZChjb2xsZWN0aW9uSWQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVwbGFjZXMgdGhlIGN1cnJlbnQgY29sbGVjdGlvbiBpbiB0aGUgY2FjaGUgZ2l2ZW4gYnkgdGhlIHNwZWNpZmllZFxuICAgICAgICAgICAgICogY29sbGVjdGlvbiBJRCB3aXRoIGEgbmV3IGNvbGxlY3Rpb24gb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjYWNoZUNvbGxlY3Rpb246IGZ1bmN0aW9uIChjb2xsZWN0aW9uSWQsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBfY29sbGVjdGlvbkNhY2hlW2NvbGxlY3Rpb25JZF0gPSBhbmd1bGFyLmNvcHkoY29sbGVjdGlvbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDbGVhcnMgdGhlIGxvY2FsIGNvbGxlY3Rpb24gZGF0YSBjYWNoZSwgZm9yY2luZyBhbGwgZnV0dXJlIGxvYWRzIHRvXG4gICAgICAgICAgICAgKiByZS1yZXF1ZXN0IHRoZSBwcmV2aW91c2x5IGxvYWRlZCBjb2xsZWN0aW9ucyBmcm9tIHRoZSBiYWNrZW5kLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjbGVhckNvbGxlY3Rpb25DYWNoZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9jb2xsZWN0aW9uQ2FjaGUgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE1IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2YgQW5zd2VyR3JvdXBcbiAqIGRvbWFpbiBvYmplY3RzLlxuICovXG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgT3V0Y29tZU9iamVjdEZhY3RvcnlfMSA9IHJlcXVpcmUoXCJkb21haW4vZXhwbG9yYXRpb24vT3V0Y29tZU9iamVjdEZhY3RvcnlcIik7XG52YXIgUnVsZU9iamVjdEZhY3RvcnlfMSA9IHJlcXVpcmUoXCJkb21haW4vZXhwbG9yYXRpb24vUnVsZU9iamVjdEZhY3RvcnlcIik7XG52YXIgQW5zd2VyR3JvdXAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5zd2VyR3JvdXAocnVsZXMsIG91dGNvbWUsIHRyYWluaW5nRGF0YSwgdGFnZ2VkU2tpbGxNaXNjb25jZXB0aW9uSWQpIHtcbiAgICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgICAgICB0aGlzLm91dGNvbWUgPSBvdXRjb21lO1xuICAgICAgICB0aGlzLnRyYWluaW5nRGF0YSA9IHRyYWluaW5nRGF0YTtcbiAgICAgICAgdGhpcy50YWdnZWRTa2lsbE1pc2NvbmNlcHRpb25JZCA9IHRhZ2dlZFNraWxsTWlzY29uY2VwdGlvbklkO1xuICAgIH1cbiAgICAvLyBUT0RPKCM3MTc2KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlIHRoZSByZXR1cm4gdHlwZSBpcyBhIGRpY3Qgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkIGtleXNcbiAgICAvLyB3aGljaCBnaXZlIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZiBjYW1lbENhc2luZy5cbiAgICBBbnN3ZXJHcm91cC5wcm90b3R5cGUudG9CYWNrZW5kRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJ1bGVfc3BlY3M6IHRoaXMucnVsZXMubWFwKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGUudG9CYWNrZW5kRGljdCgpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBvdXRjb21lOiB0aGlzLm91dGNvbWUudG9CYWNrZW5kRGljdCgpLFxuICAgICAgICAgICAgdHJhaW5pbmdfZGF0YTogdGhpcy50cmFpbmluZ0RhdGEsXG4gICAgICAgICAgICB0YWdnZWRfc2tpbGxfbWlzY29uY2VwdGlvbl9pZDogdGhpcy50YWdnZWRTa2lsbE1pc2NvbmNlcHRpb25JZFxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIEFuc3dlckdyb3VwO1xufSgpKTtcbmV4cG9ydHMuQW5zd2VyR3JvdXAgPSBBbnN3ZXJHcm91cDtcbnZhciBBbnN3ZXJHcm91cE9iamVjdEZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5KG91dGNvbWVPYmplY3RGYWN0b3J5LCBydWxlT2JqZWN0RmFjdG9yeSkge1xuICAgICAgICB0aGlzLm91dGNvbWVPYmplY3RGYWN0b3J5ID0gb3V0Y29tZU9iamVjdEZhY3Rvcnk7XG4gICAgICAgIHRoaXMucnVsZU9iamVjdEZhY3RvcnkgPSBydWxlT2JqZWN0RmFjdG9yeTtcbiAgICB9XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiB0eXBlZFxuICAgIC8vIGFzICdhbnknIHNpbmNlICdydWxlQmFja2VuZERpY3RzJyBpcyBhIGNvbXBsZXggb2JqZWN0IHdpdGggZWxlbWVudHMgYXMga2V5c1xuICAgIC8vIGhhdmluZyB2YXJ5aW5nIHR5cGVzLiBBbiBleGFjdCB0eXBlIG5lZWRzIHRvYmUgZm91bmQuXG4gICAgQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5nZW5lcmF0ZVJ1bGVzRnJvbUJhY2tlbmQgPSBmdW5jdGlvbiAocnVsZUJhY2tlbmREaWN0cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gcnVsZUJhY2tlbmREaWN0cy5tYXAoZnVuY3Rpb24gKHJ1bGVCYWNrZW5kRGljdCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJ1bGVPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChydWxlQmFja2VuZERpY3QpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgJ3RyYWluaW5nRGF0YScgaXMgYW4gYXJyYXkgb2YgZGljdHMgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkXG4gICAgLy8ga2V5cyB3aGljaCBnaXZlIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZlxuICAgIC8vIGNhbWVsQ2FzaW5nLlxuICAgIEFuc3dlckdyb3VwT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlTmV3ID0gZnVuY3Rpb24gKHJ1bGVzLCBvdXRjb21lLCB0cmFpbmluZ0RhdGEsIHRhZ2dlZFNraWxsTWlzY29uY2VwdGlvbklkKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5zd2VyR3JvdXAocnVsZXMsIG91dGNvbWUsIHRyYWluaW5nRGF0YSwgdGFnZ2VkU2tpbGxNaXNjb25jZXB0aW9uSWQpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnYW5zd2VyR3JvdXBCYWNrZW5kRGljdCcgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZCBrZXlzXG4gICAgLy8gd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2YgY2FtZWxDYXNpbmcuXG4gICAgQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tQmFja2VuZERpY3QgPSBmdW5jdGlvbiAoYW5zd2VyR3JvdXBCYWNrZW5kRGljdCkge1xuICAgICAgICByZXR1cm4gbmV3IEFuc3dlckdyb3VwKHRoaXMuZ2VuZXJhdGVSdWxlc0Zyb21CYWNrZW5kKGFuc3dlckdyb3VwQmFja2VuZERpY3QucnVsZV9zcGVjcyksIHRoaXMub3V0Y29tZU9iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KGFuc3dlckdyb3VwQmFja2VuZERpY3Qub3V0Y29tZSksIGFuc3dlckdyb3VwQmFja2VuZERpY3QudHJhaW5pbmdfZGF0YSwgYW5zd2VyR3JvdXBCYWNrZW5kRGljdC50YWdnZWRfc2tpbGxfbWlzY29uY2VwdGlvbl9pZCk7XG4gICAgfTtcbiAgICB2YXIgX2EsIF9iO1xuICAgIEFuc3dlckdyb3VwT2JqZWN0RmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBPdXRjb21lT2JqZWN0RmFjdG9yeV8xLk91dGNvbWVPYmplY3RGYWN0b3J5ICE9PSBcInVuZGVmaW5lZFwiICYmIE91dGNvbWVPYmplY3RGYWN0b3J5XzEuT3V0Y29tZU9iamVjdEZhY3RvcnkpID09PSBcImZ1bmN0aW9uXCIgPyBfYSA6IE9iamVjdCwgdHlwZW9mIChfYiA9IHR5cGVvZiBSdWxlT2JqZWN0RmFjdG9yeV8xLlJ1bGVPYmplY3RGYWN0b3J5ICE9PSBcInVuZGVmaW5lZFwiICYmIFJ1bGVPYmplY3RGYWN0b3J5XzEuUnVsZU9iamVjdEZhY3RvcnkpID09PSBcImZ1bmN0aW9uXCIgPyBfYiA6IE9iamVjdF0pXG4gICAgXSwgQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5ID0gQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5Jywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShBbnN3ZXJHcm91cE9iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0byBzZW5kIGNoYW5nZXMgdG8gYSBleHBsb3JhdGlvbiB0byB0aGUgYmFja2VuZC5cbiAqL1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL1JlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UuY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnRWRpdGFibGVFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlJywgW1xuICAgICckaHR0cCcsICckcScsICdSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UnLFxuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsICdFRElUQUJMRV9FWFBMT1JBVElPTl9EQVRBX0RSQUZUX1VSTF9URU1QTEFURScsXG4gICAgJ0VESVRBQkxFX0VYUExPUkFUSU9OX0RBVEFfVVJMX1RFTVBMQVRFJyxcbiAgICBmdW5jdGlvbiAoJGh0dHAsICRxLCBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UsIFVybEludGVycG9sYXRpb25TZXJ2aWNlLCBFRElUQUJMRV9FWFBMT1JBVElPTl9EQVRBX0RSQUZUX1VSTF9URU1QTEFURSwgRURJVEFCTEVfRVhQTE9SQVRJT05fREFUQV9VUkxfVEVNUExBVEUpIHtcbiAgICAgICAgdmFyIF9mZXRjaEV4cGxvcmF0aW9uID0gZnVuY3Rpb24gKGV4cGxvcmF0aW9uSWQsIGFwcGx5RHJhZnQsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGVkaXRhYmxlRXhwbG9yYXRpb25EYXRhVXJsID0gX2dldEV4cGxvcmF0aW9uVXJsKGV4cGxvcmF0aW9uSWQsIGFwcGx5RHJhZnQpO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KGVkaXRhYmxlRXhwbG9yYXRpb25EYXRhVXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBleHBsb3JhdGlvbiA9IGFuZ3VsYXIuY29weShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhleHBsb3JhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycm9yUmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfdXBkYXRlRXhwbG9yYXRpb24gPSBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCwgZXhwbG9yYXRpb25WZXJzaW9uLCBjb21taXRNZXNzYWdlLCBjaGFuZ2VMaXN0LCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBlZGl0YWJsZUV4cGxvcmF0aW9uRGF0YVVybCA9IF9nZXRFeHBsb3JhdGlvblVybChleHBsb3JhdGlvbklkLCBudWxsKTtcbiAgICAgICAgICAgIHZhciBwdXREYXRhID0ge1xuICAgICAgICAgICAgICAgIHZlcnNpb246IGV4cGxvcmF0aW9uVmVyc2lvbixcbiAgICAgICAgICAgICAgICBjb21taXRfbWVzc2FnZTogY29tbWl0TWVzc2FnZSxcbiAgICAgICAgICAgICAgICBjaGFuZ2VfbGlzdDogY2hhbmdlTGlzdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRodHRwLnB1dChlZGl0YWJsZUV4cGxvcmF0aW9uRGF0YVVybCwgcHV0RGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgcmV0dXJuZWQgZGF0YSBpcyBhbiB1cGRhdGVkIGV4cGxvcmF0aW9uIGRpY3QuXG4gICAgICAgICAgICAgICAgdmFyIGV4cGxvcmF0aW9uID0gYW5ndWxhci5jb3B5KHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBmcm9tIHRoZSBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UncyBjYWNoZVxuICAgICAgICAgICAgICAgIC8vIEFzIHRoZSB0d28gdmVyc2lvbnMgb2YgdGhlIGRhdGEgKGxlYXJuZXIgYW5kIGVkaXRvcikgbm93IGRpZmZlclxuICAgICAgICAgICAgICAgIFJlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS5kZWxldGVFeHBsb3JhdGlvbkZyb21DYWNoZShleHBsb3JhdGlvbklkLCBleHBsb3JhdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soZXhwbG9yYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhlcnJvclJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2RlbGV0ZUV4cGxvcmF0aW9uID0gZnVuY3Rpb24gKGV4cGxvcmF0aW9uSWQsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGVkaXRhYmxlRXhwbG9yYXRpb25EYXRhVXJsID0gX2dldEV4cGxvcmF0aW9uVXJsKGV4cGxvcmF0aW9uSWQsIG51bGwpO1xuICAgICAgICAgICAgJGh0dHBbJ2RlbGV0ZSddKGVkaXRhYmxlRXhwbG9yYXRpb25EYXRhVXJsKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBEZWxldGUgaXRlbSBmcm9tIHRoZSBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UncyBjYWNoZVxuICAgICAgICAgICAgICAgIFJlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS5kZWxldGVFeHBsb3JhdGlvbkZyb21DYWNoZShleHBsb3JhdGlvbklkKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayh7fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycm9yUmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfZ2V0RXhwbG9yYXRpb25VcmwgPSBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCwgYXBwbHlEcmFmdCkge1xuICAgICAgICAgICAgaWYgKGFwcGx5RHJhZnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuaW50ZXJwb2xhdGVVcmwoRURJVEFCTEVfRVhQTE9SQVRJT05fREFUQV9EUkFGVF9VUkxfVEVNUExBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbG9yYXRpb25faWQ6IGV4cGxvcmF0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgIGFwcGx5X2RyYWZ0OiBKU09OLnN0cmluZ2lmeShhcHBseURyYWZ0KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKEVESVRBQkxFX0VYUExPUkFUSU9OX0RBVEFfVVJMX1RFTVBMQVRFLCB7XG4gICAgICAgICAgICAgICAgZXhwbG9yYXRpb25faWQ6IGV4cGxvcmF0aW9uSWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmV0Y2hFeHBsb3JhdGlvbjogZnVuY3Rpb24gKGV4cGxvcmF0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBfZmV0Y2hFeHBsb3JhdGlvbihleHBsb3JhdGlvbklkLCBudWxsLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZldGNoQXBwbHlEcmFmdEV4cGxvcmF0aW9uOiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF9mZXRjaEV4cGxvcmF0aW9uKGV4cGxvcmF0aW9uSWQsIHRydWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVcGRhdGVzIGFuIGV4cGxvcmF0aW9uIGluIHRoZSBiYWNrZW5kIHdpdGggdGhlIHByb3ZpZGVkIGV4cGxvcmF0aW9uXG4gICAgICAgICAgICAgKiBJRC4gVGhlIGNoYW5nZXMgb25seSBhcHBseSB0byB0aGUgZXhwbG9yYXRpb24gb2YgdGhlIGdpdmVuIHZlcnNpb25cbiAgICAgICAgICAgICAqIGFuZCB0aGUgcmVxdWVzdCB0byB1cGRhdGUgdGhlIGV4cGxvcmF0aW9uIHdpbGwgZmFpbCBpZiB0aGUgcHJvdmlkZWRcbiAgICAgICAgICAgICAqIGV4cGxvcmF0aW9uIHZlcnNpb24gaXMgb2xkZXIgdGhhbiB0aGUgY3VycmVudCB2ZXJzaW9uIHN0b3JlZCBpbiB0aGVcbiAgICAgICAgICAgICAqIGJhY2tlbmQuIEJvdGggdGhlIGNoYW5nZXMgYW5kIHRoZSBtZXNzYWdlIHRvIGFzc29jaWF0ZSB3aXRoIHRob3NlXG4gICAgICAgICAgICAgKiBjaGFuZ2VzIGFyZSB1c2VkIHRvIGNvbW1pdCBhIGNoYW5nZSB0byB0aGUgZXhwbG9yYXRpb24uXG4gICAgICAgICAgICAgKiBUaGUgbmV3IGV4cGxvcmF0aW9uIGlzIHBhc3NlZCB0byB0aGUgc3VjY2VzcyBjYWxsYmFjayxcbiAgICAgICAgICAgICAqIGlmIG9uZSBpcyBwcm92aWRlZCB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZSBvYmplY3QuIEVycm9ycyBhcmUgcGFzc2VkXG4gICAgICAgICAgICAgKiB0byB0aGUgZXJyb3IgY2FsbGJhY2ssIGlmIG9uZSBpcyBwcm92aWRlZC4gUGxlYXNlIG5vdGUsIG9uY2UgdGhpcyBpc1xuICAgICAgICAgICAgICogY2FsbGVkIHRoZSBjYWNoZWQgZXhwbG9yYXRpb24gaW4gUmVhZE9ubHlFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlXG4gICAgICAgICAgICAgKiB3aWxsIGJlIGRlbGV0ZWQuIFRoaXMgaXMgZHVlIHRvIHRoZSBkaWZmZXJlbmNlcyBpbiB0aGUgYmFjay1lbmRcbiAgICAgICAgICAgICAqIGVkaXRvciBvYmplY3QgYW5kIHRoZSBiYWNrLWVuZCBwbGF5ZXIgb2JqZWN0LiBBcyBpdCBzdGFuZHMgbm93LFxuICAgICAgICAgICAgICogd2UgYXJlIHVuYWJsZSB0byBjYWNoZSBhbnkgRXhwbG9yYXRpb24gb2JqZWN0IG9idGFpbmVkIGZyb20gdGhlXG4gICAgICAgICAgICAgKiBlZGl0b3IgYmVhY2tlbmQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZUV4cGxvcmF0aW9uOiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCwgZXhwbG9yYXRpb25WZXJzaW9uLCBjb21taXRNZXNzYWdlLCBjaGFuZ2VMaXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgX3VwZGF0ZUV4cGxvcmF0aW9uKGV4cGxvcmF0aW9uSWQsIGV4cGxvcmF0aW9uVmVyc2lvbiwgY29tbWl0TWVzc2FnZSwgY2hhbmdlTGlzdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlbGV0ZXMgYW4gZXhwbG9yYXRpb24gaW4gdGhlIGJhY2tlbmQgd2l0aCB0aGUgcHJvdmlkZWQgZXhwbG9yYXRpb25cbiAgICAgICAgICAgICAqIElELiBJZiBzdWNjZXNzZnVsLCB0aGUgZXhwbG9yYXRpb24gd2lsbCBhbHNvIGJlIGRlbGV0ZWQgZnJvbSB0aGVcbiAgICAgICAgICAgICAqIFJlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZSBjYWNoZSBhcyB3ZWxsLlxuICAgICAgICAgICAgICogRXJyb3JzIGFyZSBwYXNzZWQgdG8gdGhlIGVycm9yIGNhbGxiYWNrLCBpZiBvbmUgaXMgcHJvdmlkZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRlbGV0ZUV4cGxvcmF0aW9uOiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF9kZWxldGVFeHBsb3JhdGlvbihleHBsb3JhdGlvbklkLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTcgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBpbnN0YW5jZXMgb2YgRXhwbG9yYXRpb25EcmFmdFxuICogZG9tYWluIG9iamVjdHMuXG4gKi9cbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBFeHBsb3JhdGlvbkRyYWZ0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV4cGxvcmF0aW9uRHJhZnQoZHJhZnRDaGFuZ2VzLCBkcmFmdENoYW5nZUxpc3RJZCkge1xuICAgICAgICB0aGlzLmRyYWZ0Q2hhbmdlcyA9IGRyYWZ0Q2hhbmdlcztcbiAgICAgICAgdGhpcy5kcmFmdENoYW5nZUxpc3RJZCA9IGRyYWZ0Q2hhbmdlTGlzdElkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZHJhZnQgb2JqZWN0IGhhcyBiZWVuIG92ZXJ3cml0dGVuIGJ5IGFub3RoZXJcbiAgICAgKiBkcmFmdCB3aGljaCBoYXMgYmVlbiBjb21taXR0ZWQgdG8gdGhlIGJhY2stZW5kLiBJZiB0aGUgc3VwcGxpZWQgZHJhZnQgaWRcbiAgICAgKiBoYXMgYSBkaWZmZXJlbnQgdmFsdWUgdGhlbiBhIG5ld2VyIGNoYW5nZUxpc3QgbXVzdCBoYXZlIGJlZW4gY29tbWl0dGVkXG4gICAgICogdG8gdGhlIGJhY2stZW5kLlxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gLSBjdXJyZW50RHJhZnRJZC4gVGhlIGlkIG9mIHRoZSBkcmFmdCBjaGFuZ2VzIHdoY2ggd2FzXG4gICAgICogIHJldHJpZXZlZCBmcm9tIHRoZSBiYWNrLWVuZC5cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBUcnVlIGlmZiB0aGUgY3VycmVudERyYWZ0SWQgaXMgdGhlIHNhbWUgYXMgdGhlXG4gICAgICogZHJhZnRDaGFuZ2VMaXN0SWQgY29ycmVzcG9uZGluZyB0byB0aGlzIGRyYWZ0LlxuICAgICAqL1xuICAgIEV4cGxvcmF0aW9uRHJhZnQucHJvdG90eXBlLmlzVmFsaWQgPSBmdW5jdGlvbiAoY3VycmVudERyYWZ0SWQpIHtcbiAgICAgICAgcmV0dXJuIChjdXJyZW50RHJhZnRJZCA9PT0gdGhpcy5kcmFmdENoYW5nZUxpc3RJZCk7XG4gICAgfTtcbiAgICAvLyBUT0RPKCM3MTY1KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIHR5cGVkXG4gICAgLy8gYXMgJ2FueScgc2luY2UgJ2RyYWZ0Q2hhbmdlcycgaXMgYW4gYXJyYXkgb2YgZGljdHMgd2l0aCBwb3NzaWJsZVxuICAgIC8vIHVuZGVyc2NvcmVfY2FzZWQga2V5cy4gQSB0aG9yb3VnaCBjaGVjayBuZWVkcyB0byBiZSBkb25lIHRvIGFzc3VyZSBvZlxuICAgIC8vIGl0cyBleGFjdCB0eXBlLlxuICAgIEV4cGxvcmF0aW9uRHJhZnQucHJvdG90eXBlLmdldENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRyYWZ0Q2hhbmdlcztcbiAgICB9O1xuICAgIHJldHVybiBFeHBsb3JhdGlvbkRyYWZ0O1xufSgpKTtcbmV4cG9ydHMuRXhwbG9yYXRpb25EcmFmdCA9IEV4cGxvcmF0aW9uRHJhZnQ7XG52YXIgRXhwbG9yYXRpb25EcmFmdE9iamVjdEZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXhwbG9yYXRpb25EcmFmdE9iamVjdEZhY3RvcnkoKSB7XG4gICAgfVxuICAgIEV4cGxvcmF0aW9uRHJhZnRPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tTG9jYWxTdG9yYWdlRGljdCA9IGZ1bmN0aW9uIChleHBsb3JhdGlvbkRyYWZ0RGljdCkge1xuICAgICAgICByZXR1cm4gbmV3IEV4cGxvcmF0aW9uRHJhZnQoZXhwbG9yYXRpb25EcmFmdERpY3QuZHJhZnRDaGFuZ2VzLCBleHBsb3JhdGlvbkRyYWZ0RGljdC5kcmFmdENoYW5nZUxpc3RJZCk7XG4gICAgfTtcbiAgICBFeHBsb3JhdGlvbkRyYWZ0T2JqZWN0RmFjdG9yeS5wcm90b3R5cGUudG9Mb2NhbFN0b3JhZ2VEaWN0ID0gZnVuY3Rpb24gKFxuICAgIC8vIFRPRE8oIzcxNjUpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4gdHlwZWRcbiAgICAvLyBhcyAnYW55JyBzaW5jZSAnY2hhbmdlTGlzdCcgaXMgYW4gYXJyYXkgb2YgZGljdHMgd2l0aCBwb3NzaWJsZVxuICAgIC8vIHVuZGVyc2NvcmVfY2FzZWQga2V5cy4gQSB0aG9yb3VnaCBjaGVjayBuZWVkcyB0byBiZSBkb25lIHRvIGFzc3VyZSBvZlxuICAgIC8vIGl0cyBleGFjdCB0eXBlLlxuICAgIGNoYW5nZUxpc3QsIGRyYWZ0Q2hhbmdlTGlzdElkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkcmFmdENoYW5nZXM6IGNoYW5nZUxpc3QsXG4gICAgICAgICAgICBkcmFmdENoYW5nZUxpc3RJZDogZHJhZnRDaGFuZ2VMaXN0SWRcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEV4cGxvcmF0aW9uRHJhZnRPYmplY3RGYWN0b3J5ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KVxuICAgIF0sIEV4cGxvcmF0aW9uRHJhZnRPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gRXhwbG9yYXRpb25EcmFmdE9iamVjdEZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0cy5FeHBsb3JhdGlvbkRyYWZ0T2JqZWN0RmFjdG9yeSA9IEV4cGxvcmF0aW9uRHJhZnRPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnRXhwbG9yYXRpb25EcmFmdE9iamVjdEZhY3RvcnknLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKEV4cGxvcmF0aW9uRHJhZnRPYmplY3RGYWN0b3J5KSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2YgRXhwbG9yYXRpb25cbiAqIGRvbWFpbiBvYmplY3RzLlxuICovXG5yZXF1aXJlKCdkb21haW4vZXhwbG9yYXRpb24vUGFyYW1DaGFuZ2VzT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL1BhcmFtU3BlY3NPYmplY3RGYWN0b3J5LnRzJyk7XG5yZXF1aXJlKCdkb21haW4vZXhwbG9yYXRpb24vU3RhdGVzT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnRXhwbG9yYXRpb25PYmplY3RGYWN0b3J5JywgW1xuICAgICckbG9nJywgJ1BhcmFtQ2hhbmdlc09iamVjdEZhY3RvcnknLCAnUGFyYW1TcGVjc09iamVjdEZhY3RvcnknLFxuICAgICdTdGF0ZXNPYmplY3RGYWN0b3J5JywgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICAnSU5URVJBQ1RJT05fRElTUExBWV9NT0RFX0lOTElORScsXG4gICAgJ0lOVEVSQUNUSU9OX1NQRUNTJywgZnVuY3Rpb24gKCRsb2csIFBhcmFtQ2hhbmdlc09iamVjdEZhY3RvcnksIFBhcmFtU3BlY3NPYmplY3RGYWN0b3J5LCBTdGF0ZXNPYmplY3RGYWN0b3J5LCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSwgSU5URVJBQ1RJT05fRElTUExBWV9NT0RFX0lOTElORSwgSU5URVJBQ1RJT05fU1BFQ1MpIHtcbiAgICAgICAgdmFyIEV4cGxvcmF0aW9uID0gZnVuY3Rpb24gKGluaXRTdGF0ZU5hbWUsIHBhcmFtQ2hhbmdlcywgcGFyYW1TcGVjcywgc3RhdGVzLCB0aXRsZSwgbGFuZ3VhZ2VDb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRTdGF0ZU5hbWUgPSBpbml0U3RhdGVOYW1lO1xuICAgICAgICAgICAgdGhpcy5wYXJhbUNoYW5nZXMgPSBwYXJhbUNoYW5nZXM7XG4gICAgICAgICAgICB0aGlzLnBhcmFtU3BlY3MgPSBwYXJhbVNwZWNzO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZXMgPSBzdGF0ZXM7XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgICAgICB0aGlzLmxhbmd1YWdlQ29kZSA9IGxhbmd1YWdlQ29kZTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSW5zdGFuY2UgbWV0aG9kc1xuICAgICAgICBFeHBsb3JhdGlvbi5wcm90b3R5cGUuaXNTdGF0ZVRlcm1pbmFsID0gZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIChzdGF0ZU5hbWUgJiYgdGhpcy5nZXRJbnRlcmFjdGlvbklkKHN0YXRlTmFtZSkgJiZcbiAgICAgICAgICAgICAgICBJTlRFUkFDVElPTl9TUEVDU1t0aGlzLmdldEludGVyYWN0aW9uSWQoc3RhdGVOYW1lKV0uaXNfdGVybWluYWwpO1xuICAgICAgICB9O1xuICAgICAgICBFeHBsb3JhdGlvbi5wcm90b3R5cGUuZ2V0QXV0aG9yUmVjb21tZW5kZWRFeHBJZHMgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNTdGF0ZVRlcm1pbmFsKHN0YXRlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignVHJpZWQgdG8gZ2V0IHJlY29tbWVuZGF0aW9ucyBmb3IgYSBub24tdGVybWluYWwgc3RhdGU6ICcgK1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW50ZXJhY3Rpb25DdXN0b21pemF0aW9uQXJncyhzdGF0ZU5hbWUpLnJlY29tbWVuZGVkRXhwbG9yYXRpb25JZHMudmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIEV4cGxvcmF0aW9uLnByb3RvdHlwZS5nZXRJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGVzLmdldFN0YXRlKHN0YXRlTmFtZSk7XG4gICAgICAgICAgICBpZiAoIXN0YXRlKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5lcnJvcignSW52YWxpZCBzdGF0ZSBuYW1lOiAnICsgc3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5pbnRlcmFjdGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgRXhwbG9yYXRpb24ucHJvdG90eXBlLmdldEludGVyYWN0aW9uSWQgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb24gPSB0aGlzLmdldEludGVyYWN0aW9uKHN0YXRlTmFtZSk7XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3Rpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbnRlcmFjdGlvbi5pZDtcbiAgICAgICAgfTtcbiAgICAgICAgRXhwbG9yYXRpb24ucHJvdG90eXBlLmdldEludGVyYWN0aW9uQ3VzdG9taXphdGlvbkFyZ3MgPVxuICAgICAgICAgICAgZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IHRoaXMuZ2V0SW50ZXJhY3Rpb24oc3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJhY3Rpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcmFjdGlvbi5jdXN0b21pemF0aW9uQXJncztcbiAgICAgICAgICAgIH07XG4gICAgICAgIEV4cGxvcmF0aW9uLnByb3RvdHlwZS5nZXRJbnRlcmFjdGlvbkluc3RydWN0aW9ucyA9IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbklkID0gdGhpcy5nZXRJbnRlcmFjdGlvbklkKHN0YXRlTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJhY3Rpb25JZCA/IElOVEVSQUNUSU9OX1NQRUNTW2ludGVyYWN0aW9uSWRdLmluc3RydWN0aW9ucyA6ICcnO1xuICAgICAgICB9O1xuICAgICAgICBFeHBsb3JhdGlvbi5wcm90b3R5cGUuZ2V0TmFycm93SW5zdHJ1Y3Rpb25zID0gZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uSWQgPSB0aGlzLmdldEludGVyYWN0aW9uSWQoc3RhdGVOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiAoaW50ZXJhY3Rpb25JZCA/XG4gICAgICAgICAgICAgICAgSU5URVJBQ1RJT05fU1BFQ1NbaW50ZXJhY3Rpb25JZF0ubmFycm93X2luc3RydWN0aW9ucyA6XG4gICAgICAgICAgICAgICAgJycpO1xuICAgICAgICB9O1xuICAgICAgICBFeHBsb3JhdGlvbi5wcm90b3R5cGUuZ2V0SW50ZXJhY3Rpb25UaHVtYm5haWxTcmMgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAvLyBUT0RPKHNsbCk6IHVuaWZ5IHRoaXMgd2l0aCB0aGUgJ2Nob29zZSBpbnRlcmFjdGlvbicgbW9kYWwgaW5cbiAgICAgICAgICAgIC8vIHN0YXRlX2VkaXRvcl9pbnRlcmFjdGlvbi5odG1sLlxuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uSWQgPSB0aGlzLmdldEludGVyYWN0aW9uSWQoc3RhdGVOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcmFjdGlvbklkID8gKFVybEludGVycG9sYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAgICAgLmdldEludGVyYWN0aW9uVGh1bWJuYWlsSW1hZ2VVcmwoaW50ZXJhY3Rpb25JZCkpIDogJyc7XG4gICAgICAgIH07XG4gICAgICAgIEV4cGxvcmF0aW9uLnByb3RvdHlwZS5pc0ludGVyYWN0aW9uSW5saW5lID0gZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uSWQgPSB0aGlzLmdldEludGVyYWN0aW9uSWQoc3RhdGVOYW1lKTtcbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB3ZSB0cmVhdCBhIG51bGwgaW50ZXJhY3Rpb24gYXMgYW4gaW5saW5lIG9uZSwgc28gdGhhdCB0aGVcbiAgICAgICAgICAgIC8vIGVycm9yIG1lc3NhZ2UgYXNzb2NpYXRlZCB3aXRoIGl0IGlzIGRpc3BsYXllZCBpbiB0aGUgbW9zdCBjb21wYWN0IHdheVxuICAgICAgICAgICAgLy8gcG9zc2libGUgaW4gdGhlIGxlYXJuZXIgdmlldy5cbiAgICAgICAgICAgIHJldHVybiAoIWludGVyYWN0aW9uSWQgfHxcbiAgICAgICAgICAgICAgICBJTlRFUkFDVElPTl9TUEVDU1tpbnRlcmFjdGlvbklkXS5kaXNwbGF5X21vZGUgPT09XG4gICAgICAgICAgICAgICAgICAgIElOVEVSQUNUSU9OX0RJU1BMQVlfTU9ERV9JTkxJTkUpO1xuICAgICAgICB9O1xuICAgICAgICBFeHBsb3JhdGlvbi5wcm90b3R5cGUuZ2V0U3RhdGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuY29weSh0aGlzLnN0YXRlcyk7XG4gICAgICAgIH07XG4gICAgICAgIEV4cGxvcmF0aW9uLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlcy5nZXRTdGF0ZShzdGF0ZU5hbWUpO1xuICAgICAgICB9O1xuICAgICAgICBFeHBsb3JhdGlvbi5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUodGhpcy5pbml0U3RhdGVOYW1lKTtcbiAgICAgICAgfTtcbiAgICAgICAgRXhwbG9yYXRpb24ucHJvdG90eXBlLnNldEluaXRpYWxTdGF0ZU5hbWUgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRTdGF0ZU5hbWUgPSBzdGF0ZU5hbWU7XG4gICAgICAgIH07XG4gICAgICAgIEV4cGxvcmF0aW9uLnByb3RvdHlwZS5nZXRVbmludGVycG9sYXRlZENvbnRlbnRIdG1sID0gZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUoc3RhdGVOYW1lKS5jb250ZW50LmdldEh0bWwoKTtcbiAgICAgICAgfTtcbiAgICAgICAgRXhwbG9yYXRpb24ucHJvdG90eXBlLmdldFZvaWNlb3ZlcnMgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLmdldFN0YXRlKHN0YXRlTmFtZSk7XG4gICAgICAgICAgICB2YXIgcmVjb3JkZWRWb2ljZW92ZXJzID0gc3RhdGUucmVjb3JkZWRWb2ljZW92ZXJzO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRJZCA9IHN0YXRlLmNvbnRlbnQuZ2V0Q29udGVudElkKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkZWRWb2ljZW92ZXJzLmdldEJpbmRhYmxlVm9pY2VvdmVycyhjb250ZW50SWQpO1xuICAgICAgICB9O1xuICAgICAgICBFeHBsb3JhdGlvbi5wcm90b3R5cGUuZ2V0Vm9pY2VvdmVyID0gZnVuY3Rpb24gKHN0YXRlTmFtZSwgbGFuZ3VhZ2VDb2RlKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLmdldFN0YXRlKHN0YXRlTmFtZSk7XG4gICAgICAgICAgICB2YXIgcmVjb3JkZWRWb2ljZW92ZXJzID0gc3RhdGUucmVjb3JkZWRWb2ljZW92ZXJzO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRJZCA9IHN0YXRlLmNvbnRlbnQuZ2V0Q29udGVudElkKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkZWRWb2ljZW92ZXJzLmdldFZvaWNlb3Zlcihjb250ZW50SWQsIGxhbmd1YWdlQ29kZSk7XG4gICAgICAgIH07XG4gICAgICAgIEV4cGxvcmF0aW9uLnByb3RvdHlwZS5nZXRBbGxWb2ljZW92ZXJzID0gZnVuY3Rpb24gKGxhbmd1YWdlQ29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVzLmdldEFsbFZvaWNlb3ZlcnMobGFuZ3VhZ2VDb2RlKTtcbiAgICAgICAgfTtcbiAgICAgICAgRXhwbG9yYXRpb24ucHJvdG90eXBlLmdldExhbmd1YWdlQ29kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlQ29kZTtcbiAgICAgICAgfTtcbiAgICAgICAgRXhwbG9yYXRpb24ucHJvdG90eXBlLmdldEFsbFZvaWNlb3Zlckxhbmd1YWdlQ29kZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZXMuZ2V0QWxsVm9pY2VvdmVyTGFuZ3VhZ2VDb2RlcygpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBTdGF0aWMgY2xhc3MgbWV0aG9kcy4gTm90ZSB0aGF0IFwidGhpc1wiIGlzIG5vdCBhdmFpbGFibGUgaW5cbiAgICAgICAgLy8gc3RhdGljIGNvbnRleHRzLlxuICAgICAgICAvLyBUT0RPKGFua2l0YTI0MDc5Nik6IFJlbW92ZSB0aGUgYnJhY2tldCBub3RhdGlvbiBvbmNlIEFuZ3VsYXIyIGdldHMgaW4uXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGRvdC1ub3RhdGlvbiAqL1xuICAgICAgICBFeHBsb3JhdGlvblsnY3JlYXRlRnJvbUJhY2tlbmREaWN0J10gPSBmdW5jdGlvbiAoZXhwbG9yYXRpb25CYWNrZW5kRGljdCkge1xuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgICAgIHJldHVybiBuZXcgRXhwbG9yYXRpb24oZXhwbG9yYXRpb25CYWNrZW5kRGljdC5pbml0X3N0YXRlX25hbWUsIFBhcmFtQ2hhbmdlc09iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmRMaXN0KGV4cGxvcmF0aW9uQmFja2VuZERpY3QucGFyYW1fY2hhbmdlcyksIFBhcmFtU3BlY3NPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChleHBsb3JhdGlvbkJhY2tlbmREaWN0LnBhcmFtX3NwZWNzKSwgU3RhdGVzT2JqZWN0RmFjdG9yeS5jcmVhdGVGcm9tQmFja2VuZERpY3QoZXhwbG9yYXRpb25CYWNrZW5kRGljdC5zdGF0ZXMpLCBleHBsb3JhdGlvbkJhY2tlbmREaWN0LnRpdGxlLCBleHBsb3JhdGlvbkJhY2tlbmREaWN0Lmxhbmd1YWdlX2NvZGUpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRXhwbG9yYXRpb247XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgZnJvbnRlbmQgaW5zdGFuY2VzIG9mIEhpbnRcbiAqIGRvbWFpbiBvYmplY3RzLlxuICovXG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnlfMSA9IHJlcXVpcmUoXCJkb21haW4vZXhwbG9yYXRpb24vU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnlcIik7XG52YXIgSGludCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIaW50KGhpbnRDb250ZW50KSB7XG4gICAgICAgIHRoaXMuaGludENvbnRlbnQgPSBoaW50Q29udGVudDtcbiAgICB9XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgcmV0dXJuIHR5cGUgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZFxuICAgIC8vIGtleXMgd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2ZcbiAgICAvLyBjYW1lbENhc2luZy5cbiAgICBIaW50LnByb3RvdHlwZS50b0JhY2tlbmREaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGludF9jb250ZW50OiB0aGlzLmhpbnRDb250ZW50LnRvQmFja2VuZERpY3QoKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIEhpbnQ7XG59KCkpO1xuZXhwb3J0cy5IaW50ID0gSGludDtcbnZhciBIaW50T2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIaW50T2JqZWN0RmFjdG9yeShzdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeSkge1xuICAgICAgICB0aGlzLnN1YnRpdGxlZEh0bWxPYmplY3RGYWN0b3J5ID0gc3VidGl0bGVkSHRtbE9iamVjdEZhY3Rvcnk7XG4gICAgfVxuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgJ2hpbnRCYWNrZW5kRGljdCcgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZFxuICAgIC8vIGtleXMgd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2ZcbiAgICAvLyBjYW1lbENhc2luZy5cbiAgICBIaW50T2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRnJvbUJhY2tlbmREaWN0ID0gZnVuY3Rpb24gKGhpbnRCYWNrZW5kRGljdCkge1xuICAgICAgICByZXR1cm4gbmV3IEhpbnQodGhpcy5zdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeS5jcmVhdGVGcm9tQmFja2VuZERpY3QoaGludEJhY2tlbmREaWN0LmhpbnRfY29udGVudCkpO1xuICAgIH07XG4gICAgSGludE9iamVjdEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZU5ldyA9IGZ1bmN0aW9uIChoaW50Q29udGVudElkLCBoaW50Q29udGVudCkge1xuICAgICAgICByZXR1cm4gbmV3IEhpbnQodGhpcy5zdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeS5jcmVhdGVEZWZhdWx0KGhpbnRDb250ZW50LCBoaW50Q29udGVudElkKSk7XG4gICAgfTtcbiAgICB2YXIgX2E7XG4gICAgSGludE9iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW3R5cGVvZiAoX2EgPSB0eXBlb2YgU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnlfMS5TdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeV8xLlN1YnRpdGxlZEh0bWxPYmplY3RGYWN0b3J5KSA9PT0gXCJmdW5jdGlvblwiID8gX2EgOiBPYmplY3RdKVxuICAgIF0sIEhpbnRPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gSGludE9iamVjdEZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0cy5IaW50T2JqZWN0RmFjdG9yeSA9IEhpbnRPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnSGludE9iamVjdEZhY3RvcnknLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKEhpbnRPYmplY3RGYWN0b3J5KSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2YgSW50ZXJhY3Rpb25cbiAqIGRvbWFpbiBvYmplY3RzLlxuICovXG5yZXF1aXJlKCdkb21haW4vZXhwbG9yYXRpb24vQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5LnRzJyk7XG5yZXF1aXJlKCdkb21haW4vZXhwbG9yYXRpb24vSGludE9iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9leHBsb3JhdGlvbi9PdXRjb21lT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL1NvbHV0aW9uT2JqZWN0RmFjdG9yeS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnSW50ZXJhY3Rpb25PYmplY3RGYWN0b3J5JywgW1xuICAgICdBbnN3ZXJHcm91cE9iamVjdEZhY3RvcnknLCAnSGludE9iamVjdEZhY3RvcnknLCAnT3V0Y29tZU9iamVjdEZhY3RvcnknLFxuICAgICdTb2x1dGlvbk9iamVjdEZhY3RvcnknLFxuICAgIGZ1bmN0aW9uIChBbnN3ZXJHcm91cE9iamVjdEZhY3RvcnksIEhpbnRPYmplY3RGYWN0b3J5LCBPdXRjb21lT2JqZWN0RmFjdG9yeSwgU29sdXRpb25PYmplY3RGYWN0b3J5KSB7XG4gICAgICAgIHZhciBJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uIChhbnN3ZXJHcm91cHMsIGNvbmZpcm1lZFVuY2xhc3NpZmllZEFuc3dlcnMsIGN1c3RvbWl6YXRpb25BcmdzLCBkZWZhdWx0T3V0Y29tZSwgaGludHMsIGlkLCBzb2x1dGlvbikge1xuICAgICAgICAgICAgdGhpcy5hbnN3ZXJHcm91cHMgPSBhbnN3ZXJHcm91cHM7XG4gICAgICAgICAgICB0aGlzLmNvbmZpcm1lZFVuY2xhc3NpZmllZEFuc3dlcnMgPSBjb25maXJtZWRVbmNsYXNzaWZpZWRBbnN3ZXJzO1xuICAgICAgICAgICAgdGhpcy5jdXN0b21pemF0aW9uQXJncyA9IGN1c3RvbWl6YXRpb25BcmdzO1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0T3V0Y29tZSA9IGRlZmF1bHRPdXRjb21lO1xuICAgICAgICAgICAgdGhpcy5oaW50cyA9IGhpbnRzO1xuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5zb2x1dGlvbiA9IHNvbHV0aW9uO1xuICAgICAgICB9O1xuICAgICAgICBJbnRlcmFjdGlvbi5wcm90b3R5cGUuc2V0SWQgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBuZXdWYWx1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgSW50ZXJhY3Rpb24ucHJvdG90eXBlLnNldEFuc3dlckdyb3VwcyA9IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hbnN3ZXJHcm91cHMgPSBuZXdWYWx1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgSW50ZXJhY3Rpb24ucHJvdG90eXBlLnNldERlZmF1bHRPdXRjb21lID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRPdXRjb21lID0gbmV3VmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIEludGVyYWN0aW9uLnByb3RvdHlwZS5zZXRDdXN0b21pemF0aW9uQXJncyA9IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jdXN0b21pemF0aW9uQXJncyA9IG5ld1ZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICBJbnRlcmFjdGlvbi5wcm90b3R5cGUuc2V0U29sdXRpb24gPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc29sdXRpb24gPSBuZXdWYWx1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgSW50ZXJhY3Rpb24ucHJvdG90eXBlLnNldEhpbnRzID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmhpbnRzID0gbmV3VmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIEludGVyYWN0aW9uLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKG90aGVySW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuYW5zd2VyR3JvdXBzID0gYW5ndWxhci5jb3B5KG90aGVySW50ZXJhY3Rpb24uYW5zd2VyR3JvdXBzKTtcbiAgICAgICAgICAgIHRoaXMuY29uZmlybWVkVW5jbGFzc2lmaWVkQW5zd2VycyA9XG4gICAgICAgICAgICAgICAgYW5ndWxhci5jb3B5KG90aGVySW50ZXJhY3Rpb24uY29uZmlybWVkVW5jbGFzc2lmaWVkQW5zd2Vycyk7XG4gICAgICAgICAgICB0aGlzLmN1c3RvbWl6YXRpb25BcmdzID0gYW5ndWxhci5jb3B5KG90aGVySW50ZXJhY3Rpb24uY3VzdG9taXphdGlvbkFyZ3MpO1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0T3V0Y29tZSA9IGFuZ3VsYXIuY29weShvdGhlckludGVyYWN0aW9uLmRlZmF1bHRPdXRjb21lKTtcbiAgICAgICAgICAgIHRoaXMuaGludHMgPSBhbmd1bGFyLmNvcHkob3RoZXJJbnRlcmFjdGlvbi5oaW50cyk7XG4gICAgICAgICAgICB0aGlzLmlkID0gYW5ndWxhci5jb3B5KG90aGVySW50ZXJhY3Rpb24uaWQpO1xuICAgICAgICAgICAgdGhpcy5zb2x1dGlvbiA9IGFuZ3VsYXIuY29weShvdGhlckludGVyYWN0aW9uLnNvbHV0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgSW50ZXJhY3Rpb24ucHJvdG90eXBlLnRvQmFja2VuZERpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFuc3dlcl9ncm91cHM6IHRoaXMuYW5zd2VyR3JvdXBzLm1hcChmdW5jdGlvbiAoYW5zd2VyR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlckdyb3VwLnRvQmFja2VuZERpY3QoKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBjb25maXJtZWRfdW5jbGFzc2lmaWVkX2Fuc3dlcnM6IHRoaXMuY29uZmlybWVkVW5jbGFzc2lmaWVkQW5zd2VycyxcbiAgICAgICAgICAgICAgICBjdXN0b21pemF0aW9uX2FyZ3M6IHRoaXMuY3VzdG9taXphdGlvbkFyZ3MsXG4gICAgICAgICAgICAgICAgZGVmYXVsdF9vdXRjb21lOiB0aGlzLmRlZmF1bHRPdXRjb21lID8gdGhpcy5kZWZhdWx0T3V0Y29tZS50b0JhY2tlbmREaWN0KCkgOiBudWxsLFxuICAgICAgICAgICAgICAgIGhpbnRzOiB0aGlzLmhpbnRzLm1hcChmdW5jdGlvbiAoaGludCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGludC50b0JhY2tlbmREaWN0KCk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICAgICAgc29sdXRpb246IHRoaXMuc29sdXRpb24gPyB0aGlzLnNvbHV0aW9uLnRvQmFja2VuZERpY3QoKSA6IG51bGxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE8oYW5raXRhMjQwNzk2KTogUmVtb3ZlIHRoZSBicmFja2V0IG5vdGF0aW9uIG9uY2UgQW5ndWxhcjIgZ2V0cyBpbi5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgIEludGVyYWN0aW9uWydjcmVhdGVGcm9tQmFja2VuZERpY3QnXSA9IGZ1bmN0aW9uIChpbnRlcmFjdGlvbkRpY3QpIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgICAgICB2YXIgZGVmYXVsdE91dGNvbWU7XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3Rpb25EaWN0LmRlZmF1bHRfb3V0Y29tZSkge1xuICAgICAgICAgICAgICAgIGRlZmF1bHRPdXRjb21lID0gT3V0Y29tZU9iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KGludGVyYWN0aW9uRGljdC5kZWZhdWx0X291dGNvbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdE91dGNvbWUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRlcmFjdGlvbihnZW5lcmF0ZUFuc3dlckdyb3Vwc0Zyb21CYWNrZW5kKGludGVyYWN0aW9uRGljdC5hbnN3ZXJfZ3JvdXBzKSwgaW50ZXJhY3Rpb25EaWN0LmNvbmZpcm1lZF91bmNsYXNzaWZpZWRfYW5zd2VycywgaW50ZXJhY3Rpb25EaWN0LmN1c3RvbWl6YXRpb25fYXJncywgZGVmYXVsdE91dGNvbWUsIGdlbmVyYXRlSGludHNGcm9tQmFja2VuZChpbnRlcmFjdGlvbkRpY3QuaGludHMpLCBpbnRlcmFjdGlvbkRpY3QuaWQsIGludGVyYWN0aW9uRGljdC5zb2x1dGlvbiA/IChnZW5lcmF0ZVNvbHV0aW9uRnJvbUJhY2tlbmQoaW50ZXJhY3Rpb25EaWN0LnNvbHV0aW9uKSkgOiBudWxsKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdlbmVyYXRlQW5zd2VyR3JvdXBzRnJvbUJhY2tlbmQgPSBmdW5jdGlvbiAoYW5zd2VyR3JvdXBCYWNrZW5kRGljdHMpIHtcbiAgICAgICAgICAgIHJldHVybiBhbnN3ZXJHcm91cEJhY2tlbmREaWN0cy5tYXAoZnVuY3Rpb24gKGFuc3dlckdyb3VwQmFja2VuZERpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChhbnN3ZXJHcm91cEJhY2tlbmREaWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZ2VuZXJhdGVIaW50c0Zyb21CYWNrZW5kID0gZnVuY3Rpb24gKGhpbnRCYWNrZW5kRGljdHMpIHtcbiAgICAgICAgICAgIHJldHVybiBoaW50QmFja2VuZERpY3RzLm1hcChmdW5jdGlvbiAoaGludEJhY2tlbmREaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEhpbnRPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChoaW50QmFja2VuZERpY3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZW5lcmF0ZVNvbHV0aW9uRnJvbUJhY2tlbmQgPSBmdW5jdGlvbiAoc29sdXRpb25CYWNrZW5kRGljdCkge1xuICAgICAgICAgICAgcmV0dXJuIFNvbHV0aW9uT2JqZWN0RmFjdG9yeS5jcmVhdGVGcm9tQmFja2VuZERpY3Qoc29sdXRpb25CYWNrZW5kRGljdCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBJbnRlcmFjdGlvbjtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE1IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2YgT3V0Y29tZVxuICogZG9tYWluIG9iamVjdHMuXG4gKi9cbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBTdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeV8xID0gcmVxdWlyZShcImRvbWFpbi9leHBsb3JhdGlvbi9TdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeVwiKTtcbnZhciBPdXRjb21lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE91dGNvbWUoZGVzdCwgZmVlZGJhY2ssIGxhYmVsbGVkQXNDb3JyZWN0LCBwYXJhbUNoYW5nZXMsIHJlZnJlc2hlckV4cGxvcmF0aW9uSWQsIG1pc3NpbmdQcmVyZXF1aXNpdGVTa2lsbElkKSB7XG4gICAgICAgIHRoaXMuZGVzdCA9IGRlc3Q7XG4gICAgICAgIHRoaXMuZmVlZGJhY2sgPSBmZWVkYmFjaztcbiAgICAgICAgdGhpcy5sYWJlbGxlZEFzQ29ycmVjdCA9IGxhYmVsbGVkQXNDb3JyZWN0O1xuICAgICAgICB0aGlzLnBhcmFtQ2hhbmdlcyA9IHBhcmFtQ2hhbmdlcztcbiAgICAgICAgdGhpcy5yZWZyZXNoZXJFeHBsb3JhdGlvbklkID0gcmVmcmVzaGVyRXhwbG9yYXRpb25JZDtcbiAgICAgICAgdGhpcy5taXNzaW5nUHJlcmVxdWlzaXRlU2tpbGxJZCA9IG1pc3NpbmdQcmVyZXF1aXNpdGVTa2lsbElkO1xuICAgIH1cbiAgICBPdXRjb21lLnByb3RvdHlwZS5zZXREZXN0aW5hdGlvbiA9IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3QgPSBuZXdWYWx1ZTtcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgdGhlIHJldHVybiB0eXBlIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWQga2V5c1xuICAgIC8vIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mIGNhbWVsQ2FzaW5nLlxuICAgIE91dGNvbWUucHJvdG90eXBlLnRvQmFja2VuZERpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZXN0OiB0aGlzLmRlc3QsXG4gICAgICAgICAgICBmZWVkYmFjazogdGhpcy5mZWVkYmFjay50b0JhY2tlbmREaWN0KCksXG4gICAgICAgICAgICBsYWJlbGxlZF9hc19jb3JyZWN0OiB0aGlzLmxhYmVsbGVkQXNDb3JyZWN0LFxuICAgICAgICAgICAgcGFyYW1fY2hhbmdlczogdGhpcy5wYXJhbUNoYW5nZXMsXG4gICAgICAgICAgICByZWZyZXNoZXJfZXhwbG9yYXRpb25faWQ6IHRoaXMucmVmcmVzaGVyRXhwbG9yYXRpb25JZCxcbiAgICAgICAgICAgIG1pc3NpbmdfcHJlcmVxdWlzaXRlX3NraWxsX2lkOiB0aGlzLm1pc3NpbmdQcmVyZXF1aXNpdGVTa2lsbElkXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBPdXRjb21lLnByb3RvdHlwZS5oYXNOb25lbXB0eUZlZWRiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mZWVkYmFjay5nZXRIdG1sKCkudHJpbSgpICE9PSAnJztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZmYgYW4gb3V0Y29tZSBoYXMgYSBzZWxmLWxvb3AsIG5vIGZlZWRiYWNrLCBhbmQgbm9cbiAgICAgKiByZWZyZXNoZXIgZXhwbG9yYXRpb24uXG4gICAgICovXG4gICAgT3V0Y29tZS5wcm90b3R5cGUuaXNDb25mdXNpbmcgPSBmdW5jdGlvbiAoY3VycmVudFN0YXRlTmFtZSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuZGVzdCA9PT0gY3VycmVudFN0YXRlTmFtZSAmJlxuICAgICAgICAgICAgIXRoaXMuaGFzTm9uZW1wdHlGZWVkYmFjaygpICYmXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hlckV4cGxvcmF0aW9uSWQgPT09IG51bGwpO1xuICAgIH07XG4gICAgcmV0dXJuIE91dGNvbWU7XG59KCkpO1xuZXhwb3J0cy5PdXRjb21lID0gT3V0Y29tZTtcbnZhciBPdXRjb21lT2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPdXRjb21lT2JqZWN0RmFjdG9yeShzdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeSkge1xuICAgICAgICB0aGlzLnN1YnRpdGxlZEh0bWxPYmplY3RGYWN0b3J5ID0gc3VidGl0bGVkSHRtbE9iamVjdEZhY3Rvcnk7XG4gICAgfVxuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgdGhlIHJldHVybiB0eXBlIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWQga2V5c1xuICAgIC8vIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mIGNhbWVsQ2FzaW5nLlxuICAgIE91dGNvbWVPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVOZXcgPSBmdW5jdGlvbiAoZGVzdCwgZmVlZGJhY2tUZXh0SWQsIGZlZWRiYWNrVGV4dCwgcGFyYW1DaGFuZ2VzKSB7XG4gICAgICAgIHJldHVybiBuZXcgT3V0Y29tZShkZXN0LCB0aGlzLnN1YnRpdGxlZEh0bWxPYmplY3RGYWN0b3J5LmNyZWF0ZURlZmF1bHQoZmVlZGJhY2tUZXh0LCBmZWVkYmFja1RleHRJZCksIGZhbHNlLCBwYXJhbUNoYW5nZXMsIG51bGwsIG51bGwpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnb3V0Y29tZURpY3QnIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWQga2V5c1xuICAgIC8vIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mIGNhbWVsQ2FzaW5nLlxuICAgIE91dGNvbWVPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tQmFja2VuZERpY3QgPSBmdW5jdGlvbiAob3V0Y29tZURpY3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPdXRjb21lKG91dGNvbWVEaWN0LmRlc3QsIHRoaXMuc3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KG91dGNvbWVEaWN0LmZlZWRiYWNrKSwgb3V0Y29tZURpY3QubGFiZWxsZWRfYXNfY29ycmVjdCwgb3V0Y29tZURpY3QucGFyYW1fY2hhbmdlcywgb3V0Y29tZURpY3QucmVmcmVzaGVyX2V4cGxvcmF0aW9uX2lkLCBvdXRjb21lRGljdC5taXNzaW5nX3ByZXJlcXVpc2l0ZV9za2lsbF9pZCk7XG4gICAgfTtcbiAgICB2YXIgX2E7XG4gICAgT3V0Y29tZU9iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW3R5cGVvZiAoX2EgPSB0eXBlb2YgU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnlfMS5TdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeV8xLlN1YnRpdGxlZEh0bWxPYmplY3RGYWN0b3J5KSA9PT0gXCJmdW5jdGlvblwiID8gX2EgOiBPYmplY3RdKVxuICAgIF0sIE91dGNvbWVPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gT3V0Y29tZU9iamVjdEZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0cy5PdXRjb21lT2JqZWN0RmFjdG9yeSA9IE91dGNvbWVPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnT3V0Y29tZU9iamVjdEZhY3RvcnknLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKE91dGNvbWVPYmplY3RGYWN0b3J5KSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2YgUGFyYW1DaGFuZ2VcbiAqIGRvbWFpbiBvYmplY3RzLlxuICovXG52YXIgY2xvbmVEZWVwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC9jbG9uZURlZXBcIikpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIERFRkFVTFRfQ1VTVE9NSVpBVElPTl9BUkdTID0ge1xuICAgIENvcGllcjoge1xuICAgICAgICBwYXJzZV93aXRoX2ppbmphOiB0cnVlLFxuICAgICAgICB2YWx1ZTogJzUnXG4gICAgfSxcbiAgICBSYW5kb21TZWxlY3Rvcjoge1xuICAgICAgICBsaXN0X29mX3ZhbHVlczogWydzYW1wbGUgdmFsdWUnXVxuICAgIH1cbn07XG52YXIgUGFyYW1DaGFuZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGFyYW1DaGFuZ2UoY3VzdG9taXphdGlvbkFyZ3MsIGdlbmVyYXRvcklkLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuY3VzdG9taXphdGlvbkFyZ3MgPSBjdXN0b21pemF0aW9uQXJncztcbiAgICAgICAgdGhpcy5nZW5lcmF0b3JJZCA9IGdlbmVyYXRvcklkO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICAvLyBUT0RPKCM3MTc2KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlIHRoZSByZXR1cm4gdHlwZSBpcyBhIGRpY3Qgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkIGtleXMgd2hpY2hcbiAgICAvLyBnaXZlIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZiBjYW1lbENhc2luZy5cbiAgICBQYXJhbUNoYW5nZS5wcm90b3R5cGUudG9CYWNrZW5kRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN1c3RvbWl6YXRpb25fYXJnczogdGhpcy5jdXN0b21pemF0aW9uQXJncyxcbiAgICAgICAgICAgIGdlbmVyYXRvcl9pZDogdGhpcy5nZW5lcmF0b3JJZCxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZVxuICAgICAgICB9O1xuICAgIH07XG4gICAgUGFyYW1DaGFuZ2UucHJvdG90eXBlLnJlc2V0Q3VzdG9taXphdGlvbkFyZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3VzdG9taXphdGlvbkFyZ3MgPSBjbG9uZURlZXBfMS5kZWZhdWx0KERFRkFVTFRfQ1VTVE9NSVpBVElPTl9BUkdTW3RoaXMuZ2VuZXJhdG9ySWRdKTtcbiAgICB9O1xuICAgIHJldHVybiBQYXJhbUNoYW5nZTtcbn0oKSk7XG5leHBvcnRzLlBhcmFtQ2hhbmdlID0gUGFyYW1DaGFuZ2U7XG52YXIgUGFyYW1DaGFuZ2VPYmplY3RGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeSgpIHtcbiAgICB9XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAncGFyYW1DaGFuZ2VCYWNrZW5kRGljdCcgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZCBrZXlzXG4gICAgLy8gd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2YgY2FtZWxDYXNpbmcuXG4gICAgUGFyYW1DaGFuZ2VPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tQmFja2VuZERpY3QgPSBmdW5jdGlvbiAocGFyYW1DaGFuZ2VCYWNrZW5kRGljdCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhcmFtQ2hhbmdlKHBhcmFtQ2hhbmdlQmFja2VuZERpY3QuY3VzdG9taXphdGlvbl9hcmdzLCBwYXJhbUNoYW5nZUJhY2tlbmREaWN0LmdlbmVyYXRvcl9pZCwgcGFyYW1DaGFuZ2VCYWNrZW5kRGljdC5uYW1lKTtcbiAgICB9O1xuICAgIFBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRW1wdHkgPSBmdW5jdGlvbiAocGFyYW1OYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFyYW1DaGFuZ2Uoe1xuICAgICAgICAgICAgcGFyc2Vfd2l0aF9qaW5qYTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnJ1xuICAgICAgICB9LCAnQ29waWVyJywgcGFyYW1OYW1lKTtcbiAgICB9O1xuICAgIFBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRGVmYXVsdCA9IGZ1bmN0aW9uIChwYXJhbU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJhbUNoYW5nZShjbG9uZURlZXBfMS5kZWZhdWx0KERFRkFVTFRfQ1VTVE9NSVpBVElPTl9BUkdTLkNvcGllciksICdDb3BpZXInLCBwYXJhbU5hbWUpO1xuICAgIH07XG4gICAgUGFyYW1DaGFuZ2VPYmplY3RGYWN0b3J5ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KVxuICAgIF0sIFBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeSk7XG4gICAgcmV0dXJuIFBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLlBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeSA9IFBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1BhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoUGFyYW1DaGFuZ2VPYmplY3RGYWN0b3J5KSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgZnJvbnRlbmQgYXJyYXlzIG9mIFBhcmFtQ2hhbmdlXG4gKiBkb21haW4gb2JqZWN0cy5cbiAqL1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIFBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeV90c18xID0gcmVxdWlyZShcImRvbWFpbi9leHBsb3JhdGlvbi9QYXJhbUNoYW5nZU9iamVjdEZhY3RvcnkudHNcIik7XG52YXIgUGFyYW1DaGFuZ2VzT2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYXJhbUNoYW5nZXNPYmplY3RGYWN0b3J5KHBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeSkge1xuICAgICAgICB0aGlzLnBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeSA9IHBhcmFtQ2hhbmdlT2JqZWN0RmFjdG9yeTtcbiAgICB9XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAncGFyYW1DaGFuZ2VCYWNrZW5kTGlzdCcgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZCBrZXlzXG4gICAgLy8gd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2YgY2FtZWxDYXNpbmcuXG4gICAgUGFyYW1DaGFuZ2VzT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRnJvbUJhY2tlbmRMaXN0ID0gZnVuY3Rpb24gKHBhcmFtQ2hhbmdlQmFja2VuZExpc3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHBhcmFtQ2hhbmdlQmFja2VuZExpc3QubWFwKGZ1bmN0aW9uIChwYXJhbUNoYW5nZUJhY2tlbmREaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucGFyYW1DaGFuZ2VPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChwYXJhbUNoYW5nZUJhY2tlbmREaWN0KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgX2E7XG4gICAgUGFyYW1DaGFuZ2VzT2JqZWN0RmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBQYXJhbUNoYW5nZU9iamVjdEZhY3RvcnlfdHNfMS5QYXJhbUNoYW5nZU9iamVjdEZhY3RvcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgUGFyYW1DaGFuZ2VPYmplY3RGYWN0b3J5X3RzXzEuUGFyYW1DaGFuZ2VPYmplY3RGYWN0b3J5KSA9PT0gXCJmdW5jdGlvblwiID8gX2EgOiBPYmplY3RdKVxuICAgIF0sIFBhcmFtQ2hhbmdlc09iamVjdEZhY3RvcnkpO1xuICAgIHJldHVybiBQYXJhbUNoYW5nZXNPYmplY3RGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuUGFyYW1DaGFuZ2VzT2JqZWN0RmFjdG9yeSA9IFBhcmFtQ2hhbmdlc09iamVjdEZhY3Rvcnk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdQYXJhbUNoYW5nZXNPYmplY3RGYWN0b3J5Jywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShQYXJhbUNoYW5nZXNPYmplY3RGYWN0b3J5KSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgZnJvbnRlbmQgaW5zdGFuY2VzIG9mIFBhcmFtU3BlY1xuICogZG9tYWluIG9iamVjdHMuXG4gKi9cbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBQYXJhbVR5cGVPYmplY3RGYWN0b3J5XzEgPSByZXF1aXJlKFwiZG9tYWluL2V4cGxvcmF0aW9uL1BhcmFtVHlwZU9iamVjdEZhY3RvcnlcIik7XG52YXIgUGFyYW1TcGVjID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7IVBhcmFtVHlwZX0gb2JqVHlwZSAtIFRoZSB0eXBlIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gUGFyYW1TcGVjKG9ialR5cGUpIHtcbiAgICAgICAgLyoqIEBtZW1iZXIge1BhcmFtVHlwZX0gKi9cbiAgICAgICAgdGhpcy5fb2JqVHlwZSA9IG9ialR5cGU7XG4gICAgfVxuICAgIC8qKiBAcmV0dXJucyB7UGFyYW1UeXBlfSAtIFRoZSB0eXBlIG5hbWUgb2YgdGhlIHBhcmFtZXRlci4gKi9cbiAgICBQYXJhbVNwZWMucHJvdG90eXBlLmdldFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vYmpUeXBlO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgcmV0dXJuIHR5cGUgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZFxuICAgIC8vIGtleXMgd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2ZcbiAgICAvLyBjYW1lbENhc2luZy5cbiAgICAvKiogQHJldHVybnMge3tvYmpfdHlwZTogU3RyaW5nfX0gLSBCYXNpYyBkaWN0IGZvciBiYWNrZW5kIGNvbnN1bXB0aW9uLiAqL1xuICAgIFBhcmFtU3BlYy5wcm90b3R5cGUudG9CYWNrZW5kRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9ial90eXBlOiB0aGlzLl9vYmpUeXBlLmdldE5hbWUoKSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBQYXJhbVNwZWM7XG59KCkpO1xuZXhwb3J0cy5QYXJhbVNwZWMgPSBQYXJhbVNwZWM7XG52YXIgUGFyYW1TcGVjT2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYXJhbVNwZWNPYmplY3RGYWN0b3J5KHBhcmFtVHlwZU9iamVjdEZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5wYXJhbVR5cGVPYmplY3RGYWN0b3J5ID0gcGFyYW1UeXBlT2JqZWN0RmFjdG9yeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHshe29ial90eXBlOiBTdHJpbmd9fSBwYXJhbVNwZWNCYWNrZW5kRGljdCAtIEJhc2ljIGRpY3QgZnJvbVxuICAgICAqICAgIGJhY2tlbmQuXG4gICAgICogQHJldHVybnMge1BhcmFtU3BlY30gLSBBIG5ldyBQYXJhbVNwZWMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAncGFyYW1TcGVjQmFja2VuZERpY3QnIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWRcbiAgICAvLyBrZXlzIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mXG4gICAgLy8gY2FtZWxDYXNpbmcuXG4gICAgUGFyYW1TcGVjT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRnJvbUJhY2tlbmREaWN0ID0gZnVuY3Rpb24gKHBhcmFtU3BlY0JhY2tlbmREaWN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFyYW1TcGVjKHRoaXMucGFyYW1UeXBlT2JqZWN0RmFjdG9yeS5nZXRUeXBlRnJvbUJhY2tlbmROYW1lKHBhcmFtU3BlY0JhY2tlbmREaWN0Lm9ial90eXBlKSk7XG4gICAgfTtcbiAgICAvKiogQHJldHVybnMge1BhcmFtU3BlY30gLSBBIGRlZmF1bHQgaW5zdGFuY2UgZm9yIFBhcmFtU3BlYy4gKi9cbiAgICBQYXJhbVNwZWNPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVEZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBhcmFtU3BlYyh0aGlzLnBhcmFtVHlwZU9iamVjdEZhY3RvcnkuZ2V0RGVmYXVsdFR5cGUoKSk7XG4gICAgfTtcbiAgICB2YXIgX2E7XG4gICAgUGFyYW1TcGVjT2JqZWN0RmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBQYXJhbVR5cGVPYmplY3RGYWN0b3J5XzEuUGFyYW1UeXBlT2JqZWN0RmFjdG9yeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBQYXJhbVR5cGVPYmplY3RGYWN0b3J5XzEuUGFyYW1UeXBlT2JqZWN0RmFjdG9yeSkgPT09IFwiZnVuY3Rpb25cIiA/IF9hIDogT2JqZWN0XSlcbiAgICBdLCBQYXJhbVNwZWNPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gUGFyYW1TcGVjT2JqZWN0RmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLlBhcmFtU3BlY09iamVjdEZhY3RvcnkgPSBQYXJhbVNwZWNPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnUGFyYW1TcGVjT2JqZWN0RmFjdG9yeScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoUGFyYW1TcGVjT2JqZWN0RmFjdG9yeSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTcgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGZyb250ZW5kIGluc3RhbmNlcyBvZiBQYXJhbVNwZWNzXG4gKiBkb21haW4gb2JqZWN0cy4gUGFyYW1TcGVjcyBtYXAgcGFyYW1ldGVyIG5hbWVzIHRvIHRoZSBzcGVjaWZpY2F0aW9uc1xuICogd2hpY2ggZGVmaW5lcyB0aGVtIChyZXByZXNlbnRlZCBhcyBQYXJhbVNwZWMgb2JqZWN0cykuXG4gKi9cbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBQYXJhbVNwZWNPYmplY3RGYWN0b3J5XzEgPSByZXF1aXJlKFwiZG9tYWluL2V4cGxvcmF0aW9uL1BhcmFtU3BlY09iamVjdEZhY3RvcnlcIik7XG52YXIgUGFyYW1TcGVjcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdC48U3RyaW5nLCBQYXJhbVNwZWM+fSBwYXJhbURpY3QgLSBwYXJhbXMgYW5kIHRoZWlyIHNwZWNzXG4gICAgICogICAgZm9yIHRoaXMgb2JqZWN0IHdpbGwgaG9sZC5cbiAgICAgKi9cbiAgICAvLyBUT0RPKCM3MTY1KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlICdwYXJhbURpY3QnIGlzIGluaXRpYWxpemVkIGFzICd7fScgYW5kIHRoYXQgZG9lcyBub3QgbWF0Y2hcbiAgICAvLyB3aXRoIHRoZSBhY3R1YWwgdHlwZSBvZiAncGFyYW1EaWN0Jy5cbiAgICBmdW5jdGlvbiBQYXJhbVNwZWNzKHBhcmFtRGljdCwgcGFyYW1TcGVjT2JqZWN0RmFjdG9yeSkge1xuICAgICAgICAvKiogQG1lbWJlciB7T2JqZWN0LjxTdHJpbmcsIFBhcmFtU3BlYz59ICovXG4gICAgICAgIHRoaXMuX3BhcmFtRGljdCA9IHBhcmFtRGljdDtcbiAgICAgICAgdGhpcy5fcGFyYW1TcGVjT2JqZWN0RmFjdG9yeSA9IHBhcmFtU3BlY09iamVjdEZhY3Rvcnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbU5hbWUgLSBUaGUgcGFyYW1ldGVyIHRvIGZldGNoLlxuICAgICAqIEByZXR1cm5zIHtQYXJhbVNwZWN9IC0gYXNzb2NpYXRlZCB0byBnaXZlbiBwYXJhbWV0ZXIgbmFtZS5cbiAgICAgKi9cbiAgICBQYXJhbVNwZWNzLnByb3RvdHlwZS5nZXRQYXJhbVNwZWMgPSBmdW5jdGlvbiAocGFyYW1OYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJhbURpY3RbcGFyYW1OYW1lXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPFN0cmluZywgUGFyYW1TcGVjPn0gLSB0aGUgbWFwIG9mIHBhcmFtcyB0byB0aGVpciBzcGVjcy5cbiAgICAgKi9cbiAgICAvLyBUT0RPKCM3MTY1KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlICdfcGFyYW1EaWN0JyBpcyBpbml0aWFsaXplZCBhcyAne30nIGFuZCB0aGF0IGRvZXMgbm90IG1hdGNoXG4gICAgLy8gd2l0aCB0aGUgYWN0dWFsIHR5cGUgb2YgJ3BhcmFtRGljdCcuXG4gICAgUGFyYW1TcGVjcy5wcm90b3R5cGUuZ2V0UGFyYW1EaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyYW1EaWN0O1xuICAgIH07XG4gICAgLyoqIEByZXR1cm5zIHtBcnJheS48U3RyaW5nPn0gLSBUaGUgbmFtZXMgb2YgdGhlIGN1cnJlbnQgcGFyYW1ldGVyIHNwZWNzLiAqL1xuICAgIFBhcmFtU3BlY3MucHJvdG90eXBlLmdldFBhcmFtTmFtZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9wYXJhbURpY3QpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBwYXJhbWV0ZXIgb25seSBpZiBpdCBkaWRuJ3QgZXhpc3QgYWxyZWFkeS4gRG9lcyBub3RoaW5nXG4gICAgICogb3RoZXJ3aXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshU3RyaW5nfSBwYXJhbU5hbWUgLSBUaGUgcGFyYW1ldGVyIHRvIGFkZCBhIHNwZWMgZm9yLlxuICAgICAqIEBwYXJhbSB7UGFyYW1TcGVjPX0gcGFyYW1TcGVjIC0gVGhlIHNwZWNpZmljYXRpb24gb2YgdGhlIHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBUcnVlIHdoZW4gdGhlIHBhcmFtZXRlciB3YXMgbmV3bHkgYWRkZWQuXG4gICAgICovXG4gICAgUGFyYW1TcGVjcy5wcm90b3R5cGUuYWRkUGFyYW1JZk5ldyA9IGZ1bmN0aW9uIChwYXJhbU5hbWUsIHBhcmFtU3BlYykge1xuICAgICAgICBpZiAoIXRoaXMuX3BhcmFtRGljdC5oYXNPd25Qcm9wZXJ0eShwYXJhbU5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJhbURpY3RbcGFyYW1OYW1lXSA9XG4gICAgICAgICAgICAgICAgcGFyYW1TcGVjIHx8IHRoaXMuX3BhcmFtU3BlY09iamVjdEZhY3RvcnkuY3JlYXRlRGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGNhbGxiYWNrIGNhbGxiYWNrIC0gSXMgcGFzc2VkIHRoZSBuYW1lIGFuZCBjb3JyZXNwb25kaW5nIFBhcmFtU3BlYyBvZlxuICAgICAqICAgIGVhY2ggcGFyYW1ldGVyIGluIHRoZSBzcGVjcy5cbiAgICAgKi9cbiAgICAvLyBUT0RPKCM3MTY1KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlICdjYWxsYmFjaycgaXMgYSBtZXRob2QgY2FuIHZhcnkuIEEgZGVmaW5pdGUgdHlwZSBuZWVkcyB0b1xuICAgIC8vIGJlIGZvdW5kIGFuZCBhc3NpZ25lZC5cbiAgICBQYXJhbVNwZWNzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdGhpcy5nZXRQYXJhbU5hbWVzKCkuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1OYW1lKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhwYXJhbU5hbWUsIHRoYXQuZ2V0UGFyYW1TcGVjKHBhcmFtTmFtZSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPFN0cmluZywge29ial90eXBlOiBTdHJpbmd9Pn0gLSBCYXNpYyBkaWN0IGZvciBiYWNrZW5kXG4gICAgICogICAgY29uc3VtcHRpb24uXG4gICAgICovXG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAncGFyYW1TcGVjc0JhY2tlbmREaWN0JyBpcyBpbml0aWFsaXplZCBhcyAne30nIGFuZCB0aGF0IGRvZXNcbiAgICAvLyBub3QgbWF0Y2ggd2l0aCB0aGUgYWN0dWFsIHR5cGUgb2YgJ3BhcmFtRGljdCcuXG4gICAgUGFyYW1TcGVjcy5wcm90b3R5cGUudG9CYWNrZW5kRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcmFtU3BlY3NCYWNrZW5kRGljdCA9IHt9O1xuICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtTmFtZSwgcGFyYW1TcGVjKSB7XG4gICAgICAgICAgICBwYXJhbVNwZWNzQmFja2VuZERpY3RbcGFyYW1OYW1lXSA9IHBhcmFtU3BlYy50b0JhY2tlbmREaWN0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyYW1TcGVjc0JhY2tlbmREaWN0O1xuICAgIH07XG4gICAgcmV0dXJuIFBhcmFtU3BlY3M7XG59KCkpO1xuZXhwb3J0cy5QYXJhbVNwZWNzID0gUGFyYW1TcGVjcztcbnZhciBQYXJhbVNwZWNzT2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYXJhbVNwZWNzT2JqZWN0RmFjdG9yeShwYXJhbVNwZWNPYmplY3RGYWN0b3J5KSB7XG4gICAgICAgIHRoaXMucGFyYW1TcGVjT2JqZWN0RmFjdG9yeSA9IHBhcmFtU3BlY09iamVjdEZhY3Rvcnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7IU9iamVjdC48U3RyaW5nLCB7b2JqX3R5cGU6IFN0cmluZ30+fSBwYXJhbVNwZWNzQmFja2VuZERpY3QgLVxuICAgICAqICAgIEJhc2ljIGRpY3Qgb2YgYmFja2VuZCByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7UGFyYW1TcGVjc30gLSBBbiBpbnN0YW5jZSB3aXRoIHByb3BlcnRpZXMgZnJvbSB0aGUgYmFja2VuZFxuICAgICAqICAgIGRpY3QuXG4gICAgICovXG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAncGFyYW1TcGVjc0JhY2tlbmREaWN0JyBpcyBhIGRpY3Qgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkIGtleXNcbiAgICAvLyB3aGljaCBnaXZlIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZiBjYW1lbENhc2luZy5cbiAgICBQYXJhbVNwZWNzT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRnJvbUJhY2tlbmREaWN0ID0gZnVuY3Rpb24gKHBhcmFtU3BlY3NCYWNrZW5kRGljdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcGFyYW1EaWN0ID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHBhcmFtU3BlY3NCYWNrZW5kRGljdCkuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1OYW1lKSB7XG4gICAgICAgICAgICBwYXJhbURpY3RbcGFyYW1OYW1lXSA9IF90aGlzLnBhcmFtU3BlY09iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KHBhcmFtU3BlY3NCYWNrZW5kRGljdFtwYXJhbU5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgUGFyYW1TcGVjcyhwYXJhbURpY3QsIHRoaXMucGFyYW1TcGVjT2JqZWN0RmFjdG9yeSk7XG4gICAgfTtcbiAgICB2YXIgX2E7XG4gICAgUGFyYW1TcGVjc09iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW3R5cGVvZiAoX2EgPSB0eXBlb2YgUGFyYW1TcGVjT2JqZWN0RmFjdG9yeV8xLlBhcmFtU3BlY09iamVjdEZhY3RvcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgUGFyYW1TcGVjT2JqZWN0RmFjdG9yeV8xLlBhcmFtU3BlY09iamVjdEZhY3RvcnkpID09PSBcImZ1bmN0aW9uXCIgPyBfYSA6IE9iamVjdF0pXG4gICAgXSwgUGFyYW1TcGVjc09iamVjdEZhY3RvcnkpO1xuICAgIHJldHVybiBQYXJhbVNwZWNzT2JqZWN0RmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLlBhcmFtU3BlY3NPYmplY3RGYWN0b3J5ID0gUGFyYW1TcGVjc09iamVjdEZhY3Rvcnk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdQYXJhbVNwZWNzT2JqZWN0RmFjdG9yeScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoUGFyYW1TcGVjc09iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2YgUGFyYW1UeXBlXG4gKiBkb21haW4gb2JqZWN0cy5cbiAqL1xudmFyIGNsb25lRGVlcF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvY2xvbmVEZWVwXCIpKTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBQYXJhbVR5cGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGUgQGNvbnN0cnVjdG9yXG4gICAgICogRGVmaW5lcyBhIHNwZWNpZmljIHR5cGUgdGhhdCBhIHBhcmFtZXRlciBjYW4gdGFrZS5cbiAgICAgKlxuICAgICAqIElNUE9SVEFOVDogQWxsIG5ldyB0eXBlcyBtdXN0IGJlIGNyZWF0ZWQgaW4gdGhpcyBmaWxlIGFuZCByZWdpc3RlcmVkIGluIHRoZVxuICAgICAqIHtAbGluayBQYXJhbVR5cGUucmVnaXN0cnl9LiBTZWUge0BsaW5rIFBhcmFtVHlwZS5yZWdpc3RyeS5Vbmljb2RlU3RyaW5nfVxuICAgICAqIGZvciBhbiBleGFtcGxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbi48PywgQm9vbGVhbj59IHZhbGlkYXRlRnVuY3Rpb24gLSBSZXR1cm5zIHRydWUgd2hlbiBhIHZhbHVlXG4gICAgICogICAgaXMgdmFsaWQuXG4gICAgICogQHBhcmFtIHs/fSBkZWZhdWx0VmFsdWUgLSBzaW1wbGUgdmFsdWUgYW55IHBhcmFtZXRlciBvZiB0aGlzIHR5cGUgY2FuIHRha2UuXG4gICAgICovXG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAndHlwZURlZmluaXRpb25PYmplY3QnIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWQga2V5c1xuICAgIC8vIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mIGNhbWVsQ2FzaW5nLlxuICAgIGZ1bmN0aW9uIFBhcmFtVHlwZSh0eXBlRGVmaW5pdGlvbk9iamVjdCkge1xuICAgICAgICBpZiAoIXR5cGVEZWZpbml0aW9uT2JqZWN0LnZhbGlkYXRlKHR5cGVEZWZpbml0aW9uT2JqZWN0LmRlZmF1bHRfdmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBkZWZhdWx0IHZhbHVlIGlzIGludmFsaWQgYWNjb3JkaW5nIHRvIHZhbGlkYXRpb24gZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICAvKiogQG1lbWJlciB7U3RyaW5nfSAqL1xuICAgICAgICB0aGlzLl9uYW1lID0gbnVsbDtcbiAgICAgICAgLyoqIEBtZW1iZXIge0Z1bmN0aW9uLjw/LCBCb29sZWFuPn0gKi9cbiAgICAgICAgdGhpcy52YWx1ZUlzVmFsaWQgPSB0eXBlRGVmaW5pdGlvbk9iamVjdC52YWxpZGF0ZTtcbiAgICAgICAgLyoqIEBtZW1iZXIgez99ICovXG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gdHlwZURlZmluaXRpb25PYmplY3QuZGVmYXVsdF92YWx1ZTtcbiAgICB9XG4gICAgLyoqIEByZXR1cm5zIHs/fSAtIEEgdmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIHR5cGUuICovXG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgcmV0dXJuIHR5cGUgY2FuIGJlIGJlIG9mIGFueSB0eXBlLlxuICAgIFBhcmFtVHlwZS5wcm90b3R5cGUuY3JlYXRlRGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2xvbmVEZWVwXzEuZGVmYXVsdCh0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgfTtcbiAgICAvKiogQHJldHVybnMge1N0cmluZ30gLSBUaGUgZGlzcGxheS1uYW1lIG9mIHRoaXMgdHlwZS4gKi9cbiAgICBQYXJhbVR5cGUucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH07XG4gICAgcmV0dXJuIFBhcmFtVHlwZTtcbn0oKSk7XG5leHBvcnRzLlBhcmFtVHlwZSA9IFBhcmFtVHlwZTtcbnZhciBQYXJhbVR5cGVPYmplY3RGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhcmFtVHlwZU9iamVjdEZhY3RvcnkoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIFR5cGUgcmVnaXN0cmF0aW9uLlxuICAgICAgICAvKiogQHR5cGUge09iamVjdC48U3RyaW5nLCBQYXJhbVR5cGU+fSAqL1xuICAgICAgICB0aGlzLnJlZ2lzdHJ5ID0ge1xuICAgICAgICAgICAgVW5pY29kZVN0cmluZzogbmV3IFBhcmFtVHlwZSh7XG4gICAgICAgICAgICAgICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlblxuICAgICAgICAgICAgICAgIC8vIGtlcHQgYXMgJ2FueScgYmVjYXVzZSB0aGUgcmV0dXJuIHR5cGUgY2FuIGJlIGJlIG9mIGFueSB0eXBlLlxuICAgICAgICAgICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlZmF1bHRfdmFsdWU6ICcnXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICAvLyBUbyBmaW5hbGl6ZSB0eXBlIHJlZ2lzdHJhdGlvbiwgd2UgZW5jb2RlIHRoZSBuYW1lIG9mIGVhY2ggdHlwZSBpbnRvIHRoZWlyXG4gICAgICAgIC8vIGRlZmluaXRpb24sIHRoZW4gZnJlZXplIHRoZW0gZnJvbSBtb2RpZmljYXRpb25zLlxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnJlZ2lzdHJ5KS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbVR5cGVOYW1lKSB7XG4gICAgICAgICAgICAvLyBUaGUgYnJhY2tldCBub3RhdGlvbiBpcyBuZWVkZWQgc2luY2UgJ3BhcmFtVHlwZU5hbWUnIGlzIGEgZHluYW1pY1xuICAgICAgICAgICAgLy8gcHJvcGVydHkgYW5kIGlzIG5vdCBkZWZpbmVkIG9uICdyZWdpc3RyeScuXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgICAgIHZhciBwYXJhbVR5cGUgPSBfdGhpcy5yZWdpc3RyeVtwYXJhbVR5cGVOYW1lXTtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgICAgICBwYXJhbVR5cGUuX25hbWUgPSBwYXJhbVR5cGVOYW1lO1xuICAgICAgICAgICAgT2JqZWN0LmZyZWV6ZShwYXJhbVR5cGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gRmluYWxseSwgd2UgZnJlZXplIHRoZSByZWdpc3RyeSBpdHNlbGYuXG4gICAgICAgIE9iamVjdC5mcmVlemUodGhpcy5yZWdpc3RyeSk7XG4gICAgfVxuICAgIC8qKiBAcmV0dXJucyB7UGFyYW1UeXBlfSAtIEltcGxlbWVudGF0aW9uLWRlZmluZWQgZGVmYXVsdCBwYXJhbWV0ZXIgdHlwZS4gKi9cbiAgICBQYXJhbVR5cGVPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5nZXREZWZhdWx0VHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkuVW5pY29kZVN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBiYWNrZW5kTmFtZSAtIHRoZSBuYW1lIG9mIHRoZSB0eXBlIHRvIGZldGNoLlxuICAgICAqIEByZXR1cm5zIHtQYXJhbVR5cGV9IC0gVGhlIGFzc29jaWF0ZWQgdHlwZSwgaWYgYW55LlxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSAtIFdoZW4gdGhlIGdpdmVuIHR5cGUgbmFtZSBpc24ndCByZWdpc3RlcmVkLlxuICAgICAqL1xuICAgIFBhcmFtVHlwZU9iamVjdEZhY3RvcnkucHJvdG90eXBlLmdldFR5cGVGcm9tQmFja2VuZE5hbWUgPSBmdW5jdGlvbiAoYmFja2VuZE5hbWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlZ2lzdHJ5Lmhhc093blByb3BlcnR5KGJhY2tlbmROYW1lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGJhY2tlbmROYW1lICsgJyBpcyBub3QgYSByZWdpc3RlcmVkIHBhcmFtZXRlciB0eXBlLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBicmFja2V0IG5vdGF0aW9uIGlzIG5lZWRlZCBzaW5jZSAnYmFja2VuZE5hbWUnIGlzIGEgZHluYW1pYyBwcm9wZXJ0eVxuICAgICAgICAvLyBhbmQgaXMgbm90IGRlZmluZWQgb24gJ3JlZ2lzdHJ5Jy5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5W2JhY2tlbmROYW1lXTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICB9O1xuICAgIFBhcmFtVHlwZU9iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW10pXG4gICAgXSwgUGFyYW1UeXBlT2JqZWN0RmFjdG9yeSk7XG4gICAgcmV0dXJuIFBhcmFtVHlwZU9iamVjdEZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0cy5QYXJhbVR5cGVPYmplY3RGYWN0b3J5ID0gUGFyYW1UeXBlT2JqZWN0RmFjdG9yeTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1BhcmFtVHlwZU9iamVjdEZhY3RvcnknLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKFBhcmFtVHlwZU9iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE2IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0byByZXRyaWV2ZSByZWFkIG9ubHkgaW5mb3JtYXRpb25cbiAqIGFib3V0IGV4cGxvcmF0aW9ucyBmcm9tIHRoZSBiYWNrZW5kLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UnLCBbXG4gICAgJyRodHRwJywgJyRxJywgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICAnRVhQTE9SQVRJT05fREFUQV9VUkxfVEVNUExBVEUnLCAnRVhQTE9SQVRJT05fVkVSU0lPTl9EQVRBX1VSTF9URU1QTEFURScsXG4gICAgZnVuY3Rpb24gKCRodHRwLCAkcSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UsIEVYUExPUkFUSU9OX0RBVEFfVVJMX1RFTVBMQVRFLCBFWFBMT1JBVElPTl9WRVJTSU9OX0RBVEFfVVJMX1RFTVBMQVRFKSB7XG4gICAgICAgIC8vIE1hcHMgcHJldmlvdXNseSBsb2FkZWQgZXhwbG9yYXRpb25zIHRvIHRoZWlyIElEcy5cbiAgICAgICAgdmFyIF9leHBsb3JhdGlvbkNhY2hlID0gW107XG4gICAgICAgIHZhciBfZmV0Y2hFeHBsb3JhdGlvbiA9IGZ1bmN0aW9uIChleHBsb3JhdGlvbklkLCB2ZXJzaW9uLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBleHBsb3JhdGlvbkRhdGFVcmwgPSBfZ2V0RXhwbG9yYXRpb25VcmwoZXhwbG9yYXRpb25JZCwgdmVyc2lvbik7XG4gICAgICAgICAgICAkaHR0cC5nZXQoZXhwbG9yYXRpb25EYXRhVXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBleHBsb3JhdGlvbiA9IGFuZ3VsYXIuY29weShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhleHBsb3JhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycm9yUmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfaXNDYWNoZWQgPSBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCkge1xuICAgICAgICAgICAgcmV0dXJuIF9leHBsb3JhdGlvbkNhY2hlLmhhc093blByb3BlcnR5KGV4cGxvcmF0aW9uSWQpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2dldEV4cGxvcmF0aW9uVXJsID0gZnVuY3Rpb24gKGV4cGxvcmF0aW9uSWQsIHZlcnNpb24pIHtcbiAgICAgICAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKEVYUExPUkFUSU9OX1ZFUlNJT05fREFUQV9VUkxfVEVNUExBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbG9yYXRpb25faWQ6IGV4cGxvcmF0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246IFN0cmluZyh2ZXJzaW9uKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKEVYUExPUkFUSU9OX0RBVEFfVVJMX1RFTVBMQVRFLCB7XG4gICAgICAgICAgICAgICAgZXhwbG9yYXRpb25faWQ6IGV4cGxvcmF0aW9uSWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXRyaWV2ZXMgYW4gZXhwbG9yYXRpb24gZnJvbSB0aGUgYmFja2VuZCBnaXZlbiBhbiBleHBsb3JhdGlvbiBJRFxuICAgICAgICAgICAgICogYW5kIHZlcnNpb24gbnVtYmVyIChvciBub25lKS4gVGhpcyByZXR1cm5zIGEgcHJvbWlzZSBvYmplY3QgdGhhdFxuICAgICAgICAgICAgICogYWxsb3dzIHN1Y2Nlc3MgYW5kIHJlamVjdGlvbiBjYWxsYmFja3MgdG8gYmUgcmVnaXN0ZXJlZC4gSWYgdGhlXG4gICAgICAgICAgICAgKiBleHBsb3JhdGlvbiBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkIGFuZCBhIHN1Y2Nlc3MgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgICAgICAqIGlzIHByb3ZpZGVkIHRvIHRoZSBwcm9taXNlIG9iamVjdCwgdGhlIHN1Y2Nlc3MgY2FsbGJhY2sgaXMgY2FsbGVkXG4gICAgICAgICAgICAgKiB3aXRoIHRoZSBleHBsb3JhdGlvbiBwYXNzZWQgaW4gYXMgYSBwYXJhbWV0ZXIuIElmIHNvbWV0aGluZyBnb2VzXG4gICAgICAgICAgICAgKiB3cm9uZyB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggdGhlIGV4cGxvcmF0aW9uLCB0aGUgcmVqZWN0aW9uIGNhbGxiYWNrXG4gICAgICAgICAgICAgKiBpcyBjYWxsZWQgaW5zdGVhZCwgaWYgcHJlc2VudC4gVGhlIHJlamVjdGlvbiBjYWxsYmFjayBmdW5jdGlvbiBpc1xuICAgICAgICAgICAgICogcGFzc2VkIGFueSBkYXRhIHJldHVybmVkIGJ5IHRoZSBiYWNrZW5kIGluIHRoZSBjYXNlIG9mIGFuIGVycm9yLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmZXRjaEV4cGxvcmF0aW9uOiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCwgdmVyc2lvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF9mZXRjaEV4cGxvcmF0aW9uKGV4cGxvcmF0aW9uSWQsIHZlcnNpb24sIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBCZWhhdmVzIGluIHRoZSBleGFjdCBzYW1lIHdheSBhcyBmZXRjaEV4cGxvcmF0aW9uIChpbmNsdWRpbmdcbiAgICAgICAgICAgICAqIGNhbGxiYWNrIGJlaGF2aW9yIGFuZCByZXR1cm5pbmcgYSBwcm9taXNlIG9iamVjdCksXG4gICAgICAgICAgICAgKiBleGNlcHQgdGhpcyBmdW5jdGlvbiB3aWxsIGF0dGVtcHQgdG8gc2VlIHdoZXRoZXIgdGhlIGxhdGVzdCB2ZXJzaW9uXG4gICAgICAgICAgICAgKiBvZiB0aGUgZ2l2ZW4gZXhwbG9yYXRpb24gaGFzIGFscmVhZHkgYmVlbiBsb2FkZWQuIElmIGl0IGhhcyBub3QgeWV0XG4gICAgICAgICAgICAgKiBiZWVuIGxvYWRlZCwgaXQgd2lsbCBmZXRjaCB0aGUgZXhwbG9yYXRpb24gZnJvbSB0aGUgYmFja2VuZC4gSWYgaXRcbiAgICAgICAgICAgICAqIHN1Y2Nlc3NmdWxseSByZXRyaWV2ZXMgdGhlIGV4cGxvcmF0aW9uIGZyb20gdGhlIGJhY2tlbmQsIHRoaXMgbWV0aG9kXG4gICAgICAgICAgICAgKiB3aWxsIHN0b3JlIHRoZSBleHBsb3JhdGlvbiBpbiB0aGUgY2FjaGUgdG8gYXZvaWQgcmVxdWVzdHMgZnJvbSB0aGVcbiAgICAgICAgICAgICAqIGJhY2tlbmQgaW4gZnVydGhlciBmdW5jdGlvbiBjYWxscy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbG9hZExhdGVzdEV4cGxvcmF0aW9uOiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfaXNDYWNoZWQoZXhwbG9yYXRpb25JZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhbmd1bGFyLmNvcHkoX2V4cGxvcmF0aW9uQ2FjaGVbZXhwbG9yYXRpb25JZF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9mZXRjaEV4cGxvcmF0aW9uKGV4cGxvcmF0aW9uSWQsIG51bGwsIGZ1bmN0aW9uIChleHBsb3JhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIGZldGNoZWQgZXhwbG9yYXRpb24gdG8gYXZvaWQgZnV0dXJlIGZldGNoZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2V4cGxvcmF0aW9uQ2FjaGVbZXhwbG9yYXRpb25JZF0gPSBleHBsb3JhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFuZ3VsYXIuY29weShleHBsb3JhdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHJpZXZlcyBhbiBleHBsb3JhdGlvbiBmcm9tIHRoZSBiYWNrZW5kIGdpdmVuIGFuIGV4cGxvcmF0aW9uIElEXG4gICAgICAgICAgICAgKiBhbmQgdmVyc2lvbiBudW1iZXIuIFRoaXMgbWV0aG9kIGRvZXMgbm90IGludGVyYWN0IHdpdGggYW55IGNhY2hlXG4gICAgICAgICAgICAgKiBhbmQgdXNpbmcgdGhpcyBtZXRob2Qgd2lsbCBub3Qgb3ZlcndyaXRlIG9yIHRvdWNoIHRoZSBzdGF0ZSBvZiB0aGVcbiAgICAgICAgICAgICAqIGNhY2hlLiBBbGwgcHJldmlvdXMgZGF0YSBpbiB0aGUgY2FjaGUgd2lsbCBzdGlsbCBiZSByZXRhaW5lZCBhZnRlclxuICAgICAgICAgICAgICogdGhpcyBjYWxsLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsb2FkRXhwbG9yYXRpb246IGZ1bmN0aW9uIChleHBsb3JhdGlvbklkLCB2ZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgX2ZldGNoRXhwbG9yYXRpb24oZXhwbG9yYXRpb25JZCwgdmVyc2lvbiwgZnVuY3Rpb24gKGV4cGxvcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYW5ndWxhci5jb3B5KGV4cGxvcmF0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIGV4cGxvcmF0aW9uIGlzIHN0b3JlZCB3aXRoaW4gdGhlIGxvY2FsXG4gICAgICAgICAgICAgKiBkYXRhIGNhY2hlIG9yIGlmIGl0IG5lZWRzIHRvIGJlIHJldHJpZXZlZCBmcm9tIHRoZSBiYWNrZW5kIHVwb24gYVxuICAgICAgICAgICAgICogbG9hZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaXNDYWNoZWQ6IGZ1bmN0aW9uIChleHBsb3JhdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9pc0NhY2hlZChleHBsb3JhdGlvbklkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlcGxhY2VzIHRoZSBjdXJyZW50IGV4cGxvcmF0aW9uIGluIHRoZSBjYWNoZSBnaXZlbiBieSB0aGUgc3BlY2lmaWVkXG4gICAgICAgICAgICAgKiBleHBsb3JhdGlvbiBJRCB3aXRoIGEgbmV3IGV4cGxvcmF0aW9uIG9iamVjdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2FjaGVFeHBsb3JhdGlvbjogZnVuY3Rpb24gKGV4cGxvcmF0aW9uSWQsIGV4cGxvcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgX2V4cGxvcmF0aW9uQ2FjaGVbZXhwbG9yYXRpb25JZF0gPSBhbmd1bGFyLmNvcHkoZXhwbG9yYXRpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2xlYXJzIHRoZSBsb2NhbCBleHBsb3JhdGlvbiBkYXRhIGNhY2hlLCBmb3JjaW5nIGFsbCBmdXR1cmUgbG9hZHMgdG9cbiAgICAgICAgICAgICAqIHJlLXJlcXVlc3QgdGhlIHByZXZpb3VzbHkgbG9hZGVkIGV4cGxvcmF0aW9ucyBmcm9tIHRoZSBiYWNrZW5kLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjbGVhckV4cGxvcmF0aW9uQ2FjaGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfZXhwbG9yYXRpb25DYWNoZSA9IFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVsZXRlcyBhIHNwZWNpZmljIGV4cGxvcmF0aW9uIGZyb20gdGhlIGxvY2FsIGNhY2hlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRlbGV0ZUV4cGxvcmF0aW9uRnJvbUNhY2hlOiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCkge1xuICAgICAgICAgICAgICAgIGlmIChfaXNDYWNoZWQoZXhwbG9yYXRpb25JZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9leHBsb3JhdGlvbkNhY2hlW2V4cGxvcmF0aW9uSWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2ZcbiAqIFJlY29yZGVkVm9pY2VvdmVycyBkb21haW4gb2JqZWN0cy5cbiAqL1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIFZvaWNlb3Zlck9iamVjdEZhY3RvcnlfMSA9IHJlcXVpcmUoXCJkb21haW4vZXhwbG9yYXRpb24vVm9pY2VvdmVyT2JqZWN0RmFjdG9yeVwiKTtcbnZhciBSZWNvcmRlZFZvaWNlb3ZlcnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVjb3JkZWRWb2ljZW92ZXJzKHZvaWNlb3ZlcnNNYXBwaW5nLCB2b2ljZW92ZXJPYmplY3RGYWN0b3J5KSB7XG4gICAgICAgIHRoaXMudm9pY2VvdmVyc01hcHBpbmcgPSB2b2ljZW92ZXJzTWFwcGluZztcbiAgICAgICAgdGhpcy5fdm9pY2VvdmVyT2JqZWN0RmFjdG9yeSA9IHZvaWNlb3Zlck9iamVjdEZhY3Rvcnk7XG4gICAgfVxuICAgIFJlY29yZGVkVm9pY2VvdmVycy5wcm90b3R5cGUuZ2V0QWxsQ29udGVudElkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy52b2ljZW92ZXJzTWFwcGluZyk7XG4gICAgfTtcbiAgICAvLyBUT0RPKCM3MTY1KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlIHRoZSByZXR1cm4gdHlwZSBpcyBhIGRpY3Qgd2l0aCB2YXJ5aW5nIGtleXMgYW5kIHRoZSBjb3JyZWN0XG4gICAgLy8gdHlwZSBuZWVkcyB0byBiZSBmb3VuZC5cbiAgICBSZWNvcmRlZFZvaWNlb3ZlcnMucHJvdG90eXBlLmdldEJpbmRhYmxlVm9pY2VvdmVycyA9IGZ1bmN0aW9uIChjb250ZW50SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm9pY2VvdmVyc01hcHBpbmdbY29udGVudElkXTtcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgdGhlIHJldHVybiB0eXBlIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWRcbiAgICAvLyBrZXlzIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mXG4gICAgLy8gY2FtZWxDYXNpbmcuXG4gICAgUmVjb3JkZWRWb2ljZW92ZXJzLnByb3RvdHlwZS5nZXRWb2ljZW92ZXIgPSBmdW5jdGlvbiAoY29udGVudElkLCBsYW5nQ29kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52b2ljZW92ZXJzTWFwcGluZ1tjb250ZW50SWRdW2xhbmdDb2RlXTtcbiAgICB9O1xuICAgIFJlY29yZGVkVm9pY2VvdmVycy5wcm90b3R5cGUubWFya0FsbFZvaWNlb3ZlcnNBc05lZWRpbmdVcGRhdGUgPSBmdW5jdGlvbiAoY29udGVudElkKSB7XG4gICAgICAgIHZhciBsYW5ndWFnZUNvZGVUb1ZvaWNlb3ZlciA9IHRoaXMudm9pY2VvdmVyc01hcHBpbmdbY29udGVudElkXTtcbiAgICAgICAgZm9yICh2YXIgbGFuZ3VhZ2VDb2RlIGluIGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyKSB7XG4gICAgICAgICAgICBsYW5ndWFnZUNvZGVUb1ZvaWNlb3ZlcltsYW5ndWFnZUNvZGVdLm1hcmtBc05lZWRpbmdVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVjb3JkZWRWb2ljZW92ZXJzLnByb3RvdHlwZS5nZXRWb2ljZW92ZXJMYW5ndWFnZUNvZGVzID0gZnVuY3Rpb24gKGNvbnRlbnRJZCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy52b2ljZW92ZXJzTWFwcGluZ1tjb250ZW50SWRdKTtcbiAgICB9O1xuICAgIFJlY29yZGVkVm9pY2VvdmVycy5wcm90b3R5cGUuaGFzVm9pY2VvdmVycyA9IGZ1bmN0aW9uIChjb250ZW50SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Vm9pY2VvdmVyTGFuZ3VhZ2VDb2Rlcyhjb250ZW50SWQpLmxlbmd0aCA+IDA7XG4gICAgfTtcbiAgICBSZWNvcmRlZFZvaWNlb3ZlcnMucHJvdG90eXBlLmhhc1VuZmxhZ2dlZFZvaWNlb3ZlcnMgPSBmdW5jdGlvbiAoY29udGVudElkKSB7XG4gICAgICAgIHZhciBsYW5ndWFnZUNvZGVUb1ZvaWNlb3ZlciA9IHRoaXMudm9pY2VvdmVyc01hcHBpbmdbY29udGVudElkXTtcbiAgICAgICAgZm9yICh2YXIgbGFuZ3VhZ2VDb2RlIGluIGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyKSB7XG4gICAgICAgICAgICBpZiAoIWxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyW2xhbmd1YWdlQ29kZV0ubmVlZHNVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBSZWNvcmRlZFZvaWNlb3ZlcnMucHJvdG90eXBlLmFkZENvbnRlbnRJZCA9IGZ1bmN0aW9uIChjb250ZW50SWQpIHtcbiAgICAgICAgaWYgKHRoaXMudm9pY2VvdmVyc01hcHBpbmcuaGFzT3duUHJvcGVydHkoY29udGVudElkKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1RyeWluZyB0byBhZGQgZHVwbGljYXRlIGNvbnRlbnQgaWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52b2ljZW92ZXJzTWFwcGluZ1tjb250ZW50SWRdID0ge307XG4gICAgfTtcbiAgICBSZWNvcmRlZFZvaWNlb3ZlcnMucHJvdG90eXBlLmRlbGV0ZUNvbnRlbnRJZCA9IGZ1bmN0aW9uIChjb250ZW50SWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZvaWNlb3ZlcnNNYXBwaW5nLmhhc093blByb3BlcnR5KGNvbnRlbnRJZCkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdVbmFibGUgdG8gZmluZCB0aGUgZ2l2ZW4gY29udGVudCBpZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy52b2ljZW92ZXJzTWFwcGluZ1tjb250ZW50SWRdO1xuICAgIH07XG4gICAgUmVjb3JkZWRWb2ljZW92ZXJzLnByb3RvdHlwZS5hZGRWb2ljZW92ZXIgPSBmdW5jdGlvbiAoY29udGVudElkLCBsYW5ndWFnZUNvZGUsIGZpbGVuYW1lLCBmaWxlU2l6ZUJ5dGVzKSB7XG4gICAgICAgIHZhciBsYW5ndWFnZUNvZGVUb1ZvaWNlb3ZlciA9IHRoaXMudm9pY2VvdmVyc01hcHBpbmdbY29udGVudElkXTtcbiAgICAgICAgaWYgKGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyLmhhc093blByb3BlcnR5KGxhbmd1YWdlQ29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdUcnlpbmcgdG8gYWRkIGR1cGxpY2F0ZSBsYW5ndWFnZSBjb2RlLicpO1xuICAgICAgICB9XG4gICAgICAgIGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyW2xhbmd1YWdlQ29kZV0gPVxuICAgICAgICAgICAgdGhpcy5fdm9pY2VvdmVyT2JqZWN0RmFjdG9yeS5jcmVhdGVOZXcoZmlsZW5hbWUsIGZpbGVTaXplQnl0ZXMpO1xuICAgIH07XG4gICAgUmVjb3JkZWRWb2ljZW92ZXJzLnByb3RvdHlwZS5kZWxldGVWb2ljZW92ZXIgPSBmdW5jdGlvbiAoY29udGVudElkLCBsYW5ndWFnZUNvZGUpIHtcbiAgICAgICAgdmFyIGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyID0gdGhpcy52b2ljZW92ZXJzTWFwcGluZ1tjb250ZW50SWRdO1xuICAgICAgICBpZiAoIWxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyLmhhc093blByb3BlcnR5KGxhbmd1YWdlQ29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdUcnlpbmcgdG8gcmVtb3ZlIG5vbi1leGlzdGluZyB0cmFuc2xhdGlvbiBmb3IgbGFuZ3VhZ2UgY29kZSAnICtcbiAgICAgICAgICAgICAgICBsYW5ndWFnZUNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBsYW5ndWFnZUNvZGVUb1ZvaWNlb3ZlcltsYW5ndWFnZUNvZGVdO1xuICAgIH07XG4gICAgUmVjb3JkZWRWb2ljZW92ZXJzLnByb3RvdHlwZS50b2dnbGVOZWVkc1VwZGF0ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChjb250ZW50SWQsIGxhbmd1YWdlQ29kZSkge1xuICAgICAgICB2YXIgbGFuZ3VhZ2VDb2RlVG9Wb2ljZW92ZXIgPSB0aGlzLnZvaWNlb3ZlcnNNYXBwaW5nW2NvbnRlbnRJZF07XG4gICAgICAgIGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyW2xhbmd1YWdlQ29kZV0udG9nZ2xlTmVlZHNVcGRhdGVBdHRyaWJ1dGUoKTtcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgdGhlIHJldHVybiB0eXBlIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWRcbiAgICAvLyBrZXlzIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mXG4gICAgLy8gY2FtZWxDYXNpbmcuXG4gICAgUmVjb3JkZWRWb2ljZW92ZXJzLnByb3RvdHlwZS50b0JhY2tlbmREaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdm9pY2VvdmVyc01hcHBpbmdEaWN0ID0ge307XG4gICAgICAgIGZvciAodmFyIGNvbnRlbnRJZCBpbiB0aGlzLnZvaWNlb3ZlcnNNYXBwaW5nKSB7XG4gICAgICAgICAgICB2YXIgbGFuZ3VhZ2VDb2RlVG9Wb2ljZW92ZXIgPSB0aGlzLnZvaWNlb3ZlcnNNYXBwaW5nW2NvbnRlbnRJZF07XG4gICAgICAgICAgICB2YXIgbGFuZ3VhZ2VDb2RlVG9Wb2ljZW92ZXJEaWN0ID0ge307XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhsYW5ndWFnZUNvZGVUb1ZvaWNlb3ZlcikuZm9yRWFjaChmdW5jdGlvbiAobGFuZykge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyRGljdFtsYW5nXSA9IChsYW5ndWFnZUNvZGVUb1ZvaWNlb3ZlcltsYW5nXS50b0JhY2tlbmREaWN0KCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2b2ljZW92ZXJzTWFwcGluZ0RpY3RbY29udGVudElkXSA9IGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyRGljdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdm9pY2VvdmVyc19tYXBwaW5nOiB2b2ljZW92ZXJzTWFwcGluZ0RpY3RcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBSZWNvcmRlZFZvaWNlb3ZlcnM7XG59KCkpO1xuZXhwb3J0cy5SZWNvcmRlZFZvaWNlb3ZlcnMgPSBSZWNvcmRlZFZvaWNlb3ZlcnM7XG52YXIgUmVjb3JkZWRWb2ljZW92ZXJzT2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWNvcmRlZFZvaWNlb3ZlcnNPYmplY3RGYWN0b3J5KHZvaWNlb3Zlck9iamVjdEZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy52b2ljZW92ZXJPYmplY3RGYWN0b3J5ID0gdm9pY2VvdmVyT2JqZWN0RmFjdG9yeTtcbiAgICB9XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAncmVjb3JkZWRWb2ljZW92ZXJzRGljdCcgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZFxuICAgIC8vIGtleXMgd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2ZcbiAgICAvLyBjYW1lbENhc2luZy5cbiAgICBSZWNvcmRlZFZvaWNlb3ZlcnNPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tQmFja2VuZERpY3QgPSBmdW5jdGlvbiAocmVjb3JkZWRWb2ljZW92ZXJzRGljdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdm9pY2VvdmVyc01hcHBpbmcgPSB7fTtcbiAgICAgICAgdmFyIHZvaWNlb3ZlcnNNYXBwaW5nRGljdCA9IHJlY29yZGVkVm9pY2VvdmVyc0RpY3Qudm9pY2VvdmVyc19tYXBwaW5nO1xuICAgICAgICBPYmplY3Qua2V5cyh2b2ljZW92ZXJzTWFwcGluZ0RpY3QpLmZvckVhY2goZnVuY3Rpb24gKGNvbnRlbnRJZCkge1xuICAgICAgICAgICAgdmFyIGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyRGljdCA9IHZvaWNlb3ZlcnNNYXBwaW5nRGljdFtjb250ZW50SWRdO1xuICAgICAgICAgICAgdmFyIGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyID0ge307XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhsYW5ndWFnZUNvZGVUb1ZvaWNlb3ZlckRpY3QpLmZvckVhY2goZnVuY3Rpb24gKGxhbmdDb2RlKSB7XG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlVG9Wb2ljZW92ZXJbbGFuZ0NvZGVdID0gKF90aGlzLnZvaWNlb3Zlck9iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyRGljdFtsYW5nQ29kZV0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdm9pY2VvdmVyc01hcHBpbmdbY29udGVudElkXSA9IGxhbmd1YWdlQ29kZVRvVm9pY2VvdmVyO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRlZFZvaWNlb3ZlcnModm9pY2VvdmVyc01hcHBpbmcsIHRoaXMudm9pY2VvdmVyT2JqZWN0RmFjdG9yeSk7XG4gICAgfTtcbiAgICBSZWNvcmRlZFZvaWNlb3ZlcnNPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVFbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRlZFZvaWNlb3ZlcnMoe30sIHRoaXMudm9pY2VvdmVyT2JqZWN0RmFjdG9yeSk7XG4gICAgfTtcbiAgICB2YXIgX2E7XG4gICAgUmVjb3JkZWRWb2ljZW92ZXJzT2JqZWN0RmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBWb2ljZW92ZXJPYmplY3RGYWN0b3J5XzEuVm9pY2VvdmVyT2JqZWN0RmFjdG9yeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBWb2ljZW92ZXJPYmplY3RGYWN0b3J5XzEuVm9pY2VvdmVyT2JqZWN0RmFjdG9yeSkgPT09IFwiZnVuY3Rpb25cIiA/IF9hIDogT2JqZWN0XSlcbiAgICBdLCBSZWNvcmRlZFZvaWNlb3ZlcnNPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gUmVjb3JkZWRWb2ljZW92ZXJzT2JqZWN0RmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLlJlY29yZGVkVm9pY2VvdmVyc09iamVjdEZhY3RvcnkgPSBSZWNvcmRlZFZvaWNlb3ZlcnNPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnUmVjb3JkZWRWb2ljZW92ZXJzT2JqZWN0RmFjdG9yeScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoUmVjb3JkZWRWb2ljZW92ZXJzT2JqZWN0RmFjdG9yeSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTUgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgZnJvbnRlbmQgaW5zdGFuY2VzIG9mIFJ1bGVcbiAqIGRvbWFpbiBvYmplY3RzLlxuICovXG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgUnVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSdWxlKHR5cGUsIGlucHV0cykge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmlucHV0cyA9IGlucHV0cztcbiAgICB9XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgcmV0dXJuIHR5cGUgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZCBrZXlzIHdoaWNoXG4gICAgLy8gZ2l2ZXMgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mIGNhbWVsQ2FzaW5nLlxuICAgIFJ1bGUucHJvdG90eXBlLnRvQmFja2VuZERpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBydWxlX3R5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIGlucHV0czogdGhpcy5pbnB1dHNcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBSdWxlO1xufSgpKTtcbmV4cG9ydHMuUnVsZSA9IFJ1bGU7XG52YXIgUnVsZU9iamVjdEZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUnVsZU9iamVjdEZhY3RvcnkoKSB7XG4gICAgfVxuICAgIFJ1bGVPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVOZXcgPSBmdW5jdGlvbiAodHlwZSwgaW5wdXRzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUnVsZSh0eXBlLCBpbnB1dHMpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAncnVsZURpY3QnIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWQga2V5cyB3aGljaFxuICAgIC8vIGdpdmVzIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZiBjYW1lbENhc2luZy5cbiAgICBSdWxlT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRnJvbUJhY2tlbmREaWN0ID0gZnVuY3Rpb24gKHJ1bGVEaWN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUnVsZShydWxlRGljdC5ydWxlX3R5cGUsIHJ1bGVEaWN0LmlucHV0cyk7XG4gICAgfTtcbiAgICBSdWxlT2JqZWN0RmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSlcbiAgICBdLCBSdWxlT2JqZWN0RmFjdG9yeSk7XG4gICAgcmV0dXJuIFJ1bGVPYmplY3RGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuUnVsZU9iamVjdEZhY3RvcnkgPSBSdWxlT2JqZWN0RmFjdG9yeTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1J1bGVPYmplY3RGYWN0b3J5Jywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShSdWxlT2JqZWN0RmFjdG9yeSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTcgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgZnJvbnRlbmQgaW5zdGFuY2VzIG9mIFNvbHV0aW9uXG4gKiBkb21haW4gb2JqZWN0cy5cbiAqL1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL1N1YnRpdGxlZEh0bWxPYmplY3RGYWN0b3J5LnRzJyk7XG5yZXF1aXJlKCdkb21haW4vb2JqZWN0cy9GcmFjdGlvbk9iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9vYmplY3RzL051bWJlcldpdGhVbml0c09iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2ZpbHRlcnMvc3RyaW5nLXV0aWxpdHktZmlsdGVycy9jb252ZXJ0LXRvLXBsYWluLXRleHQuZmlsdGVyLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9FeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9IdG1sRXNjYXBlclNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1NvbHV0aW9uT2JqZWN0RmFjdG9yeScsIFtcbiAgICAnJGZpbHRlcicsICdFeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlJywgJ0ZyYWN0aW9uT2JqZWN0RmFjdG9yeScsXG4gICAgJ0h0bWxFc2NhcGVyU2VydmljZScsICdOdW1iZXJXaXRoVW5pdHNPYmplY3RGYWN0b3J5JyxcbiAgICAnU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnknLFxuICAgIGZ1bmN0aW9uICgkZmlsdGVyLCBFeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlLCBGcmFjdGlvbk9iamVjdEZhY3RvcnksIEh0bWxFc2NhcGVyU2VydmljZSwgTnVtYmVyV2l0aFVuaXRzT2JqZWN0RmFjdG9yeSwgU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkpIHtcbiAgICAgICAgdmFyIFNvbHV0aW9uID0gZnVuY3Rpb24gKGFuc3dlcklzRXhjbHVzaXZlLCBjb3JyZWN0QW5zd2VyLCBleHBsYW5hdGlvbikge1xuICAgICAgICAgICAgdGhpcy5hbnN3ZXJJc0V4Y2x1c2l2ZSA9IGFuc3dlcklzRXhjbHVzaXZlO1xuICAgICAgICAgICAgdGhpcy5jb3JyZWN0QW5zd2VyID0gY29ycmVjdEFuc3dlcjtcbiAgICAgICAgICAgIHRoaXMuZXhwbGFuYXRpb24gPSBleHBsYW5hdGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgU29sdXRpb24ucHJvdG90eXBlLnRvQmFja2VuZERpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFuc3dlcl9pc19leGNsdXNpdmU6IHRoaXMuYW5zd2VySXNFeGNsdXNpdmUsXG4gICAgICAgICAgICAgICAgY29ycmVjdF9hbnN3ZXI6IHRoaXMuY29ycmVjdEFuc3dlcixcbiAgICAgICAgICAgICAgICBleHBsYW5hdGlvbjogdGhpcy5leHBsYW5hdGlvbi50b0JhY2tlbmREaWN0KClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE8oYW5raXRhMjQwNzk2KTogUmVtb3ZlIHRoZSBicmFja2V0IG5vdGF0aW9uIG9uY2UgQW5ndWxhcjIgZ2V0cyBpbi5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgIFNvbHV0aW9uWydjcmVhdGVGcm9tQmFja2VuZERpY3QnXSA9IGZ1bmN0aW9uIChzb2x1dGlvbkJhY2tlbmREaWN0KSB7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGRvdC1ub3RhdGlvbiAqL1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTb2x1dGlvbihzb2x1dGlvbkJhY2tlbmREaWN0LmFuc3dlcl9pc19leGNsdXNpdmUsIHNvbHV0aW9uQmFja2VuZERpY3QuY29ycmVjdF9hbnN3ZXIsIFN1YnRpdGxlZEh0bWxPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChzb2x1dGlvbkJhY2tlbmREaWN0LmV4cGxhbmF0aW9uKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE8oYW5raXRhMjQwNzk2KTogUmVtb3ZlIHRoZSBicmFja2V0IG5vdGF0aW9uIG9uY2UgQW5ndWxhcjIgZ2V0cyBpbi5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgIFNvbHV0aW9uWydjcmVhdGVOZXcnXSA9IGZ1bmN0aW9uIChcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgYW5zd2VySXNFeGNsdXNpdmUsIGNvcnJlY3RBbnN3ZXIsIGV4cGxhbmF0aW9uSHRtbCwgZXhwbGFuYXRpb25JZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTb2x1dGlvbihhbnN3ZXJJc0V4Y2x1c2l2ZSwgY29ycmVjdEFuc3dlciwgU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkuY3JlYXRlRGVmYXVsdChleHBsYW5hdGlvbkh0bWwsIGV4cGxhbmF0aW9uSWQpKTtcbiAgICAgICAgfTtcbiAgICAgICAgU29sdXRpb24ucHJvdG90eXBlLmdldFN1bW1hcnkgPSBmdW5jdGlvbiAoaW50ZXJhY3Rpb25JZCkge1xuICAgICAgICAgICAgdmFyIHNvbHV0aW9uVHlwZSA9ICh0aGlzLmFuc3dlcklzRXhjbHVzaXZlID8gJ1RoZSBvbmx5JyA6ICdPbmUnKTtcbiAgICAgICAgICAgIHZhciBjb3JyZWN0QW5zd2VyID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbklkID09PSAnR3JhcGhJbnB1dCcpIHtcbiAgICAgICAgICAgICAgICBjb3JyZWN0QW5zd2VyID0gJ1tHcmFwaF0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW50ZXJhY3Rpb25JZCA9PT0gJ01hdGhFeHByZXNzaW9uSW5wdXQnKSB7XG4gICAgICAgICAgICAgICAgY29ycmVjdEFuc3dlciA9IHRoaXMuY29ycmVjdEFuc3dlci5sYXRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGludGVyYWN0aW9uSWQgPT09ICdDb2RlUmVwbCcgfHxcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbklkID09PSAnUGVuY2lsQ29kZUVkaXRvcicpIHtcbiAgICAgICAgICAgICAgICBjb3JyZWN0QW5zd2VyID0gdGhpcy5jb3JyZWN0QW5zd2VyLmNvZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbnRlcmFjdGlvbklkID09PSAnTXVzaWNOb3Rlc0lucHV0Jykge1xuICAgICAgICAgICAgICAgIGNvcnJlY3RBbnN3ZXIgPSAnW011c2ljIE5vdGVzXSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbnRlcmFjdGlvbklkID09PSAnTG9naWNQcm9vZicpIHtcbiAgICAgICAgICAgICAgICBjb3JyZWN0QW5zd2VyID0gdGhpcy5jb3JyZWN0QW5zd2VyLmNvcnJlY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbnRlcmFjdGlvbklkID09PSAnRnJhY3Rpb25JbnB1dCcpIHtcbiAgICAgICAgICAgICAgICBjb3JyZWN0QW5zd2VyID0gRnJhY3Rpb25PYmplY3RGYWN0b3J5LmZyb21EaWN0KHRoaXMuY29ycmVjdEFuc3dlcikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGludGVyYWN0aW9uSWQgPT09ICdOdW1iZXJXaXRoVW5pdHMnKSB7XG4gICAgICAgICAgICAgICAgY29ycmVjdEFuc3dlciA9IE51bWJlcldpdGhVbml0c09iamVjdEZhY3RvcnkuZnJvbURpY3QodGhpcy5jb3JyZWN0QW5zd2VyKS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29ycmVjdEFuc3dlciA9IChIdG1sRXNjYXBlclNlcnZpY2Uub2JqVG9Fc2NhcGVkSnNvbih0aGlzLmNvcnJlY3RBbnN3ZXIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBleHBsYW5hdGlvbiA9ICgkZmlsdGVyKCdjb252ZXJ0VG9QbGFpblRleHQnKSh0aGlzLmV4cGxhbmF0aW9uLmdldEh0bWwoKSkpO1xuICAgICAgICAgICAgcmV0dXJuIChzb2x1dGlvblR5cGUgKyAnIHNvbHV0aW9uIGlzIFwiJyArIGNvcnJlY3RBbnN3ZXIgK1xuICAgICAgICAgICAgICAgICdcIi4gJyArIGV4cGxhbmF0aW9uICsgJy4nKTtcbiAgICAgICAgfTtcbiAgICAgICAgU29sdXRpb24ucHJvdG90eXBlLnNldENvcnJlY3RBbnN3ZXIgPSBmdW5jdGlvbiAoY29ycmVjdEFuc3dlcikge1xuICAgICAgICAgICAgdGhpcy5jb3JyZWN0QW5zd2VyID0gY29ycmVjdEFuc3dlcjtcbiAgICAgICAgfTtcbiAgICAgICAgU29sdXRpb24ucHJvdG90eXBlLnNldEV4cGxhbmF0aW9uID0gZnVuY3Rpb24gKGV4cGxhbmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGxhbmF0aW9uID0gZXhwbGFuYXRpb247XG4gICAgICAgIH07XG4gICAgICAgIFNvbHV0aW9uLnByb3RvdHlwZS5nZXRPcHBpYVNob3J0QW5zd2VyUmVzcG9uc2VIdG1sID0gZnVuY3Rpb24gKGludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHByZWZpeDogKHRoaXMuYW5zd2VySXNFeGNsdXNpdmUgPyAnVGhlIG9ubHknIDogJ09uZScpLFxuICAgICAgICAgICAgICAgIGFuc3dlcjogRXhwbG9yYXRpb25IdG1sRm9ybWF0dGVyU2VydmljZS5nZXRTaG9ydEFuc3dlckh0bWwodGhpcy5jb3JyZWN0QW5zd2VyLCBpbnRlcmFjdGlvbi5pZCwgaW50ZXJhY3Rpb24uY3VzdG9taXphdGlvbkFyZ3MpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBTb2x1dGlvbi5wcm90b3R5cGUuZ2V0T3BwaWFTb2x1dGlvbkV4cGxhbmF0aW9uUmVzcG9uc2VIdG1sID1cbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5leHBsYW5hdGlvbi5nZXRIdG1sKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4gU29sdXRpb247XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2YgU3RhdGVcbiAqIGRvbWFpbiBvYmplY3RzIGdpdmVuIGEgbGlzdCBvZiBiYWNrZW5kIHN0YXRlIGRpY3Rpb25hcmllcy5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3N0YXRlL1N0YXRlT2JqZWN0RmFjdG9yeS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnU3RhdGVzT2JqZWN0RmFjdG9yeScsIFtcbiAgICAnU3RhdGVPYmplY3RGYWN0b3J5JywgJ0lOVEVSQUNUSU9OX1NQRUNTJyxcbiAgICBmdW5jdGlvbiAoU3RhdGVPYmplY3RGYWN0b3J5LCBJTlRFUkFDVElPTl9TUEVDUykge1xuICAgICAgICB2YXIgU3RhdGVzID0gZnVuY3Rpb24gKHN0YXRlcykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVzID0gc3RhdGVzO1xuICAgICAgICB9O1xuICAgICAgICBTdGF0ZXMucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuY29weSh0aGlzLl9zdGF0ZXNbc3RhdGVOYW1lXSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE8odGppYW5nMTEpOiBSZW1vdmUgZ2V0U3RhdGVPYmplY3RzKCkgYW5kIHJlcGxhY2UgY2FsbHNcbiAgICAgICAgLy8gd2l0aCBhbiBvYmplY3QgdG8gcmVwcmVzZW50IGRhdGEgdG8gYmUgbWFuaXB1bGF0ZWQgaW5zaWRlXG4gICAgICAgIC8vIEV4cGxvcmF0aW9uRGlmZlNlcnZpY2UuXG4gICAgICAgIFN0YXRlcy5wcm90b3R5cGUuZ2V0U3RhdGVPYmplY3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuY29weSh0aGlzLl9zdGF0ZXMpO1xuICAgICAgICB9O1xuICAgICAgICBTdGF0ZXMucHJvdG90eXBlLmFkZFN0YXRlID0gZnVuY3Rpb24gKG5ld1N0YXRlTmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVzW25ld1N0YXRlTmFtZV0gPSBTdGF0ZU9iamVjdEZhY3RvcnkuY3JlYXRlRGVmYXVsdFN0YXRlKG5ld1N0YXRlTmFtZSk7XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlcy5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGVOYW1lLCBzdGF0ZURhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlc1tzdGF0ZU5hbWVdID0gYW5ndWxhci5jb3B5KHN0YXRlRGF0YSk7XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlcy5wcm90b3R5cGUuaGFzU3RhdGUgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGVzLmhhc093blByb3BlcnR5KHN0YXRlTmFtZSk7XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlcy5wcm90b3R5cGUuZGVsZXRlU3RhdGUgPSBmdW5jdGlvbiAoZGVsZXRlU3RhdGVOYW1lKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fc3RhdGVzW2RlbGV0ZVN0YXRlTmFtZV07XG4gICAgICAgICAgICBmb3IgKHZhciBvdGhlclN0YXRlTmFtZSBpbiB0aGlzLl9zdGF0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb24gPSB0aGlzLl9zdGF0ZXNbb3RoZXJTdGF0ZU5hbWVdLmludGVyYWN0aW9uO1xuICAgICAgICAgICAgICAgIHZhciBncm91cHMgPSBpbnRlcmFjdGlvbi5hbnN3ZXJHcm91cHM7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyb3Vwc1tpXS5vdXRjb21lLmRlc3QgPT09IGRlbGV0ZVN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBzW2ldLm91dGNvbWUuZGVzdCA9IG90aGVyU3RhdGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbi5kZWZhdWx0T3V0Y29tZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJhY3Rpb24uZGVmYXVsdE91dGNvbWUuZGVzdCA9PT0gZGVsZXRlU3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5kZWZhdWx0T3V0Y29tZS5kZXN0ID0gb3RoZXJTdGF0ZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlcy5wcm90b3R5cGUucmVuYW1lU3RhdGUgPSBmdW5jdGlvbiAob2xkU3RhdGVOYW1lLCBuZXdTdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlc1tuZXdTdGF0ZU5hbWVdID0gYW5ndWxhci5jb3B5KHRoaXMuX3N0YXRlc1tvbGRTdGF0ZU5hbWVdKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlc1tuZXdTdGF0ZU5hbWVdLnNldE5hbWUobmV3U3RhdGVOYW1lKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zdGF0ZXNbb2xkU3RhdGVOYW1lXTtcbiAgICAgICAgICAgIGZvciAodmFyIG90aGVyU3RhdGVOYW1lIGluIHRoaXMuX3N0YXRlcykge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IHRoaXMuX3N0YXRlc1tvdGhlclN0YXRlTmFtZV0uaW50ZXJhY3Rpb247XG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwcyA9IGludGVyYWN0aW9uLmFuc3dlckdyb3VwcztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXBzW2ldLm91dGNvbWUuZGVzdCA9PT0gb2xkU3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cHNbaV0ub3V0Y29tZS5kZXN0ID0gbmV3U3RhdGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbi5kZWZhdWx0T3V0Y29tZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJhY3Rpb24uZGVmYXVsdE91dGNvbWUuZGVzdCA9PT0gb2xkU3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5kZWZhdWx0T3V0Y29tZS5kZXN0ID0gbmV3U3RhdGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBTdGF0ZXMucHJvdG90eXBlLmdldFN0YXRlTmFtZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fc3RhdGVzKTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVzLnByb3RvdHlwZS5nZXRGaW5hbFN0YXRlTmFtZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZmluYWxTdGF0ZU5hbWVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBzdGF0ZU5hbWUgaW4gdGhpcy5fc3RhdGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uID0gdGhpcy5fc3RhdGVzW3N0YXRlTmFtZV0uaW50ZXJhY3Rpb247XG4gICAgICAgICAgICAgICAgaWYgKGludGVyYWN0aW9uLmlkICYmIElOVEVSQUNUSU9OX1NQRUNTW2ludGVyYWN0aW9uLmlkXS5pc190ZXJtaW5hbCkge1xuICAgICAgICAgICAgICAgICAgICBmaW5hbFN0YXRlTmFtZXMucHVzaChzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmaW5hbFN0YXRlTmFtZXM7XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlcy5wcm90b3R5cGUuZ2V0QWxsVm9pY2VvdmVyTGFuZ3VhZ2VDb2RlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhbGxBdWRpb0xhbmd1YWdlQ29kZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIHN0YXRlTmFtZSBpbiB0aGlzLl9zdGF0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZXNbc3RhdGVOYW1lXTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudElkc0xpc3QgPSBzdGF0ZS5yZWNvcmRlZFZvaWNlb3ZlcnMuZ2V0QWxsQ29udGVudElkKCk7XG4gICAgICAgICAgICAgICAgY29udGVudElkc0xpc3QuZm9yRWFjaChmdW5jdGlvbiAoY29udGVudElkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdWRpb0xhbmd1YWdlQ29kZXMgPSAoc3RhdGUucmVjb3JkZWRWb2ljZW92ZXJzLmdldFZvaWNlb3Zlckxhbmd1YWdlQ29kZXMoY29udGVudElkKSk7XG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvTGFuZ3VhZ2VDb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChsYW5ndWFnZUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxBdWRpb0xhbmd1YWdlQ29kZXMuaW5kZXhPZihsYW5ndWFnZUNvZGUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEF1ZGlvTGFuZ3VhZ2VDb2Rlcy5wdXNoKGxhbmd1YWdlQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFsbEF1ZGlvTGFuZ3VhZ2VDb2RlcztcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVzLnByb3RvdHlwZS5nZXRBbGxWb2ljZW92ZXJzID0gZnVuY3Rpb24gKGxhbmd1YWdlQ29kZSkge1xuICAgICAgICAgICAgdmFyIGFsbEF1ZGlvVHJhbnNsYXRpb25zID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBzdGF0ZU5hbWUgaW4gdGhpcy5fc3RhdGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGVzW3N0YXRlTmFtZV07XG4gICAgICAgICAgICAgICAgYWxsQXVkaW9UcmFuc2xhdGlvbnNbc3RhdGVOYW1lXSA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50SWRzTGlzdCA9IHN0YXRlLnJlY29yZGVkVm9pY2VvdmVycy5nZXRBbGxDb250ZW50SWQoKTtcbiAgICAgICAgICAgICAgICBjb250ZW50SWRzTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChjb250ZW50SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF1ZGlvVHJhbnNsYXRpb25zID0gKHN0YXRlLnJlY29yZGVkVm9pY2VvdmVycy5nZXRCaW5kYWJsZVZvaWNlb3ZlcnMoY29udGVudElkKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdWRpb1RyYW5zbGF0aW9ucy5oYXNPd25Qcm9wZXJ0eShsYW5ndWFnZUNvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxBdWRpb1RyYW5zbGF0aW9uc1tzdGF0ZU5hbWVdLnB1c2goYXVkaW9UcmFuc2xhdGlvbnNbbGFuZ3VhZ2VDb2RlXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhbGxBdWRpb1RyYW5zbGF0aW9ucztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETyhhbmtpdGEyNDA3OTYpOiBSZW1vdmUgdGhlIGJyYWNrZXQgbm90YXRpb24gb25jZSBBbmd1bGFyMiBnZXRzIGluLlxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgU3RhdGVzWydjcmVhdGVGcm9tQmFja2VuZERpY3QnXSA9IGZ1bmN0aW9uIChzdGF0ZXNCYWNrZW5kRGljdCkge1xuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgICAgIHZhciBzdGF0ZU9iamVjdHNEaWN0ID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBzdGF0ZU5hbWUgaW4gc3RhdGVzQmFja2VuZERpY3QpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZU9iamVjdHNEaWN0W3N0YXRlTmFtZV0gPSBTdGF0ZU9iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KHN0YXRlTmFtZSwgc3RhdGVzQmFja2VuZERpY3Rbc3RhdGVOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0YXRlcyhzdGF0ZU9iamVjdHNEaWN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFN0YXRlcztcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE1IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGZyb250ZW5kIGluc3RhbmNlcyBvZiBTdWJ0aXRsZWRIdG1sXG4gKiBkb21haW4gb2JqZWN0cy5cbiAqL1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIFN1YnRpdGxlZEh0bWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3VidGl0bGVkSHRtbChodG1sLCBjb250ZW50SWQpIHtcbiAgICAgICAgdGhpcy5faHRtbCA9IGh0bWw7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRJZCA9IGNvbnRlbnRJZDtcbiAgICB9XG4gICAgU3VidGl0bGVkSHRtbC5wcm90b3R5cGUuZ2V0SHRtbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0bWw7XG4gICAgfTtcbiAgICBTdWJ0aXRsZWRIdG1sLnByb3RvdHlwZS5nZXRDb250ZW50SWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50SWQ7XG4gICAgfTtcbiAgICBTdWJ0aXRsZWRIdG1sLnByb3RvdHlwZS5zZXRIdG1sID0gZnVuY3Rpb24gKG5ld0h0bWwpIHtcbiAgICAgICAgdGhpcy5faHRtbCA9IG5ld0h0bWw7XG4gICAgfTtcbiAgICBTdWJ0aXRsZWRIdG1sLnByb3RvdHlwZS5oYXNOb0h0bWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5faHRtbDtcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgdGhlIHJldHVybiB0eXBlIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWRcbiAgICAvLyBrZXlzIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mXG4gICAgLy8gY2FtZWxDYXNpbmcuXG4gICAgU3VidGl0bGVkSHRtbC5wcm90b3R5cGUudG9CYWNrZW5kRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGh0bWw6IHRoaXMuX2h0bWwsXG4gICAgICAgICAgICBjb250ZW50X2lkOiB0aGlzLl9jb250ZW50SWRcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFN1YnRpdGxlZEh0bWwucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc05vSHRtbCgpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnRpdGxlZEh0bWw7XG59KCkpO1xuZXhwb3J0cy5TdWJ0aXRsZWRIdG1sID0gU3VidGl0bGVkSHRtbDtcbnZhciBTdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeSgpIHtcbiAgICB9XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnc3VidGl0bGVkSHRtbEJhY2tlbmREaWN0JyBpcyBhIGRpY3Qgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkXG4gICAgLy8ga2V5cyB3aGljaCBnaXZlIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZlxuICAgIC8vIGNhbWVsQ2FzaW5nLlxuICAgIFN1YnRpdGxlZEh0bWxPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tQmFja2VuZERpY3QgPSBmdW5jdGlvbiAoc3VidGl0bGVkSHRtbEJhY2tlbmREaWN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgU3VidGl0bGVkSHRtbChzdWJ0aXRsZWRIdG1sQmFja2VuZERpY3QuaHRtbCwgc3VidGl0bGVkSHRtbEJhY2tlbmREaWN0LmNvbnRlbnRfaWQpO1xuICAgIH07XG4gICAgU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZURlZmF1bHQgPSBmdW5jdGlvbiAoaHRtbCwgY29udGVudElkKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3VidGl0bGVkSHRtbChodG1sLCBjb250ZW50SWQpO1xuICAgIH07XG4gICAgU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkpO1xuICAgIHJldHVybiBTdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLlN1YnRpdGxlZEh0bWxPYmplY3RGYWN0b3J5ID0gU3VidGl0bGVkSHRtbE9iamVjdEZhY3Rvcnk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdTdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGZyb250ZW5kIGluc3RhbmNlcyBvZlxuICogVm9pY2VvdmVyIGRvbWFpbiBvYmplY3RzLlxuICovXG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgVm9pY2VvdmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZvaWNlb3ZlcihmaWxlbmFtZSwgZmlsZVNpemVCeXRlcywgbmVlZHNVcGRhdGUpIHtcbiAgICAgICAgdGhpcy5maWxlbmFtZSA9IGZpbGVuYW1lO1xuICAgICAgICB0aGlzLmZpbGVTaXplQnl0ZXMgPSBmaWxlU2l6ZUJ5dGVzO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlID0gbmVlZHNVcGRhdGU7XG4gICAgfVxuICAgIFZvaWNlb3Zlci5wcm90b3R5cGUubWFya0FzTmVlZGluZ1VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgfTtcbiAgICBWb2ljZW92ZXIucHJvdG90eXBlLnRvZ2dsZU5lZWRzVXBkYXRlQXR0cmlidXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlID0gIXRoaXMubmVlZHNVcGRhdGU7XG4gICAgfTtcbiAgICBWb2ljZW92ZXIucHJvdG90eXBlLmdldEZpbGVTaXplTUIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBOVU1fQllURVNfSU5fTUIgPSAxIDw8IDIwO1xuICAgICAgICByZXR1cm4gdGhpcy5maWxlU2l6ZUJ5dGVzIC8gTlVNX0JZVEVTX0lOX01CO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgc2luY2UgJ3RvQmFja2VuZERpY3QnIHJldHVybnMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZCBrZXlzIHdoaWNoXG4gICAgLy8gZ2l2ZXMgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mIGNhbWVsQ2FzaW5nLlxuICAgIFZvaWNlb3Zlci5wcm90b3R5cGUudG9CYWNrZW5kRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVuYW1lLFxuICAgICAgICAgICAgZmlsZV9zaXplX2J5dGVzOiB0aGlzLmZpbGVTaXplQnl0ZXMsXG4gICAgICAgICAgICBuZWVkc191cGRhdGU6IHRoaXMubmVlZHNVcGRhdGVcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBWb2ljZW92ZXI7XG59KCkpO1xuZXhwb3J0cy5Wb2ljZW92ZXIgPSBWb2ljZW92ZXI7XG52YXIgVm9pY2VvdmVyT2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWb2ljZW92ZXJPYmplY3RGYWN0b3J5KCkge1xuICAgIH1cbiAgICBWb2ljZW92ZXJPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVOZXcgPSBmdW5jdGlvbiAoZmlsZW5hbWUsIGZpbGVTaXplQnl0ZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWb2ljZW92ZXIoZmlsZW5hbWUsIGZpbGVTaXplQnl0ZXMsIGZhbHNlKTtcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIHNpbmNlICd0cmFuc2xhdGlvbkJhY2tlbmREaWN0JyBpcyBhIGRpY3Qgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkIGtleXNcbiAgICAvLyB3aGljaCBnaXZlcyB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2ZcbiAgICAvLyBjYW1lbENhc2luZy5cbiAgICBWb2ljZW92ZXJPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tQmFja2VuZERpY3QgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25CYWNrZW5kRGljdCkge1xuICAgICAgICByZXR1cm4gbmV3IFZvaWNlb3Zlcih0cmFuc2xhdGlvbkJhY2tlbmREaWN0LmZpbGVuYW1lLCB0cmFuc2xhdGlvbkJhY2tlbmREaWN0LmZpbGVfc2l6ZV9ieXRlcywgdHJhbnNsYXRpb25CYWNrZW5kRGljdC5uZWVkc191cGRhdGUpO1xuICAgIH07XG4gICAgVm9pY2VvdmVyT2JqZWN0RmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSlcbiAgICBdLCBWb2ljZW92ZXJPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gVm9pY2VvdmVyT2JqZWN0RmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLlZvaWNlb3Zlck9iamVjdEZhY3RvcnkgPSBWb2ljZW92ZXJPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnVm9pY2VvdmVyT2JqZWN0RmFjdG9yeScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoVm9pY2VvdmVyT2JqZWN0RmFjdG9yeSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgZnJvbnRlbmQgaW5zdGFuY2VzIG9mXG4gKiBXcml0dGVuVHJhbnNsYXRpb24gZG9tYWluIG9iamVjdHMuXG4gKi9cbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBXcml0dGVuVHJhbnNsYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV3JpdHRlblRyYW5zbGF0aW9uKGh0bWwsIG5lZWRzVXBkYXRlKSB7XG4gICAgICAgIHRoaXMuaHRtbCA9IGh0bWw7XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGUgPSBuZWVkc1VwZGF0ZTtcbiAgICB9XG4gICAgV3JpdHRlblRyYW5zbGF0aW9uLnByb3RvdHlwZS5nZXRIdG1sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5odG1sO1xuICAgIH07XG4gICAgV3JpdHRlblRyYW5zbGF0aW9uLnByb3RvdHlwZS5zZXRIdG1sID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgICAgdGhpcy5odG1sID0gaHRtbDtcbiAgICB9O1xuICAgIFdyaXR0ZW5UcmFuc2xhdGlvbi5wcm90b3R5cGUubWFya0FzTmVlZGluZ1VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgfTtcbiAgICBXcml0dGVuVHJhbnNsYXRpb24ucHJvdG90eXBlLnRvZ2dsZU5lZWRzVXBkYXRlQXR0cmlidXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlID0gIXRoaXMubmVlZHNVcGRhdGU7XG4gICAgfTtcbiAgICAvLyBUT0RPKCM3MTc2KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlIHRoZSByZXR1cm4gdHlwZSBpcyBhIGRpY3Qgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkIGtleXMgd2hpY2hcbiAgICAvLyBnaXZlcyB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2YgY2FtZWxDYXNpbmcuXG4gICAgV3JpdHRlblRyYW5zbGF0aW9uLnByb3RvdHlwZS50b0JhY2tlbmREaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaHRtbDogdGhpcy5odG1sLFxuICAgICAgICAgICAgbmVlZHNfdXBkYXRlOiB0aGlzLm5lZWRzVXBkYXRlXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gV3JpdHRlblRyYW5zbGF0aW9uO1xufSgpKTtcbmV4cG9ydHMuV3JpdHRlblRyYW5zbGF0aW9uID0gV3JpdHRlblRyYW5zbGF0aW9uO1xudmFyIFdyaXR0ZW5UcmFuc2xhdGlvbk9iamVjdEZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV3JpdHRlblRyYW5zbGF0aW9uT2JqZWN0RmFjdG9yeSgpIHtcbiAgICB9XG4gICAgV3JpdHRlblRyYW5zbGF0aW9uT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlTmV3ID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBXcml0dGVuVHJhbnNsYXRpb24oaHRtbCwgZmFsc2UpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAndHJhbnNsYXRpb25CYWNrZW5kRGljdCcgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZCBrZXlzXG4gICAgLy8gd2hpY2ggZ2l2ZXMgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mXG4gICAgLy8gY2FtZWxDYXNpbmcuXG4gICAgV3JpdHRlblRyYW5zbGF0aW9uT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRnJvbUJhY2tlbmREaWN0ID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uQmFja2VuZERpY3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBXcml0dGVuVHJhbnNsYXRpb24odHJhbnNsYXRpb25CYWNrZW5kRGljdC5odG1sLCB0cmFuc2xhdGlvbkJhY2tlbmREaWN0Lm5lZWRzX3VwZGF0ZSk7XG4gICAgfTtcbiAgICBXcml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KVxuICAgIF0sIFdyaXR0ZW5UcmFuc2xhdGlvbk9iamVjdEZhY3RvcnkpO1xuICAgIHJldHVybiBXcml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuV3JpdHRlblRyYW5zbGF0aW9uT2JqZWN0RmFjdG9yeSA9IFdyaXR0ZW5UcmFuc2xhdGlvbk9iamVjdEZhY3Rvcnk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdXcml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5Jywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShXcml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5KSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgZnJvbnRlbmQgaW5zdGFuY2VzIG9mXG4gKiBXcml0dGVuVHJhbnNsYXRpb25zIGRvbWFpbiBvYmplY3RzLlxuICovXG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgV3JpdHRlblRyYW5zbGF0aW9uT2JqZWN0RmFjdG9yeV8xID0gcmVxdWlyZShcImRvbWFpbi9leHBsb3JhdGlvbi9Xcml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5XCIpO1xudmFyIFdyaXR0ZW5UcmFuc2xhdGlvbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV3JpdHRlblRyYW5zbGF0aW9ucyh0cmFuc2xhdGlvbnNNYXBwaW5nLCB3cml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5KSB7XG4gICAgICAgIHRoaXMudHJhbnNsYXRpb25zTWFwcGluZyA9IHRyYW5zbGF0aW9uc01hcHBpbmc7XG4gICAgICAgIHRoaXMuX3dyaXR0ZW5UcmFuc2xhdGlvbk9iamVjdEZhY3RvcnkgPSB3cml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5O1xuICAgIH1cbiAgICBXcml0dGVuVHJhbnNsYXRpb25zLnByb3RvdHlwZS5nZXRBbGxDb250ZW50SWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnRyYW5zbGF0aW9uc01hcHBpbmcpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgcmV0dXJuIHR5cGUgaXMgYSBkaWN0IHdob3NlIGV4YWN0IHR5cGUgbmVlZHMgdG8gYmVcbiAgICAvLyBmb3VuZCBieSBkb2luZyBhIGdvb2QgcmVzZWFyY2guXG4gICAgV3JpdHRlblRyYW5zbGF0aW9ucy5wcm90b3R5cGUuZ2V0V3JpdHRlblRyYW5zbGF0aW9uID0gZnVuY3Rpb24gKGNvbnRlbnRJZCwgbGFuZ0NvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRpb25zTWFwcGluZ1tjb250ZW50SWRdW2xhbmdDb2RlXTtcbiAgICB9O1xuICAgIFdyaXR0ZW5UcmFuc2xhdGlvbnMucHJvdG90eXBlLm1hcmtBbGxUcmFuc2xhdGlvbnNBc05lZWRpbmdVcGRhdGUgPSBmdW5jdGlvbiAoY29udGVudElkKSB7XG4gICAgICAgIHZhciBsYW5ndWFnZUNvZGVUb1dyaXR0ZW5UcmFuc2xhdGlvbiA9ICh0aGlzLnRyYW5zbGF0aW9uc01hcHBpbmdbY29udGVudElkXSk7XG4gICAgICAgIGZvciAodmFyIGxhbmd1YWdlQ29kZSBpbiBsYW5ndWFnZUNvZGVUb1dyaXR0ZW5UcmFuc2xhdGlvbikge1xuICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlVG9Xcml0dGVuVHJhbnNsYXRpb25bbGFuZ3VhZ2VDb2RlXS5tYXJrQXNOZWVkaW5nVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdyaXR0ZW5UcmFuc2xhdGlvbnMucHJvdG90eXBlLmdldFRyYW5zbGF0aW9uc0xhbmd1YWdlQ29kZXMgPSBmdW5jdGlvbiAoY29udGVudElkKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnRyYW5zbGF0aW9uc01hcHBpbmdbY29udGVudElkXSk7XG4gICAgfTtcbiAgICBXcml0dGVuVHJhbnNsYXRpb25zLnByb3RvdHlwZS5oYXNXcml0dGVuVHJhbnNsYXRpb24gPSBmdW5jdGlvbiAoY29udGVudElkLCBsYW5nYXVnZUNvZGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRyYW5zbGF0aW9uc01hcHBpbmcuaGFzT3duUHJvcGVydHkoY29udGVudElkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRyYW5zbGF0aW9uc0xhbmd1YWdlQ29kZXMoY29udGVudElkKS5pbmRleE9mKGxhbmdhdWdlQ29kZSkgIT09IC0xO1xuICAgIH07XG4gICAgV3JpdHRlblRyYW5zbGF0aW9ucy5wcm90b3R5cGUuaGFzVW5mbGFnZ2VkV3JpdHRlblRyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uIChjb250ZW50SWQpIHtcbiAgICAgICAgdmFyIHdyaXR0ZW5UcmFuc2xhdGlvbnMgPSB0aGlzLnRyYW5zbGF0aW9uc01hcHBpbmdbY29udGVudElkXTtcbiAgICAgICAgZm9yICh2YXIgbGFuZ3VhZ2VDb2RlIGluIHdyaXR0ZW5UcmFuc2xhdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghd3JpdHRlblRyYW5zbGF0aW9uc1tsYW5ndWFnZUNvZGVdLm5lZWRzVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgV3JpdHRlblRyYW5zbGF0aW9ucy5wcm90b3R5cGUuYWRkQ29udGVudElkID0gZnVuY3Rpb24gKGNvbnRlbnRJZCkge1xuICAgICAgICBpZiAodGhpcy50cmFuc2xhdGlvbnNNYXBwaW5nLmhhc093blByb3BlcnR5KGNvbnRlbnRJZCkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdUcnlpbmcgdG8gYWRkIGR1cGxpY2F0ZSBjb250ZW50IGlkLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhbnNsYXRpb25zTWFwcGluZ1tjb250ZW50SWRdID0ge307XG4gICAgfTtcbiAgICBXcml0dGVuVHJhbnNsYXRpb25zLnByb3RvdHlwZS5kZWxldGVDb250ZW50SWQgPSBmdW5jdGlvbiAoY29udGVudElkKSB7XG4gICAgICAgIGlmICghdGhpcy50cmFuc2xhdGlvbnNNYXBwaW5nLmhhc093blByb3BlcnR5KGNvbnRlbnRJZCkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdVbmFibGUgdG8gZmluZCB0aGUgZ2l2ZW4gY29udGVudCBpZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy50cmFuc2xhdGlvbnNNYXBwaW5nW2NvbnRlbnRJZF07XG4gICAgfTtcbiAgICBXcml0dGVuVHJhbnNsYXRpb25zLnByb3RvdHlwZS5hZGRXcml0dGVuVHJhbnNsYXRpb24gPSBmdW5jdGlvbiAoY29udGVudElkLCBsYW5ndWFnZUNvZGUsIGh0bWwpIHtcbiAgICAgICAgdmFyIHdyaXR0ZW5UcmFuc2xhdGlvbnMgPSB0aGlzLnRyYW5zbGF0aW9uc01hcHBpbmdbY29udGVudElkXTtcbiAgICAgICAgaWYgKHdyaXR0ZW5UcmFuc2xhdGlvbnMuaGFzT3duUHJvcGVydHkobGFuZ3VhZ2VDb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1RyeWluZyB0byBhZGQgZHVwbGljYXRlIGxhbmd1YWdlIGNvZGUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JpdHRlblRyYW5zbGF0aW9uc1tsYW5ndWFnZUNvZGVdID0gKHRoaXMuX3dyaXR0ZW5UcmFuc2xhdGlvbk9iamVjdEZhY3RvcnkuY3JlYXRlTmV3KGh0bWwpKTtcbiAgICB9O1xuICAgIFdyaXR0ZW5UcmFuc2xhdGlvbnMucHJvdG90eXBlLnVwZGF0ZVdyaXR0ZW5UcmFuc2xhdGlvbkh0bWwgPSBmdW5jdGlvbiAoY29udGVudElkLCBsYW5ndWFnZUNvZGUsIGh0bWwpIHtcbiAgICAgICAgdmFyIHdyaXR0ZW5UcmFuc2xhdGlvbnMgPSB0aGlzLnRyYW5zbGF0aW9uc01hcHBpbmdbY29udGVudElkXTtcbiAgICAgICAgaWYgKCF3cml0dGVuVHJhbnNsYXRpb25zLmhhc093blByb3BlcnR5KGxhbmd1YWdlQ29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdVbmFibGUgdG8gZmluZCB0aGUgZ2l2ZW4gbGFuZ3VhZ2UgY29kZS4nKTtcbiAgICAgICAgfVxuICAgICAgICB3cml0dGVuVHJhbnNsYXRpb25zW2xhbmd1YWdlQ29kZV0uc2V0SHRtbChodG1sKTtcbiAgICAgICAgLy8gTWFya2luZyB0cmFuc2xhdGlvbiB1cGRhdGVkLlxuICAgICAgICB3cml0dGVuVHJhbnNsYXRpb25zW2xhbmd1YWdlQ29kZV0ubmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICB9O1xuICAgIFdyaXR0ZW5UcmFuc2xhdGlvbnMucHJvdG90eXBlLnRvZ2dsZU5lZWRzVXBkYXRlQXR0cmlidXRlID0gZnVuY3Rpb24gKGNvbnRlbnRJZCwgbGFuZ3VhZ2VDb2RlKSB7XG4gICAgICAgIHZhciB3cml0dGVuVHJhbnNsYXRpb25zID0gdGhpcy50cmFuc2xhdGlvbnNNYXBwaW5nW2NvbnRlbnRJZF07XG4gICAgICAgIHdyaXR0ZW5UcmFuc2xhdGlvbnNbbGFuZ3VhZ2VDb2RlXS50b2dnbGVOZWVkc1VwZGF0ZUF0dHJpYnV0ZSgpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgcmV0dXJuIHR5cGUgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZCBrZXlzIHdoaWNoXG4gICAgLy8gZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2YgY2FtZWxDYXNpbmcuXG4gICAgV3JpdHRlblRyYW5zbGF0aW9ucy5wcm90b3R5cGUudG9CYWNrZW5kRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRyYW5zbGF0aW9uc01hcHBpbmdEaWN0ID0ge307XG4gICAgICAgIGZvciAodmFyIGNvbnRlbnRJZCBpbiB0aGlzLnRyYW5zbGF0aW9uc01hcHBpbmcpIHtcbiAgICAgICAgICAgIHZhciBsYW5nYXVnZVRvV3JpdHRlblRyYW5zbGF0aW9uID0gdGhpcy50cmFuc2xhdGlvbnNNYXBwaW5nW2NvbnRlbnRJZF07XG4gICAgICAgICAgICB2YXIgbGFuZ2F1Z2VUb1dyaXR0ZW5UcmFuc2xhdGlvbkRpY3QgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGxhbmdhdWdlVG9Xcml0dGVuVHJhbnNsYXRpb24pLmZvckVhY2goZnVuY3Rpb24gKGxhbmcpIHtcbiAgICAgICAgICAgICAgICBsYW5nYXVnZVRvV3JpdHRlblRyYW5zbGF0aW9uRGljdFtsYW5nXSA9IChsYW5nYXVnZVRvV3JpdHRlblRyYW5zbGF0aW9uW2xhbmddLnRvQmFja2VuZERpY3QoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uc01hcHBpbmdEaWN0W2NvbnRlbnRJZF0gPSBsYW5nYXVnZVRvV3JpdHRlblRyYW5zbGF0aW9uRGljdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB0cmFuc2xhdGlvbnNfbWFwcGluZzogdHJhbnNsYXRpb25zTWFwcGluZ0RpY3QgfTtcbiAgICB9O1xuICAgIHJldHVybiBXcml0dGVuVHJhbnNsYXRpb25zO1xufSgpKTtcbmV4cG9ydHMuV3JpdHRlblRyYW5zbGF0aW9ucyA9IFdyaXR0ZW5UcmFuc2xhdGlvbnM7XG52YXIgV3JpdHRlblRyYW5zbGF0aW9uc09iamVjdEZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV3JpdHRlblRyYW5zbGF0aW9uc09iamVjdEZhY3Rvcnkod3JpdHRlblRyYW5zbGF0aW9uT2JqZWN0RmFjdG9yeSkge1xuICAgICAgICB0aGlzLndyaXR0ZW5UcmFuc2xhdGlvbk9iamVjdEZhY3RvcnkgPSB3cml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5O1xuICAgIH1cbiAgICAvLyBUT0RPKCM3MTc2KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlICd3cml0dGVuVHJhbnNsYXRpb25zRGljdCcgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZFxuICAgIC8vIGtleXMgd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2ZcbiAgICAvLyBjYW1lbENhc2luZy5cbiAgICBXcml0dGVuVHJhbnNsYXRpb25zT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRnJvbUJhY2tlbmREaWN0ID0gZnVuY3Rpb24gKHdyaXR0ZW5UcmFuc2xhdGlvbnNEaWN0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciB0cmFuc2xhdGlvbnNNYXBwaW5nID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHdyaXR0ZW5UcmFuc2xhdGlvbnNEaWN0LnRyYW5zbGF0aW9uc19tYXBwaW5nKS5mb3JFYWNoKGZ1bmN0aW9uIChjb250ZW50SWQpIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uc01hcHBpbmdbY29udGVudElkXSA9IHt9O1xuICAgICAgICAgICAgdmFyIGxhbmd1YWdlQ29kZVRvV3JpdHRlblRyYW5zbGF0aW9uRGljdCA9ICh3cml0dGVuVHJhbnNsYXRpb25zRGljdC50cmFuc2xhdGlvbnNfbWFwcGluZ1tjb250ZW50SWRdKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGxhbmd1YWdlQ29kZVRvV3JpdHRlblRyYW5zbGF0aW9uRGljdCkuZm9yRWFjaChmdW5jdGlvbiAobGFuZ0NvZGUpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbnNNYXBwaW5nW2NvbnRlbnRJZF1bbGFuZ0NvZGVdID0gKF90aGlzLndyaXR0ZW5UcmFuc2xhdGlvbk9iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KGxhbmd1YWdlQ29kZVRvV3JpdHRlblRyYW5zbGF0aW9uRGljdFtsYW5nQ29kZV0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBXcml0dGVuVHJhbnNsYXRpb25zKHRyYW5zbGF0aW9uc01hcHBpbmcsIHRoaXMud3JpdHRlblRyYW5zbGF0aW9uT2JqZWN0RmFjdG9yeSk7XG4gICAgfTtcbiAgICBXcml0dGVuVHJhbnNsYXRpb25zT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgV3JpdHRlblRyYW5zbGF0aW9ucyh7fSwgdGhpcy53cml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5KTtcbiAgICB9O1xuICAgIHZhciBfYTtcbiAgICBXcml0dGVuVHJhbnNsYXRpb25zT2JqZWN0RmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBXcml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5XzEuV3JpdHRlblRyYW5zbGF0aW9uT2JqZWN0RmFjdG9yeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBXcml0dGVuVHJhbnNsYXRpb25PYmplY3RGYWN0b3J5XzEuV3JpdHRlblRyYW5zbGF0aW9uT2JqZWN0RmFjdG9yeSkgPT09IFwiZnVuY3Rpb25cIiA/IF9hIDogT2JqZWN0XSlcbiAgICBdLCBXcml0dGVuVHJhbnNsYXRpb25zT2JqZWN0RmFjdG9yeSk7XG4gICAgcmV0dXJuIFdyaXR0ZW5UcmFuc2xhdGlvbnNPYmplY3RGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuV3JpdHRlblRyYW5zbGF0aW9uc09iamVjdEZhY3RvcnkgPSBXcml0dGVuVHJhbnNsYXRpb25zT2JqZWN0RmFjdG9yeTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1dyaXR0ZW5UcmFuc2xhdGlvbnNPYmplY3RGYWN0b3J5Jywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShXcml0dGVuVHJhbnNsYXRpb25zT2JqZWN0RmFjdG9yeSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTcgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIHNob3dpbmcgbGVhcm5lciBkYXNoYm9hcmQgaWNvbnMuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnbGVhcm5lckRhc2hib2FyZEljb25zJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgZ2V0QWN0aXZpdHlUeXBlOiAnJmFjdGl2aXR5VHlwZScsXG4gICAgICAgICAgICAgICAgZ2V0QWN0aXZpdHlJZDogJyZhY3Rpdml0eUlkJyxcbiAgICAgICAgICAgICAgICBnZXRBY3Rpdml0eVRpdGxlOiAnJmFjdGl2aXR5VGl0bGUnLFxuICAgICAgICAgICAgICAgIGFjdGl2aXR5QWN0aXZlOiAnPWFjdGl2aXR5QWN0aXZlJyxcbiAgICAgICAgICAgICAgICBpc0NvbnRhaW5lck5hcnJvdzogJyZjb250YWluZXJJc05hcnJvdycsXG4gICAgICAgICAgICAgICAgaXNBZGRUb1BsYXlsaXN0SWNvblNob3duOiAnJmFkZFRvUGxheWxpc3RJY29uSXNTaG93bidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9kb21haW4vbGVhcm5lcl9kYXNoYm9hcmQvJyArXG4gICAgICAgICAgICAgICAgJ2xlYXJuZXJfZGFzaGJvYXJkX2ljb25zX2RpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgJyRzY29wZScsICdMZWFybmVyRGFzaGJvYXJkSWRzQmFja2VuZEFwaVNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdMZWFybmVyRGFzaGJvYXJkQWN0aXZpdHlJZHNPYmplY3RGYWN0b3J5JyxcbiAgICAgICAgICAgICAgICAnTGVhcm5lclBsYXlsaXN0U2VydmljZScsICdBQ1RJVklUWV9UWVBFX0NPTExFQ1RJT04nLFxuICAgICAgICAgICAgICAgICdBQ1RJVklUWV9UWVBFX0VYUExPUkFUSU9OJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCBMZWFybmVyRGFzaGJvYXJkSWRzQmFja2VuZEFwaVNlcnZpY2UsIExlYXJuZXJEYXNoYm9hcmRBY3Rpdml0eUlkc09iamVjdEZhY3RvcnksIExlYXJuZXJQbGF5bGlzdFNlcnZpY2UsIEFDVElWSVRZX1RZUEVfQ09MTEVDVElPTiwgQUNUSVZJVFlfVFlQRV9FWFBMT1JBVElPTikge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWN0aXZpdHlJc0N1cnJlbnRseUhvdmVyZWRPdmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBsYXlsaXN0VG9vbHRpcElzRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZW5hYmxlUGxheWxpc3RUb29sdGlwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBsYXlsaXN0VG9vbHRpcElzRW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmxlUGxheWxpc3RUb29sdGlwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBsYXlsaXN0VG9vbHRpcElzRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCdhY3Rpdml0eUFjdGl2ZScsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFjdGl2aXR5SXNDdXJyZW50bHlIb3ZlcmVkT3ZlciA9ICRzY29wZS5hY3Rpdml0eUFjdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIExlYXJuZXJEYXNoYm9hcmRJZHNCYWNrZW5kQXBpU2VydmljZS5mZXRjaExlYXJuZXJEYXNoYm9hcmRJZHMoKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxlYXJuZXJEYXNoYm9hcmRBY3Rpdml0eUlkcyA9IChMZWFybmVyRGFzaGJvYXJkQWN0aXZpdHlJZHNPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChyZXNwb25zZS5sZWFybmVyX2Rhc2hib2FyZF9hY3Rpdml0eV9pZHMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXRIb3ZlclN0YXRlID0gZnVuY3Rpb24gKGhvdmVyU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hY3Rpdml0eUlzQ3VycmVudGx5SG92ZXJlZE92ZXIgPSBob3ZlclN0YXRlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuQWN0aXZpdHlCZUFkZGVkVG9MZWFybmVyUGxheWxpc3QgPSBmdW5jdGlvbiAoYWN0aXZpdHlJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sZWFybmVyRGFzaGJvYXJkQWN0aXZpdHlJZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxlYXJuZXJEYXNoYm9hcmRBY3Rpdml0eUlkcy5pbmNsdWRlc0FjdGl2aXR5KGFjdGl2aXR5SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaXNDb250YWluZXJOYXJyb3coKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmFjdGl2aXR5SXNDdXJyZW50bHlIb3ZlcmVkT3ZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJlbG9uZ3NUb0xlYXJuZXJQbGF5bGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpdml0eVR5cGUgPSAkc2NvcGUuZ2V0QWN0aXZpdHlUeXBlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxlYXJuZXJEYXNoYm9hcmRBY3Rpdml0eUlkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZpdHlUeXBlID09PSBBQ1RJVklUWV9UWVBFX0VYUExPUkFUSU9OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoJHNjb3BlLmxlYXJuZXJEYXNoYm9hcmRBY3Rpdml0eUlkcy5iZWxvbmdzVG9FeHBsb3JhdGlvblBsYXlsaXN0KCRzY29wZS5nZXRBY3Rpdml0eUlkKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWN0aXZpdHlUeXBlID09PSBBQ1RJVklUWV9UWVBFX0NPTExFQ1RJT04pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgkc2NvcGUubGVhcm5lckRhc2hib2FyZEFjdGl2aXR5SWRzLmJlbG9uZ3NUb0NvbGxlY3Rpb25QbGF5bGlzdCgkc2NvcGUuZ2V0QWN0aXZpdHlJZCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYmVsb25nc1RvQ29tcGxldGVkQWN0aXZpdGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpdml0eVR5cGUgPSAkc2NvcGUuZ2V0QWN0aXZpdHlUeXBlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxlYXJuZXJEYXNoYm9hcmRBY3Rpdml0eUlkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZpdHlUeXBlID09PSBBQ1RJVklUWV9UWVBFX0VYUExPUkFUSU9OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoJHNjb3BlLmxlYXJuZXJEYXNoYm9hcmRBY3Rpdml0eUlkcy5iZWxvbmdzVG9Db21wbGV0ZWRFeHBsb3JhdGlvbnMoJHNjb3BlLmdldEFjdGl2aXR5SWQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhY3Rpdml0eVR5cGUgPT09IEFDVElWSVRZX1RZUEVfQ09MTEVDVElPTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCRzY29wZS5sZWFybmVyRGFzaGJvYXJkQWN0aXZpdHlJZHMuYmVsb25nc1RvQ29tcGxldGVkQ29sbGVjdGlvbnMoJHNjb3BlLmdldEFjdGl2aXR5SWQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJlbG9uZ3NUb0luY29tcGxldGVBY3Rpdml0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2aXR5VHlwZSA9ICRzY29wZS5nZXRBY3Rpdml0eVR5cGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubGVhcm5lckRhc2hib2FyZEFjdGl2aXR5SWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpdml0eVR5cGUgPT09IEFDVElWSVRZX1RZUEVfRVhQTE9SQVRJT04pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgkc2NvcGUubGVhcm5lckRhc2hib2FyZEFjdGl2aXR5SWRzLmJlbG9uZ3NUb0luY29tcGxldGVFeHBsb3JhdGlvbnMoJHNjb3BlLmdldEFjdGl2aXR5SWQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhY3Rpdml0eVR5cGUgPT09IEFDVElWSVRZX1RZUEVfQ09MTEVDVElPTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCRzY29wZS5sZWFybmVyRGFzaGJvYXJkQWN0aXZpdHlJZHMuYmVsb25nc1RvSW5jb21wbGV0ZUNvbGxlY3Rpb25zKCRzY29wZS5nZXRBY3Rpdml0eUlkKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRUb0xlYXJuZXJQbGF5bGlzdCA9IGZ1bmN0aW9uIChhY3Rpdml0eUlkLCBhY3Rpdml0eVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1N1Y2Nlc3NmdWxseUFkZGVkID0gKExlYXJuZXJQbGF5bGlzdFNlcnZpY2UuYWRkVG9MZWFybmVyUGxheWxpc3QoYWN0aXZpdHlJZCwgYWN0aXZpdHlUeXBlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdWNjZXNzZnVsbHlBZGRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpdml0eVR5cGUgPT09IEFDVElWSVRZX1RZUEVfRVhQTE9SQVRJT04pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGVhcm5lckRhc2hib2FyZEFjdGl2aXR5SWRzLmFkZFRvRXhwbG9yYXRpb25MZWFybmVyUGxheWxpc3QoYWN0aXZpdHlJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhY3Rpdml0eVR5cGUgPT09IEFDVElWSVRZX1RZUEVfQ09MTEVDVElPTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sZWFybmVyRGFzaGJvYXJkQWN0aXZpdHlJZHMuYWRkVG9Db2xsZWN0aW9uTGVhcm5lclBsYXlsaXN0KGFjdGl2aXR5SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FibGVQbGF5bGlzdFRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZUZyb21MZWFybmVyUGxheWxpc3QgPSBmdW5jdGlvbiAoYWN0aXZpdHlJZCwgYWN0aXZpdHlUaXRsZSwgYWN0aXZpdHlUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNTdWNjZXNzZnVsbHlSZW1vdmVkID0gKExlYXJuZXJQbGF5bGlzdFNlcnZpY2UucmVtb3ZlRnJvbUxlYXJuZXJQbGF5bGlzdChhY3Rpdml0eUlkLCBhY3Rpdml0eVRpdGxlLCBhY3Rpdml0eVR5cGUsICRzY29wZS5sZWFybmVyRGFzaGJvYXJkQWN0aXZpdHlJZHMpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIGluc3RhbmNlcyBvZiBGcmFjdGlvblxuICogZG9tYWluIG9iamVjdHMuXG4gKi9cbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBvYmplY3RzX2RvbWFpbl9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJkb21haW4vb2JqZWN0cy9vYmplY3RzLWRvbWFpbi5jb25zdGFudHNcIik7XG52YXIgRnJhY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnJhY3Rpb24oaXNOZWdhdGl2ZSwgd2hvbGVOdW1iZXIsIG51bWVyYXRvciwgZGVub21pbmF0b3IpIHtcbiAgICAgICAgdGhpcy5pc05lZ2F0aXZlID0gaXNOZWdhdGl2ZTtcbiAgICAgICAgdGhpcy53aG9sZU51bWJlciA9IHdob2xlTnVtYmVyO1xuICAgICAgICB0aGlzLm51bWVyYXRvciA9IG51bWVyYXRvcjtcbiAgICAgICAgdGhpcy5kZW5vbWluYXRvciA9IGRlbm9taW5hdG9yO1xuICAgIH1cbiAgICBGcmFjdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmcmFjdGlvblN0cmluZyA9ICcnO1xuICAgICAgICBpZiAodGhpcy5udW1lcmF0b3IgIT09IDApIHtcbiAgICAgICAgICAgIGZyYWN0aW9uU3RyaW5nICs9IHRoaXMubnVtZXJhdG9yICsgJy8nICsgdGhpcy5kZW5vbWluYXRvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy53aG9sZU51bWJlciAhPT0gMCkge1xuICAgICAgICAgICAgZnJhY3Rpb25TdHJpbmcgPSB0aGlzLndob2xlTnVtYmVyICsgJyAnICsgZnJhY3Rpb25TdHJpbmc7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZnJhY3Rpb25hbCBwYXJ0IHdhcyBlbXB0eSB0aGVuIHRoZXJlIHdpbGwgYmUgYSB0cmFpbGluZ1xuICAgICAgICAgICAgLy8gd2hpdGVzcGFjZS5cbiAgICAgICAgICAgIGZyYWN0aW9uU3RyaW5nID0gZnJhY3Rpb25TdHJpbmcudHJpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUgJiYgZnJhY3Rpb25TdHJpbmcgIT09ICcnKSB7XG4gICAgICAgICAgICBmcmFjdGlvblN0cmluZyA9ICctJyArIGZyYWN0aW9uU3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFjdGlvblN0cmluZyA9PT0gJycgPyAnMCcgOiBmcmFjdGlvblN0cmluZztcbiAgICB9O1xuICAgIEZyYWN0aW9uLnByb3RvdHlwZS50b0RpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc05lZ2F0aXZlOiB0aGlzLmlzTmVnYXRpdmUsXG4gICAgICAgICAgICB3aG9sZU51bWJlcjogdGhpcy53aG9sZU51bWJlcixcbiAgICAgICAgICAgIG51bWVyYXRvcjogdGhpcy5udW1lcmF0b3IsXG4gICAgICAgICAgICBkZW5vbWluYXRvcjogdGhpcy5kZW5vbWluYXRvclxuICAgICAgICB9O1xuICAgIH07XG4gICAgRnJhY3Rpb24ucHJvdG90eXBlLnRvRmxvYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3RhbFBhcnRzID0gKHRoaXMud2hvbGVOdW1iZXIgKiB0aGlzLmRlbm9taW5hdG9yKSArIHRoaXMubnVtZXJhdG9yO1xuICAgICAgICB2YXIgZmxvYXRWYWwgPSAodG90YWxQYXJ0cyAvIHRoaXMuZGVub21pbmF0b3IpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc05lZ2F0aXZlID8gLWZsb2F0VmFsIDogZmxvYXRWYWw7XG4gICAgfTtcbiAgICBGcmFjdGlvbi5wcm90b3R5cGUuZ2V0SW50ZWdlclBhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzTmVnYXRpdmUgPyAtdGhpcy53aG9sZU51bWJlciA6IHRoaXMud2hvbGVOdW1iZXI7XG4gICAgfTtcbiAgICBGcmFjdGlvbi5wcm90b3R5cGUuY29udmVydFRvU2ltcGxlc3RGb3JtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ2NkID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgIHJldHVybiB5ID09PSAwID8geCA6IGdjZCh5LCB4ICUgeSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnID0gZ2NkKHRoaXMubnVtZXJhdG9yLCB0aGlzLmRlbm9taW5hdG9yKTtcbiAgICAgICAgdmFyIG51bWVyYXRvciA9IHRoaXMubnVtZXJhdG9yIC8gZztcbiAgICAgICAgdmFyIGRlbm9taW5hdG9yID0gdGhpcy5kZW5vbWluYXRvciAvIGc7XG4gICAgICAgIHJldHVybiBuZXcgRnJhY3Rpb24odGhpcy5pc05lZ2F0aXZlLCB0aGlzLndob2xlTnVtYmVyLCBudW1lcmF0b3IsIGRlbm9taW5hdG9yKTtcbiAgICB9O1xuICAgIEZyYWN0aW9uLnByb3RvdHlwZS5oYXNOb256ZXJvSW50ZWdlclBhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndob2xlTnVtYmVyICE9PSAwO1xuICAgIH07XG4gICAgRnJhY3Rpb24ucHJvdG90eXBlLmlzSW1wcm9wZXJGcmFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVub21pbmF0b3IgPD0gdGhpcy5udW1lcmF0b3I7XG4gICAgfTtcbiAgICByZXR1cm4gRnJhY3Rpb247XG59KCkpO1xuZXhwb3J0cy5GcmFjdGlvbiA9IEZyYWN0aW9uO1xudmFyIEZyYWN0aW9uT2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGcmFjdGlvbk9iamVjdEZhY3RvcnkoKSB7XG4gICAgfVxuICAgIEZyYWN0aW9uT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuZnJvbVJhd0lucHV0U3RyaW5nID0gZnVuY3Rpb24gKHJhd0lucHV0KSB7XG4gICAgICAgIHZhciBJTlZBTElEX0NIQVJTX1JFR0VYID0gL1teXFxkXFxzXFwvLV0vZztcbiAgICAgICAgaWYgKElOVkFMSURfQ0hBUlNfUkVHRVgudGVzdChyYXdJbnB1dCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihvYmplY3RzX2RvbWFpbl9jb25zdGFudHNfMS5PYmplY3RzRG9tYWluQ29uc3RhbnRzLkZSQUNUSU9OX1BBUlNJTkdfRVJST1JTLklOVkFMSURfQ0hBUlMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBGUkFDVElPTl9SRUdFWCA9IC9eXFxzKi0/XFxzKigoXFxkKlxccypcXGQrXFxzKlxcL1xccypcXGQrKXxcXGQrKVxccyokLztcbiAgICAgICAgaWYgKCFGUkFDVElPTl9SRUdFWC50ZXN0KHJhd0lucHV0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG9iamVjdHNfZG9tYWluX2NvbnN0YW50c18xLk9iamVjdHNEb21haW5Db25zdGFudHMuRlJBQ1RJT05fUEFSU0lOR19FUlJPUlMuSU5WQUxJRF9GT1JNQVQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc05lZ2F0aXZlID0gZmFsc2U7XG4gICAgICAgIHZhciB3aG9sZU51bWJlciA9IDA7XG4gICAgICAgIHZhciBudW1lcmF0b3IgPSAwO1xuICAgICAgICB2YXIgZGVub21pbmF0b3IgPSAxO1xuICAgICAgICByYXdJbnB1dCA9IHJhd0lucHV0LnRyaW0oKTtcbiAgICAgICAgaWYgKHJhd0lucHV0LmNoYXJBdCgwKSA9PT0gJy0nKSB7XG4gICAgICAgICAgICBpc05lZ2F0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgbmVnYXRpdmUgY2hhciBmcm9tIHRoZSBzdHJpbmcuXG4gICAgICAgICAgICByYXdJbnB1dCA9IHJhd0lucHV0LnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaWx0ZXIgcmVzdWx0IGZyb20gc3BsaXQgdG8gcmVtb3ZlIGVtcHR5IHN0cmluZ3MuXG4gICAgICAgIHZhciBudW1iZXJzID0gcmF3SW5wdXQuc3BsaXQoL1xcL3xcXHMvZykuZmlsdGVyKGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgLy8gVGhlIGVtcHR5IHN0cmluZyB3aWxsIGV2YWx1YXRlIHRvIGZhbHNlLlxuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4odG9rZW4pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG51bWJlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB3aG9sZU51bWJlciA9IHBhcnNlSW50KG51bWJlcnNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG51bWJlcnMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBudW1lcmF0b3IgPSBwYXJzZUludChudW1iZXJzWzBdKTtcbiAgICAgICAgICAgIGRlbm9taW5hdG9yID0gcGFyc2VJbnQobnVtYmVyc1sxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBudW1iZXJzLmxlbmd0aCA9PSAzXG4gICAgICAgICAgICB3aG9sZU51bWJlciA9IHBhcnNlSW50KG51bWJlcnNbMF0pO1xuICAgICAgICAgICAgbnVtZXJhdG9yID0gcGFyc2VJbnQobnVtYmVyc1sxXSk7XG4gICAgICAgICAgICBkZW5vbWluYXRvciA9IHBhcnNlSW50KG51bWJlcnNbMl0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZW5vbWluYXRvciA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG9iamVjdHNfZG9tYWluX2NvbnN0YW50c18xLk9iamVjdHNEb21haW5Db25zdGFudHMuRlJBQ1RJT05fUEFSU0lOR19FUlJPUlMuRElWSVNJT05fQllfWkVSTyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBGcmFjdGlvbihpc05lZ2F0aXZlLCB3aG9sZU51bWJlciwgbnVtZXJhdG9yLCBkZW5vbWluYXRvcik7XG4gICAgfTtcbiAgICBGcmFjdGlvbk9iamVjdEZhY3RvcnkucHJvdG90eXBlLmZyb21EaWN0ID0gZnVuY3Rpb24gKGZyYWN0aW9uRGljdCkge1xuICAgICAgICByZXR1cm4gbmV3IEZyYWN0aW9uKGZyYWN0aW9uRGljdC5pc05lZ2F0aXZlLCBmcmFjdGlvbkRpY3Qud2hvbGVOdW1iZXIsIGZyYWN0aW9uRGljdC5udW1lcmF0b3IsIGZyYWN0aW9uRGljdC5kZW5vbWluYXRvcik7XG4gICAgfTtcbiAgICBGcmFjdGlvbk9iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgRnJhY3Rpb25PYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gRnJhY3Rpb25PYmplY3RGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuRnJhY3Rpb25PYmplY3RGYWN0b3J5ID0gRnJhY3Rpb25PYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnRnJhY3Rpb25PYmplY3RGYWN0b3J5Jywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShGcmFjdGlvbk9iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRmFjdG9yeSBmb3IgY3JlYXRpbmcgaW5zdGFuY2VzIG9mIE51bWJlcldpdGhVbml0c1xuICogZG9tYWluIG9iamVjdHMuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi9vYmplY3RzL0ZyYWN0aW9uT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL29iamVjdHMvVW5pdHNPYmplY3RGYWN0b3J5LnRzJyk7XG5yZXF1aXJlKCdkb21haW4vb2JqZWN0cy9vYmplY3RzLWRvbWFpbi5jb25zdGFudHMuYWpzLnRzJyk7XG4vKiBHdWlkZWxpbmVzIGZvciBhZGRpbmcgbmV3IGN1c3RvbSBjdXJyZW5jeSB1bml0cyBpbiBOdW1iZXIgd2l0aCBVbml0c1xuICBpbnRlcmFjdGlvbjpcblxuICBTaW1wbHkgYWRkIGN1cnJlbmN5IHVuaXQgdG8gdGhlIGRpY3Qgb2YgQ1VSUkVOQ1lfVU5JVFMgY29uc3RhbnQgYW5kIGl0IHdpbGxcbiAgYmUgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgYWxsb3dlZCBjdXN0b20gdW5pdHMuIEZvbGxvd2luZyBhcmUgdGhlIGtleXNcbiAgdG8gYmUgZGVmaW5lZCB3aXRoaW4gdGhlIHVuaXQgZGljdDpcbiAgICBuYW1lOiAgVGhlIG5hbWUgb2YgdGhlIGN1c3RvbSBjdXJyZW5jeSB1bml0LlxuICAgIGFsaWFzZXM6IE90aGVyIGFsbG93ZWQgY2Fub25pY2FsIGZvcm1zIG9mIHRoZSBjdXJyZW5jeSB1bml0LlxuICAgIGZyb250X3VuaXRzOiBBIGxpc3Qgb2YgYWxsIHRoZSBjdXJyZW5jeSBzeW1ib2xzIHRoYXQgYXJlIGFkZGVkIHRvIHRoZSBmcm9udFxuICAgICAgKGxpa2UtICQsIFJzLCDigrkpLiBLZWVwIGl0IGFuIGVtcHR5IGxpc3QgaWYgbm8gc3ltYm9sIGlzIG5lZWRlZC5cbiAgICBiYXNlX3VuaXQ6IERlZmluZSB0aGUgdW5pdCBpbiB0ZXJtcyBvZiBiYXNlIHVuaXQgb25seSBpZiB0aGUgZGVmaW5lZCBjdXN0b21cbiAgICAgIHVuaXQgaXMgYSBzdWIgdW5pdCBlbHNlIGFzc2lnbiBpdCAnbnVsbCcgdmFsdWUuKi9cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ051bWJlcldpdGhVbml0c09iamVjdEZhY3RvcnknLCBbXG4gICAgJ0ZyYWN0aW9uT2JqZWN0RmFjdG9yeScsICdVbml0c09iamVjdEZhY3RvcnknLCAnQ1VSUkVOQ1lfVU5JVFMnLFxuICAgICdOVU1CRVJfV0lUSF9VTklUU19QQVJTSU5HX0VSUk9SUycsIGZ1bmN0aW9uIChGcmFjdGlvbk9iamVjdEZhY3RvcnksIFVuaXRzT2JqZWN0RmFjdG9yeSwgQ1VSUkVOQ1lfVU5JVFMsIE5VTUJFUl9XSVRIX1VOSVRTX1BBUlNJTkdfRVJST1JTKSB7XG4gICAgICAgIHZhciBOdW1iZXJXaXRoVW5pdHMgPSBmdW5jdGlvbiAodHlwZSwgcmVhbCwgZnJhY3Rpb25PYmosIHVuaXRzT2JqKSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgdGhpcy5yZWFsID0gcmVhbDtcbiAgICAgICAgICAgIHRoaXMuZnJhY3Rpb24gPSBmcmFjdGlvbk9iajtcbiAgICAgICAgICAgIHRoaXMudW5pdHMgPSB1bml0c09iai51bml0cztcbiAgICAgICAgfTtcbiAgICAgICAgTnVtYmVyV2l0aFVuaXRzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBudW1iZXJXaXRoVW5pdHNTdHJpbmcgPSAnJztcbiAgICAgICAgICAgIHZhciB1bml0c1N0cmluZyA9IFVuaXRzT2JqZWN0RmFjdG9yeS5mcm9tTGlzdCh0aGlzLnVuaXRzKS50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKHVuaXRzU3RyaW5nLmluY2x1ZGVzKCckJykpIHtcbiAgICAgICAgICAgICAgICB1bml0c1N0cmluZyA9IHVuaXRzU3RyaW5nLnJlcGxhY2UoJyQnLCAnJyk7XG4gICAgICAgICAgICAgICAgbnVtYmVyV2l0aFVuaXRzU3RyaW5nICs9ICckJyArICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1bml0c1N0cmluZy5pbmNsdWRlcygnUnMnKSkge1xuICAgICAgICAgICAgICAgIHVuaXRzU3RyaW5nID0gdW5pdHNTdHJpbmcucmVwbGFjZSgnUnMnLCAnJyk7XG4gICAgICAgICAgICAgICAgbnVtYmVyV2l0aFVuaXRzU3RyaW5nICs9ICdScycgKyAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodW5pdHNTdHJpbmcuaW5jbHVkZXMoJ+KCuScpKSB7XG4gICAgICAgICAgICAgICAgdW5pdHNTdHJpbmcgPSB1bml0c1N0cmluZy5yZXBsYWNlKCfigrknLCAnJyk7XG4gICAgICAgICAgICAgICAgbnVtYmVyV2l0aFVuaXRzU3RyaW5nICs9ICfigrknICsgJyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3JlYWwnKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyV2l0aFVuaXRzU3RyaW5nICs9IHRoaXMucmVhbCArICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgICAgICAgICAgIG51bWJlcldpdGhVbml0c1N0cmluZyArPSB0aGlzLmZyYWN0aW9uLnRvU3RyaW5nKCkgKyAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBudW1iZXJXaXRoVW5pdHNTdHJpbmcgKz0gdW5pdHNTdHJpbmcudHJpbSgpO1xuICAgICAgICAgICAgbnVtYmVyV2l0aFVuaXRzU3RyaW5nID0gbnVtYmVyV2l0aFVuaXRzU3RyaW5nLnRyaW0oKTtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJXaXRoVW5pdHNTdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIE51bWJlcldpdGhVbml0cy5wcm90b3R5cGUudG9NYXRoanNDb21wYXRpYmxlU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG51bWJlcldpdGhVbml0c1N0cmluZyA9ICcnO1xuICAgICAgICAgICAgdmFyIHVuaXRzU3RyaW5nID0gVW5pdHNPYmplY3RGYWN0b3J5LmZyb21MaXN0KHRoaXMudW5pdHMpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB1bml0c1N0cmluZyA9IFVuaXRzT2JqZWN0RmFjdG9yeS50b01hdGhqc0NvbXBhdGlibGVTdHJpbmcodW5pdHNTdHJpbmcpO1xuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3JlYWwnKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyV2l0aFVuaXRzU3RyaW5nICs9IHRoaXMucmVhbCArICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgICAgICAgICAgIG51bWJlcldpdGhVbml0c1N0cmluZyArPSB0aGlzLmZyYWN0aW9uLnRvU3RyaW5nKCkgKyAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBudW1iZXJXaXRoVW5pdHNTdHJpbmcgKz0gdW5pdHNTdHJpbmcudHJpbSgpO1xuICAgICAgICAgICAgbnVtYmVyV2l0aFVuaXRzU3RyaW5nID0gbnVtYmVyV2l0aFVuaXRzU3RyaW5nLnRyaW0oKTtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJXaXRoVW5pdHNTdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIE51bWJlcldpdGhVbml0cy5wcm90b3R5cGUudG9EaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICAgICAgcmVhbDogdGhpcy5yZWFsLFxuICAgICAgICAgICAgICAgIGZyYWN0aW9uOiB0aGlzLmZyYWN0aW9uLnRvRGljdCgpLFxuICAgICAgICAgICAgICAgIHVuaXRzOiB0aGlzLnVuaXRzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvLyBUT0RPKGFua2l0YTI0MDc5Nik6IFJlbW92ZSB0aGUgYnJhY2tldCBub3RhdGlvbiBvbmNlIEFuZ3VsYXIyIGdldHMgaW4uXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGRvdC1ub3RhdGlvbiAqL1xuICAgICAgICBOdW1iZXJXaXRoVW5pdHNbJ2NyZWF0ZUN1cnJlbmN5VW5pdHMnXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFVuaXRzT2JqZWN0RmFjdG9yeS5jcmVhdGVDdXJyZW5jeVVuaXRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAocGFyc2luZ0Vycm9yKSB7IH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETyhhbmtpdGEyNDA3OTYpOiBSZW1vdmUgdGhlIGJyYWNrZXQgbm90YXRpb24gb25jZSBBbmd1bGFyMiBnZXRzIGluLlxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgTnVtYmVyV2l0aFVuaXRzWydmcm9tUmF3SW5wdXRTdHJpbmcnXSA9IGZ1bmN0aW9uIChyYXdJbnB1dCkge1xuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgICAgIHJhd0lucHV0ID0gcmF3SW5wdXQudHJpbSgpO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSAnJztcbiAgICAgICAgICAgIHZhciByZWFsID0gMC4wO1xuICAgICAgICAgICAgLy8gRGVmYXVsdCBmcmFjdGlvbiB2YWx1ZS5cbiAgICAgICAgICAgIHZhciBmcmFjdGlvbk9iaiA9IEZyYWN0aW9uT2JqZWN0RmFjdG9yeS5mcm9tUmF3SW5wdXRTdHJpbmcoJzAvMScpO1xuICAgICAgICAgICAgdmFyIHVuaXRzID0gJyc7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSAnJztcbiAgICAgICAgICAgIHZhciB1bml0T2JqID0gW107XG4gICAgICAgICAgICAvLyBBbGxvdyB2YWxpZGF0aW9uIG9ubHkgd2hlbiByYXdJbnB1dCBpcyBub3QgbnVsbCBvciBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICAgICAgICBpZiAocmF3SW5wdXQgIT09ICcnICYmIHJhd0lucHV0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gU3RhcnQgd2l0aCBkaWdpdCB3aGVuIHRoZXJlIGlzIG5vIGN1cnJlbmN5IHVuaXQuXG4gICAgICAgICAgICAgICAgaWYgKHJhd0lucHV0Lm1hdGNoKC9eXFxkLykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZCA9IHJhd0lucHV0LmluZGV4T2YocmF3SW5wdXQubWF0Y2goL1thLXoo4oK5JF0vaSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgdmFsdWUgd2l0aCBubyB1bml0cy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmF3SW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0cyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByYXdJbnB1dC5zdWJzdHIoMCwgaW5kKS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0cyA9IHJhd0lucHV0LnN1YnN0cihpbmQpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKENVUlJFTkNZX1VOSVRTKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IENVUlJFTkNZX1VOSVRTW2tleXNbaV1dLmZyb250X3VuaXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuaXRzLmluZGV4T2YoQ1VSUkVOQ1lfVU5JVFNba2V5c1tpXV0uZnJvbnRfdW5pdHNbal0pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTlVNQkVSX1dJVEhfVU5JVFNfUEFSU0lOR19FUlJPUlMuSU5WQUxJRF9DVVJSRU5DWV9GT1JNQVQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0c1dpdGhDb3JyZWN0Q3VycmVuY3lVbml0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoQ1VSUkVOQ1lfVU5JVFMpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgQ1VSUkVOQ1lfVU5JVFNba2V5c1tpXV0uZnJvbnRfdW5pdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmF3SW5wdXQuc3RhcnRzV2l0aChDVVJSRU5DWV9VTklUU1trZXlzW2ldXS5mcm9udF91bml0c1tqXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRzV2l0aENvcnJlY3RDdXJyZW5jeVVuaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0c1dpdGhDb3JyZWN0Q3VycmVuY3lVbml0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5VTUJFUl9XSVRIX1VOSVRTX1BBUlNJTkdfRVJST1JTLklOVkFMSURfQ1VSUkVOQ1kpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmQgPSByYXdJbnB1dC5pbmRleE9mKHJhd0lucHV0Lm1hdGNoKC9bMC05XS8pKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihOVU1CRVJfV0lUSF9VTklUU19QQVJTSU5HX0VSUk9SUy5JTlZBTElEX0NVUlJFTkNZKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB1bml0cyA9IHJhd0lucHV0LnN1YnN0cigwLCBpbmQpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRzV2l0aENvcnJlY3RDdXJyZW5jeVVuaXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IENVUlJFTkNZX1VOSVRTW2tleXNbaV1dLmZyb250X3VuaXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuaXRzID09PSBDVVJSRU5DWV9VTklUU1trZXlzW2ldXS5mcm9udF91bml0c1tqXS50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRzV2l0aENvcnJlY3RDdXJyZW5jeVVuaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0c1dpdGhDb3JyZWN0Q3VycmVuY3lVbml0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5VTUJFUl9XSVRIX1VOSVRTX1BBUlNJTkdfRVJST1JTLklOVkFMSURfQ1VSUkVOQ1kpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHVuaXRzID0gdW5pdHMgKyAnICc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmQyID0gcmF3SW5wdXQuaW5kZXhPZihyYXdJbnB1dC5zdWJzdHIoaW5kKS5tYXRjaCgvW2EteihdL2kpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZDIgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJhd0lucHV0LnN1YnN0cihpbmQsIGluZDIgLSBpbmQpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRzICs9IHJhd0lucHV0LnN1YnN0cihpbmQyKS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJhd0lucHV0LnN1YnN0cihpbmQpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRzID0gdW5pdHMudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENoZWNraW5nIGludmFsaWQgY2hhcmFjdGVycyBpbiB2YWx1ZS5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUubWF0Y2goL1thLXpdL2kpIHx8IHZhbHVlLm1hdGNoKC9bKl4k4oK5KCkjQF0vKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTlVNQkVSX1dJVEhfVU5JVFNfUEFSU0lOR19FUlJPUlMuSU5WQUxJRF9WQUxVRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5pbmNsdWRlcygnLycpKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnZnJhY3Rpb24nO1xuICAgICAgICAgICAgICAgICAgICBmcmFjdGlvbk9iaiA9IEZyYWN0aW9uT2JqZWN0RmFjdG9yeS5mcm9tUmF3SW5wdXRTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdyZWFsJztcbiAgICAgICAgICAgICAgICAgICAgcmVhbCA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodW5pdHMgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNraW5nIGludmFsaWQgY2hhcmFjdGVycyBpbiB1bml0cy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHVuaXRzLm1hdGNoKC9bXjAtOWEtei8qIF4oKeKCuSQtXS9pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5VTUJFUl9XSVRIX1VOSVRTX1BBUlNJTkdfRVJST1JTLklOVkFMSURfVU5JVF9DSEFSUyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdW5pdHNPYmogPSBVbml0c09iamVjdEZhY3RvcnkuZnJvbVJhd0lucHV0U3RyaW5nKHVuaXRzKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTnVtYmVyV2l0aFVuaXRzKHR5cGUsIHJlYWwsIGZyYWN0aW9uT2JqLCB1bml0c09iaik7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE8oYW5raXRhMjQwNzk2KTogUmVtb3ZlIHRoZSBicmFja2V0IG5vdGF0aW9uIG9uY2UgQW5ndWxhcjIgZ2V0cyBpbi5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgIE51bWJlcldpdGhVbml0c1snZnJvbURpY3QnXSA9IGZ1bmN0aW9uIChudW1iZXJXaXRoVW5pdHNEaWN0KSB7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGRvdC1ub3RhdGlvbiAqL1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOdW1iZXJXaXRoVW5pdHMobnVtYmVyV2l0aFVuaXRzRGljdC50eXBlLCBudW1iZXJXaXRoVW5pdHNEaWN0LnJlYWwsIEZyYWN0aW9uT2JqZWN0RmFjdG9yeS5mcm9tRGljdChudW1iZXJXaXRoVW5pdHNEaWN0LmZyYWN0aW9uKSwgVW5pdHNPYmplY3RGYWN0b3J5LmZyb21MaXN0KG51bWJlcldpdGhVbml0c0RpY3QudW5pdHMpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE51bWJlcldpdGhVbml0cztcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG4vLyBUT0RPKCM3NDAzKTogQ29udmVydCB0aGlzIHRvIHBhcnRpYWwgaW1wb3J0cy5cbnZhciBtYXRoanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibWF0aGpzXCIpKTtcbnZhciBvYmplY3RzX2RvbWFpbl9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJkb21haW4vb2JqZWN0cy9vYmplY3RzLWRvbWFpbi5jb25zdGFudHNcIik7XG52YXIgVW5pdHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVW5pdHModW5pdHNMaXN0KSB7XG4gICAgICAgIHRoaXMudW5pdHMgPSB1bml0c0xpc3Q7XG4gICAgfVxuICAgIFVuaXRzLnByb3RvdHlwZS50b0RpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bml0czogdGhpcy51bml0c1xuICAgICAgICB9O1xuICAgIH07XG4gICAgVW5pdHMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdW5pdCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudW5pdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBkID0gdGhpcy51bml0c1tpXTtcbiAgICAgICAgICAgIGlmIChkLmV4cG9uZW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdW5pdCArPSBkLnVuaXQgKyAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bml0ICs9IGQudW5pdCArICdeJyArIGQuZXhwb25lbnQudG9TdHJpbmcoKSArICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5pdC50cmltKCk7XG4gICAgfTtcbiAgICByZXR1cm4gVW5pdHM7XG59KCkpO1xuZXhwb3J0cy5Vbml0cyA9IFVuaXRzO1xudmFyIFVuaXRzT2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVbml0c09iamVjdEZhY3RvcnkoKSB7XG4gICAgfVxuICAgIFVuaXRzT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuaXN1bml0ID0gZnVuY3Rpb24gKHVuaXQpIHtcbiAgICAgICAgcmV0dXJuICEoJy8qKCkgJy5pbmNsdWRlcyh1bml0KSk7XG4gICAgfTtcbiAgICBVbml0c09iamVjdEZhY3RvcnkucHJvdG90eXBlLnN0cmluZ1RvTGV4aWNhbCA9IGZ1bmN0aW9uICh1bml0cykge1xuICAgICAgICB1bml0cyArPSAnIyc7XG4gICAgICAgIHZhciB1bml0TGlzdCA9IFtdO1xuICAgICAgICB2YXIgdW5pdCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoJyovKCkjICcuaW5jbHVkZXModW5pdHNbaV0pICYmIHVuaXQgIT09ICdwZXInKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHVuaXRMaXN0Lmxlbmd0aCA+IDApICYmIHRoaXMuaXN1bml0KHVuaXRMaXN0LnNsaWNlKC0xKS5wb3AoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRMaXN0LnB1c2goJyonKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB1bml0TGlzdC5wdXNoKHVuaXQpO1xuICAgICAgICAgICAgICAgICAgICB1bml0ID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghKCcjICcuaW5jbHVkZXModW5pdHNbaV0pKSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0TGlzdC5wdXNoKHVuaXRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1bml0c1tpXSA9PT0gJyAnICYmIHVuaXQgPT09ICdwZXInKSB7XG4gICAgICAgICAgICAgICAgdW5pdExpc3QucHVzaCgnLycpO1xuICAgICAgICAgICAgICAgIHVuaXQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVuaXQgKz0gdW5pdHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXRMaXN0O1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgcmV0dXJuIHR5cGUgaXMgYSBsaXN0IHdpdGggdmFyeWluZyBlbGVtZW50IHR5cGVzLiBBblxuICAgIC8vIGV4YWN0IHR5cGUgbmVlZHMgdG8gYmUgZm91bmQgZm9yIGl0LlxuICAgIFVuaXRzT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUudW5pdFdpdGhNdWx0aXBsaWVyID0gZnVuY3Rpb24gKHVuaXRMaXN0KSB7XG4gICAgICAgIHZhciBtdWx0aXBsaWVyID0gMTtcbiAgICAgICAgdmFyIHVuaXRzV2l0aE11bHRpcGxpZXIgPSBbXTtcbiAgICAgICAgdmFyIHBhcmVudGhlc2lzU3RhY2sgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaW5kID0gMDsgaW5kIDwgdW5pdExpc3QubGVuZ3RoOyBpbmQrKykge1xuICAgICAgICAgICAgaWYgKHVuaXRMaXN0W2luZF0gPT09ICcvJykge1xuICAgICAgICAgICAgICAgIG11bHRpcGxpZXIgPSAtbXVsdGlwbGllcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVuaXRMaXN0W2luZF0gPT09ICcoJykge1xuICAgICAgICAgICAgICAgIGlmICh1bml0TGlzdFtpbmQgLSAxXSA9PT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHByZXZpb3VzIGVsZW1lbnQgd2FzIGRpdmlzaW9uIHRoZW4gd2UgbmVlZCB0byBpbnZlcnNlXG4gICAgICAgICAgICAgICAgICAgIC8vIG11bHRpcGxpZXIgd2hlbiB3ZSBmaW5kIGl0cyBjb3JyZXNwb25zaW5nIGNsb3NpbmcgcGFyZW50aGVzaXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlY29uZCBlbGVtZW50IG9mIHB1c2hlZCBlbGVtZW50IGlzIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50aGVzaXNTdGFjay5wdXNoKFsnKCcsIC0xXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBwcmV2aW91cyBlbGVtZW50IHdhcyBub3QgZGl2aXNpb24gdGhlbiB3ZSBkb24ndCBuZWVkIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGludmVydCB0aGUgbXVsdGlwbGllci5cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50aGVzaXNTdGFjay5wdXNoKFsnKCcsIDFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1bml0TGlzdFtpbmRdID09PSAnKScpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IHBhcmVudGhlc2lzU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IHBhcnNlSW50KGVsZW1bMV0pICogbXVsdGlwbGllcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaXN1bml0KHVuaXRMaXN0W2luZF0pKSB7XG4gICAgICAgICAgICAgICAgdW5pdHNXaXRoTXVsdGlwbGllci5wdXNoKFt1bml0TGlzdFtpbmRdLCBtdWx0aXBsaWVyXSk7XG4gICAgICAgICAgICAgICAgLy8gSWYgcHJldmlvdXMgZWxlbWVudCB3YXMgZGl2aXNpb24gdGhlbiB3ZSBuZWVkIHRvIGludmVydFxuICAgICAgICAgICAgICAgIC8vIG11bHRpcGxpZXIuXG4gICAgICAgICAgICAgICAgaWYgKHVuaXRMaXN0W2luZCAtIDFdID09PSAnLycpIHtcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IC1tdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5pdHNXaXRoTXVsdGlwbGllcjtcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNjUpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgJ3VuaXREaWN0JyBpcyBhIGRpY3Qgd2l0aCB2YXJ5aW5nIGVsZW1lbnQgdHlwZXMuIEFuXG4gICAgLy8gZXhhY3QgdHlwZSBuZWVkcyB0byBiZSBmb3VuZCBmb3IgaXQsIE9uY2UgdGhhdCBpcyBmb3VuZCB0aGUgcmV0dXJuIHR5cGVcbiAgICAvLyBjYW4gYWxzbyBiZSB0eXBlZC5cbiAgICBVbml0c09iamVjdEZhY3RvcnkucHJvdG90eXBlLmNvbnZlcnRVbml0RGljdFRvTGlzdCA9IGZ1bmN0aW9uICh1bml0RGljdCkge1xuICAgICAgICB2YXIgdW5pdExpc3QgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHVuaXREaWN0KSB7XG4gICAgICAgICAgICB1bml0TGlzdC5wdXNoKHsgdW5pdDoga2V5LCBleHBvbmVudDogdW5pdERpY3Rba2V5XSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5pdExpc3Q7XG4gICAgfTtcbiAgICAvLyBUT0RPKCM3MTY1KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlICd1bml0c1dpdGhNdWx0aXBsaWVyJyBpcyBhIGRpY3Qgd2l0aCB2YXJ5aW5nIGVsZW1lbnQgdHlwZXMuXG4gICAgLy8gQW4gZXhhY3QgdHlwZSBuZWVkcyB0byBiZSBmb3VuZCBmb3IgaXQsIE9uY2UgdGhhdCBpcyBmb3VuZCB0aGUgcmV0dXJuIHR5cGVcbiAgICAvLyBjYW4gYWxzbyBiZSB0eXBlZC5cbiAgICBVbml0c09iamVjdEZhY3RvcnkucHJvdG90eXBlLnVuaXRUb0xpc3QgPSBmdW5jdGlvbiAodW5pdHNXaXRoTXVsdGlwbGllcikge1xuICAgICAgICB2YXIgdW5pdERpY3QgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bml0c1dpdGhNdWx0aXBsaWVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdW5pdCA9IHVuaXRzV2l0aE11bHRpcGxpZXJbaV1bMF07XG4gICAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IHVuaXRzV2l0aE11bHRpcGxpZXJbaV1bMV07XG4gICAgICAgICAgICB2YXIgaW5kID0gdW5pdC5pbmRleE9mKCdeJyk7XG4gICAgICAgICAgICB2YXIgcyA9IG51bGw7XG4gICAgICAgICAgICB2YXIgcG93ZXIgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGluZCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgcyA9IHVuaXQuc3Vic3RyKDAsIGluZCk7XG4gICAgICAgICAgICAgICAgcG93ZXIgPSBwYXJzZUludCh1bml0LnN1YnN0cihpbmQgKyAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzID0gdW5pdDtcbiAgICAgICAgICAgICAgICBwb3dlciA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShzIGluIHVuaXREaWN0KSkge1xuICAgICAgICAgICAgICAgIHVuaXREaWN0W3NdID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVuaXREaWN0W3NdICs9IG11bHRpcGxpZXIgKiBwb3dlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0VW5pdERpY3RUb0xpc3QodW5pdERpY3QpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAndW5pdHMnIGlzIGEgbGlzdCB3aXRoIHZhcnlpbmcgZWxlbWVudCB0eXBlcy4gQW4gZXhhY3RcbiAgICAvLyB0eXBlIG5lZWRzIHRvIGJlIGZvdW5kIGZvciBpdC5cbiAgICBVbml0c09iamVjdEZhY3RvcnkucHJvdG90eXBlLmZyb21MaXN0ID0gZnVuY3Rpb24gKHVuaXRzTGlzdCkge1xuICAgICAgICByZXR1cm4gbmV3IFVuaXRzKHVuaXRzTGlzdCk7XG4gICAgfTtcbiAgICAvLyBUT0RPKCM3MTY1KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlIHRoZSByZXR1cm4gdHlwZSBpcyB0byBiZSBkZXRlcm1pbmVkIG9uY2UgJ3VuaXRUb0xpc3QnIGhhc1xuICAgIC8vIGRldGVybWluZWQgcmV0dXJuIHR5cGUuXG4gICAgVW5pdHNPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5mcm9tU3RyaW5nVG9MaXN0ID0gZnVuY3Rpb24gKHVuaXRzU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaXRUb0xpc3QodGhpcy51bml0V2l0aE11bHRpcGxpZXIodGhpcy5zdHJpbmdUb0xleGljYWwodW5pdHNTdHJpbmcpKSk7XG4gICAgfTtcbiAgICBVbml0c09iamVjdEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZUN1cnJlbmN5VW5pdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0c19kb21haW5fY29uc3RhbnRzXzEuT2JqZWN0c0RvbWFpbkNvbnN0YW50cy5DVVJSRU5DWV9VTklUUyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG9iamVjdHNfZG9tYWluX2NvbnN0YW50c18xLk9iamVjdHNEb21haW5Db25zdGFudHMuQ1VSUkVOQ1lfVU5JVFNba2V5c1tpXV0uYmFzZV91bml0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gQmFzZSB1bml0IChsaWtlOiBydXBlZXMsIGRvbGxhciBldGMuKS5cbiAgICAgICAgICAgICAgICBtYXRoanNfMS5kZWZhdWx0LmNyZWF0ZVVuaXQob2JqZWN0c19kb21haW5fY29uc3RhbnRzXzEuT2JqZWN0c0RvbWFpbkNvbnN0YW50cy5DVVJSRU5DWV9VTklUU1trZXlzW2ldXS5uYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzZXM6IG9iamVjdHNfZG9tYWluX2NvbnN0YW50c18xLk9iamVjdHNEb21haW5Db25zdGFudHMuQ1VSUkVOQ1lfVU5JVFNba2V5c1tpXV0uYWxpYXNlc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU3ViIHVuaXQgKGxpa2U6IHBhaXNlLCBjZW50cyBldGMuKS5cbiAgICAgICAgICAgICAgICBtYXRoanNfMS5kZWZhdWx0LmNyZWF0ZVVuaXQob2JqZWN0c19kb21haW5fY29uc3RhbnRzXzEuT2JqZWN0c0RvbWFpbkNvbnN0YW50cy5DVVJSRU5DWV9VTklUU1trZXlzW2ldXS5uYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb246IG9iamVjdHNfZG9tYWluX2NvbnN0YW50c18xLk9iamVjdHNEb21haW5Db25zdGFudHMuQ1VSUkVOQ1lfVU5JVFNba2V5c1tpXV0uYmFzZV91bml0LFxuICAgICAgICAgICAgICAgICAgICBhbGlhc2VzOiBvYmplY3RzX2RvbWFpbl9jb25zdGFudHNfMS5PYmplY3RzRG9tYWluQ29uc3RhbnRzLkNVUlJFTkNZX1VOSVRTW2tleXNbaV1dLmFsaWFzZXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAndW5pdHMnIGlzIGEgbGlzdCB3aXRoIHZhcnlpbmcgZWxlbWVudCB0eXBlcy4gQW4gZXhhY3RcbiAgICAvLyB0eXBlIG5lZWRzIHRvIGJlIGZvdW5kIGZvciBpdC5cbiAgICBVbml0c09iamVjdEZhY3RvcnkucHJvdG90eXBlLnRvTWF0aGpzQ29tcGF0aWJsZVN0cmluZyA9IGZ1bmN0aW9uICh1bml0cykge1xuICAgICAgICAvLyBNYWtlcyB0aGUgdW5pdHMgY29tcGF0aWJsZSB3aXRoIHRoZSBtYXRoLmpzIGFsbG93ZWQgZm9ybWF0LlxuICAgICAgICB1bml0cyA9IHVuaXRzLnJlcGxhY2UoL3Blci9nLCAnLycpO1xuICAgICAgICAvLyBTcGVjaWFsIHN5bWJvbHMgbmVlZCB0byBiZSByZXBsYWNlZCBhcyBtYXRoLmpzIGRvZXNuJ3Qgc3VwcG9ydCBjdXN0b21cbiAgICAgICAgLy8gdW5pdHMgc3RhcnRpbmcgd2l0aCBzcGVjaWFsIHN5bWJvbHMuIEFsc28sIGl0IGRvZXNuJ3QgYWxsb3cgdW5pdHNcbiAgICAgICAgLy8gZm9sbG93ZWQgYnkgYSBudW1iZXIgYXMgaW4gdGhlIGNhc2Ugb2YgY3VycmVuY3kgdW5pdHMuXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0c19kb21haW5fY29uc3RhbnRzXzEuT2JqZWN0c0RvbWFpbkNvbnN0YW50cy5DVVJSRU5DWV9VTklUUyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3RzX2RvbWFpbl9jb25zdGFudHNfMS5PYmplY3RzRG9tYWluQ29uc3RhbnRzLkNVUlJFTkNZX1VOSVRTW2tleXNbaV1dLmZyb250X3VuaXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXRzLmluY2x1ZGVzKG9iamVjdHNfZG9tYWluX2NvbnN0YW50c18xLk9iamVjdHNEb21haW5Db25zdGFudHMuQ1VSUkVOQ1lfVU5JVFNba2V5c1tpXV0uZnJvbnRfdW5pdHNbal0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXRzID0gdW5pdHMucmVwbGFjZShvYmplY3RzX2RvbWFpbl9jb25zdGFudHNfMS5PYmplY3RzRG9tYWluQ29uc3RhbnRzLkNVUlJFTkNZX1VOSVRTW2tleXNbaV1dLmZyb250X3VuaXRzW2pdLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHVuaXRzID0gb2JqZWN0c19kb21haW5fY29uc3RhbnRzXzEuT2JqZWN0c0RvbWFpbkNvbnN0YW50cy5DVVJSRU5DWV9VTklUU1trZXlzW2ldXS5uYW1lICsgdW5pdHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3RzX2RvbWFpbl9jb25zdGFudHNfMS5PYmplY3RzRG9tYWluQ29uc3RhbnRzLkNVUlJFTkNZX1VOSVRTW2tleXNbaV1dLmFsaWFzZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodW5pdHMuaW5jbHVkZXMob2JqZWN0c19kb21haW5fY29uc3RhbnRzXzEuT2JqZWN0c0RvbWFpbkNvbnN0YW50cy5DVVJSRU5DWV9VTklUU1trZXlzW2ldXS5hbGlhc2VzW2pdKSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0cyA9IHVuaXRzLnJlcGxhY2Uob2JqZWN0c19kb21haW5fY29uc3RhbnRzXzEuT2JqZWN0c0RvbWFpbkNvbnN0YW50cy5DVVJSRU5DWV9VTklUU1trZXlzW2ldXS5hbGlhc2VzW2pdLCBvYmplY3RzX2RvbWFpbl9jb25zdGFudHNfMS5PYmplY3RzRG9tYWluQ29uc3RhbnRzLkNVUlJFTkNZX1VOSVRTW2tleXNbaV1dLm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5pdHMudHJpbSgpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAndW5pdHMnIGlzIGEgbGlzdCB3aXRoIHZhcnlpbmcgZWxlbWVudCB0eXBlcy4gQW4gZXhhY3RcbiAgICAvLyB0eXBlIG5lZWRzIHRvIGJlIGZvdW5kIGZvciBpdC5cbiAgICBVbml0c09iamVjdEZhY3RvcnkucHJvdG90eXBlLmZyb21SYXdJbnB1dFN0cmluZyA9IGZ1bmN0aW9uICh1bml0cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDdXJyZW5jeVVuaXRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKHBhcnNpbmdFcnJvcikgeyB9XG4gICAgICAgIHZhciBjb21wYXRpYmxlVW5pdHMgPSB0aGlzLnRvTWF0aGpzQ29tcGF0aWJsZVN0cmluZyh1bml0cyk7XG4gICAgICAgIGlmIChjb21wYXRpYmxlVW5pdHMgIT09ICcnKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG1hdGhqc18xLmRlZmF1bHQudW5pdChjb21wYXRpYmxlVW5pdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVW5pdHModGhpcy5mcm9tU3RyaW5nVG9MaXN0KHVuaXRzKSk7XG4gICAgfTtcbiAgICBVbml0c09iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgVW5pdHNPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gVW5pdHNPYmplY3RGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuVW5pdHNPYmplY3RGYWN0b3J5ID0gVW5pdHNPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnVW5pdHNPYmplY3RGYWN0b3J5Jywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShVbml0c09iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29uc3RhbnRzIGZvciBvYmplY3RzIGRvbWFpbi5cbiAqL1xuLy8gVE9ETygjNzA5Mik6IERlbGV0ZSB0aGlzIGZpbGUgb25jZSBtaWdyYXRpb24gaXMgY29tcGxldGUgYW5kIHRoZXNlIEFuZ3VsYXJKU1xuLy8gZXF1aXZhbGVudHMgb2YgdGhlIEFuZ3VsYXIgY29uc3RhbnRzIGFyZSBubyBsb25nZXIgbmVlZGVkLlxudmFyIG9iamVjdHNfZG9tYWluX2NvbnN0YW50c18xID0gcmVxdWlyZShcImRvbWFpbi9vYmplY3RzL29iamVjdHMtZG9tYWluLmNvbnN0YW50c1wiKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdGUkFDVElPTl9QQVJTSU5HX0VSUk9SUycsIG9iamVjdHNfZG9tYWluX2NvbnN0YW50c18xLk9iamVjdHNEb21haW5Db25zdGFudHMuRlJBQ1RJT05fUEFSU0lOR19FUlJPUlMpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ05VTUJFUl9XSVRIX1VOSVRTX1BBUlNJTkdfRVJST1JTJywgb2JqZWN0c19kb21haW5fY29uc3RhbnRzXzEuT2JqZWN0c0RvbWFpbkNvbnN0YW50cy5OVU1CRVJfV0lUSF9VTklUU19QQVJTSU5HX0VSUk9SUyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnQ1VSUkVOQ1lfVU5JVFMnLCBvYmplY3RzX2RvbWFpbl9jb25zdGFudHNfMS5PYmplY3RzRG9tYWluQ29uc3RhbnRzLkNVUlJFTkNZX1VOSVRTKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0byByZWNlaXZlIHF1ZXN0aW9ucyBhcyBwcmV0ZXN0cyBmb3IgYW4gZXhwbG9yYXRpb24uXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9xdWVzdGlvbi9xdWVzdGlvbi1kb21haW4uY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnUHJldGVzdFF1ZXN0aW9uQmFja2VuZEFwaVNlcnZpY2UnLCBbXG4gICAgJyRodHRwJywgJyRxJywgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgJ1BSRVRFU1RfUVVFU1RJT05TX1VSTF9URU1QTEFURScsXG4gICAgZnVuY3Rpb24gKCRodHRwLCAkcSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UsIFBSRVRFU1RfUVVFU1RJT05TX1VSTF9URU1QTEFURSkge1xuICAgICAgICB2YXIgX2N1cnNvciA9ICcnO1xuICAgICAgICB2YXIgX2ZldGNoUHJldGVzdFF1ZXN0aW9ucyA9IGZ1bmN0aW9uIChleHBsb3JhdGlvbklkLCBzdG9yeUlkLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICghc3RvcnlJZCB8fCAhc3RvcnlJZC5tYXRjaCgvXlthLXpBLVowLTldKyQvaSkpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soW10pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcmV0ZXN0RGF0YVVybCA9IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKFBSRVRFU1RfUVVFU1RJT05TX1VSTF9URU1QTEFURSwge1xuICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uX2lkOiBleHBsb3JhdGlvbklkLFxuICAgICAgICAgICAgICAgIHN0b3J5X2lkOiBzdG9yeUlkLFxuICAgICAgICAgICAgICAgIGN1cnNvcjogX2N1cnNvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkaHR0cC5nZXQocHJldGVzdERhdGFVcmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXRlc3RRdWVzdGlvbkRpY3RzID0gYW5ndWxhci5jb3B5KHJlc3BvbnNlLmRhdGEucHJldGVzdF9xdWVzdGlvbl9kaWN0cyk7XG4gICAgICAgICAgICAgICAgX2N1cnNvciA9IHJlc3BvbnNlLmRhdGEubmV4dF9zdGFydF9jdXJzb3I7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socHJldGVzdFF1ZXN0aW9uRGljdHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhlcnJvclJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmV0Y2hQcmV0ZXN0UXVlc3Rpb25zOiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCwgc3RvcnlJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF9mZXRjaFByZXRlc3RRdWVzdGlvbnMoZXhwbG9yYXRpb25JZCwgc3RvcnlJZCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0byByZWNlaXZlIHF1ZXN0aW9ucyBmb3IgcHJhY3RpY2UgZ2l2ZW4gYSBzZXQgb2ZcbiAqIHNraWxsX2lkcy5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3F1ZXN0aW9uL3F1ZXN0aW9uLWRvbWFpbi5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdRdWVzdGlvbkJhY2tlbmRBcGlTZXJ2aWNlJywgW1xuICAgICckaHR0cCcsICckcScsICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsICdRVUVTVElPTlNfTElTVF9VUkxfVEVNUExBVEUnLFxuICAgICdRVUVTVElPTl9QTEFZRVJfVVJMX1RFTVBMQVRFJyxcbiAgICBmdW5jdGlvbiAoJGh0dHAsICRxLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSwgUVVFU1RJT05TX0xJU1RfVVJMX1RFTVBMQVRFLCBRVUVTVElPTl9QTEFZRVJfVVJMX1RFTVBMQVRFKSB7XG4gICAgICAgIHZhciBfZmV0Y2hRdWVzdGlvbnMgPSBmdW5jdGlvbiAoc2tpbGxJZHMsIHF1ZXN0aW9uQ291bnQsIHF1ZXN0aW9uc1NvcnRlZEJ5RGlmZmljdWx0eSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoIXZhbGlkYXRlUmVxdWVzdFBhcmFtZXRlcnMoc2tpbGxJZHMsIHF1ZXN0aW9uQ291bnQsIGVycm9yQ2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uRGF0YVVybCA9IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKFFVRVNUSU9OX1BMQVlFUl9VUkxfVEVNUExBVEUsIHtcbiAgICAgICAgICAgICAgICBza2lsbF9pZHM6IHNraWxsSWRzLmpvaW4oJywnKSxcbiAgICAgICAgICAgICAgICBxdWVzdGlvbl9jb3VudDogcXVlc3Rpb25Db3VudC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGZldGNoX2J5X2RpZmZpY3VsdHk6IHF1ZXN0aW9uc1NvcnRlZEJ5RGlmZmljdWx0eS50b1N0cmluZygpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRodHRwLmdldChxdWVzdGlvbkRhdGFVcmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXN0aW9uRGljdHMgPSBhbmd1bGFyLmNvcHkocmVzcG9uc2UuZGF0YS5xdWVzdGlvbl9kaWN0cyk7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socXVlc3Rpb25EaWN0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycm9yUmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfZmV0Y2hRdWVzdGlvblN1bW1hcmllcyA9IGZ1bmN0aW9uIChza2lsbElkcywgY3Vyc29yLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICghaXNMaXN0T2ZTdHJpbmdzKHNraWxsSWRzKSkge1xuICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soJ1NraWxsIGlkcyBzaG91bGQgYmUgYSBsaXN0IG9mIHN0cmluZ3MnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcXVlc3Rpb25zRGF0YVVybCA9IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKFFVRVNUSU9OU19MSVNUX1VSTF9URU1QTEFURSwge1xuICAgICAgICAgICAgICAgIGNvbW1hX3NlcGFyYXRlZF9za2lsbF9pZHM6IHNraWxsSWRzLmpvaW4oJywnKSxcbiAgICAgICAgICAgICAgICBjdXJzb3I6IGN1cnNvciA/IGN1cnNvciA6ICcnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRodHRwLmdldChxdWVzdGlvbnNEYXRhVXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvblN1bW1hcmllcyA9IGFuZ3VsYXIuY29weShyZXNwb25zZS5kYXRhLnF1ZXN0aW9uX3N1bW1hcnlfZGljdHMpO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0Q3Vyc29yID0gcmVzcG9uc2UuZGF0YS5uZXh0X3N0YXJ0X2N1cnNvcjtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvblN1bW1hcmllczogcXVlc3Rpb25TdW1tYXJpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Q3Vyc29yOiBuZXh0Q3Vyc29yXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhlcnJvclJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRG9lcyBiYXNpYyB2YWxpZGF0aW9uIG9uIGlucHV0LlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHZhbGlkYXRlUmVxdWVzdFBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoc2tpbGxJZHMsIHF1ZXN0aW9uQ291bnQsIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICghaXNMaXN0T2ZTdHJpbmdzKHNraWxsSWRzKSkge1xuICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soJ1NraWxsIGlkcyBzaG91bGQgYmUgYSBsaXN0IG9mIHN0cmluZ3MnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzSW50KHF1ZXN0aW9uQ291bnQpIHx8IHF1ZXN0aW9uQ291bnQgPD0gMCkge1xuICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soJ1F1ZXN0aW9uIGNvdW50IGhhcyB0byBiZSBhIHBvc2l0aXZlIGludGVnZXInKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrcyBpZiBnaXZlbiBpbnB1dCBpcyBhIGxpc3QgYW5kIGhhcyBhbGwgc3RyaW5nc1xuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGlzTGlzdE9mU3RyaW5ncyA9IGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNBcnJheShsaXN0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsaXN0LmV2ZXJ5KGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci5pc1N0cmluZyhvYmopO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3MgaWYgZ2l2ZW4gaW5wdXQgaXMgYW4gaW50ZWdlclxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGlzSW50ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmlzTnVtYmVyKG4pICYmIG4gJSAxID09PSAwO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhIGxpc3Qgb2YgcXVlc3Rpb25zIGJhc2VkIG9uIHRoZSBsaXN0IG9mIHNraWxsIGlkcyBhbmQgbnVtYmVyXG4gICAgICAgICAqIG9mIHF1ZXN0aW9ucyByZXF1ZXN0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmV0Y2hRdWVzdGlvbnM6IGZ1bmN0aW9uIChza2lsbElkcywgcXVlc3Rpb25Db3VudCwgcXVlc3Rpb25zU29ydGVkQnlEaWZmaWN1bHR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgX2ZldGNoUXVlc3Rpb25zKHNraWxsSWRzLCBxdWVzdGlvbkNvdW50LCBxdWVzdGlvbnNTb3J0ZWRCeURpZmZpY3VsdHksIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmV0Y2hRdWVzdGlvblN1bW1hcmllczogZnVuY3Rpb24gKHNraWxsSWRzLCBjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBfZmV0Y2hRdWVzdGlvblN1bW1hcmllcyhza2lsbElkcywgY3Vyc29yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBhbmQgbXV0YXRpbmcgaW5zdGFuY2VzIG9mIGZyb250ZW5kXG4gKiBxdWVzdGlvbiBkb21haW4gb2JqZWN0cy5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3N0YXRlL1N0YXRlT2JqZWN0RmFjdG9yeS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnUXVlc3Rpb25PYmplY3RGYWN0b3J5JywgW1xuICAgICdTdGF0ZU9iamVjdEZhY3RvcnknLCAnREVGQVVMVF9MQU5HVUFHRV9DT0RFJywgJ0lOVEVSQUNUSU9OX1NQRUNTJyxcbiAgICBmdW5jdGlvbiAoU3RhdGVPYmplY3RGYWN0b3J5LCBERUZBVUxUX0xBTkdVQUdFX0NPREUsIElOVEVSQUNUSU9OX1NQRUNTKSB7XG4gICAgICAgIHZhciBRdWVzdGlvbiA9IGZ1bmN0aW9uIChpZCwgc3RhdGVEYXRhLCBsYW5ndWFnZUNvZGUsIHZlcnNpb24sIGxpbmtlZFNraWxsSWRzKSB7XG4gICAgICAgICAgICB0aGlzLl9pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVEYXRhID0gc3RhdGVEYXRhO1xuICAgICAgICAgICAgdGhpcy5fbGFuZ3VhZ2VDb2RlID0gbGFuZ3VhZ2VDb2RlO1xuICAgICAgICAgICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICB0aGlzLl9saW5rZWRTa2lsbElkcyA9IGxpbmtlZFNraWxsSWRzO1xuICAgICAgICB9O1xuICAgICAgICAvLyBJbnN0YW5jZSBtZXRob2RzXG4gICAgICAgIFF1ZXN0aW9uLnByb3RvdHlwZS5nZXRJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICAgICAgfTtcbiAgICAgICAgUXVlc3Rpb24ucHJvdG90eXBlLmdldFN0YXRlRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZURhdGE7XG4gICAgICAgIH07XG4gICAgICAgIFF1ZXN0aW9uLnByb3RvdHlwZS5zZXRTdGF0ZURhdGEgPSBmdW5jdGlvbiAobmV3U3RhdGVEYXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZURhdGEgPSBhbmd1bGFyLmNvcHkobmV3U3RhdGVEYXRhKTtcbiAgICAgICAgfTtcbiAgICAgICAgUXVlc3Rpb24ucHJvdG90eXBlLmdldExhbmd1YWdlQ29kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYW5ndWFnZUNvZGU7XG4gICAgICAgIH07XG4gICAgICAgIFF1ZXN0aW9uLnByb3RvdHlwZS5zZXRMYW5ndWFnZUNvZGUgPSBmdW5jdGlvbiAobGFuZ3VhZ2VDb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9sYW5ndWFnZUNvZGUgPSBsYW5ndWFnZUNvZGU7XG4gICAgICAgIH07XG4gICAgICAgIFF1ZXN0aW9uLnByb3RvdHlwZS5nZXRWZXJzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZlcnNpb247XG4gICAgICAgIH07XG4gICAgICAgIFF1ZXN0aW9uLnByb3RvdHlwZS5nZXRMaW5rZWRTa2lsbElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saW5rZWRTa2lsbElkcztcbiAgICAgICAgfTtcbiAgICAgICAgUXVlc3Rpb24ucHJvdG90eXBlLnNldExpbmtlZFNraWxsSWRzID0gZnVuY3Rpb24gKGxpbmtlZFNraWxsSWRzKSB7XG4gICAgICAgICAgICB0aGlzLl9saW5rZWRTa2lsbElkcyA9IGxpbmtlZFNraWxsSWRzO1xuICAgICAgICB9O1xuICAgICAgICAvLyBUT0RPKGFua2l0YTI0MDc5Nik6IFJlbW92ZSB0aGUgYnJhY2tldCBub3RhdGlvbiBvbmNlIEFuZ3VsYXIyIGdldHMgaW4uXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGRvdC1ub3RhdGlvbiAqL1xuICAgICAgICBRdWVzdGlvblsnY3JlYXRlRGVmYXVsdFF1ZXN0aW9uJ10gPSBmdW5jdGlvbiAoc2tpbGxJZHMpIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgICAgICByZXR1cm4gbmV3IFF1ZXN0aW9uKG51bGwsIFN0YXRlT2JqZWN0RmFjdG9yeS5jcmVhdGVEZWZhdWx0U3RhdGUobnVsbCksIERFRkFVTFRfTEFOR1VBR0VfQ09ERSwgMSwgc2tpbGxJZHMpO1xuICAgICAgICB9O1xuICAgICAgICBRdWVzdGlvbi5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiAobWlzY29uY2VwdGlvbnNCeVNraWxsKSB7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb24gPSB0aGlzLl9zdGF0ZURhdGEuaW50ZXJhY3Rpb247XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3Rpb24uaWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0FuIGludGVyYWN0aW9uIG11c3QgYmUgc3BlY2lmaWVkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbi5oaW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0F0IGxlYXN0IDEgaGludCBzaG91bGQgYmUgc3BlY2ZpZWQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbnRlcmFjdGlvbi5zb2x1dGlvbiAmJlxuICAgICAgICAgICAgICAgIElOVEVSQUNUSU9OX1NQRUNTW2ludGVyYWN0aW9uLmlkXS5jYW5faGF2ZV9zb2x1dGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnQSBzb2x1dGlvbiBtdXN0IGJlIHNwZWNpZmllZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYW5zd2VyR3JvdXBzID0gdGhpcy5fc3RhdGVEYXRhLmludGVyYWN0aW9uLmFuc3dlckdyb3VwcztcbiAgICAgICAgICAgIHZhciB0YWdnZWRTa2lsbE1pc2NvbmNlcHRpb25JZHMgPSB7fTtcbiAgICAgICAgICAgIHZhciBhdExlYXN0T25lQW5zd2VyQ29ycmVjdCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbnN3ZXJHcm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5zd2VyR3JvdXBzW2ldLm91dGNvbWUubGFiZWxsZWRBc0NvcnJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgYXRMZWFzdE9uZUFuc3dlckNvcnJlY3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFuc3dlckdyb3Vwc1tpXS50YWdnZWRTa2lsbE1pc2NvbmNlcHRpb25JZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0YWdnZWRTa2lsbE1pc2NvbmNlcHRpb25JZHNbYW5zd2VyR3JvdXBzW2ldLnRhZ2dlZFNraWxsTWlzY29uY2VwdGlvbklkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhdExlYXN0T25lQW5zd2VyQ29ycmVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnQXQgbGVhc3Qgb25lIGFuc3dlciBzaG91bGQgYmUgbWFya2VkIGNvcnJlY3QnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBlbmRpbmdNaXNjb25jZXB0aW9uTmFtZXNUb1RhZyA9IFtdO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMobWlzY29uY2VwdGlvbnNCeVNraWxsKS5mb3JFYWNoKGZ1bmN0aW9uIChza2lsbElkKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaXNjb25jZXB0aW9uc0J5U2tpbGxbc2tpbGxJZF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNraWxsTWlzY29uY2VwdGlvbklkID0gc2tpbGxJZCArICctJyArIG1pc2NvbmNlcHRpb25zQnlTa2lsbFtza2lsbElkXVtpXS5nZXRJZCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhZ2dlZFNraWxsTWlzY29uY2VwdGlvbklkcy5oYXNPd25Qcm9wZXJ0eShza2lsbE1pc2NvbmNlcHRpb25JZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdNaXNjb25jZXB0aW9uTmFtZXNUb1RhZy5wdXNoKG1pc2NvbmNlcHRpb25zQnlTa2lsbFtza2lsbElkXVtpXS5nZXROYW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocGVuZGluZ01pc2NvbmNlcHRpb25OYW1lc1RvVGFnLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuU3RyaW5nID0gJ1RoZSBmb2xsb3dpbmcgbWlzY29uY2VwdGlvbnMgc2hvdWxkIGFsc28gYmUgY2F1Z2h0Oic7XG4gICAgICAgICAgICAgICAgcGVuZGluZ01pc2NvbmNlcHRpb25OYW1lc1RvVGFnLmZvckVhY2goZnVuY3Rpb24gKG1pc2NvbmNlcHRpb25OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblN0cmluZyA9IHJldHVyblN0cmluZyArICcgJyArIG1pc2NvbmNlcHRpb25OYW1lICsgJywnO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVyblN0cmluZyA9IHJldHVyblN0cmluZy5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuU3RyaW5nID0gcmV0dXJuU3RyaW5nICsgJy4gQ2xpY2sgb24gKG9yIGNyZWF0ZSkgYW4gYW5zd2VyICcgK1xuICAgICAgICAgICAgICAgICAgICAndGhhdCBpcyBuZWl0aGVyIG1hcmtlZCBjb3JyZWN0IG5vciBpcyBhIGRlZmF1bHQgYW5zd2VyIChtYXJrZWQgJyArXG4gICAgICAgICAgICAgICAgICAgICdhYm92ZSBhcyBbQWxsIG90aGVyIGFuc3dlcnNdKSB0byB0YWcgYSBtaXNjb25jZXB0aW9uIHRvIHRoYXQgJyArXG4gICAgICAgICAgICAgICAgICAgICdhbnN3ZXIgZ3JvdXAuJztcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuU3RyaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICAvLyBUT0RPKGFua2l0YTI0MDc5Nik6IFJlbW92ZSB0aGUgYnJhY2tldCBub3RhdGlvbiBvbmNlIEFuZ3VsYXIyIGdldHMgaW4uXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGRvdC1ub3RhdGlvbiAqL1xuICAgICAgICBRdWVzdGlvblsnY3JlYXRlRnJvbUJhY2tlbmREaWN0J10gPSBmdW5jdGlvbiAocXVlc3Rpb25CYWNrZW5kRGljdCkge1xuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgICAgIHJldHVybiBuZXcgUXVlc3Rpb24ocXVlc3Rpb25CYWNrZW5kRGljdC5pZCwgU3RhdGVPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdCgncXVlc3Rpb24nLCBxdWVzdGlvbkJhY2tlbmREaWN0LnF1ZXN0aW9uX3N0YXRlX2RhdGEpLCBxdWVzdGlvbkJhY2tlbmREaWN0Lmxhbmd1YWdlX2NvZGUsIHF1ZXN0aW9uQmFja2VuZERpY3QudmVyc2lvbiwgcXVlc3Rpb25CYWNrZW5kRGljdC5saW5rZWRfc2tpbGxfaWRzKTtcbiAgICAgICAgfTtcbiAgICAgICAgUXVlc3Rpb24ucHJvdG90eXBlLnRvQmFja2VuZERpY3QgPSBmdW5jdGlvbiAoaXNOZXdRdWVzdGlvbikge1xuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uQmFja2VuZERpY3QgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgcXVlc3Rpb25fc3RhdGVfZGF0YTogdGhpcy5fc3RhdGVEYXRhLnRvQmFja2VuZERpY3QoKSxcbiAgICAgICAgICAgICAgICBsYW5ndWFnZV9jb2RlOiB0aGlzLl9sYW5ndWFnZUNvZGUsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghaXNOZXdRdWVzdGlvbikge1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uQmFja2VuZERpY3QuaWQgPSB0aGlzLl9pZDtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbkJhY2tlbmREaWN0LnZlcnNpb24gPSB0aGlzLl92ZXJzaW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHF1ZXN0aW9uQmFja2VuZERpY3Q7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBRdWVzdGlvbjtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29uc3RhbnRzIGZvciBxdWVzdGlvbiBkb21haW4uXG4gKi9cbi8vIFRPRE8oIzcwOTIpOiBEZWxldGUgdGhpcyBmaWxlIG9uY2UgbWlncmF0aW9uIGlzIGNvbXBsZXRlIGFuZCB0aGVzZSBBbmd1bGFySlNcbi8vIGVxdWl2YWxlbnRzIG9mIHRoZSBBbmd1bGFyIGNvbnN0YW50cyBhcmUgbm8gbG9uZ2VyIG5lZWRlZC5cbnZhciBxdWVzdGlvbl9kb21haW5fY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiZG9tYWluL3F1ZXN0aW9uL3F1ZXN0aW9uLWRvbWFpbi5jb25zdGFudHNcIik7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnRURJVEFCTEVfUVVFU1RJT05fREFUQV9VUkxfVEVNUExBVEUnLCBxdWVzdGlvbl9kb21haW5fY29uc3RhbnRzXzEuUXVlc3Rpb25Eb21haW5Db25zdGFudHMuRURJVEFCTEVfUVVFU1RJT05fREFUQV9VUkxfVEVNUExBVEUpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1FVRVNUSU9OX0NSRUFUSU9OX1VSTCcsIHF1ZXN0aW9uX2RvbWFpbl9jb25zdGFudHNfMS5RdWVzdGlvbkRvbWFpbkNvbnN0YW50cy5RVUVTVElPTl9DUkVBVElPTl9VUkwpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1FVRVNUSU9OX1NLSUxMX0xJTktfVVJMX1RFTVBMQVRFJywgcXVlc3Rpb25fZG9tYWluX2NvbnN0YW50c18xLlF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzLlFVRVNUSU9OX1NLSUxMX0xJTktfVVJMX1RFTVBMQVRFKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdQUkVURVNUX1FVRVNUSU9OU19VUkxfVEVNUExBVEUnLCBxdWVzdGlvbl9kb21haW5fY29uc3RhbnRzXzEuUXVlc3Rpb25Eb21haW5Db25zdGFudHMuUFJFVEVTVF9RVUVTVElPTlNfVVJMX1RFTVBMQVRFKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdRVUVTVElPTl9QTEFZRVJfVVJMX1RFTVBMQVRFJywgcXVlc3Rpb25fZG9tYWluX2NvbnN0YW50c18xLlF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzLlFVRVNUSU9OX1BMQVlFUl9VUkxfVEVNUExBVEUpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1FVRVNUSU9OU19MSVNUX1VSTF9URU1QTEFURScsIHF1ZXN0aW9uX2RvbWFpbl9jb25zdGFudHNfMS5RdWVzdGlvbkRvbWFpbkNvbnN0YW50cy5RVUVTVElPTlNfTElTVF9VUkxfVEVNUExBVEUpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1FVRVNUSU9OX1BST1BFUlRZX0xBTkdVQUdFX0NPREUnLCBxdWVzdGlvbl9kb21haW5fY29uc3RhbnRzXzEuUXVlc3Rpb25Eb21haW5Db25zdGFudHMuUVVFU1RJT05fUFJPUEVSVFlfTEFOR1VBR0VfQ09ERSk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnUVVFU1RJT05fUFJPUEVSVFlfUVVFU1RJT05fU1RBVEVfREFUQScsIHF1ZXN0aW9uX2RvbWFpbl9jb25zdGFudHNfMS5RdWVzdGlvbkRvbWFpbkNvbnN0YW50cy5RVUVTVElPTl9QUk9QRVJUWV9RVUVTVElPTl9TVEFURV9EQVRBKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdDTURfVVBEQVRFX1FVRVNUSU9OX1BST1BFUlRZJywgcXVlc3Rpb25fZG9tYWluX2NvbnN0YW50c18xLlF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzLkNNRF9VUERBVEVfUVVFU1RJT05fUFJPUEVSVFkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgZm9yIHF1ZXN0aW9uIGRvbWFpbi5cbiAqL1xudmFyIFF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzKCkge1xuICAgIH1cbiAgICBRdWVzdGlvbkRvbWFpbkNvbnN0YW50cy5FRElUQUJMRV9RVUVTVElPTl9EQVRBX1VSTF9URU1QTEFURSA9ICcvcXVlc3Rpb25fZWRpdG9yX2hhbmRsZXIvZGF0YS88cXVlc3Rpb25faWQ+JztcbiAgICBRdWVzdGlvbkRvbWFpbkNvbnN0YW50cy5RVUVTVElPTl9DUkVBVElPTl9VUkwgPSAnL3F1ZXN0aW9uX2VkaXRvcl9oYW5kbGVyL2NyZWF0ZV9uZXcnO1xuICAgIFF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzLlFVRVNUSU9OX1NLSUxMX0xJTktfVVJMX1RFTVBMQVRFID0gJy9tYW5hZ2VfcXVlc3Rpb25fc2tpbGxfbGluay88cXVlc3Rpb25faWQ+Lzxza2lsbF9pZD4nO1xuICAgIFF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzLlBSRVRFU1RfUVVFU1RJT05TX1VSTF9URU1QTEFURSA9ICcvcHJldGVzdF9oYW5kbGVyLzxleHBsb3JhdGlvbl9pZD4/c3RvcnlfaWQ9PHN0b3J5X2lkPiZjdXJzb3I9PGN1cnNvcj4nO1xuICAgIFF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzLlFVRVNUSU9OX1BMQVlFUl9VUkxfVEVNUExBVEUgPSAnL3F1ZXN0aW9uX3BsYXllcl9oYW5kbGVyP3NraWxsX2lkcz08c2tpbGxfaWRzPiZxdWVzdGlvbl9jb3VudCcgK1xuICAgICAgICAnPTxxdWVzdGlvbl9jb3VudD4mZmV0Y2hfYnlfZGlmZmljdWx0eT08ZmV0Y2hfYnlfZGlmZmljdWx0eT4nO1xuICAgIFF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzLlFVRVNUSU9OU19MSVNUX1VSTF9URU1QTEFURSA9ICcvcXVlc3Rpb25zX2xpc3RfaGFuZGxlci88Y29tbWFfc2VwYXJhdGVkX3NraWxsX2lkcz4/Y3Vyc29yPTxjdXJzb3I+JztcbiAgICBRdWVzdGlvbkRvbWFpbkNvbnN0YW50cy5RVUVTVElPTl9QUk9QRVJUWV9MQU5HVUFHRV9DT0RFID0gJ2xhbmd1YWdlX2NvZGUnO1xuICAgIFF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzLlFVRVNUSU9OX1BST1BFUlRZX1FVRVNUSU9OX1NUQVRFX0RBVEEgPSAncXVlc3Rpb25fc3RhdGVfZGF0YSc7XG4gICAgUXVlc3Rpb25Eb21haW5Db25zdGFudHMuQ01EX1VQREFURV9RVUVTVElPTl9QUk9QRVJUWSA9ICd1cGRhdGVfcXVlc3Rpb25fcHJvcGVydHknO1xuICAgIHJldHVybiBRdWVzdGlvbkRvbWFpbkNvbnN0YW50cztcbn0oKSk7XG5leHBvcnRzLlF1ZXN0aW9uRG9tYWluQ29uc3RhbnRzID0gUXVlc3Rpb25Eb21haW5Db25zdGFudHM7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNlcnZpY2UgdG8gcmV0cmlldmUgcmVhZCBvbmx5IGluZm9ybWF0aW9uXG4gKiBhYm91dCB0aGUgY29uY2VwdCBjYXJkIG9mIGEgc2tpbGwgZnJvbSB0aGUgYmFja2VuZC5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3NraWxsL3NraWxsLWRvbWFpbi5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdDb25jZXB0Q2FyZEJhY2tlbmRBcGlTZXJ2aWNlJywgW1xuICAgICckaHR0cCcsICckcScsICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsICdDT05DRVBUX0NBUkRfREFUQV9VUkxfVEVNUExBVEUnLFxuICAgIGZ1bmN0aW9uICgkaHR0cCwgJHEsIFVybEludGVycG9sYXRpb25TZXJ2aWNlLCBDT05DRVBUX0NBUkRfREFUQV9VUkxfVEVNUExBVEUpIHtcbiAgICAgICAgLy8gTWFwcyBwcmV2aW91c2x5IGxvYWRlZCBjb25jZXB0IGNhcmRzIHRvIHRoZWlyIElEcy5cbiAgICAgICAgdmFyIF9jb25jZXB0Q2FyZENhY2hlID0gW107XG4gICAgICAgIHZhciBfZmV0Y2hDb25jZXB0Q2FyZHMgPSBmdW5jdGlvbiAoc2tpbGxJZHMsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGNvbmNlcHRDYXJkRGF0YVVybCA9IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKENPTkNFUFRfQ0FSRF9EQVRBX1VSTF9URU1QTEFURSwge1xuICAgICAgICAgICAgICAgIGNvbW1hX3NlcGFyYXRlZF9za2lsbF9pZHM6IHNraWxsSWRzLmpvaW4oJywnKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkaHR0cC5nZXQoY29uY2VwdENhcmREYXRhVXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBjb25jZXB0Q2FyZHMgPSBhbmd1bGFyLmNvcHkocmVzcG9uc2UuZGF0YS5jb25jZXB0X2NhcmRfZGljdHMpO1xuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKGNvbmNlcHRDYXJkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycm9yUmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfaXNDYWNoZWQgPSBmdW5jdGlvbiAoc2tpbGxJZCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jb25jZXB0Q2FyZENhY2hlLmhhc093blByb3BlcnR5KHNraWxsSWQpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2dldFVuY2FjaGVkU2tpbGxJZHMgPSBmdW5jdGlvbiAoc2tpbGxJZHMpIHtcbiAgICAgICAgICAgIHZhciB1bmNhY2hlZFNraWxsSWRzID0gW107XG4gICAgICAgICAgICBza2lsbElkcy5mb3JFYWNoKGZ1bmN0aW9uIChza2lsbElkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfaXNDYWNoZWQoc2tpbGxJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5jYWNoZWRTa2lsbElkcy5wdXNoKHNraWxsSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHVuY2FjaGVkU2tpbGxJZHM7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBmZXRjaCBjb25jZXB0IGNhcmRzIGZyb20gdGhlIGJhY2tlbmQsIGFzIHdlbGwgYXNcbiAgICAgICAgICAgICAqIGF0dGVtcHQgdG8gc2VlIHdoZXRoZXIgdGhlIGdpdmVuIGNvbmNlcHQgY2FyZHMgaGF2ZSBhbHJlYWR5IGJlZW5cbiAgICAgICAgICAgICAqIGxvYWRlZC4gSWYgdGhleSBoYXZlIG5vdCB5ZXQgYmVlbiBsb2FkZWQsIGl0IHdpbGwgZmV0Y2ggdGhlIGNvbmNlcHRcbiAgICAgICAgICAgICAqIGNhcmRzIGZyb20gdGhlIGJhY2tlbmQuIElmIGl0IHN1Y2Nlc3NmdWxseSByZXRyaWV2ZXMgdGhlIGNvbmNlcHQgY2FyZHNcbiAgICAgICAgICAgICAqIGZyb20gdGhlIGJhY2tlbmQsIGl0IHdpbGwgc3RvcmUgdGhlbSBpbiB0aGUgY2FjaGUgdG8gYXZvaWQgcmVxdWVzdHNcbiAgICAgICAgICAgICAqIGZyb20gdGhlIGJhY2tlbmQgaW4gZnVydGhlciBmdW5jdGlvbiBjYWxscy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbG9hZENvbmNlcHRDYXJkczogZnVuY3Rpb24gKHNraWxsSWRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVuY2FjaGVkU2tpbGxJZHMgPSBfZ2V0VW5jYWNoZWRTa2lsbElkcyhza2lsbElkcyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25jZXB0Q2FyZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVuY2FjaGVkU2tpbGxJZHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDYXNlIHdoZXJlIG9ubHkgcGFydCAob3Igbm9uZSkgb2YgdGhlIGNvbmNlcHQgY2FyZHMgYXJlIGNhY2hlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9jYWxseS5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9mZXRjaENvbmNlcHRDYXJkcyh1bmNhY2hlZFNraWxsSWRzLCBmdW5jdGlvbiAodW5jYWNoZWRDb25jZXB0Q2FyZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lsbElkcy5mb3JFYWNoKGZ1bmN0aW9uIChza2lsbElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmNhY2hlZFNraWxsSWRzLmluY2x1ZGVzKHNraWxsSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25jZXB0Q2FyZHMucHVzaCh1bmNhY2hlZENvbmNlcHRDYXJkc1t1bmNhY2hlZFNraWxsSWRzLmluZGV4T2Yoc2tpbGxJZCldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIGZldGNoZWQgY29uY2VwdENhcmRzIHRvIGF2b2lkIGZ1dHVyZSBmZXRjaGVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbmNlcHRDYXJkQ2FjaGVbc2tpbGxJZF0gPSBhbmd1bGFyLmNvcHkodW5jYWNoZWRDb25jZXB0Q2FyZHNbdW5jYWNoZWRTa2lsbElkcy5pbmRleE9mKHNraWxsSWQpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25jZXB0Q2FyZHMucHVzaChhbmd1bGFyLmNvcHkoX2NvbmNlcHRDYXJkQ2FjaGVbc2tpbGxJZF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYW5ndWxhci5jb3B5KGNvbmNlcHRDYXJkcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDYXNlIHdoZXJlIGFsbCBvZiB0aGUgY29uY2VwdCBjYXJkcyBhcmUgY2FjaGVkIGxvY2FsbHkuXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lsbElkcy5mb3JFYWNoKGZ1bmN0aW9uIChza2lsbElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uY2VwdENhcmRzLnB1c2goYW5ndWxhci5jb3B5KF9jb25jZXB0Q2FyZENhY2hlW3NraWxsSWRdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjb25jZXB0Q2FyZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IE9iamVjdCBmYWN0b3J5IGZvciBjcmVhdGluZyBhIGZyb250LWVuZCBpbnN0YW5jZSBvZiBhXG4gKiBjb25jZXB0IGNhcmQuIEluIHRoZSBiYWNrZW5kLCB0aGlzIGlzIHJlZmVycmVkIHRvIGFzIFNraWxsQ29udGVudHMuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi9leHBsb3JhdGlvbi9SZWNvcmRlZFZvaWNlb3ZlcnNPYmplY3RGYWN0b3J5LnRzJyk7XG5yZXF1aXJlKCdkb21haW4vZXhwbG9yYXRpb24vU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0NvbmNlcHRDYXJkT2JqZWN0RmFjdG9yeScsIFtcbiAgICAnUmVjb3JkZWRWb2ljZW92ZXJzT2JqZWN0RmFjdG9yeScsICdTdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeScsXG4gICAgJ0NPTVBPTkVOVF9OQU1FX0VYUExBTkFUSU9OJyxcbiAgICBmdW5jdGlvbiAoUmVjb3JkZWRWb2ljZW92ZXJzT2JqZWN0RmFjdG9yeSwgU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnksIENPTVBPTkVOVF9OQU1FX0VYUExBTkFUSU9OKSB7XG4gICAgICAgIHZhciBDb25jZXB0Q2FyZCA9IGZ1bmN0aW9uIChleHBsYW5hdGlvbiwgd29ya2VkRXhhbXBsZXMsIHJlY29yZGVkVm9pY2VvdmVycykge1xuICAgICAgICAgICAgdGhpcy5fZXhwbGFuYXRpb24gPSBleHBsYW5hdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtlZEV4YW1wbGVzID0gd29ya2VkRXhhbXBsZXM7XG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRlZFZvaWNlb3ZlcnMgPSByZWNvcmRlZFZvaWNlb3ZlcnM7XG4gICAgICAgIH07XG4gICAgICAgIENvbmNlcHRDYXJkLnByb3RvdHlwZS50b0JhY2tlbmREaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBleHBsYW5hdGlvbjogdGhpcy5fZXhwbGFuYXRpb24udG9CYWNrZW5kRGljdCgpLFxuICAgICAgICAgICAgICAgIHdvcmtlZF9leGFtcGxlczogdGhpcy5fd29ya2VkRXhhbXBsZXMubWFwKGZ1bmN0aW9uICh3b3JrZWRFeGFtcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3b3JrZWRFeGFtcGxlLnRvQmFja2VuZERpY3QoKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICByZWNvcmRlZF92b2ljZW92ZXJzOiB0aGlzLl9yZWNvcmRlZFZvaWNlb3ZlcnMudG9CYWNrZW5kRGljdCgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2dlbmVyYXRlV29ya2VkRXhhbXBsZXNGcm9tQmFja2VuZERpY3QgPSBmdW5jdGlvbiAod29ya2VkRXhhbXBsZURpY3RzKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VkRXhhbXBsZURpY3RzLm1hcChmdW5jdGlvbiAod29ya2VkRXhhbXBsZURpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KHdvcmtlZEV4YW1wbGVEaWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2dldEVsZW1lbnRzSW5GaXJzdFNldEJ1dE5vdEluU2Vjb25kID0gZnVuY3Rpb24gKHNldEEsIHNldEIpIHtcbiAgICAgICAgICAgIHZhciBkaWZmTGlzdCA9IEFycmF5LmZyb20oc2V0QSkuZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFzZXRCLmhhcyhlbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRpZmZMaXN0O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2V4dHJhY3RBdmFpbGFibGVDb250ZW50SWRzRnJvbVdvcmtlZEV4YW1wbGVzID0gZnVuY3Rpb24gKHdvcmtlZEV4YW1wbGVzKSB7XG4gICAgICAgICAgICB2YXIgY29udGVudElkcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIHdvcmtlZEV4YW1wbGVzLmZvckVhY2goZnVuY3Rpb24gKHdvcmtlZEV4YW1wbGUpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50SWRzLmFkZCh3b3JrZWRFeGFtcGxlLmdldENvbnRlbnRJZCgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRJZHM7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE8oYW5raXRhMjQwNzk2KTogUmVtb3ZlIHRoZSBicmFja2V0IG5vdGF0aW9uIG9uY2UgQW5ndWxhcjIgZ2V0cyBpbi5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgIENvbmNlcHRDYXJkWydjcmVhdGVGcm9tQmFja2VuZERpY3QnXSA9IGZ1bmN0aW9uIChjb25jZXB0Q2FyZEJhY2tlbmREaWN0KSB7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGRvdC1ub3RhdGlvbiAqL1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25jZXB0Q2FyZChTdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeS5jcmVhdGVGcm9tQmFja2VuZERpY3QoY29uY2VwdENhcmRCYWNrZW5kRGljdC5leHBsYW5hdGlvbiksIF9nZW5lcmF0ZVdvcmtlZEV4YW1wbGVzRnJvbUJhY2tlbmREaWN0KGNvbmNlcHRDYXJkQmFja2VuZERpY3Qud29ya2VkX2V4YW1wbGVzKSwgUmVjb3JkZWRWb2ljZW92ZXJzT2JqZWN0RmFjdG9yeS5jcmVhdGVGcm9tQmFja2VuZERpY3QoY29uY2VwdENhcmRCYWNrZW5kRGljdC5yZWNvcmRlZF92b2ljZW92ZXJzKSk7XG4gICAgICAgIH07XG4gICAgICAgIENvbmNlcHRDYXJkLnByb3RvdHlwZS5nZXRFeHBsYW5hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHBsYW5hdGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgQ29uY2VwdENhcmQucHJvdG90eXBlLnNldEV4cGxhbmF0aW9uID0gZnVuY3Rpb24gKGV4cGxhbmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9leHBsYW5hdGlvbiA9IGV4cGxhbmF0aW9uO1xuICAgICAgICB9O1xuICAgICAgICBDb25jZXB0Q2FyZC5wcm90b3R5cGUuZ2V0V29ya2VkRXhhbXBsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd29ya2VkRXhhbXBsZXMuc2xpY2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ29uY2VwdENhcmQucHJvdG90eXBlLnNldFdvcmtlZEV4YW1wbGVzID0gZnVuY3Rpb24gKHdvcmtlZEV4YW1wbGVzKSB7XG4gICAgICAgICAgICB2YXIgb2xkQ29udGVudElkcyA9IF9leHRyYWN0QXZhaWxhYmxlQ29udGVudElkc0Zyb21Xb3JrZWRFeGFtcGxlcyh0aGlzLl93b3JrZWRFeGFtcGxlcyk7XG4gICAgICAgICAgICB0aGlzLl93b3JrZWRFeGFtcGxlcyA9IHdvcmtlZEV4YW1wbGVzLnNsaWNlKCk7XG4gICAgICAgICAgICB2YXIgbmV3Q29udGVudElkcyA9IF9leHRyYWN0QXZhaWxhYmxlQ29udGVudElkc0Zyb21Xb3JrZWRFeGFtcGxlcyh0aGlzLl93b3JrZWRFeGFtcGxlcyk7XG4gICAgICAgICAgICB2YXIgY29udGVudElkc1RvRGVsZXRlID0gX2dldEVsZW1lbnRzSW5GaXJzdFNldEJ1dE5vdEluU2Vjb25kKG9sZENvbnRlbnRJZHMsIG5ld0NvbnRlbnRJZHMpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRJZHNUb0FkZCA9IF9nZXRFbGVtZW50c0luRmlyc3RTZXRCdXROb3RJblNlY29uZChuZXdDb250ZW50SWRzLCBvbGRDb250ZW50SWRzKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudElkc1RvRGVsZXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3JkZWRWb2ljZW92ZXJzLmRlbGV0ZUNvbnRlbnRJZChjb250ZW50SWRzVG9EZWxldGVbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50SWRzVG9BZGQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRlZFZvaWNlb3ZlcnMuYWRkQ29udGVudElkKGNvbnRlbnRJZHNUb0FkZFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIENvbmNlcHRDYXJkLnByb3RvdHlwZS5nZXRSZWNvcmRlZFZvaWNlb3ZlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb3JkZWRWb2ljZW92ZXJzO1xuICAgICAgICB9O1xuICAgICAgICAvLyBDcmVhdGUgYW4gaW50ZXJzdGl0aWFsIGNvbmNlcHQgY2FyZCB0aGF0IHdvdWxkIGJlIGRpc3BsYXllZCBpbiB0aGVcbiAgICAgICAgLy8gZWRpdG9yIHVudGlsIHRoZSBhY3R1YWwgc2tpbGwgaXMgZmV0Y2hlZCBmcm9tIHRoZSBiYWNrZW5kLlxuICAgICAgICAvLyBUT0RPKGFua2l0YTI0MDc5Nik6IFJlbW92ZSB0aGUgYnJhY2tldCBub3RhdGlvbiBvbmNlIEFuZ3VsYXIyIGdldHMgaW4uXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGRvdC1ub3RhdGlvbiAqL1xuICAgICAgICBDb25jZXB0Q2FyZFsnY3JlYXRlSW50ZXJzdGl0aWFsQ29uY2VwdENhcmQnXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgICAgICB2YXIgcmVjb3JkZWRWb2ljZW92ZXJzRGljdCA9IHtcbiAgICAgICAgICAgICAgICB2b2ljZW92ZXJzX21hcHBpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgQ09NUE9ORU5UX05BTUVfRVhQTEFOQVRJT046IHt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29uY2VwdENhcmQoU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkuY3JlYXRlRGVmYXVsdCgnTG9hZGluZyByZXZpZXcgbWF0ZXJpYWwnLCBDT01QT05FTlRfTkFNRV9FWFBMQU5BVElPTiksIFtdLCBSZWNvcmRlZFZvaWNlb3ZlcnNPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChyZWNvcmRlZFZvaWNlb3ZlcnNEaWN0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBDb25jZXB0Q2FyZDtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0byBzZW5kIGNoYW5nZXMgdG8gc2tpbGwgbWFzdGVyeSB0byB0aGUgYmFja2VuZC5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnU2tpbGxNYXN0ZXJ5QmFja2VuZEFwaVNlcnZpY2UnLCBbXG4gICAgJyRodHRwJywgJyRxJywgJ1NLSUxMX01BU1RFUllfREFUQV9VUkxfVEVNUExBVEUnLFxuICAgIGZ1bmN0aW9uICgkaHR0cCwgJHEsIFNLSUxMX01BU1RFUllfREFUQV9VUkxfVEVNUExBVEUpIHtcbiAgICAgICAgdmFyIF9mZXRjaFNraWxsTWFzdGVyeURlZ3JlZXMgPSBmdW5jdGlvbiAoc2tpbGxJZHMsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgJGh0dHAuZ2V0KFNLSUxMX01BU1RFUllfREFUQV9VUkxfVEVNUExBVEUsIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFfc2VwYXJhdGVkX3NraWxsX2lkczogc2tpbGxJZHMuam9pbignLCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZS5kYXRhLmRlZ3JlZXNfb2ZfbWFzdGVyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycm9yUmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfdXBkYXRlU2tpbGxNYXN0ZXJ5RGVncmVlcyA9IGZ1bmN0aW9uIChtYXN0ZXJ5UGVyU2tpbGxNYXBwaW5nLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBwdXREYXRhID0ge1xuICAgICAgICAgICAgICAgIG1hc3RlcnlfY2hhbmdlX3Blcl9za2lsbDogbWFzdGVyeVBlclNraWxsTWFwcGluZ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRodHRwLnB1dChTS0lMTF9NQVNURVJZX0RBVEFfVVJMX1RFTVBMQVRFLCBwdXREYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycm9yUmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmZXRjaFNraWxsTWFzdGVyeURlZ3JlZXM6IGZ1bmN0aW9uIChza2lsbElkcykge1xuICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF9mZXRjaFNraWxsTWFzdGVyeURlZ3JlZXMoc2tpbGxJZHMsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXBkYXRlU2tpbGxNYXN0ZXJ5RGVncmVlczogZnVuY3Rpb24gKG1hc3RlcnlQZXJTa2lsbE1hcHBpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBfdXBkYXRlU2tpbGxNYXN0ZXJ5RGVncmVlcyhtYXN0ZXJ5UGVyU2tpbGxNYXBwaW5nLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgZm9yIHNraWxsIGRvbWFpbi5cbiAqL1xuLy8gVE9ETygjNzA5Mik6IERlbGV0ZSB0aGlzIGZpbGUgb25jZSBtaWdyYXRpb24gaXMgY29tcGxldGUgYW5kIHRoZXNlIEFuZ3VsYXJKU1xuLy8gZXF1aXZhbGVudHMgb2YgdGhlIEFuZ3VsYXIgY29uc3RhbnRzIGFyZSBubyBsb25nZXIgbmVlZGVkLlxudmFyIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJkb21haW4vc2tpbGwvc2tpbGwtZG9tYWluLmNvbnN0YW50c1wiKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdDT05DRVBUX0NBUkRfREFUQV9VUkxfVEVNUExBVEUnLCBza2lsbF9kb21haW5fY29uc3RhbnRzXzEuU2tpbGxEb21haW5Db25zdGFudHMuQ09OQ0VQVF9DQVJEX0RBVEFfVVJMX1RFTVBMQVRFKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdFRElUQUJMRV9TS0lMTF9EQVRBX1VSTF9URU1QTEFURScsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5FRElUQUJMRV9TS0lMTF9EQVRBX1VSTF9URU1QTEFURSk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnU0tJTExfREFUQV9VUkxfVEVNUExBVEUnLCBza2lsbF9kb21haW5fY29uc3RhbnRzXzEuU2tpbGxEb21haW5Db25zdGFudHMuU0tJTExfREFUQV9VUkxfVEVNUExBVEUpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1NLSUxMX0VESVRPUl9RVUVTVElPTl9VUkxfVEVNUExBVEUnLCBza2lsbF9kb21haW5fY29uc3RhbnRzXzEuU2tpbGxEb21haW5Db25zdGFudHMuU0tJTExfRURJVE9SX1FVRVNUSU9OX1VSTF9URU1QTEFURSk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnU0tJTExfTUFTVEVSWV9EQVRBX1VSTF9URU1QTEFURScsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5TS0lMTF9NQVNURVJZX0RBVEFfVVJMX1RFTVBMQVRFKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdTS0lMTF9QUk9QRVJUWV9ERVNDUklQVElPTicsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5TS0lMTF9QUk9QRVJUWV9ERVNDUklQVElPTik7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnU0tJTExfUFJPUEVSVFlfTEFOR1VBR0VfQ09ERScsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5TS0lMTF9QUk9QRVJUWV9MQU5HVUFHRV9DT0RFKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdTS0lMTF9DT05URU5UU19QUk9QRVJUWV9FWFBMQU5BVElPTicsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5TS0lMTF9DT05URU5UU19QUk9QRVJUWV9FWFBMQU5BVElPTik7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnU0tJTExfQ09OVEVOVFNfUFJPUEVSVFlfV09SS0VEX0VYQU1QTEVTJywgc2tpbGxfZG9tYWluX2NvbnN0YW50c18xLlNraWxsRG9tYWluQ29uc3RhbnRzLlNLSUxMX0NPTlRFTlRTX1BST1BFUlRZX1dPUktFRF9FWEFNUExFUyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnU0tJTExfTUlTQ09OQ0VQVElPTlNfUFJPUEVSVFlfTkFNRScsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5TS0lMTF9NSVNDT05DRVBUSU9OU19QUk9QRVJUWV9OQU1FKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdTS0lMTF9NSVNDT05DRVBUSU9OU19QUk9QRVJUWV9OT1RFUycsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5TS0lMTF9NSVNDT05DRVBUSU9OU19QUk9QRVJUWV9OT1RFUyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnU0tJTExfTUlTQ09OQ0VQVElPTlNfUFJPUEVSVFlfRkVFREJBQ0snLCBza2lsbF9kb21haW5fY29uc3RhbnRzXzEuU2tpbGxEb21haW5Db25zdGFudHMuU0tJTExfTUlTQ09OQ0VQVElPTlNfUFJPUEVSVFlfRkVFREJBQ0spO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0NNRF9VUERBVEVfU0tJTExfUFJPUEVSVFknLCBza2lsbF9kb21haW5fY29uc3RhbnRzXzEuU2tpbGxEb21haW5Db25zdGFudHMuQ01EX1VQREFURV9TS0lMTF9QUk9QRVJUWSk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnQ01EX1VQREFURV9TS0lMTF9DT05URU5UU19QUk9QRVJUWScsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5DTURfVVBEQVRFX1NLSUxMX0NPTlRFTlRTX1BST1BFUlRZKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdDTURfVVBEQVRFX1NLSUxMX01JU0NPTkNFUFRJT05TX1BST1BFUlRZJywgc2tpbGxfZG9tYWluX2NvbnN0YW50c18xLlNraWxsRG9tYWluQ29uc3RhbnRzLkNNRF9VUERBVEVfU0tJTExfTUlTQ09OQ0VQVElPTlNfUFJPUEVSVFkpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0NNRF9BRERfU0tJTExfTUlTQ09OQ0VQVElPTicsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5DTURfQUREX1NLSUxMX01JU0NPTkNFUFRJT04pO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0NNRF9ERUxFVEVfU0tJTExfTUlTQ09OQ0VQVElPTicsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5DTURfREVMRVRFX1NLSUxMX01JU0NPTkNFUFRJT04pO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0NNRF9VUERBVEVfUlVCUklDUycsIHNraWxsX2RvbWFpbl9jb25zdGFudHNfMS5Ta2lsbERvbWFpbkNvbnN0YW50cy5DTURfVVBEQVRFX1JVQlJJQ1MpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgZm9yIHNraWxsIGRvbWFpbi5cbiAqL1xudmFyIFNraWxsRG9tYWluQ29uc3RhbnRzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNraWxsRG9tYWluQ29uc3RhbnRzKCkge1xuICAgIH1cbiAgICBTa2lsbERvbWFpbkNvbnN0YW50cy5DT05DRVBUX0NBUkRfREFUQV9VUkxfVEVNUExBVEUgPSAnL2NvbmNlcHRfY2FyZF9oYW5kbGVyLzxjb21tYV9zZXBhcmF0ZWRfc2tpbGxfaWRzPic7XG4gICAgU2tpbGxEb21haW5Db25zdGFudHMuRURJVEFCTEVfU0tJTExfREFUQV9VUkxfVEVNUExBVEUgPSAnL3NraWxsX2VkaXRvcl9oYW5kbGVyL2RhdGEvPHNraWxsX2lkPic7XG4gICAgU2tpbGxEb21haW5Db25zdGFudHMuU0tJTExfREFUQV9VUkxfVEVNUExBVEUgPSAnL3NraWxsX2RhdGFfaGFuZGxlci88Y29tbWFfc2VwYXJhdGVkX3NraWxsX2lkcz4nO1xuICAgIFNraWxsRG9tYWluQ29uc3RhbnRzLlNLSUxMX0VESVRPUl9RVUVTVElPTl9VUkxfVEVNUExBVEUgPSAnL3NraWxsX2VkaXRvcl9xdWVzdGlvbl9oYW5kbGVyLzxza2lsbF9pZD4/Y3Vyc29yPTxjdXJzb3I+JztcbiAgICBTa2lsbERvbWFpbkNvbnN0YW50cy5TS0lMTF9NQVNURVJZX0RBVEFfVVJMX1RFTVBMQVRFID0gJy9za2lsbF9tYXN0ZXJ5X2hhbmRsZXIvZGF0YSc7XG4gICAgU2tpbGxEb21haW5Db25zdGFudHMuU0tJTExfUFJPUEVSVFlfREVTQ1JJUFRJT04gPSAnZGVzY3JpcHRpb24nO1xuICAgIFNraWxsRG9tYWluQ29uc3RhbnRzLlNLSUxMX1BST1BFUlRZX0xBTkdVQUdFX0NPREUgPSAnbGFuZ3VhZ2VfY29kZSc7XG4gICAgU2tpbGxEb21haW5Db25zdGFudHMuU0tJTExfQ09OVEVOVFNfUFJPUEVSVFlfRVhQTEFOQVRJT04gPSAnZXhwbGFuYXRpb24nO1xuICAgIFNraWxsRG9tYWluQ29uc3RhbnRzLlNLSUxMX0NPTlRFTlRTX1BST1BFUlRZX1dPUktFRF9FWEFNUExFUyA9ICd3b3JrZWRfZXhhbXBsZXMnO1xuICAgIFNraWxsRG9tYWluQ29uc3RhbnRzLlNLSUxMX01JU0NPTkNFUFRJT05TX1BST1BFUlRZX05BTUUgPSAnbmFtZSc7XG4gICAgU2tpbGxEb21haW5Db25zdGFudHMuU0tJTExfTUlTQ09OQ0VQVElPTlNfUFJPUEVSVFlfTk9URVMgPSAnbm90ZXMnO1xuICAgIFNraWxsRG9tYWluQ29uc3RhbnRzLlNLSUxMX01JU0NPTkNFUFRJT05TX1BST1BFUlRZX0ZFRURCQUNLID0gJ2ZlZWRiYWNrJztcbiAgICBTa2lsbERvbWFpbkNvbnN0YW50cy5DTURfVVBEQVRFX1NLSUxMX1BST1BFUlRZID0gJ3VwZGF0ZV9za2lsbF9wcm9wZXJ0eSc7XG4gICAgU2tpbGxEb21haW5Db25zdGFudHMuQ01EX1VQREFURV9TS0lMTF9DT05URU5UU19QUk9QRVJUWSA9ICd1cGRhdGVfc2tpbGxfY29udGVudHNfcHJvcGVydHknO1xuICAgIFNraWxsRG9tYWluQ29uc3RhbnRzLkNNRF9VUERBVEVfU0tJTExfTUlTQ09OQ0VQVElPTlNfUFJPUEVSVFkgPSAndXBkYXRlX3NraWxsX21pc2NvbmNlcHRpb25zX3Byb3BlcnR5JztcbiAgICBTa2lsbERvbWFpbkNvbnN0YW50cy5DTURfQUREX1NLSUxMX01JU0NPTkNFUFRJT04gPSAnYWRkX3NraWxsX21pc2NvbmNlcHRpb24nO1xuICAgIFNraWxsRG9tYWluQ29uc3RhbnRzLkNNRF9ERUxFVEVfU0tJTExfTUlTQ09OQ0VQVElPTiA9ICdkZWxldGVfc2tpbGxfbWlzY29uY2VwdGlvbic7XG4gICAgU2tpbGxEb21haW5Db25zdGFudHMuQ01EX1VQREFURV9SVUJSSUNTID0gJ3VwZGF0ZV9ydWJyaWNzJztcbiAgICByZXR1cm4gU2tpbGxEb21haW5Db25zdGFudHM7XG59KCkpO1xuZXhwb3J0cy5Ta2lsbERvbWFpbkNvbnN0YW50cyA9IFNraWxsRG9tYWluQ29uc3RhbnRzO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTUgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgZnJvbnRlbmQgaW5zdGFuY2VzIG9mIFN0YXRlXG4gKiBkb21haW4gb2JqZWN0cy5cbiAqL1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL1JlY29yZGVkVm9pY2VvdmVyc09iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9leHBsb3JhdGlvbi9JbnRlcmFjdGlvbk9iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9leHBsb3JhdGlvbi9QYXJhbUNoYW5nZXNPYmplY3RGYWN0b3J5LnRzJyk7XG5yZXF1aXJlKCdkb21haW4vZXhwbG9yYXRpb24vU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9leHBsb3JhdGlvbi9Xcml0dGVuVHJhbnNsYXRpb25zT2JqZWN0RmFjdG9yeS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnU3RhdGVPYmplY3RGYWN0b3J5JywgW1xuICAgICdJbnRlcmFjdGlvbk9iamVjdEZhY3RvcnknLCAnUGFyYW1DaGFuZ2VzT2JqZWN0RmFjdG9yeScsXG4gICAgJ1JlY29yZGVkVm9pY2VvdmVyc09iamVjdEZhY3RvcnknLCAnU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnknLFxuICAgICdXcml0dGVuVHJhbnNsYXRpb25zT2JqZWN0RmFjdG9yeScsICdORVdfU1RBVEVfVEVNUExBVEUnLCBmdW5jdGlvbiAoSW50ZXJhY3Rpb25PYmplY3RGYWN0b3J5LCBQYXJhbUNoYW5nZXNPYmplY3RGYWN0b3J5LCBSZWNvcmRlZFZvaWNlb3ZlcnNPYmplY3RGYWN0b3J5LCBTdWJ0aXRsZWRIdG1sT2JqZWN0RmFjdG9yeSwgV3JpdHRlblRyYW5zbGF0aW9uc09iamVjdEZhY3RvcnksIE5FV19TVEFURV9URU1QTEFURSkge1xuICAgICAgICB2YXIgU3RhdGUgPSBmdW5jdGlvbiAobmFtZSwgY2xhc3NpZmllck1vZGVsSWQsIGNvbnRlbnQsIGludGVyYWN0aW9uLCBwYXJhbUNoYW5nZXMsIHJlY29yZGVkVm9pY2VvdmVycywgc29saWNpdEFuc3dlckRldGFpbHMsIHdyaXR0ZW5UcmFuc2xhdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICB0aGlzLmNsYXNzaWZpZXJNb2RlbElkID0gY2xhc3NpZmllck1vZGVsSWQ7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICAgICAgdGhpcy5pbnRlcmFjdGlvbiA9IGludGVyYWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5wYXJhbUNoYW5nZXMgPSBwYXJhbUNoYW5nZXM7XG4gICAgICAgICAgICB0aGlzLnJlY29yZGVkVm9pY2VvdmVycyA9IHJlY29yZGVkVm9pY2VvdmVycztcbiAgICAgICAgICAgIHRoaXMuc29saWNpdEFuc3dlckRldGFpbHMgPSBzb2xpY2l0QW5zd2VyRGV0YWlscztcbiAgICAgICAgICAgIHRoaXMud3JpdHRlblRyYW5zbGF0aW9ucyA9IHdyaXR0ZW5UcmFuc2xhdGlvbnM7XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlLnByb3RvdHlwZS5zZXROYW1lID0gZnVuY3Rpb24gKG5ld05hbWUpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5ld05hbWU7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEluc3RhbmNlIG1ldGhvZHMuXG4gICAgICAgIFN0YXRlLnByb3RvdHlwZS50b0JhY2tlbmREaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLmNvbnRlbnQudG9CYWNrZW5kRGljdCgpLFxuICAgICAgICAgICAgICAgIGNsYXNzaWZpZXJfbW9kZWxfaWQ6IHRoaXMuY2xhc3NpZmllck1vZGVsSWQsXG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb246IHRoaXMuaW50ZXJhY3Rpb24udG9CYWNrZW5kRGljdCgpLFxuICAgICAgICAgICAgICAgIHBhcmFtX2NoYW5nZXM6IHRoaXMucGFyYW1DaGFuZ2VzLm1hcChmdW5jdGlvbiAocGFyYW1DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtQ2hhbmdlLnRvQmFja2VuZERpY3QoKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICByZWNvcmRlZF92b2ljZW92ZXJzOiB0aGlzLnJlY29yZGVkVm9pY2VvdmVycy50b0JhY2tlbmREaWN0KCksXG4gICAgICAgICAgICAgICAgc29saWNpdF9hbnN3ZXJfZGV0YWlsczogdGhpcy5zb2xpY2l0QW5zd2VyRGV0YWlscyxcbiAgICAgICAgICAgICAgICB3cml0dGVuX3RyYW5zbGF0aW9uczogdGhpcy53cml0dGVuVHJhbnNsYXRpb25zLnRvQmFja2VuZERpY3QoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAob3RoZXJTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gb3RoZXJTdGF0ZS5uYW1lO1xuICAgICAgICAgICAgdGhpcy5jbGFzc2lmaWVyTW9kZWxJZCA9IG90aGVyU3RhdGUuY2xhc3NpZmllck1vZGVsSWQ7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBhbmd1bGFyLmNvcHkob3RoZXJTdGF0ZS5jb250ZW50KTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb24uY29weShvdGhlclN0YXRlLmludGVyYWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMucGFyYW1DaGFuZ2VzID0gYW5ndWxhci5jb3B5KG90aGVyU3RhdGUucGFyYW1DaGFuZ2VzKTtcbiAgICAgICAgICAgIHRoaXMucmVjb3JkZWRWb2ljZW92ZXJzID0gYW5ndWxhci5jb3B5KG90aGVyU3RhdGUucmVjb3JkZWRWb2ljZW92ZXJzKTtcbiAgICAgICAgICAgIHRoaXMuc29saWNpdEFuc3dlckRldGFpbHMgPSBhbmd1bGFyLmNvcHkob3RoZXJTdGF0ZS5zb2xpY2l0QW5zd2VyRGV0YWlscyk7XG4gICAgICAgICAgICB0aGlzLndyaXR0ZW5UcmFuc2xhdGlvbnMgPSBhbmd1bGFyLmNvcHkob3RoZXJTdGF0ZS53cml0dGVuVHJhbnNsYXRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETyhhbmtpdGEyNDA3OTYpOiBSZW1vdmUgdGhlIGJyYWNrZXQgbm90YXRpb24gb25jZSBBbmd1bGFyMiBnZXRzIGluLlxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgU3RhdGVbJ2NyZWF0ZURlZmF1bHRTdGF0ZSddID0gZnVuY3Rpb24gKG5ld1N0YXRlTmFtZSkge1xuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgICAgIHZhciBuZXdTdGF0ZVRlbXBsYXRlID0gYW5ndWxhci5jb3B5KE5FV19TVEFURV9URU1QTEFURSk7XG4gICAgICAgICAgICB2YXIgbmV3U3RhdGUgPSB0aGlzLmNyZWF0ZUZyb21CYWNrZW5kRGljdChuZXdTdGF0ZU5hbWUsIHtcbiAgICAgICAgICAgICAgICBjbGFzc2lmaWVyX21vZGVsX2lkOiBuZXdTdGF0ZVRlbXBsYXRlLmNsYXNzaWZpZXJfbW9kZWxfaWQsXG4gICAgICAgICAgICAgICAgY29udGVudDogbmV3U3RhdGVUZW1wbGF0ZS5jb250ZW50LFxuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uOiBuZXdTdGF0ZVRlbXBsYXRlLmludGVyYWN0aW9uLFxuICAgICAgICAgICAgICAgIHBhcmFtX2NoYW5nZXM6IG5ld1N0YXRlVGVtcGxhdGUucGFyYW1fY2hhbmdlcyxcbiAgICAgICAgICAgICAgICByZWNvcmRlZF92b2ljZW92ZXJzOiBuZXdTdGF0ZVRlbXBsYXRlLnJlY29yZGVkX3ZvaWNlb3ZlcnMsXG4gICAgICAgICAgICAgICAgc29saWNpdF9hbnN3ZXJfZGV0YWlsczogbmV3U3RhdGVUZW1wbGF0ZS5zb2xpY2l0X2Fuc3dlcl9kZXRhaWxzLFxuICAgICAgICAgICAgICAgIHdyaXR0ZW5fdHJhbnNsYXRpb25zOiBuZXdTdGF0ZVRlbXBsYXRlLndyaXR0ZW5fdHJhbnNsYXRpb25zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ld1N0YXRlLmludGVyYWN0aW9uLmRlZmF1bHRPdXRjb21lLmRlc3QgPSBuZXdTdGF0ZU5hbWU7XG4gICAgICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFN0YXRpYyBjbGFzcyBtZXRob2RzLiBOb3RlIHRoYXQgXCJ0aGlzXCIgaXMgbm90IGF2YWlsYWJsZSBpblxuICAgICAgICAvLyBzdGF0aWMgY29udGV4dHMuXG4gICAgICAgIC8vIFRPRE8oYW5raXRhMjQwNzk2KTogUmVtb3ZlIHRoZSBicmFja2V0IG5vdGF0aW9uIG9uY2UgQW5ndWxhcjIgZ2V0cyBpbi5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgIFN0YXRlWydjcmVhdGVGcm9tQmFja2VuZERpY3QnXSA9IGZ1bmN0aW9uIChzdGF0ZU5hbWUsIHN0YXRlRGljdCkge1xuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RhdGUoc3RhdGVOYW1lLCBzdGF0ZURpY3QuY2xhc3NpZmllcl9tb2RlbF9pZCwgU3VidGl0bGVkSHRtbE9iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KHN0YXRlRGljdC5jb250ZW50KSwgSW50ZXJhY3Rpb25PYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChzdGF0ZURpY3QuaW50ZXJhY3Rpb24pLCBQYXJhbUNoYW5nZXNPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kTGlzdChzdGF0ZURpY3QucGFyYW1fY2hhbmdlcyksIFJlY29yZGVkVm9pY2VvdmVyc09iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KHN0YXRlRGljdC5yZWNvcmRlZF92b2ljZW92ZXJzKSwgc3RhdGVEaWN0LnNvbGljaXRfYW5zd2VyX2RldGFpbHMsIFdyaXR0ZW5UcmFuc2xhdGlvbnNPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChzdGF0ZURpY3Qud3JpdHRlbl90cmFuc2xhdGlvbnMpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFN0YXRlO1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgZnJvbnRlbmQgaW5zdGFuY2VzIG9mIFN0YXRlXG4gKiBjYXJkIGRvbWFpbiBvYmplY3RzIHVzZWQgaW4gdGhlIGV4cGxvcmF0aW9uIHBsYXllci5cbiAqL1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvJyArXG4gICAgJ2F1ZGlvLXRyYW5zbGF0aW9uLWxhbmd1YWdlLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0V4cGxvcmF0aW9uSHRtbEZvcm1hdHRlclNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1N0YXRlQ2FyZE9iamVjdEZhY3RvcnknLCBbXG4gICAgJ0F1ZGlvVHJhbnNsYXRpb25MYW5ndWFnZVNlcnZpY2UnLFxuICAgICdJTlRFUkFDVElPTl9ESVNQTEFZX01PREVfSU5MSU5FJywgJ0lOVEVSQUNUSU9OX1NQRUNTJyxcbiAgICBmdW5jdGlvbiAoQXVkaW9UcmFuc2xhdGlvbkxhbmd1YWdlU2VydmljZSwgSU5URVJBQ1RJT05fRElTUExBWV9NT0RFX0lOTElORSwgSU5URVJBQ1RJT05fU1BFQ1MpIHtcbiAgICAgICAgdmFyIFN0YXRlQ2FyZCA9IGZ1bmN0aW9uIChzdGF0ZU5hbWUsIGNvbnRlbnRIdG1sLCBpbnRlcmFjdGlvbkh0bWwsIGludGVyYWN0aW9uLCBpbnB1dFJlc3BvbnNlUGFpcnMsIHJlY29yZGVkVm9pY2VvdmVycywgY29udGVudElkKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZU5hbWUgPSBzdGF0ZU5hbWU7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50SHRtbCA9IGNvbnRlbnRIdG1sO1xuICAgICAgICAgICAgdGhpcy5faW50ZXJhY3Rpb25IdG1sID0gaW50ZXJhY3Rpb25IdG1sO1xuICAgICAgICAgICAgdGhpcy5faW5wdXRSZXNwb25zZVBhaXJzID0gaW5wdXRSZXNwb25zZVBhaXJzO1xuICAgICAgICAgICAgdGhpcy5faW50ZXJhY3Rpb24gPSBpbnRlcmFjdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX3JlY29yZGVkVm9pY2VvdmVycyA9IHJlY29yZGVkVm9pY2VvdmVycztcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRJZCA9IGNvbnRlbnRJZDtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBTdGF0ZUNhcmQucHJvdG90eXBlLmdldFN0YXRlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZU5hbWU7XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlQ2FyZC5wcm90b3R5cGUuZ2V0SW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW50ZXJhY3Rpb247XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlQ2FyZC5wcm90b3R5cGUuZ2V0Vm9pY2VvdmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZWNvcmRlZFZvaWNlb3ZlcnMgPSB0aGlzLl9yZWNvcmRlZFZvaWNlb3ZlcnM7XG4gICAgICAgICAgICB2YXIgY29udGVudElkID0gdGhpcy5fY29udGVudElkO1xuICAgICAgICAgICAgaWYgKHJlY29yZGVkVm9pY2VvdmVycykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmRlZFZvaWNlb3ZlcnMuZ2V0QmluZGFibGVWb2ljZW92ZXJzKGNvbnRlbnRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlQ2FyZC5wcm90b3R5cGUuZ2V0UmVjb3JkZWRWb2ljZW92ZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29yZGVkVm9pY2VvdmVycztcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5pc0NvbnRlbnRBdWRpb1RyYW5zbGF0aW9uQXZhaWxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZ2V0Vm9pY2VvdmVycygpKS5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICAgICAgQXVkaW9UcmFuc2xhdGlvbkxhbmd1YWdlU2VydmljZS5pc0F1dG9nZW5lcmF0ZWRBdWRpb0FsbG93ZWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgICAgIFN0YXRlQ2FyZC5wcm90b3R5cGUuZ2V0SW50ZXJhY3Rpb25JZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRJbnRlcmFjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEludGVyYWN0aW9uKCkuaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5pc1Rlcm1pbmFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uSWQgPSB0aGlzLmdldEludGVyYWN0aW9uSWQoKTtcbiAgICAgICAgICAgIHJldHVybiAoaW50ZXJhY3Rpb25JZCAmJiBJTlRFUkFDVElPTl9TUEVDU1tpbnRlcmFjdGlvbklkXS5pc190ZXJtaW5hbCk7XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlQ2FyZC5wcm90b3R5cGUuZ2V0SGludHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnRlcmFjdGlvbigpLmhpbnRzO1xuICAgICAgICB9O1xuICAgICAgICBTdGF0ZUNhcmQucHJvdG90eXBlLmdldFNvbHV0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW50ZXJhY3Rpb24oKS5zb2x1dGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5kb2VzSW50ZXJhY3Rpb25TdXBwb3J0SGludHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25JZCA9IHRoaXMuZ2V0SW50ZXJhY3Rpb25JZCgpO1xuICAgICAgICAgICAgcmV0dXJuICghSU5URVJBQ1RJT05fU1BFQ1NbaW50ZXJhY3Rpb25JZF0uaXNfdGVybWluYWwgJiZcbiAgICAgICAgICAgICAgICAhSU5URVJBQ1RJT05fU1BFQ1NbaW50ZXJhY3Rpb25JZF0uaXNfbGluZWFyKTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5pc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb21wbGV0ZWQ7XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlQ2FyZC5wcm90b3R5cGUubWFya0FzQ29tcGxldGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5tYXJrQXNOb3RDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5nZXRJbnRlcmFjdGlvbkluc3RydWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbklkID0gdGhpcy5nZXRJbnRlcmFjdGlvbklkKCk7XG4gICAgICAgICAgICByZXR1cm4gKGludGVyYWN0aW9uSWQgPyBJTlRFUkFDVElPTl9TUEVDU1tpbnRlcmFjdGlvbklkXS5pbnN0cnVjdGlvbnMgOiAnJyk7XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlQ2FyZC5wcm90b3R5cGUuZ2V0SW50ZXJhY3Rpb25DdXN0b21pemF0aW9uQXJncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IHRoaXMuZ2V0SW50ZXJhY3Rpb24oKTtcbiAgICAgICAgICAgIGlmICghaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbnRlcmFjdGlvbi5jdXN0b21pemF0aW9uQXJncztcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5pc0ludGVyYWN0aW9uSW5saW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uSWQgPSB0aGlzLmdldEludGVyYWN0aW9uSWQoKTtcbiAgICAgICAgICAgIHJldHVybiAoIWludGVyYWN0aW9uSWQgfHxcbiAgICAgICAgICAgICAgICBJTlRFUkFDVElPTl9TUEVDU1tpbnRlcmFjdGlvbklkXS5kaXNwbGF5X21vZGUgPT09XG4gICAgICAgICAgICAgICAgICAgIElOVEVSQUNUSU9OX0RJU1BMQVlfTU9ERV9JTkxJTkUpO1xuICAgICAgICB9O1xuICAgICAgICBTdGF0ZUNhcmQucHJvdG90eXBlLmdldENvbnRlbnRIdG1sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRIdG1sO1xuICAgICAgICB9O1xuICAgICAgICBTdGF0ZUNhcmQucHJvdG90eXBlLmdldEludGVyYWN0aW9uSHRtbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnRlcmFjdGlvbkh0bWw7XG4gICAgICAgIH07XG4gICAgICAgIFN0YXRlQ2FyZC5wcm90b3R5cGUuZ2V0T3BwaWFSZXNwb25zZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lucHV0UmVzcG9uc2VQYWlyc1tpbmRleF0ub3BwaWFSZXNwb25zZTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5nZXRJbnB1dFJlc3BvbnNlUGFpcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRSZXNwb25zZVBhaXJzO1xuICAgICAgICB9O1xuICAgICAgICBTdGF0ZUNhcmQucHJvdG90eXBlLmdldExhc3RJbnB1dFJlc3BvbnNlUGFpciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dFJlc3BvbnNlUGFpcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRSZXNwb25zZVBhaXJzW3RoaXMuX2lucHV0UmVzcG9uc2VQYWlycy5sZW5ndGggLSAxXTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5nZXRMYXN0QW5zd2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0TGFzdElucHV0UmVzcG9uc2VQYWlyKCkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldExhc3RJbnB1dFJlc3BvbnNlUGFpcigpLmxlYXJuZXJJbnB1dDtcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5nZXRMYXN0T3BwaWFSZXNwb25zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdldExhc3RJbnB1dFJlc3BvbnNlUGFpcigpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRMYXN0SW5wdXRSZXNwb25zZVBhaXIoKS5vcHBpYVJlc3BvbnNlO1xuICAgICAgICB9O1xuICAgICAgICBTdGF0ZUNhcmQucHJvdG90eXBlLmFkZElucHV0UmVzcG9uc2VQYWlyID0gZnVuY3Rpb24gKGlucHV0UmVzcG9uc2VQYWlyKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dFJlc3BvbnNlUGFpcnMucHVzaChhbmd1bGFyLmNvcHkoaW5wdXRSZXNwb25zZVBhaXIpKTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RhdGVDYXJkLnByb3RvdHlwZS5zZXRMYXN0T3BwaWFSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgLy8gVGhpcyBjaGVjayBpcyBhZGRlZCBoZXJlIHRvIGVuc3VyZSB0aGF0IHRoaXMuX2lucHV0UmVwb25zZVBhaXJzIGlzXG4gICAgICAgICAgICAvLyBhY2Nlc3NlZCBvbmx5IGlmIHRoZXJlIGlzIGF0bGVhc3Qgb25lIGlucHV0IHJlc3BvbnNlIHBhaXIgcHJlc2VudC5cbiAgICAgICAgICAgIC8vIEluIHRoZSBlZGl0b3IgcHJldmlldyB0YWIgaWYgYSB1c2VyIGNsaWNrcyBvbiByZXN0YXJ0IGZyb20gYmVnaW5uaW5nXG4gICAgICAgICAgICAvLyBvcHRpb24ganVzdCBhZnRlciBzdWJtaXR0aW5nIGFuIGFuc3dlciBmb3IgYSBjYXJkIHdoaWxlIHRoZSByZXNwb25zZVxuICAgICAgICAgICAgLy8gaXMgc3RpbGwgbG9hZGluZywgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWZ0ZXJcbiAgICAgICAgICAgIC8vIHRoaXMuX2lucHV0UmVzcG9uc2VQYWlycyBpcyBzZXQgdG8gbnVsbCBhcyB3ZSBhcmUgc3RhcnRpbmcgZnJvbSB0aGVcbiAgICAgICAgICAgIC8vIGZpcnN0IGNhcmQgYWdhaW4uIEFkZGluZyBhIGNoZWNrIGhlcmUgbWFrZXMgc3VyZSB0aGF0IGVsZW1lbnQgYXQgaW5kZXhcbiAgICAgICAgICAgIC8vIC0xIGlzIG5vdCBhY2Nlc3NlZCBldmVuIGluIHRoZSBhYm92ZSBjYXNlLlxuICAgICAgICAgICAgaWYgKHRoaXMuX2lucHV0UmVzcG9uc2VQYWlycy5sZW5ndGggPj0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0UmVzcG9uc2VQYWlyc1t0aGlzLl9pbnB1dFJlc3BvbnNlUGFpcnMubGVuZ3RoIC0gMV0ub3BwaWFSZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBTdGF0ZUNhcmQucHJvdG90eXBlLnNldEludGVyYWN0aW9uSHRtbCA9IGZ1bmN0aW9uIChpbnRlcmFjdGlvbkh0bWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVyYWN0aW9uSHRtbCA9IGludGVyYWN0aW9uSHRtbDtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0ZU5hbWUgLSBUaGUgc3RhdGUgbmFtZSBmb3IgdGhlIGN1cnJlbnQgY2FyZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRIdG1sIC0gVGhlIEhUTUwgc3RyaW5nIGZvciB0aGUgY29udGVudCBkaXNwbGF5ZWRcbiAgICAgICAgICogICAgICAgIG9uIHRoZSBjb250ZW50IGNhcmQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnRlcmFjdGlvbkh0bWwgLSBUaGUgSFRNTCB0aGF0IGNhbGxzIHRoZSBpbnRlcmFjdGlvblxuICAgICAgICAgKiAgICAgICAgZGlyZWN0aXZlIGZvciB0aGUgY3VycmVudCBjYXJkLlxuICAgICAgICAgKiBAcGFyYW0ge0ludGVyYWN0aW9ufSBpbnRlcmFjdGlvbiAtIEFuIGludGVyYWN0aW9uIG9iamVjdCB0aGF0IHN0b3JlcyBhbGxcbiAgICAgICAgICogICAgICAgIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBjYXJkJ3MgaW50ZXJhY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICAvLyBUT0RPKGFua2l0YTI0MDc5Nik6IFJlbW92ZSB0aGUgYnJhY2tldCBub3RhdGlvbiBvbmNlIEFuZ3VsYXIyIGdldHMgaW4uXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGRvdC1ub3RhdGlvbiAqL1xuICAgICAgICBTdGF0ZUNhcmRbJ2NyZWF0ZU5ld0NhcmQnXSA9IGZ1bmN0aW9uIChcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgc3RhdGVOYW1lLCBjb250ZW50SHRtbCwgaW50ZXJhY3Rpb25IdG1sLCBpbnRlcmFjdGlvbiwgcmVjb3JkZWRWb2ljZW92ZXJzLCBjb250ZW50SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RhdGVDYXJkKHN0YXRlTmFtZSwgY29udGVudEh0bWwsIGludGVyYWN0aW9uSHRtbCwgaW50ZXJhY3Rpb24sIFtdLCByZWNvcmRlZFZvaWNlb3ZlcnMsIGNvbnRlbnRJZCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTdGF0ZUNhcmQ7XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2YgTGVhcm5lclxuICogICAgIEFjdGlvbiBkb21haW4gb2JqZWN0cy5cbiAqL1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHN0YXRpc3RpY3NfZG9tYWluX2NvbnN0YW50c18xID0gcmVxdWlyZShcImRvbWFpbi9zdGF0aXN0aWNzL3N0YXRpc3RpY3MtZG9tYWluLmNvbnN0YW50c1wiKTtcbnZhciBMZWFybmVyQWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb25UeXBlIC0gdHlwZSBvZiBhbiBhY3Rpb24uXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj59IGFjdGlvbkN1c3RvbWl6YXRpb25BcmdzIC0gY3VzdG9taXphdGlvbiBkaWN0XG4gICAgICogICBmb3IgYW4gYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2hlbWFWZXJzaW9uIC0gc2NoZW1hIHZlcnNpb24gb2YgdGhlIGNsYXNzIGluc3RhbmNlLlxuICAgICAqL1xuICAgIC8vIFRPRE8oIzcxNjUpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgJ291dGNvbWUnIGlzIGFuIG91dGNvbWUgZG9tYWluIG9iamVjdCBhbmQgdGhpcyBjYW4gYmVcbiAgICAvLyBkaXJlY3RseSB0eXBlZCB0byAnT3V0Y29tZScgdHlwZSBvbmNlICdPdXRjb21lT2JqZWN0RmFjdG9yeScgaXMgdXBncmFkZWQuXG4gICAgZnVuY3Rpb24gTGVhcm5lckFjdGlvbihhY3Rpb25UeXBlLCBhY3Rpb25DdXN0b21pemF0aW9uQXJncywgc2NoZW1hVmVyc2lvbikge1xuICAgICAgICBpZiAoc2NoZW1hVmVyc2lvbiA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZ2l2ZW4gaW52YWxpZCBzY2hlbWEgdmVyc2lvbicpO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgICB0aGlzLmFjdGlvblR5cGUgPSBhY3Rpb25UeXBlO1xuICAgICAgICAvKiogQHR5cGUge09iamVjdC48c3RyaW5nLCAqPn0gKi9cbiAgICAgICAgdGhpcy5hY3Rpb25DdXN0b21pemF0aW9uQXJncyA9IGFjdGlvbkN1c3RvbWl6YXRpb25BcmdzO1xuICAgICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICAgICAgdGhpcy5zY2hlbWFWZXJzaW9uID0gc2NoZW1hVmVyc2lvbjtcbiAgICB9XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgcmV0dXJuIHR5cGUgaXMgYSBkaWN0IHdpdGggdW5kZXJzY29yZV9jYXNlZFxuICAgIC8vIGtleXMgd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW4gZmF2b3Igb2ZcbiAgICAvLyBjYW1lbENhc2luZy5cbiAgICBMZWFybmVyQWN0aW9uLnByb3RvdHlwZS50b0JhY2tlbmREaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWN0aW9uX3R5cGU6IHRoaXMuYWN0aW9uVHlwZSxcbiAgICAgICAgICAgIGFjdGlvbl9jdXN0b21pemF0aW9uX2FyZ3M6IHRoaXMuYWN0aW9uQ3VzdG9taXphdGlvbkFyZ3MsXG4gICAgICAgICAgICBzY2hlbWFfdmVyc2lvbjogdGhpcy5zY2hlbWFWZXJzaW9uLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIExlYXJuZXJBY3Rpb247XG59KCkpO1xuZXhwb3J0cy5MZWFybmVyQWN0aW9uID0gTGVhcm5lckFjdGlvbjtcbnZhciBMZWFybmVyQWN0aW9uT2JqZWN0RmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMZWFybmVyQWN0aW9uT2JqZWN0RmFjdG9yeSgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGFjdGlvblR5cGUgLSB0eXBlIG9mIGFuIGFjdGlvblxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsICo+fSBhY3Rpb25DdXN0b21pemF0aW9uQXJncyAtIGN1c3RvbWl6YXRpb25cbiAgICAgKiAgIGRpY3QgZm9yIGFuIGFjdGlvblxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc2NoZW1hVmVyc2lvbj1MRUFSTkVSX0FDVElPTl9TQ0hFTUFfTEFURVNUX1ZFUlNJT05dXG4gICAgICogICAtIHNjaGVtYSB2ZXJzaW9uIG9mIHRoZSBjbGFzcyBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7TGVhcm5lckFjdGlvbn1cbiAgICAgKi9cbiAgICBMZWFybmVyQWN0aW9uT2JqZWN0RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlTmV3ID0gZnVuY3Rpb24gKGFjdGlvblR5cGUsIGFjdGlvbkN1c3RvbWl6YXRpb25BcmdzLCBzY2hlbWFWZXJzaW9uKSB7XG4gICAgICAgIHNjaGVtYVZlcnNpb24gPSBzY2hlbWFWZXJzaW9uIHx8XG4gICAgICAgICAgICBzdGF0aXN0aWNzX2RvbWFpbl9jb25zdGFudHNfMS5TdGF0aXN0aWNzRG9tYWluQ29uc3RhbnRzLkxFQVJORVJfQUNUSU9OX1NDSEVNQV9MQVRFU1RfVkVSU0lPTjtcbiAgICAgICAgcmV0dXJuIG5ldyBMZWFybmVyQWN0aW9uKGFjdGlvblR5cGUsIGFjdGlvbkN1c3RvbWl6YXRpb25BcmdzLCBzY2hlbWFWZXJzaW9uKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIExlYXJuZXJBY3Rpb25CYWNrZW5kRGljdFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhY3Rpb25UeXBlIC0gdHlwZSBvZiBhbiBhY3Rpb24uXG4gICAgICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywgKj59IGFjdGlvbkN1c3RvbWl6YXRpb25BcmdzIC0gY3VzdG9taXphdGlvblxuICAgICAqICAgZGljdCBmb3IgYW4gYWN0aW9uLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzY2hlbWFWZXJzaW9uIC0gc2NoZW1hIHZlcnNpb24gb2YgdGhlIGNsYXNzIGluc3RhbmNlLlxuICAgICAqICAgRGVmYXVsdHMgdG8gdGhlIGxhdGVzdCBzY2hlbWEgdmVyc2lvbi5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0xlYXJuZXJBY3Rpb25CYWNrZW5kRGljdH0gbGVhcm5lckFjdGlvbkJhY2tlbmREaWN0XG4gICAgICogQHJldHVybnMge0xlYXJuZXJBY3Rpb259XG4gICAgICovXG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnbGVhcm5lckFjdGlvbkJhY2tlbmREaWN0JyBpcyBhIGRpY3Qgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkXG4gICAgLy8ga2V5cyB3aGljaCBnaXZlIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZlxuICAgIC8vIGNhbWVsQ2FzaW5nLlxuICAgIExlYXJuZXJBY3Rpb25PYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tQmFja2VuZERpY3QgPSBmdW5jdGlvbiAobGVhcm5lckFjdGlvbkJhY2tlbmREaWN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgTGVhcm5lckFjdGlvbihsZWFybmVyQWN0aW9uQmFja2VuZERpY3QuYWN0aW9uX3R5cGUsIGxlYXJuZXJBY3Rpb25CYWNrZW5kRGljdC5hY3Rpb25fY3VzdG9taXphdGlvbl9hcmdzLCBsZWFybmVyQWN0aW9uQmFja2VuZERpY3Quc2NoZW1hX3ZlcnNpb24pO1xuICAgIH07XG4gICAgTGVhcm5lckFjdGlvbk9iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgTGVhcm5lckFjdGlvbk9iamVjdEZhY3RvcnkpO1xuICAgIHJldHVybiBMZWFybmVyQWN0aW9uT2JqZWN0RmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLkxlYXJuZXJBY3Rpb25PYmplY3RGYWN0b3J5ID0gTGVhcm5lckFjdGlvbk9iamVjdEZhY3Rvcnk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdMZWFybmVyQWN0aW9uT2JqZWN0RmFjdG9yeScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoTGVhcm5lckFjdGlvbk9iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0byByZWNvcmQgbGVhcm5lciBhbnN3ZXIgaW5mby5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3N0YXRpc3RpY3Mvc3RhdGlzdGljcy1kb21haW4uY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnTGVhcm5lckFuc3dlckRldGFpbHNCYWNrZW5kQXBpU2VydmljZScsIFtcbiAgICAnJGh0dHAnLCAnJHEnLCAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCAnU1VCTUlUX0xFQVJORVJfQU5TV0VSX0RFVEFJTFNfVVJMJyxcbiAgICBmdW5jdGlvbiAoJGh0dHAsICRxLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSwgU1VCTUlUX0xFQVJORVJfQU5TV0VSX0RFVEFJTFNfVVJMKSB7XG4gICAgICAgIHZhciBfcmVjb3JkTGVhcm5lckFuc3dlckRldGFpbHMgPSBmdW5jdGlvbiAoZXhwSWQsIHN0YXRlTmFtZSwgaW50ZXJhY3Rpb25JZCwgYW5zd2VyLCBhbnN3ZXJEZXRhaWxzLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciByZWNvcmRMZWFybmVyQW5zd2VyRGV0YWlsc1VybCA9IChVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5pbnRlcnBvbGF0ZVVybChTVUJNSVRfTEVBUk5FUl9BTlNXRVJfREVUQUlMU19VUkwsIHtcbiAgICAgICAgICAgICAgICBlbnRpdHlfdHlwZTogJ2V4cGxvcmF0aW9uJyxcbiAgICAgICAgICAgICAgICBlbnRpdHlfaWQ6IGV4cElkXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICBzdGF0ZV9uYW1lOiBzdGF0ZU5hbWUsXG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25faWQ6IGludGVyYWN0aW9uSWQsXG4gICAgICAgICAgICAgICAgYW5zd2VyOiBhbnN3ZXIsXG4gICAgICAgICAgICAgICAgYW5zd2VyX2RldGFpbHM6IGFuc3dlckRldGFpbHNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkaHR0cC5wdXQocmVjb3JkTGVhcm5lckFuc3dlckRldGFpbHNVcmwsIHBheWxvYWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soZXJyb3JSZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlY29yZExlYXJuZXJBbnN3ZXJEZXRhaWxzOiBmdW5jdGlvbiAoZXhwSWQsIHN0YXRlTmFtZSwgaW50ZXJhY3Rpb25JZCwgYW5zd2VyLCBhbnN3ZXJEZXRhaWxzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgX3JlY29yZExlYXJuZXJBbnN3ZXJEZXRhaWxzKGV4cElkLCBzdGF0ZU5hbWUsIGludGVyYWN0aW9uSWQsIGFuc3dlciwgYW5zd2VyRGV0YWlscywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGZyb250ZW5kIGluc3RhbmNlcyBvZiBFeHBsb3JhdGlvblxuICogICAgIElzc3VlIGRvbWFpbiBvYmplY3RzLlxuICovXG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgUGxheXRocm91Z2hJc3N1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaXNzdWVUeXBlIC0gdHlwZSBvZiBhbiBpc3N1ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCAqPn0gaXNzdWVDdXN0b21pemF0aW9uQXJncyAtIGN1c3RvbWl6YXRpb24gZGljdCBmb3JcbiAgICAgKiAgIGFuIGlzc3VlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBsYXl0aHJvdWdoSWRzIC0gbGlzdCBvZiBwbGF5dGhyb3VnaCBJRHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjaGVtYVZlcnNpb24gLSBzY2hlbWEgdmVyc2lvbiBvZiB0aGUgY2xhc3MgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIC0gd2hldGhlciB0aGUgaXNzdWUgaXMgdmFsaWQuXG4gICAgICovXG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnaXNzdWVDdXN0b21pemF0aW9uQXJncycgaXMgYSBkaWN0IHdpdGggcG9zc2libGVcbiAgICAvLyB1bmRlcnNjb3JlX2Nhc2VkIGtleXMgd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmdcbiAgICAvLyBpbiBmYXZvciBvZiBjYW1lbENhc2luZy5cbiAgICBmdW5jdGlvbiBQbGF5dGhyb3VnaElzc3VlKGlzc3VlVHlwZSwgaXNzdWVDdXN0b21pemF0aW9uQXJncywgcGxheXRocm91Z2hJZHMsIHNjaGVtYVZlcnNpb24sIGlzVmFsaWQpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICAgIHRoaXMuaXNzdWVUeXBlID0gaXNzdWVUeXBlO1xuICAgICAgICAvKiogQHR5cGUge09iamVjdC48c3RyaW5nLCAqPn0gKi9cbiAgICAgICAgdGhpcy5pc3N1ZUN1c3RvbWl6YXRpb25BcmdzID0gaXNzdWVDdXN0b21pemF0aW9uQXJncztcbiAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmdbXX0gKi9cbiAgICAgICAgdGhpcy5wbGF5dGhyb3VnaElkcyA9IHBsYXl0aHJvdWdoSWRzO1xuICAgICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICAgICAgdGhpcy5zY2hlbWFWZXJzaW9uID0gc2NoZW1hVmVyc2lvbjtcbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLmlzVmFsaWQgPSBpc1ZhbGlkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7RXhwbG9yYXRpb25Jc3N1ZUJhY2tlbmREaWN0fVxuICAgICAqL1xuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgdGhlIHJldHVybiB0eXBlIGlzIGEgZGljdCB3aXRoIHVuZGVyc2NvcmVfY2FzZWQga2V5cyB3aGljaFxuICAgIC8vIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mIGNhbWVsQ2FzaW5nLlxuICAgIFBsYXl0aHJvdWdoSXNzdWUucHJvdG90eXBlLnRvQmFja2VuZERpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc3N1ZV90eXBlOiB0aGlzLmlzc3VlVHlwZSxcbiAgICAgICAgICAgIGlzc3VlX2N1c3RvbWl6YXRpb25fYXJnczogdGhpcy5pc3N1ZUN1c3RvbWl6YXRpb25BcmdzLFxuICAgICAgICAgICAgcGxheXRocm91Z2hfaWRzOiB0aGlzLnBsYXl0aHJvdWdoSWRzLFxuICAgICAgICAgICAgc2NoZW1hX3ZlcnNpb246IHRoaXMuc2NoZW1hVmVyc2lvbixcbiAgICAgICAgICAgIGlzX3ZhbGlkOiB0aGlzLmlzVmFsaWRcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBQbGF5dGhyb3VnaElzc3VlO1xufSgpKTtcbmV4cG9ydHMuUGxheXRocm91Z2hJc3N1ZSA9IFBsYXl0aHJvdWdoSXNzdWU7XG52YXIgUGxheXRocm91Z2hJc3N1ZU9iamVjdEZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGxheXRocm91Z2hJc3N1ZU9iamVjdEZhY3RvcnkoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIEV4cGxvcmF0aW9uSXNzdWVCYWNrZW5kRGljdFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpc3N1ZVR5cGUgLSB0eXBlIG9mIGFuIGlzc3VlLlxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsICo+fSBpc3N1ZUN1c3RvbWl6YXRpb25BcmdzIC0gY3VzdG9taXphdGlvbiBkaWN0XG4gICAgICogICBmb3IgYW4gaXNzdWUuXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmdbXX0gcGxheXRocm91Z2hJZHMgLSBsaXN0IG9mIHBsYXl0aHJvdWdoIElEcy5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc2NoZW1hVmVyc2lvbiAtIHNjaGVtYSB2ZXJzaW9uIG9mIHRoZSBjbGFzcyBpbnN0YW5jZS5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzVmFsaWQgLSB3aGV0aGVyIHRoZSBpc3N1ZSBpcyB2YWxpZC5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0V4cGxvcmF0aW9uSXNzdWVCYWNrZW5kRGljdH0gZXhwbG9yYXRpb25Jc3N1ZUJhY2tlbmREaWN0XG4gICAgICogQHJldHVybnMge1BsYXl0aHJvdWdoSXNzdWV9XG4gICAgICovXG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnZXhwbG9yYXRpb25Jc3N1ZUJhY2tlbmREaWN0JyBpcyBhIGRpY3Qgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkXG4gICAgLy8ga2V5cyB3aGljaCBnaXZlIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZlxuICAgIC8vIGNhbWVsQ2FzaW5nLlxuICAgIFBsYXl0aHJvdWdoSXNzdWVPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tQmFja2VuZERpY3QgPSBmdW5jdGlvbiAoZXhwbG9yYXRpb25Jc3N1ZUJhY2tlbmREaWN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUGxheXRocm91Z2hJc3N1ZShleHBsb3JhdGlvbklzc3VlQmFja2VuZERpY3QuaXNzdWVfdHlwZSwgZXhwbG9yYXRpb25Jc3N1ZUJhY2tlbmREaWN0Lmlzc3VlX2N1c3RvbWl6YXRpb25fYXJncywgZXhwbG9yYXRpb25Jc3N1ZUJhY2tlbmREaWN0LnBsYXl0aHJvdWdoX2lkcywgZXhwbG9yYXRpb25Jc3N1ZUJhY2tlbmREaWN0LnNjaGVtYV92ZXJzaW9uLCBleHBsb3JhdGlvbklzc3VlQmFja2VuZERpY3QuaXNfdmFsaWQpO1xuICAgIH07XG4gICAgUGxheXRocm91Z2hJc3N1ZU9iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgUGxheXRocm91Z2hJc3N1ZU9iamVjdEZhY3RvcnkpO1xuICAgIHJldHVybiBQbGF5dGhyb3VnaElzc3VlT2JqZWN0RmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLlBsYXl0aHJvdWdoSXNzdWVPYmplY3RGYWN0b3J5ID0gUGxheXRocm91Z2hJc3N1ZU9iamVjdEZhY3Rvcnk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdQbGF5dGhyb3VnaElzc3VlT2JqZWN0RmFjdG9yeScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoUGxheXRocm91Z2hJc3N1ZU9iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBmcm9udGVuZCBpbnN0YW5jZXMgb2YgUGxheXRocm91Z2hcbiAqICAgICBkb21haW4gb2JqZWN0cy5cbiAqL1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIExlYXJuZXJBY3Rpb25PYmplY3RGYWN0b3J5XzEgPSByZXF1aXJlKFwiZG9tYWluL3N0YXRpc3RpY3MvTGVhcm5lckFjdGlvbk9iamVjdEZhY3RvcnlcIik7XG52YXIgUGxheXRocm91Z2ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBsYXl0aHJvdWdoSWQgLSBJRCBvZiBhIHBsYXl0aHJvdWdoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHBJZCAtIElEIG9mIGFuIGV4cGxvcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBleHBWZXJzaW9uIC0gVmVyc2lvbiBvZiBhbiBleHBsb3JhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaXNzdWVUeXBlIC0gdHlwZSBvZiBhbiBpc3N1ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCAqPn0gaXNzdWVDdXN0b21pemF0aW9uQXJncyAtIGN1c3RvbWl6YXRpb24gZGljdFxuICAgICAqICAgZm9yIGFuIGlzc3VlLlxuICAgICAqIEBwYXJhbSB7TGVhcm5lckFjdGlvbltdfSBhY3Rpb25zIC0gbGlzdCBvZiBsZWFybmVyIGFjdGlvbnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gUGxheXRocm91Z2gocGxheXRocm91Z2hJZCwgZXhwSWQsIGV4cFZlcnNpb24sIGlzc3VlVHlwZSwgaXNzdWVDdXN0b21pemF0aW9uQXJncywgYWN0aW9ucykge1xuICAgICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgICAgdGhpcy5wbGF5dGhyb3VnaElkID0gcGxheXRocm91Z2hJZDtcbiAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICAgIHRoaXMuZXhwSWQgPSBleHBJZDtcbiAgICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgICAgIHRoaXMuZXhwVmVyc2lvbiA9IGV4cFZlcnNpb247XG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgICB0aGlzLmlzc3VlVHlwZSA9IGlzc3VlVHlwZTtcbiAgICAgICAgLyoqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgKj59ICovXG4gICAgICAgIHRoaXMuaXNzdWVDdXN0b21pemF0aW9uQXJncyA9IGlzc3VlQ3VzdG9taXphdGlvbkFyZ3M7XG4gICAgICAgIC8qKiBAdHlwZSB7TGVhcm5lckFjdGlvbltdfSAqL1xuICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zO1xuICAgIH1cbiAgICAvKiogQHJldHVybnMge1BsYXl0aHJvdWdoQmFja2VuZERpY3R9ICovXG4gICAgUGxheXRocm91Z2gucHJvdG90eXBlLnRvQmFja2VuZERpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb25EaWN0cyA9IHRoaXMuYWN0aW9ucy5tYXAoZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbi50b0JhY2tlbmREaWN0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMucGxheXRocm91Z2hJZCxcbiAgICAgICAgICAgIGV4cF9pZDogdGhpcy5leHBJZCxcbiAgICAgICAgICAgIGV4cF92ZXJzaW9uOiB0aGlzLmV4cFZlcnNpb24sXG4gICAgICAgICAgICBpc3N1ZV90eXBlOiB0aGlzLmlzc3VlVHlwZSxcbiAgICAgICAgICAgIGlzc3VlX2N1c3RvbWl6YXRpb25fYXJnczogdGhpcy5pc3N1ZUN1c3RvbWl6YXRpb25BcmdzLFxuICAgICAgICAgICAgYWN0aW9uczogYWN0aW9uRGljdHNcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBQbGF5dGhyb3VnaDtcbn0oKSk7XG5leHBvcnRzLlBsYXl0aHJvdWdoID0gUGxheXRocm91Z2g7XG52YXIgUGxheXRocm91Z2hPYmplY3RGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBsYXl0aHJvdWdoT2JqZWN0RmFjdG9yeShsZWFybmVyQWN0aW9uT2JqZWN0RmFjdG9yeSkge1xuICAgICAgICB0aGlzLmxlYXJuZXJBY3Rpb25PYmplY3RGYWN0b3J5ID0gbGVhcm5lckFjdGlvbk9iamVjdEZhY3Rvcnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwbGF5dGhyb3VnaElkIC0gSUQgb2YgYSBwbGF5dGhyb3VnaC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwSWQgLSBJRCBvZiBhbiBleHBsb3JhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZXhwVmVyc2lvbiAtIFZlcnNpb24gb2YgYW4gZXhwbG9yYXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlzc3VlVHlwZSAtIHR5cGUgb2YgYW4gaXNzdWUuXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj59IGlzc3VlQ3VzdG9taXphdGlvbkFyZ3MgLSBjdXN0b21pemF0aW9uIGRpY3RcbiAgICAgKiAgIGZvciBhbiBpc3N1ZS5cbiAgICAgKiBAcGFyYW0ge0xlYXJuZXJBY3Rpb25bXX0gYWN0aW9ucyAtIGxpc3Qgb2YgbGVhcm5lciBhY3Rpb25zLlxuICAgICAqIEByZXR1cm5zIHtQbGF5dGhyb3VnaH1cbiAgICAgKi9cbiAgICBQbGF5dGhyb3VnaE9iamVjdEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZU5ldyA9IGZ1bmN0aW9uIChwbGF5dGhyb3VnaElkLCBleHBJZCwgZXhwVmVyc2lvbiwgaXNzdWVUeXBlLCBpc3N1ZUN1c3RvbWl6YXRpb25BcmdzLCBhY3Rpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGxheXRocm91Z2gocGxheXRocm91Z2hJZCwgZXhwSWQsIGV4cFZlcnNpb24sIGlzc3VlVHlwZSwgaXNzdWVDdXN0b21pemF0aW9uQXJncywgYWN0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZlxuICAgICAqIEBwYXJhbSB7UGxheXRocm91Z2hCYWNrZW5kRGljdH0gcGxheXRocm91Z2hCYWNrZW5kRGljdFxuICAgICAqIEByZXR1cm5zIHtQbGF5dGhyb3VnaH1cbiAgICAgKi9cbiAgICBQbGF5dGhyb3VnaE9iamVjdEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZUZyb21CYWNrZW5kRGljdCA9IGZ1bmN0aW9uIChwbGF5dGhyb3VnaEJhY2tlbmREaWN0KSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gcGxheXRocm91Z2hCYWNrZW5kRGljdC5hY3Rpb25zLm1hcCh0aGlzLmxlYXJuZXJBY3Rpb25PYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdCk7XG4gICAgICAgIHJldHVybiBuZXcgUGxheXRocm91Z2gocGxheXRocm91Z2hCYWNrZW5kRGljdC5wbGF5dGhyb3VnaF9pZCwgcGxheXRocm91Z2hCYWNrZW5kRGljdC5leHBfaWQsIHBsYXl0aHJvdWdoQmFja2VuZERpY3QuZXhwX3ZlcnNpb24sIHBsYXl0aHJvdWdoQmFja2VuZERpY3QuaXNzdWVfdHlwZSwgcGxheXRocm91Z2hCYWNrZW5kRGljdC5pc3N1ZV9jdXN0b21pemF0aW9uX2FyZ3MsIGFjdGlvbnMpO1xuICAgIH07XG4gICAgdmFyIF9hO1xuICAgIFBsYXl0aHJvdWdoT2JqZWN0RmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBMZWFybmVyQWN0aW9uT2JqZWN0RmFjdG9yeV8xLkxlYXJuZXJBY3Rpb25PYmplY3RGYWN0b3J5ICE9PSBcInVuZGVmaW5lZFwiICYmIExlYXJuZXJBY3Rpb25PYmplY3RGYWN0b3J5XzEuTGVhcm5lckFjdGlvbk9iamVjdEZhY3RvcnkpID09PSBcImZ1bmN0aW9uXCIgPyBfYSA6IE9iamVjdF0pXG4gICAgXSwgUGxheXRocm91Z2hPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gUGxheXRocm91Z2hPYmplY3RGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuUGxheXRocm91Z2hPYmplY3RGYWN0b3J5ID0gUGxheXRocm91Z2hPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnUGxheXRocm91Z2hPYmplY3RGYWN0b3J5Jywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShQbGF5dGhyb3VnaE9iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29uc3RhbnRzIGZvciB0aGUgc3RhdGlzdGljcyBkb21haW4uXG4gKi9cbi8vIFRPRE8oIzcwOTIpOiBEZWxldGUgdGhpcyBmaWxlIG9uY2UgbWlncmF0aW9uIGlzIGNvbXBsZXRlIGFuZCB0aGVzZSBBbmd1bGFySlNcbi8vIGVxdWl2YWxlbnRzIG9mIHRoZSBBbmd1bGFyIGNvbnN0YW50cyBhcmUgbm8gbG9uZ2VyIG5lZWRlZC5cbnZhciBzdGF0aXN0aWNzX2RvbWFpbl9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJkb21haW4vc3RhdGlzdGljcy9zdGF0aXN0aWNzLWRvbWFpbi5jb25zdGFudHNcIik7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnTEVBUk5FUl9BQ1RJT05fU0NIRU1BX0xBVEVTVF9WRVJTSU9OJywgc3RhdGlzdGljc19kb21haW5fY29uc3RhbnRzXzEuU3RhdGlzdGljc0RvbWFpbkNvbnN0YW50cy5MRUFSTkVSX0FDVElPTl9TQ0hFTUFfTEFURVNUX1ZFUlNJT04pO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0FOU1dFUl9ERVRBSUxTX0lNUFJPVkVNRU5UX0NBUkRfVFlQRScsIHN0YXRpc3RpY3NfZG9tYWluX2NvbnN0YW50c18xLlN0YXRpc3RpY3NEb21haW5Db25zdGFudHMuQU5TV0VSX0RFVEFJTFNfSU1QUk9WRU1FTlRfQ0FSRF9UWVBFKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdQTEFZVEhST1VHSF9JTVBST1ZFTUVOVF9DQVJEX1RZUEUnLCBzdGF0aXN0aWNzX2RvbWFpbl9jb25zdGFudHNfMS5TdGF0aXN0aWNzRG9tYWluQ29uc3RhbnRzLlBMQVlUSFJPVUdIX0lNUFJPVkVNRU5UX0NBUkRfVFlQRSk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnRkVFREJBQ0tfSU1QUk9WRU1FTlRfQ0FSRF9UWVBFJywgc3RhdGlzdGljc19kb21haW5fY29uc3RhbnRzXzEuU3RhdGlzdGljc0RvbWFpbkNvbnN0YW50cy5GRUVEQkFDS19JTVBST1ZFTUVOVF9DQVJEX1RZUEUpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1NVQk1JVF9MRUFSTkVSX0FOU1dFUl9ERVRBSUxTX1VSTCcsIHN0YXRpc3RpY3NfZG9tYWluX2NvbnN0YW50c18xLlN0YXRpc3RpY3NEb21haW5Db25zdGFudHMuU1VCTUlUX0xFQVJORVJfQU5TV0VSX0RFVEFJTFNfVVJMKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdTVUdHRVNUSU9OX0lNUFJPVkVNRU5UX0NBUkRfVFlQRScsIHN0YXRpc3RpY3NfZG9tYWluX2NvbnN0YW50c18xLlN0YXRpc3RpY3NEb21haW5Db25zdGFudHMuU1VHR0VTVElPTl9JTVBST1ZFTUVOVF9DQVJEX1RZUEUpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgZm9yIHRoZSBzdGF0aXN0aWNzIGRvbWFpbi5cbiAqL1xudmFyIFN0YXRpc3RpY3NEb21haW5Db25zdGFudHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RhdGlzdGljc0RvbWFpbkNvbnN0YW50cygpIHtcbiAgICB9XG4gICAgU3RhdGlzdGljc0RvbWFpbkNvbnN0YW50cy5MRUFSTkVSX0FDVElPTl9TQ0hFTUFfTEFURVNUX1ZFUlNJT04gPSAxO1xuICAgIFN0YXRpc3RpY3NEb21haW5Db25zdGFudHMuQU5TV0VSX0RFVEFJTFNfSU1QUk9WRU1FTlRfQ0FSRF9UWVBFID0gJ2Fuc3dlci1kZXRhaWxzJztcbiAgICBTdGF0aXN0aWNzRG9tYWluQ29uc3RhbnRzLlBMQVlUSFJPVUdIX0lNUFJPVkVNRU5UX0NBUkRfVFlQRSA9ICdwbGF5dGhyb3VnaCc7XG4gICAgU3RhdGlzdGljc0RvbWFpbkNvbnN0YW50cy5GRUVEQkFDS19JTVBST1ZFTUVOVF9DQVJEX1RZUEUgPSAnZmVlZGJhY2snO1xuICAgIFN0YXRpc3RpY3NEb21haW5Db25zdGFudHMuU1VCTUlUX0xFQVJORVJfQU5TV0VSX0RFVEFJTFNfVVJMID0gJy9sZWFybmVyYW5zd2VyZGV0YWlsc2hhbmRsZXIvPGVudGl0eV90eXBlPi88ZW50aXR5X2lkPic7XG4gICAgU3RhdGlzdGljc0RvbWFpbkNvbnN0YW50cy5TVUdHRVNUSU9OX0lNUFJPVkVNRU5UX0NBUkRfVFlQRSA9ICdzdWdnZXN0aW9uJztcbiAgICByZXR1cm4gU3RhdGlzdGljc0RvbWFpbkNvbnN0YW50cztcbn0oKSk7XG5leHBvcnRzLlN0YXRpc3RpY3NEb21haW5Db25zdGFudHMgPSBTdGF0aXN0aWNzRG9tYWluQ29uc3RhbnRzO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBGYWN0b3J5IGZvciBzdG9yaW5nIGZyb250ZW5kIHN0b3J5IG5vZGUgZG9tYWluIG9iamVjdHMgaW4gdGhlXG4gKiBzdG9yeSB2aWV3ZXIuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1JlYWRPbmx5U3RvcnlOb2RlT2JqZWN0RmFjdG9yeScsIFtmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBTdG9yeU5vZGUgPSBmdW5jdGlvbiAoaWQsIHRpdGxlLCBkZXN0aW5hdGlvbk5vZGVJZHMsIHByZXJlcXVpc2l0ZVNraWxsSWRzLCBhY3F1aXJlZFNraWxsSWRzLCBvdXRsaW5lLCBvdXRsaW5lSXNGaW5hbGl6ZWQsIGV4cGxvcmF0aW9uSWQsIGV4cGxvcmF0aW9uU3VtbWFyeSwgY29tcGxldGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3RpbmF0aW9uTm9kZUlkcyA9IGRlc3RpbmF0aW9uTm9kZUlkcztcbiAgICAgICAgICAgIHRoaXMuX3ByZXJlcXVpc2l0ZVNraWxsSWRzID0gcHJlcmVxdWlzaXRlU2tpbGxJZHM7XG4gICAgICAgICAgICB0aGlzLl9hY3F1aXJlZFNraWxsSWRzID0gYWNxdWlyZWRTa2lsbElkcztcbiAgICAgICAgICAgIHRoaXMuX291dGxpbmUgPSBvdXRsaW5lO1xuICAgICAgICAgICAgdGhpcy5fb3V0bGluZUlzRmluYWxpemVkID0gb3V0bGluZUlzRmluYWxpemVkO1xuICAgICAgICAgICAgdGhpcy5fZXhwbG9yYXRpb25JZCA9IGV4cGxvcmF0aW9uSWQ7XG4gICAgICAgICAgICB0aGlzLl9leHBsb3JhdGlvblN1bW1hcnlPYmplY3QgPSBleHBsb3JhdGlvblN1bW1hcnk7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZWQgPSBjb21wbGV0ZWQ7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEluc3RhbmNlIG1ldGhvZHNcbiAgICAgICAgU3RvcnlOb2RlLnByb3RvdHlwZS5nZXRJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICAgICAgfTtcbiAgICAgICAgU3RvcnlOb2RlLnByb3RvdHlwZS5nZXRUaXRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RvcnlOb2RlLnByb3RvdHlwZS5nZXRFeHBsb3JhdGlvbklkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V4cGxvcmF0aW9uSWQ7XG4gICAgICAgIH07XG4gICAgICAgIFN0b3J5Tm9kZS5wcm90b3R5cGUuaXNDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29tcGxldGVkO1xuICAgICAgICB9O1xuICAgICAgICBTdG9yeU5vZGUucHJvdG90eXBlLmdldEV4cGxvcmF0aW9uU3VtbWFyeU9iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHBsb3JhdGlvblN1bW1hcnlPYmplY3Q7XG4gICAgICAgIH07XG4gICAgICAgIFN0b3J5Tm9kZS5wcm90b3R5cGUuZ2V0T3V0bGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vdXRsaW5lO1xuICAgICAgICB9O1xuICAgICAgICBTdG9yeU5vZGUucHJvdG90eXBlLmdldE91dGxpbmVTdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb3V0bGluZUlzRmluYWxpemVkO1xuICAgICAgICB9O1xuICAgICAgICAvLyBTdGF0aWMgY2xhc3MgbWV0aG9kcy4gTm90ZSB0aGF0IFwidGhpc1wiIGlzIG5vdCBhdmFpbGFibGUgaW4gc3RhdGljXG4gICAgICAgIC8vIGNvbnRleHRzLiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgSlNPTiBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyBhIGJhY2tlbmRcbiAgICAgICAgLy8gc3RvcnkgcHl0aG9uIGRpY3QuXG4gICAgICAgIC8vIFRPRE8oYW5raXRhMjQwNzk2KTogUmVtb3ZlIHRoZSBicmFja2V0IG5vdGF0aW9uIG9uY2UgQW5ndWxhcjIgZ2V0cyBpbi5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgZG90LW5vdGF0aW9uICovXG4gICAgICAgIFN0b3J5Tm9kZVsnY3JlYXRlRnJvbUJhY2tlbmREaWN0J10gPSBmdW5jdGlvbiAoc3RvcnlOb2RlQmFja2VuZE9iamVjdCkge1xuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBkb3Qtbm90YXRpb24gKi9cbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RvcnlOb2RlKHN0b3J5Tm9kZUJhY2tlbmRPYmplY3QuaWQsIHN0b3J5Tm9kZUJhY2tlbmRPYmplY3QudGl0bGUsIHN0b3J5Tm9kZUJhY2tlbmRPYmplY3QuZGVzdGluYXRpb25fbm9kZV9pZHMsIHN0b3J5Tm9kZUJhY2tlbmRPYmplY3QucHJlcmVxdWlzaXRlX3NraWxsX2lkcywgc3RvcnlOb2RlQmFja2VuZE9iamVjdC5hY3F1aXJlZF9za2lsbF9pZHMsIHN0b3J5Tm9kZUJhY2tlbmRPYmplY3Qub3V0bGluZSwgc3RvcnlOb2RlQmFja2VuZE9iamVjdC5vdXRsaW5lX2lzX2ZpbmFsaXplZCwgc3RvcnlOb2RlQmFja2VuZE9iamVjdC5leHBsb3JhdGlvbl9pZCwgc3RvcnlOb2RlQmFja2VuZE9iamVjdC5leHBfc3VtbWFyeV9kaWN0LCBzdG9yeU5vZGVCYWNrZW5kT2JqZWN0LmNvbXBsZXRlZCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTdG9yeU5vZGU7XG4gICAgfV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIHRvIGdldCBzdG9yeSBkYXRhLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vc3Rvcnlfdmlld2VyL3N0b3J5LXZpZXdlci1kb21haW4uY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnU3RvcnlWaWV3ZXJCYWNrZW5kQXBpU2VydmljZScsIFtcbiAgICAnJGh0dHAnLCAnJHEnLCAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCAnU1RPUllfREFUQV9VUkxfVEVNUExBVEUnLFxuICAgICdTVE9SWV9OT0RFX0NPTVBMRVRJT05fVVJMX1RFTVBMQVRFJyxcbiAgICBmdW5jdGlvbiAoJGh0dHAsICRxLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSwgU1RPUllfREFUQV9VUkxfVEVNUExBVEUsIFNUT1JZX05PREVfQ09NUExFVElPTl9VUkxfVEVNUExBVEUpIHtcbiAgICAgICAgdmFyIHN0b3J5RGF0YURpY3QgPSBudWxsO1xuICAgICAgICB2YXIgX2ZldGNoU3RvcnlEYXRhID0gZnVuY3Rpb24gKHN0b3J5SWQsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIHN0b3J5RGF0YVVybCA9IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKFNUT1JZX0RBVEFfVVJMX1RFTVBMQVRFLCB7XG4gICAgICAgICAgICAgICAgc3RvcnlfaWQ6IHN0b3J5SWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJGh0dHAuZ2V0KHN0b3J5RGF0YVVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBzdG9yeURhdGFEaWN0ID0gYW5ndWxhci5jb3B5KHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKHN0b3J5RGF0YURpY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhlcnJvclJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX3JlY29yZFN0b3J5Tm9kZUNvbXBsZXRpb24gPSBmdW5jdGlvbiAoc3RvcnlJZCwgbm9kZUlkLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBzdG9yeU5vZGVDb21wbGV0aW9uVXJsID0gVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuaW50ZXJwb2xhdGVVcmwoU1RPUllfTk9ERV9DT01QTEVUSU9OX1VSTF9URU1QTEFURSwge1xuICAgICAgICAgICAgICAgIHN0b3J5X2lkOiBzdG9yeUlkLFxuICAgICAgICAgICAgICAgIG5vZGVfaWQ6IG5vZGVJZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkaHR0cC5wb3N0KHN0b3J5Tm9kZUNvbXBsZXRpb25VcmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soZXJyb3JSZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZldGNoU3RvcnlEYXRhOiBmdW5jdGlvbiAoc3RvcnlJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF9mZXRjaFN0b3J5RGF0YShzdG9yeUlkLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZFN0b3J5Tm9kZUNvbXBsZXRpb246IGZ1bmN0aW9uIChzdG9yeUlkLCBub2RlSWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBfcmVjb3JkU3RvcnlOb2RlQ29tcGxldGlvbihzdG9yeUlkLCBub2RlSWQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENvbnN0YW50cyBmb3Igc3Rvcnkgdmlld2VyIGRvbWFpbi5cbiAqL1xuLy8gVE9ETygjNzA5Mik6IERlbGV0ZSB0aGlzIGZpbGUgb25jZSBtaWdyYXRpb24gaXMgY29tcGxldGUgYW5kIHRoZXNlIEFuZ3VsYXJKU1xuLy8gZXF1aXZhbGVudHMgb2YgdGhlIEFuZ3VsYXIgY29uc3RhbnRzIGFyZSBubyBsb25nZXIgbmVlZGVkLlxudmFyIHN0b3J5X3ZpZXdlcl9kb21haW5fY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiZG9tYWluL3N0b3J5X3ZpZXdlci9zdG9yeS12aWV3ZXItZG9tYWluLmNvbnN0YW50c1wiKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdTVE9SWV9EQVRBX1VSTF9URU1QTEFURScsIHN0b3J5X3ZpZXdlcl9kb21haW5fY29uc3RhbnRzXzEuU3RvcnlWaWV3ZXJEb21haW5Db25zdGFudHMuU1RPUllfREFUQV9VUkxfVEVNUExBVEUpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1NUT1JZX05PREVfQ09NUExFVElPTl9VUkxfVEVNUExBVEUnLCBzdG9yeV92aWV3ZXJfZG9tYWluX2NvbnN0YW50c18xLlN0b3J5Vmlld2VyRG9tYWluQ29uc3RhbnRzLlNUT1JZX05PREVfQ09NUExFVElPTl9VUkxfVEVNUExBVEUpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgZm9yIHN0b3J5IHZpZXdlciBkb21haW4uXG4gKi9cbnZhciBTdG9yeVZpZXdlckRvbWFpbkNvbnN0YW50cyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdG9yeVZpZXdlckRvbWFpbkNvbnN0YW50cygpIHtcbiAgICB9XG4gICAgU3RvcnlWaWV3ZXJEb21haW5Db25zdGFudHMuU1RPUllfREFUQV9VUkxfVEVNUExBVEUgPSAnL3N0b3J5X2RhdGFfaGFuZGxlci88c3RvcnlfaWQ+JztcbiAgICBTdG9yeVZpZXdlckRvbWFpbkNvbnN0YW50cy5TVE9SWV9OT0RFX0NPTVBMRVRJT05fVVJMX1RFTVBMQVRFID0gJy9zdG9yeV9ub2RlX2NvbXBsZXRpb25faGFuZGxlci88c3RvcnlfaWQ+Lzxub2RlX2lkPic7XG4gICAgcmV0dXJuIFN0b3J5Vmlld2VyRG9tYWluQ29uc3RhbnRzO1xufSgpKTtcbmV4cG9ydHMuU3RvcnlWaWV3ZXJEb21haW5Db25zdGFudHMgPSBTdG9yeVZpZXdlckRvbWFpbkNvbnN0YW50cztcbiIsIi8vIENvcHlyaWdodCAyMDE2IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0byByZXRyaWV2ZSBpbmZvcm1hdGlvbiBhYm91dCBleHBsb3JhdGlvbiBzdW1tYXJpZXNcbiAqIGZyb20gdGhlIGJhY2tlbmQuXG4gKi9cbnJlcXVpcmUoJ3NlcnZpY2VzL0FsZXJ0c1NlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL1ZhbGlkYXRvcnNTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdFeHBsb3JhdGlvblN1bW1hcnlCYWNrZW5kQXBpU2VydmljZScsIFtcbiAgICAnJGh0dHAnLCAnJHEnLCAnQWxlcnRzU2VydmljZScsXG4gICAgJ1ZhbGlkYXRvcnNTZXJ2aWNlJywgJ0VYUExPUkFUSU9OX1NVTU1BUllfREFUQV9VUkxfVEVNUExBVEUnLFxuICAgIGZ1bmN0aW9uICgkaHR0cCwgJHEsIEFsZXJ0c1NlcnZpY2UsIFZhbGlkYXRvcnNTZXJ2aWNlLCBFWFBMT1JBVElPTl9TVU1NQVJZX0RBVEFfVVJMX1RFTVBMQVRFKSB7XG4gICAgICAgIHZhciBfZmV0Y2hFeHBTdW1tYXJpZXMgPSBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZHMsIGluY2x1ZGVQcml2YXRlRXhwbG9yYXRpb25zLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICghZXhwbG9yYXRpb25JZHMuZXZlcnkoVmFsaWRhdG9yc1NlcnZpY2UuaXNWYWxpZEV4cGxvcmF0aW9uSWQpKSB7XG4gICAgICAgICAgICAgICAgQWxlcnRzU2VydmljZS5hZGRXYXJuaW5nKCdQbGVhc2UgZW50ZXIgYSB2YWxpZCBleHBsb3JhdGlvbiBJRC4nKTtcbiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGxvcmF0aW9uSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlLnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBleHBsb3JhdGlvblN1bW1hcnlEYXRhVXJsID0gRVhQTE9SQVRJT05fU1VNTUFSWV9EQVRBX1VSTF9URU1QTEFURTtcbiAgICAgICAgICAgICRodHRwLmdldChleHBsb3JhdGlvblN1bW1hcnlEYXRhVXJsLCB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ2lmaWVkX2V4cF9pZHM6IEpTT04uc3RyaW5naWZ5KGV4cGxvcmF0aW9uSWRzKSxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZV9wcml2YXRlX2V4cGxvcmF0aW9uczogSlNPTi5zdHJpbmdpZnkoaW5jbHVkZVByaXZhdGVFeHBsb3JhdGlvbnMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3VtbWFyaWVzID0gYW5ndWxhci5jb3B5KHJlc3BvbnNlLmRhdGEuc3VtbWFyaWVzKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdW1tYXJpZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdW1tYXJpZXNFcnJvciA9ICgnU3VtbWFyaWVzIGZldGNoZWQgYXJlIG51bGwgZm9yIGV4cGxvcmF0aW9uSWRzOiAnICsgZXhwbG9yYXRpb25JZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN1bW1hcmllc0Vycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soc3VtbWFyaWVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soZXJyb3JSZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmV0Y2hlcyBhIGxpc3Qgb2YgcHVibGljIGV4cGxvcmF0aW9uIHN1bW1hcmllcyBhbmQgcHJpdmF0ZVxuICAgICAgICAgICAgICogZXhwbG9yYXRpb24gc3VtbWFyaWVzIGZvciB3aGljaCB0aGUgY3VycmVudCB1c2VyIGhhcyBhY2Nlc3MgZnJvbSB0aGVcbiAgICAgICAgICAgICAqIGJhY2tlbmQgZm9yIGVhY2ggZXhwbG9yYXRpb24gSUQgcHJvdmlkZWQuIFRoZSBwcm92aWRlZCBsaXN0IG9mXG4gICAgICAgICAgICAgKiBleHBsb3JhdGlvbiBzdW1tYXJpZXMgYXJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIGlucHV0IGV4cGxvcmF0aW9uIElEc1xuICAgICAgICAgICAgICogbGlzdCwgdGhvdWdoIHNvbWUgbWF5IGJlIG1pc3NpbmcgKGlmIHRoZSBleHBsb3JhdGlvbiBkb2Vzbid0IGV4aXN0IG9yXG4gICAgICAgICAgICAgKiBvciB0aGUgdXNlciBkb2VzIG5vdCBoYXZlIGFjY2VzcyB0byBpdCkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxvYWRQdWJsaWNBbmRQcml2YXRlRXhwbG9yYXRpb25TdW1tYXJpZXM6IGZ1bmN0aW9uIChleHBsb3JhdGlvbklkcykge1xuICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF9mZXRjaEV4cFN1bW1hcmllcyhleHBsb3JhdGlvbklkcywgdHJ1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgT2JqZWN0IGZhY3RvcnkgZm9yIGNyZWF0aW5nIGF1ZGlvIGxhbmd1YWdlcy5cbiAqL1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIEF1ZGlvTGFuZ3VhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXVkaW9MYW5ndWFnZShpZCwgZGVzY3JpcHRpb24sIHJlbGF0ZWRMYW5ndWFnZXMpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMucmVsYXRlZExhbmd1YWdlcyA9IHJlbGF0ZWRMYW5ndWFnZXM7XG4gICAgfVxuICAgIHJldHVybiBBdWRpb0xhbmd1YWdlO1xufSgpKTtcbmV4cG9ydHMuQXVkaW9MYW5ndWFnZSA9IEF1ZGlvTGFuZ3VhZ2U7XG52YXIgQXVkaW9MYW5ndWFnZU9iamVjdEZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXVkaW9MYW5ndWFnZU9iamVjdEZhY3RvcnkoKSB7XG4gICAgfVxuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgJ2F1ZGlvTGFuZ3VhZ2VEaWN0JyBpcyBhIGRpY3Qgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkXG4gICAgLy8ga2V5cyB3aGljaCBnaXZlIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZlxuICAgIC8vIGNhbWVsQ2FzaW5nLlxuICAgIEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tRGljdCA9IGZ1bmN0aW9uIChhdWRpb0xhbmd1YWdlRGljdCkge1xuICAgICAgICByZXR1cm4gbmV3IEF1ZGlvTGFuZ3VhZ2UoYXVkaW9MYW5ndWFnZURpY3QuaWQsIGF1ZGlvTGFuZ3VhZ2VEaWN0LmRlc2NyaXB0aW9uLCBhdWRpb0xhbmd1YWdlRGljdC5yZWxhdGVkTGFuZ3VhZ2VzKTtcbiAgICB9O1xuICAgIEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KVxuICAgIF0sIEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gQXVkaW9MYW5ndWFnZU9iamVjdEZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0cy5BdWRpb0xhbmd1YWdlT2JqZWN0RmFjdG9yeSA9IEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnQXVkaW9MYW5ndWFnZU9iamVjdEZhY3RvcnknLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5KSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IE9iamVjdCBmYWN0b3J5IGZvciBjcmVhdGluZyBhdXRvZ2VuZXJhdGVkIGF1ZGlvIGxhbmd1YWdlcy5cbiAqL1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIEF1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlKGlkLCBkZXNjcmlwdGlvbiwgZXhwbG9yYXRpb25MYW5ndWFnZSwgc3BlZWNoU3ludGhlc2lzQ29kZSwgc3BlZWNoU3ludGhlc2lzQ29kZU1vYmlsZSkge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5leHBsb3JhdGlvbkxhbmd1YWdlID0gZXhwbG9yYXRpb25MYW5ndWFnZTtcbiAgICAgICAgdGhpcy5zcGVlY2hTeW50aGVzaXNDb2RlID0gc3BlZWNoU3ludGhlc2lzQ29kZTtcbiAgICAgICAgdGhpcy5zcGVlY2hTeW50aGVzaXNDb2RlTW9iaWxlID0gc3BlZWNoU3ludGhlc2lzQ29kZU1vYmlsZTtcbiAgICB9XG4gICAgcmV0dXJuIEF1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlO1xufSgpKTtcbmV4cG9ydHMuQXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2UgPSBBdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZTtcbnZhciBBdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZU9iamVjdEZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5KCkge1xuICAgIH1cbiAgICAvLyBUT0RPKCM3MTc2KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlICdhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZURpY3QnIGlzIGEgZGljdCB3aXRoXG4gICAgLy8gdW5kZXJzY29yZV9jYXNlZCBrZXlzIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nXG4gICAgLy8gaW4gZmF2b3Igb2YgY2FtZWxDYXNpbmcuXG4gICAgQXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVGcm9tRGljdCA9IGZ1bmN0aW9uIChhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZURpY3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZShhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZURpY3QuaWQsIGF1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlRGljdC5kZXNjcmlwdGlvbiwgYXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VEaWN0LmV4cGxvcmF0aW9uX2xhbmd1YWdlLCBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZURpY3Quc3BlZWNoX3N5bnRoZXNpc19jb2RlLCBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZURpY3Quc3BlZWNoX3N5bnRoZXNpc19jb2RlX21vYmlsZSk7XG4gICAgfTtcbiAgICBBdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZU9iamVjdEZhY3RvcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgQXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5KTtcbiAgICByZXR1cm4gQXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuQXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5ID0gQXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5O1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnQXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5Jywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShBdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZU9iamVjdEZhY3RvcnkpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0eSBzZXJ2aWNlIGZvciBsYW5ndWFnZSBvcGVyYXRpb25zLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL0F1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5LnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL0F1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9Ccm93c2VyQ2hlY2tlclNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0xhbmd1YWdlVXRpbFNlcnZpY2UnLCBbXG4gICAgJ0F1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5JywgJ0F1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlT2JqZWN0RmFjdG9yeScsXG4gICAgJ0Jyb3dzZXJDaGVja2VyU2VydmljZScsICdBTExfTEFOR1VBR0VfQ09ERVMnLFxuICAgICdBVVRPR0VORVJBVEVEX0FVRElPX0xBTkdVQUdFUycsICdTVVBQT1JURURfQVVESU9fTEFOR1VBR0VTJyxcbiAgICBmdW5jdGlvbiAoQXVkaW9MYW5ndWFnZU9iamVjdEZhY3RvcnksIEF1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlT2JqZWN0RmFjdG9yeSwgQnJvd3NlckNoZWNrZXJTZXJ2aWNlLCBBTExfTEFOR1VBR0VfQ09ERVMsIEFVVE9HRU5FUkFURURfQVVESU9fTEFOR1VBR0VTLCBTVVBQT1JURURfQVVESU9fTEFOR1VBR0VTKSB7XG4gICAgICAgIHZhciBzdXBwb3J0ZWRBdWRpb0xhbmd1YWdlTGlzdCA9IFNVUFBPUlRFRF9BVURJT19MQU5HVUFHRVM7XG4gICAgICAgIHZhciBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZUxpc3QgPSBBVVRPR0VORVJBVEVEX0FVRElPX0xBTkdVQUdFUztcbiAgICAgICAgdmFyIHN1cHBvcnRlZEF1ZGlvTGFuZ3VhZ2VzID0ge307XG4gICAgICAgIHZhciBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZXNCeUV4cGxvcmF0aW9uTGFuZ3VhZ2VDb2RlID0ge307XG4gICAgICAgIHZhciBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZXNCeUF1dG9nZW5lcmF0ZWRMYW5ndWFnZUNvZGUgPSB7fTtcbiAgICAgICAgdmFyIGdldFNob3J0TGFuZ3VhZ2VEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIChmdWxsTGFuZ3VhZ2VEZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdmFyIGluZCA9IGZ1bGxMYW5ndWFnZURlc2NyaXB0aW9uLmluZGV4T2YoJyAoJyk7XG4gICAgICAgICAgICBpZiAoaW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdWxsTGFuZ3VhZ2VEZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdWxsTGFuZ3VhZ2VEZXNjcmlwdGlvbi5zdWJzdHJpbmcoMCwgaW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGxhbmd1YWdlSWRzQW5kVGV4dHMgPSBBTExfTEFOR1VBR0VfQ09ERVMubWFwKGZ1bmN0aW9uIChsYW5ndWFnZUl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IGxhbmd1YWdlSXRlbS5jb2RlLFxuICAgICAgICAgICAgICAgIHRleHQ6IGdldFNob3J0TGFuZ3VhZ2VEZXNjcmlwdGlvbihsYW5ndWFnZUl0ZW0uZGVzY3JpcHRpb24pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGFsbEF1ZGlvTGFuZ3VhZ2VDb2RlcyA9IChzdXBwb3J0ZWRBdWRpb0xhbmd1YWdlTGlzdC5tYXAoZnVuY3Rpb24gKGF1ZGlvTGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBhdWRpb0xhbmd1YWdlLmlkO1xuICAgICAgICB9KSk7XG4gICAgICAgIHN1cHBvcnRlZEF1ZGlvTGFuZ3VhZ2VMaXN0LmZvckVhY2goZnVuY3Rpb24gKGF1ZGlvTGFuZ3VhZ2VEaWN0KSB7XG4gICAgICAgICAgICBzdXBwb3J0ZWRBdWRpb0xhbmd1YWdlc1thdWRpb0xhbmd1YWdlRGljdC5pZF0gPVxuICAgICAgICAgICAgICAgIEF1ZGlvTGFuZ3VhZ2VPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21EaWN0KGF1ZGlvTGFuZ3VhZ2VEaWN0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZURpY3QpIHtcbiAgICAgICAgICAgIHZhciBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZSA9IEF1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlT2JqZWN0RmFjdG9yeS5jcmVhdGVGcm9tRGljdChhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZURpY3QpO1xuICAgICAgICAgICAgYXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VzQnlFeHBsb3JhdGlvbkxhbmd1YWdlQ29kZVthdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZS5leHBsb3JhdGlvbkxhbmd1YWdlXSA9XG4gICAgICAgICAgICAgICAgYXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2U7XG4gICAgICAgICAgICBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZXNCeUF1dG9nZW5lcmF0ZWRMYW5ndWFnZUNvZGVbYXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2UuaWRdID1cbiAgICAgICAgICAgICAgICBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBhdWRpb0xhbmd1YWdlc0NvdW50ID0gYWxsQXVkaW9MYW5ndWFnZUNvZGVzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldExhbmd1YWdlSWRzQW5kVGV4dHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFuZ3VhZ2VJZHNBbmRUZXh0cztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRBdWRpb0xhbmd1YWdlc0NvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF1ZGlvTGFuZ3VhZ2VzQ291bnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0QWxsVm9pY2VvdmVyTGFuZ3VhZ2VDb2RlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmNvcHkoYWxsQXVkaW9MYW5ndWFnZUNvZGVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRBdWRpb0xhbmd1YWdlRGVzY3JpcHRpb246IGZ1bmN0aW9uIChhdWRpb0xhbmd1YWdlQ29kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdXBwb3J0ZWRBdWRpb0xhbmd1YWdlc1thdWRpb0xhbmd1YWdlQ29kZV0uZGVzY3JpcHRpb247XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gR2l2ZW4gYSBsaXN0IG9mIGF1ZGlvIGxhbmd1YWdlIGNvZGVzLCByZXR1cm5zIHRoZSBjb21wbGVtZW50IGxpc3QsIGkuZS5cbiAgICAgICAgICAgIC8vIHRoZSBsaXN0IG9mIGF1ZGlvIGxhbmd1YWdlIGNvZGVzIG5vdCBpbiB0aGUgaW5wdXQgbGlzdC5cbiAgICAgICAgICAgIGdldENvbXBsZW1lbnRBdWRpb0xhbmd1YWdlQ29kZXM6IGZ1bmN0aW9uIChhdWRpb0xhbmd1YWdlQ29kZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsQXVkaW9MYW5ndWFnZUNvZGVzLmZpbHRlcihmdW5jdGlvbiAobGFuZ3VhZ2VDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhdWRpb0xhbmd1YWdlQ29kZXMuaW5kZXhPZihsYW5ndWFnZUNvZGUpID09PSAtMTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRMYW5ndWFnZUNvZGVzUmVsYXRlZFRvQXVkaW9MYW5ndWFnZUNvZGU6IGZ1bmN0aW9uIChhdWRpb0xhbmd1YWdlQ29kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdXBwb3J0ZWRBdWRpb0xhbmd1YWdlc1thdWRpb0xhbmd1YWdlQ29kZV0ucmVsYXRlZExhbmd1YWdlcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdXBwb3J0c0F1dG9nZW5lcmF0ZWRBdWRpbzogZnVuY3Rpb24gKGV4cGxvcmF0aW9uTGFuZ3VhZ2VDb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChCcm93c2VyQ2hlY2tlclNlcnZpY2Uuc3VwcG9ydHNTcGVlY2hTeW50aGVzaXMoKSAmJlxuICAgICAgICAgICAgICAgICAgICBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZXNCeUV4cGxvcmF0aW9uTGFuZ3VhZ2VDb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAuaGFzT3duUHJvcGVydHkoZXhwbG9yYXRpb25MYW5ndWFnZUNvZGUpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0F1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlOiBmdW5jdGlvbiAoYXVkaW9MYW5ndWFnZUNvZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2VzQnlBdXRvZ2VuZXJhdGVkTGFuZ3VhZ2VDb2RlXG4gICAgICAgICAgICAgICAgICAgIC5oYXNPd25Qcm9wZXJ0eShhdWRpb0xhbmd1YWdlQ29kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0QXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2U6IGZ1bmN0aW9uIChleHBsb3JhdGlvbkxhbmd1YWdlQ29kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZXNCeUV4cGxvcmF0aW9uTGFuZ3VhZ2VDb2RlW2V4cGxvcmF0aW9uTGFuZ3VhZ2VDb2RlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgT2JqZWN0IGZhY3RvcnkgZm9yIGNyZWF0aW5nIHN0b3B3YXRjaGVzLlxuICovXG4vLyBBIHNpbXBsZSBzZXJ2aWNlIHRoYXQgcHJvdmlkZXMgc3RvcHdhdGNoIGluc3RhbmNlcy4gRWFjaCBzdG9wd2F0Y2ggY2FuIGJlXG4vLyBpbmRlcGVuZGVudGx5IHJlc2V0IGFuZCBxdWVyaWVkIGZvciB0aGUgY3VycmVudCB0aW1lLlxuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnU3RvcHdhdGNoT2JqZWN0RmFjdG9yeScsIFtcbiAgICAnJGxvZycsIGZ1bmN0aW9uICgkbG9nKSB7XG4gICAgICAgIHZhciBTdG9wd2F0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIFN0b3B3YXRjaC5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBfZ2V0Q3VycmVudFRpbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdGhpcy5fZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRUaW1lSW5TZWNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICRsb2cuZXJyb3IoJ1RyaWVkIHRvIHJldHJpZXZlIHRoZSBlbGFwc2VkIHRpbWUsIGJ1dCBubyBzdGFydCB0aW1lIHdhcyBzZXQuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuX2dldEN1cnJlbnRUaW1lKCkgLSB0aGlzLnN0YXJ0VGltZSkgLyAxMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdG9wd2F0Y2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vLyBUaGlzIGZpbGUgZGVmaW5lcyB0aGUgZXZhbHVhdGlvbiBlbmdpbmUgYXMgd2VsbCBhcyB0aGUgc3lzdGVtIG9wZXJhdG9ycy5cbi8vIFRoZSBldmFsdWF0b3IgdGFrZXMgdGhlIG91dHB1dCBvZiB0aGUgcGFyc2VyIChpLmUuIHBhcnNlIHRyZWUpIGFzIGRlZmluZWQgaW5cbi8vIHBhcnNlci5wZWdqcyBhbmQgcHJvZHVjZXMgYSBqYXZhU2NyaXB0IHByaW1pdGl2ZSB2YWx1ZSB3aGVuIHRoZSBldmFsdWF0aW9uIGlzXG4vLyBwZXJmb3JtZWQgY29ycmVjdGx5LlxuLy8gVHdvIGNhc2VzIHRoYXQgY2FuIHRocm93IGFuIGV4Y2VwdGlvbiAoaS5lLiBhbiBFcnJvciBvYmplY3QpOlxuLy8gLSBWYXJpYWJsZSBsb29rLXVwICgnIycgb3BlcmF0b3IpIGZhaWx1cmUuIChFeHByVW5kZWZpbmVkVmFyRXJyb3IpXG4vLyAtIFdyb25nIG51bWJlciBvZiBhcmd1bWVudHMgaW4gdGhlIG5vZGUgZm9yIHRoZSBnaXZlbiBvcGVyYXRvci5cbi8vICAgKEV4cHJXcm9uZ051bUFyZ3NFcnJvcilcbi8vIEJvdGggZXJyb3JzIGFyZSBjaGlsZHJlbiBvZiBFeHByZXNzaW9uRXJyb3IsIHNvIGNhbGxlciBjYW4gdXNlXG4vLyBFeHByZXNzaW9uRXJyb3IgdG8gY2F0Y2ggb25seSB0aGVzZSBleHBlY3RlZCBlcnJvciBjYXNlcy5cbi8vXG4vLyBBbiBleHByZXNzaW9uIGlzIGV2YWx1YXRlZCBpbiBhIGNvbnRleHQgY29uc2lzdGluZyBvZiBwcmVkZWZpbmVkIHN5c3RlbVxuLy8gdmFyaWFibGVzLCBzeXN0ZW0gb3BlcmF0b3JzLCBhbmQgc3lzdGVtIGZ1bmN0aW9ucy4gSW4gdGhlIGlucHV0IGxhbmd1YWdlLFxuLy8gb3BlcmF0b3JzIGFyZSBwcmVkZWZpbmVkIHNldCBvZiBjaGFyYWN0ZXJzIGluIGluZml4LCBwb3N0Zml4LCBvciB0ZXJuYXJ5XG4vLyBmb3JtYXQgKHRoZXJlIGlzIGN1cnJlbnRseSBubyBwb3N0Zml4IG9wZXJhdG9ycykgd2hpbGUgZnVuY3Rpb25zIGhhdmUgdGhlXG4vLyBmb3JtIG9mIGZ1bmN0aW9uIGNhbGxzIChlLmcuIFwiYWJzKDEwKVwiKS4gSW4gdGhlIHBhcnNlIHRyZWUsIHRoZXJlIGlzIG5vXG4vLyBkaWZmZXJlbmNlIGJldHdlZW4gb3BlcmF0b3JzIGFuZCBmdW5jdGlvbnMuIFVzZXIgZGVmaW5lZCBwYXJhbWV0ZXJzIG1heVxuLy8gb3ZlcnJpZGUgdGhlIG1lYW5pbmcgb2Ygc3lzdGVtIHZhcmlhYmxlcyBhbmQgZnVuY3Rpb25zIChidXQgbm90IG9wZXJhdG9ycykuXG4vLyBVc2VycyBhbHNvIGNhbiBkZWZpbmUgcGFyYW1ldGVycyB3aXRoIG5ldyBuYW1lcy4gUmVmZXJlbmNpbmcgYSB2YXJpYWJsZSB3aGljaFxuLy8gaXMgbm90IGRlZmluZWQgYXMgYSBzeXN0ZW0gdmFyaWFibGUsIHN5c3RlbSBmdW5jdGlvbiwgb3IgdXNlciBwYXJhbWV0ZXIgd2lsbFxuLy8gcmVzdWx0IGluIEV4cHJVbmRlZmluZWRWYXJFcnJvciB0byBiZSB0aHJvd24uXG4vL1xuLy8gQWxsIHN5c3RlbSB2YXJpYWJsZXMsIHN5c3RlbSBvcGVyYXRvcnMsIGFuZCBzeXN0ZW0gZnVuY3Rpb25zIGFyZSBkZWZpbmVkXG4vLyBhcyAnc3lzdGVtJyB2YXJpYWJsZSBpbiB0aGlzIGZpbGUuXG4vL1xuLy8gVE9ETyhrYXNoaWRhKTogU3BsaXQgdGhlIGZvbGxvd2luZyBzZWN0aW9uIGludG8gdHdvOlxuLy8gICAgIC0gQSBnZW5lcmFsIG92ZXJ2aWV3IG9mIG9wZXJhdG9ycyAoaW5jbHVkaW5nIHNvbWUgY29uY3JldGUgZXhhbXBsZXMpXG4vLyAgICAgLSBBIG51bWJlcmVkIHNlcXVlbmNlIG9mIHN0ZXBzIHdoaWNoIGEgbmV3IGNvbnRyaWJ1dG9yIHNob3VsZCBmb2xsb3cgaW5cbi8vICAgICAgICAgb3JkZXIgdG8gZGVmaW5lIGEgbmV3IG9wZXJhdG9yLlxuLy8gRGVmaW5pbmcgbmV3IG9wZXJhdG9ycyBhbmQgZnVuY3Rpb25zOlxuLy8gT3BlcmF0b3JzIGFuZCBmdW5jdGlvbnMgYXJlIGdpdmVuIGFuIGFycmF5IG9mIGFyZ3VtZW50cyB3aGljaCBhcmUgYWxyZWFkeSBhbGxcbi8vIGV2YWx1YXRlZC4gRS5nLiBmb3IgYW4gZXhwcmVzc2lvbiBcIjEgKyAyICogM1wiLCB0aGUgXCIrXCIgcGx1cyBvcGVyYXRvciByZWNlaXZlc1xuLy8gdmFsdWVzIDEgYW5kIDYgKGkuZS4gXCIyICogM1wiIGFscmVhZHkgZXZhbHVhdGVkKS5cbi8vIFRoZSBvcGVyYXRvcnMgYW5kIGZ1bmN0aW9ucyBzaG91bGQgdmVyaWZ5IHRoYXQgdGhlIGFyZ3VtZW50IGFycmF5XG4vLyBoYXMgdGhlIHJlcXVpcmVkIG51bWJlciBvZiBhcmd1bWVudHMuIE9wZXJhdG9ycyBhbmQgZnVuY3Rpb25zIGNhbiBjb2Vyc2UgdGhlXG4vLyBpbnB1dCBhcmd1bWVudHMgdG8gdGhlIGRlc2lyZWQgdHlwZWQgdmFsdWVzLCBvciB0aHJvdyBhbiBleGNlcHRpb24gaWYgd3Jvbmdcbi8vIHR5cGUgb2YgYXJndW1lbnQgaXMgZ2l2ZW4uXG4vLyB0eXBlIG9mIGlucHV0cy4gVGhpcyBkb2VzIG5vdCBwcmV2ZW50IG9wZXJhdG9ycyB0byBlcm9yIG9uIHdyb25nIHBhcmFtZXRlclxuLy8gdmFsdWVzIChlLmcuIGdldHRpbmcgbmVnYXRpdmUgbnVtYmVyIGZvciBhbiBpbmRleCkuXG4vLyBXaGVuIHN1Y2Nlc3NmdWwsIG9wZXJhdG9ycyBhbmQgZnVuY3Rpb25zIG1heSByZXR1cm4gYW55IHZhbGlkIEphdmFTY3JpcHRcbi8vIHZhbHVlcy4gSW4gZ2VuZXJhbCwgYW4gb3BlcmF0b3IgYWx3YXlzIHJldHVybnMgdGhlIHNhbWUgdHlwZSBvZiB2YWx1ZSwgYnV0XG4vLyB0aGVyZSBhcmUgZXhjZXB0aW9ucyAoZS5nLiBcIitcIiBvcGVyYXRvciBtYXkgcmV0dXJuIGEgbnVtYmVyIG9yIGEgc3RyaW5nXG4vLyBkZXBlbmRpbmcgb24gdGhlIHR5cGVzIG9mIHRoZSBpbnB1dCBhcmd1bWVudHMpLlxuLy8gQ29uc3RyYWludHMgb24gdGhlIGlucHV0IGFyZ3VtZW50cyAobnVtYmVyLCB0eXBlcywgYW5kIGFueSBvdGhlclxuLy8gY29uc3RyYWludHMpIGFzIHdlbGwgYXMgdGhlIG91dHB1dCB2YWx1ZSBhbmQgdHlwZSBzaG91bGQgYmUgZG9jdW1lbnRlZC5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIGZvciBleHByZXNzaW9uIGV2YWx1YXRpb24uXG4gKi9cbnJlcXVpcmUoJ2V4cHJlc3Npb25zL0V4cHJlc3Npb25QYXJzZXJTZXJ2aWNlLmpzJyk7XG5yZXF1aXJlKCdleHByZXNzaW9ucy9FeHByZXNzaW9uU3ludGF4VHJlZVNlcnZpY2UudHMnKTtcbi8vIFNlcnZpY2UgZm9yIGV4cHJlc3Npb24gZXZhbHVhdGlvbi5cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0V4cHJlc3Npb25FdmFsdWF0b3JTZXJ2aWNlJywgW1xuICAgICdFeHByZXNzaW9uUGFyc2VyU2VydmljZScsICdFeHByZXNzaW9uU3ludGF4VHJlZVNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uIChFeHByZXNzaW9uUGFyc2VyU2VydmljZSwgRXhwcmVzc2lvblN5bnRheFRyZWVTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBldmFsdWF0ZUV4cHJlc3Npb24gPSBmdW5jdGlvbiAoZXhwcmVzc2lvbiwgZW52cykge1xuICAgICAgICAgICAgcmV0dXJuIEV4cHJlc3Npb25TeW50YXhUcmVlU2VydmljZS5hcHBseUZ1bmN0aW9uVG9QYXJzZVRyZWUoRXhwcmVzc2lvblBhcnNlclNlcnZpY2UucGFyc2UoZXhwcmVzc2lvbiksIGVudnMsIGV2YWx1YXRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gcGFyc2VkIFBhcnNlIG91dHB1dCBmcm9tIHRoZSBwYXJzZXIuIFNlZSBwYXJzZXIucGVnanMgZm9yXG4gICAgICAgICAqICAgICB0aGUgZGF0YSBzdHJ1Y3R1cmUuXG4gICAgICAgICAqIEBwYXJhbSB7IUFycmF5LjwhT2JqZWN0Pn0gZW52cyBSZXByZXNlbnRzIGEgbmVzdGVkIG5hbWUgc3BhY2VcbiAgICAgICAgICogICAgIGVudmlyb25tZW50IHRvIGxvb2sgdXAgdGhlIG5hbWUgaW4uIFRoZSBmaXJzdCBlbGVtZW50IGlzIGxvb2tlZCB1cFxuICAgICAgICAgKiAgICAgZmlyc3QgKGkuZS4gaGFzIGhpZ2hlciBwcmVjZWRlbmNlKS5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBldmFsdWF0ZSA9IGZ1bmN0aW9uIChwYXJzZWQsIGVudnMpIHtcbiAgICAgICAgICAgIC8vIFRoZSBpbnRlcm1lZGlhdGUgbm9kZXMgb2YgdGhlIHBhcnNlIHRyZWUgYXJlIGFycmF5cy4gVGhlIHRlcm1pbmFsXG4gICAgICAgICAgICAvLyBub2RlcyBhcmUgSmF2YVNjcmlwdCBwcmltaXRpdmVzIChhcyBkZXNjcmliZWQgaW4gdGhlIFwiUGFyc2VyIG91dHB1dFwiXG4gICAgICAgICAgICAvLyBzZWN0aW9uIG9mIHBhcnNlci5wZWdqcykuXG4gICAgICAgICAgICBpZiAocGFyc2VkIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2VyIGdlbmVyYXRlZCBhbiBpbnRlcm1lZGlhdGUgbm9kZSB3aXRoIHplcm8gY2hpbGRyZW4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkWzBdID09PSAnIycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV4cHJlc3Npb25TeW50YXhUcmVlU2VydmljZS5sb29rdXBFbnZzKHBhcnNlZFsxXSwgZW52cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEV2YWx1YXRlIHJlc3Qgb2YgdGhlIGVsZW1lbnRzLCBpLmUuIHRoZSBhcmd1bWVudHMuXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBwYXJzZWQuc2xpY2UoMSkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmFsdWF0ZShpdGVtLCBlbnZzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZmlyc3QgZWxlbWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBuYW1lLlxuICAgICAgICAgICAgICAgIHJldHVybiBFeHByZXNzaW9uU3ludGF4VHJlZVNlcnZpY2UubG9va3VwRW52cyhwYXJzZWRbMF0sIGVudnMpLmV2YWwoYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSBhIHRlcm1pbmFsIG5vZGUgd2l0aCB0aGUgYWN0dWFsIHZhbHVlLlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGV2YWx1YXRlOiBldmFsdWF0ZSxcbiAgICAgICAgICAgIGV2YWx1YXRlRXhwcmVzc2lvbjogZXZhbHVhdGVFeHByZXNzaW9uLFxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIGZvciBpbnRlcnBvbGF0aW5nIGV4cHJlc3Npb25zLlxuICovXG5yZXF1aXJlKCdmaWx0ZXJzL2NvbnZlcnQtaHRtbC10by11bmljb2RlLmZpbHRlci50cycpO1xucmVxdWlyZSgnZXhwcmVzc2lvbnMvRXhwcmVzc2lvbkV2YWx1YXRvclNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2V4cHJlc3Npb25zL0V4cHJlc3Npb25QYXJzZXJTZXJ2aWNlLmpzJyk7XG5yZXF1aXJlKCdleHByZXNzaW9ucy9FeHByZXNzaW9uU3ludGF4VHJlZVNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0h0bWxFc2NhcGVyU2VydmljZS50cycpO1xuLy8gSW50ZXJwb2xhdGVzIGFuIEhUTUwgb3IgYSB1bmljb2RlIHN0cmluZyBjb250YWluaW5nIGV4cHJlc3Npb25zLlxuLy8gVGhlIGlucHV0IHZhbHVlIGlzIGV2YWx1YXRlZCBhZ2FpbnN0IHRoZSBzdXBwbGllZCBlbnZpcm9ubWVudHMuXG4vL1xuLy8gRXhhbXBsZXM6XG4vLyAgIHByb2Nlc3NIdG1sKCdhYmN7e2F9fScsIFt7J2EnOiAnYid9XSkgZ2l2ZXMgJ2FiY2InLlxuLy8gICBwcm9jZXNzSHRtbCgnYWJje3thfX0nLCBbe31dKSByZXR1cm5zIG51bGwuXG4vLyAgIHByb2Nlc3NIdG1sKCdhYmMnLCBbe31dKSByZXR1cm5zICdhYmMnLlxuLy8gICBwcm9jZXNzSHRtbCgne1thfX0nLCBbeydhJzogJzxidXR0b24+PC9idXR0b24+J31dKVxuLy8gICAgIHJldHVybnMgJyZsdDtidXR0b24mZ3Q7Jmx0Oy9idXR0b24mZ3Q7Jy5cbi8vICAgcHJvY2Vzc1VuaWNvZGUoJ2FiY3t7YX19JywgW3snYSc6ICdiJ31dKSBnaXZlcyAnYWJjYicuXG4vLyAgIHByb2Nlc3NVbmljb2RlKCdhYmN7e2F9fScsIFt7fV0pIHJldHVybnMgbnVsbC5cbi8vICAgcHJvY2Vzc1VuaWNvZGUoJ3tbYX19JywgW3snYSc6ICc8YnV0dG9uPjwvYnV0dG9uPid9XSkgcmV0dXJuc1xuLy8gICAgICc8YnV0dG9uPjwvYnV0dG9uPicuXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdFeHByZXNzaW9uSW50ZXJwb2xhdGlvblNlcnZpY2UnLCBbXG4gICAgJyRmaWx0ZXInLCAnRXhwcmVzc2lvbkV2YWx1YXRvclNlcnZpY2UnLCAnRXhwcmVzc2lvblBhcnNlclNlcnZpY2UnLFxuICAgICdFeHByZXNzaW9uU3ludGF4VHJlZVNlcnZpY2UnLCAnSHRtbEVzY2FwZXJTZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoJGZpbHRlciwgRXhwcmVzc2lvbkV2YWx1YXRvclNlcnZpY2UsIEV4cHJlc3Npb25QYXJzZXJTZXJ2aWNlLCBFeHByZXNzaW9uU3ludGF4VHJlZVNlcnZpY2UsIEh0bWxFc2NhcGVyU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgdXNlZCBpZiBpdHMgcmVzdWx0IHdvdWxkIGltbWVkaWF0ZWx5IGJlXG4gICAgICAgICAgICAvLyBkaXNwbGF5ZWQgb24gdGhlIHNjcmVlbiB3aXRob3V0IHBhc3NpbmcgdGhyb3VnaCBmdXJ0aGVyIGNvbXB1dGF0aW9uLlxuICAgICAgICAgICAgLy8gSXQgZGlmZmVycyBmcm9tIG90aGVyIG1ldGhvZHMgaW4gdGhpcyBzZXJ2aWNlIGluIHRoYXQgaXRcbiAgICAgICAgICAgIC8vIGF1dG8tZXNjYXBlcyB0aGUgcmV0dXJuZWQgSFRNTCwgYW5kIHJldHVybnMgYW4gJ2Vycm9yJyBsYWJlbCBpZiB0aGVcbiAgICAgICAgICAgIC8vIGV2YWx1YXRpb24gZmFpbHMuXG4gICAgICAgICAgICBwcm9jZXNzSHRtbDogZnVuY3Rpb24gKHNvdXJjZUh0bWwsIGVudnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlSHRtbC5yZXBsYWNlKC97eyhbXn1dKil9fS9nLCBmdW5jdGlvbiAobWF0Y2gsIHAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKHNsbCk6IFJlbW92ZSB0aGUgY2FsbCB0byAkZmlsdGVyIG9uY2Ugd2UgaGF2ZSBhXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjdXN0b20gVUkgZm9yIGVudGVyaW5nIGV4cHJlc3Npb25zLiBJdCBpcyBvbmx5IG5lZWRlZCBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBleHByZXNzaW9ucyBhcmUgY3VycmVudGx5IGlucHV0IGlubGluZSB2aWEgdGhlIFJURS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBIdG1sRXNjYXBlclNlcnZpY2UudW5lc2NhcGVkU3RyVG9Fc2NhcGVkU3RyKEV4cHJlc3Npb25FdmFsdWF0b3JTZXJ2aWNlLmV2YWx1YXRlRXhwcmVzc2lvbigkZmlsdGVyKCdjb252ZXJ0SHRtbFRvVW5pY29kZScpKHAxKSwgZW52cykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgRVhQUkVTU0lPTl9FUlJPUl9UQUcgPSAoJzxvcHBpYS1leHByZXNzaW9uLWVycm9yLXRhZz48L29wcGlhLWV4cHJlc3Npb24tZXJyb3ItdGFnPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChlIGluc3RhbmNlb2YgRXhwcmVzc2lvblBhcnNlclNlcnZpY2UuU3ludGF4RXJyb3IpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUgaW5zdGFuY2VvZiBFeHByZXNzaW9uU3ludGF4VHJlZVNlcnZpY2UuRXhwcmVzc2lvbkVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBFWFBSRVNTSU9OX0VSUk9SX1RBRztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBSZXR1cm5zIG51bGwgaWYgdGhlIGV2YWx1YXRpb24gZmFpbHMuXG4gICAgICAgICAgICBwcm9jZXNzVW5pY29kZTogZnVuY3Rpb24gKHNvdXJjZVVuaWNvZGUsIGVudnMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlVW5pY29kZS5yZXBsYWNlKC97eyhbXn1dKil9fS9nLCBmdW5jdGlvbiAobWF0Y2gsIHAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKHNsbCk6IFJlbW92ZSB0aGUgY2FsbCB0byAkZmlsdGVyIG9uY2Ugd2UgaGF2ZSBhXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjdXN0b20gVUkgZm9yIGVudGVyaW5nIGV4cHJlc3Npb25zLiBJdCBpcyBvbmx5IG5lZWRlZCBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBleHByZXNzaW9ucyBhcmUgY3VycmVudGx5IGlucHV0IGlubGluZSB2aWEgdGhlIFJURS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBFeHByZXNzaW9uRXZhbHVhdG9yU2VydmljZS5ldmFsdWF0ZUV4cHJlc3Npb24oJGZpbHRlcignY29udmVydEh0bWxUb1VuaWNvZGUnKShwMSksIGVudnMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChlIGluc3RhbmNlb2YgRXhwcmVzc2lvblBhcnNlclNlcnZpY2UuU3ludGF4RXJyb3IpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoZSBpbnN0YW5jZW9mIEV4cHJlc3Npb25TeW50YXhUcmVlU2VydmljZS5FeHByZXNzaW9uRXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBUaGlzIHdvcmtzIGZvciBib3RoIHVuaWNvZGUgYW5kIEhUTUwuXG4gICAgICAgICAgICBnZXRQYXJhbXNGcm9tU3RyaW5nOiBmdW5jdGlvbiAoc291cmNlU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBzb3VyY2VTdHJpbmcubWF0Y2goL3t7KFtefV0qKX19L2cpIHx8IFtdO1xuICAgICAgICAgICAgICAgIHZhciBhbGxQYXJhbXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJpbSB0aGUgJ3t7JyBhbmQgJ319Jy5cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlc1tpXSA9IG1hdGNoZXNbaV0uc3Vic3RyaW5nKDIsIG1hdGNoZXNbaV0ubGVuZ3RoIC0gMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBFeHByZXNzaW9uU3ludGF4VHJlZVNlcnZpY2UuZ2V0UGFyYW1zVXNlZEluRXhwcmVzc2lvbigkZmlsdGVyKCdjb252ZXJ0SHRtbFRvVW5pY29kZScpKG1hdGNoZXNbaV0pKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJhbXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxQYXJhbXMuaW5kZXhPZihwYXJhbXNbal0pID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFBhcmFtcy5wdXNoKHBhcmFtc1tqXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbFBhcmFtcy5zb3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdFeHByZXNzaW9uUGFyc2VyU2VydmljZScsIFsnJGxvZycsIGZ1bmN0aW9uKCRsb2cpIHtcbiAgLypcbiAgICogR2VuZXJhdGVkIGJ5IFBFRy5qcyAwLjguMC5cbiAgICpcbiAgICogaHR0cDovL3BlZ2pzLm1hamRhLmN6L1xuICAgKi9cblxuICBmdW5jdGlvbiBwZWckc3ViY2xhc3MoY2hpbGQsIHBhcmVudCkge1xuICAgIGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfVxuICAgIGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTtcbiAgICBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gU3ludGF4RXJyb3IobWVzc2FnZSwgZXhwZWN0ZWQsIGZvdW5kLCBvZmZzZXQsIGxpbmUsIGNvbHVtbikge1xuICAgIHRoaXMubWVzc2FnZSAgPSBtZXNzYWdlO1xuICAgIHRoaXMuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICB0aGlzLmZvdW5kICAgID0gZm91bmQ7XG4gICAgdGhpcy5vZmZzZXQgICA9IG9mZnNldDtcbiAgICB0aGlzLmxpbmUgICAgID0gbGluZTtcbiAgICB0aGlzLmNvbHVtbiAgID0gY29sdW1uO1xuXG4gICAgdGhpcy5uYW1lICAgICA9IFwiU3ludGF4RXJyb3JcIjtcbiAgfVxuXG4gIHBlZyRzdWJjbGFzcyhTeW50YXhFcnJvciwgRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuXG4gICAgICAgIHBlZyRGQUlMRUQgPSB7fSxcblxuICAgICAgICBwZWckc3RhcnRSdWxlRnVuY3Rpb25zID0geyBzdGFydDogcGVnJHBhcnNlc3RhcnQgfSxcbiAgICAgICAgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uICA9IHBlZyRwYXJzZXN0YXJ0LFxuXG4gICAgICAgIHBlZyRjMCA9IHBlZyRGQUlMRUQsXG4gICAgICAgIHBlZyRjMSA9IGZ1bmN0aW9uKGV4cHJlc3Npb24pIHsgcmV0dXJuIGV4cHJlc3Npb247IH0sXG4gICAgICAgIHBlZyRjMiA9IHsgdHlwZTogXCJhbnlcIiwgZGVzY3JpcHRpb246IFwiYW55IGNoYXJhY3RlclwiIH0sXG4gICAgICAgIHBlZyRjMyA9IHsgdHlwZTogXCJvdGhlclwiLCBkZXNjcmlwdGlvbjogXCJ3aGl0ZXNwYWNlXCIgfSxcbiAgICAgICAgcGVnJGM0ID0gL15bXFx0XFx4MEJcXGYgXFx4QTBcXHVGRUZGXS8sXG4gICAgICAgIHBlZyRjNSA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbXFxcXHRcXFxceDBCXFxcXGYgXFxcXHhBMFxcXFx1RkVGRl1cIiwgZGVzY3JpcHRpb246IFwiW1xcXFx0XFxcXHgwQlxcXFxmIFxcXFx4QTBcXFxcdUZFRkZdXCIgfSxcbiAgICAgICAgcGVnJGM2ID0geyB0eXBlOiBcIm90aGVyXCIsIGRlc2NyaXB0aW9uOiBcImlkZW50aWZpZXJcIiB9LFxuICAgICAgICBwZWckYzcgPSB2b2lkIDAsXG4gICAgICAgIHBlZyRjOCA9IGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIG5hbWU7IH0sXG4gICAgICAgIHBlZyRjOSA9IFtdLFxuICAgICAgICBwZWckYzEwID0gZnVuY3Rpb24oc3RhcnQsIHBhcnRzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzdGFydCArIHBhcnRzLmpvaW4oXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzExID0gXCIkXCIsXG4gICAgICAgIHBlZyRjMTIgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIkXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIkXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTMgPSBcIl9cIixcbiAgICAgICAgcGVnJGMxNCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIl9cIiwgZGVzY3JpcHRpb246IFwiXFxcIl9cXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxNSA9IFwiXFxcXFwiLFxuICAgICAgICBwZWckYzE2ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiXFxcXFwiLCBkZXNjcmlwdGlvbjogXCJcXFwiXFxcXFxcXFxcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxNyA9IGZ1bmN0aW9uKHNlcXVlbmNlKSB7IHJldHVybiBzZXF1ZW5jZTsgfSxcbiAgICAgICAgcGVnJGMxOCA9IFwiXFx1MjAwQ1wiLFxuICAgICAgICBwZWckYzE5ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiXFx1MjAwQ1wiLCBkZXNjcmlwdGlvbjogXCJcXFwiXFxcXHUyMDBDXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMjAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwiXFx1MjAwQ1wiOyB9LFxuICAgICAgICBwZWckYzIxID0gXCJcXHUyMDBEXCIsXG4gICAgICAgIHBlZyRjMjIgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJcXHUyMDBEXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJcXFxcdTIwMERcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMyMyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJcXHUyMDBEXCI7IH0sXG4gICAgICAgIHBlZyRjMjQgPSBcIm51bGxcIixcbiAgICAgICAgcGVnJGMyNSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIm51bGxcIiwgZGVzY3JpcHRpb246IFwiXFxcIm51bGxcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMyNiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcGVnJGMyNyA9IFwiZmFsc2VcIixcbiAgICAgICAgcGVnJGMyOCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcImZhbHNlXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJmYWxzZVxcXCJcIiB9LFxuICAgICAgICBwZWckYzI5ID0gZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgcGVnJGMzMCA9IFwidHJ1ZVwiLFxuICAgICAgICBwZWckYzMxID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwidHJ1ZVwiLCBkZXNjcmlwdGlvbjogXCJcXFwidHJ1ZVxcXCJcIiB9LFxuICAgICAgICBwZWckYzMyID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgICAgICBwZWckYzMzID0geyB0eXBlOiBcIm90aGVyXCIsIGRlc2NyaXB0aW9uOiBcIm51bWJlclwiIH0sXG4gICAgICAgIHBlZyRjMzQgPSBmdW5jdGlvbihsaXRlcmFsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsaXRlcmFsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMzNSA9IFwiLlwiLFxuICAgICAgICBwZWckYzM2ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiLlwiLCBkZXNjcmlwdGlvbjogXCJcXFwiLlxcXCJcIiB9LFxuICAgICAgICBwZWckYzM3ID0gbnVsbCxcbiAgICAgICAgcGVnJGMzOCA9IGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHBhcnRzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIHBlZyRjMzkgPSBmdW5jdGlvbihwYXJ0cykgeyByZXR1cm4gcGFyc2VGbG9hdChwYXJ0cyk7IH0sXG4gICAgICAgIHBlZyRjNDAgPSBcIjBcIixcbiAgICAgICAgcGVnJGM0MSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIjBcIiwgZGVzY3JpcHRpb246IFwiXFxcIjBcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM0MiA9IC9eWzAtOV0vLFxuICAgICAgICBwZWckYzQzID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIlswLTldXCIsIGRlc2NyaXB0aW9uOiBcIlswLTldXCIgfSxcbiAgICAgICAgcGVnJGM0NCA9IC9eWzEtOV0vLFxuICAgICAgICBwZWckYzQ1ID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIlsxLTldXCIsIGRlc2NyaXB0aW9uOiBcIlsxLTldXCIgfSxcbiAgICAgICAgcGVnJGM0NiA9IC9eW2VFXS8sXG4gICAgICAgIHBlZyRjNDcgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW2VFXVwiLCBkZXNjcmlwdGlvbjogXCJbZUVdXCIgfSxcbiAgICAgICAgcGVnJGM0OCA9IC9eW1xcLStdLyxcbiAgICAgICAgcGVnJGM0OSA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbXFxcXC0rXVwiLCBkZXNjcmlwdGlvbjogXCJbXFxcXC0rXVwiIH0sXG4gICAgICAgIHBlZyRjNTAgPSAvXlt4WF0vLFxuICAgICAgICBwZWckYzUxID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIlt4WF1cIiwgZGVzY3JpcHRpb246IFwiW3hYXVwiIH0sXG4gICAgICAgIHBlZyRjNTIgPSBmdW5jdGlvbihkaWdpdHMpIHsgcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgMTYpOyB9LFxuICAgICAgICBwZWckYzUzID0gL15bMC05YS1mQS1GXS8sXG4gICAgICAgIHBlZyRjNTQgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiWzAtOWEtZkEtRl1cIiwgZGVzY3JpcHRpb246IFwiWzAtOWEtZkEtRl1cIiB9LFxuICAgICAgICBwZWckYzU1ID0geyB0eXBlOiBcIm90aGVyXCIsIGRlc2NyaXB0aW9uOiBcInN0cmluZ1wiIH0sXG4gICAgICAgIHBlZyRjNTYgPSBcIlxcXCJcIixcbiAgICAgICAgcGVnJGM1NyA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIlxcXCJcIiwgZGVzY3JpcHRpb246IFwiXFxcIlxcXFxcXFwiXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNTggPSBcIidcIixcbiAgICAgICAgcGVnJGM1OSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIidcIiwgZGVzY3JpcHRpb246IFwiXFxcIidcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM2MCA9IGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJ0c1sxXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIHBlZyRjNjEgPSBmdW5jdGlvbihjaGFycykgeyByZXR1cm4gY2hhcnMuam9pbihcIlwiKTsgfSxcbiAgICAgICAgcGVnJGM2MiA9IGZ1bmN0aW9uKGNoYXJfKSB7IHJldHVybiBjaGFyXzsgICAgIH0sXG4gICAgICAgIHBlZyRjNjMgPSBmdW5jdGlvbihzZXF1ZW5jZSkgeyByZXR1cm4gc2VxdWVuY2U7ICB9LFxuICAgICAgICBwZWckYzY0ID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIlxcMFwiOyB9LFxuICAgICAgICBwZWckYzY1ID0gL15bJ1wiXFxcXGJmbnJ0dl0vLFxuICAgICAgICBwZWckYzY2ID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIlsnXFxcIlxcXFxcXFxcYmZucnR2XVwiLCBkZXNjcmlwdGlvbjogXCJbJ1xcXCJcXFxcXFxcXGJmbnJ0dl1cIiB9LFxuICAgICAgICBwZWckYzY3ID0gZnVuY3Rpb24oY2hhcl8pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNoYXJfXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJiXCIsIFwiXFxiXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJmXCIsIFwiXFxmXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJuXCIsIFwiXFxuXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJyXCIsIFwiXFxyXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJ0XCIsIFwiXFx0XCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJ2XCIsIFwiXFx4MEJcIikgLy8gSUUgZG9lcyBub3QgcmVjb2duaXplIFwiXFx2XCIuXG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzY4ID0gZnVuY3Rpb24oY2hhcl8pIHsgcmV0dXJuIGNoYXJfOyB9LFxuICAgICAgICBwZWckYzY5ID0gXCJ4XCIsXG4gICAgICAgIHBlZyRjNzAgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJ4XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJ4XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjNzEgPSBcInVcIixcbiAgICAgICAgcGVnJGM3MiA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcInVcIiwgZGVzY3JpcHRpb246IFwiXFxcInVcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM3MyA9IGZ1bmN0aW9uKGRpZ2l0cykge1xuICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChkaWdpdHMsIDE2KSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICBwZWckYzc0ID0gL15bYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcXHhBQVxceEI1XFx4QkFcXHhERlxceEUwXFx4RTFcXHhFMlxceEUzXFx4RTRcXHhFNVxceEU2XFx4RTdcXHhFOFxceEU5XFx4RUFcXHhFQlxceEVDXFx4RURcXHhFRVxceEVGXFx4RjBcXHhGMVxceEYyXFx4RjNcXHhGNFxceEY1XFx4RjZcXHhGOFxceEY5XFx4RkFcXHhGQlxceEZDXFx4RkRcXHhGRVxceEZGXFx1MDEwMVxcdTAxMDNcXHUwMTA1XFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAxMEZcXHUwMTExXFx1MDExM1xcdTAxMTVcXHUwMTE3XFx1MDExOVxcdTAxMUJcXHUwMTFEXFx1MDExRlxcdTAxMjFcXHUwMTIzXFx1MDEyNVxcdTAxMjdcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMTJGXFx1MDEzMVxcdTAxMzNcXHUwMTM1XFx1MDEzN1xcdTAxMzhcXHUwMTNBXFx1MDEzQ1xcdTAxM0VcXHUwMTQwXFx1MDE0MlxcdTAxNDRcXHUwMTQ2XFx1MDE0OFxcdTAxNDlcXHUwMTRCXFx1MDE0RFxcdTAxNEZcXHUwMTUxXFx1MDE1M1xcdTAxNTVcXHUwMTU3XFx1MDE1OVxcdTAxNUJcXHUwMTVEXFx1MDE1RlxcdTAxNjFcXHUwMTYzXFx1MDE2NVxcdTAxNjdcXHUwMTY5XFx1MDE2QlxcdTAxNkRcXHUwMTZGXFx1MDE3MVxcdTAxNzNcXHUwMTc1XFx1MDE3N1xcdTAxN0FcXHUwMTdDXFx1MDE3RVxcdTAxN0ZcXHUwMTgwXFx1MDE4M1xcdTAxODVcXHUwMTg4XFx1MDE4Q1xcdTAxOERcXHUwMTkyXFx1MDE5NVxcdTAxOTlcXHUwMTlBXFx1MDE5QlxcdTAxOUVcXHUwMUExXFx1MDFBM1xcdTAxQTVcXHUwMUE4XFx1MDFBQVxcdTAxQUJcXHUwMUFEXFx1MDFCMFxcdTAxQjRcXHUwMUI2XFx1MDFCOVxcdTAxQkFcXHUwMUJEXFx1MDFCRVxcdTAxQkZcXHUwMUM2XFx1MDFDOVxcdTAxQ0NcXHUwMUNFXFx1MDFEMFxcdTAxRDJcXHUwMUQ0XFx1MDFENlxcdTAxRDhcXHUwMURBXFx1MDFEQ1xcdTAxRERcXHUwMURGXFx1MDFFMVxcdTAxRTNcXHUwMUU1XFx1MDFFN1xcdTAxRTlcXHUwMUVCXFx1MDFFRFxcdTAxRUZcXHUwMUYwXFx1MDFGM1xcdTAxRjVcXHUwMUY5XFx1MDFGQlxcdTAxRkRcXHUwMUZGXFx1MDIwMVxcdTAyMDNcXHUwMjA1XFx1MDIwN1xcdTAyMDlcXHUwMjBCXFx1MDIwRFxcdTAyMEZcXHUwMjExXFx1MDIxM1xcdTAyMTVcXHUwMjE3XFx1MDIxOVxcdTAyMUJcXHUwMjFEXFx1MDIxRlxcdTAyMjFcXHUwMjIzXFx1MDIyNVxcdTAyMjdcXHUwMjI5XFx1MDIyQlxcdTAyMkRcXHUwMjJGXFx1MDIzMVxcdTAyMzNcXHUwMjM0XFx1MDIzNVxcdTAyMzZcXHUwMjM3XFx1MDIzOFxcdTAyMzlcXHUwMjNDXFx1MDIzRlxcdTAyNDBcXHUwMjQyXFx1MDI0N1xcdTAyNDlcXHUwMjRCXFx1MDI0RFxcdTAyNEZcXHUwMjUwXFx1MDI1MVxcdTAyNTJcXHUwMjUzXFx1MDI1NFxcdTAyNTVcXHUwMjU2XFx1MDI1N1xcdTAyNThcXHUwMjU5XFx1MDI1QVxcdTAyNUJcXHUwMjVDXFx1MDI1RFxcdTAyNUVcXHUwMjVGXFx1MDI2MFxcdTAyNjFcXHUwMjYyXFx1MDI2M1xcdTAyNjRcXHUwMjY1XFx1MDI2NlxcdTAyNjdcXHUwMjY4XFx1MDI2OVxcdTAyNkFcXHUwMjZCXFx1MDI2Q1xcdTAyNkRcXHUwMjZFXFx1MDI2RlxcdTAyNzBcXHUwMjcxXFx1MDI3MlxcdTAyNzNcXHUwMjc0XFx1MDI3NVxcdTAyNzZcXHUwMjc3XFx1MDI3OFxcdTAyNzlcXHUwMjdBXFx1MDI3QlxcdTAyN0NcXHUwMjdEXFx1MDI3RVxcdTAyN0ZcXHUwMjgwXFx1MDI4MVxcdTAyODJcXHUwMjgzXFx1MDI4NFxcdTAyODVcXHUwMjg2XFx1MDI4N1xcdTAyODhcXHUwMjg5XFx1MDI4QVxcdTAyOEJcXHUwMjhDXFx1MDI4RFxcdTAyOEVcXHUwMjhGXFx1MDI5MFxcdTAyOTFcXHUwMjkyXFx1MDI5M1xcdTAyOTVcXHUwMjk2XFx1MDI5N1xcdTAyOThcXHUwMjk5XFx1MDI5QVxcdTAyOUJcXHUwMjlDXFx1MDI5RFxcdTAyOUVcXHUwMjlGXFx1MDJBMFxcdTAyQTFcXHUwMkEyXFx1MDJBM1xcdTAyQTRcXHUwMkE1XFx1MDJBNlxcdTAyQTdcXHUwMkE4XFx1MDJBOVxcdTAyQUFcXHUwMkFCXFx1MDJBQ1xcdTAyQURcXHUwMkFFXFx1MDJBRlxcdTAzNzFcXHUwMzczXFx1MDM3N1xcdTAzN0JcXHUwMzdDXFx1MDM3RFxcdTAzOTBcXHUwM0FDXFx1MDNBRFxcdTAzQUVcXHUwM0FGXFx1MDNCMFxcdTAzQjFcXHUwM0IyXFx1MDNCM1xcdTAzQjRcXHUwM0I1XFx1MDNCNlxcdTAzQjdcXHUwM0I4XFx1MDNCOVxcdTAzQkFcXHUwM0JCXFx1MDNCQ1xcdTAzQkRcXHUwM0JFXFx1MDNCRlxcdTAzQzBcXHUwM0MxXFx1MDNDMlxcdTAzQzNcXHUwM0M0XFx1MDNDNVxcdTAzQzZcXHUwM0M3XFx1MDNDOFxcdTAzQzlcXHUwM0NBXFx1MDNDQlxcdTAzQ0NcXHUwM0NEXFx1MDNDRVxcdTAzRDBcXHUwM0QxXFx1MDNENVxcdTAzRDZcXHUwM0Q3XFx1MDNEOVxcdTAzREJcXHUwM0REXFx1MDNERlxcdTAzRTFcXHUwM0UzXFx1MDNFNVxcdTAzRTdcXHUwM0U5XFx1MDNFQlxcdTAzRURcXHUwM0VGXFx1MDNGMFxcdTAzRjFcXHUwM0YyXFx1MDNGM1xcdTAzRjVcXHUwM0Y4XFx1MDNGQlxcdTAzRkNcXHUwNDMwXFx1MDQzMVxcdTA0MzJcXHUwNDMzXFx1MDQzNFxcdTA0MzVcXHUwNDM2XFx1MDQzN1xcdTA0MzhcXHUwNDM5XFx1MDQzQVxcdTA0M0JcXHUwNDNDXFx1MDQzRFxcdTA0M0VcXHUwNDNGXFx1MDQ0MFxcdTA0NDFcXHUwNDQyXFx1MDQ0M1xcdTA0NDRcXHUwNDQ1XFx1MDQ0NlxcdTA0NDdcXHUwNDQ4XFx1MDQ0OVxcdTA0NEFcXHUwNDRCXFx1MDQ0Q1xcdTA0NERcXHUwNDRFXFx1MDQ0RlxcdTA0NTBcXHUwNDUxXFx1MDQ1MlxcdTA0NTNcXHUwNDU0XFx1MDQ1NVxcdTA0NTZcXHUwNDU3XFx1MDQ1OFxcdTA0NTlcXHUwNDVBXFx1MDQ1QlxcdTA0NUNcXHUwNDVEXFx1MDQ1RVxcdTA0NUZcXHUwNDYxXFx1MDQ2M1xcdTA0NjVcXHUwNDY3XFx1MDQ2OVxcdTA0NkJcXHUwNDZEXFx1MDQ2RlxcdTA0NzFcXHUwNDczXFx1MDQ3NVxcdTA0NzdcXHUwNDc5XFx1MDQ3QlxcdTA0N0RcXHUwNDdGXFx1MDQ4MVxcdTA0OEJcXHUwNDhEXFx1MDQ4RlxcdTA0OTFcXHUwNDkzXFx1MDQ5NVxcdTA0OTdcXHUwNDk5XFx1MDQ5QlxcdTA0OURcXHUwNDlGXFx1MDRBMVxcdTA0QTNcXHUwNEE1XFx1MDRBN1xcdTA0QTlcXHUwNEFCXFx1MDRBRFxcdTA0QUZcXHUwNEIxXFx1MDRCM1xcdTA0QjVcXHUwNEI3XFx1MDRCOVxcdTA0QkJcXHUwNEJEXFx1MDRCRlxcdTA0QzJcXHUwNEM0XFx1MDRDNlxcdTA0QzhcXHUwNENBXFx1MDRDQ1xcdTA0Q0VcXHUwNENGXFx1MDREMVxcdTA0RDNcXHUwNEQ1XFx1MDREN1xcdTA0RDlcXHUwNERCXFx1MDRERFxcdTA0REZcXHUwNEUxXFx1MDRFM1xcdTA0RTVcXHUwNEU3XFx1MDRFOVxcdTA0RUJcXHUwNEVEXFx1MDRFRlxcdTA0RjFcXHUwNEYzXFx1MDRGNVxcdTA0RjdcXHUwNEY5XFx1MDRGQlxcdTA0RkRcXHUwNEZGXFx1MDUwMVxcdTA1MDNcXHUwNTA1XFx1MDUwN1xcdTA1MDlcXHUwNTBCXFx1MDUwRFxcdTA1MEZcXHUwNTExXFx1MDUxM1xcdTA1MTVcXHUwNTE3XFx1MDUxOVxcdTA1MUJcXHUwNTFEXFx1MDUxRlxcdTA1MjFcXHUwNTIzXFx1MDU2MVxcdTA1NjJcXHUwNTYzXFx1MDU2NFxcdTA1NjVcXHUwNTY2XFx1MDU2N1xcdTA1NjhcXHUwNTY5XFx1MDU2QVxcdTA1NkJcXHUwNTZDXFx1MDU2RFxcdTA1NkVcXHUwNTZGXFx1MDU3MFxcdTA1NzFcXHUwNTcyXFx1MDU3M1xcdTA1NzRcXHUwNTc1XFx1MDU3NlxcdTA1NzdcXHUwNTc4XFx1MDU3OVxcdTA1N0FcXHUwNTdCXFx1MDU3Q1xcdTA1N0RcXHUwNTdFXFx1MDU3RlxcdTA1ODBcXHUwNTgxXFx1MDU4MlxcdTA1ODNcXHUwNTg0XFx1MDU4NVxcdTA1ODZcXHUwNTg3XFx1MUQwMFxcdTFEMDFcXHUxRDAyXFx1MUQwM1xcdTFEMDRcXHUxRDA1XFx1MUQwNlxcdTFEMDdcXHUxRDA4XFx1MUQwOVxcdTFEMEFcXHUxRDBCXFx1MUQwQ1xcdTFEMERcXHUxRDBFXFx1MUQwRlxcdTFEMTBcXHUxRDExXFx1MUQxMlxcdTFEMTNcXHUxRDE0XFx1MUQxNVxcdTFEMTZcXHUxRDE3XFx1MUQxOFxcdTFEMTlcXHUxRDFBXFx1MUQxQlxcdTFEMUNcXHUxRDFEXFx1MUQxRVxcdTFEMUZcXHUxRDIwXFx1MUQyMVxcdTFEMjJcXHUxRDIzXFx1MUQyNFxcdTFEMjVcXHUxRDI2XFx1MUQyN1xcdTFEMjhcXHUxRDI5XFx1MUQyQVxcdTFEMkJcXHUxRDYyXFx1MUQ2M1xcdTFENjRcXHUxRDY1XFx1MUQ2NlxcdTFENjdcXHUxRDY4XFx1MUQ2OVxcdTFENkFcXHUxRDZCXFx1MUQ2Q1xcdTFENkRcXHUxRDZFXFx1MUQ2RlxcdTFENzBcXHUxRDcxXFx1MUQ3MlxcdTFENzNcXHUxRDc0XFx1MUQ3NVxcdTFENzZcXHUxRDc3XFx1MUQ3OVxcdTFEN0FcXHUxRDdCXFx1MUQ3Q1xcdTFEN0RcXHUxRDdFXFx1MUQ3RlxcdTFEODBcXHUxRDgxXFx1MUQ4MlxcdTFEODNcXHUxRDg0XFx1MUQ4NVxcdTFEODZcXHUxRDg3XFx1MUQ4OFxcdTFEODlcXHUxRDhBXFx1MUQ4QlxcdTFEOENcXHUxRDhEXFx1MUQ4RVxcdTFEOEZcXHUxRDkwXFx1MUQ5MVxcdTFEOTJcXHUxRDkzXFx1MUQ5NFxcdTFEOTVcXHUxRDk2XFx1MUQ5N1xcdTFEOThcXHUxRDk5XFx1MUQ5QVxcdTFFMDFcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUxRTA5XFx1MUUwQlxcdTFFMERcXHUxRTBGXFx1MUUxMVxcdTFFMTNcXHUxRTE1XFx1MUUxN1xcdTFFMTlcXHUxRTFCXFx1MUUxRFxcdTFFMUZcXHUxRTIxXFx1MUUyM1xcdTFFMjVcXHUxRTI3XFx1MUUyOVxcdTFFMkJcXHUxRTJEXFx1MUUyRlxcdTFFMzFcXHUxRTMzXFx1MUUzNVxcdTFFMzdcXHUxRTM5XFx1MUUzQlxcdTFFM0RcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUxRTQ1XFx1MUU0N1xcdTFFNDlcXHUxRTRCXFx1MUU0RFxcdTFFNEZcXHUxRTUxXFx1MUU1M1xcdTFFNTVcXHUxRTU3XFx1MUU1OVxcdTFFNUJcXHUxRTVEXFx1MUU1RlxcdTFFNjFcXHUxRTYzXFx1MUU2NVxcdTFFNjdcXHUxRTY5XFx1MUU2QlxcdTFFNkRcXHUxRTZGXFx1MUU3MVxcdTFFNzNcXHUxRTc1XFx1MUU3N1xcdTFFNzlcXHUxRTdCXFx1MUU3RFxcdTFFN0ZcXHUxRTgxXFx1MUU4M1xcdTFFODVcXHUxRTg3XFx1MUU4OVxcdTFFOEJcXHUxRThEXFx1MUU4RlxcdTFFOTFcXHUxRTkzXFx1MUU5NVxcdTFFOTZcXHUxRTk3XFx1MUU5OFxcdTFFOTlcXHUxRTlBXFx1MUU5QlxcdTFFOUNcXHUxRTlEXFx1MUU5RlxcdTFFQTFcXHUxRUEzXFx1MUVBNVxcdTFFQTdcXHUxRUE5XFx1MUVBQlxcdTFFQURcXHUxRUFGXFx1MUVCMVxcdTFFQjNcXHUxRUI1XFx1MUVCN1xcdTFFQjlcXHUxRUJCXFx1MUVCRFxcdTFFQkZcXHUxRUMxXFx1MUVDM1xcdTFFQzVcXHUxRUM3XFx1MUVDOVxcdTFFQ0JcXHUxRUNEXFx1MUVDRlxcdTFFRDFcXHUxRUQzXFx1MUVENVxcdTFFRDdcXHUxRUQ5XFx1MUVEQlxcdTFFRERcXHUxRURGXFx1MUVFMVxcdTFFRTNcXHUxRUU1XFx1MUVFN1xcdTFFRTlcXHUxRUVCXFx1MUVFRFxcdTFFRUZcXHUxRUYxXFx1MUVGM1xcdTFFRjVcXHUxRUY3XFx1MUVGOVxcdTFFRkJcXHUxRUZEXFx1MUVGRlxcdTFGMDBcXHUxRjAxXFx1MUYwMlxcdTFGMDNcXHUxRjA0XFx1MUYwNVxcdTFGMDZcXHUxRjA3XFx1MUYxMFxcdTFGMTFcXHUxRjEyXFx1MUYxM1xcdTFGMTRcXHUxRjE1XFx1MUYyMFxcdTFGMjFcXHUxRjIyXFx1MUYyM1xcdTFGMjRcXHUxRjI1XFx1MUYyNlxcdTFGMjdcXHUxRjMwXFx1MUYzMVxcdTFGMzJcXHUxRjMzXFx1MUYzNFxcdTFGMzVcXHUxRjM2XFx1MUYzN1xcdTFGNDBcXHUxRjQxXFx1MUY0MlxcdTFGNDNcXHUxRjQ0XFx1MUY0NVxcdTFGNTBcXHUxRjUxXFx1MUY1MlxcdTFGNTNcXHUxRjU0XFx1MUY1NVxcdTFGNTZcXHUxRjU3XFx1MUY2MFxcdTFGNjFcXHUxRjYyXFx1MUY2M1xcdTFGNjRcXHUxRjY1XFx1MUY2NlxcdTFGNjdcXHUxRjcwXFx1MUY3MVxcdTFGNzJcXHUxRjczXFx1MUY3NFxcdTFGNzVcXHUxRjc2XFx1MUY3N1xcdTFGNzhcXHUxRjc5XFx1MUY3QVxcdTFGN0JcXHUxRjdDXFx1MUY3RFxcdTFGODBcXHUxRjgxXFx1MUY4MlxcdTFGODNcXHUxRjg0XFx1MUY4NVxcdTFGODZcXHUxRjg3XFx1MUY5MFxcdTFGOTFcXHUxRjkyXFx1MUY5M1xcdTFGOTRcXHUxRjk1XFx1MUY5NlxcdTFGOTdcXHUxRkEwXFx1MUZBMVxcdTFGQTJcXHUxRkEzXFx1MUZBNFxcdTFGQTVcXHUxRkE2XFx1MUZBN1xcdTFGQjBcXHUxRkIxXFx1MUZCMlxcdTFGQjNcXHUxRkI0XFx1MUZCNlxcdTFGQjdcXHUxRkJFXFx1MUZDMlxcdTFGQzNcXHUxRkM0XFx1MUZDNlxcdTFGQzdcXHUxRkQwXFx1MUZEMVxcdTFGRDJcXHUxRkQzXFx1MUZENlxcdTFGRDdcXHUxRkUwXFx1MUZFMVxcdTFGRTJcXHUxRkUzXFx1MUZFNFxcdTFGRTVcXHUxRkU2XFx1MUZFN1xcdTFGRjJcXHUxRkYzXFx1MUZGNFxcdTFGRjZcXHUxRkY3XFx1MjA3MVxcdTIwN0ZcXHUyMTBBXFx1MjEwRVxcdTIxMEZcXHUyMTEzXFx1MjEyRlxcdTIxMzRcXHUyMTM5XFx1MjEzQ1xcdTIxM0RcXHUyMTQ2XFx1MjE0N1xcdTIxNDhcXHUyMTQ5XFx1MjE0RVxcdTIxODRcXHUyQzMwXFx1MkMzMVxcdTJDMzJcXHUyQzMzXFx1MkMzNFxcdTJDMzVcXHUyQzM2XFx1MkMzN1xcdTJDMzhcXHUyQzM5XFx1MkMzQVxcdTJDM0JcXHUyQzNDXFx1MkMzRFxcdTJDM0VcXHUyQzNGXFx1MkM0MFxcdTJDNDFcXHUyQzQyXFx1MkM0M1xcdTJDNDRcXHUyQzQ1XFx1MkM0NlxcdTJDNDdcXHUyQzQ4XFx1MkM0OVxcdTJDNEFcXHUyQzRCXFx1MkM0Q1xcdTJDNERcXHUyQzRFXFx1MkM0RlxcdTJDNTBcXHUyQzUxXFx1MkM1MlxcdTJDNTNcXHUyQzU0XFx1MkM1NVxcdTJDNTZcXHUyQzU3XFx1MkM1OFxcdTJDNTlcXHUyQzVBXFx1MkM1QlxcdTJDNUNcXHUyQzVEXFx1MkM1RVxcdTJDNjFcXHUyQzY1XFx1MkM2NlxcdTJDNjhcXHUyQzZBXFx1MkM2Q1xcdTJDNzFcXHUyQzczXFx1MkM3NFxcdTJDNzZcXHUyQzc3XFx1MkM3OFxcdTJDNzlcXHUyQzdBXFx1MkM3QlxcdTJDN0NcXHUyQzgxXFx1MkM4M1xcdTJDODVcXHUyQzg3XFx1MkM4OVxcdTJDOEJcXHUyQzhEXFx1MkM4RlxcdTJDOTFcXHUyQzkzXFx1MkM5NVxcdTJDOTdcXHUyQzk5XFx1MkM5QlxcdTJDOURcXHUyQzlGXFx1MkNBMVxcdTJDQTNcXHUyQ0E1XFx1MkNBN1xcdTJDQTlcXHUyQ0FCXFx1MkNBRFxcdTJDQUZcXHUyQ0IxXFx1MkNCM1xcdTJDQjVcXHUyQ0I3XFx1MkNCOVxcdTJDQkJcXHUyQ0JEXFx1MkNCRlxcdTJDQzFcXHUyQ0MzXFx1MkNDNVxcdTJDQzdcXHUyQ0M5XFx1MkNDQlxcdTJDQ0RcXHUyQ0NGXFx1MkNEMVxcdTJDRDNcXHUyQ0Q1XFx1MkNEN1xcdTJDRDlcXHUyQ0RCXFx1MkNERFxcdTJDREZcXHUyQ0UxXFx1MkNFM1xcdTJDRTRcXHUyRDAwXFx1MkQwMVxcdTJEMDJcXHUyRDAzXFx1MkQwNFxcdTJEMDVcXHUyRDA2XFx1MkQwN1xcdTJEMDhcXHUyRDA5XFx1MkQwQVxcdTJEMEJcXHUyRDBDXFx1MkQwRFxcdTJEMEVcXHUyRDBGXFx1MkQxMFxcdTJEMTFcXHUyRDEyXFx1MkQxM1xcdTJEMTRcXHUyRDE1XFx1MkQxNlxcdTJEMTdcXHUyRDE4XFx1MkQxOVxcdTJEMUFcXHUyRDFCXFx1MkQxQ1xcdTJEMURcXHUyRDFFXFx1MkQxRlxcdTJEMjBcXHUyRDIxXFx1MkQyMlxcdTJEMjNcXHUyRDI0XFx1MkQyNVxcdUE2NDFcXHVBNjQzXFx1QTY0NVxcdUE2NDdcXHVBNjQ5XFx1QTY0QlxcdUE2NERcXHVBNjRGXFx1QTY1MVxcdUE2NTNcXHVBNjU1XFx1QTY1N1xcdUE2NTlcXHVBNjVCXFx1QTY1RFxcdUE2NUZcXHVBNjYzXFx1QTY2NVxcdUE2NjdcXHVBNjY5XFx1QTY2QlxcdUE2NkRcXHVBNjgxXFx1QTY4M1xcdUE2ODVcXHVBNjg3XFx1QTY4OVxcdUE2OEJcXHVBNjhEXFx1QTY4RlxcdUE2OTFcXHVBNjkzXFx1QTY5NVxcdUE2OTdcXHVBNzIzXFx1QTcyNVxcdUE3MjdcXHVBNzI5XFx1QTcyQlxcdUE3MkRcXHVBNzJGXFx1QTczMFxcdUE3MzFcXHVBNzMzXFx1QTczNVxcdUE3MzdcXHVBNzM5XFx1QTczQlxcdUE3M0RcXHVBNzNGXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTc0N1xcdUE3NDlcXHVBNzRCXFx1QTc0RFxcdUE3NEZcXHVBNzUxXFx1QTc1M1xcdUE3NTVcXHVBNzU3XFx1QTc1OVxcdUE3NUJcXHVBNzVEXFx1QTc1RlxcdUE3NjFcXHVBNzYzXFx1QTc2NVxcdUE3NjdcXHVBNzY5XFx1QTc2QlxcdUE3NkRcXHVBNzZGXFx1QTc3MVxcdUE3NzJcXHVBNzczXFx1QTc3NFxcdUE3NzVcXHVBNzc2XFx1QTc3N1xcdUE3NzhcXHVBNzdBXFx1QTc3Q1xcdUE3N0ZcXHVBNzgxXFx1QTc4M1xcdUE3ODVcXHVBNzg3XFx1QTc4Q1xcdUZCMDBcXHVGQjAxXFx1RkIwMlxcdUZCMDNcXHVGQjA0XFx1RkIwNVxcdUZCMDZcXHVGQjEzXFx1RkIxNFxcdUZCMTVcXHVGQjE2XFx1RkIxN1xcdUZGNDFcXHVGRjQyXFx1RkY0M1xcdUZGNDRcXHVGRjQ1XFx1RkY0NlxcdUZGNDdcXHVGRjQ4XFx1RkY0OVxcdUZGNEFcXHVGRjRCXFx1RkY0Q1xcdUZGNERcXHVGRjRFXFx1RkY0RlxcdUZGNTBcXHVGRjUxXFx1RkY1MlxcdUZGNTNcXHVGRjU0XFx1RkY1NVxcdUZGNTZcXHVGRjU3XFx1RkY1OFxcdUZGNTlcXHVGRjVBXS8sXG4gICAgICAgIHBlZyRjNzUgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XFxcXHhBQVxcXFx4QjVcXFxceEJBXFxcXHhERlxcXFx4RTBcXFxceEUxXFxcXHhFMlxcXFx4RTNcXFxceEU0XFxcXHhFNVxcXFx4RTZcXFxceEU3XFxcXHhFOFxcXFx4RTlcXFxceEVBXFxcXHhFQlxcXFx4RUNcXFxceEVEXFxcXHhFRVxcXFx4RUZcXFxceEYwXFxcXHhGMVxcXFx4RjJcXFxceEYzXFxcXHhGNFxcXFx4RjVcXFxceEY2XFxcXHhGOFxcXFx4RjlcXFxceEZBXFxcXHhGQlxcXFx4RkNcXFxceEZEXFxcXHhGRVxcXFx4RkZcXFxcdTAxMDFcXFxcdTAxMDNcXFxcdTAxMDVcXFxcdTAxMDdcXFxcdTAxMDlcXFxcdTAxMEJcXFxcdTAxMERcXFxcdTAxMEZcXFxcdTAxMTFcXFxcdTAxMTNcXFxcdTAxMTVcXFxcdTAxMTdcXFxcdTAxMTlcXFxcdTAxMUJcXFxcdTAxMURcXFxcdTAxMUZcXFxcdTAxMjFcXFxcdTAxMjNcXFxcdTAxMjVcXFxcdTAxMjdcXFxcdTAxMjlcXFxcdTAxMkJcXFxcdTAxMkRcXFxcdTAxMkZcXFxcdTAxMzFcXFxcdTAxMzNcXFxcdTAxMzVcXFxcdTAxMzdcXFxcdTAxMzhcXFxcdTAxM0FcXFxcdTAxM0NcXFxcdTAxM0VcXFxcdTAxNDBcXFxcdTAxNDJcXFxcdTAxNDRcXFxcdTAxNDZcXFxcdTAxNDhcXFxcdTAxNDlcXFxcdTAxNEJcXFxcdTAxNERcXFxcdTAxNEZcXFxcdTAxNTFcXFxcdTAxNTNcXFxcdTAxNTVcXFxcdTAxNTdcXFxcdTAxNTlcXFxcdTAxNUJcXFxcdTAxNURcXFxcdTAxNUZcXFxcdTAxNjFcXFxcdTAxNjNcXFxcdTAxNjVcXFxcdTAxNjdcXFxcdTAxNjlcXFxcdTAxNkJcXFxcdTAxNkRcXFxcdTAxNkZcXFxcdTAxNzFcXFxcdTAxNzNcXFxcdTAxNzVcXFxcdTAxNzdcXFxcdTAxN0FcXFxcdTAxN0NcXFxcdTAxN0VcXFxcdTAxN0ZcXFxcdTAxODBcXFxcdTAxODNcXFxcdTAxODVcXFxcdTAxODhcXFxcdTAxOENcXFxcdTAxOERcXFxcdTAxOTJcXFxcdTAxOTVcXFxcdTAxOTlcXFxcdTAxOUFcXFxcdTAxOUJcXFxcdTAxOUVcXFxcdTAxQTFcXFxcdTAxQTNcXFxcdTAxQTVcXFxcdTAxQThcXFxcdTAxQUFcXFxcdTAxQUJcXFxcdTAxQURcXFxcdTAxQjBcXFxcdTAxQjRcXFxcdTAxQjZcXFxcdTAxQjlcXFxcdTAxQkFcXFxcdTAxQkRcXFxcdTAxQkVcXFxcdTAxQkZcXFxcdTAxQzZcXFxcdTAxQzlcXFxcdTAxQ0NcXFxcdTAxQ0VcXFxcdTAxRDBcXFxcdTAxRDJcXFxcdTAxRDRcXFxcdTAxRDZcXFxcdTAxRDhcXFxcdTAxREFcXFxcdTAxRENcXFxcdTAxRERcXFxcdTAxREZcXFxcdTAxRTFcXFxcdTAxRTNcXFxcdTAxRTVcXFxcdTAxRTdcXFxcdTAxRTlcXFxcdTAxRUJcXFxcdTAxRURcXFxcdTAxRUZcXFxcdTAxRjBcXFxcdTAxRjNcXFxcdTAxRjVcXFxcdTAxRjlcXFxcdTAxRkJcXFxcdTAxRkRcXFxcdTAxRkZcXFxcdTAyMDFcXFxcdTAyMDNcXFxcdTAyMDVcXFxcdTAyMDdcXFxcdTAyMDlcXFxcdTAyMEJcXFxcdTAyMERcXFxcdTAyMEZcXFxcdTAyMTFcXFxcdTAyMTNcXFxcdTAyMTVcXFxcdTAyMTdcXFxcdTAyMTlcXFxcdTAyMUJcXFxcdTAyMURcXFxcdTAyMUZcXFxcdTAyMjFcXFxcdTAyMjNcXFxcdTAyMjVcXFxcdTAyMjdcXFxcdTAyMjlcXFxcdTAyMkJcXFxcdTAyMkRcXFxcdTAyMkZcXFxcdTAyMzFcXFxcdTAyMzNcXFxcdTAyMzRcXFxcdTAyMzVcXFxcdTAyMzZcXFxcdTAyMzdcXFxcdTAyMzhcXFxcdTAyMzlcXFxcdTAyM0NcXFxcdTAyM0ZcXFxcdTAyNDBcXFxcdTAyNDJcXFxcdTAyNDdcXFxcdTAyNDlcXFxcdTAyNEJcXFxcdTAyNERcXFxcdTAyNEZcXFxcdTAyNTBcXFxcdTAyNTFcXFxcdTAyNTJcXFxcdTAyNTNcXFxcdTAyNTRcXFxcdTAyNTVcXFxcdTAyNTZcXFxcdTAyNTdcXFxcdTAyNThcXFxcdTAyNTlcXFxcdTAyNUFcXFxcdTAyNUJcXFxcdTAyNUNcXFxcdTAyNURcXFxcdTAyNUVcXFxcdTAyNUZcXFxcdTAyNjBcXFxcdTAyNjFcXFxcdTAyNjJcXFxcdTAyNjNcXFxcdTAyNjRcXFxcdTAyNjVcXFxcdTAyNjZcXFxcdTAyNjdcXFxcdTAyNjhcXFxcdTAyNjlcXFxcdTAyNkFcXFxcdTAyNkJcXFxcdTAyNkNcXFxcdTAyNkRcXFxcdTAyNkVcXFxcdTAyNkZcXFxcdTAyNzBcXFxcdTAyNzFcXFxcdTAyNzJcXFxcdTAyNzNcXFxcdTAyNzRcXFxcdTAyNzVcXFxcdTAyNzZcXFxcdTAyNzdcXFxcdTAyNzhcXFxcdTAyNzlcXFxcdTAyN0FcXFxcdTAyN0JcXFxcdTAyN0NcXFxcdTAyN0RcXFxcdTAyN0VcXFxcdTAyN0ZcXFxcdTAyODBcXFxcdTAyODFcXFxcdTAyODJcXFxcdTAyODNcXFxcdTAyODRcXFxcdTAyODVcXFxcdTAyODZcXFxcdTAyODdcXFxcdTAyODhcXFxcdTAyODlcXFxcdTAyOEFcXFxcdTAyOEJcXFxcdTAyOENcXFxcdTAyOERcXFxcdTAyOEVcXFxcdTAyOEZcXFxcdTAyOTBcXFxcdTAyOTFcXFxcdTAyOTJcXFxcdTAyOTNcXFxcdTAyOTVcXFxcdTAyOTZcXFxcdTAyOTdcXFxcdTAyOThcXFxcdTAyOTlcXFxcdTAyOUFcXFxcdTAyOUJcXFxcdTAyOUNcXFxcdTAyOURcXFxcdTAyOUVcXFxcdTAyOUZcXFxcdTAyQTBcXFxcdTAyQTFcXFxcdTAyQTJcXFxcdTAyQTNcXFxcdTAyQTRcXFxcdTAyQTVcXFxcdTAyQTZcXFxcdTAyQTdcXFxcdTAyQThcXFxcdTAyQTlcXFxcdTAyQUFcXFxcdTAyQUJcXFxcdTAyQUNcXFxcdTAyQURcXFxcdTAyQUVcXFxcdTAyQUZcXFxcdTAzNzFcXFxcdTAzNzNcXFxcdTAzNzdcXFxcdTAzN0JcXFxcdTAzN0NcXFxcdTAzN0RcXFxcdTAzOTBcXFxcdTAzQUNcXFxcdTAzQURcXFxcdTAzQUVcXFxcdTAzQUZcXFxcdTAzQjBcXFxcdTAzQjFcXFxcdTAzQjJcXFxcdTAzQjNcXFxcdTAzQjRcXFxcdTAzQjVcXFxcdTAzQjZcXFxcdTAzQjdcXFxcdTAzQjhcXFxcdTAzQjlcXFxcdTAzQkFcXFxcdTAzQkJcXFxcdTAzQkNcXFxcdTAzQkRcXFxcdTAzQkVcXFxcdTAzQkZcXFxcdTAzQzBcXFxcdTAzQzFcXFxcdTAzQzJcXFxcdTAzQzNcXFxcdTAzQzRcXFxcdTAzQzVcXFxcdTAzQzZcXFxcdTAzQzdcXFxcdTAzQzhcXFxcdTAzQzlcXFxcdTAzQ0FcXFxcdTAzQ0JcXFxcdTAzQ0NcXFxcdTAzQ0RcXFxcdTAzQ0VcXFxcdTAzRDBcXFxcdTAzRDFcXFxcdTAzRDVcXFxcdTAzRDZcXFxcdTAzRDdcXFxcdTAzRDlcXFxcdTAzREJcXFxcdTAzRERcXFxcdTAzREZcXFxcdTAzRTFcXFxcdTAzRTNcXFxcdTAzRTVcXFxcdTAzRTdcXFxcdTAzRTlcXFxcdTAzRUJcXFxcdTAzRURcXFxcdTAzRUZcXFxcdTAzRjBcXFxcdTAzRjFcXFxcdTAzRjJcXFxcdTAzRjNcXFxcdTAzRjVcXFxcdTAzRjhcXFxcdTAzRkJcXFxcdTAzRkNcXFxcdTA0MzBcXFxcdTA0MzFcXFxcdTA0MzJcXFxcdTA0MzNcXFxcdTA0MzRcXFxcdTA0MzVcXFxcdTA0MzZcXFxcdTA0MzdcXFxcdTA0MzhcXFxcdTA0MzlcXFxcdTA0M0FcXFxcdTA0M0JcXFxcdTA0M0NcXFxcdTA0M0RcXFxcdTA0M0VcXFxcdTA0M0ZcXFxcdTA0NDBcXFxcdTA0NDFcXFxcdTA0NDJcXFxcdTA0NDNcXFxcdTA0NDRcXFxcdTA0NDVcXFxcdTA0NDZcXFxcdTA0NDdcXFxcdTA0NDhcXFxcdTA0NDlcXFxcdTA0NEFcXFxcdTA0NEJcXFxcdTA0NENcXFxcdTA0NERcXFxcdTA0NEVcXFxcdTA0NEZcXFxcdTA0NTBcXFxcdTA0NTFcXFxcdTA0NTJcXFxcdTA0NTNcXFxcdTA0NTRcXFxcdTA0NTVcXFxcdTA0NTZcXFxcdTA0NTdcXFxcdTA0NThcXFxcdTA0NTlcXFxcdTA0NUFcXFxcdTA0NUJcXFxcdTA0NUNcXFxcdTA0NURcXFxcdTA0NUVcXFxcdTA0NUZcXFxcdTA0NjFcXFxcdTA0NjNcXFxcdTA0NjVcXFxcdTA0NjdcXFxcdTA0NjlcXFxcdTA0NkJcXFxcdTA0NkRcXFxcdTA0NkZcXFxcdTA0NzFcXFxcdTA0NzNcXFxcdTA0NzVcXFxcdTA0NzdcXFxcdTA0NzlcXFxcdTA0N0JcXFxcdTA0N0RcXFxcdTA0N0ZcXFxcdTA0ODFcXFxcdTA0OEJcXFxcdTA0OERcXFxcdTA0OEZcXFxcdTA0OTFcXFxcdTA0OTNcXFxcdTA0OTVcXFxcdTA0OTdcXFxcdTA0OTlcXFxcdTA0OUJcXFxcdTA0OURcXFxcdTA0OUZcXFxcdTA0QTFcXFxcdTA0QTNcXFxcdTA0QTVcXFxcdTA0QTdcXFxcdTA0QTlcXFxcdTA0QUJcXFxcdTA0QURcXFxcdTA0QUZcXFxcdTA0QjFcXFxcdTA0QjNcXFxcdTA0QjVcXFxcdTA0QjdcXFxcdTA0QjlcXFxcdTA0QkJcXFxcdTA0QkRcXFxcdTA0QkZcXFxcdTA0QzJcXFxcdTA0QzRcXFxcdTA0QzZcXFxcdTA0QzhcXFxcdTA0Q0FcXFxcdTA0Q0NcXFxcdTA0Q0VcXFxcdTA0Q0ZcXFxcdTA0RDFcXFxcdTA0RDNcXFxcdTA0RDVcXFxcdTA0RDdcXFxcdTA0RDlcXFxcdTA0REJcXFxcdTA0RERcXFxcdTA0REZcXFxcdTA0RTFcXFxcdTA0RTNcXFxcdTA0RTVcXFxcdTA0RTdcXFxcdTA0RTlcXFxcdTA0RUJcXFxcdTA0RURcXFxcdTA0RUZcXFxcdTA0RjFcXFxcdTA0RjNcXFxcdTA0RjVcXFxcdTA0RjdcXFxcdTA0RjlcXFxcdTA0RkJcXFxcdTA0RkRcXFxcdTA0RkZcXFxcdTA1MDFcXFxcdTA1MDNcXFxcdTA1MDVcXFxcdTA1MDdcXFxcdTA1MDlcXFxcdTA1MEJcXFxcdTA1MERcXFxcdTA1MEZcXFxcdTA1MTFcXFxcdTA1MTNcXFxcdTA1MTVcXFxcdTA1MTdcXFxcdTA1MTlcXFxcdTA1MUJcXFxcdTA1MURcXFxcdTA1MUZcXFxcdTA1MjFcXFxcdTA1MjNcXFxcdTA1NjFcXFxcdTA1NjJcXFxcdTA1NjNcXFxcdTA1NjRcXFxcdTA1NjVcXFxcdTA1NjZcXFxcdTA1NjdcXFxcdTA1NjhcXFxcdTA1NjlcXFxcdTA1NkFcXFxcdTA1NkJcXFxcdTA1NkNcXFxcdTA1NkRcXFxcdTA1NkVcXFxcdTA1NkZcXFxcdTA1NzBcXFxcdTA1NzFcXFxcdTA1NzJcXFxcdTA1NzNcXFxcdTA1NzRcXFxcdTA1NzVcXFxcdTA1NzZcXFxcdTA1NzdcXFxcdTA1NzhcXFxcdTA1NzlcXFxcdTA1N0FcXFxcdTA1N0JcXFxcdTA1N0NcXFxcdTA1N0RcXFxcdTA1N0VcXFxcdTA1N0ZcXFxcdTA1ODBcXFxcdTA1ODFcXFxcdTA1ODJcXFxcdTA1ODNcXFxcdTA1ODRcXFxcdTA1ODVcXFxcdTA1ODZcXFxcdTA1ODdcXFxcdTFEMDBcXFxcdTFEMDFcXFxcdTFEMDJcXFxcdTFEMDNcXFxcdTFEMDRcXFxcdTFEMDVcXFxcdTFEMDZcXFxcdTFEMDdcXFxcdTFEMDhcXFxcdTFEMDlcXFxcdTFEMEFcXFxcdTFEMEJcXFxcdTFEMENcXFxcdTFEMERcXFxcdTFEMEVcXFxcdTFEMEZcXFxcdTFEMTBcXFxcdTFEMTFcXFxcdTFEMTJcXFxcdTFEMTNcXFxcdTFEMTRcXFxcdTFEMTVcXFxcdTFEMTZcXFxcdTFEMTdcXFxcdTFEMThcXFxcdTFEMTlcXFxcdTFEMUFcXFxcdTFEMUJcXFxcdTFEMUNcXFxcdTFEMURcXFxcdTFEMUVcXFxcdTFEMUZcXFxcdTFEMjBcXFxcdTFEMjFcXFxcdTFEMjJcXFxcdTFEMjNcXFxcdTFEMjRcXFxcdTFEMjVcXFxcdTFEMjZcXFxcdTFEMjdcXFxcdTFEMjhcXFxcdTFEMjlcXFxcdTFEMkFcXFxcdTFEMkJcXFxcdTFENjJcXFxcdTFENjNcXFxcdTFENjRcXFxcdTFENjVcXFxcdTFENjZcXFxcdTFENjdcXFxcdTFENjhcXFxcdTFENjlcXFxcdTFENkFcXFxcdTFENkJcXFxcdTFENkNcXFxcdTFENkRcXFxcdTFENkVcXFxcdTFENkZcXFxcdTFENzBcXFxcdTFENzFcXFxcdTFENzJcXFxcdTFENzNcXFxcdTFENzRcXFxcdTFENzVcXFxcdTFENzZcXFxcdTFENzdcXFxcdTFENzlcXFxcdTFEN0FcXFxcdTFEN0JcXFxcdTFEN0NcXFxcdTFEN0RcXFxcdTFEN0VcXFxcdTFEN0ZcXFxcdTFEODBcXFxcdTFEODFcXFxcdTFEODJcXFxcdTFEODNcXFxcdTFEODRcXFxcdTFEODVcXFxcdTFEODZcXFxcdTFEODdcXFxcdTFEODhcXFxcdTFEODlcXFxcdTFEOEFcXFxcdTFEOEJcXFxcdTFEOENcXFxcdTFEOERcXFxcdTFEOEVcXFxcdTFEOEZcXFxcdTFEOTBcXFxcdTFEOTFcXFxcdTFEOTJcXFxcdTFEOTNcXFxcdTFEOTRcXFxcdTFEOTVcXFxcdTFEOTZcXFxcdTFEOTdcXFxcdTFEOThcXFxcdTFEOTlcXFxcdTFEOUFcXFxcdTFFMDFcXFxcdTFFMDNcXFxcdTFFMDVcXFxcdTFFMDdcXFxcdTFFMDlcXFxcdTFFMEJcXFxcdTFFMERcXFxcdTFFMEZcXFxcdTFFMTFcXFxcdTFFMTNcXFxcdTFFMTVcXFxcdTFFMTdcXFxcdTFFMTlcXFxcdTFFMUJcXFxcdTFFMURcXFxcdTFFMUZcXFxcdTFFMjFcXFxcdTFFMjNcXFxcdTFFMjVcXFxcdTFFMjdcXFxcdTFFMjlcXFxcdTFFMkJcXFxcdTFFMkRcXFxcdTFFMkZcXFxcdTFFMzFcXFxcdTFFMzNcXFxcdTFFMzVcXFxcdTFFMzdcXFxcdTFFMzlcXFxcdTFFM0JcXFxcdTFFM0RcXFxcdTFFM0ZcXFxcdTFFNDFcXFxcdTFFNDNcXFxcdTFFNDVcXFxcdTFFNDdcXFxcdTFFNDlcXFxcdTFFNEJcXFxcdTFFNERcXFxcdTFFNEZcXFxcdTFFNTFcXFxcdTFFNTNcXFxcdTFFNTVcXFxcdTFFNTdcXFxcdTFFNTlcXFxcdTFFNUJcXFxcdTFFNURcXFxcdTFFNUZcXFxcdTFFNjFcXFxcdTFFNjNcXFxcdTFFNjVcXFxcdTFFNjdcXFxcdTFFNjlcXFxcdTFFNkJcXFxcdTFFNkRcXFxcdTFFNkZcXFxcdTFFNzFcXFxcdTFFNzNcXFxcdTFFNzVcXFxcdTFFNzdcXFxcdTFFNzlcXFxcdTFFN0JcXFxcdTFFN0RcXFxcdTFFN0ZcXFxcdTFFODFcXFxcdTFFODNcXFxcdTFFODVcXFxcdTFFODdcXFxcdTFFODlcXFxcdTFFOEJcXFxcdTFFOERcXFxcdTFFOEZcXFxcdTFFOTFcXFxcdTFFOTNcXFxcdTFFOTVcXFxcdTFFOTZcXFxcdTFFOTdcXFxcdTFFOThcXFxcdTFFOTlcXFxcdTFFOUFcXFxcdTFFOUJcXFxcdTFFOUNcXFxcdTFFOURcXFxcdTFFOUZcXFxcdTFFQTFcXFxcdTFFQTNcXFxcdTFFQTVcXFxcdTFFQTdcXFxcdTFFQTlcXFxcdTFFQUJcXFxcdTFFQURcXFxcdTFFQUZcXFxcdTFFQjFcXFxcdTFFQjNcXFxcdTFFQjVcXFxcdTFFQjdcXFxcdTFFQjlcXFxcdTFFQkJcXFxcdTFFQkRcXFxcdTFFQkZcXFxcdTFFQzFcXFxcdTFFQzNcXFxcdTFFQzVcXFxcdTFFQzdcXFxcdTFFQzlcXFxcdTFFQ0JcXFxcdTFFQ0RcXFxcdTFFQ0ZcXFxcdTFFRDFcXFxcdTFFRDNcXFxcdTFFRDVcXFxcdTFFRDdcXFxcdTFFRDlcXFxcdTFFREJcXFxcdTFFRERcXFxcdTFFREZcXFxcdTFFRTFcXFxcdTFFRTNcXFxcdTFFRTVcXFxcdTFFRTdcXFxcdTFFRTlcXFxcdTFFRUJcXFxcdTFFRURcXFxcdTFFRUZcXFxcdTFFRjFcXFxcdTFFRjNcXFxcdTFFRjVcXFxcdTFFRjdcXFxcdTFFRjlcXFxcdTFFRkJcXFxcdTFFRkRcXFxcdTFFRkZcXFxcdTFGMDBcXFxcdTFGMDFcXFxcdTFGMDJcXFxcdTFGMDNcXFxcdTFGMDRcXFxcdTFGMDVcXFxcdTFGMDZcXFxcdTFGMDdcXFxcdTFGMTBcXFxcdTFGMTFcXFxcdTFGMTJcXFxcdTFGMTNcXFxcdTFGMTRcXFxcdTFGMTVcXFxcdTFGMjBcXFxcdTFGMjFcXFxcdTFGMjJcXFxcdTFGMjNcXFxcdTFGMjRcXFxcdTFGMjVcXFxcdTFGMjZcXFxcdTFGMjdcXFxcdTFGMzBcXFxcdTFGMzFcXFxcdTFGMzJcXFxcdTFGMzNcXFxcdTFGMzRcXFxcdTFGMzVcXFxcdTFGMzZcXFxcdTFGMzdcXFxcdTFGNDBcXFxcdTFGNDFcXFxcdTFGNDJcXFxcdTFGNDNcXFxcdTFGNDRcXFxcdTFGNDVcXFxcdTFGNTBcXFxcdTFGNTFcXFxcdTFGNTJcXFxcdTFGNTNcXFxcdTFGNTRcXFxcdTFGNTVcXFxcdTFGNTZcXFxcdTFGNTdcXFxcdTFGNjBcXFxcdTFGNjFcXFxcdTFGNjJcXFxcdTFGNjNcXFxcdTFGNjRcXFxcdTFGNjVcXFxcdTFGNjZcXFxcdTFGNjdcXFxcdTFGNzBcXFxcdTFGNzFcXFxcdTFGNzJcXFxcdTFGNzNcXFxcdTFGNzRcXFxcdTFGNzVcXFxcdTFGNzZcXFxcdTFGNzdcXFxcdTFGNzhcXFxcdTFGNzlcXFxcdTFGN0FcXFxcdTFGN0JcXFxcdTFGN0NcXFxcdTFGN0RcXFxcdTFGODBcXFxcdTFGODFcXFxcdTFGODJcXFxcdTFGODNcXFxcdTFGODRcXFxcdTFGODVcXFxcdTFGODZcXFxcdTFGODdcXFxcdTFGOTBcXFxcdTFGOTFcXFxcdTFGOTJcXFxcdTFGOTNcXFxcdTFGOTRcXFxcdTFGOTVcXFxcdTFGOTZcXFxcdTFGOTdcXFxcdTFGQTBcXFxcdTFGQTFcXFxcdTFGQTJcXFxcdTFGQTNcXFxcdTFGQTRcXFxcdTFGQTVcXFxcdTFGQTZcXFxcdTFGQTdcXFxcdTFGQjBcXFxcdTFGQjFcXFxcdTFGQjJcXFxcdTFGQjNcXFxcdTFGQjRcXFxcdTFGQjZcXFxcdTFGQjdcXFxcdTFGQkVcXFxcdTFGQzJcXFxcdTFGQzNcXFxcdTFGQzRcXFxcdTFGQzZcXFxcdTFGQzdcXFxcdTFGRDBcXFxcdTFGRDFcXFxcdTFGRDJcXFxcdTFGRDNcXFxcdTFGRDZcXFxcdTFGRDdcXFxcdTFGRTBcXFxcdTFGRTFcXFxcdTFGRTJcXFxcdTFGRTNcXFxcdTFGRTRcXFxcdTFGRTVcXFxcdTFGRTZcXFxcdTFGRTdcXFxcdTFGRjJcXFxcdTFGRjNcXFxcdTFGRjRcXFxcdTFGRjZcXFxcdTFGRjdcXFxcdTIwNzFcXFxcdTIwN0ZcXFxcdTIxMEFcXFxcdTIxMEVcXFxcdTIxMEZcXFxcdTIxMTNcXFxcdTIxMkZcXFxcdTIxMzRcXFxcdTIxMzlcXFxcdTIxM0NcXFxcdTIxM0RcXFxcdTIxNDZcXFxcdTIxNDdcXFxcdTIxNDhcXFxcdTIxNDlcXFxcdTIxNEVcXFxcdTIxODRcXFxcdTJDMzBcXFxcdTJDMzFcXFxcdTJDMzJcXFxcdTJDMzNcXFxcdTJDMzRcXFxcdTJDMzVcXFxcdTJDMzZcXFxcdTJDMzdcXFxcdTJDMzhcXFxcdTJDMzlcXFxcdTJDM0FcXFxcdTJDM0JcXFxcdTJDM0NcXFxcdTJDM0RcXFxcdTJDM0VcXFxcdTJDM0ZcXFxcdTJDNDBcXFxcdTJDNDFcXFxcdTJDNDJcXFxcdTJDNDNcXFxcdTJDNDRcXFxcdTJDNDVcXFxcdTJDNDZcXFxcdTJDNDdcXFxcdTJDNDhcXFxcdTJDNDlcXFxcdTJDNEFcXFxcdTJDNEJcXFxcdTJDNENcXFxcdTJDNERcXFxcdTJDNEVcXFxcdTJDNEZcXFxcdTJDNTBcXFxcdTJDNTFcXFxcdTJDNTJcXFxcdTJDNTNcXFxcdTJDNTRcXFxcdTJDNTVcXFxcdTJDNTZcXFxcdTJDNTdcXFxcdTJDNThcXFxcdTJDNTlcXFxcdTJDNUFcXFxcdTJDNUJcXFxcdTJDNUNcXFxcdTJDNURcXFxcdTJDNUVcXFxcdTJDNjFcXFxcdTJDNjVcXFxcdTJDNjZcXFxcdTJDNjhcXFxcdTJDNkFcXFxcdTJDNkNcXFxcdTJDNzFcXFxcdTJDNzNcXFxcdTJDNzRcXFxcdTJDNzZcXFxcdTJDNzdcXFxcdTJDNzhcXFxcdTJDNzlcXFxcdTJDN0FcXFxcdTJDN0JcXFxcdTJDN0NcXFxcdTJDODFcXFxcdTJDODNcXFxcdTJDODVcXFxcdTJDODdcXFxcdTJDODlcXFxcdTJDOEJcXFxcdTJDOERcXFxcdTJDOEZcXFxcdTJDOTFcXFxcdTJDOTNcXFxcdTJDOTVcXFxcdTJDOTdcXFxcdTJDOTlcXFxcdTJDOUJcXFxcdTJDOURcXFxcdTJDOUZcXFxcdTJDQTFcXFxcdTJDQTNcXFxcdTJDQTVcXFxcdTJDQTdcXFxcdTJDQTlcXFxcdTJDQUJcXFxcdTJDQURcXFxcdTJDQUZcXFxcdTJDQjFcXFxcdTJDQjNcXFxcdTJDQjVcXFxcdTJDQjdcXFxcdTJDQjlcXFxcdTJDQkJcXFxcdTJDQkRcXFxcdTJDQkZcXFxcdTJDQzFcXFxcdTJDQzNcXFxcdTJDQzVcXFxcdTJDQzdcXFxcdTJDQzlcXFxcdTJDQ0JcXFxcdTJDQ0RcXFxcdTJDQ0ZcXFxcdTJDRDFcXFxcdTJDRDNcXFxcdTJDRDVcXFxcdTJDRDdcXFxcdTJDRDlcXFxcdTJDREJcXFxcdTJDRERcXFxcdTJDREZcXFxcdTJDRTFcXFxcdTJDRTNcXFxcdTJDRTRcXFxcdTJEMDBcXFxcdTJEMDFcXFxcdTJEMDJcXFxcdTJEMDNcXFxcdTJEMDRcXFxcdTJEMDVcXFxcdTJEMDZcXFxcdTJEMDdcXFxcdTJEMDhcXFxcdTJEMDlcXFxcdTJEMEFcXFxcdTJEMEJcXFxcdTJEMENcXFxcdTJEMERcXFxcdTJEMEVcXFxcdTJEMEZcXFxcdTJEMTBcXFxcdTJEMTFcXFxcdTJEMTJcXFxcdTJEMTNcXFxcdTJEMTRcXFxcdTJEMTVcXFxcdTJEMTZcXFxcdTJEMTdcXFxcdTJEMThcXFxcdTJEMTlcXFxcdTJEMUFcXFxcdTJEMUJcXFxcdTJEMUNcXFxcdTJEMURcXFxcdTJEMUVcXFxcdTJEMUZcXFxcdTJEMjBcXFxcdTJEMjFcXFxcdTJEMjJcXFxcdTJEMjNcXFxcdTJEMjRcXFxcdTJEMjVcXFxcdUE2NDFcXFxcdUE2NDNcXFxcdUE2NDVcXFxcdUE2NDdcXFxcdUE2NDlcXFxcdUE2NEJcXFxcdUE2NERcXFxcdUE2NEZcXFxcdUE2NTFcXFxcdUE2NTNcXFxcdUE2NTVcXFxcdUE2NTdcXFxcdUE2NTlcXFxcdUE2NUJcXFxcdUE2NURcXFxcdUE2NUZcXFxcdUE2NjNcXFxcdUE2NjVcXFxcdUE2NjdcXFxcdUE2NjlcXFxcdUE2NkJcXFxcdUE2NkRcXFxcdUE2ODFcXFxcdUE2ODNcXFxcdUE2ODVcXFxcdUE2ODdcXFxcdUE2ODlcXFxcdUE2OEJcXFxcdUE2OERcXFxcdUE2OEZcXFxcdUE2OTFcXFxcdUE2OTNcXFxcdUE2OTVcXFxcdUE2OTdcXFxcdUE3MjNcXFxcdUE3MjVcXFxcdUE3MjdcXFxcdUE3MjlcXFxcdUE3MkJcXFxcdUE3MkRcXFxcdUE3MkZcXFxcdUE3MzBcXFxcdUE3MzFcXFxcdUE3MzNcXFxcdUE3MzVcXFxcdUE3MzdcXFxcdUE3MzlcXFxcdUE3M0JcXFxcdUE3M0RcXFxcdUE3M0ZcXFxcdUE3NDFcXFxcdUE3NDNcXFxcdUE3NDVcXFxcdUE3NDdcXFxcdUE3NDlcXFxcdUE3NEJcXFxcdUE3NERcXFxcdUE3NEZcXFxcdUE3NTFcXFxcdUE3NTNcXFxcdUE3NTVcXFxcdUE3NTdcXFxcdUE3NTlcXFxcdUE3NUJcXFxcdUE3NURcXFxcdUE3NUZcXFxcdUE3NjFcXFxcdUE3NjNcXFxcdUE3NjVcXFxcdUE3NjdcXFxcdUE3NjlcXFxcdUE3NkJcXFxcdUE3NkRcXFxcdUE3NkZcXFxcdUE3NzFcXFxcdUE3NzJcXFxcdUE3NzNcXFxcdUE3NzRcXFxcdUE3NzVcXFxcdUE3NzZcXFxcdUE3NzdcXFxcdUE3NzhcXFxcdUE3N0FcXFxcdUE3N0NcXFxcdUE3N0ZcXFxcdUE3ODFcXFxcdUE3ODNcXFxcdUE3ODVcXFxcdUE3ODdcXFxcdUE3OENcXFxcdUZCMDBcXFxcdUZCMDFcXFxcdUZCMDJcXFxcdUZCMDNcXFxcdUZCMDRcXFxcdUZCMDVcXFxcdUZCMDZcXFxcdUZCMTNcXFxcdUZCMTRcXFxcdUZCMTVcXFxcdUZCMTZcXFxcdUZCMTdcXFxcdUZGNDFcXFxcdUZGNDJcXFxcdUZGNDNcXFxcdUZGNDRcXFxcdUZGNDVcXFxcdUZGNDZcXFxcdUZGNDdcXFxcdUZGNDhcXFxcdUZGNDlcXFxcdUZGNEFcXFxcdUZGNEJcXFxcdUZGNENcXFxcdUZGNERcXFxcdUZGNEVcXFxcdUZGNEZcXFxcdUZGNTBcXFxcdUZGNTFcXFxcdUZGNTJcXFxcdUZGNTNcXFxcdUZGNTRcXFxcdUZGNTVcXFxcdUZGNTZcXFxcdUZGNTdcXFxcdUZGNThcXFxcdUZGNTlcXFxcdUZGNUFdXCIsIGRlc2NyaXB0aW9uOiBcIlthYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elxcXFx4QUFcXFxceEI1XFxcXHhCQVxcXFx4REZcXFxceEUwXFxcXHhFMVxcXFx4RTJcXFxceEUzXFxcXHhFNFxcXFx4RTVcXFxceEU2XFxcXHhFN1xcXFx4RThcXFxceEU5XFxcXHhFQVxcXFx4RUJcXFxceEVDXFxcXHhFRFxcXFx4RUVcXFxceEVGXFxcXHhGMFxcXFx4RjFcXFxceEYyXFxcXHhGM1xcXFx4RjRcXFxceEY1XFxcXHhGNlxcXFx4RjhcXFxceEY5XFxcXHhGQVxcXFx4RkJcXFxceEZDXFxcXHhGRFxcXFx4RkVcXFxceEZGXFxcXHUwMTAxXFxcXHUwMTAzXFxcXHUwMTA1XFxcXHUwMTA3XFxcXHUwMTA5XFxcXHUwMTBCXFxcXHUwMTBEXFxcXHUwMTBGXFxcXHUwMTExXFxcXHUwMTEzXFxcXHUwMTE1XFxcXHUwMTE3XFxcXHUwMTE5XFxcXHUwMTFCXFxcXHUwMTFEXFxcXHUwMTFGXFxcXHUwMTIxXFxcXHUwMTIzXFxcXHUwMTI1XFxcXHUwMTI3XFxcXHUwMTI5XFxcXHUwMTJCXFxcXHUwMTJEXFxcXHUwMTJGXFxcXHUwMTMxXFxcXHUwMTMzXFxcXHUwMTM1XFxcXHUwMTM3XFxcXHUwMTM4XFxcXHUwMTNBXFxcXHUwMTNDXFxcXHUwMTNFXFxcXHUwMTQwXFxcXHUwMTQyXFxcXHUwMTQ0XFxcXHUwMTQ2XFxcXHUwMTQ4XFxcXHUwMTQ5XFxcXHUwMTRCXFxcXHUwMTREXFxcXHUwMTRGXFxcXHUwMTUxXFxcXHUwMTUzXFxcXHUwMTU1XFxcXHUwMTU3XFxcXHUwMTU5XFxcXHUwMTVCXFxcXHUwMTVEXFxcXHUwMTVGXFxcXHUwMTYxXFxcXHUwMTYzXFxcXHUwMTY1XFxcXHUwMTY3XFxcXHUwMTY5XFxcXHUwMTZCXFxcXHUwMTZEXFxcXHUwMTZGXFxcXHUwMTcxXFxcXHUwMTczXFxcXHUwMTc1XFxcXHUwMTc3XFxcXHUwMTdBXFxcXHUwMTdDXFxcXHUwMTdFXFxcXHUwMTdGXFxcXHUwMTgwXFxcXHUwMTgzXFxcXHUwMTg1XFxcXHUwMTg4XFxcXHUwMThDXFxcXHUwMThEXFxcXHUwMTkyXFxcXHUwMTk1XFxcXHUwMTk5XFxcXHUwMTlBXFxcXHUwMTlCXFxcXHUwMTlFXFxcXHUwMUExXFxcXHUwMUEzXFxcXHUwMUE1XFxcXHUwMUE4XFxcXHUwMUFBXFxcXHUwMUFCXFxcXHUwMUFEXFxcXHUwMUIwXFxcXHUwMUI0XFxcXHUwMUI2XFxcXHUwMUI5XFxcXHUwMUJBXFxcXHUwMUJEXFxcXHUwMUJFXFxcXHUwMUJGXFxcXHUwMUM2XFxcXHUwMUM5XFxcXHUwMUNDXFxcXHUwMUNFXFxcXHUwMUQwXFxcXHUwMUQyXFxcXHUwMUQ0XFxcXHUwMUQ2XFxcXHUwMUQ4XFxcXHUwMURBXFxcXHUwMURDXFxcXHUwMUREXFxcXHUwMURGXFxcXHUwMUUxXFxcXHUwMUUzXFxcXHUwMUU1XFxcXHUwMUU3XFxcXHUwMUU5XFxcXHUwMUVCXFxcXHUwMUVEXFxcXHUwMUVGXFxcXHUwMUYwXFxcXHUwMUYzXFxcXHUwMUY1XFxcXHUwMUY5XFxcXHUwMUZCXFxcXHUwMUZEXFxcXHUwMUZGXFxcXHUwMjAxXFxcXHUwMjAzXFxcXHUwMjA1XFxcXHUwMjA3XFxcXHUwMjA5XFxcXHUwMjBCXFxcXHUwMjBEXFxcXHUwMjBGXFxcXHUwMjExXFxcXHUwMjEzXFxcXHUwMjE1XFxcXHUwMjE3XFxcXHUwMjE5XFxcXHUwMjFCXFxcXHUwMjFEXFxcXHUwMjFGXFxcXHUwMjIxXFxcXHUwMjIzXFxcXHUwMjI1XFxcXHUwMjI3XFxcXHUwMjI5XFxcXHUwMjJCXFxcXHUwMjJEXFxcXHUwMjJGXFxcXHUwMjMxXFxcXHUwMjMzXFxcXHUwMjM0XFxcXHUwMjM1XFxcXHUwMjM2XFxcXHUwMjM3XFxcXHUwMjM4XFxcXHUwMjM5XFxcXHUwMjNDXFxcXHUwMjNGXFxcXHUwMjQwXFxcXHUwMjQyXFxcXHUwMjQ3XFxcXHUwMjQ5XFxcXHUwMjRCXFxcXHUwMjREXFxcXHUwMjRGXFxcXHUwMjUwXFxcXHUwMjUxXFxcXHUwMjUyXFxcXHUwMjUzXFxcXHUwMjU0XFxcXHUwMjU1XFxcXHUwMjU2XFxcXHUwMjU3XFxcXHUwMjU4XFxcXHUwMjU5XFxcXHUwMjVBXFxcXHUwMjVCXFxcXHUwMjVDXFxcXHUwMjVEXFxcXHUwMjVFXFxcXHUwMjVGXFxcXHUwMjYwXFxcXHUwMjYxXFxcXHUwMjYyXFxcXHUwMjYzXFxcXHUwMjY0XFxcXHUwMjY1XFxcXHUwMjY2XFxcXHUwMjY3XFxcXHUwMjY4XFxcXHUwMjY5XFxcXHUwMjZBXFxcXHUwMjZCXFxcXHUwMjZDXFxcXHUwMjZEXFxcXHUwMjZFXFxcXHUwMjZGXFxcXHUwMjcwXFxcXHUwMjcxXFxcXHUwMjcyXFxcXHUwMjczXFxcXHUwMjc0XFxcXHUwMjc1XFxcXHUwMjc2XFxcXHUwMjc3XFxcXHUwMjc4XFxcXHUwMjc5XFxcXHUwMjdBXFxcXHUwMjdCXFxcXHUwMjdDXFxcXHUwMjdEXFxcXHUwMjdFXFxcXHUwMjdGXFxcXHUwMjgwXFxcXHUwMjgxXFxcXHUwMjgyXFxcXHUwMjgzXFxcXHUwMjg0XFxcXHUwMjg1XFxcXHUwMjg2XFxcXHUwMjg3XFxcXHUwMjg4XFxcXHUwMjg5XFxcXHUwMjhBXFxcXHUwMjhCXFxcXHUwMjhDXFxcXHUwMjhEXFxcXHUwMjhFXFxcXHUwMjhGXFxcXHUwMjkwXFxcXHUwMjkxXFxcXHUwMjkyXFxcXHUwMjkzXFxcXHUwMjk1XFxcXHUwMjk2XFxcXHUwMjk3XFxcXHUwMjk4XFxcXHUwMjk5XFxcXHUwMjlBXFxcXHUwMjlCXFxcXHUwMjlDXFxcXHUwMjlEXFxcXHUwMjlFXFxcXHUwMjlGXFxcXHUwMkEwXFxcXHUwMkExXFxcXHUwMkEyXFxcXHUwMkEzXFxcXHUwMkE0XFxcXHUwMkE1XFxcXHUwMkE2XFxcXHUwMkE3XFxcXHUwMkE4XFxcXHUwMkE5XFxcXHUwMkFBXFxcXHUwMkFCXFxcXHUwMkFDXFxcXHUwMkFEXFxcXHUwMkFFXFxcXHUwMkFGXFxcXHUwMzcxXFxcXHUwMzczXFxcXHUwMzc3XFxcXHUwMzdCXFxcXHUwMzdDXFxcXHUwMzdEXFxcXHUwMzkwXFxcXHUwM0FDXFxcXHUwM0FEXFxcXHUwM0FFXFxcXHUwM0FGXFxcXHUwM0IwXFxcXHUwM0IxXFxcXHUwM0IyXFxcXHUwM0IzXFxcXHUwM0I0XFxcXHUwM0I1XFxcXHUwM0I2XFxcXHUwM0I3XFxcXHUwM0I4XFxcXHUwM0I5XFxcXHUwM0JBXFxcXHUwM0JCXFxcXHUwM0JDXFxcXHUwM0JEXFxcXHUwM0JFXFxcXHUwM0JGXFxcXHUwM0MwXFxcXHUwM0MxXFxcXHUwM0MyXFxcXHUwM0MzXFxcXHUwM0M0XFxcXHUwM0M1XFxcXHUwM0M2XFxcXHUwM0M3XFxcXHUwM0M4XFxcXHUwM0M5XFxcXHUwM0NBXFxcXHUwM0NCXFxcXHUwM0NDXFxcXHUwM0NEXFxcXHUwM0NFXFxcXHUwM0QwXFxcXHUwM0QxXFxcXHUwM0Q1XFxcXHUwM0Q2XFxcXHUwM0Q3XFxcXHUwM0Q5XFxcXHUwM0RCXFxcXHUwM0REXFxcXHUwM0RGXFxcXHUwM0UxXFxcXHUwM0UzXFxcXHUwM0U1XFxcXHUwM0U3XFxcXHUwM0U5XFxcXHUwM0VCXFxcXHUwM0VEXFxcXHUwM0VGXFxcXHUwM0YwXFxcXHUwM0YxXFxcXHUwM0YyXFxcXHUwM0YzXFxcXHUwM0Y1XFxcXHUwM0Y4XFxcXHUwM0ZCXFxcXHUwM0ZDXFxcXHUwNDMwXFxcXHUwNDMxXFxcXHUwNDMyXFxcXHUwNDMzXFxcXHUwNDM0XFxcXHUwNDM1XFxcXHUwNDM2XFxcXHUwNDM3XFxcXHUwNDM4XFxcXHUwNDM5XFxcXHUwNDNBXFxcXHUwNDNCXFxcXHUwNDNDXFxcXHUwNDNEXFxcXHUwNDNFXFxcXHUwNDNGXFxcXHUwNDQwXFxcXHUwNDQxXFxcXHUwNDQyXFxcXHUwNDQzXFxcXHUwNDQ0XFxcXHUwNDQ1XFxcXHUwNDQ2XFxcXHUwNDQ3XFxcXHUwNDQ4XFxcXHUwNDQ5XFxcXHUwNDRBXFxcXHUwNDRCXFxcXHUwNDRDXFxcXHUwNDREXFxcXHUwNDRFXFxcXHUwNDRGXFxcXHUwNDUwXFxcXHUwNDUxXFxcXHUwNDUyXFxcXHUwNDUzXFxcXHUwNDU0XFxcXHUwNDU1XFxcXHUwNDU2XFxcXHUwNDU3XFxcXHUwNDU4XFxcXHUwNDU5XFxcXHUwNDVBXFxcXHUwNDVCXFxcXHUwNDVDXFxcXHUwNDVEXFxcXHUwNDVFXFxcXHUwNDVGXFxcXHUwNDYxXFxcXHUwNDYzXFxcXHUwNDY1XFxcXHUwNDY3XFxcXHUwNDY5XFxcXHUwNDZCXFxcXHUwNDZEXFxcXHUwNDZGXFxcXHUwNDcxXFxcXHUwNDczXFxcXHUwNDc1XFxcXHUwNDc3XFxcXHUwNDc5XFxcXHUwNDdCXFxcXHUwNDdEXFxcXHUwNDdGXFxcXHUwNDgxXFxcXHUwNDhCXFxcXHUwNDhEXFxcXHUwNDhGXFxcXHUwNDkxXFxcXHUwNDkzXFxcXHUwNDk1XFxcXHUwNDk3XFxcXHUwNDk5XFxcXHUwNDlCXFxcXHUwNDlEXFxcXHUwNDlGXFxcXHUwNEExXFxcXHUwNEEzXFxcXHUwNEE1XFxcXHUwNEE3XFxcXHUwNEE5XFxcXHUwNEFCXFxcXHUwNEFEXFxcXHUwNEFGXFxcXHUwNEIxXFxcXHUwNEIzXFxcXHUwNEI1XFxcXHUwNEI3XFxcXHUwNEI5XFxcXHUwNEJCXFxcXHUwNEJEXFxcXHUwNEJGXFxcXHUwNEMyXFxcXHUwNEM0XFxcXHUwNEM2XFxcXHUwNEM4XFxcXHUwNENBXFxcXHUwNENDXFxcXHUwNENFXFxcXHUwNENGXFxcXHUwNEQxXFxcXHUwNEQzXFxcXHUwNEQ1XFxcXHUwNEQ3XFxcXHUwNEQ5XFxcXHUwNERCXFxcXHUwNEREXFxcXHUwNERGXFxcXHUwNEUxXFxcXHUwNEUzXFxcXHUwNEU1XFxcXHUwNEU3XFxcXHUwNEU5XFxcXHUwNEVCXFxcXHUwNEVEXFxcXHUwNEVGXFxcXHUwNEYxXFxcXHUwNEYzXFxcXHUwNEY1XFxcXHUwNEY3XFxcXHUwNEY5XFxcXHUwNEZCXFxcXHUwNEZEXFxcXHUwNEZGXFxcXHUwNTAxXFxcXHUwNTAzXFxcXHUwNTA1XFxcXHUwNTA3XFxcXHUwNTA5XFxcXHUwNTBCXFxcXHUwNTBEXFxcXHUwNTBGXFxcXHUwNTExXFxcXHUwNTEzXFxcXHUwNTE1XFxcXHUwNTE3XFxcXHUwNTE5XFxcXHUwNTFCXFxcXHUwNTFEXFxcXHUwNTFGXFxcXHUwNTIxXFxcXHUwNTIzXFxcXHUwNTYxXFxcXHUwNTYyXFxcXHUwNTYzXFxcXHUwNTY0XFxcXHUwNTY1XFxcXHUwNTY2XFxcXHUwNTY3XFxcXHUwNTY4XFxcXHUwNTY5XFxcXHUwNTZBXFxcXHUwNTZCXFxcXHUwNTZDXFxcXHUwNTZEXFxcXHUwNTZFXFxcXHUwNTZGXFxcXHUwNTcwXFxcXHUwNTcxXFxcXHUwNTcyXFxcXHUwNTczXFxcXHUwNTc0XFxcXHUwNTc1XFxcXHUwNTc2XFxcXHUwNTc3XFxcXHUwNTc4XFxcXHUwNTc5XFxcXHUwNTdBXFxcXHUwNTdCXFxcXHUwNTdDXFxcXHUwNTdEXFxcXHUwNTdFXFxcXHUwNTdGXFxcXHUwNTgwXFxcXHUwNTgxXFxcXHUwNTgyXFxcXHUwNTgzXFxcXHUwNTg0XFxcXHUwNTg1XFxcXHUwNTg2XFxcXHUwNTg3XFxcXHUxRDAwXFxcXHUxRDAxXFxcXHUxRDAyXFxcXHUxRDAzXFxcXHUxRDA0XFxcXHUxRDA1XFxcXHUxRDA2XFxcXHUxRDA3XFxcXHUxRDA4XFxcXHUxRDA5XFxcXHUxRDBBXFxcXHUxRDBCXFxcXHUxRDBDXFxcXHUxRDBEXFxcXHUxRDBFXFxcXHUxRDBGXFxcXHUxRDEwXFxcXHUxRDExXFxcXHUxRDEyXFxcXHUxRDEzXFxcXHUxRDE0XFxcXHUxRDE1XFxcXHUxRDE2XFxcXHUxRDE3XFxcXHUxRDE4XFxcXHUxRDE5XFxcXHUxRDFBXFxcXHUxRDFCXFxcXHUxRDFDXFxcXHUxRDFEXFxcXHUxRDFFXFxcXHUxRDFGXFxcXHUxRDIwXFxcXHUxRDIxXFxcXHUxRDIyXFxcXHUxRDIzXFxcXHUxRDI0XFxcXHUxRDI1XFxcXHUxRDI2XFxcXHUxRDI3XFxcXHUxRDI4XFxcXHUxRDI5XFxcXHUxRDJBXFxcXHUxRDJCXFxcXHUxRDYyXFxcXHUxRDYzXFxcXHUxRDY0XFxcXHUxRDY1XFxcXHUxRDY2XFxcXHUxRDY3XFxcXHUxRDY4XFxcXHUxRDY5XFxcXHUxRDZBXFxcXHUxRDZCXFxcXHUxRDZDXFxcXHUxRDZEXFxcXHUxRDZFXFxcXHUxRDZGXFxcXHUxRDcwXFxcXHUxRDcxXFxcXHUxRDcyXFxcXHUxRDczXFxcXHUxRDc0XFxcXHUxRDc1XFxcXHUxRDc2XFxcXHUxRDc3XFxcXHUxRDc5XFxcXHUxRDdBXFxcXHUxRDdCXFxcXHUxRDdDXFxcXHUxRDdEXFxcXHUxRDdFXFxcXHUxRDdGXFxcXHUxRDgwXFxcXHUxRDgxXFxcXHUxRDgyXFxcXHUxRDgzXFxcXHUxRDg0XFxcXHUxRDg1XFxcXHUxRDg2XFxcXHUxRDg3XFxcXHUxRDg4XFxcXHUxRDg5XFxcXHUxRDhBXFxcXHUxRDhCXFxcXHUxRDhDXFxcXHUxRDhEXFxcXHUxRDhFXFxcXHUxRDhGXFxcXHUxRDkwXFxcXHUxRDkxXFxcXHUxRDkyXFxcXHUxRDkzXFxcXHUxRDk0XFxcXHUxRDk1XFxcXHUxRDk2XFxcXHUxRDk3XFxcXHUxRDk4XFxcXHUxRDk5XFxcXHUxRDlBXFxcXHUxRTAxXFxcXHUxRTAzXFxcXHUxRTA1XFxcXHUxRTA3XFxcXHUxRTA5XFxcXHUxRTBCXFxcXHUxRTBEXFxcXHUxRTBGXFxcXHUxRTExXFxcXHUxRTEzXFxcXHUxRTE1XFxcXHUxRTE3XFxcXHUxRTE5XFxcXHUxRTFCXFxcXHUxRTFEXFxcXHUxRTFGXFxcXHUxRTIxXFxcXHUxRTIzXFxcXHUxRTI1XFxcXHUxRTI3XFxcXHUxRTI5XFxcXHUxRTJCXFxcXHUxRTJEXFxcXHUxRTJGXFxcXHUxRTMxXFxcXHUxRTMzXFxcXHUxRTM1XFxcXHUxRTM3XFxcXHUxRTM5XFxcXHUxRTNCXFxcXHUxRTNEXFxcXHUxRTNGXFxcXHUxRTQxXFxcXHUxRTQzXFxcXHUxRTQ1XFxcXHUxRTQ3XFxcXHUxRTQ5XFxcXHUxRTRCXFxcXHUxRTREXFxcXHUxRTRGXFxcXHUxRTUxXFxcXHUxRTUzXFxcXHUxRTU1XFxcXHUxRTU3XFxcXHUxRTU5XFxcXHUxRTVCXFxcXHUxRTVEXFxcXHUxRTVGXFxcXHUxRTYxXFxcXHUxRTYzXFxcXHUxRTY1XFxcXHUxRTY3XFxcXHUxRTY5XFxcXHUxRTZCXFxcXHUxRTZEXFxcXHUxRTZGXFxcXHUxRTcxXFxcXHUxRTczXFxcXHUxRTc1XFxcXHUxRTc3XFxcXHUxRTc5XFxcXHUxRTdCXFxcXHUxRTdEXFxcXHUxRTdGXFxcXHUxRTgxXFxcXHUxRTgzXFxcXHUxRTg1XFxcXHUxRTg3XFxcXHUxRTg5XFxcXHUxRThCXFxcXHUxRThEXFxcXHUxRThGXFxcXHUxRTkxXFxcXHUxRTkzXFxcXHUxRTk1XFxcXHUxRTk2XFxcXHUxRTk3XFxcXHUxRTk4XFxcXHUxRTk5XFxcXHUxRTlBXFxcXHUxRTlCXFxcXHUxRTlDXFxcXHUxRTlEXFxcXHUxRTlGXFxcXHUxRUExXFxcXHUxRUEzXFxcXHUxRUE1XFxcXHUxRUE3XFxcXHUxRUE5XFxcXHUxRUFCXFxcXHUxRUFEXFxcXHUxRUFGXFxcXHUxRUIxXFxcXHUxRUIzXFxcXHUxRUI1XFxcXHUxRUI3XFxcXHUxRUI5XFxcXHUxRUJCXFxcXHUxRUJEXFxcXHUxRUJGXFxcXHUxRUMxXFxcXHUxRUMzXFxcXHUxRUM1XFxcXHUxRUM3XFxcXHUxRUM5XFxcXHUxRUNCXFxcXHUxRUNEXFxcXHUxRUNGXFxcXHUxRUQxXFxcXHUxRUQzXFxcXHUxRUQ1XFxcXHUxRUQ3XFxcXHUxRUQ5XFxcXHUxRURCXFxcXHUxRUREXFxcXHUxRURGXFxcXHUxRUUxXFxcXHUxRUUzXFxcXHUxRUU1XFxcXHUxRUU3XFxcXHUxRUU5XFxcXHUxRUVCXFxcXHUxRUVEXFxcXHUxRUVGXFxcXHUxRUYxXFxcXHUxRUYzXFxcXHUxRUY1XFxcXHUxRUY3XFxcXHUxRUY5XFxcXHUxRUZCXFxcXHUxRUZEXFxcXHUxRUZGXFxcXHUxRjAwXFxcXHUxRjAxXFxcXHUxRjAyXFxcXHUxRjAzXFxcXHUxRjA0XFxcXHUxRjA1XFxcXHUxRjA2XFxcXHUxRjA3XFxcXHUxRjEwXFxcXHUxRjExXFxcXHUxRjEyXFxcXHUxRjEzXFxcXHUxRjE0XFxcXHUxRjE1XFxcXHUxRjIwXFxcXHUxRjIxXFxcXHUxRjIyXFxcXHUxRjIzXFxcXHUxRjI0XFxcXHUxRjI1XFxcXHUxRjI2XFxcXHUxRjI3XFxcXHUxRjMwXFxcXHUxRjMxXFxcXHUxRjMyXFxcXHUxRjMzXFxcXHUxRjM0XFxcXHUxRjM1XFxcXHUxRjM2XFxcXHUxRjM3XFxcXHUxRjQwXFxcXHUxRjQxXFxcXHUxRjQyXFxcXHUxRjQzXFxcXHUxRjQ0XFxcXHUxRjQ1XFxcXHUxRjUwXFxcXHUxRjUxXFxcXHUxRjUyXFxcXHUxRjUzXFxcXHUxRjU0XFxcXHUxRjU1XFxcXHUxRjU2XFxcXHUxRjU3XFxcXHUxRjYwXFxcXHUxRjYxXFxcXHUxRjYyXFxcXHUxRjYzXFxcXHUxRjY0XFxcXHUxRjY1XFxcXHUxRjY2XFxcXHUxRjY3XFxcXHUxRjcwXFxcXHUxRjcxXFxcXHUxRjcyXFxcXHUxRjczXFxcXHUxRjc0XFxcXHUxRjc1XFxcXHUxRjc2XFxcXHUxRjc3XFxcXHUxRjc4XFxcXHUxRjc5XFxcXHUxRjdBXFxcXHUxRjdCXFxcXHUxRjdDXFxcXHUxRjdEXFxcXHUxRjgwXFxcXHUxRjgxXFxcXHUxRjgyXFxcXHUxRjgzXFxcXHUxRjg0XFxcXHUxRjg1XFxcXHUxRjg2XFxcXHUxRjg3XFxcXHUxRjkwXFxcXHUxRjkxXFxcXHUxRjkyXFxcXHUxRjkzXFxcXHUxRjk0XFxcXHUxRjk1XFxcXHUxRjk2XFxcXHUxRjk3XFxcXHUxRkEwXFxcXHUxRkExXFxcXHUxRkEyXFxcXHUxRkEzXFxcXHUxRkE0XFxcXHUxRkE1XFxcXHUxRkE2XFxcXHUxRkE3XFxcXHUxRkIwXFxcXHUxRkIxXFxcXHUxRkIyXFxcXHUxRkIzXFxcXHUxRkI0XFxcXHUxRkI2XFxcXHUxRkI3XFxcXHUxRkJFXFxcXHUxRkMyXFxcXHUxRkMzXFxcXHUxRkM0XFxcXHUxRkM2XFxcXHUxRkM3XFxcXHUxRkQwXFxcXHUxRkQxXFxcXHUxRkQyXFxcXHUxRkQzXFxcXHUxRkQ2XFxcXHUxRkQ3XFxcXHUxRkUwXFxcXHUxRkUxXFxcXHUxRkUyXFxcXHUxRkUzXFxcXHUxRkU0XFxcXHUxRkU1XFxcXHUxRkU2XFxcXHUxRkU3XFxcXHUxRkYyXFxcXHUxRkYzXFxcXHUxRkY0XFxcXHUxRkY2XFxcXHUxRkY3XFxcXHUyMDcxXFxcXHUyMDdGXFxcXHUyMTBBXFxcXHUyMTBFXFxcXHUyMTBGXFxcXHUyMTEzXFxcXHUyMTJGXFxcXHUyMTM0XFxcXHUyMTM5XFxcXHUyMTNDXFxcXHUyMTNEXFxcXHUyMTQ2XFxcXHUyMTQ3XFxcXHUyMTQ4XFxcXHUyMTQ5XFxcXHUyMTRFXFxcXHUyMTg0XFxcXHUyQzMwXFxcXHUyQzMxXFxcXHUyQzMyXFxcXHUyQzMzXFxcXHUyQzM0XFxcXHUyQzM1XFxcXHUyQzM2XFxcXHUyQzM3XFxcXHUyQzM4XFxcXHUyQzM5XFxcXHUyQzNBXFxcXHUyQzNCXFxcXHUyQzNDXFxcXHUyQzNEXFxcXHUyQzNFXFxcXHUyQzNGXFxcXHUyQzQwXFxcXHUyQzQxXFxcXHUyQzQyXFxcXHUyQzQzXFxcXHUyQzQ0XFxcXHUyQzQ1XFxcXHUyQzQ2XFxcXHUyQzQ3XFxcXHUyQzQ4XFxcXHUyQzQ5XFxcXHUyQzRBXFxcXHUyQzRCXFxcXHUyQzRDXFxcXHUyQzREXFxcXHUyQzRFXFxcXHUyQzRGXFxcXHUyQzUwXFxcXHUyQzUxXFxcXHUyQzUyXFxcXHUyQzUzXFxcXHUyQzU0XFxcXHUyQzU1XFxcXHUyQzU2XFxcXHUyQzU3XFxcXHUyQzU4XFxcXHUyQzU5XFxcXHUyQzVBXFxcXHUyQzVCXFxcXHUyQzVDXFxcXHUyQzVEXFxcXHUyQzVFXFxcXHUyQzYxXFxcXHUyQzY1XFxcXHUyQzY2XFxcXHUyQzY4XFxcXHUyQzZBXFxcXHUyQzZDXFxcXHUyQzcxXFxcXHUyQzczXFxcXHUyQzc0XFxcXHUyQzc2XFxcXHUyQzc3XFxcXHUyQzc4XFxcXHUyQzc5XFxcXHUyQzdBXFxcXHUyQzdCXFxcXHUyQzdDXFxcXHUyQzgxXFxcXHUyQzgzXFxcXHUyQzg1XFxcXHUyQzg3XFxcXHUyQzg5XFxcXHUyQzhCXFxcXHUyQzhEXFxcXHUyQzhGXFxcXHUyQzkxXFxcXHUyQzkzXFxcXHUyQzk1XFxcXHUyQzk3XFxcXHUyQzk5XFxcXHUyQzlCXFxcXHUyQzlEXFxcXHUyQzlGXFxcXHUyQ0ExXFxcXHUyQ0EzXFxcXHUyQ0E1XFxcXHUyQ0E3XFxcXHUyQ0E5XFxcXHUyQ0FCXFxcXHUyQ0FEXFxcXHUyQ0FGXFxcXHUyQ0IxXFxcXHUyQ0IzXFxcXHUyQ0I1XFxcXHUyQ0I3XFxcXHUyQ0I5XFxcXHUyQ0JCXFxcXHUyQ0JEXFxcXHUyQ0JGXFxcXHUyQ0MxXFxcXHUyQ0MzXFxcXHUyQ0M1XFxcXHUyQ0M3XFxcXHUyQ0M5XFxcXHUyQ0NCXFxcXHUyQ0NEXFxcXHUyQ0NGXFxcXHUyQ0QxXFxcXHUyQ0QzXFxcXHUyQ0Q1XFxcXHUyQ0Q3XFxcXHUyQ0Q5XFxcXHUyQ0RCXFxcXHUyQ0REXFxcXHUyQ0RGXFxcXHUyQ0UxXFxcXHUyQ0UzXFxcXHUyQ0U0XFxcXHUyRDAwXFxcXHUyRDAxXFxcXHUyRDAyXFxcXHUyRDAzXFxcXHUyRDA0XFxcXHUyRDA1XFxcXHUyRDA2XFxcXHUyRDA3XFxcXHUyRDA4XFxcXHUyRDA5XFxcXHUyRDBBXFxcXHUyRDBCXFxcXHUyRDBDXFxcXHUyRDBEXFxcXHUyRDBFXFxcXHUyRDBGXFxcXHUyRDEwXFxcXHUyRDExXFxcXHUyRDEyXFxcXHUyRDEzXFxcXHUyRDE0XFxcXHUyRDE1XFxcXHUyRDE2XFxcXHUyRDE3XFxcXHUyRDE4XFxcXHUyRDE5XFxcXHUyRDFBXFxcXHUyRDFCXFxcXHUyRDFDXFxcXHUyRDFEXFxcXHUyRDFFXFxcXHUyRDFGXFxcXHUyRDIwXFxcXHUyRDIxXFxcXHUyRDIyXFxcXHUyRDIzXFxcXHUyRDI0XFxcXHUyRDI1XFxcXHVBNjQxXFxcXHVBNjQzXFxcXHVBNjQ1XFxcXHVBNjQ3XFxcXHVBNjQ5XFxcXHVBNjRCXFxcXHVBNjREXFxcXHVBNjRGXFxcXHVBNjUxXFxcXHVBNjUzXFxcXHVBNjU1XFxcXHVBNjU3XFxcXHVBNjU5XFxcXHVBNjVCXFxcXHVBNjVEXFxcXHVBNjVGXFxcXHVBNjYzXFxcXHVBNjY1XFxcXHVBNjY3XFxcXHVBNjY5XFxcXHVBNjZCXFxcXHVBNjZEXFxcXHVBNjgxXFxcXHVBNjgzXFxcXHVBNjg1XFxcXHVBNjg3XFxcXHVBNjg5XFxcXHVBNjhCXFxcXHVBNjhEXFxcXHVBNjhGXFxcXHVBNjkxXFxcXHVBNjkzXFxcXHVBNjk1XFxcXHVBNjk3XFxcXHVBNzIzXFxcXHVBNzI1XFxcXHVBNzI3XFxcXHVBNzI5XFxcXHVBNzJCXFxcXHVBNzJEXFxcXHVBNzJGXFxcXHVBNzMwXFxcXHVBNzMxXFxcXHVBNzMzXFxcXHVBNzM1XFxcXHVBNzM3XFxcXHVBNzM5XFxcXHVBNzNCXFxcXHVBNzNEXFxcXHVBNzNGXFxcXHVBNzQxXFxcXHVBNzQzXFxcXHVBNzQ1XFxcXHVBNzQ3XFxcXHVBNzQ5XFxcXHVBNzRCXFxcXHVBNzREXFxcXHVBNzRGXFxcXHVBNzUxXFxcXHVBNzUzXFxcXHVBNzU1XFxcXHVBNzU3XFxcXHVBNzU5XFxcXHVBNzVCXFxcXHVBNzVEXFxcXHVBNzVGXFxcXHVBNzYxXFxcXHVBNzYzXFxcXHVBNzY1XFxcXHVBNzY3XFxcXHVBNzY5XFxcXHVBNzZCXFxcXHVBNzZEXFxcXHVBNzZGXFxcXHVBNzcxXFxcXHVBNzcyXFxcXHVBNzczXFxcXHVBNzc0XFxcXHVBNzc1XFxcXHVBNzc2XFxcXHVBNzc3XFxcXHVBNzc4XFxcXHVBNzdBXFxcXHVBNzdDXFxcXHVBNzdGXFxcXHVBNzgxXFxcXHVBNzgzXFxcXHVBNzg1XFxcXHVBNzg3XFxcXHVBNzhDXFxcXHVGQjAwXFxcXHVGQjAxXFxcXHVGQjAyXFxcXHVGQjAzXFxcXHVGQjA0XFxcXHVGQjA1XFxcXHVGQjA2XFxcXHVGQjEzXFxcXHVGQjE0XFxcXHVGQjE1XFxcXHVGQjE2XFxcXHVGQjE3XFxcXHVGRjQxXFxcXHVGRjQyXFxcXHVGRjQzXFxcXHVGRjQ0XFxcXHVGRjQ1XFxcXHVGRjQ2XFxcXHVGRjQ3XFxcXHVGRjQ4XFxcXHVGRjQ5XFxcXHVGRjRBXFxcXHVGRjRCXFxcXHVGRjRDXFxcXHVGRjREXFxcXHVGRjRFXFxcXHVGRjRGXFxcXHVGRjUwXFxcXHVGRjUxXFxcXHVGRjUyXFxcXHVGRjUzXFxcXHVGRjU0XFxcXHVGRjU1XFxcXHVGRjU2XFxcXHVGRjU3XFxcXHVGRjU4XFxcXHVGRjU5XFxcXHVGRjVBXVwiIH0sXG4gICAgICAgIHBlZyRjNzYgPSAvXltcXHUwMkIwXFx1MDJCMVxcdTAyQjJcXHUwMkIzXFx1MDJCNFxcdTAyQjVcXHUwMkI2XFx1MDJCN1xcdTAyQjhcXHUwMkI5XFx1MDJCQVxcdTAyQkJcXHUwMkJDXFx1MDJCRFxcdTAyQkVcXHUwMkJGXFx1MDJDMFxcdTAyQzFcXHUwMkM2XFx1MDJDN1xcdTAyQzhcXHUwMkM5XFx1MDJDQVxcdTAyQ0JcXHUwMkNDXFx1MDJDRFxcdTAyQ0VcXHUwMkNGXFx1MDJEMFxcdTAyRDFcXHUwMkUwXFx1MDJFMVxcdTAyRTJcXHUwMkUzXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3NFxcdTAzN0FcXHUwNTU5XFx1MDY0MFxcdTA2RTVcXHUwNkU2XFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDk3MVxcdTBFNDZcXHUwRUM2XFx1MTBGQ1xcdTE3RDdcXHUxODQzXFx1MUM3OFxcdTFDNzlcXHUxQzdBXFx1MUM3QlxcdTFDN0NcXHUxQzdEXFx1MUQyQ1xcdTFEMkRcXHUxRDJFXFx1MUQyRlxcdTFEMzBcXHUxRDMxXFx1MUQzMlxcdTFEMzNcXHUxRDM0XFx1MUQzNVxcdTFEMzZcXHUxRDM3XFx1MUQzOFxcdTFEMzlcXHUxRDNBXFx1MUQzQlxcdTFEM0NcXHUxRDNEXFx1MUQzRVxcdTFEM0ZcXHUxRDQwXFx1MUQ0MVxcdTFENDJcXHUxRDQzXFx1MUQ0NFxcdTFENDVcXHUxRDQ2XFx1MUQ0N1xcdTFENDhcXHUxRDQ5XFx1MUQ0QVxcdTFENEJcXHUxRDRDXFx1MUQ0RFxcdTFENEVcXHUxRDRGXFx1MUQ1MFxcdTFENTFcXHUxRDUyXFx1MUQ1M1xcdTFENTRcXHUxRDU1XFx1MUQ1NlxcdTFENTdcXHUxRDU4XFx1MUQ1OVxcdTFENUFcXHUxRDVCXFx1MUQ1Q1xcdTFENURcXHUxRDVFXFx1MUQ1RlxcdTFENjBcXHUxRDYxXFx1MUQ3OFxcdTFEOUJcXHUxRDlDXFx1MUQ5RFxcdTFEOUVcXHUxRDlGXFx1MURBMFxcdTFEQTFcXHUxREEyXFx1MURBM1xcdTFEQTRcXHUxREE1XFx1MURBNlxcdTFEQTdcXHUxREE4XFx1MURBOVxcdTFEQUFcXHUxREFCXFx1MURBQ1xcdTFEQURcXHUxREFFXFx1MURBRlxcdTFEQjBcXHUxREIxXFx1MURCMlxcdTFEQjNcXHUxREI0XFx1MURCNVxcdTFEQjZcXHUxREI3XFx1MURCOFxcdTFEQjlcXHUxREJBXFx1MURCQlxcdTFEQkNcXHUxREJEXFx1MURCRVxcdTFEQkZcXHUyMDkwXFx1MjA5MVxcdTIwOTJcXHUyMDkzXFx1MjA5NFxcdTJDN0RcXHUyRDZGXFx1MkUyRlxcdTMwMDVcXHUzMDMxXFx1MzAzMlxcdTMwMzNcXHUzMDM0XFx1MzAzNVxcdTMwM0JcXHUzMDlEXFx1MzA5RVxcdTMwRkNcXHUzMEZEXFx1MzBGRVxcdUEwMTVcXHVBNjBDXFx1QTY3RlxcdUE3MTdcXHVBNzE4XFx1QTcxOVxcdUE3MUFcXHVBNzFCXFx1QTcxQ1xcdUE3MURcXHVBNzFFXFx1QTcxRlxcdUE3NzBcXHVBNzg4XFx1RkY3MFxcdUZGOUVcXHVGRjlGXS8sXG4gICAgICAgIHBlZyRjNzcgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW1xcXFx1MDJCMFxcXFx1MDJCMVxcXFx1MDJCMlxcXFx1MDJCM1xcXFx1MDJCNFxcXFx1MDJCNVxcXFx1MDJCNlxcXFx1MDJCN1xcXFx1MDJCOFxcXFx1MDJCOVxcXFx1MDJCQVxcXFx1MDJCQlxcXFx1MDJCQ1xcXFx1MDJCRFxcXFx1MDJCRVxcXFx1MDJCRlxcXFx1MDJDMFxcXFx1MDJDMVxcXFx1MDJDNlxcXFx1MDJDN1xcXFx1MDJDOFxcXFx1MDJDOVxcXFx1MDJDQVxcXFx1MDJDQlxcXFx1MDJDQ1xcXFx1MDJDRFxcXFx1MDJDRVxcXFx1MDJDRlxcXFx1MDJEMFxcXFx1MDJEMVxcXFx1MDJFMFxcXFx1MDJFMVxcXFx1MDJFMlxcXFx1MDJFM1xcXFx1MDJFNFxcXFx1MDJFQ1xcXFx1MDJFRVxcXFx1MDM3NFxcXFx1MDM3QVxcXFx1MDU1OVxcXFx1MDY0MFxcXFx1MDZFNVxcXFx1MDZFNlxcXFx1MDdGNFxcXFx1MDdGNVxcXFx1MDdGQVxcXFx1MDk3MVxcXFx1MEU0NlxcXFx1MEVDNlxcXFx1MTBGQ1xcXFx1MTdEN1xcXFx1MTg0M1xcXFx1MUM3OFxcXFx1MUM3OVxcXFx1MUM3QVxcXFx1MUM3QlxcXFx1MUM3Q1xcXFx1MUM3RFxcXFx1MUQyQ1xcXFx1MUQyRFxcXFx1MUQyRVxcXFx1MUQyRlxcXFx1MUQzMFxcXFx1MUQzMVxcXFx1MUQzMlxcXFx1MUQzM1xcXFx1MUQzNFxcXFx1MUQzNVxcXFx1MUQzNlxcXFx1MUQzN1xcXFx1MUQzOFxcXFx1MUQzOVxcXFx1MUQzQVxcXFx1MUQzQlxcXFx1MUQzQ1xcXFx1MUQzRFxcXFx1MUQzRVxcXFx1MUQzRlxcXFx1MUQ0MFxcXFx1MUQ0MVxcXFx1MUQ0MlxcXFx1MUQ0M1xcXFx1MUQ0NFxcXFx1MUQ0NVxcXFx1MUQ0NlxcXFx1MUQ0N1xcXFx1MUQ0OFxcXFx1MUQ0OVxcXFx1MUQ0QVxcXFx1MUQ0QlxcXFx1MUQ0Q1xcXFx1MUQ0RFxcXFx1MUQ0RVxcXFx1MUQ0RlxcXFx1MUQ1MFxcXFx1MUQ1MVxcXFx1MUQ1MlxcXFx1MUQ1M1xcXFx1MUQ1NFxcXFx1MUQ1NVxcXFx1MUQ1NlxcXFx1MUQ1N1xcXFx1MUQ1OFxcXFx1MUQ1OVxcXFx1MUQ1QVxcXFx1MUQ1QlxcXFx1MUQ1Q1xcXFx1MUQ1RFxcXFx1MUQ1RVxcXFx1MUQ1RlxcXFx1MUQ2MFxcXFx1MUQ2MVxcXFx1MUQ3OFxcXFx1MUQ5QlxcXFx1MUQ5Q1xcXFx1MUQ5RFxcXFx1MUQ5RVxcXFx1MUQ5RlxcXFx1MURBMFxcXFx1MURBMVxcXFx1MURBMlxcXFx1MURBM1xcXFx1MURBNFxcXFx1MURBNVxcXFx1MURBNlxcXFx1MURBN1xcXFx1MURBOFxcXFx1MURBOVxcXFx1MURBQVxcXFx1MURBQlxcXFx1MURBQ1xcXFx1MURBRFxcXFx1MURBRVxcXFx1MURBRlxcXFx1MURCMFxcXFx1MURCMVxcXFx1MURCMlxcXFx1MURCM1xcXFx1MURCNFxcXFx1MURCNVxcXFx1MURCNlxcXFx1MURCN1xcXFx1MURCOFxcXFx1MURCOVxcXFx1MURCQVxcXFx1MURCQlxcXFx1MURCQ1xcXFx1MURCRFxcXFx1MURCRVxcXFx1MURCRlxcXFx1MjA5MFxcXFx1MjA5MVxcXFx1MjA5MlxcXFx1MjA5M1xcXFx1MjA5NFxcXFx1MkM3RFxcXFx1MkQ2RlxcXFx1MkUyRlxcXFx1MzAwNVxcXFx1MzAzMVxcXFx1MzAzMlxcXFx1MzAzM1xcXFx1MzAzNFxcXFx1MzAzNVxcXFx1MzAzQlxcXFx1MzA5RFxcXFx1MzA5RVxcXFx1MzBGQ1xcXFx1MzBGRFxcXFx1MzBGRVxcXFx1QTAxNVxcXFx1QTYwQ1xcXFx1QTY3RlxcXFx1QTcxN1xcXFx1QTcxOFxcXFx1QTcxOVxcXFx1QTcxQVxcXFx1QTcxQlxcXFx1QTcxQ1xcXFx1QTcxRFxcXFx1QTcxRVxcXFx1QTcxRlxcXFx1QTc3MFxcXFx1QTc4OFxcXFx1RkY3MFxcXFx1RkY5RVxcXFx1RkY5Rl1cIiwgZGVzY3JpcHRpb246IFwiW1xcXFx1MDJCMFxcXFx1MDJCMVxcXFx1MDJCMlxcXFx1MDJCM1xcXFx1MDJCNFxcXFx1MDJCNVxcXFx1MDJCNlxcXFx1MDJCN1xcXFx1MDJCOFxcXFx1MDJCOVxcXFx1MDJCQVxcXFx1MDJCQlxcXFx1MDJCQ1xcXFx1MDJCRFxcXFx1MDJCRVxcXFx1MDJCRlxcXFx1MDJDMFxcXFx1MDJDMVxcXFx1MDJDNlxcXFx1MDJDN1xcXFx1MDJDOFxcXFx1MDJDOVxcXFx1MDJDQVxcXFx1MDJDQlxcXFx1MDJDQ1xcXFx1MDJDRFxcXFx1MDJDRVxcXFx1MDJDRlxcXFx1MDJEMFxcXFx1MDJEMVxcXFx1MDJFMFxcXFx1MDJFMVxcXFx1MDJFMlxcXFx1MDJFM1xcXFx1MDJFNFxcXFx1MDJFQ1xcXFx1MDJFRVxcXFx1MDM3NFxcXFx1MDM3QVxcXFx1MDU1OVxcXFx1MDY0MFxcXFx1MDZFNVxcXFx1MDZFNlxcXFx1MDdGNFxcXFx1MDdGNVxcXFx1MDdGQVxcXFx1MDk3MVxcXFx1MEU0NlxcXFx1MEVDNlxcXFx1MTBGQ1xcXFx1MTdEN1xcXFx1MTg0M1xcXFx1MUM3OFxcXFx1MUM3OVxcXFx1MUM3QVxcXFx1MUM3QlxcXFx1MUM3Q1xcXFx1MUM3RFxcXFx1MUQyQ1xcXFx1MUQyRFxcXFx1MUQyRVxcXFx1MUQyRlxcXFx1MUQzMFxcXFx1MUQzMVxcXFx1MUQzMlxcXFx1MUQzM1xcXFx1MUQzNFxcXFx1MUQzNVxcXFx1MUQzNlxcXFx1MUQzN1xcXFx1MUQzOFxcXFx1MUQzOVxcXFx1MUQzQVxcXFx1MUQzQlxcXFx1MUQzQ1xcXFx1MUQzRFxcXFx1MUQzRVxcXFx1MUQzRlxcXFx1MUQ0MFxcXFx1MUQ0MVxcXFx1MUQ0MlxcXFx1MUQ0M1xcXFx1MUQ0NFxcXFx1MUQ0NVxcXFx1MUQ0NlxcXFx1MUQ0N1xcXFx1MUQ0OFxcXFx1MUQ0OVxcXFx1MUQ0QVxcXFx1MUQ0QlxcXFx1MUQ0Q1xcXFx1MUQ0RFxcXFx1MUQ0RVxcXFx1MUQ0RlxcXFx1MUQ1MFxcXFx1MUQ1MVxcXFx1MUQ1MlxcXFx1MUQ1M1xcXFx1MUQ1NFxcXFx1MUQ1NVxcXFx1MUQ1NlxcXFx1MUQ1N1xcXFx1MUQ1OFxcXFx1MUQ1OVxcXFx1MUQ1QVxcXFx1MUQ1QlxcXFx1MUQ1Q1xcXFx1MUQ1RFxcXFx1MUQ1RVxcXFx1MUQ1RlxcXFx1MUQ2MFxcXFx1MUQ2MVxcXFx1MUQ3OFxcXFx1MUQ5QlxcXFx1MUQ5Q1xcXFx1MUQ5RFxcXFx1MUQ5RVxcXFx1MUQ5RlxcXFx1MURBMFxcXFx1MURBMVxcXFx1MURBMlxcXFx1MURBM1xcXFx1MURBNFxcXFx1MURBNVxcXFx1MURBNlxcXFx1MURBN1xcXFx1MURBOFxcXFx1MURBOVxcXFx1MURBQVxcXFx1MURBQlxcXFx1MURBQ1xcXFx1MURBRFxcXFx1MURBRVxcXFx1MURBRlxcXFx1MURCMFxcXFx1MURCMVxcXFx1MURCMlxcXFx1MURCM1xcXFx1MURCNFxcXFx1MURCNVxcXFx1MURCNlxcXFx1MURCN1xcXFx1MURCOFxcXFx1MURCOVxcXFx1MURCQVxcXFx1MURCQlxcXFx1MURCQ1xcXFx1MURCRFxcXFx1MURCRVxcXFx1MURCRlxcXFx1MjA5MFxcXFx1MjA5MVxcXFx1MjA5MlxcXFx1MjA5M1xcXFx1MjA5NFxcXFx1MkM3RFxcXFx1MkQ2RlxcXFx1MkUyRlxcXFx1MzAwNVxcXFx1MzAzMVxcXFx1MzAzMlxcXFx1MzAzM1xcXFx1MzAzNFxcXFx1MzAzNVxcXFx1MzAzQlxcXFx1MzA5RFxcXFx1MzA5RVxcXFx1MzBGQ1xcXFx1MzBGRFxcXFx1MzBGRVxcXFx1QTAxNVxcXFx1QTYwQ1xcXFx1QTY3RlxcXFx1QTcxN1xcXFx1QTcxOFxcXFx1QTcxOVxcXFx1QTcxQVxcXFx1QTcxQlxcXFx1QTcxQ1xcXFx1QTcxRFxcXFx1QTcxRVxcXFx1QTcxRlxcXFx1QTc3MFxcXFx1QTc4OFxcXFx1RkY3MFxcXFx1RkY5RVxcXFx1RkY5Rl1cIiB9LFxuICAgICAgICBwZWckYzc4ID0gL15bXFx1MDFCQlxcdTAxQzBcXHUwMUMxXFx1MDFDMlxcdTAxQzNcXHUwMjk0XFx1MDVEMFxcdTA1RDFcXHUwNUQyXFx1MDVEM1xcdTA1RDRcXHUwNUQ1XFx1MDVENlxcdTA1RDdcXHUwNUQ4XFx1MDVEOVxcdTA1REFcXHUwNURCXFx1MDVEQ1xcdTA1RERcXHUwNURFXFx1MDVERlxcdTA1RTBcXHUwNUUxXFx1MDVFMlxcdTA1RTNcXHUwNUU0XFx1MDVFNVxcdTA1RTZcXHUwNUU3XFx1MDVFOFxcdTA1RTlcXHUwNUVBXFx1MDVGMFxcdTA1RjFcXHUwNUYyXFx1MDYyMVxcdTA2MjJcXHUwNjIzXFx1MDYyNFxcdTA2MjVcXHUwNjI2XFx1MDYyN1xcdTA2MjhcXHUwNjI5XFx1MDYyQVxcdTA2MkJcXHUwNjJDXFx1MDYyRFxcdTA2MkVcXHUwNjJGXFx1MDYzMFxcdTA2MzFcXHUwNjMyXFx1MDYzM1xcdTA2MzRcXHUwNjM1XFx1MDYzNlxcdTA2MzdcXHUwNjM4XFx1MDYzOVxcdTA2M0FcXHUwNjNCXFx1MDYzQ1xcdTA2M0RcXHUwNjNFXFx1MDYzRlxcdTA2NDFcXHUwNjQyXFx1MDY0M1xcdTA2NDRcXHUwNjQ1XFx1MDY0NlxcdTA2NDdcXHUwNjQ4XFx1MDY0OVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzFcXHUwNjcyXFx1MDY3M1xcdTA2NzRcXHUwNjc1XFx1MDY3NlxcdTA2NzdcXHUwNjc4XFx1MDY3OVxcdTA2N0FcXHUwNjdCXFx1MDY3Q1xcdTA2N0RcXHUwNjdFXFx1MDY3RlxcdTA2ODBcXHUwNjgxXFx1MDY4MlxcdTA2ODNcXHUwNjg0XFx1MDY4NVxcdTA2ODZcXHUwNjg3XFx1MDY4OFxcdTA2ODlcXHUwNjhBXFx1MDY4QlxcdTA2OENcXHUwNjhEXFx1MDY4RVxcdTA2OEZcXHUwNjkwXFx1MDY5MVxcdTA2OTJcXHUwNjkzXFx1MDY5NFxcdTA2OTVcXHUwNjk2XFx1MDY5N1xcdTA2OThcXHUwNjk5XFx1MDY5QVxcdTA2OUJcXHUwNjlDXFx1MDY5RFxcdTA2OUVcXHUwNjlGXFx1MDZBMFxcdTA2QTFcXHUwNkEyXFx1MDZBM1xcdTA2QTRcXHUwNkE1XFx1MDZBNlxcdTA2QTdcXHUwNkE4XFx1MDZBOVxcdTA2QUFcXHUwNkFCXFx1MDZBQ1xcdTA2QURcXHUwNkFFXFx1MDZBRlxcdTA2QjBcXHUwNkIxXFx1MDZCMlxcdTA2QjNcXHUwNkI0XFx1MDZCNVxcdTA2QjZcXHUwNkI3XFx1MDZCOFxcdTA2QjlcXHUwNkJBXFx1MDZCQlxcdTA2QkNcXHUwNkJEXFx1MDZCRVxcdTA2QkZcXHUwNkMwXFx1MDZDMVxcdTA2QzJcXHUwNkMzXFx1MDZDNFxcdTA2QzVcXHUwNkM2XFx1MDZDN1xcdTA2QzhcXHUwNkM5XFx1MDZDQVxcdTA2Q0JcXHUwNkNDXFx1MDZDRFxcdTA2Q0VcXHUwNkNGXFx1MDZEMFxcdTA2RDFcXHUwNkQyXFx1MDZEM1xcdTA2RDVcXHUwNkVFXFx1MDZFRlxcdTA2RkFcXHUwNkZCXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMlxcdTA3MTNcXHUwNzE0XFx1MDcxNVxcdTA3MTZcXHUwNzE3XFx1MDcxOFxcdTA3MTlcXHUwNzFBXFx1MDcxQlxcdTA3MUNcXHUwNzFEXFx1MDcxRVxcdTA3MUZcXHUwNzIwXFx1MDcyMVxcdTA3MjJcXHUwNzIzXFx1MDcyNFxcdTA3MjVcXHUwNzI2XFx1MDcyN1xcdTA3MjhcXHUwNzI5XFx1MDcyQVxcdTA3MkJcXHUwNzJDXFx1MDcyRFxcdTA3MkVcXHUwNzJGXFx1MDc0RFxcdTA3NEVcXHUwNzRGXFx1MDc1MFxcdTA3NTFcXHUwNzUyXFx1MDc1M1xcdTA3NTRcXHUwNzU1XFx1MDc1NlxcdTA3NTdcXHUwNzU4XFx1MDc1OVxcdTA3NUFcXHUwNzVCXFx1MDc1Q1xcdTA3NURcXHUwNzVFXFx1MDc1RlxcdTA3NjBcXHUwNzYxXFx1MDc2MlxcdTA3NjNcXHUwNzY0XFx1MDc2NVxcdTA3NjZcXHUwNzY3XFx1MDc2OFxcdTA3NjlcXHUwNzZBXFx1MDc2QlxcdTA3NkNcXHUwNzZEXFx1MDc2RVxcdTA3NkZcXHUwNzcwXFx1MDc3MVxcdTA3NzJcXHUwNzczXFx1MDc3NFxcdTA3NzVcXHUwNzc2XFx1MDc3N1xcdTA3NzhcXHUwNzc5XFx1MDc3QVxcdTA3N0JcXHUwNzdDXFx1MDc3RFxcdTA3N0VcXHUwNzdGXFx1MDc4MFxcdTA3ODFcXHUwNzgyXFx1MDc4M1xcdTA3ODRcXHUwNzg1XFx1MDc4NlxcdTA3ODdcXHUwNzg4XFx1MDc4OVxcdTA3OEFcXHUwNzhCXFx1MDc4Q1xcdTA3OERcXHUwNzhFXFx1MDc4RlxcdTA3OTBcXHUwNzkxXFx1MDc5MlxcdTA3OTNcXHUwNzk0XFx1MDc5NVxcdTA3OTZcXHUwNzk3XFx1MDc5OFxcdTA3OTlcXHUwNzlBXFx1MDc5QlxcdTA3OUNcXHUwNzlEXFx1MDc5RVxcdTA3OUZcXHUwN0EwXFx1MDdBMVxcdTA3QTJcXHUwN0EzXFx1MDdBNFxcdTA3QTVcXHUwN0IxXFx1MDdDQVxcdTA3Q0JcXHUwN0NDXFx1MDdDRFxcdTA3Q0VcXHUwN0NGXFx1MDdEMFxcdTA3RDFcXHUwN0QyXFx1MDdEM1xcdTA3RDRcXHUwN0Q1XFx1MDdENlxcdTA3RDdcXHUwN0Q4XFx1MDdEOVxcdTA3REFcXHUwN0RCXFx1MDdEQ1xcdTA3RERcXHUwN0RFXFx1MDdERlxcdTA3RTBcXHUwN0UxXFx1MDdFMlxcdTA3RTNcXHUwN0U0XFx1MDdFNVxcdTA3RTZcXHUwN0U3XFx1MDdFOFxcdTA3RTlcXHUwN0VBXFx1MDkwNFxcdTA5MDVcXHUwOTA2XFx1MDkwN1xcdTA5MDhcXHUwOTA5XFx1MDkwQVxcdTA5MEJcXHUwOTBDXFx1MDkwRFxcdTA5MEVcXHUwOTBGXFx1MDkxMFxcdTA5MTFcXHUwOTEyXFx1MDkxM1xcdTA5MTRcXHUwOTE1XFx1MDkxNlxcdTA5MTdcXHUwOTE4XFx1MDkxOVxcdTA5MUFcXHUwOTFCXFx1MDkxQ1xcdTA5MURcXHUwOTFFXFx1MDkxRlxcdTA5MjBcXHUwOTIxXFx1MDkyMlxcdTA5MjNcXHUwOTI0XFx1MDkyNVxcdTA5MjZcXHUwOTI3XFx1MDkyOFxcdTA5MjlcXHUwOTJBXFx1MDkyQlxcdTA5MkNcXHUwOTJEXFx1MDkyRVxcdTA5MkZcXHUwOTMwXFx1MDkzMVxcdTA5MzJcXHUwOTMzXFx1MDkzNFxcdTA5MzVcXHUwOTM2XFx1MDkzN1xcdTA5MzhcXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4XFx1MDk1OVxcdTA5NUFcXHUwOTVCXFx1MDk1Q1xcdTA5NURcXHUwOTVFXFx1MDk1RlxcdTA5NjBcXHUwOTYxXFx1MDk3MlxcdTA5N0JcXHUwOTdDXFx1MDk3RFxcdTA5N0VcXHUwOTdGXFx1MDk4NVxcdTA5ODZcXHUwOTg3XFx1MDk4OFxcdTA5ODlcXHUwOThBXFx1MDk4QlxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTNcXHUwOTk0XFx1MDk5NVxcdTA5OTZcXHUwOTk3XFx1MDk5OFxcdTA5OTlcXHUwOTlBXFx1MDk5QlxcdTA5OUNcXHUwOTlEXFx1MDk5RVxcdTA5OUZcXHUwOUEwXFx1MDlBMVxcdTA5QTJcXHUwOUEzXFx1MDlBNFxcdTA5QTVcXHUwOUE2XFx1MDlBN1xcdTA5QThcXHUwOUFBXFx1MDlBQlxcdTA5QUNcXHUwOUFEXFx1MDlBRVxcdTA5QUZcXHUwOUIwXFx1MDlCMlxcdTA5QjZcXHUwOUI3XFx1MDlCOFxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERlxcdTA5RTBcXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1XFx1MEEwNlxcdTBBMDdcXHUwQTA4XFx1MEEwOVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTNcXHUwQTE0XFx1MEExNVxcdTBBMTZcXHUwQTE3XFx1MEExOFxcdTBBMTlcXHUwQTFBXFx1MEExQlxcdTBBMUNcXHUwQTFEXFx1MEExRVxcdTBBMUZcXHUwQTIwXFx1MEEyMVxcdTBBMjJcXHUwQTIzXFx1MEEyNFxcdTBBMjVcXHUwQTI2XFx1MEEyN1xcdTBBMjhcXHUwQTJBXFx1MEEyQlxcdTBBMkNcXHUwQTJEXFx1MEEyRVxcdTBBMkZcXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OVxcdTBBNUFcXHUwQTVCXFx1MEE1Q1xcdTBBNUVcXHUwQTcyXFx1MEE3M1xcdTBBNzRcXHUwQTg1XFx1MEE4NlxcdTBBODdcXHUwQTg4XFx1MEE4OVxcdTBBOEFcXHUwQThCXFx1MEE4Q1xcdTBBOERcXHUwQThGXFx1MEE5MFxcdTBBOTFcXHUwQTkzXFx1MEE5NFxcdTBBOTVcXHUwQTk2XFx1MEE5N1xcdTBBOThcXHUwQTk5XFx1MEE5QVxcdTBBOUJcXHUwQTlDXFx1MEE5RFxcdTBBOUVcXHUwQTlGXFx1MEFBMFxcdTBBQTFcXHUwQUEyXFx1MEFBM1xcdTBBQTRcXHUwQUE1XFx1MEFBNlxcdTBBQTdcXHUwQUE4XFx1MEFBQVxcdTBBQUJcXHUwQUFDXFx1MEFBRFxcdTBBQUVcXHUwQUFGXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNVxcdTBBQjZcXHUwQUI3XFx1MEFCOFxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEIwNVxcdTBCMDZcXHUwQjA3XFx1MEIwOFxcdTBCMDlcXHUwQjBBXFx1MEIwQlxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTNcXHUwQjE0XFx1MEIxNVxcdTBCMTZcXHUwQjE3XFx1MEIxOFxcdTBCMTlcXHUwQjFBXFx1MEIxQlxcdTBCMUNcXHUwQjFEXFx1MEIxRVxcdTBCMUZcXHUwQjIwXFx1MEIyMVxcdTBCMjJcXHUwQjIzXFx1MEIyNFxcdTBCMjVcXHUwQjI2XFx1MEIyN1xcdTBCMjhcXHUwQjJBXFx1MEIyQlxcdTBCMkNcXHUwQjJEXFx1MEIyRVxcdTBCMkZcXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1XFx1MEIzNlxcdTBCMzdcXHUwQjM4XFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUZcXHUwQjYwXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NVxcdTBCODZcXHUwQjg3XFx1MEI4OFxcdTBCODlcXHUwQjhBXFx1MEI4RVxcdTBCOEZcXHUwQjkwXFx1MEI5MlxcdTBCOTNcXHUwQjk0XFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4XFx1MEJBOVxcdTBCQUFcXHUwQkFFXFx1MEJBRlxcdTBCQjBcXHUwQkIxXFx1MEJCMlxcdTBCQjNcXHUwQkI0XFx1MEJCNVxcdTBCQjZcXHUwQkI3XFx1MEJCOFxcdTBCQjlcXHUwQkQwXFx1MEMwNVxcdTBDMDZcXHUwQzA3XFx1MEMwOFxcdTBDMDlcXHUwQzBBXFx1MEMwQlxcdTBDMENcXHUwQzBFXFx1MEMwRlxcdTBDMTBcXHUwQzEyXFx1MEMxM1xcdTBDMTRcXHUwQzE1XFx1MEMxNlxcdTBDMTdcXHUwQzE4XFx1MEMxOVxcdTBDMUFcXHUwQzFCXFx1MEMxQ1xcdTBDMURcXHUwQzFFXFx1MEMxRlxcdTBDMjBcXHUwQzIxXFx1MEMyMlxcdTBDMjNcXHUwQzI0XFx1MEMyNVxcdTBDMjZcXHUwQzI3XFx1MEMyOFxcdTBDMkFcXHUwQzJCXFx1MEMyQ1xcdTBDMkRcXHUwQzJFXFx1MEMyRlxcdTBDMzBcXHUwQzMxXFx1MEMzMlxcdTBDMzNcXHUwQzM1XFx1MEMzNlxcdTBDMzdcXHUwQzM4XFx1MEMzOVxcdTBDM0RcXHUwQzU4XFx1MEM1OVxcdTBDNjBcXHUwQzYxXFx1MEM4NVxcdTBDODZcXHUwQzg3XFx1MEM4OFxcdTBDODlcXHUwQzhBXFx1MEM4QlxcdTBDOENcXHUwQzhFXFx1MEM4RlxcdTBDOTBcXHUwQzkyXFx1MEM5M1xcdTBDOTRcXHUwQzk1XFx1MEM5NlxcdTBDOTdcXHUwQzk4XFx1MEM5OVxcdTBDOUFcXHUwQzlCXFx1MEM5Q1xcdTBDOURcXHUwQzlFXFx1MEM5RlxcdTBDQTBcXHUwQ0ExXFx1MENBMlxcdTBDQTNcXHUwQ0E0XFx1MENBNVxcdTBDQTZcXHUwQ0E3XFx1MENBOFxcdTBDQUFcXHUwQ0FCXFx1MENBQ1xcdTBDQURcXHUwQ0FFXFx1MENBRlxcdTBDQjBcXHUwQ0IxXFx1MENCMlxcdTBDQjNcXHUwQ0I1XFx1MENCNlxcdTBDQjdcXHUwQ0I4XFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwRDA1XFx1MEQwNlxcdTBEMDdcXHUwRDA4XFx1MEQwOVxcdTBEMEFcXHUwRDBCXFx1MEQwQ1xcdTBEMEVcXHUwRDBGXFx1MEQxMFxcdTBEMTJcXHUwRDEzXFx1MEQxNFxcdTBEMTVcXHUwRDE2XFx1MEQxN1xcdTBEMThcXHUwRDE5XFx1MEQxQVxcdTBEMUJcXHUwRDFDXFx1MEQxRFxcdTBEMUVcXHUwRDFGXFx1MEQyMFxcdTBEMjFcXHUwRDIyXFx1MEQyM1xcdTBEMjRcXHUwRDI1XFx1MEQyNlxcdTBEMjdcXHUwRDI4XFx1MEQyQVxcdTBEMkJcXHUwRDJDXFx1MEQyRFxcdTBEMkVcXHUwRDJGXFx1MEQzMFxcdTBEMzFcXHUwRDMyXFx1MEQzM1xcdTBEMzRcXHUwRDM1XFx1MEQzNlxcdTBEMzdcXHUwRDM4XFx1MEQzOVxcdTBEM0RcXHUwRDYwXFx1MEQ2MVxcdTBEN0FcXHUwRDdCXFx1MEQ3Q1xcdTBEN0RcXHUwRDdFXFx1MEQ3RlxcdTBEODVcXHUwRDg2XFx1MEQ4N1xcdTBEODhcXHUwRDg5XFx1MEQ4QVxcdTBEOEJcXHUwRDhDXFx1MEQ4RFxcdTBEOEVcXHUwRDhGXFx1MEQ5MFxcdTBEOTFcXHUwRDkyXFx1MEQ5M1xcdTBEOTRcXHUwRDk1XFx1MEQ5NlxcdTBEOUFcXHUwRDlCXFx1MEQ5Q1xcdTBEOURcXHUwRDlFXFx1MEQ5RlxcdTBEQTBcXHUwREExXFx1MERBMlxcdTBEQTNcXHUwREE0XFx1MERBNVxcdTBEQTZcXHUwREE3XFx1MERBOFxcdTBEQTlcXHUwREFBXFx1MERBQlxcdTBEQUNcXHUwREFEXFx1MERBRVxcdTBEQUZcXHUwREIwXFx1MERCMVxcdTBEQjNcXHUwREI0XFx1MERCNVxcdTBEQjZcXHUwREI3XFx1MERCOFxcdTBEQjlcXHUwREJBXFx1MERCQlxcdTBEQkRcXHUwREMwXFx1MERDMVxcdTBEQzJcXHUwREMzXFx1MERDNFxcdTBEQzVcXHUwREM2XFx1MEUwMVxcdTBFMDJcXHUwRTAzXFx1MEUwNFxcdTBFMDVcXHUwRTA2XFx1MEUwN1xcdTBFMDhcXHUwRTA5XFx1MEUwQVxcdTBFMEJcXHUwRTBDXFx1MEUwRFxcdTBFMEVcXHUwRTBGXFx1MEUxMFxcdTBFMTFcXHUwRTEyXFx1MEUxM1xcdTBFMTRcXHUwRTE1XFx1MEUxNlxcdTBFMTdcXHUwRTE4XFx1MEUxOVxcdTBFMUFcXHUwRTFCXFx1MEUxQ1xcdTBFMURcXHUwRTFFXFx1MEUxRlxcdTBFMjBcXHUwRTIxXFx1MEUyMlxcdTBFMjNcXHUwRTI0XFx1MEUyNVxcdTBFMjZcXHUwRTI3XFx1MEUyOFxcdTBFMjlcXHUwRTJBXFx1MEUyQlxcdTBFMkNcXHUwRTJEXFx1MEUyRVxcdTBFMkZcXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwXFx1MEU0MVxcdTBFNDJcXHUwRTQzXFx1MEU0NFxcdTBFNDVcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NFxcdTBFOTVcXHUwRTk2XFx1MEU5N1xcdTBFOTlcXHUwRTlBXFx1MEU5QlxcdTBFOUNcXHUwRTlEXFx1MEU5RVxcdTBFOUZcXHUwRUExXFx1MEVBMlxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRFxcdTBFQUVcXHUwRUFGXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzBcXHUwRUMxXFx1MEVDMlxcdTBFQzNcXHUwRUM0XFx1MEVEQ1xcdTBFRERcXHUwRjAwXFx1MEY0MFxcdTBGNDFcXHUwRjQyXFx1MEY0M1xcdTBGNDRcXHUwRjQ1XFx1MEY0NlxcdTBGNDdcXHUwRjQ5XFx1MEY0QVxcdTBGNEJcXHUwRjRDXFx1MEY0RFxcdTBGNEVcXHUwRjRGXFx1MEY1MFxcdTBGNTFcXHUwRjUyXFx1MEY1M1xcdTBGNTRcXHUwRjU1XFx1MEY1NlxcdTBGNTdcXHUwRjU4XFx1MEY1OVxcdTBGNUFcXHUwRjVCXFx1MEY1Q1xcdTBGNURcXHUwRjVFXFx1MEY1RlxcdTBGNjBcXHUwRjYxXFx1MEY2MlxcdTBGNjNcXHUwRjY0XFx1MEY2NVxcdTBGNjZcXHUwRjY3XFx1MEY2OFxcdTBGNjlcXHUwRjZBXFx1MEY2QlxcdTBGNkNcXHUwRjg4XFx1MEY4OVxcdTBGOEFcXHUwRjhCXFx1MTAwMFxcdTEwMDFcXHUxMDAyXFx1MTAwM1xcdTEwMDRcXHUxMDA1XFx1MTAwNlxcdTEwMDdcXHUxMDA4XFx1MTAwOVxcdTEwMEFcXHUxMDBCXFx1MTAwQ1xcdTEwMERcXHUxMDBFXFx1MTAwRlxcdTEwMTBcXHUxMDExXFx1MTAxMlxcdTEwMTNcXHUxMDE0XFx1MTAxNVxcdTEwMTZcXHUxMDE3XFx1MTAxOFxcdTEwMTlcXHUxMDFBXFx1MTAxQlxcdTEwMUNcXHUxMDFEXFx1MTAxRVxcdTEwMUZcXHUxMDIwXFx1MTAyMVxcdTEwMjJcXHUxMDIzXFx1MTAyNFxcdTEwMjVcXHUxMDI2XFx1MTAyN1xcdTEwMjhcXHUxMDI5XFx1MTAyQVxcdTEwM0ZcXHUxMDUwXFx1MTA1MVxcdTEwNTJcXHUxMDUzXFx1MTA1NFxcdTEwNTVcXHUxMDVBXFx1MTA1QlxcdTEwNUNcXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RVxcdTEwNkZcXHUxMDcwXFx1MTA3NVxcdTEwNzZcXHUxMDc3XFx1MTA3OFxcdTEwNzlcXHUxMDdBXFx1MTA3QlxcdTEwN0NcXHUxMDdEXFx1MTA3RVxcdTEwN0ZcXHUxMDgwXFx1MTA4MVxcdTEwOEVcXHUxMEQwXFx1MTBEMVxcdTEwRDJcXHUxMEQzXFx1MTBENFxcdTEwRDVcXHUxMEQ2XFx1MTBEN1xcdTEwRDhcXHUxMEQ5XFx1MTBEQVxcdTEwREJcXHUxMERDXFx1MTBERFxcdTEwREVcXHUxMERGXFx1MTBFMFxcdTEwRTFcXHUxMEUyXFx1MTBFM1xcdTEwRTRcXHUxMEU1XFx1MTBFNlxcdTEwRTdcXHUxMEU4XFx1MTBFOVxcdTEwRUFcXHUxMEVCXFx1MTBFQ1xcdTEwRURcXHUxMEVFXFx1MTBFRlxcdTEwRjBcXHUxMEYxXFx1MTBGMlxcdTEwRjNcXHUxMEY0XFx1MTBGNVxcdTEwRjZcXHUxMEY3XFx1MTBGOFxcdTEwRjlcXHUxMEZBXFx1MTEwMFxcdTExMDFcXHUxMTAyXFx1MTEwM1xcdTExMDRcXHUxMTA1XFx1MTEwNlxcdTExMDdcXHUxMTA4XFx1MTEwOVxcdTExMEFcXHUxMTBCXFx1MTEwQ1xcdTExMERcXHUxMTBFXFx1MTEwRlxcdTExMTBcXHUxMTExXFx1MTExMlxcdTExMTNcXHUxMTE0XFx1MTExNVxcdTExMTZcXHUxMTE3XFx1MTExOFxcdTExMTlcXHUxMTFBXFx1MTExQlxcdTExMUNcXHUxMTFEXFx1MTExRVxcdTExMUZcXHUxMTIwXFx1MTEyMVxcdTExMjJcXHUxMTIzXFx1MTEyNFxcdTExMjVcXHUxMTI2XFx1MTEyN1xcdTExMjhcXHUxMTI5XFx1MTEyQVxcdTExMkJcXHUxMTJDXFx1MTEyRFxcdTExMkVcXHUxMTJGXFx1MTEzMFxcdTExMzFcXHUxMTMyXFx1MTEzM1xcdTExMzRcXHUxMTM1XFx1MTEzNlxcdTExMzdcXHUxMTM4XFx1MTEzOVxcdTExM0FcXHUxMTNCXFx1MTEzQ1xcdTExM0RcXHUxMTNFXFx1MTEzRlxcdTExNDBcXHUxMTQxXFx1MTE0MlxcdTExNDNcXHUxMTQ0XFx1MTE0NVxcdTExNDZcXHUxMTQ3XFx1MTE0OFxcdTExNDlcXHUxMTRBXFx1MTE0QlxcdTExNENcXHUxMTREXFx1MTE0RVxcdTExNEZcXHUxMTUwXFx1MTE1MVxcdTExNTJcXHUxMTUzXFx1MTE1NFxcdTExNTVcXHUxMTU2XFx1MTE1N1xcdTExNThcXHUxMTU5XFx1MTE1RlxcdTExNjBcXHUxMTYxXFx1MTE2MlxcdTExNjNcXHUxMTY0XFx1MTE2NVxcdTExNjZcXHUxMTY3XFx1MTE2OFxcdTExNjlcXHUxMTZBXFx1MTE2QlxcdTExNkNcXHUxMTZEXFx1MTE2RVxcdTExNkZcXHUxMTcwXFx1MTE3MVxcdTExNzJcXHUxMTczXFx1MTE3NFxcdTExNzVcXHUxMTc2XFx1MTE3N1xcdTExNzhcXHUxMTc5XFx1MTE3QVxcdTExN0JcXHUxMTdDXFx1MTE3RFxcdTExN0VcXHUxMTdGXFx1MTE4MFxcdTExODFcXHUxMTgyXFx1MTE4M1xcdTExODRcXHUxMTg1XFx1MTE4NlxcdTExODdcXHUxMTg4XFx1MTE4OVxcdTExOEFcXHUxMThCXFx1MTE4Q1xcdTExOERcXHUxMThFXFx1MTE4RlxcdTExOTBcXHUxMTkxXFx1MTE5MlxcdTExOTNcXHUxMTk0XFx1MTE5NVxcdTExOTZcXHUxMTk3XFx1MTE5OFxcdTExOTlcXHUxMTlBXFx1MTE5QlxcdTExOUNcXHUxMTlEXFx1MTE5RVxcdTExOUZcXHUxMUEwXFx1MTFBMVxcdTExQTJcXHUxMUE4XFx1MTFBOVxcdTExQUFcXHUxMUFCXFx1MTFBQ1xcdTExQURcXHUxMUFFXFx1MTFBRlxcdTExQjBcXHUxMUIxXFx1MTFCMlxcdTExQjNcXHUxMUI0XFx1MTFCNVxcdTExQjZcXHUxMUI3XFx1MTFCOFxcdTExQjlcXHUxMUJBXFx1MTFCQlxcdTExQkNcXHUxMUJEXFx1MTFCRVxcdTExQkZcXHUxMUMwXFx1MTFDMVxcdTExQzJcXHUxMUMzXFx1MTFDNFxcdTExQzVcXHUxMUM2XFx1MTFDN1xcdTExQzhcXHUxMUM5XFx1MTFDQVxcdTExQ0JcXHUxMUNDXFx1MTFDRFxcdTExQ0VcXHUxMUNGXFx1MTFEMFxcdTExRDFcXHUxMUQyXFx1MTFEM1xcdTExRDRcXHUxMUQ1XFx1MTFENlxcdTExRDdcXHUxMUQ4XFx1MTFEOVxcdTExREFcXHUxMURCXFx1MTFEQ1xcdTExRERcXHUxMURFXFx1MTFERlxcdTExRTBcXHUxMUUxXFx1MTFFMlxcdTExRTNcXHUxMUU0XFx1MTFFNVxcdTExRTZcXHUxMUU3XFx1MTFFOFxcdTExRTlcXHUxMUVBXFx1MTFFQlxcdTExRUNcXHUxMUVEXFx1MTFFRVxcdTExRUZcXHUxMUYwXFx1MTFGMVxcdTExRjJcXHUxMUYzXFx1MTFGNFxcdTExRjVcXHUxMUY2XFx1MTFGN1xcdTExRjhcXHUxMUY5XFx1MTIwMFxcdTEyMDFcXHUxMjAyXFx1MTIwM1xcdTEyMDRcXHUxMjA1XFx1MTIwNlxcdTEyMDdcXHUxMjA4XFx1MTIwOVxcdTEyMEFcXHUxMjBCXFx1MTIwQ1xcdTEyMERcXHUxMjBFXFx1MTIwRlxcdTEyMTBcXHUxMjExXFx1MTIxMlxcdTEyMTNcXHUxMjE0XFx1MTIxNVxcdTEyMTZcXHUxMjE3XFx1MTIxOFxcdTEyMTlcXHUxMjFBXFx1MTIxQlxcdTEyMUNcXHUxMjFEXFx1MTIxRVxcdTEyMUZcXHUxMjIwXFx1MTIyMVxcdTEyMjJcXHUxMjIzXFx1MTIyNFxcdTEyMjVcXHUxMjI2XFx1MTIyN1xcdTEyMjhcXHUxMjI5XFx1MTIyQVxcdTEyMkJcXHUxMjJDXFx1MTIyRFxcdTEyMkVcXHUxMjJGXFx1MTIzMFxcdTEyMzFcXHUxMjMyXFx1MTIzM1xcdTEyMzRcXHUxMjM1XFx1MTIzNlxcdTEyMzdcXHUxMjM4XFx1MTIzOVxcdTEyM0FcXHUxMjNCXFx1MTIzQ1xcdTEyM0RcXHUxMjNFXFx1MTIzRlxcdTEyNDBcXHUxMjQxXFx1MTI0MlxcdTEyNDNcXHUxMjQ0XFx1MTI0NVxcdTEyNDZcXHUxMjQ3XFx1MTI0OFxcdTEyNEFcXHUxMjRCXFx1MTI0Q1xcdTEyNERcXHUxMjUwXFx1MTI1MVxcdTEyNTJcXHUxMjUzXFx1MTI1NFxcdTEyNTVcXHUxMjU2XFx1MTI1OFxcdTEyNUFcXHUxMjVCXFx1MTI1Q1xcdTEyNURcXHUxMjYwXFx1MTI2MVxcdTEyNjJcXHUxMjYzXFx1MTI2NFxcdTEyNjVcXHUxMjY2XFx1MTI2N1xcdTEyNjhcXHUxMjY5XFx1MTI2QVxcdTEyNkJcXHUxMjZDXFx1MTI2RFxcdTEyNkVcXHUxMjZGXFx1MTI3MFxcdTEyNzFcXHUxMjcyXFx1MTI3M1xcdTEyNzRcXHUxMjc1XFx1MTI3NlxcdTEyNzdcXHUxMjc4XFx1MTI3OVxcdTEyN0FcXHUxMjdCXFx1MTI3Q1xcdTEyN0RcXHUxMjdFXFx1MTI3RlxcdTEyODBcXHUxMjgxXFx1MTI4MlxcdTEyODNcXHUxMjg0XFx1MTI4NVxcdTEyODZcXHUxMjg3XFx1MTI4OFxcdTEyOEFcXHUxMjhCXFx1MTI4Q1xcdTEyOERcXHUxMjkwXFx1MTI5MVxcdTEyOTJcXHUxMjkzXFx1MTI5NFxcdTEyOTVcXHUxMjk2XFx1MTI5N1xcdTEyOThcXHUxMjk5XFx1MTI5QVxcdTEyOUJcXHUxMjlDXFx1MTI5RFxcdTEyOUVcXHUxMjlGXFx1MTJBMFxcdTEyQTFcXHUxMkEyXFx1MTJBM1xcdTEyQTRcXHUxMkE1XFx1MTJBNlxcdTEyQTdcXHUxMkE4XFx1MTJBOVxcdTEyQUFcXHUxMkFCXFx1MTJBQ1xcdTEyQURcXHUxMkFFXFx1MTJBRlxcdTEyQjBcXHUxMkIyXFx1MTJCM1xcdTEyQjRcXHUxMkI1XFx1MTJCOFxcdTEyQjlcXHUxMkJBXFx1MTJCQlxcdTEyQkNcXHUxMkJEXFx1MTJCRVxcdTEyQzBcXHUxMkMyXFx1MTJDM1xcdTEyQzRcXHUxMkM1XFx1MTJDOFxcdTEyQzlcXHUxMkNBXFx1MTJDQlxcdTEyQ0NcXHUxMkNEXFx1MTJDRVxcdTEyQ0ZcXHUxMkQwXFx1MTJEMVxcdTEyRDJcXHUxMkQzXFx1MTJENFxcdTEyRDVcXHUxMkQ2XFx1MTJEOFxcdTEyRDlcXHUxMkRBXFx1MTJEQlxcdTEyRENcXHUxMkREXFx1MTJERVxcdTEyREZcXHUxMkUwXFx1MTJFMVxcdTEyRTJcXHUxMkUzXFx1MTJFNFxcdTEyRTVcXHUxMkU2XFx1MTJFN1xcdTEyRThcXHUxMkU5XFx1MTJFQVxcdTEyRUJcXHUxMkVDXFx1MTJFRFxcdTEyRUVcXHUxMkVGXFx1MTJGMFxcdTEyRjFcXHUxMkYyXFx1MTJGM1xcdTEyRjRcXHUxMkY1XFx1MTJGNlxcdTEyRjdcXHUxMkY4XFx1MTJGOVxcdTEyRkFcXHUxMkZCXFx1MTJGQ1xcdTEyRkRcXHUxMkZFXFx1MTJGRlxcdTEzMDBcXHUxMzAxXFx1MTMwMlxcdTEzMDNcXHUxMzA0XFx1MTMwNVxcdTEzMDZcXHUxMzA3XFx1MTMwOFxcdTEzMDlcXHUxMzBBXFx1MTMwQlxcdTEzMENcXHUxMzBEXFx1MTMwRVxcdTEzMEZcXHUxMzEwXFx1MTMxMlxcdTEzMTNcXHUxMzE0XFx1MTMxNVxcdTEzMThcXHUxMzE5XFx1MTMxQVxcdTEzMUJcXHUxMzFDXFx1MTMxRFxcdTEzMUVcXHUxMzFGXFx1MTMyMFxcdTEzMjFcXHUxMzIyXFx1MTMyM1xcdTEzMjRcXHUxMzI1XFx1MTMyNlxcdTEzMjdcXHUxMzI4XFx1MTMyOVxcdTEzMkFcXHUxMzJCXFx1MTMyQ1xcdTEzMkRcXHUxMzJFXFx1MTMyRlxcdTEzMzBcXHUxMzMxXFx1MTMzMlxcdTEzMzNcXHUxMzM0XFx1MTMzNVxcdTEzMzZcXHUxMzM3XFx1MTMzOFxcdTEzMzlcXHUxMzNBXFx1MTMzQlxcdTEzM0NcXHUxMzNEXFx1MTMzRVxcdTEzM0ZcXHUxMzQwXFx1MTM0MVxcdTEzNDJcXHUxMzQzXFx1MTM0NFxcdTEzNDVcXHUxMzQ2XFx1MTM0N1xcdTEzNDhcXHUxMzQ5XFx1MTM0QVxcdTEzNEJcXHUxMzRDXFx1MTM0RFxcdTEzNEVcXHUxMzRGXFx1MTM1MFxcdTEzNTFcXHUxMzUyXFx1MTM1M1xcdTEzNTRcXHUxMzU1XFx1MTM1NlxcdTEzNTdcXHUxMzU4XFx1MTM1OVxcdTEzNUFcXHUxMzgwXFx1MTM4MVxcdTEzODJcXHUxMzgzXFx1MTM4NFxcdTEzODVcXHUxMzg2XFx1MTM4N1xcdTEzODhcXHUxMzg5XFx1MTM4QVxcdTEzOEJcXHUxMzhDXFx1MTM4RFxcdTEzOEVcXHUxMzhGXFx1MTNBMFxcdTEzQTFcXHUxM0EyXFx1MTNBM1xcdTEzQTRcXHUxM0E1XFx1MTNBNlxcdTEzQTdcXHUxM0E4XFx1MTNBOVxcdTEzQUFcXHUxM0FCXFx1MTNBQ1xcdTEzQURcXHUxM0FFXFx1MTNBRlxcdTEzQjBcXHUxM0IxXFx1MTNCMlxcdTEzQjNcXHUxM0I0XFx1MTNCNVxcdTEzQjZcXHUxM0I3XFx1MTNCOFxcdTEzQjlcXHUxM0JBXFx1MTNCQlxcdTEzQkNcXHUxM0JEXFx1MTNCRVxcdTEzQkZcXHUxM0MwXFx1MTNDMVxcdTEzQzJcXHUxM0MzXFx1MTNDNFxcdTEzQzVcXHUxM0M2XFx1MTNDN1xcdTEzQzhcXHUxM0M5XFx1MTNDQVxcdTEzQ0JcXHUxM0NDXFx1MTNDRFxcdTEzQ0VcXHUxM0NGXFx1MTNEMFxcdTEzRDFcXHUxM0QyXFx1MTNEM1xcdTEzRDRcXHUxM0Q1XFx1MTNENlxcdTEzRDdcXHUxM0Q4XFx1MTNEOVxcdTEzREFcXHUxM0RCXFx1MTNEQ1xcdTEzRERcXHUxM0RFXFx1MTNERlxcdTEzRTBcXHUxM0UxXFx1MTNFMlxcdTEzRTNcXHUxM0U0XFx1MTNFNVxcdTEzRTZcXHUxM0U3XFx1MTNFOFxcdTEzRTlcXHUxM0VBXFx1MTNFQlxcdTEzRUNcXHUxM0VEXFx1MTNFRVxcdTEzRUZcXHUxM0YwXFx1MTNGMVxcdTEzRjJcXHUxM0YzXFx1MTNGNFxcdTE0MDFcXHUxNDAyXFx1MTQwM1xcdTE0MDRcXHUxNDA1XFx1MTQwNlxcdTE0MDdcXHUxNDA4XFx1MTQwOVxcdTE0MEFcXHUxNDBCXFx1MTQwQ1xcdTE0MERcXHUxNDBFXFx1MTQwRlxcdTE0MTBcXHUxNDExXFx1MTQxMlxcdTE0MTNcXHUxNDE0XFx1MTQxNVxcdTE0MTZcXHUxNDE3XFx1MTQxOFxcdTE0MTlcXHUxNDFBXFx1MTQxQlxcdTE0MUNcXHUxNDFEXFx1MTQxRVxcdTE0MUZcXHUxNDIwXFx1MTQyMVxcdTE0MjJcXHUxNDIzXFx1MTQyNFxcdTE0MjVcXHUxNDI2XFx1MTQyN1xcdTE0MjhcXHUxNDI5XFx1MTQyQVxcdTE0MkJcXHUxNDJDXFx1MTQyRFxcdTE0MkVcXHUxNDJGXFx1MTQzMFxcdTE0MzFcXHUxNDMyXFx1MTQzM1xcdTE0MzRcXHUxNDM1XFx1MTQzNlxcdTE0MzdcXHUxNDM4XFx1MTQzOVxcdTE0M0FcXHUxNDNCXFx1MTQzQ1xcdTE0M0RcXHUxNDNFXFx1MTQzRlxcdTE0NDBcXHUxNDQxXFx1MTQ0MlxcdTE0NDNcXHUxNDQ0XFx1MTQ0NVxcdTE0NDZcXHUxNDQ3XFx1MTQ0OFxcdTE0NDlcXHUxNDRBXFx1MTQ0QlxcdTE0NENcXHUxNDREXFx1MTQ0RVxcdTE0NEZcXHUxNDUwXFx1MTQ1MVxcdTE0NTJcXHUxNDUzXFx1MTQ1NFxcdTE0NTVcXHUxNDU2XFx1MTQ1N1xcdTE0NThcXHUxNDU5XFx1MTQ1QVxcdTE0NUJcXHUxNDVDXFx1MTQ1RFxcdTE0NUVcXHUxNDVGXFx1MTQ2MFxcdTE0NjFcXHUxNDYyXFx1MTQ2M1xcdTE0NjRcXHUxNDY1XFx1MTQ2NlxcdTE0NjdcXHUxNDY4XFx1MTQ2OVxcdTE0NkFcXHUxNDZCXFx1MTQ2Q1xcdTE0NkRcXHUxNDZFXFx1MTQ2RlxcdTE0NzBcXHUxNDcxXFx1MTQ3MlxcdTE0NzNcXHUxNDc0XFx1MTQ3NVxcdTE0NzZcXHUxNDc3XFx1MTQ3OFxcdTE0NzlcXHUxNDdBXFx1MTQ3QlxcdTE0N0NcXHUxNDdEXFx1MTQ3RVxcdTE0N0ZcXHUxNDgwXFx1MTQ4MVxcdTE0ODJcXHUxNDgzXFx1MTQ4NFxcdTE0ODVcXHUxNDg2XFx1MTQ4N1xcdTE0ODhcXHUxNDg5XFx1MTQ4QVxcdTE0OEJcXHUxNDhDXFx1MTQ4RFxcdTE0OEVcXHUxNDhGXFx1MTQ5MFxcdTE0OTFcXHUxNDkyXFx1MTQ5M1xcdTE0OTRcXHUxNDk1XFx1MTQ5NlxcdTE0OTdcXHUxNDk4XFx1MTQ5OVxcdTE0OUFcXHUxNDlCXFx1MTQ5Q1xcdTE0OURcXHUxNDlFXFx1MTQ5RlxcdTE0QTBcXHUxNEExXFx1MTRBMlxcdTE0QTNcXHUxNEE0XFx1MTRBNVxcdTE0QTZcXHUxNEE3XFx1MTRBOFxcdTE0QTlcXHUxNEFBXFx1MTRBQlxcdTE0QUNcXHUxNEFEXFx1MTRBRVxcdTE0QUZcXHUxNEIwXFx1MTRCMVxcdTE0QjJcXHUxNEIzXFx1MTRCNFxcdTE0QjVcXHUxNEI2XFx1MTRCN1xcdTE0QjhcXHUxNEI5XFx1MTRCQVxcdTE0QkJcXHUxNEJDXFx1MTRCRFxcdTE0QkVcXHUxNEJGXFx1MTRDMFxcdTE0QzFcXHUxNEMyXFx1MTRDM1xcdTE0QzRcXHUxNEM1XFx1MTRDNlxcdTE0QzdcXHUxNEM4XFx1MTRDOVxcdTE0Q0FcXHUxNENCXFx1MTRDQ1xcdTE0Q0RcXHUxNENFXFx1MTRDRlxcdTE0RDBcXHUxNEQxXFx1MTREMlxcdTE0RDNcXHUxNEQ0XFx1MTRENVxcdTE0RDZcXHUxNEQ3XFx1MTREOFxcdTE0RDlcXHUxNERBXFx1MTREQlxcdTE0RENcXHUxNEREXFx1MTRERVxcdTE0REZcXHUxNEUwXFx1MTRFMVxcdTE0RTJcXHUxNEUzXFx1MTRFNFxcdTE0RTVcXHUxNEU2XFx1MTRFN1xcdTE0RThcXHUxNEU5XFx1MTRFQVxcdTE0RUJcXHUxNEVDXFx1MTRFRFxcdTE0RUVcXHUxNEVGXFx1MTRGMFxcdTE0RjFcXHUxNEYyXFx1MTRGM1xcdTE0RjRcXHUxNEY1XFx1MTRGNlxcdTE0RjdcXHUxNEY4XFx1MTRGOVxcdTE0RkFcXHUxNEZCXFx1MTRGQ1xcdTE0RkRcXHUxNEZFXFx1MTRGRlxcdTE1MDBcXHUxNTAxXFx1MTUwMlxcdTE1MDNcXHUxNTA0XFx1MTUwNVxcdTE1MDZcXHUxNTA3XFx1MTUwOFxcdTE1MDlcXHUxNTBBXFx1MTUwQlxcdTE1MENcXHUxNTBEXFx1MTUwRVxcdTE1MEZcXHUxNTEwXFx1MTUxMVxcdTE1MTJcXHUxNTEzXFx1MTUxNFxcdTE1MTVcXHUxNTE2XFx1MTUxN1xcdTE1MThcXHUxNTE5XFx1MTUxQVxcdTE1MUJcXHUxNTFDXFx1MTUxRFxcdTE1MUVcXHUxNTFGXFx1MTUyMFxcdTE1MjFcXHUxNTIyXFx1MTUyM1xcdTE1MjRcXHUxNTI1XFx1MTUyNlxcdTE1MjdcXHUxNTI4XFx1MTUyOVxcdTE1MkFcXHUxNTJCXFx1MTUyQ1xcdTE1MkRcXHUxNTJFXFx1MTUyRlxcdTE1MzBcXHUxNTMxXFx1MTUzMlxcdTE1MzNcXHUxNTM0XFx1MTUzNVxcdTE1MzZcXHUxNTM3XFx1MTUzOFxcdTE1MzlcXHUxNTNBXFx1MTUzQlxcdTE1M0NcXHUxNTNEXFx1MTUzRVxcdTE1M0ZcXHUxNTQwXFx1MTU0MVxcdTE1NDJcXHUxNTQzXFx1MTU0NFxcdTE1NDVcXHUxNTQ2XFx1MTU0N1xcdTE1NDhcXHUxNTQ5XFx1MTU0QVxcdTE1NEJcXHUxNTRDXFx1MTU0RFxcdTE1NEVcXHUxNTRGXFx1MTU1MFxcdTE1NTFcXHUxNTUyXFx1MTU1M1xcdTE1NTRcXHUxNTU1XFx1MTU1NlxcdTE1NTdcXHUxNTU4XFx1MTU1OVxcdTE1NUFcXHUxNTVCXFx1MTU1Q1xcdTE1NURcXHUxNTVFXFx1MTU1RlxcdTE1NjBcXHUxNTYxXFx1MTU2MlxcdTE1NjNcXHUxNTY0XFx1MTU2NVxcdTE1NjZcXHUxNTY3XFx1MTU2OFxcdTE1NjlcXHUxNTZBXFx1MTU2QlxcdTE1NkNcXHUxNTZEXFx1MTU2RVxcdTE1NkZcXHUxNTcwXFx1MTU3MVxcdTE1NzJcXHUxNTczXFx1MTU3NFxcdTE1NzVcXHUxNTc2XFx1MTU3N1xcdTE1NzhcXHUxNTc5XFx1MTU3QVxcdTE1N0JcXHUxNTdDXFx1MTU3RFxcdTE1N0VcXHUxNTdGXFx1MTU4MFxcdTE1ODFcXHUxNTgyXFx1MTU4M1xcdTE1ODRcXHUxNTg1XFx1MTU4NlxcdTE1ODdcXHUxNTg4XFx1MTU4OVxcdTE1OEFcXHUxNThCXFx1MTU4Q1xcdTE1OERcXHUxNThFXFx1MTU4RlxcdTE1OTBcXHUxNTkxXFx1MTU5MlxcdTE1OTNcXHUxNTk0XFx1MTU5NVxcdTE1OTZcXHUxNTk3XFx1MTU5OFxcdTE1OTlcXHUxNTlBXFx1MTU5QlxcdTE1OUNcXHUxNTlEXFx1MTU5RVxcdTE1OUZcXHUxNUEwXFx1MTVBMVxcdTE1QTJcXHUxNUEzXFx1MTVBNFxcdTE1QTVcXHUxNUE2XFx1MTVBN1xcdTE1QThcXHUxNUE5XFx1MTVBQVxcdTE1QUJcXHUxNUFDXFx1MTVBRFxcdTE1QUVcXHUxNUFGXFx1MTVCMFxcdTE1QjFcXHUxNUIyXFx1MTVCM1xcdTE1QjRcXHUxNUI1XFx1MTVCNlxcdTE1QjdcXHUxNUI4XFx1MTVCOVxcdTE1QkFcXHUxNUJCXFx1MTVCQ1xcdTE1QkRcXHUxNUJFXFx1MTVCRlxcdTE1QzBcXHUxNUMxXFx1MTVDMlxcdTE1QzNcXHUxNUM0XFx1MTVDNVxcdTE1QzZcXHUxNUM3XFx1MTVDOFxcdTE1QzlcXHUxNUNBXFx1MTVDQlxcdTE1Q0NcXHUxNUNEXFx1MTVDRVxcdTE1Q0ZcXHUxNUQwXFx1MTVEMVxcdTE1RDJcXHUxNUQzXFx1MTVENFxcdTE1RDVcXHUxNUQ2XFx1MTVEN1xcdTE1RDhcXHUxNUQ5XFx1MTVEQVxcdTE1REJcXHUxNURDXFx1MTVERFxcdTE1REVcXHUxNURGXFx1MTVFMFxcdTE1RTFcXHUxNUUyXFx1MTVFM1xcdTE1RTRcXHUxNUU1XFx1MTVFNlxcdTE1RTdcXHUxNUU4XFx1MTVFOVxcdTE1RUFcXHUxNUVCXFx1MTVFQ1xcdTE1RURcXHUxNUVFXFx1MTVFRlxcdTE1RjBcXHUxNUYxXFx1MTVGMlxcdTE1RjNcXHUxNUY0XFx1MTVGNVxcdTE1RjZcXHUxNUY3XFx1MTVGOFxcdTE1RjlcXHUxNUZBXFx1MTVGQlxcdTE1RkNcXHUxNUZEXFx1MTVGRVxcdTE1RkZcXHUxNjAwXFx1MTYwMVxcdTE2MDJcXHUxNjAzXFx1MTYwNFxcdTE2MDVcXHUxNjA2XFx1MTYwN1xcdTE2MDhcXHUxNjA5XFx1MTYwQVxcdTE2MEJcXHUxNjBDXFx1MTYwRFxcdTE2MEVcXHUxNjBGXFx1MTYxMFxcdTE2MTFcXHUxNjEyXFx1MTYxM1xcdTE2MTRcXHUxNjE1XFx1MTYxNlxcdTE2MTdcXHUxNjE4XFx1MTYxOVxcdTE2MUFcXHUxNjFCXFx1MTYxQ1xcdTE2MURcXHUxNjFFXFx1MTYxRlxcdTE2MjBcXHUxNjIxXFx1MTYyMlxcdTE2MjNcXHUxNjI0XFx1MTYyNVxcdTE2MjZcXHUxNjI3XFx1MTYyOFxcdTE2MjlcXHUxNjJBXFx1MTYyQlxcdTE2MkNcXHUxNjJEXFx1MTYyRVxcdTE2MkZcXHUxNjMwXFx1MTYzMVxcdTE2MzJcXHUxNjMzXFx1MTYzNFxcdTE2MzVcXHUxNjM2XFx1MTYzN1xcdTE2MzhcXHUxNjM5XFx1MTYzQVxcdTE2M0JcXHUxNjNDXFx1MTYzRFxcdTE2M0VcXHUxNjNGXFx1MTY0MFxcdTE2NDFcXHUxNjQyXFx1MTY0M1xcdTE2NDRcXHUxNjQ1XFx1MTY0NlxcdTE2NDdcXHUxNjQ4XFx1MTY0OVxcdTE2NEFcXHUxNjRCXFx1MTY0Q1xcdTE2NERcXHUxNjRFXFx1MTY0RlxcdTE2NTBcXHUxNjUxXFx1MTY1MlxcdTE2NTNcXHUxNjU0XFx1MTY1NVxcdTE2NTZcXHUxNjU3XFx1MTY1OFxcdTE2NTlcXHUxNjVBXFx1MTY1QlxcdTE2NUNcXHUxNjVEXFx1MTY1RVxcdTE2NUZcXHUxNjYwXFx1MTY2MVxcdTE2NjJcXHUxNjYzXFx1MTY2NFxcdTE2NjVcXHUxNjY2XFx1MTY2N1xcdTE2NjhcXHUxNjY5XFx1MTY2QVxcdTE2NkJcXHUxNjZDXFx1MTY2RlxcdTE2NzBcXHUxNjcxXFx1MTY3MlxcdTE2NzNcXHUxNjc0XFx1MTY3NVxcdTE2NzZcXHUxNjgxXFx1MTY4MlxcdTE2ODNcXHUxNjg0XFx1MTY4NVxcdTE2ODZcXHUxNjg3XFx1MTY4OFxcdTE2ODlcXHUxNjhBXFx1MTY4QlxcdTE2OENcXHUxNjhEXFx1MTY4RVxcdTE2OEZcXHUxNjkwXFx1MTY5MVxcdTE2OTJcXHUxNjkzXFx1MTY5NFxcdTE2OTVcXHUxNjk2XFx1MTY5N1xcdTE2OThcXHUxNjk5XFx1MTY5QVxcdTE2QTBcXHUxNkExXFx1MTZBMlxcdTE2QTNcXHUxNkE0XFx1MTZBNVxcdTE2QTZcXHUxNkE3XFx1MTZBOFxcdTE2QTlcXHUxNkFBXFx1MTZBQlxcdTE2QUNcXHUxNkFEXFx1MTZBRVxcdTE2QUZcXHUxNkIwXFx1MTZCMVxcdTE2QjJcXHUxNkIzXFx1MTZCNFxcdTE2QjVcXHUxNkI2XFx1MTZCN1xcdTE2QjhcXHUxNkI5XFx1MTZCQVxcdTE2QkJcXHUxNkJDXFx1MTZCRFxcdTE2QkVcXHUxNkJGXFx1MTZDMFxcdTE2QzFcXHUxNkMyXFx1MTZDM1xcdTE2QzRcXHUxNkM1XFx1MTZDNlxcdTE2QzdcXHUxNkM4XFx1MTZDOVxcdTE2Q0FcXHUxNkNCXFx1MTZDQ1xcdTE2Q0RcXHUxNkNFXFx1MTZDRlxcdTE2RDBcXHUxNkQxXFx1MTZEMlxcdTE2RDNcXHUxNkQ0XFx1MTZENVxcdTE2RDZcXHUxNkQ3XFx1MTZEOFxcdTE2RDlcXHUxNkRBXFx1MTZEQlxcdTE2RENcXHUxNkREXFx1MTZERVxcdTE2REZcXHUxNkUwXFx1MTZFMVxcdTE2RTJcXHUxNkUzXFx1MTZFNFxcdTE2RTVcXHUxNkU2XFx1MTZFN1xcdTE2RThcXHUxNkU5XFx1MTZFQVxcdTE3MDBcXHUxNzAxXFx1MTcwMlxcdTE3MDNcXHUxNzA0XFx1MTcwNVxcdTE3MDZcXHUxNzA3XFx1MTcwOFxcdTE3MDlcXHUxNzBBXFx1MTcwQlxcdTE3MENcXHUxNzBFXFx1MTcwRlxcdTE3MTBcXHUxNzExXFx1MTcyMFxcdTE3MjFcXHUxNzIyXFx1MTcyM1xcdTE3MjRcXHUxNzI1XFx1MTcyNlxcdTE3MjdcXHUxNzI4XFx1MTcyOVxcdTE3MkFcXHUxNzJCXFx1MTcyQ1xcdTE3MkRcXHUxNzJFXFx1MTcyRlxcdTE3MzBcXHUxNzMxXFx1MTc0MFxcdTE3NDFcXHUxNzQyXFx1MTc0M1xcdTE3NDRcXHUxNzQ1XFx1MTc0NlxcdTE3NDdcXHUxNzQ4XFx1MTc0OVxcdTE3NEFcXHUxNzRCXFx1MTc0Q1xcdTE3NERcXHUxNzRFXFx1MTc0RlxcdTE3NTBcXHUxNzUxXFx1MTc2MFxcdTE3NjFcXHUxNzYyXFx1MTc2M1xcdTE3NjRcXHUxNzY1XFx1MTc2NlxcdTE3NjdcXHUxNzY4XFx1MTc2OVxcdTE3NkFcXHUxNzZCXFx1MTc2Q1xcdTE3NkVcXHUxNzZGXFx1MTc3MFxcdTE3ODBcXHUxNzgxXFx1MTc4MlxcdTE3ODNcXHUxNzg0XFx1MTc4NVxcdTE3ODZcXHUxNzg3XFx1MTc4OFxcdTE3ODlcXHUxNzhBXFx1MTc4QlxcdTE3OENcXHUxNzhEXFx1MTc4RVxcdTE3OEZcXHUxNzkwXFx1MTc5MVxcdTE3OTJcXHUxNzkzXFx1MTc5NFxcdTE3OTVcXHUxNzk2XFx1MTc5N1xcdTE3OThcXHUxNzk5XFx1MTc5QVxcdTE3OUJcXHUxNzlDXFx1MTc5RFxcdTE3OUVcXHUxNzlGXFx1MTdBMFxcdTE3QTFcXHUxN0EyXFx1MTdBM1xcdTE3QTRcXHUxN0E1XFx1MTdBNlxcdTE3QTdcXHUxN0E4XFx1MTdBOVxcdTE3QUFcXHUxN0FCXFx1MTdBQ1xcdTE3QURcXHUxN0FFXFx1MTdBRlxcdTE3QjBcXHUxN0IxXFx1MTdCMlxcdTE3QjNcXHUxN0RDXFx1MTgyMFxcdTE4MjFcXHUxODIyXFx1MTgyM1xcdTE4MjRcXHUxODI1XFx1MTgyNlxcdTE4MjdcXHUxODI4XFx1MTgyOVxcdTE4MkFcXHUxODJCXFx1MTgyQ1xcdTE4MkRcXHUxODJFXFx1MTgyRlxcdTE4MzBcXHUxODMxXFx1MTgzMlxcdTE4MzNcXHUxODM0XFx1MTgzNVxcdTE4MzZcXHUxODM3XFx1MTgzOFxcdTE4MzlcXHUxODNBXFx1MTgzQlxcdTE4M0NcXHUxODNEXFx1MTgzRVxcdTE4M0ZcXHUxODQwXFx1MTg0MVxcdTE4NDJcXHUxODQ0XFx1MTg0NVxcdTE4NDZcXHUxODQ3XFx1MTg0OFxcdTE4NDlcXHUxODRBXFx1MTg0QlxcdTE4NENcXHUxODREXFx1MTg0RVxcdTE4NEZcXHUxODUwXFx1MTg1MVxcdTE4NTJcXHUxODUzXFx1MTg1NFxcdTE4NTVcXHUxODU2XFx1MTg1N1xcdTE4NThcXHUxODU5XFx1MTg1QVxcdTE4NUJcXHUxODVDXFx1MTg1RFxcdTE4NUVcXHUxODVGXFx1MTg2MFxcdTE4NjFcXHUxODYyXFx1MTg2M1xcdTE4NjRcXHUxODY1XFx1MTg2NlxcdTE4NjdcXHUxODY4XFx1MTg2OVxcdTE4NkFcXHUxODZCXFx1MTg2Q1xcdTE4NkRcXHUxODZFXFx1MTg2RlxcdTE4NzBcXHUxODcxXFx1MTg3MlxcdTE4NzNcXHUxODc0XFx1MTg3NVxcdTE4NzZcXHUxODc3XFx1MTg4MFxcdTE4ODFcXHUxODgyXFx1MTg4M1xcdTE4ODRcXHUxODg1XFx1MTg4NlxcdTE4ODdcXHUxODg4XFx1MTg4OVxcdTE4OEFcXHUxODhCXFx1MTg4Q1xcdTE4OERcXHUxODhFXFx1MTg4RlxcdTE4OTBcXHUxODkxXFx1MTg5MlxcdTE4OTNcXHUxODk0XFx1MTg5NVxcdTE4OTZcXHUxODk3XFx1MTg5OFxcdTE4OTlcXHUxODlBXFx1MTg5QlxcdTE4OUNcXHUxODlEXFx1MTg5RVxcdTE4OUZcXHUxOEEwXFx1MThBMVxcdTE4QTJcXHUxOEEzXFx1MThBNFxcdTE4QTVcXHUxOEE2XFx1MThBN1xcdTE4QThcXHUxOEFBXFx1MTkwMFxcdTE5MDFcXHUxOTAyXFx1MTkwM1xcdTE5MDRcXHUxOTA1XFx1MTkwNlxcdTE5MDdcXHUxOTA4XFx1MTkwOVxcdTE5MEFcXHUxOTBCXFx1MTkwQ1xcdTE5MERcXHUxOTBFXFx1MTkwRlxcdTE5MTBcXHUxOTExXFx1MTkxMlxcdTE5MTNcXHUxOTE0XFx1MTkxNVxcdTE5MTZcXHUxOTE3XFx1MTkxOFxcdTE5MTlcXHUxOTFBXFx1MTkxQlxcdTE5MUNcXHUxOTUwXFx1MTk1MVxcdTE5NTJcXHUxOTUzXFx1MTk1NFxcdTE5NTVcXHUxOTU2XFx1MTk1N1xcdTE5NThcXHUxOTU5XFx1MTk1QVxcdTE5NUJcXHUxOTVDXFx1MTk1RFxcdTE5NUVcXHUxOTVGXFx1MTk2MFxcdTE5NjFcXHUxOTYyXFx1MTk2M1xcdTE5NjRcXHUxOTY1XFx1MTk2NlxcdTE5NjdcXHUxOTY4XFx1MTk2OVxcdTE5NkFcXHUxOTZCXFx1MTk2Q1xcdTE5NkRcXHUxOTcwXFx1MTk3MVxcdTE5NzJcXHUxOTczXFx1MTk3NFxcdTE5ODBcXHUxOTgxXFx1MTk4MlxcdTE5ODNcXHUxOTg0XFx1MTk4NVxcdTE5ODZcXHUxOTg3XFx1MTk4OFxcdTE5ODlcXHUxOThBXFx1MTk4QlxcdTE5OENcXHUxOThEXFx1MTk4RVxcdTE5OEZcXHUxOTkwXFx1MTk5MVxcdTE5OTJcXHUxOTkzXFx1MTk5NFxcdTE5OTVcXHUxOTk2XFx1MTk5N1xcdTE5OThcXHUxOTk5XFx1MTk5QVxcdTE5OUJcXHUxOTlDXFx1MTk5RFxcdTE5OUVcXHUxOTlGXFx1MTlBMFxcdTE5QTFcXHUxOUEyXFx1MTlBM1xcdTE5QTRcXHUxOUE1XFx1MTlBNlxcdTE5QTdcXHUxOUE4XFx1MTlBOVxcdTE5QzFcXHUxOUMyXFx1MTlDM1xcdTE5QzRcXHUxOUM1XFx1MTlDNlxcdTE5QzdcXHUxQTAwXFx1MUEwMVxcdTFBMDJcXHUxQTAzXFx1MUEwNFxcdTFBMDVcXHUxQTA2XFx1MUEwN1xcdTFBMDhcXHUxQTA5XFx1MUEwQVxcdTFBMEJcXHUxQTBDXFx1MUEwRFxcdTFBMEVcXHUxQTBGXFx1MUExMFxcdTFBMTFcXHUxQTEyXFx1MUExM1xcdTFBMTRcXHUxQTE1XFx1MUExNlxcdTFCMDVcXHUxQjA2XFx1MUIwN1xcdTFCMDhcXHUxQjA5XFx1MUIwQVxcdTFCMEJcXHUxQjBDXFx1MUIwRFxcdTFCMEVcXHUxQjBGXFx1MUIxMFxcdTFCMTFcXHUxQjEyXFx1MUIxM1xcdTFCMTRcXHUxQjE1XFx1MUIxNlxcdTFCMTdcXHUxQjE4XFx1MUIxOVxcdTFCMUFcXHUxQjFCXFx1MUIxQ1xcdTFCMURcXHUxQjFFXFx1MUIxRlxcdTFCMjBcXHUxQjIxXFx1MUIyMlxcdTFCMjNcXHUxQjI0XFx1MUIyNVxcdTFCMjZcXHUxQjI3XFx1MUIyOFxcdTFCMjlcXHUxQjJBXFx1MUIyQlxcdTFCMkNcXHUxQjJEXFx1MUIyRVxcdTFCMkZcXHUxQjMwXFx1MUIzMVxcdTFCMzJcXHUxQjMzXFx1MUI0NVxcdTFCNDZcXHUxQjQ3XFx1MUI0OFxcdTFCNDlcXHUxQjRBXFx1MUI0QlxcdTFCODNcXHUxQjg0XFx1MUI4NVxcdTFCODZcXHUxQjg3XFx1MUI4OFxcdTFCODlcXHUxQjhBXFx1MUI4QlxcdTFCOENcXHUxQjhEXFx1MUI4RVxcdTFCOEZcXHUxQjkwXFx1MUI5MVxcdTFCOTJcXHUxQjkzXFx1MUI5NFxcdTFCOTVcXHUxQjk2XFx1MUI5N1xcdTFCOThcXHUxQjk5XFx1MUI5QVxcdTFCOUJcXHUxQjlDXFx1MUI5RFxcdTFCOUVcXHUxQjlGXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUMwMFxcdTFDMDFcXHUxQzAyXFx1MUMwM1xcdTFDMDRcXHUxQzA1XFx1MUMwNlxcdTFDMDdcXHUxQzA4XFx1MUMwOVxcdTFDMEFcXHUxQzBCXFx1MUMwQ1xcdTFDMERcXHUxQzBFXFx1MUMwRlxcdTFDMTBcXHUxQzExXFx1MUMxMlxcdTFDMTNcXHUxQzE0XFx1MUMxNVxcdTFDMTZcXHUxQzE3XFx1MUMxOFxcdTFDMTlcXHUxQzFBXFx1MUMxQlxcdTFDMUNcXHUxQzFEXFx1MUMxRVxcdTFDMUZcXHUxQzIwXFx1MUMyMVxcdTFDMjJcXHUxQzIzXFx1MUM0RFxcdTFDNEVcXHUxQzRGXFx1MUM1QVxcdTFDNUJcXHUxQzVDXFx1MUM1RFxcdTFDNUVcXHUxQzVGXFx1MUM2MFxcdTFDNjFcXHUxQzYyXFx1MUM2M1xcdTFDNjRcXHUxQzY1XFx1MUM2NlxcdTFDNjdcXHUxQzY4XFx1MUM2OVxcdTFDNkFcXHUxQzZCXFx1MUM2Q1xcdTFDNkRcXHUxQzZFXFx1MUM2RlxcdTFDNzBcXHUxQzcxXFx1MUM3MlxcdTFDNzNcXHUxQzc0XFx1MUM3NVxcdTFDNzZcXHUxQzc3XFx1MjEzNVxcdTIxMzZcXHUyMTM3XFx1MjEzOFxcdTJEMzBcXHUyRDMxXFx1MkQzMlxcdTJEMzNcXHUyRDM0XFx1MkQzNVxcdTJEMzZcXHUyRDM3XFx1MkQzOFxcdTJEMzlcXHUyRDNBXFx1MkQzQlxcdTJEM0NcXHUyRDNEXFx1MkQzRVxcdTJEM0ZcXHUyRDQwXFx1MkQ0MVxcdTJENDJcXHUyRDQzXFx1MkQ0NFxcdTJENDVcXHUyRDQ2XFx1MkQ0N1xcdTJENDhcXHUyRDQ5XFx1MkQ0QVxcdTJENEJcXHUyRDRDXFx1MkQ0RFxcdTJENEVcXHUyRDRGXFx1MkQ1MFxcdTJENTFcXHUyRDUyXFx1MkQ1M1xcdTJENTRcXHUyRDU1XFx1MkQ1NlxcdTJENTdcXHUyRDU4XFx1MkQ1OVxcdTJENUFcXHUyRDVCXFx1MkQ1Q1xcdTJENURcXHUyRDVFXFx1MkQ1RlxcdTJENjBcXHUyRDYxXFx1MkQ2MlxcdTJENjNcXHUyRDY0XFx1MkQ2NVxcdTJEODBcXHUyRDgxXFx1MkQ4MlxcdTJEODNcXHUyRDg0XFx1MkQ4NVxcdTJEODZcXHUyRDg3XFx1MkQ4OFxcdTJEODlcXHUyRDhBXFx1MkQ4QlxcdTJEOENcXHUyRDhEXFx1MkQ4RVxcdTJEOEZcXHUyRDkwXFx1MkQ5MVxcdTJEOTJcXHUyRDkzXFx1MkQ5NFxcdTJEOTVcXHUyRDk2XFx1MkRBMFxcdTJEQTFcXHUyREEyXFx1MkRBM1xcdTJEQTRcXHUyREE1XFx1MkRBNlxcdTJEQThcXHUyREE5XFx1MkRBQVxcdTJEQUJcXHUyREFDXFx1MkRBRFxcdTJEQUVcXHUyREIwXFx1MkRCMVxcdTJEQjJcXHUyREIzXFx1MkRCNFxcdTJEQjVcXHUyREI2XFx1MkRCOFxcdTJEQjlcXHUyREJBXFx1MkRCQlxcdTJEQkNcXHUyREJEXFx1MkRCRVxcdTJEQzBcXHUyREMxXFx1MkRDMlxcdTJEQzNcXHUyREM0XFx1MkRDNVxcdTJEQzZcXHUyREM4XFx1MkRDOVxcdTJEQ0FcXHUyRENCXFx1MkRDQ1xcdTJEQ0RcXHUyRENFXFx1MkREMFxcdTJERDFcXHUyREQyXFx1MkREM1xcdTJERDRcXHUyREQ1XFx1MkRENlxcdTJERDhcXHUyREQ5XFx1MkREQVxcdTJEREJcXHUyRERDXFx1MkRERFxcdTJEREVcXHUzMDA2XFx1MzAzQ1xcdTMwNDFcXHUzMDQyXFx1MzA0M1xcdTMwNDRcXHUzMDQ1XFx1MzA0NlxcdTMwNDdcXHUzMDQ4XFx1MzA0OVxcdTMwNEFcXHUzMDRCXFx1MzA0Q1xcdTMwNERcXHUzMDRFXFx1MzA0RlxcdTMwNTBcXHUzMDUxXFx1MzA1MlxcdTMwNTNcXHUzMDU0XFx1MzA1NVxcdTMwNTZcXHUzMDU3XFx1MzA1OFxcdTMwNTlcXHUzMDVBXFx1MzA1QlxcdTMwNUNcXHUzMDVEXFx1MzA1RVxcdTMwNUZcXHUzMDYwXFx1MzA2MVxcdTMwNjJcXHUzMDYzXFx1MzA2NFxcdTMwNjVcXHUzMDY2XFx1MzA2N1xcdTMwNjhcXHUzMDY5XFx1MzA2QVxcdTMwNkJcXHUzMDZDXFx1MzA2RFxcdTMwNkVcXHUzMDZGXFx1MzA3MFxcdTMwNzFcXHUzMDcyXFx1MzA3M1xcdTMwNzRcXHUzMDc1XFx1MzA3NlxcdTMwNzdcXHUzMDc4XFx1MzA3OVxcdTMwN0FcXHUzMDdCXFx1MzA3Q1xcdTMwN0RcXHUzMDdFXFx1MzA3RlxcdTMwODBcXHUzMDgxXFx1MzA4MlxcdTMwODNcXHUzMDg0XFx1MzA4NVxcdTMwODZcXHUzMDg3XFx1MzA4OFxcdTMwODlcXHUzMDhBXFx1MzA4QlxcdTMwOENcXHUzMDhEXFx1MzA4RVxcdTMwOEZcXHUzMDkwXFx1MzA5MVxcdTMwOTJcXHUzMDkzXFx1MzA5NFxcdTMwOTVcXHUzMDk2XFx1MzA5RlxcdTMwQTFcXHUzMEEyXFx1MzBBM1xcdTMwQTRcXHUzMEE1XFx1MzBBNlxcdTMwQTdcXHUzMEE4XFx1MzBBOVxcdTMwQUFcXHUzMEFCXFx1MzBBQ1xcdTMwQURcXHUzMEFFXFx1MzBBRlxcdTMwQjBcXHUzMEIxXFx1MzBCMlxcdTMwQjNcXHUzMEI0XFx1MzBCNVxcdTMwQjZcXHUzMEI3XFx1MzBCOFxcdTMwQjlcXHUzMEJBXFx1MzBCQlxcdTMwQkNcXHUzMEJEXFx1MzBCRVxcdTMwQkZcXHUzMEMwXFx1MzBDMVxcdTMwQzJcXHUzMEMzXFx1MzBDNFxcdTMwQzVcXHUzMEM2XFx1MzBDN1xcdTMwQzhcXHUzMEM5XFx1MzBDQVxcdTMwQ0JcXHUzMENDXFx1MzBDRFxcdTMwQ0VcXHUzMENGXFx1MzBEMFxcdTMwRDFcXHUzMEQyXFx1MzBEM1xcdTMwRDRcXHUzMEQ1XFx1MzBENlxcdTMwRDdcXHUzMEQ4XFx1MzBEOVxcdTMwREFcXHUzMERCXFx1MzBEQ1xcdTMwRERcXHUzMERFXFx1MzBERlxcdTMwRTBcXHUzMEUxXFx1MzBFMlxcdTMwRTNcXHUzMEU0XFx1MzBFNVxcdTMwRTZcXHUzMEU3XFx1MzBFOFxcdTMwRTlcXHUzMEVBXFx1MzBFQlxcdTMwRUNcXHUzMEVEXFx1MzBFRVxcdTMwRUZcXHUzMEYwXFx1MzBGMVxcdTMwRjJcXHUzMEYzXFx1MzBGNFxcdTMwRjVcXHUzMEY2XFx1MzBGN1xcdTMwRjhcXHUzMEY5XFx1MzBGQVxcdTMwRkZcXHUzMTA1XFx1MzEwNlxcdTMxMDdcXHUzMTA4XFx1MzEwOVxcdTMxMEFcXHUzMTBCXFx1MzEwQ1xcdTMxMERcXHUzMTBFXFx1MzEwRlxcdTMxMTBcXHUzMTExXFx1MzExMlxcdTMxMTNcXHUzMTE0XFx1MzExNVxcdTMxMTZcXHUzMTE3XFx1MzExOFxcdTMxMTlcXHUzMTFBXFx1MzExQlxcdTMxMUNcXHUzMTFEXFx1MzExRVxcdTMxMUZcXHUzMTIwXFx1MzEyMVxcdTMxMjJcXHUzMTIzXFx1MzEyNFxcdTMxMjVcXHUzMTI2XFx1MzEyN1xcdTMxMjhcXHUzMTI5XFx1MzEyQVxcdTMxMkJcXHUzMTJDXFx1MzEyRFxcdTMxMzFcXHUzMTMyXFx1MzEzM1xcdTMxMzRcXHUzMTM1XFx1MzEzNlxcdTMxMzdcXHUzMTM4XFx1MzEzOVxcdTMxM0FcXHUzMTNCXFx1MzEzQ1xcdTMxM0RcXHUzMTNFXFx1MzEzRlxcdTMxNDBcXHUzMTQxXFx1MzE0MlxcdTMxNDNcXHUzMTQ0XFx1MzE0NVxcdTMxNDZcXHUzMTQ3XFx1MzE0OFxcdTMxNDlcXHUzMTRBXFx1MzE0QlxcdTMxNENcXHUzMTREXFx1MzE0RVxcdTMxNEZcXHUzMTUwXFx1MzE1MVxcdTMxNTJcXHUzMTUzXFx1MzE1NFxcdTMxNTVcXHUzMTU2XFx1MzE1N1xcdTMxNThcXHUzMTU5XFx1MzE1QVxcdTMxNUJcXHUzMTVDXFx1MzE1RFxcdTMxNUVcXHUzMTVGXFx1MzE2MFxcdTMxNjFcXHUzMTYyXFx1MzE2M1xcdTMxNjRcXHUzMTY1XFx1MzE2NlxcdTMxNjdcXHUzMTY4XFx1MzE2OVxcdTMxNkFcXHUzMTZCXFx1MzE2Q1xcdTMxNkRcXHUzMTZFXFx1MzE2RlxcdTMxNzBcXHUzMTcxXFx1MzE3MlxcdTMxNzNcXHUzMTc0XFx1MzE3NVxcdTMxNzZcXHUzMTc3XFx1MzE3OFxcdTMxNzlcXHUzMTdBXFx1MzE3QlxcdTMxN0NcXHUzMTdEXFx1MzE3RVxcdTMxN0ZcXHUzMTgwXFx1MzE4MVxcdTMxODJcXHUzMTgzXFx1MzE4NFxcdTMxODVcXHUzMTg2XFx1MzE4N1xcdTMxODhcXHUzMTg5XFx1MzE4QVxcdTMxOEJcXHUzMThDXFx1MzE4RFxcdTMxOEVcXHUzMUEwXFx1MzFBMVxcdTMxQTJcXHUzMUEzXFx1MzFBNFxcdTMxQTVcXHUzMUE2XFx1MzFBN1xcdTMxQThcXHUzMUE5XFx1MzFBQVxcdTMxQUJcXHUzMUFDXFx1MzFBRFxcdTMxQUVcXHUzMUFGXFx1MzFCMFxcdTMxQjFcXHUzMUIyXFx1MzFCM1xcdTMxQjRcXHUzMUI1XFx1MzFCNlxcdTMxQjdcXHUzMUYwXFx1MzFGMVxcdTMxRjJcXHUzMUYzXFx1MzFGNFxcdTMxRjVcXHUzMUY2XFx1MzFGN1xcdTMxRjhcXHUzMUY5XFx1MzFGQVxcdTMxRkJcXHUzMUZDXFx1MzFGRFxcdTMxRkVcXHUzMUZGXFx1MzQwMFxcdTREQjVcXHU0RTAwXFx1OUZDM1xcdUEwMDBcXHVBMDAxXFx1QTAwMlxcdUEwMDNcXHVBMDA0XFx1QTAwNVxcdUEwMDZcXHVBMDA3XFx1QTAwOFxcdUEwMDlcXHVBMDBBXFx1QTAwQlxcdUEwMENcXHVBMDBEXFx1QTAwRVxcdUEwMEZcXHVBMDEwXFx1QTAxMVxcdUEwMTJcXHVBMDEzXFx1QTAxNFxcdUEwMTZcXHVBMDE3XFx1QTAxOFxcdUEwMTlcXHVBMDFBXFx1QTAxQlxcdUEwMUNcXHVBMDFEXFx1QTAxRVxcdUEwMUZcXHVBMDIwXFx1QTAyMVxcdUEwMjJcXHVBMDIzXFx1QTAyNFxcdUEwMjVcXHVBMDI2XFx1QTAyN1xcdUEwMjhcXHVBMDI5XFx1QTAyQVxcdUEwMkJcXHVBMDJDXFx1QTAyRFxcdUEwMkVcXHVBMDJGXFx1QTAzMFxcdUEwMzFcXHVBMDMyXFx1QTAzM1xcdUEwMzRcXHVBMDM1XFx1QTAzNlxcdUEwMzdcXHVBMDM4XFx1QTAzOVxcdUEwM0FcXHVBMDNCXFx1QTAzQ1xcdUEwM0RcXHVBMDNFXFx1QTAzRlxcdUEwNDBcXHVBMDQxXFx1QTA0MlxcdUEwNDNcXHVBMDQ0XFx1QTA0NVxcdUEwNDZcXHVBMDQ3XFx1QTA0OFxcdUEwNDlcXHVBMDRBXFx1QTA0QlxcdUEwNENcXHVBMDREXFx1QTA0RVxcdUEwNEZcXHVBMDUwXFx1QTA1MVxcdUEwNTJcXHVBMDUzXFx1QTA1NFxcdUEwNTVcXHVBMDU2XFx1QTA1N1xcdUEwNThcXHVBMDU5XFx1QTA1QVxcdUEwNUJcXHVBMDVDXFx1QTA1RFxcdUEwNUVcXHVBMDVGXFx1QTA2MFxcdUEwNjFcXHVBMDYyXFx1QTA2M1xcdUEwNjRcXHVBMDY1XFx1QTA2NlxcdUEwNjdcXHVBMDY4XFx1QTA2OVxcdUEwNkFcXHVBMDZCXFx1QTA2Q1xcdUEwNkRcXHVBMDZFXFx1QTA2RlxcdUEwNzBcXHVBMDcxXFx1QTA3MlxcdUEwNzNcXHVBMDc0XFx1QTA3NVxcdUEwNzZcXHVBMDc3XFx1QTA3OFxcdUEwNzlcXHVBMDdBXFx1QTA3QlxcdUEwN0NcXHVBMDdEXFx1QTA3RVxcdUEwN0ZcXHVBMDgwXFx1QTA4MVxcdUEwODJcXHVBMDgzXFx1QTA4NFxcdUEwODVcXHVBMDg2XFx1QTA4N1xcdUEwODhcXHVBMDg5XFx1QTA4QVxcdUEwOEJcXHVBMDhDXFx1QTA4RFxcdUEwOEVcXHVBMDhGXFx1QTA5MFxcdUEwOTFcXHVBMDkyXFx1QTA5M1xcdUEwOTRcXHVBMDk1XFx1QTA5NlxcdUEwOTdcXHVBMDk4XFx1QTA5OVxcdUEwOUFcXHVBMDlCXFx1QTA5Q1xcdUEwOURcXHVBMDlFXFx1QTA5RlxcdUEwQTBcXHVBMEExXFx1QTBBMlxcdUEwQTNcXHVBMEE0XFx1QTBBNVxcdUEwQTZcXHVBMEE3XFx1QTBBOFxcdUEwQTlcXHVBMEFBXFx1QTBBQlxcdUEwQUNcXHVBMEFEXFx1QTBBRVxcdUEwQUZcXHVBMEIwXFx1QTBCMVxcdUEwQjJcXHVBMEIzXFx1QTBCNFxcdUEwQjVcXHVBMEI2XFx1QTBCN1xcdUEwQjhcXHVBMEI5XFx1QTBCQVxcdUEwQkJcXHVBMEJDXFx1QTBCRFxcdUEwQkVcXHVBMEJGXFx1QTBDMFxcdUEwQzFcXHVBMEMyXFx1QTBDM1xcdUEwQzRcXHVBMEM1XFx1QTBDNlxcdUEwQzdcXHVBMEM4XFx1QTBDOVxcdUEwQ0FcXHVBMENCXFx1QTBDQ1xcdUEwQ0RcXHVBMENFXFx1QTBDRlxcdUEwRDBcXHVBMEQxXFx1QTBEMlxcdUEwRDNcXHVBMEQ0XFx1QTBENVxcdUEwRDZcXHVBMEQ3XFx1QTBEOFxcdUEwRDlcXHVBMERBXFx1QTBEQlxcdUEwRENcXHVBMEREXFx1QTBERVxcdUEwREZcXHVBMEUwXFx1QTBFMVxcdUEwRTJcXHVBMEUzXFx1QTBFNFxcdUEwRTVcXHVBMEU2XFx1QTBFN1xcdUEwRThcXHVBMEU5XFx1QTBFQVxcdUEwRUJcXHVBMEVDXFx1QTBFRFxcdUEwRUVcXHVBMEVGXFx1QTBGMFxcdUEwRjFcXHVBMEYyXFx1QTBGM1xcdUEwRjRcXHVBMEY1XFx1QTBGNlxcdUEwRjdcXHVBMEY4XFx1QTBGOVxcdUEwRkFcXHVBMEZCXFx1QTBGQ1xcdUEwRkRcXHVBMEZFXFx1QTBGRlxcdUExMDBcXHVBMTAxXFx1QTEwMlxcdUExMDNcXHVBMTA0XFx1QTEwNVxcdUExMDZcXHVBMTA3XFx1QTEwOFxcdUExMDlcXHVBMTBBXFx1QTEwQlxcdUExMENcXHVBMTBEXFx1QTEwRVxcdUExMEZcXHVBMTEwXFx1QTExMVxcdUExMTJcXHVBMTEzXFx1QTExNFxcdUExMTVcXHVBMTE2XFx1QTExN1xcdUExMThcXHVBMTE5XFx1QTExQVxcdUExMUJcXHVBMTFDXFx1QTExRFxcdUExMUVcXHVBMTFGXFx1QTEyMFxcdUExMjFcXHVBMTIyXFx1QTEyM1xcdUExMjRcXHVBMTI1XFx1QTEyNlxcdUExMjdcXHVBMTI4XFx1QTEyOVxcdUExMkFcXHVBMTJCXFx1QTEyQ1xcdUExMkRcXHVBMTJFXFx1QTEyRlxcdUExMzBcXHVBMTMxXFx1QTEzMlxcdUExMzNcXHVBMTM0XFx1QTEzNVxcdUExMzZcXHVBMTM3XFx1QTEzOFxcdUExMzlcXHVBMTNBXFx1QTEzQlxcdUExM0NcXHVBMTNEXFx1QTEzRVxcdUExM0ZcXHVBMTQwXFx1QTE0MVxcdUExNDJcXHVBMTQzXFx1QTE0NFxcdUExNDVcXHVBMTQ2XFx1QTE0N1xcdUExNDhcXHVBMTQ5XFx1QTE0QVxcdUExNEJcXHVBMTRDXFx1QTE0RFxcdUExNEVcXHVBMTRGXFx1QTE1MFxcdUExNTFcXHVBMTUyXFx1QTE1M1xcdUExNTRcXHVBMTU1XFx1QTE1NlxcdUExNTdcXHVBMTU4XFx1QTE1OVxcdUExNUFcXHVBMTVCXFx1QTE1Q1xcdUExNURcXHVBMTVFXFx1QTE1RlxcdUExNjBcXHVBMTYxXFx1QTE2MlxcdUExNjNcXHVBMTY0XFx1QTE2NVxcdUExNjZcXHVBMTY3XFx1QTE2OFxcdUExNjlcXHVBMTZBXFx1QTE2QlxcdUExNkNcXHVBMTZEXFx1QTE2RVxcdUExNkZcXHVBMTcwXFx1QTE3MVxcdUExNzJcXHVBMTczXFx1QTE3NFxcdUExNzVcXHVBMTc2XFx1QTE3N1xcdUExNzhcXHVBMTc5XFx1QTE3QVxcdUExN0JcXHVBMTdDXFx1QTE3RFxcdUExN0VcXHVBMTdGXFx1QTE4MFxcdUExODFcXHVBMTgyXFx1QTE4M1xcdUExODRcXHVBMTg1XFx1QTE4NlxcdUExODdcXHVBMTg4XFx1QTE4OVxcdUExOEFcXHVBMThCXFx1QTE4Q1xcdUExOERcXHVBMThFXFx1QTE4RlxcdUExOTBcXHVBMTkxXFx1QTE5MlxcdUExOTNcXHVBMTk0XFx1QTE5NVxcdUExOTZcXHVBMTk3XFx1QTE5OFxcdUExOTlcXHVBMTlBXFx1QTE5QlxcdUExOUNcXHVBMTlEXFx1QTE5RVxcdUExOUZcXHVBMUEwXFx1QTFBMVxcdUExQTJcXHVBMUEzXFx1QTFBNFxcdUExQTVcXHVBMUE2XFx1QTFBN1xcdUExQThcXHVBMUE5XFx1QTFBQVxcdUExQUJcXHVBMUFDXFx1QTFBRFxcdUExQUVcXHVBMUFGXFx1QTFCMFxcdUExQjFcXHVBMUIyXFx1QTFCM1xcdUExQjRcXHVBMUI1XFx1QTFCNlxcdUExQjdcXHVBMUI4XFx1QTFCOVxcdUExQkFcXHVBMUJCXFx1QTFCQ1xcdUExQkRcXHVBMUJFXFx1QTFCRlxcdUExQzBcXHVBMUMxXFx1QTFDMlxcdUExQzNcXHVBMUM0XFx1QTFDNVxcdUExQzZcXHVBMUM3XFx1QTFDOFxcdUExQzlcXHVBMUNBXFx1QTFDQlxcdUExQ0NcXHVBMUNEXFx1QTFDRVxcdUExQ0ZcXHVBMUQwXFx1QTFEMVxcdUExRDJcXHVBMUQzXFx1QTFENFxcdUExRDVcXHVBMUQ2XFx1QTFEN1xcdUExRDhcXHVBMUQ5XFx1QTFEQVxcdUExREJcXHVBMURDXFx1QTFERFxcdUExREVcXHVBMURGXFx1QTFFMFxcdUExRTFcXHVBMUUyXFx1QTFFM1xcdUExRTRcXHVBMUU1XFx1QTFFNlxcdUExRTdcXHVBMUU4XFx1QTFFOVxcdUExRUFcXHVBMUVCXFx1QTFFQ1xcdUExRURcXHVBMUVFXFx1QTFFRlxcdUExRjBcXHVBMUYxXFx1QTFGMlxcdUExRjNcXHVBMUY0XFx1QTFGNVxcdUExRjZcXHVBMUY3XFx1QTFGOFxcdUExRjlcXHVBMUZBXFx1QTFGQlxcdUExRkNcXHVBMUZEXFx1QTFGRVxcdUExRkZcXHVBMjAwXFx1QTIwMVxcdUEyMDJcXHVBMjAzXFx1QTIwNFxcdUEyMDVcXHVBMjA2XFx1QTIwN1xcdUEyMDhcXHVBMjA5XFx1QTIwQVxcdUEyMEJcXHVBMjBDXFx1QTIwRFxcdUEyMEVcXHVBMjBGXFx1QTIxMFxcdUEyMTFcXHVBMjEyXFx1QTIxM1xcdUEyMTRcXHVBMjE1XFx1QTIxNlxcdUEyMTdcXHVBMjE4XFx1QTIxOVxcdUEyMUFcXHVBMjFCXFx1QTIxQ1xcdUEyMURcXHVBMjFFXFx1QTIxRlxcdUEyMjBcXHVBMjIxXFx1QTIyMlxcdUEyMjNcXHVBMjI0XFx1QTIyNVxcdUEyMjZcXHVBMjI3XFx1QTIyOFxcdUEyMjlcXHVBMjJBXFx1QTIyQlxcdUEyMkNcXHVBMjJEXFx1QTIyRVxcdUEyMkZcXHVBMjMwXFx1QTIzMVxcdUEyMzJcXHVBMjMzXFx1QTIzNFxcdUEyMzVcXHVBMjM2XFx1QTIzN1xcdUEyMzhcXHVBMjM5XFx1QTIzQVxcdUEyM0JcXHVBMjNDXFx1QTIzRFxcdUEyM0VcXHVBMjNGXFx1QTI0MFxcdUEyNDFcXHVBMjQyXFx1QTI0M1xcdUEyNDRcXHVBMjQ1XFx1QTI0NlxcdUEyNDdcXHVBMjQ4XFx1QTI0OVxcdUEyNEFcXHVBMjRCXFx1QTI0Q1xcdUEyNERcXHVBMjRFXFx1QTI0RlxcdUEyNTBcXHVBMjUxXFx1QTI1MlxcdUEyNTNcXHVBMjU0XFx1QTI1NVxcdUEyNTZcXHVBMjU3XFx1QTI1OFxcdUEyNTlcXHVBMjVBXFx1QTI1QlxcdUEyNUNcXHVBMjVEXFx1QTI1RVxcdUEyNUZcXHVBMjYwXFx1QTI2MVxcdUEyNjJcXHVBMjYzXFx1QTI2NFxcdUEyNjVcXHVBMjY2XFx1QTI2N1xcdUEyNjhcXHVBMjY5XFx1QTI2QVxcdUEyNkJcXHVBMjZDXFx1QTI2RFxcdUEyNkVcXHVBMjZGXFx1QTI3MFxcdUEyNzFcXHVBMjcyXFx1QTI3M1xcdUEyNzRcXHVBMjc1XFx1QTI3NlxcdUEyNzdcXHVBMjc4XFx1QTI3OVxcdUEyN0FcXHVBMjdCXFx1QTI3Q1xcdUEyN0RcXHVBMjdFXFx1QTI3RlxcdUEyODBcXHVBMjgxXFx1QTI4MlxcdUEyODNcXHVBMjg0XFx1QTI4NVxcdUEyODZcXHVBMjg3XFx1QTI4OFxcdUEyODlcXHVBMjhBXFx1QTI4QlxcdUEyOENcXHVBMjhEXFx1QTI4RVxcdUEyOEZcXHVBMjkwXFx1QTI5MVxcdUEyOTJcXHVBMjkzXFx1QTI5NFxcdUEyOTVcXHVBMjk2XFx1QTI5N1xcdUEyOThcXHVBMjk5XFx1QTI5QVxcdUEyOUJcXHVBMjlDXFx1QTI5RFxcdUEyOUVcXHVBMjlGXFx1QTJBMFxcdUEyQTFcXHVBMkEyXFx1QTJBM1xcdUEyQTRcXHVBMkE1XFx1QTJBNlxcdUEyQTdcXHVBMkE4XFx1QTJBOVxcdUEyQUFcXHVBMkFCXFx1QTJBQ1xcdUEyQURcXHVBMkFFXFx1QTJBRlxcdUEyQjBcXHVBMkIxXFx1QTJCMlxcdUEyQjNcXHVBMkI0XFx1QTJCNVxcdUEyQjZcXHVBMkI3XFx1QTJCOFxcdUEyQjlcXHVBMkJBXFx1QTJCQlxcdUEyQkNcXHVBMkJEXFx1QTJCRVxcdUEyQkZcXHVBMkMwXFx1QTJDMVxcdUEyQzJcXHVBMkMzXFx1QTJDNFxcdUEyQzVcXHVBMkM2XFx1QTJDN1xcdUEyQzhcXHVBMkM5XFx1QTJDQVxcdUEyQ0JcXHVBMkNDXFx1QTJDRFxcdUEyQ0VcXHVBMkNGXFx1QTJEMFxcdUEyRDFcXHVBMkQyXFx1QTJEM1xcdUEyRDRcXHVBMkQ1XFx1QTJENlxcdUEyRDdcXHVBMkQ4XFx1QTJEOVxcdUEyREFcXHVBMkRCXFx1QTJEQ1xcdUEyRERcXHVBMkRFXFx1QTJERlxcdUEyRTBcXHVBMkUxXFx1QTJFMlxcdUEyRTNcXHVBMkU0XFx1QTJFNVxcdUEyRTZcXHVBMkU3XFx1QTJFOFxcdUEyRTlcXHVBMkVBXFx1QTJFQlxcdUEyRUNcXHVBMkVEXFx1QTJFRVxcdUEyRUZcXHVBMkYwXFx1QTJGMVxcdUEyRjJcXHVBMkYzXFx1QTJGNFxcdUEyRjVcXHVBMkY2XFx1QTJGN1xcdUEyRjhcXHVBMkY5XFx1QTJGQVxcdUEyRkJcXHVBMkZDXFx1QTJGRFxcdUEyRkVcXHVBMkZGXFx1QTMwMFxcdUEzMDFcXHVBMzAyXFx1QTMwM1xcdUEzMDRcXHVBMzA1XFx1QTMwNlxcdUEzMDdcXHVBMzA4XFx1QTMwOVxcdUEzMEFcXHVBMzBCXFx1QTMwQ1xcdUEzMERcXHVBMzBFXFx1QTMwRlxcdUEzMTBcXHVBMzExXFx1QTMxMlxcdUEzMTNcXHVBMzE0XFx1QTMxNVxcdUEzMTZcXHVBMzE3XFx1QTMxOFxcdUEzMTlcXHVBMzFBXFx1QTMxQlxcdUEzMUNcXHVBMzFEXFx1QTMxRVxcdUEzMUZcXHVBMzIwXFx1QTMyMVxcdUEzMjJcXHVBMzIzXFx1QTMyNFxcdUEzMjVcXHVBMzI2XFx1QTMyN1xcdUEzMjhcXHVBMzI5XFx1QTMyQVxcdUEzMkJcXHVBMzJDXFx1QTMyRFxcdUEzMkVcXHVBMzJGXFx1QTMzMFxcdUEzMzFcXHVBMzMyXFx1QTMzM1xcdUEzMzRcXHVBMzM1XFx1QTMzNlxcdUEzMzdcXHVBMzM4XFx1QTMzOVxcdUEzM0FcXHVBMzNCXFx1QTMzQ1xcdUEzM0RcXHVBMzNFXFx1QTMzRlxcdUEzNDBcXHVBMzQxXFx1QTM0MlxcdUEzNDNcXHVBMzQ0XFx1QTM0NVxcdUEzNDZcXHVBMzQ3XFx1QTM0OFxcdUEzNDlcXHVBMzRBXFx1QTM0QlxcdUEzNENcXHVBMzREXFx1QTM0RVxcdUEzNEZcXHVBMzUwXFx1QTM1MVxcdUEzNTJcXHVBMzUzXFx1QTM1NFxcdUEzNTVcXHVBMzU2XFx1QTM1N1xcdUEzNThcXHVBMzU5XFx1QTM1QVxcdUEzNUJcXHVBMzVDXFx1QTM1RFxcdUEzNUVcXHVBMzVGXFx1QTM2MFxcdUEzNjFcXHVBMzYyXFx1QTM2M1xcdUEzNjRcXHVBMzY1XFx1QTM2NlxcdUEzNjdcXHVBMzY4XFx1QTM2OVxcdUEzNkFcXHVBMzZCXFx1QTM2Q1xcdUEzNkRcXHVBMzZFXFx1QTM2RlxcdUEzNzBcXHVBMzcxXFx1QTM3MlxcdUEzNzNcXHVBMzc0XFx1QTM3NVxcdUEzNzZcXHVBMzc3XFx1QTM3OFxcdUEzNzlcXHVBMzdBXFx1QTM3QlxcdUEzN0NcXHVBMzdEXFx1QTM3RVxcdUEzN0ZcXHVBMzgwXFx1QTM4MVxcdUEzODJcXHVBMzgzXFx1QTM4NFxcdUEzODVcXHVBMzg2XFx1QTM4N1xcdUEzODhcXHVBMzg5XFx1QTM4QVxcdUEzOEJcXHVBMzhDXFx1QTM4RFxcdUEzOEVcXHVBMzhGXFx1QTM5MFxcdUEzOTFcXHVBMzkyXFx1QTM5M1xcdUEzOTRcXHVBMzk1XFx1QTM5NlxcdUEzOTdcXHVBMzk4XFx1QTM5OVxcdUEzOUFcXHVBMzlCXFx1QTM5Q1xcdUEzOURcXHVBMzlFXFx1QTM5RlxcdUEzQTBcXHVBM0ExXFx1QTNBMlxcdUEzQTNcXHVBM0E0XFx1QTNBNVxcdUEzQTZcXHVBM0E3XFx1QTNBOFxcdUEzQTlcXHVBM0FBXFx1QTNBQlxcdUEzQUNcXHVBM0FEXFx1QTNBRVxcdUEzQUZcXHVBM0IwXFx1QTNCMVxcdUEzQjJcXHVBM0IzXFx1QTNCNFxcdUEzQjVcXHVBM0I2XFx1QTNCN1xcdUEzQjhcXHVBM0I5XFx1QTNCQVxcdUEzQkJcXHVBM0JDXFx1QTNCRFxcdUEzQkVcXHVBM0JGXFx1QTNDMFxcdUEzQzFcXHVBM0MyXFx1QTNDM1xcdUEzQzRcXHVBM0M1XFx1QTNDNlxcdUEzQzdcXHVBM0M4XFx1QTNDOVxcdUEzQ0FcXHVBM0NCXFx1QTNDQ1xcdUEzQ0RcXHVBM0NFXFx1QTNDRlxcdUEzRDBcXHVBM0QxXFx1QTNEMlxcdUEzRDNcXHVBM0Q0XFx1QTNENVxcdUEzRDZcXHVBM0Q3XFx1QTNEOFxcdUEzRDlcXHVBM0RBXFx1QTNEQlxcdUEzRENcXHVBM0REXFx1QTNERVxcdUEzREZcXHVBM0UwXFx1QTNFMVxcdUEzRTJcXHVBM0UzXFx1QTNFNFxcdUEzRTVcXHVBM0U2XFx1QTNFN1xcdUEzRThcXHVBM0U5XFx1QTNFQVxcdUEzRUJcXHVBM0VDXFx1QTNFRFxcdUEzRUVcXHVBM0VGXFx1QTNGMFxcdUEzRjFcXHVBM0YyXFx1QTNGM1xcdUEzRjRcXHVBM0Y1XFx1QTNGNlxcdUEzRjdcXHVBM0Y4XFx1QTNGOVxcdUEzRkFcXHVBM0ZCXFx1QTNGQ1xcdUEzRkRcXHVBM0ZFXFx1QTNGRlxcdUE0MDBcXHVBNDAxXFx1QTQwMlxcdUE0MDNcXHVBNDA0XFx1QTQwNVxcdUE0MDZcXHVBNDA3XFx1QTQwOFxcdUE0MDlcXHVBNDBBXFx1QTQwQlxcdUE0MENcXHVBNDBEXFx1QTQwRVxcdUE0MEZcXHVBNDEwXFx1QTQxMVxcdUE0MTJcXHVBNDEzXFx1QTQxNFxcdUE0MTVcXHVBNDE2XFx1QTQxN1xcdUE0MThcXHVBNDE5XFx1QTQxQVxcdUE0MUJcXHVBNDFDXFx1QTQxRFxcdUE0MUVcXHVBNDFGXFx1QTQyMFxcdUE0MjFcXHVBNDIyXFx1QTQyM1xcdUE0MjRcXHVBNDI1XFx1QTQyNlxcdUE0MjdcXHVBNDI4XFx1QTQyOVxcdUE0MkFcXHVBNDJCXFx1QTQyQ1xcdUE0MkRcXHVBNDJFXFx1QTQyRlxcdUE0MzBcXHVBNDMxXFx1QTQzMlxcdUE0MzNcXHVBNDM0XFx1QTQzNVxcdUE0MzZcXHVBNDM3XFx1QTQzOFxcdUE0MzlcXHVBNDNBXFx1QTQzQlxcdUE0M0NcXHVBNDNEXFx1QTQzRVxcdUE0M0ZcXHVBNDQwXFx1QTQ0MVxcdUE0NDJcXHVBNDQzXFx1QTQ0NFxcdUE0NDVcXHVBNDQ2XFx1QTQ0N1xcdUE0NDhcXHVBNDQ5XFx1QTQ0QVxcdUE0NEJcXHVBNDRDXFx1QTQ0RFxcdUE0NEVcXHVBNDRGXFx1QTQ1MFxcdUE0NTFcXHVBNDUyXFx1QTQ1M1xcdUE0NTRcXHVBNDU1XFx1QTQ1NlxcdUE0NTdcXHVBNDU4XFx1QTQ1OVxcdUE0NUFcXHVBNDVCXFx1QTQ1Q1xcdUE0NURcXHVBNDVFXFx1QTQ1RlxcdUE0NjBcXHVBNDYxXFx1QTQ2MlxcdUE0NjNcXHVBNDY0XFx1QTQ2NVxcdUE0NjZcXHVBNDY3XFx1QTQ2OFxcdUE0NjlcXHVBNDZBXFx1QTQ2QlxcdUE0NkNcXHVBNDZEXFx1QTQ2RVxcdUE0NkZcXHVBNDcwXFx1QTQ3MVxcdUE0NzJcXHVBNDczXFx1QTQ3NFxcdUE0NzVcXHVBNDc2XFx1QTQ3N1xcdUE0NzhcXHVBNDc5XFx1QTQ3QVxcdUE0N0JcXHVBNDdDXFx1QTQ3RFxcdUE0N0VcXHVBNDdGXFx1QTQ4MFxcdUE0ODFcXHVBNDgyXFx1QTQ4M1xcdUE0ODRcXHVBNDg1XFx1QTQ4NlxcdUE0ODdcXHVBNDg4XFx1QTQ4OVxcdUE0OEFcXHVBNDhCXFx1QTQ4Q1xcdUE1MDBcXHVBNTAxXFx1QTUwMlxcdUE1MDNcXHVBNTA0XFx1QTUwNVxcdUE1MDZcXHVBNTA3XFx1QTUwOFxcdUE1MDlcXHVBNTBBXFx1QTUwQlxcdUE1MENcXHVBNTBEXFx1QTUwRVxcdUE1MEZcXHVBNTEwXFx1QTUxMVxcdUE1MTJcXHVBNTEzXFx1QTUxNFxcdUE1MTVcXHVBNTE2XFx1QTUxN1xcdUE1MThcXHVBNTE5XFx1QTUxQVxcdUE1MUJcXHVBNTFDXFx1QTUxRFxcdUE1MUVcXHVBNTFGXFx1QTUyMFxcdUE1MjFcXHVBNTIyXFx1QTUyM1xcdUE1MjRcXHVBNTI1XFx1QTUyNlxcdUE1MjdcXHVBNTI4XFx1QTUyOVxcdUE1MkFcXHVBNTJCXFx1QTUyQ1xcdUE1MkRcXHVBNTJFXFx1QTUyRlxcdUE1MzBcXHVBNTMxXFx1QTUzMlxcdUE1MzNcXHVBNTM0XFx1QTUzNVxcdUE1MzZcXHVBNTM3XFx1QTUzOFxcdUE1MzlcXHVBNTNBXFx1QTUzQlxcdUE1M0NcXHVBNTNEXFx1QTUzRVxcdUE1M0ZcXHVBNTQwXFx1QTU0MVxcdUE1NDJcXHVBNTQzXFx1QTU0NFxcdUE1NDVcXHVBNTQ2XFx1QTU0N1xcdUE1NDhcXHVBNTQ5XFx1QTU0QVxcdUE1NEJcXHVBNTRDXFx1QTU0RFxcdUE1NEVcXHVBNTRGXFx1QTU1MFxcdUE1NTFcXHVBNTUyXFx1QTU1M1xcdUE1NTRcXHVBNTU1XFx1QTU1NlxcdUE1NTdcXHVBNTU4XFx1QTU1OVxcdUE1NUFcXHVBNTVCXFx1QTU1Q1xcdUE1NURcXHVBNTVFXFx1QTU1RlxcdUE1NjBcXHVBNTYxXFx1QTU2MlxcdUE1NjNcXHVBNTY0XFx1QTU2NVxcdUE1NjZcXHVBNTY3XFx1QTU2OFxcdUE1NjlcXHVBNTZBXFx1QTU2QlxcdUE1NkNcXHVBNTZEXFx1QTU2RVxcdUE1NkZcXHVBNTcwXFx1QTU3MVxcdUE1NzJcXHVBNTczXFx1QTU3NFxcdUE1NzVcXHVBNTc2XFx1QTU3N1xcdUE1NzhcXHVBNTc5XFx1QTU3QVxcdUE1N0JcXHVBNTdDXFx1QTU3RFxcdUE1N0VcXHVBNTdGXFx1QTU4MFxcdUE1ODFcXHVBNTgyXFx1QTU4M1xcdUE1ODRcXHVBNTg1XFx1QTU4NlxcdUE1ODdcXHVBNTg4XFx1QTU4OVxcdUE1OEFcXHVBNThCXFx1QTU4Q1xcdUE1OERcXHVBNThFXFx1QTU4RlxcdUE1OTBcXHVBNTkxXFx1QTU5MlxcdUE1OTNcXHVBNTk0XFx1QTU5NVxcdUE1OTZcXHVBNTk3XFx1QTU5OFxcdUE1OTlcXHVBNTlBXFx1QTU5QlxcdUE1OUNcXHVBNTlEXFx1QTU5RVxcdUE1OUZcXHVBNUEwXFx1QTVBMVxcdUE1QTJcXHVBNUEzXFx1QTVBNFxcdUE1QTVcXHVBNUE2XFx1QTVBN1xcdUE1QThcXHVBNUE5XFx1QTVBQVxcdUE1QUJcXHVBNUFDXFx1QTVBRFxcdUE1QUVcXHVBNUFGXFx1QTVCMFxcdUE1QjFcXHVBNUIyXFx1QTVCM1xcdUE1QjRcXHVBNUI1XFx1QTVCNlxcdUE1QjdcXHVBNUI4XFx1QTVCOVxcdUE1QkFcXHVBNUJCXFx1QTVCQ1xcdUE1QkRcXHVBNUJFXFx1QTVCRlxcdUE1QzBcXHVBNUMxXFx1QTVDMlxcdUE1QzNcXHVBNUM0XFx1QTVDNVxcdUE1QzZcXHVBNUM3XFx1QTVDOFxcdUE1QzlcXHVBNUNBXFx1QTVDQlxcdUE1Q0NcXHVBNUNEXFx1QTVDRVxcdUE1Q0ZcXHVBNUQwXFx1QTVEMVxcdUE1RDJcXHVBNUQzXFx1QTVENFxcdUE1RDVcXHVBNUQ2XFx1QTVEN1xcdUE1RDhcXHVBNUQ5XFx1QTVEQVxcdUE1REJcXHVBNURDXFx1QTVERFxcdUE1REVcXHVBNURGXFx1QTVFMFxcdUE1RTFcXHVBNUUyXFx1QTVFM1xcdUE1RTRcXHVBNUU1XFx1QTVFNlxcdUE1RTdcXHVBNUU4XFx1QTVFOVxcdUE1RUFcXHVBNUVCXFx1QTVFQ1xcdUE1RURcXHVBNUVFXFx1QTVFRlxcdUE1RjBcXHVBNUYxXFx1QTVGMlxcdUE1RjNcXHVBNUY0XFx1QTVGNVxcdUE1RjZcXHVBNUY3XFx1QTVGOFxcdUE1RjlcXHVBNUZBXFx1QTVGQlxcdUE1RkNcXHVBNUZEXFx1QTVGRVxcdUE1RkZcXHVBNjAwXFx1QTYwMVxcdUE2MDJcXHVBNjAzXFx1QTYwNFxcdUE2MDVcXHVBNjA2XFx1QTYwN1xcdUE2MDhcXHVBNjA5XFx1QTYwQVxcdUE2MEJcXHVBNjEwXFx1QTYxMVxcdUE2MTJcXHVBNjEzXFx1QTYxNFxcdUE2MTVcXHVBNjE2XFx1QTYxN1xcdUE2MThcXHVBNjE5XFx1QTYxQVxcdUE2MUJcXHVBNjFDXFx1QTYxRFxcdUE2MUVcXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjZFXFx1QTdGQlxcdUE3RkNcXHVBN0ZEXFx1QTdGRVxcdUE3RkZcXHVBODAwXFx1QTgwMVxcdUE4MDNcXHVBODA0XFx1QTgwNVxcdUE4MDdcXHVBODA4XFx1QTgwOVxcdUE4MEFcXHVBODBDXFx1QTgwRFxcdUE4MEVcXHVBODBGXFx1QTgxMFxcdUE4MTFcXHVBODEyXFx1QTgxM1xcdUE4MTRcXHVBODE1XFx1QTgxNlxcdUE4MTdcXHVBODE4XFx1QTgxOVxcdUE4MUFcXHVBODFCXFx1QTgxQ1xcdUE4MURcXHVBODFFXFx1QTgxRlxcdUE4MjBcXHVBODIxXFx1QTgyMlxcdUE4NDBcXHVBODQxXFx1QTg0MlxcdUE4NDNcXHVBODQ0XFx1QTg0NVxcdUE4NDZcXHVBODQ3XFx1QTg0OFxcdUE4NDlcXHVBODRBXFx1QTg0QlxcdUE4NENcXHVBODREXFx1QTg0RVxcdUE4NEZcXHVBODUwXFx1QTg1MVxcdUE4NTJcXHVBODUzXFx1QTg1NFxcdUE4NTVcXHVBODU2XFx1QTg1N1xcdUE4NThcXHVBODU5XFx1QTg1QVxcdUE4NUJcXHVBODVDXFx1QTg1RFxcdUE4NUVcXHVBODVGXFx1QTg2MFxcdUE4NjFcXHVBODYyXFx1QTg2M1xcdUE4NjRcXHVBODY1XFx1QTg2NlxcdUE4NjdcXHVBODY4XFx1QTg2OVxcdUE4NkFcXHVBODZCXFx1QTg2Q1xcdUE4NkRcXHVBODZFXFx1QTg2RlxcdUE4NzBcXHVBODcxXFx1QTg3MlxcdUE4NzNcXHVBODgyXFx1QTg4M1xcdUE4ODRcXHVBODg1XFx1QTg4NlxcdUE4ODdcXHVBODg4XFx1QTg4OVxcdUE4OEFcXHVBODhCXFx1QTg4Q1xcdUE4OERcXHVBODhFXFx1QTg4RlxcdUE4OTBcXHVBODkxXFx1QTg5MlxcdUE4OTNcXHVBODk0XFx1QTg5NVxcdUE4OTZcXHVBODk3XFx1QTg5OFxcdUE4OTlcXHVBODlBXFx1QTg5QlxcdUE4OUNcXHVBODlEXFx1QTg5RVxcdUE4OUZcXHVBOEEwXFx1QThBMVxcdUE4QTJcXHVBOEEzXFx1QThBNFxcdUE4QTVcXHVBOEE2XFx1QThBN1xcdUE4QThcXHVBOEE5XFx1QThBQVxcdUE4QUJcXHVBOEFDXFx1QThBRFxcdUE4QUVcXHVBOEFGXFx1QThCMFxcdUE4QjFcXHVBOEIyXFx1QThCM1xcdUE5MEFcXHVBOTBCXFx1QTkwQ1xcdUE5MERcXHVBOTBFXFx1QTkwRlxcdUE5MTBcXHVBOTExXFx1QTkxMlxcdUE5MTNcXHVBOTE0XFx1QTkxNVxcdUE5MTZcXHVBOTE3XFx1QTkxOFxcdUE5MTlcXHVBOTFBXFx1QTkxQlxcdUE5MUNcXHVBOTFEXFx1QTkxRVxcdUE5MUZcXHVBOTIwXFx1QTkyMVxcdUE5MjJcXHVBOTIzXFx1QTkyNFxcdUE5MjVcXHVBOTMwXFx1QTkzMVxcdUE5MzJcXHVBOTMzXFx1QTkzNFxcdUE5MzVcXHVBOTM2XFx1QTkzN1xcdUE5MzhcXHVBOTM5XFx1QTkzQVxcdUE5M0JcXHVBOTNDXFx1QTkzRFxcdUE5M0VcXHVBOTNGXFx1QTk0MFxcdUE5NDFcXHVBOTQyXFx1QTk0M1xcdUE5NDRcXHVBOTQ1XFx1QTk0NlxcdUFBMDBcXHVBQTAxXFx1QUEwMlxcdUFBMDNcXHVBQTA0XFx1QUEwNVxcdUFBMDZcXHVBQTA3XFx1QUEwOFxcdUFBMDlcXHVBQTBBXFx1QUEwQlxcdUFBMENcXHVBQTBEXFx1QUEwRVxcdUFBMEZcXHVBQTEwXFx1QUExMVxcdUFBMTJcXHVBQTEzXFx1QUExNFxcdUFBMTVcXHVBQTE2XFx1QUExN1xcdUFBMThcXHVBQTE5XFx1QUExQVxcdUFBMUJcXHVBQTFDXFx1QUExRFxcdUFBMUVcXHVBQTFGXFx1QUEyMFxcdUFBMjFcXHVBQTIyXFx1QUEyM1xcdUFBMjRcXHVBQTI1XFx1QUEyNlxcdUFBMjdcXHVBQTI4XFx1QUE0MFxcdUFBNDFcXHVBQTQyXFx1QUE0NFxcdUFBNDVcXHVBQTQ2XFx1QUE0N1xcdUFBNDhcXHVBQTQ5XFx1QUE0QVxcdUFBNEJcXHVBQzAwXFx1RDdBM1xcdUY5MDBcXHVGOTAxXFx1RjkwMlxcdUY5MDNcXHVGOTA0XFx1RjkwNVxcdUY5MDZcXHVGOTA3XFx1RjkwOFxcdUY5MDlcXHVGOTBBXFx1RjkwQlxcdUY5MENcXHVGOTBEXFx1RjkwRVxcdUY5MEZcXHVGOTEwXFx1RjkxMVxcdUY5MTJcXHVGOTEzXFx1RjkxNFxcdUY5MTVcXHVGOTE2XFx1RjkxN1xcdUY5MThcXHVGOTE5XFx1RjkxQVxcdUY5MUJcXHVGOTFDXFx1RjkxRFxcdUY5MUVcXHVGOTFGXFx1RjkyMFxcdUY5MjFcXHVGOTIyXFx1RjkyM1xcdUY5MjRcXHVGOTI1XFx1RjkyNlxcdUY5MjdcXHVGOTI4XFx1RjkyOVxcdUY5MkFcXHVGOTJCXFx1RjkyQ1xcdUY5MkRcXHVGOTJFXFx1RjkyRlxcdUY5MzBcXHVGOTMxXFx1RjkzMlxcdUY5MzNcXHVGOTM0XFx1RjkzNVxcdUY5MzZcXHVGOTM3XFx1RjkzOFxcdUY5MzlcXHVGOTNBXFx1RjkzQlxcdUY5M0NcXHVGOTNEXFx1RjkzRVxcdUY5M0ZcXHVGOTQwXFx1Rjk0MVxcdUY5NDJcXHVGOTQzXFx1Rjk0NFxcdUY5NDVcXHVGOTQ2XFx1Rjk0N1xcdUY5NDhcXHVGOTQ5XFx1Rjk0QVxcdUY5NEJcXHVGOTRDXFx1Rjk0RFxcdUY5NEVcXHVGOTRGXFx1Rjk1MFxcdUY5NTFcXHVGOTUyXFx1Rjk1M1xcdUY5NTRcXHVGOTU1XFx1Rjk1NlxcdUY5NTdcXHVGOTU4XFx1Rjk1OVxcdUY5NUFcXHVGOTVCXFx1Rjk1Q1xcdUY5NURcXHVGOTVFXFx1Rjk1RlxcdUY5NjBcXHVGOTYxXFx1Rjk2MlxcdUY5NjNcXHVGOTY0XFx1Rjk2NVxcdUY5NjZcXHVGOTY3XFx1Rjk2OFxcdUY5NjlcXHVGOTZBXFx1Rjk2QlxcdUY5NkNcXHVGOTZEXFx1Rjk2RVxcdUY5NkZcXHVGOTcwXFx1Rjk3MVxcdUY5NzJcXHVGOTczXFx1Rjk3NFxcdUY5NzVcXHVGOTc2XFx1Rjk3N1xcdUY5NzhcXHVGOTc5XFx1Rjk3QVxcdUY5N0JcXHVGOTdDXFx1Rjk3RFxcdUY5N0VcXHVGOTdGXFx1Rjk4MFxcdUY5ODFcXHVGOTgyXFx1Rjk4M1xcdUY5ODRcXHVGOTg1XFx1Rjk4NlxcdUY5ODdcXHVGOTg4XFx1Rjk4OVxcdUY5OEFcXHVGOThCXFx1Rjk4Q1xcdUY5OERcXHVGOThFXFx1Rjk4RlxcdUY5OTBcXHVGOTkxXFx1Rjk5MlxcdUY5OTNcXHVGOTk0XFx1Rjk5NVxcdUY5OTZcXHVGOTk3XFx1Rjk5OFxcdUY5OTlcXHVGOTlBXFx1Rjk5QlxcdUY5OUNcXHVGOTlEXFx1Rjk5RVxcdUY5OUZcXHVGOUEwXFx1RjlBMVxcdUY5QTJcXHVGOUEzXFx1RjlBNFxcdUY5QTVcXHVGOUE2XFx1RjlBN1xcdUY5QThcXHVGOUE5XFx1RjlBQVxcdUY5QUJcXHVGOUFDXFx1RjlBRFxcdUY5QUVcXHVGOUFGXFx1RjlCMFxcdUY5QjFcXHVGOUIyXFx1RjlCM1xcdUY5QjRcXHVGOUI1XFx1RjlCNlxcdUY5QjdcXHVGOUI4XFx1RjlCOVxcdUY5QkFcXHVGOUJCXFx1RjlCQ1xcdUY5QkRcXHVGOUJFXFx1RjlCRlxcdUY5QzBcXHVGOUMxXFx1RjlDMlxcdUY5QzNcXHVGOUM0XFx1RjlDNVxcdUY5QzZcXHVGOUM3XFx1RjlDOFxcdUY5QzlcXHVGOUNBXFx1RjlDQlxcdUY5Q0NcXHVGOUNEXFx1RjlDRVxcdUY5Q0ZcXHVGOUQwXFx1RjlEMVxcdUY5RDJcXHVGOUQzXFx1RjlENFxcdUY5RDVcXHVGOUQ2XFx1RjlEN1xcdUY5RDhcXHVGOUQ5XFx1RjlEQVxcdUY5REJcXHVGOURDXFx1RjlERFxcdUY5REVcXHVGOURGXFx1RjlFMFxcdUY5RTFcXHVGOUUyXFx1RjlFM1xcdUY5RTRcXHVGOUU1XFx1RjlFNlxcdUY5RTdcXHVGOUU4XFx1RjlFOVxcdUY5RUFcXHVGOUVCXFx1RjlFQ1xcdUY5RURcXHVGOUVFXFx1RjlFRlxcdUY5RjBcXHVGOUYxXFx1RjlGMlxcdUY5RjNcXHVGOUY0XFx1RjlGNVxcdUY5RjZcXHVGOUY3XFx1RjlGOFxcdUY5RjlcXHVGOUZBXFx1RjlGQlxcdUY5RkNcXHVGOUZEXFx1RjlGRVxcdUY5RkZcXHVGQTAwXFx1RkEwMVxcdUZBMDJcXHVGQTAzXFx1RkEwNFxcdUZBMDVcXHVGQTA2XFx1RkEwN1xcdUZBMDhcXHVGQTA5XFx1RkEwQVxcdUZBMEJcXHVGQTBDXFx1RkEwRFxcdUZBMEVcXHVGQTBGXFx1RkExMFxcdUZBMTFcXHVGQTEyXFx1RkExM1xcdUZBMTRcXHVGQTE1XFx1RkExNlxcdUZBMTdcXHVGQTE4XFx1RkExOVxcdUZBMUFcXHVGQTFCXFx1RkExQ1xcdUZBMURcXHVGQTFFXFx1RkExRlxcdUZBMjBcXHVGQTIxXFx1RkEyMlxcdUZBMjNcXHVGQTI0XFx1RkEyNVxcdUZBMjZcXHVGQTI3XFx1RkEyOFxcdUZBMjlcXHVGQTJBXFx1RkEyQlxcdUZBMkNcXHVGQTJEXFx1RkEzMFxcdUZBMzFcXHVGQTMyXFx1RkEzM1xcdUZBMzRcXHVGQTM1XFx1RkEzNlxcdUZBMzdcXHVGQTM4XFx1RkEzOVxcdUZBM0FcXHVGQTNCXFx1RkEzQ1xcdUZBM0RcXHVGQTNFXFx1RkEzRlxcdUZBNDBcXHVGQTQxXFx1RkE0MlxcdUZBNDNcXHVGQTQ0XFx1RkE0NVxcdUZBNDZcXHVGQTQ3XFx1RkE0OFxcdUZBNDlcXHVGQTRBXFx1RkE0QlxcdUZBNENcXHVGQTREXFx1RkE0RVxcdUZBNEZcXHVGQTUwXFx1RkE1MVxcdUZBNTJcXHVGQTUzXFx1RkE1NFxcdUZBNTVcXHVGQTU2XFx1RkE1N1xcdUZBNThcXHVGQTU5XFx1RkE1QVxcdUZBNUJcXHVGQTVDXFx1RkE1RFxcdUZBNUVcXHVGQTVGXFx1RkE2MFxcdUZBNjFcXHVGQTYyXFx1RkE2M1xcdUZBNjRcXHVGQTY1XFx1RkE2NlxcdUZBNjdcXHVGQTY4XFx1RkE2OVxcdUZBNkFcXHVGQTcwXFx1RkE3MVxcdUZBNzJcXHVGQTczXFx1RkE3NFxcdUZBNzVcXHVGQTc2XFx1RkE3N1xcdUZBNzhcXHVGQTc5XFx1RkE3QVxcdUZBN0JcXHVGQTdDXFx1RkE3RFxcdUZBN0VcXHVGQTdGXFx1RkE4MFxcdUZBODFcXHVGQTgyXFx1RkE4M1xcdUZBODRcXHVGQTg1XFx1RkE4NlxcdUZBODdcXHVGQTg4XFx1RkE4OVxcdUZBOEFcXHVGQThCXFx1RkE4Q1xcdUZBOERcXHVGQThFXFx1RkE4RlxcdUZBOTBcXHVGQTkxXFx1RkE5MlxcdUZBOTNcXHVGQTk0XFx1RkE5NVxcdUZBOTZcXHVGQTk3XFx1RkE5OFxcdUZBOTlcXHVGQTlBXFx1RkE5QlxcdUZBOUNcXHVGQTlEXFx1RkE5RVxcdUZBOUZcXHVGQUEwXFx1RkFBMVxcdUZBQTJcXHVGQUEzXFx1RkFBNFxcdUZBQTVcXHVGQUE2XFx1RkFBN1xcdUZBQThcXHVGQUE5XFx1RkFBQVxcdUZBQUJcXHVGQUFDXFx1RkFBRFxcdUZBQUVcXHVGQUFGXFx1RkFCMFxcdUZBQjFcXHVGQUIyXFx1RkFCM1xcdUZBQjRcXHVGQUI1XFx1RkFCNlxcdUZBQjdcXHVGQUI4XFx1RkFCOVxcdUZBQkFcXHVGQUJCXFx1RkFCQ1xcdUZBQkRcXHVGQUJFXFx1RkFCRlxcdUZBQzBcXHVGQUMxXFx1RkFDMlxcdUZBQzNcXHVGQUM0XFx1RkFDNVxcdUZBQzZcXHVGQUM3XFx1RkFDOFxcdUZBQzlcXHVGQUNBXFx1RkFDQlxcdUZBQ0NcXHVGQUNEXFx1RkFDRVxcdUZBQ0ZcXHVGQUQwXFx1RkFEMVxcdUZBRDJcXHVGQUQzXFx1RkFENFxcdUZBRDVcXHVGQUQ2XFx1RkFEN1xcdUZBRDhcXHVGQUQ5XFx1RkIxRFxcdUZCMUZcXHVGQjIwXFx1RkIyMVxcdUZCMjJcXHVGQjIzXFx1RkIyNFxcdUZCMjVcXHVGQjI2XFx1RkIyN1xcdUZCMjhcXHVGQjJBXFx1RkIyQlxcdUZCMkNcXHVGQjJEXFx1RkIyRVxcdUZCMkZcXHVGQjMwXFx1RkIzMVxcdUZCMzJcXHVGQjMzXFx1RkIzNFxcdUZCMzVcXHVGQjM2XFx1RkIzOFxcdUZCMzlcXHVGQjNBXFx1RkIzQlxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDZcXHVGQjQ3XFx1RkI0OFxcdUZCNDlcXHVGQjRBXFx1RkI0QlxcdUZCNENcXHVGQjREXFx1RkI0RVxcdUZCNEZcXHVGQjUwXFx1RkI1MVxcdUZCNTJcXHVGQjUzXFx1RkI1NFxcdUZCNTVcXHVGQjU2XFx1RkI1N1xcdUZCNThcXHVGQjU5XFx1RkI1QVxcdUZCNUJcXHVGQjVDXFx1RkI1RFxcdUZCNUVcXHVGQjVGXFx1RkI2MFxcdUZCNjFcXHVGQjYyXFx1RkI2M1xcdUZCNjRcXHVGQjY1XFx1RkI2NlxcdUZCNjdcXHVGQjY4XFx1RkI2OVxcdUZCNkFcXHVGQjZCXFx1RkI2Q1xcdUZCNkRcXHVGQjZFXFx1RkI2RlxcdUZCNzBcXHVGQjcxXFx1RkI3MlxcdUZCNzNcXHVGQjc0XFx1RkI3NVxcdUZCNzZcXHVGQjc3XFx1RkI3OFxcdUZCNzlcXHVGQjdBXFx1RkI3QlxcdUZCN0NcXHVGQjdEXFx1RkI3RVxcdUZCN0ZcXHVGQjgwXFx1RkI4MVxcdUZCODJcXHVGQjgzXFx1RkI4NFxcdUZCODVcXHVGQjg2XFx1RkI4N1xcdUZCODhcXHVGQjg5XFx1RkI4QVxcdUZCOEJcXHVGQjhDXFx1RkI4RFxcdUZCOEVcXHVGQjhGXFx1RkI5MFxcdUZCOTFcXHVGQjkyXFx1RkI5M1xcdUZCOTRcXHVGQjk1XFx1RkI5NlxcdUZCOTdcXHVGQjk4XFx1RkI5OVxcdUZCOUFcXHVGQjlCXFx1RkI5Q1xcdUZCOURcXHVGQjlFXFx1RkI5RlxcdUZCQTBcXHVGQkExXFx1RkJBMlxcdUZCQTNcXHVGQkE0XFx1RkJBNVxcdUZCQTZcXHVGQkE3XFx1RkJBOFxcdUZCQTlcXHVGQkFBXFx1RkJBQlxcdUZCQUNcXHVGQkFEXFx1RkJBRVxcdUZCQUZcXHVGQkIwXFx1RkJCMVxcdUZCRDNcXHVGQkQ0XFx1RkJENVxcdUZCRDZcXHVGQkQ3XFx1RkJEOFxcdUZCRDlcXHVGQkRBXFx1RkJEQlxcdUZCRENcXHVGQkREXFx1RkJERVxcdUZCREZcXHVGQkUwXFx1RkJFMVxcdUZCRTJcXHVGQkUzXFx1RkJFNFxcdUZCRTVcXHVGQkU2XFx1RkJFN1xcdUZCRThcXHVGQkU5XFx1RkJFQVxcdUZCRUJcXHVGQkVDXFx1RkJFRFxcdUZCRUVcXHVGQkVGXFx1RkJGMFxcdUZCRjFcXHVGQkYyXFx1RkJGM1xcdUZCRjRcXHVGQkY1XFx1RkJGNlxcdUZCRjdcXHVGQkY4XFx1RkJGOVxcdUZCRkFcXHVGQkZCXFx1RkJGQ1xcdUZCRkRcXHVGQkZFXFx1RkJGRlxcdUZDMDBcXHVGQzAxXFx1RkMwMlxcdUZDMDNcXHVGQzA0XFx1RkMwNVxcdUZDMDZcXHVGQzA3XFx1RkMwOFxcdUZDMDlcXHVGQzBBXFx1RkMwQlxcdUZDMENcXHVGQzBEXFx1RkMwRVxcdUZDMEZcXHVGQzEwXFx1RkMxMVxcdUZDMTJcXHVGQzEzXFx1RkMxNFxcdUZDMTVcXHVGQzE2XFx1RkMxN1xcdUZDMThcXHVGQzE5XFx1RkMxQVxcdUZDMUJcXHVGQzFDXFx1RkMxRFxcdUZDMUVcXHVGQzFGXFx1RkMyMFxcdUZDMjFcXHVGQzIyXFx1RkMyM1xcdUZDMjRcXHVGQzI1XFx1RkMyNlxcdUZDMjdcXHVGQzI4XFx1RkMyOVxcdUZDMkFcXHVGQzJCXFx1RkMyQ1xcdUZDMkRcXHVGQzJFXFx1RkMyRlxcdUZDMzBcXHVGQzMxXFx1RkMzMlxcdUZDMzNcXHVGQzM0XFx1RkMzNVxcdUZDMzZcXHVGQzM3XFx1RkMzOFxcdUZDMzlcXHVGQzNBXFx1RkMzQlxcdUZDM0NcXHVGQzNEXFx1RkMzRVxcdUZDM0ZcXHVGQzQwXFx1RkM0MVxcdUZDNDJcXHVGQzQzXFx1RkM0NFxcdUZDNDVcXHVGQzQ2XFx1RkM0N1xcdUZDNDhcXHVGQzQ5XFx1RkM0QVxcdUZDNEJcXHVGQzRDXFx1RkM0RFxcdUZDNEVcXHVGQzRGXFx1RkM1MFxcdUZDNTFcXHVGQzUyXFx1RkM1M1xcdUZDNTRcXHVGQzU1XFx1RkM1NlxcdUZDNTdcXHVGQzU4XFx1RkM1OVxcdUZDNUFcXHVGQzVCXFx1RkM1Q1xcdUZDNURcXHVGQzVFXFx1RkM1RlxcdUZDNjBcXHVGQzYxXFx1RkM2MlxcdUZDNjNcXHVGQzY0XFx1RkM2NVxcdUZDNjZcXHVGQzY3XFx1RkM2OFxcdUZDNjlcXHVGQzZBXFx1RkM2QlxcdUZDNkNcXHVGQzZEXFx1RkM2RVxcdUZDNkZcXHVGQzcwXFx1RkM3MVxcdUZDNzJcXHVGQzczXFx1RkM3NFxcdUZDNzVcXHVGQzc2XFx1RkM3N1xcdUZDNzhcXHVGQzc5XFx1RkM3QVxcdUZDN0JcXHVGQzdDXFx1RkM3RFxcdUZDN0VcXHVGQzdGXFx1RkM4MFxcdUZDODFcXHVGQzgyXFx1RkM4M1xcdUZDODRcXHVGQzg1XFx1RkM4NlxcdUZDODdcXHVGQzg4XFx1RkM4OVxcdUZDOEFcXHVGQzhCXFx1RkM4Q1xcdUZDOERcXHVGQzhFXFx1RkM4RlxcdUZDOTBcXHVGQzkxXFx1RkM5MlxcdUZDOTNcXHVGQzk0XFx1RkM5NVxcdUZDOTZcXHVGQzk3XFx1RkM5OFxcdUZDOTlcXHVGQzlBXFx1RkM5QlxcdUZDOUNcXHVGQzlEXFx1RkM5RVxcdUZDOUZcXHVGQ0EwXFx1RkNBMVxcdUZDQTJcXHVGQ0EzXFx1RkNBNFxcdUZDQTVcXHVGQ0E2XFx1RkNBN1xcdUZDQThcXHVGQ0E5XFx1RkNBQVxcdUZDQUJcXHVGQ0FDXFx1RkNBRFxcdUZDQUVcXHVGQ0FGXFx1RkNCMFxcdUZDQjFcXHVGQ0IyXFx1RkNCM1xcdUZDQjRcXHVGQ0I1XFx1RkNCNlxcdUZDQjdcXHVGQ0I4XFx1RkNCOVxcdUZDQkFcXHVGQ0JCXFx1RkNCQ1xcdUZDQkRcXHVGQ0JFXFx1RkNCRlxcdUZDQzBcXHVGQ0MxXFx1RkNDMlxcdUZDQzNcXHVGQ0M0XFx1RkNDNVxcdUZDQzZcXHVGQ0M3XFx1RkNDOFxcdUZDQzlcXHVGQ0NBXFx1RkNDQlxcdUZDQ0NcXHVGQ0NEXFx1RkNDRVxcdUZDQ0ZcXHVGQ0QwXFx1RkNEMVxcdUZDRDJcXHVGQ0QzXFx1RkNENFxcdUZDRDVcXHVGQ0Q2XFx1RkNEN1xcdUZDRDhcXHVGQ0Q5XFx1RkNEQVxcdUZDREJcXHVGQ0RDXFx1RkNERFxcdUZDREVcXHVGQ0RGXFx1RkNFMFxcdUZDRTFcXHVGQ0UyXFx1RkNFM1xcdUZDRTRcXHVGQ0U1XFx1RkNFNlxcdUZDRTdcXHVGQ0U4XFx1RkNFOVxcdUZDRUFcXHVGQ0VCXFx1RkNFQ1xcdUZDRURcXHVGQ0VFXFx1RkNFRlxcdUZDRjBcXHVGQ0YxXFx1RkNGMlxcdUZDRjNcXHVGQ0Y0XFx1RkNGNVxcdUZDRjZcXHVGQ0Y3XFx1RkNGOFxcdUZDRjlcXHVGQ0ZBXFx1RkNGQlxcdUZDRkNcXHVGQ0ZEXFx1RkNGRVxcdUZDRkZcXHVGRDAwXFx1RkQwMVxcdUZEMDJcXHVGRDAzXFx1RkQwNFxcdUZEMDVcXHVGRDA2XFx1RkQwN1xcdUZEMDhcXHVGRDA5XFx1RkQwQVxcdUZEMEJcXHVGRDBDXFx1RkQwRFxcdUZEMEVcXHVGRDBGXFx1RkQxMFxcdUZEMTFcXHVGRDEyXFx1RkQxM1xcdUZEMTRcXHVGRDE1XFx1RkQxNlxcdUZEMTdcXHVGRDE4XFx1RkQxOVxcdUZEMUFcXHVGRDFCXFx1RkQxQ1xcdUZEMURcXHVGRDFFXFx1RkQxRlxcdUZEMjBcXHVGRDIxXFx1RkQyMlxcdUZEMjNcXHVGRDI0XFx1RkQyNVxcdUZEMjZcXHVGRDI3XFx1RkQyOFxcdUZEMjlcXHVGRDJBXFx1RkQyQlxcdUZEMkNcXHVGRDJEXFx1RkQyRVxcdUZEMkZcXHVGRDMwXFx1RkQzMVxcdUZEMzJcXHVGRDMzXFx1RkQzNFxcdUZEMzVcXHVGRDM2XFx1RkQzN1xcdUZEMzhcXHVGRDM5XFx1RkQzQVxcdUZEM0JcXHVGRDNDXFx1RkQzRFxcdUZENTBcXHVGRDUxXFx1RkQ1MlxcdUZENTNcXHVGRDU0XFx1RkQ1NVxcdUZENTZcXHVGRDU3XFx1RkQ1OFxcdUZENTlcXHVGRDVBXFx1RkQ1QlxcdUZENUNcXHVGRDVEXFx1RkQ1RVxcdUZENUZcXHVGRDYwXFx1RkQ2MVxcdUZENjJcXHVGRDYzXFx1RkQ2NFxcdUZENjVcXHVGRDY2XFx1RkQ2N1xcdUZENjhcXHVGRDY5XFx1RkQ2QVxcdUZENkJcXHVGRDZDXFx1RkQ2RFxcdUZENkVcXHVGRDZGXFx1RkQ3MFxcdUZENzFcXHVGRDcyXFx1RkQ3M1xcdUZENzRcXHVGRDc1XFx1RkQ3NlxcdUZENzdcXHVGRDc4XFx1RkQ3OVxcdUZEN0FcXHVGRDdCXFx1RkQ3Q1xcdUZEN0RcXHVGRDdFXFx1RkQ3RlxcdUZEODBcXHVGRDgxXFx1RkQ4MlxcdUZEODNcXHVGRDg0XFx1RkQ4NVxcdUZEODZcXHVGRDg3XFx1RkQ4OFxcdUZEODlcXHVGRDhBXFx1RkQ4QlxcdUZEOENcXHVGRDhEXFx1RkQ4RVxcdUZEOEZcXHVGRDkyXFx1RkQ5M1xcdUZEOTRcXHVGRDk1XFx1RkQ5NlxcdUZEOTdcXHVGRDk4XFx1RkQ5OVxcdUZEOUFcXHVGRDlCXFx1RkQ5Q1xcdUZEOURcXHVGRDlFXFx1RkQ5RlxcdUZEQTBcXHVGREExXFx1RkRBMlxcdUZEQTNcXHVGREE0XFx1RkRBNVxcdUZEQTZcXHVGREE3XFx1RkRBOFxcdUZEQTlcXHVGREFBXFx1RkRBQlxcdUZEQUNcXHVGREFEXFx1RkRBRVxcdUZEQUZcXHVGREIwXFx1RkRCMVxcdUZEQjJcXHVGREIzXFx1RkRCNFxcdUZEQjVcXHVGREI2XFx1RkRCN1xcdUZEQjhcXHVGREI5XFx1RkRCQVxcdUZEQkJcXHVGREJDXFx1RkRCRFxcdUZEQkVcXHVGREJGXFx1RkRDMFxcdUZEQzFcXHVGREMyXFx1RkRDM1xcdUZEQzRcXHVGREM1XFx1RkRDNlxcdUZEQzdcXHVGREYwXFx1RkRGMVxcdUZERjJcXHVGREYzXFx1RkRGNFxcdUZERjVcXHVGREY2XFx1RkRGN1xcdUZERjhcXHVGREY5XFx1RkRGQVxcdUZERkJcXHVGRTcwXFx1RkU3MVxcdUZFNzJcXHVGRTczXFx1RkU3NFxcdUZFNzZcXHVGRTc3XFx1RkU3OFxcdUZFNzlcXHVGRTdBXFx1RkU3QlxcdUZFN0NcXHVGRTdEXFx1RkU3RVxcdUZFN0ZcXHVGRTgwXFx1RkU4MVxcdUZFODJcXHVGRTgzXFx1RkU4NFxcdUZFODVcXHVGRTg2XFx1RkU4N1xcdUZFODhcXHVGRTg5XFx1RkU4QVxcdUZFOEJcXHVGRThDXFx1RkU4RFxcdUZFOEVcXHVGRThGXFx1RkU5MFxcdUZFOTFcXHVGRTkyXFx1RkU5M1xcdUZFOTRcXHVGRTk1XFx1RkU5NlxcdUZFOTdcXHVGRTk4XFx1RkU5OVxcdUZFOUFcXHVGRTlCXFx1RkU5Q1xcdUZFOURcXHVGRTlFXFx1RkU5RlxcdUZFQTBcXHVGRUExXFx1RkVBMlxcdUZFQTNcXHVGRUE0XFx1RkVBNVxcdUZFQTZcXHVGRUE3XFx1RkVBOFxcdUZFQTlcXHVGRUFBXFx1RkVBQlxcdUZFQUNcXHVGRUFEXFx1RkVBRVxcdUZFQUZcXHVGRUIwXFx1RkVCMVxcdUZFQjJcXHVGRUIzXFx1RkVCNFxcdUZFQjVcXHVGRUI2XFx1RkVCN1xcdUZFQjhcXHVGRUI5XFx1RkVCQVxcdUZFQkJcXHVGRUJDXFx1RkVCRFxcdUZFQkVcXHVGRUJGXFx1RkVDMFxcdUZFQzFcXHVGRUMyXFx1RkVDM1xcdUZFQzRcXHVGRUM1XFx1RkVDNlxcdUZFQzdcXHVGRUM4XFx1RkVDOVxcdUZFQ0FcXHVGRUNCXFx1RkVDQ1xcdUZFQ0RcXHVGRUNFXFx1RkVDRlxcdUZFRDBcXHVGRUQxXFx1RkVEMlxcdUZFRDNcXHVGRUQ0XFx1RkVENVxcdUZFRDZcXHVGRUQ3XFx1RkVEOFxcdUZFRDlcXHVGRURBXFx1RkVEQlxcdUZFRENcXHVGRUREXFx1RkVERVxcdUZFREZcXHVGRUUwXFx1RkVFMVxcdUZFRTJcXHVGRUUzXFx1RkVFNFxcdUZFRTVcXHVGRUU2XFx1RkVFN1xcdUZFRThcXHVGRUU5XFx1RkVFQVxcdUZFRUJcXHVGRUVDXFx1RkVFRFxcdUZFRUVcXHVGRUVGXFx1RkVGMFxcdUZFRjFcXHVGRUYyXFx1RkVGM1xcdUZFRjRcXHVGRUY1XFx1RkVGNlxcdUZFRjdcXHVGRUY4XFx1RkVGOVxcdUZFRkFcXHVGRUZCXFx1RkVGQ1xcdUZGNjZcXHVGRjY3XFx1RkY2OFxcdUZGNjlcXHVGRjZBXFx1RkY2QlxcdUZGNkNcXHVGRjZEXFx1RkY2RVxcdUZGNkZcXHVGRjcxXFx1RkY3MlxcdUZGNzNcXHVGRjc0XFx1RkY3NVxcdUZGNzZcXHVGRjc3XFx1RkY3OFxcdUZGNzlcXHVGRjdBXFx1RkY3QlxcdUZGN0NcXHVGRjdEXFx1RkY3RVxcdUZGN0ZcXHVGRjgwXFx1RkY4MVxcdUZGODJcXHVGRjgzXFx1RkY4NFxcdUZGODVcXHVGRjg2XFx1RkY4N1xcdUZGODhcXHVGRjg5XFx1RkY4QVxcdUZGOEJcXHVGRjhDXFx1RkY4RFxcdUZGOEVcXHVGRjhGXFx1RkY5MFxcdUZGOTFcXHVGRjkyXFx1RkY5M1xcdUZGOTRcXHVGRjk1XFx1RkY5NlxcdUZGOTdcXHVGRjk4XFx1RkY5OVxcdUZGOUFcXHVGRjlCXFx1RkY5Q1xcdUZGOURcXHVGRkEwXFx1RkZBMVxcdUZGQTJcXHVGRkEzXFx1RkZBNFxcdUZGQTVcXHVGRkE2XFx1RkZBN1xcdUZGQThcXHVGRkE5XFx1RkZBQVxcdUZGQUJcXHVGRkFDXFx1RkZBRFxcdUZGQUVcXHVGRkFGXFx1RkZCMFxcdUZGQjFcXHVGRkIyXFx1RkZCM1xcdUZGQjRcXHVGRkI1XFx1RkZCNlxcdUZGQjdcXHVGRkI4XFx1RkZCOVxcdUZGQkFcXHVGRkJCXFx1RkZCQ1xcdUZGQkRcXHVGRkJFXFx1RkZDMlxcdUZGQzNcXHVGRkM0XFx1RkZDNVxcdUZGQzZcXHVGRkM3XFx1RkZDQVxcdUZGQ0JcXHVGRkNDXFx1RkZDRFxcdUZGQ0VcXHVGRkNGXFx1RkZEMlxcdUZGRDNcXHVGRkQ0XFx1RkZENVxcdUZGRDZcXHVGRkQ3XFx1RkZEQVxcdUZGREJcXHVGRkRDXS8sXG4gICAgICAgIHBlZyRjNzkgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW1xcXFx1MDFCQlxcXFx1MDFDMFxcXFx1MDFDMVxcXFx1MDFDMlxcXFx1MDFDM1xcXFx1MDI5NFxcXFx1MDVEMFxcXFx1MDVEMVxcXFx1MDVEMlxcXFx1MDVEM1xcXFx1MDVENFxcXFx1MDVENVxcXFx1MDVENlxcXFx1MDVEN1xcXFx1MDVEOFxcXFx1MDVEOVxcXFx1MDVEQVxcXFx1MDVEQlxcXFx1MDVEQ1xcXFx1MDVERFxcXFx1MDVERVxcXFx1MDVERlxcXFx1MDVFMFxcXFx1MDVFMVxcXFx1MDVFMlxcXFx1MDVFM1xcXFx1MDVFNFxcXFx1MDVFNVxcXFx1MDVFNlxcXFx1MDVFN1xcXFx1MDVFOFxcXFx1MDVFOVxcXFx1MDVFQVxcXFx1MDVGMFxcXFx1MDVGMVxcXFx1MDVGMlxcXFx1MDYyMVxcXFx1MDYyMlxcXFx1MDYyM1xcXFx1MDYyNFxcXFx1MDYyNVxcXFx1MDYyNlxcXFx1MDYyN1xcXFx1MDYyOFxcXFx1MDYyOVxcXFx1MDYyQVxcXFx1MDYyQlxcXFx1MDYyQ1xcXFx1MDYyRFxcXFx1MDYyRVxcXFx1MDYyRlxcXFx1MDYzMFxcXFx1MDYzMVxcXFx1MDYzMlxcXFx1MDYzM1xcXFx1MDYzNFxcXFx1MDYzNVxcXFx1MDYzNlxcXFx1MDYzN1xcXFx1MDYzOFxcXFx1MDYzOVxcXFx1MDYzQVxcXFx1MDYzQlxcXFx1MDYzQ1xcXFx1MDYzRFxcXFx1MDYzRVxcXFx1MDYzRlxcXFx1MDY0MVxcXFx1MDY0MlxcXFx1MDY0M1xcXFx1MDY0NFxcXFx1MDY0NVxcXFx1MDY0NlxcXFx1MDY0N1xcXFx1MDY0OFxcXFx1MDY0OVxcXFx1MDY0QVxcXFx1MDY2RVxcXFx1MDY2RlxcXFx1MDY3MVxcXFx1MDY3MlxcXFx1MDY3M1xcXFx1MDY3NFxcXFx1MDY3NVxcXFx1MDY3NlxcXFx1MDY3N1xcXFx1MDY3OFxcXFx1MDY3OVxcXFx1MDY3QVxcXFx1MDY3QlxcXFx1MDY3Q1xcXFx1MDY3RFxcXFx1MDY3RVxcXFx1MDY3RlxcXFx1MDY4MFxcXFx1MDY4MVxcXFx1MDY4MlxcXFx1MDY4M1xcXFx1MDY4NFxcXFx1MDY4NVxcXFx1MDY4NlxcXFx1MDY4N1xcXFx1MDY4OFxcXFx1MDY4OVxcXFx1MDY4QVxcXFx1MDY4QlxcXFx1MDY4Q1xcXFx1MDY4RFxcXFx1MDY4RVxcXFx1MDY4RlxcXFx1MDY5MFxcXFx1MDY5MVxcXFx1MDY5MlxcXFx1MDY5M1xcXFx1MDY5NFxcXFx1MDY5NVxcXFx1MDY5NlxcXFx1MDY5N1xcXFx1MDY5OFxcXFx1MDY5OVxcXFx1MDY5QVxcXFx1MDY5QlxcXFx1MDY5Q1xcXFx1MDY5RFxcXFx1MDY5RVxcXFx1MDY5RlxcXFx1MDZBMFxcXFx1MDZBMVxcXFx1MDZBMlxcXFx1MDZBM1xcXFx1MDZBNFxcXFx1MDZBNVxcXFx1MDZBNlxcXFx1MDZBN1xcXFx1MDZBOFxcXFx1MDZBOVxcXFx1MDZBQVxcXFx1MDZBQlxcXFx1MDZBQ1xcXFx1MDZBRFxcXFx1MDZBRVxcXFx1MDZBRlxcXFx1MDZCMFxcXFx1MDZCMVxcXFx1MDZCMlxcXFx1MDZCM1xcXFx1MDZCNFxcXFx1MDZCNVxcXFx1MDZCNlxcXFx1MDZCN1xcXFx1MDZCOFxcXFx1MDZCOVxcXFx1MDZCQVxcXFx1MDZCQlxcXFx1MDZCQ1xcXFx1MDZCRFxcXFx1MDZCRVxcXFx1MDZCRlxcXFx1MDZDMFxcXFx1MDZDMVxcXFx1MDZDMlxcXFx1MDZDM1xcXFx1MDZDNFxcXFx1MDZDNVxcXFx1MDZDNlxcXFx1MDZDN1xcXFx1MDZDOFxcXFx1MDZDOVxcXFx1MDZDQVxcXFx1MDZDQlxcXFx1MDZDQ1xcXFx1MDZDRFxcXFx1MDZDRVxcXFx1MDZDRlxcXFx1MDZEMFxcXFx1MDZEMVxcXFx1MDZEMlxcXFx1MDZEM1xcXFx1MDZENVxcXFx1MDZFRVxcXFx1MDZFRlxcXFx1MDZGQVxcXFx1MDZGQlxcXFx1MDZGQ1xcXFx1MDZGRlxcXFx1MDcxMFxcXFx1MDcxMlxcXFx1MDcxM1xcXFx1MDcxNFxcXFx1MDcxNVxcXFx1MDcxNlxcXFx1MDcxN1xcXFx1MDcxOFxcXFx1MDcxOVxcXFx1MDcxQVxcXFx1MDcxQlxcXFx1MDcxQ1xcXFx1MDcxRFxcXFx1MDcxRVxcXFx1MDcxRlxcXFx1MDcyMFxcXFx1MDcyMVxcXFx1MDcyMlxcXFx1MDcyM1xcXFx1MDcyNFxcXFx1MDcyNVxcXFx1MDcyNlxcXFx1MDcyN1xcXFx1MDcyOFxcXFx1MDcyOVxcXFx1MDcyQVxcXFx1MDcyQlxcXFx1MDcyQ1xcXFx1MDcyRFxcXFx1MDcyRVxcXFx1MDcyRlxcXFx1MDc0RFxcXFx1MDc0RVxcXFx1MDc0RlxcXFx1MDc1MFxcXFx1MDc1MVxcXFx1MDc1MlxcXFx1MDc1M1xcXFx1MDc1NFxcXFx1MDc1NVxcXFx1MDc1NlxcXFx1MDc1N1xcXFx1MDc1OFxcXFx1MDc1OVxcXFx1MDc1QVxcXFx1MDc1QlxcXFx1MDc1Q1xcXFx1MDc1RFxcXFx1MDc1RVxcXFx1MDc1RlxcXFx1MDc2MFxcXFx1MDc2MVxcXFx1MDc2MlxcXFx1MDc2M1xcXFx1MDc2NFxcXFx1MDc2NVxcXFx1MDc2NlxcXFx1MDc2N1xcXFx1MDc2OFxcXFx1MDc2OVxcXFx1MDc2QVxcXFx1MDc2QlxcXFx1MDc2Q1xcXFx1MDc2RFxcXFx1MDc2RVxcXFx1MDc2RlxcXFx1MDc3MFxcXFx1MDc3MVxcXFx1MDc3MlxcXFx1MDc3M1xcXFx1MDc3NFxcXFx1MDc3NVxcXFx1MDc3NlxcXFx1MDc3N1xcXFx1MDc3OFxcXFx1MDc3OVxcXFx1MDc3QVxcXFx1MDc3QlxcXFx1MDc3Q1xcXFx1MDc3RFxcXFx1MDc3RVxcXFx1MDc3RlxcXFx1MDc4MFxcXFx1MDc4MVxcXFx1MDc4MlxcXFx1MDc4M1xcXFx1MDc4NFxcXFx1MDc4NVxcXFx1MDc4NlxcXFx1MDc4N1xcXFx1MDc4OFxcXFx1MDc4OVxcXFx1MDc4QVxcXFx1MDc4QlxcXFx1MDc4Q1xcXFx1MDc4RFxcXFx1MDc4RVxcXFx1MDc4RlxcXFx1MDc5MFxcXFx1MDc5MVxcXFx1MDc5MlxcXFx1MDc5M1xcXFx1MDc5NFxcXFx1MDc5NVxcXFx1MDc5NlxcXFx1MDc5N1xcXFx1MDc5OFxcXFx1MDc5OVxcXFx1MDc5QVxcXFx1MDc5QlxcXFx1MDc5Q1xcXFx1MDc5RFxcXFx1MDc5RVxcXFx1MDc5RlxcXFx1MDdBMFxcXFx1MDdBMVxcXFx1MDdBMlxcXFx1MDdBM1xcXFx1MDdBNFxcXFx1MDdBNVxcXFx1MDdCMVxcXFx1MDdDQVxcXFx1MDdDQlxcXFx1MDdDQ1xcXFx1MDdDRFxcXFx1MDdDRVxcXFx1MDdDRlxcXFx1MDdEMFxcXFx1MDdEMVxcXFx1MDdEMlxcXFx1MDdEM1xcXFx1MDdENFxcXFx1MDdENVxcXFx1MDdENlxcXFx1MDdEN1xcXFx1MDdEOFxcXFx1MDdEOVxcXFx1MDdEQVxcXFx1MDdEQlxcXFx1MDdEQ1xcXFx1MDdERFxcXFx1MDdERVxcXFx1MDdERlxcXFx1MDdFMFxcXFx1MDdFMVxcXFx1MDdFMlxcXFx1MDdFM1xcXFx1MDdFNFxcXFx1MDdFNVxcXFx1MDdFNlxcXFx1MDdFN1xcXFx1MDdFOFxcXFx1MDdFOVxcXFx1MDdFQVxcXFx1MDkwNFxcXFx1MDkwNVxcXFx1MDkwNlxcXFx1MDkwN1xcXFx1MDkwOFxcXFx1MDkwOVxcXFx1MDkwQVxcXFx1MDkwQlxcXFx1MDkwQ1xcXFx1MDkwRFxcXFx1MDkwRVxcXFx1MDkwRlxcXFx1MDkxMFxcXFx1MDkxMVxcXFx1MDkxMlxcXFx1MDkxM1xcXFx1MDkxNFxcXFx1MDkxNVxcXFx1MDkxNlxcXFx1MDkxN1xcXFx1MDkxOFxcXFx1MDkxOVxcXFx1MDkxQVxcXFx1MDkxQlxcXFx1MDkxQ1xcXFx1MDkxRFxcXFx1MDkxRVxcXFx1MDkxRlxcXFx1MDkyMFxcXFx1MDkyMVxcXFx1MDkyMlxcXFx1MDkyM1xcXFx1MDkyNFxcXFx1MDkyNVxcXFx1MDkyNlxcXFx1MDkyN1xcXFx1MDkyOFxcXFx1MDkyOVxcXFx1MDkyQVxcXFx1MDkyQlxcXFx1MDkyQ1xcXFx1MDkyRFxcXFx1MDkyRVxcXFx1MDkyRlxcXFx1MDkzMFxcXFx1MDkzMVxcXFx1MDkzMlxcXFx1MDkzM1xcXFx1MDkzNFxcXFx1MDkzNVxcXFx1MDkzNlxcXFx1MDkzN1xcXFx1MDkzOFxcXFx1MDkzOVxcXFx1MDkzRFxcXFx1MDk1MFxcXFx1MDk1OFxcXFx1MDk1OVxcXFx1MDk1QVxcXFx1MDk1QlxcXFx1MDk1Q1xcXFx1MDk1RFxcXFx1MDk1RVxcXFx1MDk1RlxcXFx1MDk2MFxcXFx1MDk2MVxcXFx1MDk3MlxcXFx1MDk3QlxcXFx1MDk3Q1xcXFx1MDk3RFxcXFx1MDk3RVxcXFx1MDk3RlxcXFx1MDk4NVxcXFx1MDk4NlxcXFx1MDk4N1xcXFx1MDk4OFxcXFx1MDk4OVxcXFx1MDk4QVxcXFx1MDk4QlxcXFx1MDk4Q1xcXFx1MDk4RlxcXFx1MDk5MFxcXFx1MDk5M1xcXFx1MDk5NFxcXFx1MDk5NVxcXFx1MDk5NlxcXFx1MDk5N1xcXFx1MDk5OFxcXFx1MDk5OVxcXFx1MDk5QVxcXFx1MDk5QlxcXFx1MDk5Q1xcXFx1MDk5RFxcXFx1MDk5RVxcXFx1MDk5RlxcXFx1MDlBMFxcXFx1MDlBMVxcXFx1MDlBMlxcXFx1MDlBM1xcXFx1MDlBNFxcXFx1MDlBNVxcXFx1MDlBNlxcXFx1MDlBN1xcXFx1MDlBOFxcXFx1MDlBQVxcXFx1MDlBQlxcXFx1MDlBQ1xcXFx1MDlBRFxcXFx1MDlBRVxcXFx1MDlBRlxcXFx1MDlCMFxcXFx1MDlCMlxcXFx1MDlCNlxcXFx1MDlCN1xcXFx1MDlCOFxcXFx1MDlCOVxcXFx1MDlCRFxcXFx1MDlDRVxcXFx1MDlEQ1xcXFx1MDlERFxcXFx1MDlERlxcXFx1MDlFMFxcXFx1MDlFMVxcXFx1MDlGMFxcXFx1MDlGMVxcXFx1MEEwNVxcXFx1MEEwNlxcXFx1MEEwN1xcXFx1MEEwOFxcXFx1MEEwOVxcXFx1MEEwQVxcXFx1MEEwRlxcXFx1MEExMFxcXFx1MEExM1xcXFx1MEExNFxcXFx1MEExNVxcXFx1MEExNlxcXFx1MEExN1xcXFx1MEExOFxcXFx1MEExOVxcXFx1MEExQVxcXFx1MEExQlxcXFx1MEExQ1xcXFx1MEExRFxcXFx1MEExRVxcXFx1MEExRlxcXFx1MEEyMFxcXFx1MEEyMVxcXFx1MEEyMlxcXFx1MEEyM1xcXFx1MEEyNFxcXFx1MEEyNVxcXFx1MEEyNlxcXFx1MEEyN1xcXFx1MEEyOFxcXFx1MEEyQVxcXFx1MEEyQlxcXFx1MEEyQ1xcXFx1MEEyRFxcXFx1MEEyRVxcXFx1MEEyRlxcXFx1MEEzMFxcXFx1MEEzMlxcXFx1MEEzM1xcXFx1MEEzNVxcXFx1MEEzNlxcXFx1MEEzOFxcXFx1MEEzOVxcXFx1MEE1OVxcXFx1MEE1QVxcXFx1MEE1QlxcXFx1MEE1Q1xcXFx1MEE1RVxcXFx1MEE3MlxcXFx1MEE3M1xcXFx1MEE3NFxcXFx1MEE4NVxcXFx1MEE4NlxcXFx1MEE4N1xcXFx1MEE4OFxcXFx1MEE4OVxcXFx1MEE4QVxcXFx1MEE4QlxcXFx1MEE4Q1xcXFx1MEE4RFxcXFx1MEE4RlxcXFx1MEE5MFxcXFx1MEE5MVxcXFx1MEE5M1xcXFx1MEE5NFxcXFx1MEE5NVxcXFx1MEE5NlxcXFx1MEE5N1xcXFx1MEE5OFxcXFx1MEE5OVxcXFx1MEE5QVxcXFx1MEE5QlxcXFx1MEE5Q1xcXFx1MEE5RFxcXFx1MEE5RVxcXFx1MEE5RlxcXFx1MEFBMFxcXFx1MEFBMVxcXFx1MEFBMlxcXFx1MEFBM1xcXFx1MEFBNFxcXFx1MEFBNVxcXFx1MEFBNlxcXFx1MEFBN1xcXFx1MEFBOFxcXFx1MEFBQVxcXFx1MEFBQlxcXFx1MEFBQ1xcXFx1MEFBRFxcXFx1MEFBRVxcXFx1MEFBRlxcXFx1MEFCMFxcXFx1MEFCMlxcXFx1MEFCM1xcXFx1MEFCNVxcXFx1MEFCNlxcXFx1MEFCN1xcXFx1MEFCOFxcXFx1MEFCOVxcXFx1MEFCRFxcXFx1MEFEMFxcXFx1MEFFMFxcXFx1MEFFMVxcXFx1MEIwNVxcXFx1MEIwNlxcXFx1MEIwN1xcXFx1MEIwOFxcXFx1MEIwOVxcXFx1MEIwQVxcXFx1MEIwQlxcXFx1MEIwQ1xcXFx1MEIwRlxcXFx1MEIxMFxcXFx1MEIxM1xcXFx1MEIxNFxcXFx1MEIxNVxcXFx1MEIxNlxcXFx1MEIxN1xcXFx1MEIxOFxcXFx1MEIxOVxcXFx1MEIxQVxcXFx1MEIxQlxcXFx1MEIxQ1xcXFx1MEIxRFxcXFx1MEIxRVxcXFx1MEIxRlxcXFx1MEIyMFxcXFx1MEIyMVxcXFx1MEIyMlxcXFx1MEIyM1xcXFx1MEIyNFxcXFx1MEIyNVxcXFx1MEIyNlxcXFx1MEIyN1xcXFx1MEIyOFxcXFx1MEIyQVxcXFx1MEIyQlxcXFx1MEIyQ1xcXFx1MEIyRFxcXFx1MEIyRVxcXFx1MEIyRlxcXFx1MEIzMFxcXFx1MEIzMlxcXFx1MEIzM1xcXFx1MEIzNVxcXFx1MEIzNlxcXFx1MEIzN1xcXFx1MEIzOFxcXFx1MEIzOVxcXFx1MEIzRFxcXFx1MEI1Q1xcXFx1MEI1RFxcXFx1MEI1RlxcXFx1MEI2MFxcXFx1MEI2MVxcXFx1MEI3MVxcXFx1MEI4M1xcXFx1MEI4NVxcXFx1MEI4NlxcXFx1MEI4N1xcXFx1MEI4OFxcXFx1MEI4OVxcXFx1MEI4QVxcXFx1MEI4RVxcXFx1MEI4RlxcXFx1MEI5MFxcXFx1MEI5MlxcXFx1MEI5M1xcXFx1MEI5NFxcXFx1MEI5NVxcXFx1MEI5OVxcXFx1MEI5QVxcXFx1MEI5Q1xcXFx1MEI5RVxcXFx1MEI5RlxcXFx1MEJBM1xcXFx1MEJBNFxcXFx1MEJBOFxcXFx1MEJBOVxcXFx1MEJBQVxcXFx1MEJBRVxcXFx1MEJBRlxcXFx1MEJCMFxcXFx1MEJCMVxcXFx1MEJCMlxcXFx1MEJCM1xcXFx1MEJCNFxcXFx1MEJCNVxcXFx1MEJCNlxcXFx1MEJCN1xcXFx1MEJCOFxcXFx1MEJCOVxcXFx1MEJEMFxcXFx1MEMwNVxcXFx1MEMwNlxcXFx1MEMwN1xcXFx1MEMwOFxcXFx1MEMwOVxcXFx1MEMwQVxcXFx1MEMwQlxcXFx1MEMwQ1xcXFx1MEMwRVxcXFx1MEMwRlxcXFx1MEMxMFxcXFx1MEMxMlxcXFx1MEMxM1xcXFx1MEMxNFxcXFx1MEMxNVxcXFx1MEMxNlxcXFx1MEMxN1xcXFx1MEMxOFxcXFx1MEMxOVxcXFx1MEMxQVxcXFx1MEMxQlxcXFx1MEMxQ1xcXFx1MEMxRFxcXFx1MEMxRVxcXFx1MEMxRlxcXFx1MEMyMFxcXFx1MEMyMVxcXFx1MEMyMlxcXFx1MEMyM1xcXFx1MEMyNFxcXFx1MEMyNVxcXFx1MEMyNlxcXFx1MEMyN1xcXFx1MEMyOFxcXFx1MEMyQVxcXFx1MEMyQlxcXFx1MEMyQ1xcXFx1MEMyRFxcXFx1MEMyRVxcXFx1MEMyRlxcXFx1MEMzMFxcXFx1MEMzMVxcXFx1MEMzMlxcXFx1MEMzM1xcXFx1MEMzNVxcXFx1MEMzNlxcXFx1MEMzN1xcXFx1MEMzOFxcXFx1MEMzOVxcXFx1MEMzRFxcXFx1MEM1OFxcXFx1MEM1OVxcXFx1MEM2MFxcXFx1MEM2MVxcXFx1MEM4NVxcXFx1MEM4NlxcXFx1MEM4N1xcXFx1MEM4OFxcXFx1MEM4OVxcXFx1MEM4QVxcXFx1MEM4QlxcXFx1MEM4Q1xcXFx1MEM4RVxcXFx1MEM4RlxcXFx1MEM5MFxcXFx1MEM5MlxcXFx1MEM5M1xcXFx1MEM5NFxcXFx1MEM5NVxcXFx1MEM5NlxcXFx1MEM5N1xcXFx1MEM5OFxcXFx1MEM5OVxcXFx1MEM5QVxcXFx1MEM5QlxcXFx1MEM5Q1xcXFx1MEM5RFxcXFx1MEM5RVxcXFx1MEM5RlxcXFx1MENBMFxcXFx1MENBMVxcXFx1MENBMlxcXFx1MENBM1xcXFx1MENBNFxcXFx1MENBNVxcXFx1MENBNlxcXFx1MENBN1xcXFx1MENBOFxcXFx1MENBQVxcXFx1MENBQlxcXFx1MENBQ1xcXFx1MENBRFxcXFx1MENBRVxcXFx1MENBRlxcXFx1MENCMFxcXFx1MENCMVxcXFx1MENCMlxcXFx1MENCM1xcXFx1MENCNVxcXFx1MENCNlxcXFx1MENCN1xcXFx1MENCOFxcXFx1MENCOVxcXFx1MENCRFxcXFx1MENERVxcXFx1MENFMFxcXFx1MENFMVxcXFx1MEQwNVxcXFx1MEQwNlxcXFx1MEQwN1xcXFx1MEQwOFxcXFx1MEQwOVxcXFx1MEQwQVxcXFx1MEQwQlxcXFx1MEQwQ1xcXFx1MEQwRVxcXFx1MEQwRlxcXFx1MEQxMFxcXFx1MEQxMlxcXFx1MEQxM1xcXFx1MEQxNFxcXFx1MEQxNVxcXFx1MEQxNlxcXFx1MEQxN1xcXFx1MEQxOFxcXFx1MEQxOVxcXFx1MEQxQVxcXFx1MEQxQlxcXFx1MEQxQ1xcXFx1MEQxRFxcXFx1MEQxRVxcXFx1MEQxRlxcXFx1MEQyMFxcXFx1MEQyMVxcXFx1MEQyMlxcXFx1MEQyM1xcXFx1MEQyNFxcXFx1MEQyNVxcXFx1MEQyNlxcXFx1MEQyN1xcXFx1MEQyOFxcXFx1MEQyQVxcXFx1MEQyQlxcXFx1MEQyQ1xcXFx1MEQyRFxcXFx1MEQyRVxcXFx1MEQyRlxcXFx1MEQzMFxcXFx1MEQzMVxcXFx1MEQzMlxcXFx1MEQzM1xcXFx1MEQzNFxcXFx1MEQzNVxcXFx1MEQzNlxcXFx1MEQzN1xcXFx1MEQzOFxcXFx1MEQzOVxcXFx1MEQzRFxcXFx1MEQ2MFxcXFx1MEQ2MVxcXFx1MEQ3QVxcXFx1MEQ3QlxcXFx1MEQ3Q1xcXFx1MEQ3RFxcXFx1MEQ3RVxcXFx1MEQ3RlxcXFx1MEQ4NVxcXFx1MEQ4NlxcXFx1MEQ4N1xcXFx1MEQ4OFxcXFx1MEQ4OVxcXFx1MEQ4QVxcXFx1MEQ4QlxcXFx1MEQ4Q1xcXFx1MEQ4RFxcXFx1MEQ4RVxcXFx1MEQ4RlxcXFx1MEQ5MFxcXFx1MEQ5MVxcXFx1MEQ5MlxcXFx1MEQ5M1xcXFx1MEQ5NFxcXFx1MEQ5NVxcXFx1MEQ5NlxcXFx1MEQ5QVxcXFx1MEQ5QlxcXFx1MEQ5Q1xcXFx1MEQ5RFxcXFx1MEQ5RVxcXFx1MEQ5RlxcXFx1MERBMFxcXFx1MERBMVxcXFx1MERBMlxcXFx1MERBM1xcXFx1MERBNFxcXFx1MERBNVxcXFx1MERBNlxcXFx1MERBN1xcXFx1MERBOFxcXFx1MERBOVxcXFx1MERBQVxcXFx1MERBQlxcXFx1MERBQ1xcXFx1MERBRFxcXFx1MERBRVxcXFx1MERBRlxcXFx1MERCMFxcXFx1MERCMVxcXFx1MERCM1xcXFx1MERCNFxcXFx1MERCNVxcXFx1MERCNlxcXFx1MERCN1xcXFx1MERCOFxcXFx1MERCOVxcXFx1MERCQVxcXFx1MERCQlxcXFx1MERCRFxcXFx1MERDMFxcXFx1MERDMVxcXFx1MERDMlxcXFx1MERDM1xcXFx1MERDNFxcXFx1MERDNVxcXFx1MERDNlxcXFx1MEUwMVxcXFx1MEUwMlxcXFx1MEUwM1xcXFx1MEUwNFxcXFx1MEUwNVxcXFx1MEUwNlxcXFx1MEUwN1xcXFx1MEUwOFxcXFx1MEUwOVxcXFx1MEUwQVxcXFx1MEUwQlxcXFx1MEUwQ1xcXFx1MEUwRFxcXFx1MEUwRVxcXFx1MEUwRlxcXFx1MEUxMFxcXFx1MEUxMVxcXFx1MEUxMlxcXFx1MEUxM1xcXFx1MEUxNFxcXFx1MEUxNVxcXFx1MEUxNlxcXFx1MEUxN1xcXFx1MEUxOFxcXFx1MEUxOVxcXFx1MEUxQVxcXFx1MEUxQlxcXFx1MEUxQ1xcXFx1MEUxRFxcXFx1MEUxRVxcXFx1MEUxRlxcXFx1MEUyMFxcXFx1MEUyMVxcXFx1MEUyMlxcXFx1MEUyM1xcXFx1MEUyNFxcXFx1MEUyNVxcXFx1MEUyNlxcXFx1MEUyN1xcXFx1MEUyOFxcXFx1MEUyOVxcXFx1MEUyQVxcXFx1MEUyQlxcXFx1MEUyQ1xcXFx1MEUyRFxcXFx1MEUyRVxcXFx1MEUyRlxcXFx1MEUzMFxcXFx1MEUzMlxcXFx1MEUzM1xcXFx1MEU0MFxcXFx1MEU0MVxcXFx1MEU0MlxcXFx1MEU0M1xcXFx1MEU0NFxcXFx1MEU0NVxcXFx1MEU4MVxcXFx1MEU4MlxcXFx1MEU4NFxcXFx1MEU4N1xcXFx1MEU4OFxcXFx1MEU4QVxcXFx1MEU4RFxcXFx1MEU5NFxcXFx1MEU5NVxcXFx1MEU5NlxcXFx1MEU5N1xcXFx1MEU5OVxcXFx1MEU5QVxcXFx1MEU5QlxcXFx1MEU5Q1xcXFx1MEU5RFxcXFx1MEU5RVxcXFx1MEU5RlxcXFx1MEVBMVxcXFx1MEVBMlxcXFx1MEVBM1xcXFx1MEVBNVxcXFx1MEVBN1xcXFx1MEVBQVxcXFx1MEVBQlxcXFx1MEVBRFxcXFx1MEVBRVxcXFx1MEVBRlxcXFx1MEVCMFxcXFx1MEVCMlxcXFx1MEVCM1xcXFx1MEVCRFxcXFx1MEVDMFxcXFx1MEVDMVxcXFx1MEVDMlxcXFx1MEVDM1xcXFx1MEVDNFxcXFx1MEVEQ1xcXFx1MEVERFxcXFx1MEYwMFxcXFx1MEY0MFxcXFx1MEY0MVxcXFx1MEY0MlxcXFx1MEY0M1xcXFx1MEY0NFxcXFx1MEY0NVxcXFx1MEY0NlxcXFx1MEY0N1xcXFx1MEY0OVxcXFx1MEY0QVxcXFx1MEY0QlxcXFx1MEY0Q1xcXFx1MEY0RFxcXFx1MEY0RVxcXFx1MEY0RlxcXFx1MEY1MFxcXFx1MEY1MVxcXFx1MEY1MlxcXFx1MEY1M1xcXFx1MEY1NFxcXFx1MEY1NVxcXFx1MEY1NlxcXFx1MEY1N1xcXFx1MEY1OFxcXFx1MEY1OVxcXFx1MEY1QVxcXFx1MEY1QlxcXFx1MEY1Q1xcXFx1MEY1RFxcXFx1MEY1RVxcXFx1MEY1RlxcXFx1MEY2MFxcXFx1MEY2MVxcXFx1MEY2MlxcXFx1MEY2M1xcXFx1MEY2NFxcXFx1MEY2NVxcXFx1MEY2NlxcXFx1MEY2N1xcXFx1MEY2OFxcXFx1MEY2OVxcXFx1MEY2QVxcXFx1MEY2QlxcXFx1MEY2Q1xcXFx1MEY4OFxcXFx1MEY4OVxcXFx1MEY4QVxcXFx1MEY4QlxcXFx1MTAwMFxcXFx1MTAwMVxcXFx1MTAwMlxcXFx1MTAwM1xcXFx1MTAwNFxcXFx1MTAwNVxcXFx1MTAwNlxcXFx1MTAwN1xcXFx1MTAwOFxcXFx1MTAwOVxcXFx1MTAwQVxcXFx1MTAwQlxcXFx1MTAwQ1xcXFx1MTAwRFxcXFx1MTAwRVxcXFx1MTAwRlxcXFx1MTAxMFxcXFx1MTAxMVxcXFx1MTAxMlxcXFx1MTAxM1xcXFx1MTAxNFxcXFx1MTAxNVxcXFx1MTAxNlxcXFx1MTAxN1xcXFx1MTAxOFxcXFx1MTAxOVxcXFx1MTAxQVxcXFx1MTAxQlxcXFx1MTAxQ1xcXFx1MTAxRFxcXFx1MTAxRVxcXFx1MTAxRlxcXFx1MTAyMFxcXFx1MTAyMVxcXFx1MTAyMlxcXFx1MTAyM1xcXFx1MTAyNFxcXFx1MTAyNVxcXFx1MTAyNlxcXFx1MTAyN1xcXFx1MTAyOFxcXFx1MTAyOVxcXFx1MTAyQVxcXFx1MTAzRlxcXFx1MTA1MFxcXFx1MTA1MVxcXFx1MTA1MlxcXFx1MTA1M1xcXFx1MTA1NFxcXFx1MTA1NVxcXFx1MTA1QVxcXFx1MTA1QlxcXFx1MTA1Q1xcXFx1MTA1RFxcXFx1MTA2MVxcXFx1MTA2NVxcXFx1MTA2NlxcXFx1MTA2RVxcXFx1MTA2RlxcXFx1MTA3MFxcXFx1MTA3NVxcXFx1MTA3NlxcXFx1MTA3N1xcXFx1MTA3OFxcXFx1MTA3OVxcXFx1MTA3QVxcXFx1MTA3QlxcXFx1MTA3Q1xcXFx1MTA3RFxcXFx1MTA3RVxcXFx1MTA3RlxcXFx1MTA4MFxcXFx1MTA4MVxcXFx1MTA4RVxcXFx1MTBEMFxcXFx1MTBEMVxcXFx1MTBEMlxcXFx1MTBEM1xcXFx1MTBENFxcXFx1MTBENVxcXFx1MTBENlxcXFx1MTBEN1xcXFx1MTBEOFxcXFx1MTBEOVxcXFx1MTBEQVxcXFx1MTBEQlxcXFx1MTBEQ1xcXFx1MTBERFxcXFx1MTBERVxcXFx1MTBERlxcXFx1MTBFMFxcXFx1MTBFMVxcXFx1MTBFMlxcXFx1MTBFM1xcXFx1MTBFNFxcXFx1MTBFNVxcXFx1MTBFNlxcXFx1MTBFN1xcXFx1MTBFOFxcXFx1MTBFOVxcXFx1MTBFQVxcXFx1MTBFQlxcXFx1MTBFQ1xcXFx1MTBFRFxcXFx1MTBFRVxcXFx1MTBFRlxcXFx1MTBGMFxcXFx1MTBGMVxcXFx1MTBGMlxcXFx1MTBGM1xcXFx1MTBGNFxcXFx1MTBGNVxcXFx1MTBGNlxcXFx1MTBGN1xcXFx1MTBGOFxcXFx1MTBGOVxcXFx1MTBGQVxcXFx1MTEwMFxcXFx1MTEwMVxcXFx1MTEwMlxcXFx1MTEwM1xcXFx1MTEwNFxcXFx1MTEwNVxcXFx1MTEwNlxcXFx1MTEwN1xcXFx1MTEwOFxcXFx1MTEwOVxcXFx1MTEwQVxcXFx1MTEwQlxcXFx1MTEwQ1xcXFx1MTEwRFxcXFx1MTEwRVxcXFx1MTEwRlxcXFx1MTExMFxcXFx1MTExMVxcXFx1MTExMlxcXFx1MTExM1xcXFx1MTExNFxcXFx1MTExNVxcXFx1MTExNlxcXFx1MTExN1xcXFx1MTExOFxcXFx1MTExOVxcXFx1MTExQVxcXFx1MTExQlxcXFx1MTExQ1xcXFx1MTExRFxcXFx1MTExRVxcXFx1MTExRlxcXFx1MTEyMFxcXFx1MTEyMVxcXFx1MTEyMlxcXFx1MTEyM1xcXFx1MTEyNFxcXFx1MTEyNVxcXFx1MTEyNlxcXFx1MTEyN1xcXFx1MTEyOFxcXFx1MTEyOVxcXFx1MTEyQVxcXFx1MTEyQlxcXFx1MTEyQ1xcXFx1MTEyRFxcXFx1MTEyRVxcXFx1MTEyRlxcXFx1MTEzMFxcXFx1MTEzMVxcXFx1MTEzMlxcXFx1MTEzM1xcXFx1MTEzNFxcXFx1MTEzNVxcXFx1MTEzNlxcXFx1MTEzN1xcXFx1MTEzOFxcXFx1MTEzOVxcXFx1MTEzQVxcXFx1MTEzQlxcXFx1MTEzQ1xcXFx1MTEzRFxcXFx1MTEzRVxcXFx1MTEzRlxcXFx1MTE0MFxcXFx1MTE0MVxcXFx1MTE0MlxcXFx1MTE0M1xcXFx1MTE0NFxcXFx1MTE0NVxcXFx1MTE0NlxcXFx1MTE0N1xcXFx1MTE0OFxcXFx1MTE0OVxcXFx1MTE0QVxcXFx1MTE0QlxcXFx1MTE0Q1xcXFx1MTE0RFxcXFx1MTE0RVxcXFx1MTE0RlxcXFx1MTE1MFxcXFx1MTE1MVxcXFx1MTE1MlxcXFx1MTE1M1xcXFx1MTE1NFxcXFx1MTE1NVxcXFx1MTE1NlxcXFx1MTE1N1xcXFx1MTE1OFxcXFx1MTE1OVxcXFx1MTE1RlxcXFx1MTE2MFxcXFx1MTE2MVxcXFx1MTE2MlxcXFx1MTE2M1xcXFx1MTE2NFxcXFx1MTE2NVxcXFx1MTE2NlxcXFx1MTE2N1xcXFx1MTE2OFxcXFx1MTE2OVxcXFx1MTE2QVxcXFx1MTE2QlxcXFx1MTE2Q1xcXFx1MTE2RFxcXFx1MTE2RVxcXFx1MTE2RlxcXFx1MTE3MFxcXFx1MTE3MVxcXFx1MTE3MlxcXFx1MTE3M1xcXFx1MTE3NFxcXFx1MTE3NVxcXFx1MTE3NlxcXFx1MTE3N1xcXFx1MTE3OFxcXFx1MTE3OVxcXFx1MTE3QVxcXFx1MTE3QlxcXFx1MTE3Q1xcXFx1MTE3RFxcXFx1MTE3RVxcXFx1MTE3RlxcXFx1MTE4MFxcXFx1MTE4MVxcXFx1MTE4MlxcXFx1MTE4M1xcXFx1MTE4NFxcXFx1MTE4NVxcXFx1MTE4NlxcXFx1MTE4N1xcXFx1MTE4OFxcXFx1MTE4OVxcXFx1MTE4QVxcXFx1MTE4QlxcXFx1MTE4Q1xcXFx1MTE4RFxcXFx1MTE4RVxcXFx1MTE4RlxcXFx1MTE5MFxcXFx1MTE5MVxcXFx1MTE5MlxcXFx1MTE5M1xcXFx1MTE5NFxcXFx1MTE5NVxcXFx1MTE5NlxcXFx1MTE5N1xcXFx1MTE5OFxcXFx1MTE5OVxcXFx1MTE5QVxcXFx1MTE5QlxcXFx1MTE5Q1xcXFx1MTE5RFxcXFx1MTE5RVxcXFx1MTE5RlxcXFx1MTFBMFxcXFx1MTFBMVxcXFx1MTFBMlxcXFx1MTFBOFxcXFx1MTFBOVxcXFx1MTFBQVxcXFx1MTFBQlxcXFx1MTFBQ1xcXFx1MTFBRFxcXFx1MTFBRVxcXFx1MTFBRlxcXFx1MTFCMFxcXFx1MTFCMVxcXFx1MTFCMlxcXFx1MTFCM1xcXFx1MTFCNFxcXFx1MTFCNVxcXFx1MTFCNlxcXFx1MTFCN1xcXFx1MTFCOFxcXFx1MTFCOVxcXFx1MTFCQVxcXFx1MTFCQlxcXFx1MTFCQ1xcXFx1MTFCRFxcXFx1MTFCRVxcXFx1MTFCRlxcXFx1MTFDMFxcXFx1MTFDMVxcXFx1MTFDMlxcXFx1MTFDM1xcXFx1MTFDNFxcXFx1MTFDNVxcXFx1MTFDNlxcXFx1MTFDN1xcXFx1MTFDOFxcXFx1MTFDOVxcXFx1MTFDQVxcXFx1MTFDQlxcXFx1MTFDQ1xcXFx1MTFDRFxcXFx1MTFDRVxcXFx1MTFDRlxcXFx1MTFEMFxcXFx1MTFEMVxcXFx1MTFEMlxcXFx1MTFEM1xcXFx1MTFENFxcXFx1MTFENVxcXFx1MTFENlxcXFx1MTFEN1xcXFx1MTFEOFxcXFx1MTFEOVxcXFx1MTFEQVxcXFx1MTFEQlxcXFx1MTFEQ1xcXFx1MTFERFxcXFx1MTFERVxcXFx1MTFERlxcXFx1MTFFMFxcXFx1MTFFMVxcXFx1MTFFMlxcXFx1MTFFM1xcXFx1MTFFNFxcXFx1MTFFNVxcXFx1MTFFNlxcXFx1MTFFN1xcXFx1MTFFOFxcXFx1MTFFOVxcXFx1MTFFQVxcXFx1MTFFQlxcXFx1MTFFQ1xcXFx1MTFFRFxcXFx1MTFFRVxcXFx1MTFFRlxcXFx1MTFGMFxcXFx1MTFGMVxcXFx1MTFGMlxcXFx1MTFGM1xcXFx1MTFGNFxcXFx1MTFGNVxcXFx1MTFGNlxcXFx1MTFGN1xcXFx1MTFGOFxcXFx1MTFGOVxcXFx1MTIwMFxcXFx1MTIwMVxcXFx1MTIwMlxcXFx1MTIwM1xcXFx1MTIwNFxcXFx1MTIwNVxcXFx1MTIwNlxcXFx1MTIwN1xcXFx1MTIwOFxcXFx1MTIwOVxcXFx1MTIwQVxcXFx1MTIwQlxcXFx1MTIwQ1xcXFx1MTIwRFxcXFx1MTIwRVxcXFx1MTIwRlxcXFx1MTIxMFxcXFx1MTIxMVxcXFx1MTIxMlxcXFx1MTIxM1xcXFx1MTIxNFxcXFx1MTIxNVxcXFx1MTIxNlxcXFx1MTIxN1xcXFx1MTIxOFxcXFx1MTIxOVxcXFx1MTIxQVxcXFx1MTIxQlxcXFx1MTIxQ1xcXFx1MTIxRFxcXFx1MTIxRVxcXFx1MTIxRlxcXFx1MTIyMFxcXFx1MTIyMVxcXFx1MTIyMlxcXFx1MTIyM1xcXFx1MTIyNFxcXFx1MTIyNVxcXFx1MTIyNlxcXFx1MTIyN1xcXFx1MTIyOFxcXFx1MTIyOVxcXFx1MTIyQVxcXFx1MTIyQlxcXFx1MTIyQ1xcXFx1MTIyRFxcXFx1MTIyRVxcXFx1MTIyRlxcXFx1MTIzMFxcXFx1MTIzMVxcXFx1MTIzMlxcXFx1MTIzM1xcXFx1MTIzNFxcXFx1MTIzNVxcXFx1MTIzNlxcXFx1MTIzN1xcXFx1MTIzOFxcXFx1MTIzOVxcXFx1MTIzQVxcXFx1MTIzQlxcXFx1MTIzQ1xcXFx1MTIzRFxcXFx1MTIzRVxcXFx1MTIzRlxcXFx1MTI0MFxcXFx1MTI0MVxcXFx1MTI0MlxcXFx1MTI0M1xcXFx1MTI0NFxcXFx1MTI0NVxcXFx1MTI0NlxcXFx1MTI0N1xcXFx1MTI0OFxcXFx1MTI0QVxcXFx1MTI0QlxcXFx1MTI0Q1xcXFx1MTI0RFxcXFx1MTI1MFxcXFx1MTI1MVxcXFx1MTI1MlxcXFx1MTI1M1xcXFx1MTI1NFxcXFx1MTI1NVxcXFx1MTI1NlxcXFx1MTI1OFxcXFx1MTI1QVxcXFx1MTI1QlxcXFx1MTI1Q1xcXFx1MTI1RFxcXFx1MTI2MFxcXFx1MTI2MVxcXFx1MTI2MlxcXFx1MTI2M1xcXFx1MTI2NFxcXFx1MTI2NVxcXFx1MTI2NlxcXFx1MTI2N1xcXFx1MTI2OFxcXFx1MTI2OVxcXFx1MTI2QVxcXFx1MTI2QlxcXFx1MTI2Q1xcXFx1MTI2RFxcXFx1MTI2RVxcXFx1MTI2RlxcXFx1MTI3MFxcXFx1MTI3MVxcXFx1MTI3MlxcXFx1MTI3M1xcXFx1MTI3NFxcXFx1MTI3NVxcXFx1MTI3NlxcXFx1MTI3N1xcXFx1MTI3OFxcXFx1MTI3OVxcXFx1MTI3QVxcXFx1MTI3QlxcXFx1MTI3Q1xcXFx1MTI3RFxcXFx1MTI3RVxcXFx1MTI3RlxcXFx1MTI4MFxcXFx1MTI4MVxcXFx1MTI4MlxcXFx1MTI4M1xcXFx1MTI4NFxcXFx1MTI4NVxcXFx1MTI4NlxcXFx1MTI4N1xcXFx1MTI4OFxcXFx1MTI4QVxcXFx1MTI4QlxcXFx1MTI4Q1xcXFx1MTI4RFxcXFx1MTI5MFxcXFx1MTI5MVxcXFx1MTI5MlxcXFx1MTI5M1xcXFx1MTI5NFxcXFx1MTI5NVxcXFx1MTI5NlxcXFx1MTI5N1xcXFx1MTI5OFxcXFx1MTI5OVxcXFx1MTI5QVxcXFx1MTI5QlxcXFx1MTI5Q1xcXFx1MTI5RFxcXFx1MTI5RVxcXFx1MTI5RlxcXFx1MTJBMFxcXFx1MTJBMVxcXFx1MTJBMlxcXFx1MTJBM1xcXFx1MTJBNFxcXFx1MTJBNVxcXFx1MTJBNlxcXFx1MTJBN1xcXFx1MTJBOFxcXFx1MTJBOVxcXFx1MTJBQVxcXFx1MTJBQlxcXFx1MTJBQ1xcXFx1MTJBRFxcXFx1MTJBRVxcXFx1MTJBRlxcXFx1MTJCMFxcXFx1MTJCMlxcXFx1MTJCM1xcXFx1MTJCNFxcXFx1MTJCNVxcXFx1MTJCOFxcXFx1MTJCOVxcXFx1MTJCQVxcXFx1MTJCQlxcXFx1MTJCQ1xcXFx1MTJCRFxcXFx1MTJCRVxcXFx1MTJDMFxcXFx1MTJDMlxcXFx1MTJDM1xcXFx1MTJDNFxcXFx1MTJDNVxcXFx1MTJDOFxcXFx1MTJDOVxcXFx1MTJDQVxcXFx1MTJDQlxcXFx1MTJDQ1xcXFx1MTJDRFxcXFx1MTJDRVxcXFx1MTJDRlxcXFx1MTJEMFxcXFx1MTJEMVxcXFx1MTJEMlxcXFx1MTJEM1xcXFx1MTJENFxcXFx1MTJENVxcXFx1MTJENlxcXFx1MTJEOFxcXFx1MTJEOVxcXFx1MTJEQVxcXFx1MTJEQlxcXFx1MTJEQ1xcXFx1MTJERFxcXFx1MTJERVxcXFx1MTJERlxcXFx1MTJFMFxcXFx1MTJFMVxcXFx1MTJFMlxcXFx1MTJFM1xcXFx1MTJFNFxcXFx1MTJFNVxcXFx1MTJFNlxcXFx1MTJFN1xcXFx1MTJFOFxcXFx1MTJFOVxcXFx1MTJFQVxcXFx1MTJFQlxcXFx1MTJFQ1xcXFx1MTJFRFxcXFx1MTJFRVxcXFx1MTJFRlxcXFx1MTJGMFxcXFx1MTJGMVxcXFx1MTJGMlxcXFx1MTJGM1xcXFx1MTJGNFxcXFx1MTJGNVxcXFx1MTJGNlxcXFx1MTJGN1xcXFx1MTJGOFxcXFx1MTJGOVxcXFx1MTJGQVxcXFx1MTJGQlxcXFx1MTJGQ1xcXFx1MTJGRFxcXFx1MTJGRVxcXFx1MTJGRlxcXFx1MTMwMFxcXFx1MTMwMVxcXFx1MTMwMlxcXFx1MTMwM1xcXFx1MTMwNFxcXFx1MTMwNVxcXFx1MTMwNlxcXFx1MTMwN1xcXFx1MTMwOFxcXFx1MTMwOVxcXFx1MTMwQVxcXFx1MTMwQlxcXFx1MTMwQ1xcXFx1MTMwRFxcXFx1MTMwRVxcXFx1MTMwRlxcXFx1MTMxMFxcXFx1MTMxMlxcXFx1MTMxM1xcXFx1MTMxNFxcXFx1MTMxNVxcXFx1MTMxOFxcXFx1MTMxOVxcXFx1MTMxQVxcXFx1MTMxQlxcXFx1MTMxQ1xcXFx1MTMxRFxcXFx1MTMxRVxcXFx1MTMxRlxcXFx1MTMyMFxcXFx1MTMyMVxcXFx1MTMyMlxcXFx1MTMyM1xcXFx1MTMyNFxcXFx1MTMyNVxcXFx1MTMyNlxcXFx1MTMyN1xcXFx1MTMyOFxcXFx1MTMyOVxcXFx1MTMyQVxcXFx1MTMyQlxcXFx1MTMyQ1xcXFx1MTMyRFxcXFx1MTMyRVxcXFx1MTMyRlxcXFx1MTMzMFxcXFx1MTMzMVxcXFx1MTMzMlxcXFx1MTMzM1xcXFx1MTMzNFxcXFx1MTMzNVxcXFx1MTMzNlxcXFx1MTMzN1xcXFx1MTMzOFxcXFx1MTMzOVxcXFx1MTMzQVxcXFx1MTMzQlxcXFx1MTMzQ1xcXFx1MTMzRFxcXFx1MTMzRVxcXFx1MTMzRlxcXFx1MTM0MFxcXFx1MTM0MVxcXFx1MTM0MlxcXFx1MTM0M1xcXFx1MTM0NFxcXFx1MTM0NVxcXFx1MTM0NlxcXFx1MTM0N1xcXFx1MTM0OFxcXFx1MTM0OVxcXFx1MTM0QVxcXFx1MTM0QlxcXFx1MTM0Q1xcXFx1MTM0RFxcXFx1MTM0RVxcXFx1MTM0RlxcXFx1MTM1MFxcXFx1MTM1MVxcXFx1MTM1MlxcXFx1MTM1M1xcXFx1MTM1NFxcXFx1MTM1NVxcXFx1MTM1NlxcXFx1MTM1N1xcXFx1MTM1OFxcXFx1MTM1OVxcXFx1MTM1QVxcXFx1MTM4MFxcXFx1MTM4MVxcXFx1MTM4MlxcXFx1MTM4M1xcXFx1MTM4NFxcXFx1MTM4NVxcXFx1MTM4NlxcXFx1MTM4N1xcXFx1MTM4OFxcXFx1MTM4OVxcXFx1MTM4QVxcXFx1MTM4QlxcXFx1MTM4Q1xcXFx1MTM4RFxcXFx1MTM4RVxcXFx1MTM4RlxcXFx1MTNBMFxcXFx1MTNBMVxcXFx1MTNBMlxcXFx1MTNBM1xcXFx1MTNBNFxcXFx1MTNBNVxcXFx1MTNBNlxcXFx1MTNBN1xcXFx1MTNBOFxcXFx1MTNBOVxcXFx1MTNBQVxcXFx1MTNBQlxcXFx1MTNBQ1xcXFx1MTNBRFxcXFx1MTNBRVxcXFx1MTNBRlxcXFx1MTNCMFxcXFx1MTNCMVxcXFx1MTNCMlxcXFx1MTNCM1xcXFx1MTNCNFxcXFx1MTNCNVxcXFx1MTNCNlxcXFx1MTNCN1xcXFx1MTNCOFxcXFx1MTNCOVxcXFx1MTNCQVxcXFx1MTNCQlxcXFx1MTNCQ1xcXFx1MTNCRFxcXFx1MTNCRVxcXFx1MTNCRlxcXFx1MTNDMFxcXFx1MTNDMVxcXFx1MTNDMlxcXFx1MTNDM1xcXFx1MTNDNFxcXFx1MTNDNVxcXFx1MTNDNlxcXFx1MTNDN1xcXFx1MTNDOFxcXFx1MTNDOVxcXFx1MTNDQVxcXFx1MTNDQlxcXFx1MTNDQ1xcXFx1MTNDRFxcXFx1MTNDRVxcXFx1MTNDRlxcXFx1MTNEMFxcXFx1MTNEMVxcXFx1MTNEMlxcXFx1MTNEM1xcXFx1MTNENFxcXFx1MTNENVxcXFx1MTNENlxcXFx1MTNEN1xcXFx1MTNEOFxcXFx1MTNEOVxcXFx1MTNEQVxcXFx1MTNEQlxcXFx1MTNEQ1xcXFx1MTNERFxcXFx1MTNERVxcXFx1MTNERlxcXFx1MTNFMFxcXFx1MTNFMVxcXFx1MTNFMlxcXFx1MTNFM1xcXFx1MTNFNFxcXFx1MTNFNVxcXFx1MTNFNlxcXFx1MTNFN1xcXFx1MTNFOFxcXFx1MTNFOVxcXFx1MTNFQVxcXFx1MTNFQlxcXFx1MTNFQ1xcXFx1MTNFRFxcXFx1MTNFRVxcXFx1MTNFRlxcXFx1MTNGMFxcXFx1MTNGMVxcXFx1MTNGMlxcXFx1MTNGM1xcXFx1MTNGNFxcXFx1MTQwMVxcXFx1MTQwMlxcXFx1MTQwM1xcXFx1MTQwNFxcXFx1MTQwNVxcXFx1MTQwNlxcXFx1MTQwN1xcXFx1MTQwOFxcXFx1MTQwOVxcXFx1MTQwQVxcXFx1MTQwQlxcXFx1MTQwQ1xcXFx1MTQwRFxcXFx1MTQwRVxcXFx1MTQwRlxcXFx1MTQxMFxcXFx1MTQxMVxcXFx1MTQxMlxcXFx1MTQxM1xcXFx1MTQxNFxcXFx1MTQxNVxcXFx1MTQxNlxcXFx1MTQxN1xcXFx1MTQxOFxcXFx1MTQxOVxcXFx1MTQxQVxcXFx1MTQxQlxcXFx1MTQxQ1xcXFx1MTQxRFxcXFx1MTQxRVxcXFx1MTQxRlxcXFx1MTQyMFxcXFx1MTQyMVxcXFx1MTQyMlxcXFx1MTQyM1xcXFx1MTQyNFxcXFx1MTQyNVxcXFx1MTQyNlxcXFx1MTQyN1xcXFx1MTQyOFxcXFx1MTQyOVxcXFx1MTQyQVxcXFx1MTQyQlxcXFx1MTQyQ1xcXFx1MTQyRFxcXFx1MTQyRVxcXFx1MTQyRlxcXFx1MTQzMFxcXFx1MTQzMVxcXFx1MTQzMlxcXFx1MTQzM1xcXFx1MTQzNFxcXFx1MTQzNVxcXFx1MTQzNlxcXFx1MTQzN1xcXFx1MTQzOFxcXFx1MTQzOVxcXFx1MTQzQVxcXFx1MTQzQlxcXFx1MTQzQ1xcXFx1MTQzRFxcXFx1MTQzRVxcXFx1MTQzRlxcXFx1MTQ0MFxcXFx1MTQ0MVxcXFx1MTQ0MlxcXFx1MTQ0M1xcXFx1MTQ0NFxcXFx1MTQ0NVxcXFx1MTQ0NlxcXFx1MTQ0N1xcXFx1MTQ0OFxcXFx1MTQ0OVxcXFx1MTQ0QVxcXFx1MTQ0QlxcXFx1MTQ0Q1xcXFx1MTQ0RFxcXFx1MTQ0RVxcXFx1MTQ0RlxcXFx1MTQ1MFxcXFx1MTQ1MVxcXFx1MTQ1MlxcXFx1MTQ1M1xcXFx1MTQ1NFxcXFx1MTQ1NVxcXFx1MTQ1NlxcXFx1MTQ1N1xcXFx1MTQ1OFxcXFx1MTQ1OVxcXFx1MTQ1QVxcXFx1MTQ1QlxcXFx1MTQ1Q1xcXFx1MTQ1RFxcXFx1MTQ1RVxcXFx1MTQ1RlxcXFx1MTQ2MFxcXFx1MTQ2MVxcXFx1MTQ2MlxcXFx1MTQ2M1xcXFx1MTQ2NFxcXFx1MTQ2NVxcXFx1MTQ2NlxcXFx1MTQ2N1xcXFx1MTQ2OFxcXFx1MTQ2OVxcXFx1MTQ2QVxcXFx1MTQ2QlxcXFx1MTQ2Q1xcXFx1MTQ2RFxcXFx1MTQ2RVxcXFx1MTQ2RlxcXFx1MTQ3MFxcXFx1MTQ3MVxcXFx1MTQ3MlxcXFx1MTQ3M1xcXFx1MTQ3NFxcXFx1MTQ3NVxcXFx1MTQ3NlxcXFx1MTQ3N1xcXFx1MTQ3OFxcXFx1MTQ3OVxcXFx1MTQ3QVxcXFx1MTQ3QlxcXFx1MTQ3Q1xcXFx1MTQ3RFxcXFx1MTQ3RVxcXFx1MTQ3RlxcXFx1MTQ4MFxcXFx1MTQ4MVxcXFx1MTQ4MlxcXFx1MTQ4M1xcXFx1MTQ4NFxcXFx1MTQ4NVxcXFx1MTQ4NlxcXFx1MTQ4N1xcXFx1MTQ4OFxcXFx1MTQ4OVxcXFx1MTQ4QVxcXFx1MTQ4QlxcXFx1MTQ4Q1xcXFx1MTQ4RFxcXFx1MTQ4RVxcXFx1MTQ4RlxcXFx1MTQ5MFxcXFx1MTQ5MVxcXFx1MTQ5MlxcXFx1MTQ5M1xcXFx1MTQ5NFxcXFx1MTQ5NVxcXFx1MTQ5NlxcXFx1MTQ5N1xcXFx1MTQ5OFxcXFx1MTQ5OVxcXFx1MTQ5QVxcXFx1MTQ5QlxcXFx1MTQ5Q1xcXFx1MTQ5RFxcXFx1MTQ5RVxcXFx1MTQ5RlxcXFx1MTRBMFxcXFx1MTRBMVxcXFx1MTRBMlxcXFx1MTRBM1xcXFx1MTRBNFxcXFx1MTRBNVxcXFx1MTRBNlxcXFx1MTRBN1xcXFx1MTRBOFxcXFx1MTRBOVxcXFx1MTRBQVxcXFx1MTRBQlxcXFx1MTRBQ1xcXFx1MTRBRFxcXFx1MTRBRVxcXFx1MTRBRlxcXFx1MTRCMFxcXFx1MTRCMVxcXFx1MTRCMlxcXFx1MTRCM1xcXFx1MTRCNFxcXFx1MTRCNVxcXFx1MTRCNlxcXFx1MTRCN1xcXFx1MTRCOFxcXFx1MTRCOVxcXFx1MTRCQVxcXFx1MTRCQlxcXFx1MTRCQ1xcXFx1MTRCRFxcXFx1MTRCRVxcXFx1MTRCRlxcXFx1MTRDMFxcXFx1MTRDMVxcXFx1MTRDMlxcXFx1MTRDM1xcXFx1MTRDNFxcXFx1MTRDNVxcXFx1MTRDNlxcXFx1MTRDN1xcXFx1MTRDOFxcXFx1MTRDOVxcXFx1MTRDQVxcXFx1MTRDQlxcXFx1MTRDQ1xcXFx1MTRDRFxcXFx1MTRDRVxcXFx1MTRDRlxcXFx1MTREMFxcXFx1MTREMVxcXFx1MTREMlxcXFx1MTREM1xcXFx1MTRENFxcXFx1MTRENVxcXFx1MTRENlxcXFx1MTREN1xcXFx1MTREOFxcXFx1MTREOVxcXFx1MTREQVxcXFx1MTREQlxcXFx1MTREQ1xcXFx1MTRERFxcXFx1MTRERVxcXFx1MTRERlxcXFx1MTRFMFxcXFx1MTRFMVxcXFx1MTRFMlxcXFx1MTRFM1xcXFx1MTRFNFxcXFx1MTRFNVxcXFx1MTRFNlxcXFx1MTRFN1xcXFx1MTRFOFxcXFx1MTRFOVxcXFx1MTRFQVxcXFx1MTRFQlxcXFx1MTRFQ1xcXFx1MTRFRFxcXFx1MTRFRVxcXFx1MTRFRlxcXFx1MTRGMFxcXFx1MTRGMVxcXFx1MTRGMlxcXFx1MTRGM1xcXFx1MTRGNFxcXFx1MTRGNVxcXFx1MTRGNlxcXFx1MTRGN1xcXFx1MTRGOFxcXFx1MTRGOVxcXFx1MTRGQVxcXFx1MTRGQlxcXFx1MTRGQ1xcXFx1MTRGRFxcXFx1MTRGRVxcXFx1MTRGRlxcXFx1MTUwMFxcXFx1MTUwMVxcXFx1MTUwMlxcXFx1MTUwM1xcXFx1MTUwNFxcXFx1MTUwNVxcXFx1MTUwNlxcXFx1MTUwN1xcXFx1MTUwOFxcXFx1MTUwOVxcXFx1MTUwQVxcXFx1MTUwQlxcXFx1MTUwQ1xcXFx1MTUwRFxcXFx1MTUwRVxcXFx1MTUwRlxcXFx1MTUxMFxcXFx1MTUxMVxcXFx1MTUxMlxcXFx1MTUxM1xcXFx1MTUxNFxcXFx1MTUxNVxcXFx1MTUxNlxcXFx1MTUxN1xcXFx1MTUxOFxcXFx1MTUxOVxcXFx1MTUxQVxcXFx1MTUxQlxcXFx1MTUxQ1xcXFx1MTUxRFxcXFx1MTUxRVxcXFx1MTUxRlxcXFx1MTUyMFxcXFx1MTUyMVxcXFx1MTUyMlxcXFx1MTUyM1xcXFx1MTUyNFxcXFx1MTUyNVxcXFx1MTUyNlxcXFx1MTUyN1xcXFx1MTUyOFxcXFx1MTUyOVxcXFx1MTUyQVxcXFx1MTUyQlxcXFx1MTUyQ1xcXFx1MTUyRFxcXFx1MTUyRVxcXFx1MTUyRlxcXFx1MTUzMFxcXFx1MTUzMVxcXFx1MTUzMlxcXFx1MTUzM1xcXFx1MTUzNFxcXFx1MTUzNVxcXFx1MTUzNlxcXFx1MTUzN1xcXFx1MTUzOFxcXFx1MTUzOVxcXFx1MTUzQVxcXFx1MTUzQlxcXFx1MTUzQ1xcXFx1MTUzRFxcXFx1MTUzRVxcXFx1MTUzRlxcXFx1MTU0MFxcXFx1MTU0MVxcXFx1MTU0MlxcXFx1MTU0M1xcXFx1MTU0NFxcXFx1MTU0NVxcXFx1MTU0NlxcXFx1MTU0N1xcXFx1MTU0OFxcXFx1MTU0OVxcXFx1MTU0QVxcXFx1MTU0QlxcXFx1MTU0Q1xcXFx1MTU0RFxcXFx1MTU0RVxcXFx1MTU0RlxcXFx1MTU1MFxcXFx1MTU1MVxcXFx1MTU1MlxcXFx1MTU1M1xcXFx1MTU1NFxcXFx1MTU1NVxcXFx1MTU1NlxcXFx1MTU1N1xcXFx1MTU1OFxcXFx1MTU1OVxcXFx1MTU1QVxcXFx1MTU1QlxcXFx1MTU1Q1xcXFx1MTU1RFxcXFx1MTU1RVxcXFx1MTU1RlxcXFx1MTU2MFxcXFx1MTU2MVxcXFx1MTU2MlxcXFx1MTU2M1xcXFx1MTU2NFxcXFx1MTU2NVxcXFx1MTU2NlxcXFx1MTU2N1xcXFx1MTU2OFxcXFx1MTU2OVxcXFx1MTU2QVxcXFx1MTU2QlxcXFx1MTU2Q1xcXFx1MTU2RFxcXFx1MTU2RVxcXFx1MTU2RlxcXFx1MTU3MFxcXFx1MTU3MVxcXFx1MTU3MlxcXFx1MTU3M1xcXFx1MTU3NFxcXFx1MTU3NVxcXFx1MTU3NlxcXFx1MTU3N1xcXFx1MTU3OFxcXFx1MTU3OVxcXFx1MTU3QVxcXFx1MTU3QlxcXFx1MTU3Q1xcXFx1MTU3RFxcXFx1MTU3RVxcXFx1MTU3RlxcXFx1MTU4MFxcXFx1MTU4MVxcXFx1MTU4MlxcXFx1MTU4M1xcXFx1MTU4NFxcXFx1MTU4NVxcXFx1MTU4NlxcXFx1MTU4N1xcXFx1MTU4OFxcXFx1MTU4OVxcXFx1MTU4QVxcXFx1MTU4QlxcXFx1MTU4Q1xcXFx1MTU4RFxcXFx1MTU4RVxcXFx1MTU4RlxcXFx1MTU5MFxcXFx1MTU5MVxcXFx1MTU5MlxcXFx1MTU5M1xcXFx1MTU5NFxcXFx1MTU5NVxcXFx1MTU5NlxcXFx1MTU5N1xcXFx1MTU5OFxcXFx1MTU5OVxcXFx1MTU5QVxcXFx1MTU5QlxcXFx1MTU5Q1xcXFx1MTU5RFxcXFx1MTU5RVxcXFx1MTU5RlxcXFx1MTVBMFxcXFx1MTVBMVxcXFx1MTVBMlxcXFx1MTVBM1xcXFx1MTVBNFxcXFx1MTVBNVxcXFx1MTVBNlxcXFx1MTVBN1xcXFx1MTVBOFxcXFx1MTVBOVxcXFx1MTVBQVxcXFx1MTVBQlxcXFx1MTVBQ1xcXFx1MTVBRFxcXFx1MTVBRVxcXFx1MTVBRlxcXFx1MTVCMFxcXFx1MTVCMVxcXFx1MTVCMlxcXFx1MTVCM1xcXFx1MTVCNFxcXFx1MTVCNVxcXFx1MTVCNlxcXFx1MTVCN1xcXFx1MTVCOFxcXFx1MTVCOVxcXFx1MTVCQVxcXFx1MTVCQlxcXFx1MTVCQ1xcXFx1MTVCRFxcXFx1MTVCRVxcXFx1MTVCRlxcXFx1MTVDMFxcXFx1MTVDMVxcXFx1MTVDMlxcXFx1MTVDM1xcXFx1MTVDNFxcXFx1MTVDNVxcXFx1MTVDNlxcXFx1MTVDN1xcXFx1MTVDOFxcXFx1MTVDOVxcXFx1MTVDQVxcXFx1MTVDQlxcXFx1MTVDQ1xcXFx1MTVDRFxcXFx1MTVDRVxcXFx1MTVDRlxcXFx1MTVEMFxcXFx1MTVEMVxcXFx1MTVEMlxcXFx1MTVEM1xcXFx1MTVENFxcXFx1MTVENVxcXFx1MTVENlxcXFx1MTVEN1xcXFx1MTVEOFxcXFx1MTVEOVxcXFx1MTVEQVxcXFx1MTVEQlxcXFx1MTVEQ1xcXFx1MTVERFxcXFx1MTVERVxcXFx1MTVERlxcXFx1MTVFMFxcXFx1MTVFMVxcXFx1MTVFMlxcXFx1MTVFM1xcXFx1MTVFNFxcXFx1MTVFNVxcXFx1MTVFNlxcXFx1MTVFN1xcXFx1MTVFOFxcXFx1MTVFOVxcXFx1MTVFQVxcXFx1MTVFQlxcXFx1MTVFQ1xcXFx1MTVFRFxcXFx1MTVFRVxcXFx1MTVFRlxcXFx1MTVGMFxcXFx1MTVGMVxcXFx1MTVGMlxcXFx1MTVGM1xcXFx1MTVGNFxcXFx1MTVGNVxcXFx1MTVGNlxcXFx1MTVGN1xcXFx1MTVGOFxcXFx1MTVGOVxcXFx1MTVGQVxcXFx1MTVGQlxcXFx1MTVGQ1xcXFx1MTVGRFxcXFx1MTVGRVxcXFx1MTVGRlxcXFx1MTYwMFxcXFx1MTYwMVxcXFx1MTYwMlxcXFx1MTYwM1xcXFx1MTYwNFxcXFx1MTYwNVxcXFx1MTYwNlxcXFx1MTYwN1xcXFx1MTYwOFxcXFx1MTYwOVxcXFx1MTYwQVxcXFx1MTYwQlxcXFx1MTYwQ1xcXFx1MTYwRFxcXFx1MTYwRVxcXFx1MTYwRlxcXFx1MTYxMFxcXFx1MTYxMVxcXFx1MTYxMlxcXFx1MTYxM1xcXFx1MTYxNFxcXFx1MTYxNVxcXFx1MTYxNlxcXFx1MTYxN1xcXFx1MTYxOFxcXFx1MTYxOVxcXFx1MTYxQVxcXFx1MTYxQlxcXFx1MTYxQ1xcXFx1MTYxRFxcXFx1MTYxRVxcXFx1MTYxRlxcXFx1MTYyMFxcXFx1MTYyMVxcXFx1MTYyMlxcXFx1MTYyM1xcXFx1MTYyNFxcXFx1MTYyNVxcXFx1MTYyNlxcXFx1MTYyN1xcXFx1MTYyOFxcXFx1MTYyOVxcXFx1MTYyQVxcXFx1MTYyQlxcXFx1MTYyQ1xcXFx1MTYyRFxcXFx1MTYyRVxcXFx1MTYyRlxcXFx1MTYzMFxcXFx1MTYzMVxcXFx1MTYzMlxcXFx1MTYzM1xcXFx1MTYzNFxcXFx1MTYzNVxcXFx1MTYzNlxcXFx1MTYzN1xcXFx1MTYzOFxcXFx1MTYzOVxcXFx1MTYzQVxcXFx1MTYzQlxcXFx1MTYzQ1xcXFx1MTYzRFxcXFx1MTYzRVxcXFx1MTYzRlxcXFx1MTY0MFxcXFx1MTY0MVxcXFx1MTY0MlxcXFx1MTY0M1xcXFx1MTY0NFxcXFx1MTY0NVxcXFx1MTY0NlxcXFx1MTY0N1xcXFx1MTY0OFxcXFx1MTY0OVxcXFx1MTY0QVxcXFx1MTY0QlxcXFx1MTY0Q1xcXFx1MTY0RFxcXFx1MTY0RVxcXFx1MTY0RlxcXFx1MTY1MFxcXFx1MTY1MVxcXFx1MTY1MlxcXFx1MTY1M1xcXFx1MTY1NFxcXFx1MTY1NVxcXFx1MTY1NlxcXFx1MTY1N1xcXFx1MTY1OFxcXFx1MTY1OVxcXFx1MTY1QVxcXFx1MTY1QlxcXFx1MTY1Q1xcXFx1MTY1RFxcXFx1MTY1RVxcXFx1MTY1RlxcXFx1MTY2MFxcXFx1MTY2MVxcXFx1MTY2MlxcXFx1MTY2M1xcXFx1MTY2NFxcXFx1MTY2NVxcXFx1MTY2NlxcXFx1MTY2N1xcXFx1MTY2OFxcXFx1MTY2OVxcXFx1MTY2QVxcXFx1MTY2QlxcXFx1MTY2Q1xcXFx1MTY2RlxcXFx1MTY3MFxcXFx1MTY3MVxcXFx1MTY3MlxcXFx1MTY3M1xcXFx1MTY3NFxcXFx1MTY3NVxcXFx1MTY3NlxcXFx1MTY4MVxcXFx1MTY4MlxcXFx1MTY4M1xcXFx1MTY4NFxcXFx1MTY4NVxcXFx1MTY4NlxcXFx1MTY4N1xcXFx1MTY4OFxcXFx1MTY4OVxcXFx1MTY4QVxcXFx1MTY4QlxcXFx1MTY4Q1xcXFx1MTY4RFxcXFx1MTY4RVxcXFx1MTY4RlxcXFx1MTY5MFxcXFx1MTY5MVxcXFx1MTY5MlxcXFx1MTY5M1xcXFx1MTY5NFxcXFx1MTY5NVxcXFx1MTY5NlxcXFx1MTY5N1xcXFx1MTY5OFxcXFx1MTY5OVxcXFx1MTY5QVxcXFx1MTZBMFxcXFx1MTZBMVxcXFx1MTZBMlxcXFx1MTZBM1xcXFx1MTZBNFxcXFx1MTZBNVxcXFx1MTZBNlxcXFx1MTZBN1xcXFx1MTZBOFxcXFx1MTZBOVxcXFx1MTZBQVxcXFx1MTZBQlxcXFx1MTZBQ1xcXFx1MTZBRFxcXFx1MTZBRVxcXFx1MTZBRlxcXFx1MTZCMFxcXFx1MTZCMVxcXFx1MTZCMlxcXFx1MTZCM1xcXFx1MTZCNFxcXFx1MTZCNVxcXFx1MTZCNlxcXFx1MTZCN1xcXFx1MTZCOFxcXFx1MTZCOVxcXFx1MTZCQVxcXFx1MTZCQlxcXFx1MTZCQ1xcXFx1MTZCRFxcXFx1MTZCRVxcXFx1MTZCRlxcXFx1MTZDMFxcXFx1MTZDMVxcXFx1MTZDMlxcXFx1MTZDM1xcXFx1MTZDNFxcXFx1MTZDNVxcXFx1MTZDNlxcXFx1MTZDN1xcXFx1MTZDOFxcXFx1MTZDOVxcXFx1MTZDQVxcXFx1MTZDQlxcXFx1MTZDQ1xcXFx1MTZDRFxcXFx1MTZDRVxcXFx1MTZDRlxcXFx1MTZEMFxcXFx1MTZEMVxcXFx1MTZEMlxcXFx1MTZEM1xcXFx1MTZENFxcXFx1MTZENVxcXFx1MTZENlxcXFx1MTZEN1xcXFx1MTZEOFxcXFx1MTZEOVxcXFx1MTZEQVxcXFx1MTZEQlxcXFx1MTZEQ1xcXFx1MTZERFxcXFx1MTZERVxcXFx1MTZERlxcXFx1MTZFMFxcXFx1MTZFMVxcXFx1MTZFMlxcXFx1MTZFM1xcXFx1MTZFNFxcXFx1MTZFNVxcXFx1MTZFNlxcXFx1MTZFN1xcXFx1MTZFOFxcXFx1MTZFOVxcXFx1MTZFQVxcXFx1MTcwMFxcXFx1MTcwMVxcXFx1MTcwMlxcXFx1MTcwM1xcXFx1MTcwNFxcXFx1MTcwNVxcXFx1MTcwNlxcXFx1MTcwN1xcXFx1MTcwOFxcXFx1MTcwOVxcXFx1MTcwQVxcXFx1MTcwQlxcXFx1MTcwQ1xcXFx1MTcwRVxcXFx1MTcwRlxcXFx1MTcxMFxcXFx1MTcxMVxcXFx1MTcyMFxcXFx1MTcyMVxcXFx1MTcyMlxcXFx1MTcyM1xcXFx1MTcyNFxcXFx1MTcyNVxcXFx1MTcyNlxcXFx1MTcyN1xcXFx1MTcyOFxcXFx1MTcyOVxcXFx1MTcyQVxcXFx1MTcyQlxcXFx1MTcyQ1xcXFx1MTcyRFxcXFx1MTcyRVxcXFx1MTcyRlxcXFx1MTczMFxcXFx1MTczMVxcXFx1MTc0MFxcXFx1MTc0MVxcXFx1MTc0MlxcXFx1MTc0M1xcXFx1MTc0NFxcXFx1MTc0NVxcXFx1MTc0NlxcXFx1MTc0N1xcXFx1MTc0OFxcXFx1MTc0OVxcXFx1MTc0QVxcXFx1MTc0QlxcXFx1MTc0Q1xcXFx1MTc0RFxcXFx1MTc0RVxcXFx1MTc0RlxcXFx1MTc1MFxcXFx1MTc1MVxcXFx1MTc2MFxcXFx1MTc2MVxcXFx1MTc2MlxcXFx1MTc2M1xcXFx1MTc2NFxcXFx1MTc2NVxcXFx1MTc2NlxcXFx1MTc2N1xcXFx1MTc2OFxcXFx1MTc2OVxcXFx1MTc2QVxcXFx1MTc2QlxcXFx1MTc2Q1xcXFx1MTc2RVxcXFx1MTc2RlxcXFx1MTc3MFxcXFx1MTc4MFxcXFx1MTc4MVxcXFx1MTc4MlxcXFx1MTc4M1xcXFx1MTc4NFxcXFx1MTc4NVxcXFx1MTc4NlxcXFx1MTc4N1xcXFx1MTc4OFxcXFx1MTc4OVxcXFx1MTc4QVxcXFx1MTc4QlxcXFx1MTc4Q1xcXFx1MTc4RFxcXFx1MTc4RVxcXFx1MTc4RlxcXFx1MTc5MFxcXFx1MTc5MVxcXFx1MTc5MlxcXFx1MTc5M1xcXFx1MTc5NFxcXFx1MTc5NVxcXFx1MTc5NlxcXFx1MTc5N1xcXFx1MTc5OFxcXFx1MTc5OVxcXFx1MTc5QVxcXFx1MTc5QlxcXFx1MTc5Q1xcXFx1MTc5RFxcXFx1MTc5RVxcXFx1MTc5RlxcXFx1MTdBMFxcXFx1MTdBMVxcXFx1MTdBMlxcXFx1MTdBM1xcXFx1MTdBNFxcXFx1MTdBNVxcXFx1MTdBNlxcXFx1MTdBN1xcXFx1MTdBOFxcXFx1MTdBOVxcXFx1MTdBQVxcXFx1MTdBQlxcXFx1MTdBQ1xcXFx1MTdBRFxcXFx1MTdBRVxcXFx1MTdBRlxcXFx1MTdCMFxcXFx1MTdCMVxcXFx1MTdCMlxcXFx1MTdCM1xcXFx1MTdEQ1xcXFx1MTgyMFxcXFx1MTgyMVxcXFx1MTgyMlxcXFx1MTgyM1xcXFx1MTgyNFxcXFx1MTgyNVxcXFx1MTgyNlxcXFx1MTgyN1xcXFx1MTgyOFxcXFx1MTgyOVxcXFx1MTgyQVxcXFx1MTgyQlxcXFx1MTgyQ1xcXFx1MTgyRFxcXFx1MTgyRVxcXFx1MTgyRlxcXFx1MTgzMFxcXFx1MTgzMVxcXFx1MTgzMlxcXFx1MTgzM1xcXFx1MTgzNFxcXFx1MTgzNVxcXFx1MTgzNlxcXFx1MTgzN1xcXFx1MTgzOFxcXFx1MTgzOVxcXFx1MTgzQVxcXFx1MTgzQlxcXFx1MTgzQ1xcXFx1MTgzRFxcXFx1MTgzRVxcXFx1MTgzRlxcXFx1MTg0MFxcXFx1MTg0MVxcXFx1MTg0MlxcXFx1MTg0NFxcXFx1MTg0NVxcXFx1MTg0NlxcXFx1MTg0N1xcXFx1MTg0OFxcXFx1MTg0OVxcXFx1MTg0QVxcXFx1MTg0QlxcXFx1MTg0Q1xcXFx1MTg0RFxcXFx1MTg0RVxcXFx1MTg0RlxcXFx1MTg1MFxcXFx1MTg1MVxcXFx1MTg1MlxcXFx1MTg1M1xcXFx1MTg1NFxcXFx1MTg1NVxcXFx1MTg1NlxcXFx1MTg1N1xcXFx1MTg1OFxcXFx1MTg1OVxcXFx1MTg1QVxcXFx1MTg1QlxcXFx1MTg1Q1xcXFx1MTg1RFxcXFx1MTg1RVxcXFx1MTg1RlxcXFx1MTg2MFxcXFx1MTg2MVxcXFx1MTg2MlxcXFx1MTg2M1xcXFx1MTg2NFxcXFx1MTg2NVxcXFx1MTg2NlxcXFx1MTg2N1xcXFx1MTg2OFxcXFx1MTg2OVxcXFx1MTg2QVxcXFx1MTg2QlxcXFx1MTg2Q1xcXFx1MTg2RFxcXFx1MTg2RVxcXFx1MTg2RlxcXFx1MTg3MFxcXFx1MTg3MVxcXFx1MTg3MlxcXFx1MTg3M1xcXFx1MTg3NFxcXFx1MTg3NVxcXFx1MTg3NlxcXFx1MTg3N1xcXFx1MTg4MFxcXFx1MTg4MVxcXFx1MTg4MlxcXFx1MTg4M1xcXFx1MTg4NFxcXFx1MTg4NVxcXFx1MTg4NlxcXFx1MTg4N1xcXFx1MTg4OFxcXFx1MTg4OVxcXFx1MTg4QVxcXFx1MTg4QlxcXFx1MTg4Q1xcXFx1MTg4RFxcXFx1MTg4RVxcXFx1MTg4RlxcXFx1MTg5MFxcXFx1MTg5MVxcXFx1MTg5MlxcXFx1MTg5M1xcXFx1MTg5NFxcXFx1MTg5NVxcXFx1MTg5NlxcXFx1MTg5N1xcXFx1MTg5OFxcXFx1MTg5OVxcXFx1MTg5QVxcXFx1MTg5QlxcXFx1MTg5Q1xcXFx1MTg5RFxcXFx1MTg5RVxcXFx1MTg5RlxcXFx1MThBMFxcXFx1MThBMVxcXFx1MThBMlxcXFx1MThBM1xcXFx1MThBNFxcXFx1MThBNVxcXFx1MThBNlxcXFx1MThBN1xcXFx1MThBOFxcXFx1MThBQVxcXFx1MTkwMFxcXFx1MTkwMVxcXFx1MTkwMlxcXFx1MTkwM1xcXFx1MTkwNFxcXFx1MTkwNVxcXFx1MTkwNlxcXFx1MTkwN1xcXFx1MTkwOFxcXFx1MTkwOVxcXFx1MTkwQVxcXFx1MTkwQlxcXFx1MTkwQ1xcXFx1MTkwRFxcXFx1MTkwRVxcXFx1MTkwRlxcXFx1MTkxMFxcXFx1MTkxMVxcXFx1MTkxMlxcXFx1MTkxM1xcXFx1MTkxNFxcXFx1MTkxNVxcXFx1MTkxNlxcXFx1MTkxN1xcXFx1MTkxOFxcXFx1MTkxOVxcXFx1MTkxQVxcXFx1MTkxQlxcXFx1MTkxQ1xcXFx1MTk1MFxcXFx1MTk1MVxcXFx1MTk1MlxcXFx1MTk1M1xcXFx1MTk1NFxcXFx1MTk1NVxcXFx1MTk1NlxcXFx1MTk1N1xcXFx1MTk1OFxcXFx1MTk1OVxcXFx1MTk1QVxcXFx1MTk1QlxcXFx1MTk1Q1xcXFx1MTk1RFxcXFx1MTk1RVxcXFx1MTk1RlxcXFx1MTk2MFxcXFx1MTk2MVxcXFx1MTk2MlxcXFx1MTk2M1xcXFx1MTk2NFxcXFx1MTk2NVxcXFx1MTk2NlxcXFx1MTk2N1xcXFx1MTk2OFxcXFx1MTk2OVxcXFx1MTk2QVxcXFx1MTk2QlxcXFx1MTk2Q1xcXFx1MTk2RFxcXFx1MTk3MFxcXFx1MTk3MVxcXFx1MTk3MlxcXFx1MTk3M1xcXFx1MTk3NFxcXFx1MTk4MFxcXFx1MTk4MVxcXFx1MTk4MlxcXFx1MTk4M1xcXFx1MTk4NFxcXFx1MTk4NVxcXFx1MTk4NlxcXFx1MTk4N1xcXFx1MTk4OFxcXFx1MTk4OVxcXFx1MTk4QVxcXFx1MTk4QlxcXFx1MTk4Q1xcXFx1MTk4RFxcXFx1MTk4RVxcXFx1MTk4RlxcXFx1MTk5MFxcXFx1MTk5MVxcXFx1MTk5MlxcXFx1MTk5M1xcXFx1MTk5NFxcXFx1MTk5NVxcXFx1MTk5NlxcXFx1MTk5N1xcXFx1MTk5OFxcXFx1MTk5OVxcXFx1MTk5QVxcXFx1MTk5QlxcXFx1MTk5Q1xcXFx1MTk5RFxcXFx1MTk5RVxcXFx1MTk5RlxcXFx1MTlBMFxcXFx1MTlBMVxcXFx1MTlBMlxcXFx1MTlBM1xcXFx1MTlBNFxcXFx1MTlBNVxcXFx1MTlBNlxcXFx1MTlBN1xcXFx1MTlBOFxcXFx1MTlBOVxcXFx1MTlDMVxcXFx1MTlDMlxcXFx1MTlDM1xcXFx1MTlDNFxcXFx1MTlDNVxcXFx1MTlDNlxcXFx1MTlDN1xcXFx1MUEwMFxcXFx1MUEwMVxcXFx1MUEwMlxcXFx1MUEwM1xcXFx1MUEwNFxcXFx1MUEwNVxcXFx1MUEwNlxcXFx1MUEwN1xcXFx1MUEwOFxcXFx1MUEwOVxcXFx1MUEwQVxcXFx1MUEwQlxcXFx1MUEwQ1xcXFx1MUEwRFxcXFx1MUEwRVxcXFx1MUEwRlxcXFx1MUExMFxcXFx1MUExMVxcXFx1MUExMlxcXFx1MUExM1xcXFx1MUExNFxcXFx1MUExNVxcXFx1MUExNlxcXFx1MUIwNVxcXFx1MUIwNlxcXFx1MUIwN1xcXFx1MUIwOFxcXFx1MUIwOVxcXFx1MUIwQVxcXFx1MUIwQlxcXFx1MUIwQ1xcXFx1MUIwRFxcXFx1MUIwRVxcXFx1MUIwRlxcXFx1MUIxMFxcXFx1MUIxMVxcXFx1MUIxMlxcXFx1MUIxM1xcXFx1MUIxNFxcXFx1MUIxNVxcXFx1MUIxNlxcXFx1MUIxN1xcXFx1MUIxOFxcXFx1MUIxOVxcXFx1MUIxQVxcXFx1MUIxQlxcXFx1MUIxQ1xcXFx1MUIxRFxcXFx1MUIxRVxcXFx1MUIxRlxcXFx1MUIyMFxcXFx1MUIyMVxcXFx1MUIyMlxcXFx1MUIyM1xcXFx1MUIyNFxcXFx1MUIyNVxcXFx1MUIyNlxcXFx1MUIyN1xcXFx1MUIyOFxcXFx1MUIyOVxcXFx1MUIyQVxcXFx1MUIyQlxcXFx1MUIyQ1xcXFx1MUIyRFxcXFx1MUIyRVxcXFx1MUIyRlxcXFx1MUIzMFxcXFx1MUIzMVxcXFx1MUIzMlxcXFx1MUIzM1xcXFx1MUI0NVxcXFx1MUI0NlxcXFx1MUI0N1xcXFx1MUI0OFxcXFx1MUI0OVxcXFx1MUI0QVxcXFx1MUI0QlxcXFx1MUI4M1xcXFx1MUI4NFxcXFx1MUI4NVxcXFx1MUI4NlxcXFx1MUI4N1xcXFx1MUI4OFxcXFx1MUI4OVxcXFx1MUI4QVxcXFx1MUI4QlxcXFx1MUI4Q1xcXFx1MUI4RFxcXFx1MUI4RVxcXFx1MUI4RlxcXFx1MUI5MFxcXFx1MUI5MVxcXFx1MUI5MlxcXFx1MUI5M1xcXFx1MUI5NFxcXFx1MUI5NVxcXFx1MUI5NlxcXFx1MUI5N1xcXFx1MUI5OFxcXFx1MUI5OVxcXFx1MUI5QVxcXFx1MUI5QlxcXFx1MUI5Q1xcXFx1MUI5RFxcXFx1MUI5RVxcXFx1MUI5RlxcXFx1MUJBMFxcXFx1MUJBRVxcXFx1MUJBRlxcXFx1MUMwMFxcXFx1MUMwMVxcXFx1MUMwMlxcXFx1MUMwM1xcXFx1MUMwNFxcXFx1MUMwNVxcXFx1MUMwNlxcXFx1MUMwN1xcXFx1MUMwOFxcXFx1MUMwOVxcXFx1MUMwQVxcXFx1MUMwQlxcXFx1MUMwQ1xcXFx1MUMwRFxcXFx1MUMwRVxcXFx1MUMwRlxcXFx1MUMxMFxcXFx1MUMxMVxcXFx1MUMxMlxcXFx1MUMxM1xcXFx1MUMxNFxcXFx1MUMxNVxcXFx1MUMxNlxcXFx1MUMxN1xcXFx1MUMxOFxcXFx1MUMxOVxcXFx1MUMxQVxcXFx1MUMxQlxcXFx1MUMxQ1xcXFx1MUMxRFxcXFx1MUMxRVxcXFx1MUMxRlxcXFx1MUMyMFxcXFx1MUMyMVxcXFx1MUMyMlxcXFx1MUMyM1xcXFx1MUM0RFxcXFx1MUM0RVxcXFx1MUM0RlxcXFx1MUM1QVxcXFx1MUM1QlxcXFx1MUM1Q1xcXFx1MUM1RFxcXFx1MUM1RVxcXFx1MUM1RlxcXFx1MUM2MFxcXFx1MUM2MVxcXFx1MUM2MlxcXFx1MUM2M1xcXFx1MUM2NFxcXFx1MUM2NVxcXFx1MUM2NlxcXFx1MUM2N1xcXFx1MUM2OFxcXFx1MUM2OVxcXFx1MUM2QVxcXFx1MUM2QlxcXFx1MUM2Q1xcXFx1MUM2RFxcXFx1MUM2RVxcXFx1MUM2RlxcXFx1MUM3MFxcXFx1MUM3MVxcXFx1MUM3MlxcXFx1MUM3M1xcXFx1MUM3NFxcXFx1MUM3NVxcXFx1MUM3NlxcXFx1MUM3N1xcXFx1MjEzNVxcXFx1MjEzNlxcXFx1MjEzN1xcXFx1MjEzOFxcXFx1MkQzMFxcXFx1MkQzMVxcXFx1MkQzMlxcXFx1MkQzM1xcXFx1MkQzNFxcXFx1MkQzNVxcXFx1MkQzNlxcXFx1MkQzN1xcXFx1MkQzOFxcXFx1MkQzOVxcXFx1MkQzQVxcXFx1MkQzQlxcXFx1MkQzQ1xcXFx1MkQzRFxcXFx1MkQzRVxcXFx1MkQzRlxcXFx1MkQ0MFxcXFx1MkQ0MVxcXFx1MkQ0MlxcXFx1MkQ0M1xcXFx1MkQ0NFxcXFx1MkQ0NVxcXFx1MkQ0NlxcXFx1MkQ0N1xcXFx1MkQ0OFxcXFx1MkQ0OVxcXFx1MkQ0QVxcXFx1MkQ0QlxcXFx1MkQ0Q1xcXFx1MkQ0RFxcXFx1MkQ0RVxcXFx1MkQ0RlxcXFx1MkQ1MFxcXFx1MkQ1MVxcXFx1MkQ1MlxcXFx1MkQ1M1xcXFx1MkQ1NFxcXFx1MkQ1NVxcXFx1MkQ1NlxcXFx1MkQ1N1xcXFx1MkQ1OFxcXFx1MkQ1OVxcXFx1MkQ1QVxcXFx1MkQ1QlxcXFx1MkQ1Q1xcXFx1MkQ1RFxcXFx1MkQ1RVxcXFx1MkQ1RlxcXFx1MkQ2MFxcXFx1MkQ2MVxcXFx1MkQ2MlxcXFx1MkQ2M1xcXFx1MkQ2NFxcXFx1MkQ2NVxcXFx1MkQ4MFxcXFx1MkQ4MVxcXFx1MkQ4MlxcXFx1MkQ4M1xcXFx1MkQ4NFxcXFx1MkQ4NVxcXFx1MkQ4NlxcXFx1MkQ4N1xcXFx1MkQ4OFxcXFx1MkQ4OVxcXFx1MkQ4QVxcXFx1MkQ4QlxcXFx1MkQ4Q1xcXFx1MkQ4RFxcXFx1MkQ4RVxcXFx1MkQ4RlxcXFx1MkQ5MFxcXFx1MkQ5MVxcXFx1MkQ5MlxcXFx1MkQ5M1xcXFx1MkQ5NFxcXFx1MkQ5NVxcXFx1MkQ5NlxcXFx1MkRBMFxcXFx1MkRBMVxcXFx1MkRBMlxcXFx1MkRBM1xcXFx1MkRBNFxcXFx1MkRBNVxcXFx1MkRBNlxcXFx1MkRBOFxcXFx1MkRBOVxcXFx1MkRBQVxcXFx1MkRBQlxcXFx1MkRBQ1xcXFx1MkRBRFxcXFx1MkRBRVxcXFx1MkRCMFxcXFx1MkRCMVxcXFx1MkRCMlxcXFx1MkRCM1xcXFx1MkRCNFxcXFx1MkRCNVxcXFx1MkRCNlxcXFx1MkRCOFxcXFx1MkRCOVxcXFx1MkRCQVxcXFx1MkRCQlxcXFx1MkRCQ1xcXFx1MkRCRFxcXFx1MkRCRVxcXFx1MkRDMFxcXFx1MkRDMVxcXFx1MkRDMlxcXFx1MkRDM1xcXFx1MkRDNFxcXFx1MkRDNVxcXFx1MkRDNlxcXFx1MkRDOFxcXFx1MkRDOVxcXFx1MkRDQVxcXFx1MkRDQlxcXFx1MkRDQ1xcXFx1MkRDRFxcXFx1MkRDRVxcXFx1MkREMFxcXFx1MkREMVxcXFx1MkREMlxcXFx1MkREM1xcXFx1MkRENFxcXFx1MkRENVxcXFx1MkRENlxcXFx1MkREOFxcXFx1MkREOVxcXFx1MkREQVxcXFx1MkREQlxcXFx1MkREQ1xcXFx1MkRERFxcXFx1MkRERVxcXFx1MzAwNlxcXFx1MzAzQ1xcXFx1MzA0MVxcXFx1MzA0MlxcXFx1MzA0M1xcXFx1MzA0NFxcXFx1MzA0NVxcXFx1MzA0NlxcXFx1MzA0N1xcXFx1MzA0OFxcXFx1MzA0OVxcXFx1MzA0QVxcXFx1MzA0QlxcXFx1MzA0Q1xcXFx1MzA0RFxcXFx1MzA0RVxcXFx1MzA0RlxcXFx1MzA1MFxcXFx1MzA1MVxcXFx1MzA1MlxcXFx1MzA1M1xcXFx1MzA1NFxcXFx1MzA1NVxcXFx1MzA1NlxcXFx1MzA1N1xcXFx1MzA1OFxcXFx1MzA1OVxcXFx1MzA1QVxcXFx1MzA1QlxcXFx1MzA1Q1xcXFx1MzA1RFxcXFx1MzA1RVxcXFx1MzA1RlxcXFx1MzA2MFxcXFx1MzA2MVxcXFx1MzA2MlxcXFx1MzA2M1xcXFx1MzA2NFxcXFx1MzA2NVxcXFx1MzA2NlxcXFx1MzA2N1xcXFx1MzA2OFxcXFx1MzA2OVxcXFx1MzA2QVxcXFx1MzA2QlxcXFx1MzA2Q1xcXFx1MzA2RFxcXFx1MzA2RVxcXFx1MzA2RlxcXFx1MzA3MFxcXFx1MzA3MVxcXFx1MzA3MlxcXFx1MzA3M1xcXFx1MzA3NFxcXFx1MzA3NVxcXFx1MzA3NlxcXFx1MzA3N1xcXFx1MzA3OFxcXFx1MzA3OVxcXFx1MzA3QVxcXFx1MzA3QlxcXFx1MzA3Q1xcXFx1MzA3RFxcXFx1MzA3RVxcXFx1MzA3RlxcXFx1MzA4MFxcXFx1MzA4MVxcXFx1MzA4MlxcXFx1MzA4M1xcXFx1MzA4NFxcXFx1MzA4NVxcXFx1MzA4NlxcXFx1MzA4N1xcXFx1MzA4OFxcXFx1MzA4OVxcXFx1MzA4QVxcXFx1MzA4QlxcXFx1MzA4Q1xcXFx1MzA4RFxcXFx1MzA4RVxcXFx1MzA4RlxcXFx1MzA5MFxcXFx1MzA5MVxcXFx1MzA5MlxcXFx1MzA5M1xcXFx1MzA5NFxcXFx1MzA5NVxcXFx1MzA5NlxcXFx1MzA5RlxcXFx1MzBBMVxcXFx1MzBBMlxcXFx1MzBBM1xcXFx1MzBBNFxcXFx1MzBBNVxcXFx1MzBBNlxcXFx1MzBBN1xcXFx1MzBBOFxcXFx1MzBBOVxcXFx1MzBBQVxcXFx1MzBBQlxcXFx1MzBBQ1xcXFx1MzBBRFxcXFx1MzBBRVxcXFx1MzBBRlxcXFx1MzBCMFxcXFx1MzBCMVxcXFx1MzBCMlxcXFx1MzBCM1xcXFx1MzBCNFxcXFx1MzBCNVxcXFx1MzBCNlxcXFx1MzBCN1xcXFx1MzBCOFxcXFx1MzBCOVxcXFx1MzBCQVxcXFx1MzBCQlxcXFx1MzBCQ1xcXFx1MzBCRFxcXFx1MzBCRVxcXFx1MzBCRlxcXFx1MzBDMFxcXFx1MzBDMVxcXFx1MzBDMlxcXFx1MzBDM1xcXFx1MzBDNFxcXFx1MzBDNVxcXFx1MzBDNlxcXFx1MzBDN1xcXFx1MzBDOFxcXFx1MzBDOVxcXFx1MzBDQVxcXFx1MzBDQlxcXFx1MzBDQ1xcXFx1MzBDRFxcXFx1MzBDRVxcXFx1MzBDRlxcXFx1MzBEMFxcXFx1MzBEMVxcXFx1MzBEMlxcXFx1MzBEM1xcXFx1MzBENFxcXFx1MzBENVxcXFx1MzBENlxcXFx1MzBEN1xcXFx1MzBEOFxcXFx1MzBEOVxcXFx1MzBEQVxcXFx1MzBEQlxcXFx1MzBEQ1xcXFx1MzBERFxcXFx1MzBERVxcXFx1MzBERlxcXFx1MzBFMFxcXFx1MzBFMVxcXFx1MzBFMlxcXFx1MzBFM1xcXFx1MzBFNFxcXFx1MzBFNVxcXFx1MzBFNlxcXFx1MzBFN1xcXFx1MzBFOFxcXFx1MzBFOVxcXFx1MzBFQVxcXFx1MzBFQlxcXFx1MzBFQ1xcXFx1MzBFRFxcXFx1MzBFRVxcXFx1MzBFRlxcXFx1MzBGMFxcXFx1MzBGMVxcXFx1MzBGMlxcXFx1MzBGM1xcXFx1MzBGNFxcXFx1MzBGNVxcXFx1MzBGNlxcXFx1MzBGN1xcXFx1MzBGOFxcXFx1MzBGOVxcXFx1MzBGQVxcXFx1MzBGRlxcXFx1MzEwNVxcXFx1MzEwNlxcXFx1MzEwN1xcXFx1MzEwOFxcXFx1MzEwOVxcXFx1MzEwQVxcXFx1MzEwQlxcXFx1MzEwQ1xcXFx1MzEwRFxcXFx1MzEwRVxcXFx1MzEwRlxcXFx1MzExMFxcXFx1MzExMVxcXFx1MzExMlxcXFx1MzExM1xcXFx1MzExNFxcXFx1MzExNVxcXFx1MzExNlxcXFx1MzExN1xcXFx1MzExOFxcXFx1MzExOVxcXFx1MzExQVxcXFx1MzExQlxcXFx1MzExQ1xcXFx1MzExRFxcXFx1MzExRVxcXFx1MzExRlxcXFx1MzEyMFxcXFx1MzEyMVxcXFx1MzEyMlxcXFx1MzEyM1xcXFx1MzEyNFxcXFx1MzEyNVxcXFx1MzEyNlxcXFx1MzEyN1xcXFx1MzEyOFxcXFx1MzEyOVxcXFx1MzEyQVxcXFx1MzEyQlxcXFx1MzEyQ1xcXFx1MzEyRFxcXFx1MzEzMVxcXFx1MzEzMlxcXFx1MzEzM1xcXFx1MzEzNFxcXFx1MzEzNVxcXFx1MzEzNlxcXFx1MzEzN1xcXFx1MzEzOFxcXFx1MzEzOVxcXFx1MzEzQVxcXFx1MzEzQlxcXFx1MzEzQ1xcXFx1MzEzRFxcXFx1MzEzRVxcXFx1MzEzRlxcXFx1MzE0MFxcXFx1MzE0MVxcXFx1MzE0MlxcXFx1MzE0M1xcXFx1MzE0NFxcXFx1MzE0NVxcXFx1MzE0NlxcXFx1MzE0N1xcXFx1MzE0OFxcXFx1MzE0OVxcXFx1MzE0QVxcXFx1MzE0QlxcXFx1MzE0Q1xcXFx1MzE0RFxcXFx1MzE0RVxcXFx1MzE0RlxcXFx1MzE1MFxcXFx1MzE1MVxcXFx1MzE1MlxcXFx1MzE1M1xcXFx1MzE1NFxcXFx1MzE1NVxcXFx1MzE1NlxcXFx1MzE1N1xcXFx1MzE1OFxcXFx1MzE1OVxcXFx1MzE1QVxcXFx1MzE1QlxcXFx1MzE1Q1xcXFx1MzE1RFxcXFx1MzE1RVxcXFx1MzE1RlxcXFx1MzE2MFxcXFx1MzE2MVxcXFx1MzE2MlxcXFx1MzE2M1xcXFx1MzE2NFxcXFx1MzE2NVxcXFx1MzE2NlxcXFx1MzE2N1xcXFx1MzE2OFxcXFx1MzE2OVxcXFx1MzE2QVxcXFx1MzE2QlxcXFx1MzE2Q1xcXFx1MzE2RFxcXFx1MzE2RVxcXFx1MzE2RlxcXFx1MzE3MFxcXFx1MzE3MVxcXFx1MzE3MlxcXFx1MzE3M1xcXFx1MzE3NFxcXFx1MzE3NVxcXFx1MzE3NlxcXFx1MzE3N1xcXFx1MzE3OFxcXFx1MzE3OVxcXFx1MzE3QVxcXFx1MzE3QlxcXFx1MzE3Q1xcXFx1MzE3RFxcXFx1MzE3RVxcXFx1MzE3RlxcXFx1MzE4MFxcXFx1MzE4MVxcXFx1MzE4MlxcXFx1MzE4M1xcXFx1MzE4NFxcXFx1MzE4NVxcXFx1MzE4NlxcXFx1MzE4N1xcXFx1MzE4OFxcXFx1MzE4OVxcXFx1MzE4QVxcXFx1MzE4QlxcXFx1MzE4Q1xcXFx1MzE4RFxcXFx1MzE4RVxcXFx1MzFBMFxcXFx1MzFBMVxcXFx1MzFBMlxcXFx1MzFBM1xcXFx1MzFBNFxcXFx1MzFBNVxcXFx1MzFBNlxcXFx1MzFBN1xcXFx1MzFBOFxcXFx1MzFBOVxcXFx1MzFBQVxcXFx1MzFBQlxcXFx1MzFBQ1xcXFx1MzFBRFxcXFx1MzFBRVxcXFx1MzFBRlxcXFx1MzFCMFxcXFx1MzFCMVxcXFx1MzFCMlxcXFx1MzFCM1xcXFx1MzFCNFxcXFx1MzFCNVxcXFx1MzFCNlxcXFx1MzFCN1xcXFx1MzFGMFxcXFx1MzFGMVxcXFx1MzFGMlxcXFx1MzFGM1xcXFx1MzFGNFxcXFx1MzFGNVxcXFx1MzFGNlxcXFx1MzFGN1xcXFx1MzFGOFxcXFx1MzFGOVxcXFx1MzFGQVxcXFx1MzFGQlxcXFx1MzFGQ1xcXFx1MzFGRFxcXFx1MzFGRVxcXFx1MzFGRlxcXFx1MzQwMFxcXFx1NERCNVxcXFx1NEUwMFxcXFx1OUZDM1xcXFx1QTAwMFxcXFx1QTAwMVxcXFx1QTAwMlxcXFx1QTAwM1xcXFx1QTAwNFxcXFx1QTAwNVxcXFx1QTAwNlxcXFx1QTAwN1xcXFx1QTAwOFxcXFx1QTAwOVxcXFx1QTAwQVxcXFx1QTAwQlxcXFx1QTAwQ1xcXFx1QTAwRFxcXFx1QTAwRVxcXFx1QTAwRlxcXFx1QTAxMFxcXFx1QTAxMVxcXFx1QTAxMlxcXFx1QTAxM1xcXFx1QTAxNFxcXFx1QTAxNlxcXFx1QTAxN1xcXFx1QTAxOFxcXFx1QTAxOVxcXFx1QTAxQVxcXFx1QTAxQlxcXFx1QTAxQ1xcXFx1QTAxRFxcXFx1QTAxRVxcXFx1QTAxRlxcXFx1QTAyMFxcXFx1QTAyMVxcXFx1QTAyMlxcXFx1QTAyM1xcXFx1QTAyNFxcXFx1QTAyNVxcXFx1QTAyNlxcXFx1QTAyN1xcXFx1QTAyOFxcXFx1QTAyOVxcXFx1QTAyQVxcXFx1QTAyQlxcXFx1QTAyQ1xcXFx1QTAyRFxcXFx1QTAyRVxcXFx1QTAyRlxcXFx1QTAzMFxcXFx1QTAzMVxcXFx1QTAzMlxcXFx1QTAzM1xcXFx1QTAzNFxcXFx1QTAzNVxcXFx1QTAzNlxcXFx1QTAzN1xcXFx1QTAzOFxcXFx1QTAzOVxcXFx1QTAzQVxcXFx1QTAzQlxcXFx1QTAzQ1xcXFx1QTAzRFxcXFx1QTAzRVxcXFx1QTAzRlxcXFx1QTA0MFxcXFx1QTA0MVxcXFx1QTA0MlxcXFx1QTA0M1xcXFx1QTA0NFxcXFx1QTA0NVxcXFx1QTA0NlxcXFx1QTA0N1xcXFx1QTA0OFxcXFx1QTA0OVxcXFx1QTA0QVxcXFx1QTA0QlxcXFx1QTA0Q1xcXFx1QTA0RFxcXFx1QTA0RVxcXFx1QTA0RlxcXFx1QTA1MFxcXFx1QTA1MVxcXFx1QTA1MlxcXFx1QTA1M1xcXFx1QTA1NFxcXFx1QTA1NVxcXFx1QTA1NlxcXFx1QTA1N1xcXFx1QTA1OFxcXFx1QTA1OVxcXFx1QTA1QVxcXFx1QTA1QlxcXFx1QTA1Q1xcXFx1QTA1RFxcXFx1QTA1RVxcXFx1QTA1RlxcXFx1QTA2MFxcXFx1QTA2MVxcXFx1QTA2MlxcXFx1QTA2M1xcXFx1QTA2NFxcXFx1QTA2NVxcXFx1QTA2NlxcXFx1QTA2N1xcXFx1QTA2OFxcXFx1QTA2OVxcXFx1QTA2QVxcXFx1QTA2QlxcXFx1QTA2Q1xcXFx1QTA2RFxcXFx1QTA2RVxcXFx1QTA2RlxcXFx1QTA3MFxcXFx1QTA3MVxcXFx1QTA3MlxcXFx1QTA3M1xcXFx1QTA3NFxcXFx1QTA3NVxcXFx1QTA3NlxcXFx1QTA3N1xcXFx1QTA3OFxcXFx1QTA3OVxcXFx1QTA3QVxcXFx1QTA3QlxcXFx1QTA3Q1xcXFx1QTA3RFxcXFx1QTA3RVxcXFx1QTA3RlxcXFx1QTA4MFxcXFx1QTA4MVxcXFx1QTA4MlxcXFx1QTA4M1xcXFx1QTA4NFxcXFx1QTA4NVxcXFx1QTA4NlxcXFx1QTA4N1xcXFx1QTA4OFxcXFx1QTA4OVxcXFx1QTA4QVxcXFx1QTA4QlxcXFx1QTA4Q1xcXFx1QTA4RFxcXFx1QTA4RVxcXFx1QTA4RlxcXFx1QTA5MFxcXFx1QTA5MVxcXFx1QTA5MlxcXFx1QTA5M1xcXFx1QTA5NFxcXFx1QTA5NVxcXFx1QTA5NlxcXFx1QTA5N1xcXFx1QTA5OFxcXFx1QTA5OVxcXFx1QTA5QVxcXFx1QTA5QlxcXFx1QTA5Q1xcXFx1QTA5RFxcXFx1QTA5RVxcXFx1QTA5RlxcXFx1QTBBMFxcXFx1QTBBMVxcXFx1QTBBMlxcXFx1QTBBM1xcXFx1QTBBNFxcXFx1QTBBNVxcXFx1QTBBNlxcXFx1QTBBN1xcXFx1QTBBOFxcXFx1QTBBOVxcXFx1QTBBQVxcXFx1QTBBQlxcXFx1QTBBQ1xcXFx1QTBBRFxcXFx1QTBBRVxcXFx1QTBBRlxcXFx1QTBCMFxcXFx1QTBCMVxcXFx1QTBCMlxcXFx1QTBCM1xcXFx1QTBCNFxcXFx1QTBCNVxcXFx1QTBCNlxcXFx1QTBCN1xcXFx1QTBCOFxcXFx1QTBCOVxcXFx1QTBCQVxcXFx1QTBCQlxcXFx1QTBCQ1xcXFx1QTBCRFxcXFx1QTBCRVxcXFx1QTBCRlxcXFx1QTBDMFxcXFx1QTBDMVxcXFx1QTBDMlxcXFx1QTBDM1xcXFx1QTBDNFxcXFx1QTBDNVxcXFx1QTBDNlxcXFx1QTBDN1xcXFx1QTBDOFxcXFx1QTBDOVxcXFx1QTBDQVxcXFx1QTBDQlxcXFx1QTBDQ1xcXFx1QTBDRFxcXFx1QTBDRVxcXFx1QTBDRlxcXFx1QTBEMFxcXFx1QTBEMVxcXFx1QTBEMlxcXFx1QTBEM1xcXFx1QTBENFxcXFx1QTBENVxcXFx1QTBENlxcXFx1QTBEN1xcXFx1QTBEOFxcXFx1QTBEOVxcXFx1QTBEQVxcXFx1QTBEQlxcXFx1QTBEQ1xcXFx1QTBERFxcXFx1QTBERVxcXFx1QTBERlxcXFx1QTBFMFxcXFx1QTBFMVxcXFx1QTBFMlxcXFx1QTBFM1xcXFx1QTBFNFxcXFx1QTBFNVxcXFx1QTBFNlxcXFx1QTBFN1xcXFx1QTBFOFxcXFx1QTBFOVxcXFx1QTBFQVxcXFx1QTBFQlxcXFx1QTBFQ1xcXFx1QTBFRFxcXFx1QTBFRVxcXFx1QTBFRlxcXFx1QTBGMFxcXFx1QTBGMVxcXFx1QTBGMlxcXFx1QTBGM1xcXFx1QTBGNFxcXFx1QTBGNVxcXFx1QTBGNlxcXFx1QTBGN1xcXFx1QTBGOFxcXFx1QTBGOVxcXFx1QTBGQVxcXFx1QTBGQlxcXFx1QTBGQ1xcXFx1QTBGRFxcXFx1QTBGRVxcXFx1QTBGRlxcXFx1QTEwMFxcXFx1QTEwMVxcXFx1QTEwMlxcXFx1QTEwM1xcXFx1QTEwNFxcXFx1QTEwNVxcXFx1QTEwNlxcXFx1QTEwN1xcXFx1QTEwOFxcXFx1QTEwOVxcXFx1QTEwQVxcXFx1QTEwQlxcXFx1QTEwQ1xcXFx1QTEwRFxcXFx1QTEwRVxcXFx1QTEwRlxcXFx1QTExMFxcXFx1QTExMVxcXFx1QTExMlxcXFx1QTExM1xcXFx1QTExNFxcXFx1QTExNVxcXFx1QTExNlxcXFx1QTExN1xcXFx1QTExOFxcXFx1QTExOVxcXFx1QTExQVxcXFx1QTExQlxcXFx1QTExQ1xcXFx1QTExRFxcXFx1QTExRVxcXFx1QTExRlxcXFx1QTEyMFxcXFx1QTEyMVxcXFx1QTEyMlxcXFx1QTEyM1xcXFx1QTEyNFxcXFx1QTEyNVxcXFx1QTEyNlxcXFx1QTEyN1xcXFx1QTEyOFxcXFx1QTEyOVxcXFx1QTEyQVxcXFx1QTEyQlxcXFx1QTEyQ1xcXFx1QTEyRFxcXFx1QTEyRVxcXFx1QTEyRlxcXFx1QTEzMFxcXFx1QTEzMVxcXFx1QTEzMlxcXFx1QTEzM1xcXFx1QTEzNFxcXFx1QTEzNVxcXFx1QTEzNlxcXFx1QTEzN1xcXFx1QTEzOFxcXFx1QTEzOVxcXFx1QTEzQVxcXFx1QTEzQlxcXFx1QTEzQ1xcXFx1QTEzRFxcXFx1QTEzRVxcXFx1QTEzRlxcXFx1QTE0MFxcXFx1QTE0MVxcXFx1QTE0MlxcXFx1QTE0M1xcXFx1QTE0NFxcXFx1QTE0NVxcXFx1QTE0NlxcXFx1QTE0N1xcXFx1QTE0OFxcXFx1QTE0OVxcXFx1QTE0QVxcXFx1QTE0QlxcXFx1QTE0Q1xcXFx1QTE0RFxcXFx1QTE0RVxcXFx1QTE0RlxcXFx1QTE1MFxcXFx1QTE1MVxcXFx1QTE1MlxcXFx1QTE1M1xcXFx1QTE1NFxcXFx1QTE1NVxcXFx1QTE1NlxcXFx1QTE1N1xcXFx1QTE1OFxcXFx1QTE1OVxcXFx1QTE1QVxcXFx1QTE1QlxcXFx1QTE1Q1xcXFx1QTE1RFxcXFx1QTE1RVxcXFx1QTE1RlxcXFx1QTE2MFxcXFx1QTE2MVxcXFx1QTE2MlxcXFx1QTE2M1xcXFx1QTE2NFxcXFx1QTE2NVxcXFx1QTE2NlxcXFx1QTE2N1xcXFx1QTE2OFxcXFx1QTE2OVxcXFx1QTE2QVxcXFx1QTE2QlxcXFx1QTE2Q1xcXFx1QTE2RFxcXFx1QTE2RVxcXFx1QTE2RlxcXFx1QTE3MFxcXFx1QTE3MVxcXFx1QTE3MlxcXFx1QTE3M1xcXFx1QTE3NFxcXFx1QTE3NVxcXFx1QTE3NlxcXFx1QTE3N1xcXFx1QTE3OFxcXFx1QTE3OVxcXFx1QTE3QVxcXFx1QTE3QlxcXFx1QTE3Q1xcXFx1QTE3RFxcXFx1QTE3RVxcXFx1QTE3RlxcXFx1QTE4MFxcXFx1QTE4MVxcXFx1QTE4MlxcXFx1QTE4M1xcXFx1QTE4NFxcXFx1QTE4NVxcXFx1QTE4NlxcXFx1QTE4N1xcXFx1QTE4OFxcXFx1QTE4OVxcXFx1QTE4QVxcXFx1QTE4QlxcXFx1QTE4Q1xcXFx1QTE4RFxcXFx1QTE4RVxcXFx1QTE4RlxcXFx1QTE5MFxcXFx1QTE5MVxcXFx1QTE5MlxcXFx1QTE5M1xcXFx1QTE5NFxcXFx1QTE5NVxcXFx1QTE5NlxcXFx1QTE5N1xcXFx1QTE5OFxcXFx1QTE5OVxcXFx1QTE5QVxcXFx1QTE5QlxcXFx1QTE5Q1xcXFx1QTE5RFxcXFx1QTE5RVxcXFx1QTE5RlxcXFx1QTFBMFxcXFx1QTFBMVxcXFx1QTFBMlxcXFx1QTFBM1xcXFx1QTFBNFxcXFx1QTFBNVxcXFx1QTFBNlxcXFx1QTFBN1xcXFx1QTFBOFxcXFx1QTFBOVxcXFx1QTFBQVxcXFx1QTFBQlxcXFx1QTFBQ1xcXFx1QTFBRFxcXFx1QTFBRVxcXFx1QTFBRlxcXFx1QTFCMFxcXFx1QTFCMVxcXFx1QTFCMlxcXFx1QTFCM1xcXFx1QTFCNFxcXFx1QTFCNVxcXFx1QTFCNlxcXFx1QTFCN1xcXFx1QTFCOFxcXFx1QTFCOVxcXFx1QTFCQVxcXFx1QTFCQlxcXFx1QTFCQ1xcXFx1QTFCRFxcXFx1QTFCRVxcXFx1QTFCRlxcXFx1QTFDMFxcXFx1QTFDMVxcXFx1QTFDMlxcXFx1QTFDM1xcXFx1QTFDNFxcXFx1QTFDNVxcXFx1QTFDNlxcXFx1QTFDN1xcXFx1QTFDOFxcXFx1QTFDOVxcXFx1QTFDQVxcXFx1QTFDQlxcXFx1QTFDQ1xcXFx1QTFDRFxcXFx1QTFDRVxcXFx1QTFDRlxcXFx1QTFEMFxcXFx1QTFEMVxcXFx1QTFEMlxcXFx1QTFEM1xcXFx1QTFENFxcXFx1QTFENVxcXFx1QTFENlxcXFx1QTFEN1xcXFx1QTFEOFxcXFx1QTFEOVxcXFx1QTFEQVxcXFx1QTFEQlxcXFx1QTFEQ1xcXFx1QTFERFxcXFx1QTFERVxcXFx1QTFERlxcXFx1QTFFMFxcXFx1QTFFMVxcXFx1QTFFMlxcXFx1QTFFM1xcXFx1QTFFNFxcXFx1QTFFNVxcXFx1QTFFNlxcXFx1QTFFN1xcXFx1QTFFOFxcXFx1QTFFOVxcXFx1QTFFQVxcXFx1QTFFQlxcXFx1QTFFQ1xcXFx1QTFFRFxcXFx1QTFFRVxcXFx1QTFFRlxcXFx1QTFGMFxcXFx1QTFGMVxcXFx1QTFGMlxcXFx1QTFGM1xcXFx1QTFGNFxcXFx1QTFGNVxcXFx1QTFGNlxcXFx1QTFGN1xcXFx1QTFGOFxcXFx1QTFGOVxcXFx1QTFGQVxcXFx1QTFGQlxcXFx1QTFGQ1xcXFx1QTFGRFxcXFx1QTFGRVxcXFx1QTFGRlxcXFx1QTIwMFxcXFx1QTIwMVxcXFx1QTIwMlxcXFx1QTIwM1xcXFx1QTIwNFxcXFx1QTIwNVxcXFx1QTIwNlxcXFx1QTIwN1xcXFx1QTIwOFxcXFx1QTIwOVxcXFx1QTIwQVxcXFx1QTIwQlxcXFx1QTIwQ1xcXFx1QTIwRFxcXFx1QTIwRVxcXFx1QTIwRlxcXFx1QTIxMFxcXFx1QTIxMVxcXFx1QTIxMlxcXFx1QTIxM1xcXFx1QTIxNFxcXFx1QTIxNVxcXFx1QTIxNlxcXFx1QTIxN1xcXFx1QTIxOFxcXFx1QTIxOVxcXFx1QTIxQVxcXFx1QTIxQlxcXFx1QTIxQ1xcXFx1QTIxRFxcXFx1QTIxRVxcXFx1QTIxRlxcXFx1QTIyMFxcXFx1QTIyMVxcXFx1QTIyMlxcXFx1QTIyM1xcXFx1QTIyNFxcXFx1QTIyNVxcXFx1QTIyNlxcXFx1QTIyN1xcXFx1QTIyOFxcXFx1QTIyOVxcXFx1QTIyQVxcXFx1QTIyQlxcXFx1QTIyQ1xcXFx1QTIyRFxcXFx1QTIyRVxcXFx1QTIyRlxcXFx1QTIzMFxcXFx1QTIzMVxcXFx1QTIzMlxcXFx1QTIzM1xcXFx1QTIzNFxcXFx1QTIzNVxcXFx1QTIzNlxcXFx1QTIzN1xcXFx1QTIzOFxcXFx1QTIzOVxcXFx1QTIzQVxcXFx1QTIzQlxcXFx1QTIzQ1xcXFx1QTIzRFxcXFx1QTIzRVxcXFx1QTIzRlxcXFx1QTI0MFxcXFx1QTI0MVxcXFx1QTI0MlxcXFx1QTI0M1xcXFx1QTI0NFxcXFx1QTI0NVxcXFx1QTI0NlxcXFx1QTI0N1xcXFx1QTI0OFxcXFx1QTI0OVxcXFx1QTI0QVxcXFx1QTI0QlxcXFx1QTI0Q1xcXFx1QTI0RFxcXFx1QTI0RVxcXFx1QTI0RlxcXFx1QTI1MFxcXFx1QTI1MVxcXFx1QTI1MlxcXFx1QTI1M1xcXFx1QTI1NFxcXFx1QTI1NVxcXFx1QTI1NlxcXFx1QTI1N1xcXFx1QTI1OFxcXFx1QTI1OVxcXFx1QTI1QVxcXFx1QTI1QlxcXFx1QTI1Q1xcXFx1QTI1RFxcXFx1QTI1RVxcXFx1QTI1RlxcXFx1QTI2MFxcXFx1QTI2MVxcXFx1QTI2MlxcXFx1QTI2M1xcXFx1QTI2NFxcXFx1QTI2NVxcXFx1QTI2NlxcXFx1QTI2N1xcXFx1QTI2OFxcXFx1QTI2OVxcXFx1QTI2QVxcXFx1QTI2QlxcXFx1QTI2Q1xcXFx1QTI2RFxcXFx1QTI2RVxcXFx1QTI2RlxcXFx1QTI3MFxcXFx1QTI3MVxcXFx1QTI3MlxcXFx1QTI3M1xcXFx1QTI3NFxcXFx1QTI3NVxcXFx1QTI3NlxcXFx1QTI3N1xcXFx1QTI3OFxcXFx1QTI3OVxcXFx1QTI3QVxcXFx1QTI3QlxcXFx1QTI3Q1xcXFx1QTI3RFxcXFx1QTI3RVxcXFx1QTI3RlxcXFx1QTI4MFxcXFx1QTI4MVxcXFx1QTI4MlxcXFx1QTI4M1xcXFx1QTI4NFxcXFx1QTI4NVxcXFx1QTI4NlxcXFx1QTI4N1xcXFx1QTI4OFxcXFx1QTI4OVxcXFx1QTI4QVxcXFx1QTI4QlxcXFx1QTI4Q1xcXFx1QTI4RFxcXFx1QTI4RVxcXFx1QTI4RlxcXFx1QTI5MFxcXFx1QTI5MVxcXFx1QTI5MlxcXFx1QTI5M1xcXFx1QTI5NFxcXFx1QTI5NVxcXFx1QTI5NlxcXFx1QTI5N1xcXFx1QTI5OFxcXFx1QTI5OVxcXFx1QTI5QVxcXFx1QTI5QlxcXFx1QTI5Q1xcXFx1QTI5RFxcXFx1QTI5RVxcXFx1QTI5RlxcXFx1QTJBMFxcXFx1QTJBMVxcXFx1QTJBMlxcXFx1QTJBM1xcXFx1QTJBNFxcXFx1QTJBNVxcXFx1QTJBNlxcXFx1QTJBN1xcXFx1QTJBOFxcXFx1QTJBOVxcXFx1QTJBQVxcXFx1QTJBQlxcXFx1QTJBQ1xcXFx1QTJBRFxcXFx1QTJBRVxcXFx1QTJBRlxcXFx1QTJCMFxcXFx1QTJCMVxcXFx1QTJCMlxcXFx1QTJCM1xcXFx1QTJCNFxcXFx1QTJCNVxcXFx1QTJCNlxcXFx1QTJCN1xcXFx1QTJCOFxcXFx1QTJCOVxcXFx1QTJCQVxcXFx1QTJCQlxcXFx1QTJCQ1xcXFx1QTJCRFxcXFx1QTJCRVxcXFx1QTJCRlxcXFx1QTJDMFxcXFx1QTJDMVxcXFx1QTJDMlxcXFx1QTJDM1xcXFx1QTJDNFxcXFx1QTJDNVxcXFx1QTJDNlxcXFx1QTJDN1xcXFx1QTJDOFxcXFx1QTJDOVxcXFx1QTJDQVxcXFx1QTJDQlxcXFx1QTJDQ1xcXFx1QTJDRFxcXFx1QTJDRVxcXFx1QTJDRlxcXFx1QTJEMFxcXFx1QTJEMVxcXFx1QTJEMlxcXFx1QTJEM1xcXFx1QTJENFxcXFx1QTJENVxcXFx1QTJENlxcXFx1QTJEN1xcXFx1QTJEOFxcXFx1QTJEOVxcXFx1QTJEQVxcXFx1QTJEQlxcXFx1QTJEQ1xcXFx1QTJERFxcXFx1QTJERVxcXFx1QTJERlxcXFx1QTJFMFxcXFx1QTJFMVxcXFx1QTJFMlxcXFx1QTJFM1xcXFx1QTJFNFxcXFx1QTJFNVxcXFx1QTJFNlxcXFx1QTJFN1xcXFx1QTJFOFxcXFx1QTJFOVxcXFx1QTJFQVxcXFx1QTJFQlxcXFx1QTJFQ1xcXFx1QTJFRFxcXFx1QTJFRVxcXFx1QTJFRlxcXFx1QTJGMFxcXFx1QTJGMVxcXFx1QTJGMlxcXFx1QTJGM1xcXFx1QTJGNFxcXFx1QTJGNVxcXFx1QTJGNlxcXFx1QTJGN1xcXFx1QTJGOFxcXFx1QTJGOVxcXFx1QTJGQVxcXFx1QTJGQlxcXFx1QTJGQ1xcXFx1QTJGRFxcXFx1QTJGRVxcXFx1QTJGRlxcXFx1QTMwMFxcXFx1QTMwMVxcXFx1QTMwMlxcXFx1QTMwM1xcXFx1QTMwNFxcXFx1QTMwNVxcXFx1QTMwNlxcXFx1QTMwN1xcXFx1QTMwOFxcXFx1QTMwOVxcXFx1QTMwQVxcXFx1QTMwQlxcXFx1QTMwQ1xcXFx1QTMwRFxcXFx1QTMwRVxcXFx1QTMwRlxcXFx1QTMxMFxcXFx1QTMxMVxcXFx1QTMxMlxcXFx1QTMxM1xcXFx1QTMxNFxcXFx1QTMxNVxcXFx1QTMxNlxcXFx1QTMxN1xcXFx1QTMxOFxcXFx1QTMxOVxcXFx1QTMxQVxcXFx1QTMxQlxcXFx1QTMxQ1xcXFx1QTMxRFxcXFx1QTMxRVxcXFx1QTMxRlxcXFx1QTMyMFxcXFx1QTMyMVxcXFx1QTMyMlxcXFx1QTMyM1xcXFx1QTMyNFxcXFx1QTMyNVxcXFx1QTMyNlxcXFx1QTMyN1xcXFx1QTMyOFxcXFx1QTMyOVxcXFx1QTMyQVxcXFx1QTMyQlxcXFx1QTMyQ1xcXFx1QTMyRFxcXFx1QTMyRVxcXFx1QTMyRlxcXFx1QTMzMFxcXFx1QTMzMVxcXFx1QTMzMlxcXFx1QTMzM1xcXFx1QTMzNFxcXFx1QTMzNVxcXFx1QTMzNlxcXFx1QTMzN1xcXFx1QTMzOFxcXFx1QTMzOVxcXFx1QTMzQVxcXFx1QTMzQlxcXFx1QTMzQ1xcXFx1QTMzRFxcXFx1QTMzRVxcXFx1QTMzRlxcXFx1QTM0MFxcXFx1QTM0MVxcXFx1QTM0MlxcXFx1QTM0M1xcXFx1QTM0NFxcXFx1QTM0NVxcXFx1QTM0NlxcXFx1QTM0N1xcXFx1QTM0OFxcXFx1QTM0OVxcXFx1QTM0QVxcXFx1QTM0QlxcXFx1QTM0Q1xcXFx1QTM0RFxcXFx1QTM0RVxcXFx1QTM0RlxcXFx1QTM1MFxcXFx1QTM1MVxcXFx1QTM1MlxcXFx1QTM1M1xcXFx1QTM1NFxcXFx1QTM1NVxcXFx1QTM1NlxcXFx1QTM1N1xcXFx1QTM1OFxcXFx1QTM1OVxcXFx1QTM1QVxcXFx1QTM1QlxcXFx1QTM1Q1xcXFx1QTM1RFxcXFx1QTM1RVxcXFx1QTM1RlxcXFx1QTM2MFxcXFx1QTM2MVxcXFx1QTM2MlxcXFx1QTM2M1xcXFx1QTM2NFxcXFx1QTM2NVxcXFx1QTM2NlxcXFx1QTM2N1xcXFx1QTM2OFxcXFx1QTM2OVxcXFx1QTM2QVxcXFx1QTM2QlxcXFx1QTM2Q1xcXFx1QTM2RFxcXFx1QTM2RVxcXFx1QTM2RlxcXFx1QTM3MFxcXFx1QTM3MVxcXFx1QTM3MlxcXFx1QTM3M1xcXFx1QTM3NFxcXFx1QTM3NVxcXFx1QTM3NlxcXFx1QTM3N1xcXFx1QTM3OFxcXFx1QTM3OVxcXFx1QTM3QVxcXFx1QTM3QlxcXFx1QTM3Q1xcXFx1QTM3RFxcXFx1QTM3RVxcXFx1QTM3RlxcXFx1QTM4MFxcXFx1QTM4MVxcXFx1QTM4MlxcXFx1QTM4M1xcXFx1QTM4NFxcXFx1QTM4NVxcXFx1QTM4NlxcXFx1QTM4N1xcXFx1QTM4OFxcXFx1QTM4OVxcXFx1QTM4QVxcXFx1QTM4QlxcXFx1QTM4Q1xcXFx1QTM4RFxcXFx1QTM4RVxcXFx1QTM4RlxcXFx1QTM5MFxcXFx1QTM5MVxcXFx1QTM5MlxcXFx1QTM5M1xcXFx1QTM5NFxcXFx1QTM5NVxcXFx1QTM5NlxcXFx1QTM5N1xcXFx1QTM5OFxcXFx1QTM5OVxcXFx1QTM5QVxcXFx1QTM5QlxcXFx1QTM5Q1xcXFx1QTM5RFxcXFx1QTM5RVxcXFx1QTM5RlxcXFx1QTNBMFxcXFx1QTNBMVxcXFx1QTNBMlxcXFx1QTNBM1xcXFx1QTNBNFxcXFx1QTNBNVxcXFx1QTNBNlxcXFx1QTNBN1xcXFx1QTNBOFxcXFx1QTNBOVxcXFx1QTNBQVxcXFx1QTNBQlxcXFx1QTNBQ1xcXFx1QTNBRFxcXFx1QTNBRVxcXFx1QTNBRlxcXFx1QTNCMFxcXFx1QTNCMVxcXFx1QTNCMlxcXFx1QTNCM1xcXFx1QTNCNFxcXFx1QTNCNVxcXFx1QTNCNlxcXFx1QTNCN1xcXFx1QTNCOFxcXFx1QTNCOVxcXFx1QTNCQVxcXFx1QTNCQlxcXFx1QTNCQ1xcXFx1QTNCRFxcXFx1QTNCRVxcXFx1QTNCRlxcXFx1QTNDMFxcXFx1QTNDMVxcXFx1QTNDMlxcXFx1QTNDM1xcXFx1QTNDNFxcXFx1QTNDNVxcXFx1QTNDNlxcXFx1QTNDN1xcXFx1QTNDOFxcXFx1QTNDOVxcXFx1QTNDQVxcXFx1QTNDQlxcXFx1QTNDQ1xcXFx1QTNDRFxcXFx1QTNDRVxcXFx1QTNDRlxcXFx1QTNEMFxcXFx1QTNEMVxcXFx1QTNEMlxcXFx1QTNEM1xcXFx1QTNENFxcXFx1QTNENVxcXFx1QTNENlxcXFx1QTNEN1xcXFx1QTNEOFxcXFx1QTNEOVxcXFx1QTNEQVxcXFx1QTNEQlxcXFx1QTNEQ1xcXFx1QTNERFxcXFx1QTNERVxcXFx1QTNERlxcXFx1QTNFMFxcXFx1QTNFMVxcXFx1QTNFMlxcXFx1QTNFM1xcXFx1QTNFNFxcXFx1QTNFNVxcXFx1QTNFNlxcXFx1QTNFN1xcXFx1QTNFOFxcXFx1QTNFOVxcXFx1QTNFQVxcXFx1QTNFQlxcXFx1QTNFQ1xcXFx1QTNFRFxcXFx1QTNFRVxcXFx1QTNFRlxcXFx1QTNGMFxcXFx1QTNGMVxcXFx1QTNGMlxcXFx1QTNGM1xcXFx1QTNGNFxcXFx1QTNGNVxcXFx1QTNGNlxcXFx1QTNGN1xcXFx1QTNGOFxcXFx1QTNGOVxcXFx1QTNGQVxcXFx1QTNGQlxcXFx1QTNGQ1xcXFx1QTNGRFxcXFx1QTNGRVxcXFx1QTNGRlxcXFx1QTQwMFxcXFx1QTQwMVxcXFx1QTQwMlxcXFx1QTQwM1xcXFx1QTQwNFxcXFx1QTQwNVxcXFx1QTQwNlxcXFx1QTQwN1xcXFx1QTQwOFxcXFx1QTQwOVxcXFx1QTQwQVxcXFx1QTQwQlxcXFx1QTQwQ1xcXFx1QTQwRFxcXFx1QTQwRVxcXFx1QTQwRlxcXFx1QTQxMFxcXFx1QTQxMVxcXFx1QTQxMlxcXFx1QTQxM1xcXFx1QTQxNFxcXFx1QTQxNVxcXFx1QTQxNlxcXFx1QTQxN1xcXFx1QTQxOFxcXFx1QTQxOVxcXFx1QTQxQVxcXFx1QTQxQlxcXFx1QTQxQ1xcXFx1QTQxRFxcXFx1QTQxRVxcXFx1QTQxRlxcXFx1QTQyMFxcXFx1QTQyMVxcXFx1QTQyMlxcXFx1QTQyM1xcXFx1QTQyNFxcXFx1QTQyNVxcXFx1QTQyNlxcXFx1QTQyN1xcXFx1QTQyOFxcXFx1QTQyOVxcXFx1QTQyQVxcXFx1QTQyQlxcXFx1QTQyQ1xcXFx1QTQyRFxcXFx1QTQyRVxcXFx1QTQyRlxcXFx1QTQzMFxcXFx1QTQzMVxcXFx1QTQzMlxcXFx1QTQzM1xcXFx1QTQzNFxcXFx1QTQzNVxcXFx1QTQzNlxcXFx1QTQzN1xcXFx1QTQzOFxcXFx1QTQzOVxcXFx1QTQzQVxcXFx1QTQzQlxcXFx1QTQzQ1xcXFx1QTQzRFxcXFx1QTQzRVxcXFx1QTQzRlxcXFx1QTQ0MFxcXFx1QTQ0MVxcXFx1QTQ0MlxcXFx1QTQ0M1xcXFx1QTQ0NFxcXFx1QTQ0NVxcXFx1QTQ0NlxcXFx1QTQ0N1xcXFx1QTQ0OFxcXFx1QTQ0OVxcXFx1QTQ0QVxcXFx1QTQ0QlxcXFx1QTQ0Q1xcXFx1QTQ0RFxcXFx1QTQ0RVxcXFx1QTQ0RlxcXFx1QTQ1MFxcXFx1QTQ1MVxcXFx1QTQ1MlxcXFx1QTQ1M1xcXFx1QTQ1NFxcXFx1QTQ1NVxcXFx1QTQ1NlxcXFx1QTQ1N1xcXFx1QTQ1OFxcXFx1QTQ1OVxcXFx1QTQ1QVxcXFx1QTQ1QlxcXFx1QTQ1Q1xcXFx1QTQ1RFxcXFx1QTQ1RVxcXFx1QTQ1RlxcXFx1QTQ2MFxcXFx1QTQ2MVxcXFx1QTQ2MlxcXFx1QTQ2M1xcXFx1QTQ2NFxcXFx1QTQ2NVxcXFx1QTQ2NlxcXFx1QTQ2N1xcXFx1QTQ2OFxcXFx1QTQ2OVxcXFx1QTQ2QVxcXFx1QTQ2QlxcXFx1QTQ2Q1xcXFx1QTQ2RFxcXFx1QTQ2RVxcXFx1QTQ2RlxcXFx1QTQ3MFxcXFx1QTQ3MVxcXFx1QTQ3MlxcXFx1QTQ3M1xcXFx1QTQ3NFxcXFx1QTQ3NVxcXFx1QTQ3NlxcXFx1QTQ3N1xcXFx1QTQ3OFxcXFx1QTQ3OVxcXFx1QTQ3QVxcXFx1QTQ3QlxcXFx1QTQ3Q1xcXFx1QTQ3RFxcXFx1QTQ3RVxcXFx1QTQ3RlxcXFx1QTQ4MFxcXFx1QTQ4MVxcXFx1QTQ4MlxcXFx1QTQ4M1xcXFx1QTQ4NFxcXFx1QTQ4NVxcXFx1QTQ4NlxcXFx1QTQ4N1xcXFx1QTQ4OFxcXFx1QTQ4OVxcXFx1QTQ4QVxcXFx1QTQ4QlxcXFx1QTQ4Q1xcXFx1QTUwMFxcXFx1QTUwMVxcXFx1QTUwMlxcXFx1QTUwM1xcXFx1QTUwNFxcXFx1QTUwNVxcXFx1QTUwNlxcXFx1QTUwN1xcXFx1QTUwOFxcXFx1QTUwOVxcXFx1QTUwQVxcXFx1QTUwQlxcXFx1QTUwQ1xcXFx1QTUwRFxcXFx1QTUwRVxcXFx1QTUwRlxcXFx1QTUxMFxcXFx1QTUxMVxcXFx1QTUxMlxcXFx1QTUxM1xcXFx1QTUxNFxcXFx1QTUxNVxcXFx1QTUxNlxcXFx1QTUxN1xcXFx1QTUxOFxcXFx1QTUxOVxcXFx1QTUxQVxcXFx1QTUxQlxcXFx1QTUxQ1xcXFx1QTUxRFxcXFx1QTUxRVxcXFx1QTUxRlxcXFx1QTUyMFxcXFx1QTUyMVxcXFx1QTUyMlxcXFx1QTUyM1xcXFx1QTUyNFxcXFx1QTUyNVxcXFx1QTUyNlxcXFx1QTUyN1xcXFx1QTUyOFxcXFx1QTUyOVxcXFx1QTUyQVxcXFx1QTUyQlxcXFx1QTUyQ1xcXFx1QTUyRFxcXFx1QTUyRVxcXFx1QTUyRlxcXFx1QTUzMFxcXFx1QTUzMVxcXFx1QTUzMlxcXFx1QTUzM1xcXFx1QTUzNFxcXFx1QTUzNVxcXFx1QTUzNlxcXFx1QTUzN1xcXFx1QTUzOFxcXFx1QTUzOVxcXFx1QTUzQVxcXFx1QTUzQlxcXFx1QTUzQ1xcXFx1QTUzRFxcXFx1QTUzRVxcXFx1QTUzRlxcXFx1QTU0MFxcXFx1QTU0MVxcXFx1QTU0MlxcXFx1QTU0M1xcXFx1QTU0NFxcXFx1QTU0NVxcXFx1QTU0NlxcXFx1QTU0N1xcXFx1QTU0OFxcXFx1QTU0OVxcXFx1QTU0QVxcXFx1QTU0QlxcXFx1QTU0Q1xcXFx1QTU0RFxcXFx1QTU0RVxcXFx1QTU0RlxcXFx1QTU1MFxcXFx1QTU1MVxcXFx1QTU1MlxcXFx1QTU1M1xcXFx1QTU1NFxcXFx1QTU1NVxcXFx1QTU1NlxcXFx1QTU1N1xcXFx1QTU1OFxcXFx1QTU1OVxcXFx1QTU1QVxcXFx1QTU1QlxcXFx1QTU1Q1xcXFx1QTU1RFxcXFx1QTU1RVxcXFx1QTU1RlxcXFx1QTU2MFxcXFx1QTU2MVxcXFx1QTU2MlxcXFx1QTU2M1xcXFx1QTU2NFxcXFx1QTU2NVxcXFx1QTU2NlxcXFx1QTU2N1xcXFx1QTU2OFxcXFx1QTU2OVxcXFx1QTU2QVxcXFx1QTU2QlxcXFx1QTU2Q1xcXFx1QTU2RFxcXFx1QTU2RVxcXFx1QTU2RlxcXFx1QTU3MFxcXFx1QTU3MVxcXFx1QTU3MlxcXFx1QTU3M1xcXFx1QTU3NFxcXFx1QTU3NVxcXFx1QTU3NlxcXFx1QTU3N1xcXFx1QTU3OFxcXFx1QTU3OVxcXFx1QTU3QVxcXFx1QTU3QlxcXFx1QTU3Q1xcXFx1QTU3RFxcXFx1QTU3RVxcXFx1QTU3RlxcXFx1QTU4MFxcXFx1QTU4MVxcXFx1QTU4MlxcXFx1QTU4M1xcXFx1QTU4NFxcXFx1QTU4NVxcXFx1QTU4NlxcXFx1QTU4N1xcXFx1QTU4OFxcXFx1QTU4OVxcXFx1QTU4QVxcXFx1QTU4QlxcXFx1QTU4Q1xcXFx1QTU4RFxcXFx1QTU4RVxcXFx1QTU4RlxcXFx1QTU5MFxcXFx1QTU5MVxcXFx1QTU5MlxcXFx1QTU5M1xcXFx1QTU5NFxcXFx1QTU5NVxcXFx1QTU5NlxcXFx1QTU5N1xcXFx1QTU5OFxcXFx1QTU5OVxcXFx1QTU5QVxcXFx1QTU5QlxcXFx1QTU5Q1xcXFx1QTU5RFxcXFx1QTU5RVxcXFx1QTU5RlxcXFx1QTVBMFxcXFx1QTVBMVxcXFx1QTVBMlxcXFx1QTVBM1xcXFx1QTVBNFxcXFx1QTVBNVxcXFx1QTVBNlxcXFx1QTVBN1xcXFx1QTVBOFxcXFx1QTVBOVxcXFx1QTVBQVxcXFx1QTVBQlxcXFx1QTVBQ1xcXFx1QTVBRFxcXFx1QTVBRVxcXFx1QTVBRlxcXFx1QTVCMFxcXFx1QTVCMVxcXFx1QTVCMlxcXFx1QTVCM1xcXFx1QTVCNFxcXFx1QTVCNVxcXFx1QTVCNlxcXFx1QTVCN1xcXFx1QTVCOFxcXFx1QTVCOVxcXFx1QTVCQVxcXFx1QTVCQlxcXFx1QTVCQ1xcXFx1QTVCRFxcXFx1QTVCRVxcXFx1QTVCRlxcXFx1QTVDMFxcXFx1QTVDMVxcXFx1QTVDMlxcXFx1QTVDM1xcXFx1QTVDNFxcXFx1QTVDNVxcXFx1QTVDNlxcXFx1QTVDN1xcXFx1QTVDOFxcXFx1QTVDOVxcXFx1QTVDQVxcXFx1QTVDQlxcXFx1QTVDQ1xcXFx1QTVDRFxcXFx1QTVDRVxcXFx1QTVDRlxcXFx1QTVEMFxcXFx1QTVEMVxcXFx1QTVEMlxcXFx1QTVEM1xcXFx1QTVENFxcXFx1QTVENVxcXFx1QTVENlxcXFx1QTVEN1xcXFx1QTVEOFxcXFx1QTVEOVxcXFx1QTVEQVxcXFx1QTVEQlxcXFx1QTVEQ1xcXFx1QTVERFxcXFx1QTVERVxcXFx1QTVERlxcXFx1QTVFMFxcXFx1QTVFMVxcXFx1QTVFMlxcXFx1QTVFM1xcXFx1QTVFNFxcXFx1QTVFNVxcXFx1QTVFNlxcXFx1QTVFN1xcXFx1QTVFOFxcXFx1QTVFOVxcXFx1QTVFQVxcXFx1QTVFQlxcXFx1QTVFQ1xcXFx1QTVFRFxcXFx1QTVFRVxcXFx1QTVFRlxcXFx1QTVGMFxcXFx1QTVGMVxcXFx1QTVGMlxcXFx1QTVGM1xcXFx1QTVGNFxcXFx1QTVGNVxcXFx1QTVGNlxcXFx1QTVGN1xcXFx1QTVGOFxcXFx1QTVGOVxcXFx1QTVGQVxcXFx1QTVGQlxcXFx1QTVGQ1xcXFx1QTVGRFxcXFx1QTVGRVxcXFx1QTVGRlxcXFx1QTYwMFxcXFx1QTYwMVxcXFx1QTYwMlxcXFx1QTYwM1xcXFx1QTYwNFxcXFx1QTYwNVxcXFx1QTYwNlxcXFx1QTYwN1xcXFx1QTYwOFxcXFx1QTYwOVxcXFx1QTYwQVxcXFx1QTYwQlxcXFx1QTYxMFxcXFx1QTYxMVxcXFx1QTYxMlxcXFx1QTYxM1xcXFx1QTYxNFxcXFx1QTYxNVxcXFx1QTYxNlxcXFx1QTYxN1xcXFx1QTYxOFxcXFx1QTYxOVxcXFx1QTYxQVxcXFx1QTYxQlxcXFx1QTYxQ1xcXFx1QTYxRFxcXFx1QTYxRVxcXFx1QTYxRlxcXFx1QTYyQVxcXFx1QTYyQlxcXFx1QTY2RVxcXFx1QTdGQlxcXFx1QTdGQ1xcXFx1QTdGRFxcXFx1QTdGRVxcXFx1QTdGRlxcXFx1QTgwMFxcXFx1QTgwMVxcXFx1QTgwM1xcXFx1QTgwNFxcXFx1QTgwNVxcXFx1QTgwN1xcXFx1QTgwOFxcXFx1QTgwOVxcXFx1QTgwQVxcXFx1QTgwQ1xcXFx1QTgwRFxcXFx1QTgwRVxcXFx1QTgwRlxcXFx1QTgxMFxcXFx1QTgxMVxcXFx1QTgxMlxcXFx1QTgxM1xcXFx1QTgxNFxcXFx1QTgxNVxcXFx1QTgxNlxcXFx1QTgxN1xcXFx1QTgxOFxcXFx1QTgxOVxcXFx1QTgxQVxcXFx1QTgxQlxcXFx1QTgxQ1xcXFx1QTgxRFxcXFx1QTgxRVxcXFx1QTgxRlxcXFx1QTgyMFxcXFx1QTgyMVxcXFx1QTgyMlxcXFx1QTg0MFxcXFx1QTg0MVxcXFx1QTg0MlxcXFx1QTg0M1xcXFx1QTg0NFxcXFx1QTg0NVxcXFx1QTg0NlxcXFx1QTg0N1xcXFx1QTg0OFxcXFx1QTg0OVxcXFx1QTg0QVxcXFx1QTg0QlxcXFx1QTg0Q1xcXFx1QTg0RFxcXFx1QTg0RVxcXFx1QTg0RlxcXFx1QTg1MFxcXFx1QTg1MVxcXFx1QTg1MlxcXFx1QTg1M1xcXFx1QTg1NFxcXFx1QTg1NVxcXFx1QTg1NlxcXFx1QTg1N1xcXFx1QTg1OFxcXFx1QTg1OVxcXFx1QTg1QVxcXFx1QTg1QlxcXFx1QTg1Q1xcXFx1QTg1RFxcXFx1QTg1RVxcXFx1QTg1RlxcXFx1QTg2MFxcXFx1QTg2MVxcXFx1QTg2MlxcXFx1QTg2M1xcXFx1QTg2NFxcXFx1QTg2NVxcXFx1QTg2NlxcXFx1QTg2N1xcXFx1QTg2OFxcXFx1QTg2OVxcXFx1QTg2QVxcXFx1QTg2QlxcXFx1QTg2Q1xcXFx1QTg2RFxcXFx1QTg2RVxcXFx1QTg2RlxcXFx1QTg3MFxcXFx1QTg3MVxcXFx1QTg3MlxcXFx1QTg3M1xcXFx1QTg4MlxcXFx1QTg4M1xcXFx1QTg4NFxcXFx1QTg4NVxcXFx1QTg4NlxcXFx1QTg4N1xcXFx1QTg4OFxcXFx1QTg4OVxcXFx1QTg4QVxcXFx1QTg4QlxcXFx1QTg4Q1xcXFx1QTg4RFxcXFx1QTg4RVxcXFx1QTg4RlxcXFx1QTg5MFxcXFx1QTg5MVxcXFx1QTg5MlxcXFx1QTg5M1xcXFx1QTg5NFxcXFx1QTg5NVxcXFx1QTg5NlxcXFx1QTg5N1xcXFx1QTg5OFxcXFx1QTg5OVxcXFx1QTg5QVxcXFx1QTg5QlxcXFx1QTg5Q1xcXFx1QTg5RFxcXFx1QTg5RVxcXFx1QTg5RlxcXFx1QThBMFxcXFx1QThBMVxcXFx1QThBMlxcXFx1QThBM1xcXFx1QThBNFxcXFx1QThBNVxcXFx1QThBNlxcXFx1QThBN1xcXFx1QThBOFxcXFx1QThBOVxcXFx1QThBQVxcXFx1QThBQlxcXFx1QThBQ1xcXFx1QThBRFxcXFx1QThBRVxcXFx1QThBRlxcXFx1QThCMFxcXFx1QThCMVxcXFx1QThCMlxcXFx1QThCM1xcXFx1QTkwQVxcXFx1QTkwQlxcXFx1QTkwQ1xcXFx1QTkwRFxcXFx1QTkwRVxcXFx1QTkwRlxcXFx1QTkxMFxcXFx1QTkxMVxcXFx1QTkxMlxcXFx1QTkxM1xcXFx1QTkxNFxcXFx1QTkxNVxcXFx1QTkxNlxcXFx1QTkxN1xcXFx1QTkxOFxcXFx1QTkxOVxcXFx1QTkxQVxcXFx1QTkxQlxcXFx1QTkxQ1xcXFx1QTkxRFxcXFx1QTkxRVxcXFx1QTkxRlxcXFx1QTkyMFxcXFx1QTkyMVxcXFx1QTkyMlxcXFx1QTkyM1xcXFx1QTkyNFxcXFx1QTkyNVxcXFx1QTkzMFxcXFx1QTkzMVxcXFx1QTkzMlxcXFx1QTkzM1xcXFx1QTkzNFxcXFx1QTkzNVxcXFx1QTkzNlxcXFx1QTkzN1xcXFx1QTkzOFxcXFx1QTkzOVxcXFx1QTkzQVxcXFx1QTkzQlxcXFx1QTkzQ1xcXFx1QTkzRFxcXFx1QTkzRVxcXFx1QTkzRlxcXFx1QTk0MFxcXFx1QTk0MVxcXFx1QTk0MlxcXFx1QTk0M1xcXFx1QTk0NFxcXFx1QTk0NVxcXFx1QTk0NlxcXFx1QUEwMFxcXFx1QUEwMVxcXFx1QUEwMlxcXFx1QUEwM1xcXFx1QUEwNFxcXFx1QUEwNVxcXFx1QUEwNlxcXFx1QUEwN1xcXFx1QUEwOFxcXFx1QUEwOVxcXFx1QUEwQVxcXFx1QUEwQlxcXFx1QUEwQ1xcXFx1QUEwRFxcXFx1QUEwRVxcXFx1QUEwRlxcXFx1QUExMFxcXFx1QUExMVxcXFx1QUExMlxcXFx1QUExM1xcXFx1QUExNFxcXFx1QUExNVxcXFx1QUExNlxcXFx1QUExN1xcXFx1QUExOFxcXFx1QUExOVxcXFx1QUExQVxcXFx1QUExQlxcXFx1QUExQ1xcXFx1QUExRFxcXFx1QUExRVxcXFx1QUExRlxcXFx1QUEyMFxcXFx1QUEyMVxcXFx1QUEyMlxcXFx1QUEyM1xcXFx1QUEyNFxcXFx1QUEyNVxcXFx1QUEyNlxcXFx1QUEyN1xcXFx1QUEyOFxcXFx1QUE0MFxcXFx1QUE0MVxcXFx1QUE0MlxcXFx1QUE0NFxcXFx1QUE0NVxcXFx1QUE0NlxcXFx1QUE0N1xcXFx1QUE0OFxcXFx1QUE0OVxcXFx1QUE0QVxcXFx1QUE0QlxcXFx1QUMwMFxcXFx1RDdBM1xcXFx1RjkwMFxcXFx1RjkwMVxcXFx1RjkwMlxcXFx1RjkwM1xcXFx1RjkwNFxcXFx1RjkwNVxcXFx1RjkwNlxcXFx1RjkwN1xcXFx1RjkwOFxcXFx1RjkwOVxcXFx1RjkwQVxcXFx1RjkwQlxcXFx1RjkwQ1xcXFx1RjkwRFxcXFx1RjkwRVxcXFx1RjkwRlxcXFx1RjkxMFxcXFx1RjkxMVxcXFx1RjkxMlxcXFx1RjkxM1xcXFx1RjkxNFxcXFx1RjkxNVxcXFx1RjkxNlxcXFx1RjkxN1xcXFx1RjkxOFxcXFx1RjkxOVxcXFx1RjkxQVxcXFx1RjkxQlxcXFx1RjkxQ1xcXFx1RjkxRFxcXFx1RjkxRVxcXFx1RjkxRlxcXFx1RjkyMFxcXFx1RjkyMVxcXFx1RjkyMlxcXFx1RjkyM1xcXFx1RjkyNFxcXFx1RjkyNVxcXFx1RjkyNlxcXFx1RjkyN1xcXFx1RjkyOFxcXFx1RjkyOVxcXFx1RjkyQVxcXFx1RjkyQlxcXFx1RjkyQ1xcXFx1RjkyRFxcXFx1RjkyRVxcXFx1RjkyRlxcXFx1RjkzMFxcXFx1RjkzMVxcXFx1RjkzMlxcXFx1RjkzM1xcXFx1RjkzNFxcXFx1RjkzNVxcXFx1RjkzNlxcXFx1RjkzN1xcXFx1RjkzOFxcXFx1RjkzOVxcXFx1RjkzQVxcXFx1RjkzQlxcXFx1RjkzQ1xcXFx1RjkzRFxcXFx1RjkzRVxcXFx1RjkzRlxcXFx1Rjk0MFxcXFx1Rjk0MVxcXFx1Rjk0MlxcXFx1Rjk0M1xcXFx1Rjk0NFxcXFx1Rjk0NVxcXFx1Rjk0NlxcXFx1Rjk0N1xcXFx1Rjk0OFxcXFx1Rjk0OVxcXFx1Rjk0QVxcXFx1Rjk0QlxcXFx1Rjk0Q1xcXFx1Rjk0RFxcXFx1Rjk0RVxcXFx1Rjk0RlxcXFx1Rjk1MFxcXFx1Rjk1MVxcXFx1Rjk1MlxcXFx1Rjk1M1xcXFx1Rjk1NFxcXFx1Rjk1NVxcXFx1Rjk1NlxcXFx1Rjk1N1xcXFx1Rjk1OFxcXFx1Rjk1OVxcXFx1Rjk1QVxcXFx1Rjk1QlxcXFx1Rjk1Q1xcXFx1Rjk1RFxcXFx1Rjk1RVxcXFx1Rjk1RlxcXFx1Rjk2MFxcXFx1Rjk2MVxcXFx1Rjk2MlxcXFx1Rjk2M1xcXFx1Rjk2NFxcXFx1Rjk2NVxcXFx1Rjk2NlxcXFx1Rjk2N1xcXFx1Rjk2OFxcXFx1Rjk2OVxcXFx1Rjk2QVxcXFx1Rjk2QlxcXFx1Rjk2Q1xcXFx1Rjk2RFxcXFx1Rjk2RVxcXFx1Rjk2RlxcXFx1Rjk3MFxcXFx1Rjk3MVxcXFx1Rjk3MlxcXFx1Rjk3M1xcXFx1Rjk3NFxcXFx1Rjk3NVxcXFx1Rjk3NlxcXFx1Rjk3N1xcXFx1Rjk3OFxcXFx1Rjk3OVxcXFx1Rjk3QVxcXFx1Rjk3QlxcXFx1Rjk3Q1xcXFx1Rjk3RFxcXFx1Rjk3RVxcXFx1Rjk3RlxcXFx1Rjk4MFxcXFx1Rjk4MVxcXFx1Rjk4MlxcXFx1Rjk4M1xcXFx1Rjk4NFxcXFx1Rjk4NVxcXFx1Rjk4NlxcXFx1Rjk4N1xcXFx1Rjk4OFxcXFx1Rjk4OVxcXFx1Rjk4QVxcXFx1Rjk4QlxcXFx1Rjk4Q1xcXFx1Rjk4RFxcXFx1Rjk4RVxcXFx1Rjk4RlxcXFx1Rjk5MFxcXFx1Rjk5MVxcXFx1Rjk5MlxcXFx1Rjk5M1xcXFx1Rjk5NFxcXFx1Rjk5NVxcXFx1Rjk5NlxcXFx1Rjk5N1xcXFx1Rjk5OFxcXFx1Rjk5OVxcXFx1Rjk5QVxcXFx1Rjk5QlxcXFx1Rjk5Q1xcXFx1Rjk5RFxcXFx1Rjk5RVxcXFx1Rjk5RlxcXFx1RjlBMFxcXFx1RjlBMVxcXFx1RjlBMlxcXFx1RjlBM1xcXFx1RjlBNFxcXFx1RjlBNVxcXFx1RjlBNlxcXFx1RjlBN1xcXFx1RjlBOFxcXFx1RjlBOVxcXFx1RjlBQVxcXFx1RjlBQlxcXFx1RjlBQ1xcXFx1RjlBRFxcXFx1RjlBRVxcXFx1RjlBRlxcXFx1RjlCMFxcXFx1RjlCMVxcXFx1RjlCMlxcXFx1RjlCM1xcXFx1RjlCNFxcXFx1RjlCNVxcXFx1RjlCNlxcXFx1RjlCN1xcXFx1RjlCOFxcXFx1RjlCOVxcXFx1RjlCQVxcXFx1RjlCQlxcXFx1RjlCQ1xcXFx1RjlCRFxcXFx1RjlCRVxcXFx1RjlCRlxcXFx1RjlDMFxcXFx1RjlDMVxcXFx1RjlDMlxcXFx1RjlDM1xcXFx1RjlDNFxcXFx1RjlDNVxcXFx1RjlDNlxcXFx1RjlDN1xcXFx1RjlDOFxcXFx1RjlDOVxcXFx1RjlDQVxcXFx1RjlDQlxcXFx1RjlDQ1xcXFx1RjlDRFxcXFx1RjlDRVxcXFx1RjlDRlxcXFx1RjlEMFxcXFx1RjlEMVxcXFx1RjlEMlxcXFx1RjlEM1xcXFx1RjlENFxcXFx1RjlENVxcXFx1RjlENlxcXFx1RjlEN1xcXFx1RjlEOFxcXFx1RjlEOVxcXFx1RjlEQVxcXFx1RjlEQlxcXFx1RjlEQ1xcXFx1RjlERFxcXFx1RjlERVxcXFx1RjlERlxcXFx1RjlFMFxcXFx1RjlFMVxcXFx1RjlFMlxcXFx1RjlFM1xcXFx1RjlFNFxcXFx1RjlFNVxcXFx1RjlFNlxcXFx1RjlFN1xcXFx1RjlFOFxcXFx1RjlFOVxcXFx1RjlFQVxcXFx1RjlFQlxcXFx1RjlFQ1xcXFx1RjlFRFxcXFx1RjlFRVxcXFx1RjlFRlxcXFx1RjlGMFxcXFx1RjlGMVxcXFx1RjlGMlxcXFx1RjlGM1xcXFx1RjlGNFxcXFx1RjlGNVxcXFx1RjlGNlxcXFx1RjlGN1xcXFx1RjlGOFxcXFx1RjlGOVxcXFx1RjlGQVxcXFx1RjlGQlxcXFx1RjlGQ1xcXFx1RjlGRFxcXFx1RjlGRVxcXFx1RjlGRlxcXFx1RkEwMFxcXFx1RkEwMVxcXFx1RkEwMlxcXFx1RkEwM1xcXFx1RkEwNFxcXFx1RkEwNVxcXFx1RkEwNlxcXFx1RkEwN1xcXFx1RkEwOFxcXFx1RkEwOVxcXFx1RkEwQVxcXFx1RkEwQlxcXFx1RkEwQ1xcXFx1RkEwRFxcXFx1RkEwRVxcXFx1RkEwRlxcXFx1RkExMFxcXFx1RkExMVxcXFx1RkExMlxcXFx1RkExM1xcXFx1RkExNFxcXFx1RkExNVxcXFx1RkExNlxcXFx1RkExN1xcXFx1RkExOFxcXFx1RkExOVxcXFx1RkExQVxcXFx1RkExQlxcXFx1RkExQ1xcXFx1RkExRFxcXFx1RkExRVxcXFx1RkExRlxcXFx1RkEyMFxcXFx1RkEyMVxcXFx1RkEyMlxcXFx1RkEyM1xcXFx1RkEyNFxcXFx1RkEyNVxcXFx1RkEyNlxcXFx1RkEyN1xcXFx1RkEyOFxcXFx1RkEyOVxcXFx1RkEyQVxcXFx1RkEyQlxcXFx1RkEyQ1xcXFx1RkEyRFxcXFx1RkEzMFxcXFx1RkEzMVxcXFx1RkEzMlxcXFx1RkEzM1xcXFx1RkEzNFxcXFx1RkEzNVxcXFx1RkEzNlxcXFx1RkEzN1xcXFx1RkEzOFxcXFx1RkEzOVxcXFx1RkEzQVxcXFx1RkEzQlxcXFx1RkEzQ1xcXFx1RkEzRFxcXFx1RkEzRVxcXFx1RkEzRlxcXFx1RkE0MFxcXFx1RkE0MVxcXFx1RkE0MlxcXFx1RkE0M1xcXFx1RkE0NFxcXFx1RkE0NVxcXFx1RkE0NlxcXFx1RkE0N1xcXFx1RkE0OFxcXFx1RkE0OVxcXFx1RkE0QVxcXFx1RkE0QlxcXFx1RkE0Q1xcXFx1RkE0RFxcXFx1RkE0RVxcXFx1RkE0RlxcXFx1RkE1MFxcXFx1RkE1MVxcXFx1RkE1MlxcXFx1RkE1M1xcXFx1RkE1NFxcXFx1RkE1NVxcXFx1RkE1NlxcXFx1RkE1N1xcXFx1RkE1OFxcXFx1RkE1OVxcXFx1RkE1QVxcXFx1RkE1QlxcXFx1RkE1Q1xcXFx1RkE1RFxcXFx1RkE1RVxcXFx1RkE1RlxcXFx1RkE2MFxcXFx1RkE2MVxcXFx1RkE2MlxcXFx1RkE2M1xcXFx1RkE2NFxcXFx1RkE2NVxcXFx1RkE2NlxcXFx1RkE2N1xcXFx1RkE2OFxcXFx1RkE2OVxcXFx1RkE2QVxcXFx1RkE3MFxcXFx1RkE3MVxcXFx1RkE3MlxcXFx1RkE3M1xcXFx1RkE3NFxcXFx1RkE3NVxcXFx1RkE3NlxcXFx1RkE3N1xcXFx1RkE3OFxcXFx1RkE3OVxcXFx1RkE3QVxcXFx1RkE3QlxcXFx1RkE3Q1xcXFx1RkE3RFxcXFx1RkE3RVxcXFx1RkE3RlxcXFx1RkE4MFxcXFx1RkE4MVxcXFx1RkE4MlxcXFx1RkE4M1xcXFx1RkE4NFxcXFx1RkE4NVxcXFx1RkE4NlxcXFx1RkE4N1xcXFx1RkE4OFxcXFx1RkE4OVxcXFx1RkE4QVxcXFx1RkE4QlxcXFx1RkE4Q1xcXFx1RkE4RFxcXFx1RkE4RVxcXFx1RkE4RlxcXFx1RkE5MFxcXFx1RkE5MVxcXFx1RkE5MlxcXFx1RkE5M1xcXFx1RkE5NFxcXFx1RkE5NVxcXFx1RkE5NlxcXFx1RkE5N1xcXFx1RkE5OFxcXFx1RkE5OVxcXFx1RkE5QVxcXFx1RkE5QlxcXFx1RkE5Q1xcXFx1RkE5RFxcXFx1RkE5RVxcXFx1RkE5RlxcXFx1RkFBMFxcXFx1RkFBMVxcXFx1RkFBMlxcXFx1RkFBM1xcXFx1RkFBNFxcXFx1RkFBNVxcXFx1RkFBNlxcXFx1RkFBN1xcXFx1RkFBOFxcXFx1RkFBOVxcXFx1RkFBQVxcXFx1RkFBQlxcXFx1RkFBQ1xcXFx1RkFBRFxcXFx1RkFBRVxcXFx1RkFBRlxcXFx1RkFCMFxcXFx1RkFCMVxcXFx1RkFCMlxcXFx1RkFCM1xcXFx1RkFCNFxcXFx1RkFCNVxcXFx1RkFCNlxcXFx1RkFCN1xcXFx1RkFCOFxcXFx1RkFCOVxcXFx1RkFCQVxcXFx1RkFCQlxcXFx1RkFCQ1xcXFx1RkFCRFxcXFx1RkFCRVxcXFx1RkFCRlxcXFx1RkFDMFxcXFx1RkFDMVxcXFx1RkFDMlxcXFx1RkFDM1xcXFx1RkFDNFxcXFx1RkFDNVxcXFx1RkFDNlxcXFx1RkFDN1xcXFx1RkFDOFxcXFx1RkFDOVxcXFx1RkFDQVxcXFx1RkFDQlxcXFx1RkFDQ1xcXFx1RkFDRFxcXFx1RkFDRVxcXFx1RkFDRlxcXFx1RkFEMFxcXFx1RkFEMVxcXFx1RkFEMlxcXFx1RkFEM1xcXFx1RkFENFxcXFx1RkFENVxcXFx1RkFENlxcXFx1RkFEN1xcXFx1RkFEOFxcXFx1RkFEOVxcXFx1RkIxRFxcXFx1RkIxRlxcXFx1RkIyMFxcXFx1RkIyMVxcXFx1RkIyMlxcXFx1RkIyM1xcXFx1RkIyNFxcXFx1RkIyNVxcXFx1RkIyNlxcXFx1RkIyN1xcXFx1RkIyOFxcXFx1RkIyQVxcXFx1RkIyQlxcXFx1RkIyQ1xcXFx1RkIyRFxcXFx1RkIyRVxcXFx1RkIyRlxcXFx1RkIzMFxcXFx1RkIzMVxcXFx1RkIzMlxcXFx1RkIzM1xcXFx1RkIzNFxcXFx1RkIzNVxcXFx1RkIzNlxcXFx1RkIzOFxcXFx1RkIzOVxcXFx1RkIzQVxcXFx1RkIzQlxcXFx1RkIzQ1xcXFx1RkIzRVxcXFx1RkI0MFxcXFx1RkI0MVxcXFx1RkI0M1xcXFx1RkI0NFxcXFx1RkI0NlxcXFx1RkI0N1xcXFx1RkI0OFxcXFx1RkI0OVxcXFx1RkI0QVxcXFx1RkI0QlxcXFx1RkI0Q1xcXFx1RkI0RFxcXFx1RkI0RVxcXFx1RkI0RlxcXFx1RkI1MFxcXFx1RkI1MVxcXFx1RkI1MlxcXFx1RkI1M1xcXFx1RkI1NFxcXFx1RkI1NVxcXFx1RkI1NlxcXFx1RkI1N1xcXFx1RkI1OFxcXFx1RkI1OVxcXFx1RkI1QVxcXFx1RkI1QlxcXFx1RkI1Q1xcXFx1RkI1RFxcXFx1RkI1RVxcXFx1RkI1RlxcXFx1RkI2MFxcXFx1RkI2MVxcXFx1RkI2MlxcXFx1RkI2M1xcXFx1RkI2NFxcXFx1RkI2NVxcXFx1RkI2NlxcXFx1RkI2N1xcXFx1RkI2OFxcXFx1RkI2OVxcXFx1RkI2QVxcXFx1RkI2QlxcXFx1RkI2Q1xcXFx1RkI2RFxcXFx1RkI2RVxcXFx1RkI2RlxcXFx1RkI3MFxcXFx1RkI3MVxcXFx1RkI3MlxcXFx1RkI3M1xcXFx1RkI3NFxcXFx1RkI3NVxcXFx1RkI3NlxcXFx1RkI3N1xcXFx1RkI3OFxcXFx1RkI3OVxcXFx1RkI3QVxcXFx1RkI3QlxcXFx1RkI3Q1xcXFx1RkI3RFxcXFx1RkI3RVxcXFx1RkI3RlxcXFx1RkI4MFxcXFx1RkI4MVxcXFx1RkI4MlxcXFx1RkI4M1xcXFx1RkI4NFxcXFx1RkI4NVxcXFx1RkI4NlxcXFx1RkI4N1xcXFx1RkI4OFxcXFx1RkI4OVxcXFx1RkI4QVxcXFx1RkI4QlxcXFx1RkI4Q1xcXFx1RkI4RFxcXFx1RkI4RVxcXFx1RkI4RlxcXFx1RkI5MFxcXFx1RkI5MVxcXFx1RkI5MlxcXFx1RkI5M1xcXFx1RkI5NFxcXFx1RkI5NVxcXFx1RkI5NlxcXFx1RkI5N1xcXFx1RkI5OFxcXFx1RkI5OVxcXFx1RkI5QVxcXFx1RkI5QlxcXFx1RkI5Q1xcXFx1RkI5RFxcXFx1RkI5RVxcXFx1RkI5RlxcXFx1RkJBMFxcXFx1RkJBMVxcXFx1RkJBMlxcXFx1RkJBM1xcXFx1RkJBNFxcXFx1RkJBNVxcXFx1RkJBNlxcXFx1RkJBN1xcXFx1RkJBOFxcXFx1RkJBOVxcXFx1RkJBQVxcXFx1RkJBQlxcXFx1RkJBQ1xcXFx1RkJBRFxcXFx1RkJBRVxcXFx1RkJBRlxcXFx1RkJCMFxcXFx1RkJCMVxcXFx1RkJEM1xcXFx1RkJENFxcXFx1RkJENVxcXFx1RkJENlxcXFx1RkJEN1xcXFx1RkJEOFxcXFx1RkJEOVxcXFx1RkJEQVxcXFx1RkJEQlxcXFx1RkJEQ1xcXFx1RkJERFxcXFx1RkJERVxcXFx1RkJERlxcXFx1RkJFMFxcXFx1RkJFMVxcXFx1RkJFMlxcXFx1RkJFM1xcXFx1RkJFNFxcXFx1RkJFNVxcXFx1RkJFNlxcXFx1RkJFN1xcXFx1RkJFOFxcXFx1RkJFOVxcXFx1RkJFQVxcXFx1RkJFQlxcXFx1RkJFQ1xcXFx1RkJFRFxcXFx1RkJFRVxcXFx1RkJFRlxcXFx1RkJGMFxcXFx1RkJGMVxcXFx1RkJGMlxcXFx1RkJGM1xcXFx1RkJGNFxcXFx1RkJGNVxcXFx1RkJGNlxcXFx1RkJGN1xcXFx1RkJGOFxcXFx1RkJGOVxcXFx1RkJGQVxcXFx1RkJGQlxcXFx1RkJGQ1xcXFx1RkJGRFxcXFx1RkJGRVxcXFx1RkJGRlxcXFx1RkMwMFxcXFx1RkMwMVxcXFx1RkMwMlxcXFx1RkMwM1xcXFx1RkMwNFxcXFx1RkMwNVxcXFx1RkMwNlxcXFx1RkMwN1xcXFx1RkMwOFxcXFx1RkMwOVxcXFx1RkMwQVxcXFx1RkMwQlxcXFx1RkMwQ1xcXFx1RkMwRFxcXFx1RkMwRVxcXFx1RkMwRlxcXFx1RkMxMFxcXFx1RkMxMVxcXFx1RkMxMlxcXFx1RkMxM1xcXFx1RkMxNFxcXFx1RkMxNVxcXFx1RkMxNlxcXFx1RkMxN1xcXFx1RkMxOFxcXFx1RkMxOVxcXFx1RkMxQVxcXFx1RkMxQlxcXFx1RkMxQ1xcXFx1RkMxRFxcXFx1RkMxRVxcXFx1RkMxRlxcXFx1RkMyMFxcXFx1RkMyMVxcXFx1RkMyMlxcXFx1RkMyM1xcXFx1RkMyNFxcXFx1RkMyNVxcXFx1RkMyNlxcXFx1RkMyN1xcXFx1RkMyOFxcXFx1RkMyOVxcXFx1RkMyQVxcXFx1RkMyQlxcXFx1RkMyQ1xcXFx1RkMyRFxcXFx1RkMyRVxcXFx1RkMyRlxcXFx1RkMzMFxcXFx1RkMzMVxcXFx1RkMzMlxcXFx1RkMzM1xcXFx1RkMzNFxcXFx1RkMzNVxcXFx1RkMzNlxcXFx1RkMzN1xcXFx1RkMzOFxcXFx1RkMzOVxcXFx1RkMzQVxcXFx1RkMzQlxcXFx1RkMzQ1xcXFx1RkMzRFxcXFx1RkMzRVxcXFx1RkMzRlxcXFx1RkM0MFxcXFx1RkM0MVxcXFx1RkM0MlxcXFx1RkM0M1xcXFx1RkM0NFxcXFx1RkM0NVxcXFx1RkM0NlxcXFx1RkM0N1xcXFx1RkM0OFxcXFx1RkM0OVxcXFx1RkM0QVxcXFx1RkM0QlxcXFx1RkM0Q1xcXFx1RkM0RFxcXFx1RkM0RVxcXFx1RkM0RlxcXFx1RkM1MFxcXFx1RkM1MVxcXFx1RkM1MlxcXFx1RkM1M1xcXFx1RkM1NFxcXFx1RkM1NVxcXFx1RkM1NlxcXFx1RkM1N1xcXFx1RkM1OFxcXFx1RkM1OVxcXFx1RkM1QVxcXFx1RkM1QlxcXFx1RkM1Q1xcXFx1RkM1RFxcXFx1RkM1RVxcXFx1RkM1RlxcXFx1RkM2MFxcXFx1RkM2MVxcXFx1RkM2MlxcXFx1RkM2M1xcXFx1RkM2NFxcXFx1RkM2NVxcXFx1RkM2NlxcXFx1RkM2N1xcXFx1RkM2OFxcXFx1RkM2OVxcXFx1RkM2QVxcXFx1RkM2QlxcXFx1RkM2Q1xcXFx1RkM2RFxcXFx1RkM2RVxcXFx1RkM2RlxcXFx1RkM3MFxcXFx1RkM3MVxcXFx1RkM3MlxcXFx1RkM3M1xcXFx1RkM3NFxcXFx1RkM3NVxcXFx1RkM3NlxcXFx1RkM3N1xcXFx1RkM3OFxcXFx1RkM3OVxcXFx1RkM3QVxcXFx1RkM3QlxcXFx1RkM3Q1xcXFx1RkM3RFxcXFx1RkM3RVxcXFx1RkM3RlxcXFx1RkM4MFxcXFx1RkM4MVxcXFx1RkM4MlxcXFx1RkM4M1xcXFx1RkM4NFxcXFx1RkM4NVxcXFx1RkM4NlxcXFx1RkM4N1xcXFx1RkM4OFxcXFx1RkM4OVxcXFx1RkM4QVxcXFx1RkM4QlxcXFx1RkM4Q1xcXFx1RkM4RFxcXFx1RkM4RVxcXFx1RkM4RlxcXFx1RkM5MFxcXFx1RkM5MVxcXFx1RkM5MlxcXFx1RkM5M1xcXFx1RkM5NFxcXFx1RkM5NVxcXFx1RkM5NlxcXFx1RkM5N1xcXFx1RkM5OFxcXFx1RkM5OVxcXFx1RkM5QVxcXFx1RkM5QlxcXFx1RkM5Q1xcXFx1RkM5RFxcXFx1RkM5RVxcXFx1RkM5RlxcXFx1RkNBMFxcXFx1RkNBMVxcXFx1RkNBMlxcXFx1RkNBM1xcXFx1RkNBNFxcXFx1RkNBNVxcXFx1RkNBNlxcXFx1RkNBN1xcXFx1RkNBOFxcXFx1RkNBOVxcXFx1RkNBQVxcXFx1RkNBQlxcXFx1RkNBQ1xcXFx1RkNBRFxcXFx1RkNBRVxcXFx1RkNBRlxcXFx1RkNCMFxcXFx1RkNCMVxcXFx1RkNCMlxcXFx1RkNCM1xcXFx1RkNCNFxcXFx1RkNCNVxcXFx1RkNCNlxcXFx1RkNCN1xcXFx1RkNCOFxcXFx1RkNCOVxcXFx1RkNCQVxcXFx1RkNCQlxcXFx1RkNCQ1xcXFx1RkNCRFxcXFx1RkNCRVxcXFx1RkNCRlxcXFx1RkNDMFxcXFx1RkNDMVxcXFx1RkNDMlxcXFx1RkNDM1xcXFx1RkNDNFxcXFx1RkNDNVxcXFx1RkNDNlxcXFx1RkNDN1xcXFx1RkNDOFxcXFx1RkNDOVxcXFx1RkNDQVxcXFx1RkNDQlxcXFx1RkNDQ1xcXFx1RkNDRFxcXFx1RkNDRVxcXFx1RkNDRlxcXFx1RkNEMFxcXFx1RkNEMVxcXFx1RkNEMlxcXFx1RkNEM1xcXFx1RkNENFxcXFx1RkNENVxcXFx1RkNENlxcXFx1RkNEN1xcXFx1RkNEOFxcXFx1RkNEOVxcXFx1RkNEQVxcXFx1RkNEQlxcXFx1RkNEQ1xcXFx1RkNERFxcXFx1RkNERVxcXFx1RkNERlxcXFx1RkNFMFxcXFx1RkNFMVxcXFx1RkNFMlxcXFx1RkNFM1xcXFx1RkNFNFxcXFx1RkNFNVxcXFx1RkNFNlxcXFx1RkNFN1xcXFx1RkNFOFxcXFx1RkNFOVxcXFx1RkNFQVxcXFx1RkNFQlxcXFx1RkNFQ1xcXFx1RkNFRFxcXFx1RkNFRVxcXFx1RkNFRlxcXFx1RkNGMFxcXFx1RkNGMVxcXFx1RkNGMlxcXFx1RkNGM1xcXFx1RkNGNFxcXFx1RkNGNVxcXFx1RkNGNlxcXFx1RkNGN1xcXFx1RkNGOFxcXFx1RkNGOVxcXFx1RkNGQVxcXFx1RkNGQlxcXFx1RkNGQ1xcXFx1RkNGRFxcXFx1RkNGRVxcXFx1RkNGRlxcXFx1RkQwMFxcXFx1RkQwMVxcXFx1RkQwMlxcXFx1RkQwM1xcXFx1RkQwNFxcXFx1RkQwNVxcXFx1RkQwNlxcXFx1RkQwN1xcXFx1RkQwOFxcXFx1RkQwOVxcXFx1RkQwQVxcXFx1RkQwQlxcXFx1RkQwQ1xcXFx1RkQwRFxcXFx1RkQwRVxcXFx1RkQwRlxcXFx1RkQxMFxcXFx1RkQxMVxcXFx1RkQxMlxcXFx1RkQxM1xcXFx1RkQxNFxcXFx1RkQxNVxcXFx1RkQxNlxcXFx1RkQxN1xcXFx1RkQxOFxcXFx1RkQxOVxcXFx1RkQxQVxcXFx1RkQxQlxcXFx1RkQxQ1xcXFx1RkQxRFxcXFx1RkQxRVxcXFx1RkQxRlxcXFx1RkQyMFxcXFx1RkQyMVxcXFx1RkQyMlxcXFx1RkQyM1xcXFx1RkQyNFxcXFx1RkQyNVxcXFx1RkQyNlxcXFx1RkQyN1xcXFx1RkQyOFxcXFx1RkQyOVxcXFx1RkQyQVxcXFx1RkQyQlxcXFx1RkQyQ1xcXFx1RkQyRFxcXFx1RkQyRVxcXFx1RkQyRlxcXFx1RkQzMFxcXFx1RkQzMVxcXFx1RkQzMlxcXFx1RkQzM1xcXFx1RkQzNFxcXFx1RkQzNVxcXFx1RkQzNlxcXFx1RkQzN1xcXFx1RkQzOFxcXFx1RkQzOVxcXFx1RkQzQVxcXFx1RkQzQlxcXFx1RkQzQ1xcXFx1RkQzRFxcXFx1RkQ1MFxcXFx1RkQ1MVxcXFx1RkQ1MlxcXFx1RkQ1M1xcXFx1RkQ1NFxcXFx1RkQ1NVxcXFx1RkQ1NlxcXFx1RkQ1N1xcXFx1RkQ1OFxcXFx1RkQ1OVxcXFx1RkQ1QVxcXFx1RkQ1QlxcXFx1RkQ1Q1xcXFx1RkQ1RFxcXFx1RkQ1RVxcXFx1RkQ1RlxcXFx1RkQ2MFxcXFx1RkQ2MVxcXFx1RkQ2MlxcXFx1RkQ2M1xcXFx1RkQ2NFxcXFx1RkQ2NVxcXFx1RkQ2NlxcXFx1RkQ2N1xcXFx1RkQ2OFxcXFx1RkQ2OVxcXFx1RkQ2QVxcXFx1RkQ2QlxcXFx1RkQ2Q1xcXFx1RkQ2RFxcXFx1RkQ2RVxcXFx1RkQ2RlxcXFx1RkQ3MFxcXFx1RkQ3MVxcXFx1RkQ3MlxcXFx1RkQ3M1xcXFx1RkQ3NFxcXFx1RkQ3NVxcXFx1RkQ3NlxcXFx1RkQ3N1xcXFx1RkQ3OFxcXFx1RkQ3OVxcXFx1RkQ3QVxcXFx1RkQ3QlxcXFx1RkQ3Q1xcXFx1RkQ3RFxcXFx1RkQ3RVxcXFx1RkQ3RlxcXFx1RkQ4MFxcXFx1RkQ4MVxcXFx1RkQ4MlxcXFx1RkQ4M1xcXFx1RkQ4NFxcXFx1RkQ4NVxcXFx1RkQ4NlxcXFx1RkQ4N1xcXFx1RkQ4OFxcXFx1RkQ4OVxcXFx1RkQ4QVxcXFx1RkQ4QlxcXFx1RkQ4Q1xcXFx1RkQ4RFxcXFx1RkQ4RVxcXFx1RkQ4RlxcXFx1RkQ5MlxcXFx1RkQ5M1xcXFx1RkQ5NFxcXFx1RkQ5NVxcXFx1RkQ5NlxcXFx1RkQ5N1xcXFx1RkQ5OFxcXFx1RkQ5OVxcXFx1RkQ5QVxcXFx1RkQ5QlxcXFx1RkQ5Q1xcXFx1RkQ5RFxcXFx1RkQ5RVxcXFx1RkQ5RlxcXFx1RkRBMFxcXFx1RkRBMVxcXFx1RkRBMlxcXFx1RkRBM1xcXFx1RkRBNFxcXFx1RkRBNVxcXFx1RkRBNlxcXFx1RkRBN1xcXFx1RkRBOFxcXFx1RkRBOVxcXFx1RkRBQVxcXFx1RkRBQlxcXFx1RkRBQ1xcXFx1RkRBRFxcXFx1RkRBRVxcXFx1RkRBRlxcXFx1RkRCMFxcXFx1RkRCMVxcXFx1RkRCMlxcXFx1RkRCM1xcXFx1RkRCNFxcXFx1RkRCNVxcXFx1RkRCNlxcXFx1RkRCN1xcXFx1RkRCOFxcXFx1RkRCOVxcXFx1RkRCQVxcXFx1RkRCQlxcXFx1RkRCQ1xcXFx1RkRCRFxcXFx1RkRCRVxcXFx1RkRCRlxcXFx1RkRDMFxcXFx1RkRDMVxcXFx1RkRDMlxcXFx1RkRDM1xcXFx1RkRDNFxcXFx1RkRDNVxcXFx1RkRDNlxcXFx1RkRDN1xcXFx1RkRGMFxcXFx1RkRGMVxcXFx1RkRGMlxcXFx1RkRGM1xcXFx1RkRGNFxcXFx1RkRGNVxcXFx1RkRGNlxcXFx1RkRGN1xcXFx1RkRGOFxcXFx1RkRGOVxcXFx1RkRGQVxcXFx1RkRGQlxcXFx1RkU3MFxcXFx1RkU3MVxcXFx1RkU3MlxcXFx1RkU3M1xcXFx1RkU3NFxcXFx1RkU3NlxcXFx1RkU3N1xcXFx1RkU3OFxcXFx1RkU3OVxcXFx1RkU3QVxcXFx1RkU3QlxcXFx1RkU3Q1xcXFx1RkU3RFxcXFx1RkU3RVxcXFx1RkU3RlxcXFx1RkU4MFxcXFx1RkU4MVxcXFx1RkU4MlxcXFx1RkU4M1xcXFx1RkU4NFxcXFx1RkU4NVxcXFx1RkU4NlxcXFx1RkU4N1xcXFx1RkU4OFxcXFx1RkU4OVxcXFx1RkU4QVxcXFx1RkU4QlxcXFx1RkU4Q1xcXFx1RkU4RFxcXFx1RkU4RVxcXFx1RkU4RlxcXFx1RkU5MFxcXFx1RkU5MVxcXFx1RkU5MlxcXFx1RkU5M1xcXFx1RkU5NFxcXFx1RkU5NVxcXFx1RkU5NlxcXFx1RkU5N1xcXFx1RkU5OFxcXFx1RkU5OVxcXFx1RkU5QVxcXFx1RkU5QlxcXFx1RkU5Q1xcXFx1RkU5RFxcXFx1RkU5RVxcXFx1RkU5RlxcXFx1RkVBMFxcXFx1RkVBMVxcXFx1RkVBMlxcXFx1RkVBM1xcXFx1RkVBNFxcXFx1RkVBNVxcXFx1RkVBNlxcXFx1RkVBN1xcXFx1RkVBOFxcXFx1RkVBOVxcXFx1RkVBQVxcXFx1RkVBQlxcXFx1RkVBQ1xcXFx1RkVBRFxcXFx1RkVBRVxcXFx1RkVBRlxcXFx1RkVCMFxcXFx1RkVCMVxcXFx1RkVCMlxcXFx1RkVCM1xcXFx1RkVCNFxcXFx1RkVCNVxcXFx1RkVCNlxcXFx1RkVCN1xcXFx1RkVCOFxcXFx1RkVCOVxcXFx1RkVCQVxcXFx1RkVCQlxcXFx1RkVCQ1xcXFx1RkVCRFxcXFx1RkVCRVxcXFx1RkVCRlxcXFx1RkVDMFxcXFx1RkVDMVxcXFx1RkVDMlxcXFx1RkVDM1xcXFx1RkVDNFxcXFx1RkVDNVxcXFx1RkVDNlxcXFx1RkVDN1xcXFx1RkVDOFxcXFx1RkVDOVxcXFx1RkVDQVxcXFx1RkVDQlxcXFx1RkVDQ1xcXFx1RkVDRFxcXFx1RkVDRVxcXFx1RkVDRlxcXFx1RkVEMFxcXFx1RkVEMVxcXFx1RkVEMlxcXFx1RkVEM1xcXFx1RkVENFxcXFx1RkVENVxcXFx1RkVENlxcXFx1RkVEN1xcXFx1RkVEOFxcXFx1RkVEOVxcXFx1RkVEQVxcXFx1RkVEQlxcXFx1RkVEQ1xcXFx1RkVERFxcXFx1RkVERVxcXFx1RkVERlxcXFx1RkVFMFxcXFx1RkVFMVxcXFx1RkVFMlxcXFx1RkVFM1xcXFx1RkVFNFxcXFx1RkVFNVxcXFx1RkVFNlxcXFx1RkVFN1xcXFx1RkVFOFxcXFx1RkVFOVxcXFx1RkVFQVxcXFx1RkVFQlxcXFx1RkVFQ1xcXFx1RkVFRFxcXFx1RkVFRVxcXFx1RkVFRlxcXFx1RkVGMFxcXFx1RkVGMVxcXFx1RkVGMlxcXFx1RkVGM1xcXFx1RkVGNFxcXFx1RkVGNVxcXFx1RkVGNlxcXFx1RkVGN1xcXFx1RkVGOFxcXFx1RkVGOVxcXFx1RkVGQVxcXFx1RkVGQlxcXFx1RkVGQ1xcXFx1RkY2NlxcXFx1RkY2N1xcXFx1RkY2OFxcXFx1RkY2OVxcXFx1RkY2QVxcXFx1RkY2QlxcXFx1RkY2Q1xcXFx1RkY2RFxcXFx1RkY2RVxcXFx1RkY2RlxcXFx1RkY3MVxcXFx1RkY3MlxcXFx1RkY3M1xcXFx1RkY3NFxcXFx1RkY3NVxcXFx1RkY3NlxcXFx1RkY3N1xcXFx1RkY3OFxcXFx1RkY3OVxcXFx1RkY3QVxcXFx1RkY3QlxcXFx1RkY3Q1xcXFx1RkY3RFxcXFx1RkY3RVxcXFx1RkY3RlxcXFx1RkY4MFxcXFx1RkY4MVxcXFx1RkY4MlxcXFx1RkY4M1xcXFx1RkY4NFxcXFx1RkY4NVxcXFx1RkY4NlxcXFx1RkY4N1xcXFx1RkY4OFxcXFx1RkY4OVxcXFx1RkY4QVxcXFx1RkY4QlxcXFx1RkY4Q1xcXFx1RkY4RFxcXFx1RkY4RVxcXFx1RkY4RlxcXFx1RkY5MFxcXFx1RkY5MVxcXFx1RkY5MlxcXFx1RkY5M1xcXFx1RkY5NFxcXFx1RkY5NVxcXFx1RkY5NlxcXFx1RkY5N1xcXFx1RkY5OFxcXFx1RkY5OVxcXFx1RkY5QVxcXFx1RkY5QlxcXFx1RkY5Q1xcXFx1RkY5RFxcXFx1RkZBMFxcXFx1RkZBMVxcXFx1RkZBMlxcXFx1RkZBM1xcXFx1RkZBNFxcXFx1RkZBNVxcXFx1RkZBNlxcXFx1RkZBN1xcXFx1RkZBOFxcXFx1RkZBOVxcXFx1RkZBQVxcXFx1RkZBQlxcXFx1RkZBQ1xcXFx1RkZBRFxcXFx1RkZBRVxcXFx1RkZBRlxcXFx1RkZCMFxcXFx1RkZCMVxcXFx1RkZCMlxcXFx1RkZCM1xcXFx1RkZCNFxcXFx1RkZCNVxcXFx1RkZCNlxcXFx1RkZCN1xcXFx1RkZCOFxcXFx1RkZCOVxcXFx1RkZCQVxcXFx1RkZCQlxcXFx1RkZCQ1xcXFx1RkZCRFxcXFx1RkZCRVxcXFx1RkZDMlxcXFx1RkZDM1xcXFx1RkZDNFxcXFx1RkZDNVxcXFx1RkZDNlxcXFx1RkZDN1xcXFx1RkZDQVxcXFx1RkZDQlxcXFx1RkZDQ1xcXFx1RkZDRFxcXFx1RkZDRVxcXFx1RkZDRlxcXFx1RkZEMlxcXFx1RkZEM1xcXFx1RkZENFxcXFx1RkZENVxcXFx1RkZENlxcXFx1RkZEN1xcXFx1RkZEQVxcXFx1RkZEQlxcXFx1RkZEQ11cIiwgZGVzY3JpcHRpb246IFwiW1xcXFx1MDFCQlxcXFx1MDFDMFxcXFx1MDFDMVxcXFx1MDFDMlxcXFx1MDFDM1xcXFx1MDI5NFxcXFx1MDVEMFxcXFx1MDVEMVxcXFx1MDVEMlxcXFx1MDVEM1xcXFx1MDVENFxcXFx1MDVENVxcXFx1MDVENlxcXFx1MDVEN1xcXFx1MDVEOFxcXFx1MDVEOVxcXFx1MDVEQVxcXFx1MDVEQlxcXFx1MDVEQ1xcXFx1MDVERFxcXFx1MDVERVxcXFx1MDVERlxcXFx1MDVFMFxcXFx1MDVFMVxcXFx1MDVFMlxcXFx1MDVFM1xcXFx1MDVFNFxcXFx1MDVFNVxcXFx1MDVFNlxcXFx1MDVFN1xcXFx1MDVFOFxcXFx1MDVFOVxcXFx1MDVFQVxcXFx1MDVGMFxcXFx1MDVGMVxcXFx1MDVGMlxcXFx1MDYyMVxcXFx1MDYyMlxcXFx1MDYyM1xcXFx1MDYyNFxcXFx1MDYyNVxcXFx1MDYyNlxcXFx1MDYyN1xcXFx1MDYyOFxcXFx1MDYyOVxcXFx1MDYyQVxcXFx1MDYyQlxcXFx1MDYyQ1xcXFx1MDYyRFxcXFx1MDYyRVxcXFx1MDYyRlxcXFx1MDYzMFxcXFx1MDYzMVxcXFx1MDYzMlxcXFx1MDYzM1xcXFx1MDYzNFxcXFx1MDYzNVxcXFx1MDYzNlxcXFx1MDYzN1xcXFx1MDYzOFxcXFx1MDYzOVxcXFx1MDYzQVxcXFx1MDYzQlxcXFx1MDYzQ1xcXFx1MDYzRFxcXFx1MDYzRVxcXFx1MDYzRlxcXFx1MDY0MVxcXFx1MDY0MlxcXFx1MDY0M1xcXFx1MDY0NFxcXFx1MDY0NVxcXFx1MDY0NlxcXFx1MDY0N1xcXFx1MDY0OFxcXFx1MDY0OVxcXFx1MDY0QVxcXFx1MDY2RVxcXFx1MDY2RlxcXFx1MDY3MVxcXFx1MDY3MlxcXFx1MDY3M1xcXFx1MDY3NFxcXFx1MDY3NVxcXFx1MDY3NlxcXFx1MDY3N1xcXFx1MDY3OFxcXFx1MDY3OVxcXFx1MDY3QVxcXFx1MDY3QlxcXFx1MDY3Q1xcXFx1MDY3RFxcXFx1MDY3RVxcXFx1MDY3RlxcXFx1MDY4MFxcXFx1MDY4MVxcXFx1MDY4MlxcXFx1MDY4M1xcXFx1MDY4NFxcXFx1MDY4NVxcXFx1MDY4NlxcXFx1MDY4N1xcXFx1MDY4OFxcXFx1MDY4OVxcXFx1MDY4QVxcXFx1MDY4QlxcXFx1MDY4Q1xcXFx1MDY4RFxcXFx1MDY4RVxcXFx1MDY4RlxcXFx1MDY5MFxcXFx1MDY5MVxcXFx1MDY5MlxcXFx1MDY5M1xcXFx1MDY5NFxcXFx1MDY5NVxcXFx1MDY5NlxcXFx1MDY5N1xcXFx1MDY5OFxcXFx1MDY5OVxcXFx1MDY5QVxcXFx1MDY5QlxcXFx1MDY5Q1xcXFx1MDY5RFxcXFx1MDY5RVxcXFx1MDY5RlxcXFx1MDZBMFxcXFx1MDZBMVxcXFx1MDZBMlxcXFx1MDZBM1xcXFx1MDZBNFxcXFx1MDZBNVxcXFx1MDZBNlxcXFx1MDZBN1xcXFx1MDZBOFxcXFx1MDZBOVxcXFx1MDZBQVxcXFx1MDZBQlxcXFx1MDZBQ1xcXFx1MDZBRFxcXFx1MDZBRVxcXFx1MDZBRlxcXFx1MDZCMFxcXFx1MDZCMVxcXFx1MDZCMlxcXFx1MDZCM1xcXFx1MDZCNFxcXFx1MDZCNVxcXFx1MDZCNlxcXFx1MDZCN1xcXFx1MDZCOFxcXFx1MDZCOVxcXFx1MDZCQVxcXFx1MDZCQlxcXFx1MDZCQ1xcXFx1MDZCRFxcXFx1MDZCRVxcXFx1MDZCRlxcXFx1MDZDMFxcXFx1MDZDMVxcXFx1MDZDMlxcXFx1MDZDM1xcXFx1MDZDNFxcXFx1MDZDNVxcXFx1MDZDNlxcXFx1MDZDN1xcXFx1MDZDOFxcXFx1MDZDOVxcXFx1MDZDQVxcXFx1MDZDQlxcXFx1MDZDQ1xcXFx1MDZDRFxcXFx1MDZDRVxcXFx1MDZDRlxcXFx1MDZEMFxcXFx1MDZEMVxcXFx1MDZEMlxcXFx1MDZEM1xcXFx1MDZENVxcXFx1MDZFRVxcXFx1MDZFRlxcXFx1MDZGQVxcXFx1MDZGQlxcXFx1MDZGQ1xcXFx1MDZGRlxcXFx1MDcxMFxcXFx1MDcxMlxcXFx1MDcxM1xcXFx1MDcxNFxcXFx1MDcxNVxcXFx1MDcxNlxcXFx1MDcxN1xcXFx1MDcxOFxcXFx1MDcxOVxcXFx1MDcxQVxcXFx1MDcxQlxcXFx1MDcxQ1xcXFx1MDcxRFxcXFx1MDcxRVxcXFx1MDcxRlxcXFx1MDcyMFxcXFx1MDcyMVxcXFx1MDcyMlxcXFx1MDcyM1xcXFx1MDcyNFxcXFx1MDcyNVxcXFx1MDcyNlxcXFx1MDcyN1xcXFx1MDcyOFxcXFx1MDcyOVxcXFx1MDcyQVxcXFx1MDcyQlxcXFx1MDcyQ1xcXFx1MDcyRFxcXFx1MDcyRVxcXFx1MDcyRlxcXFx1MDc0RFxcXFx1MDc0RVxcXFx1MDc0RlxcXFx1MDc1MFxcXFx1MDc1MVxcXFx1MDc1MlxcXFx1MDc1M1xcXFx1MDc1NFxcXFx1MDc1NVxcXFx1MDc1NlxcXFx1MDc1N1xcXFx1MDc1OFxcXFx1MDc1OVxcXFx1MDc1QVxcXFx1MDc1QlxcXFx1MDc1Q1xcXFx1MDc1RFxcXFx1MDc1RVxcXFx1MDc1RlxcXFx1MDc2MFxcXFx1MDc2MVxcXFx1MDc2MlxcXFx1MDc2M1xcXFx1MDc2NFxcXFx1MDc2NVxcXFx1MDc2NlxcXFx1MDc2N1xcXFx1MDc2OFxcXFx1MDc2OVxcXFx1MDc2QVxcXFx1MDc2QlxcXFx1MDc2Q1xcXFx1MDc2RFxcXFx1MDc2RVxcXFx1MDc2RlxcXFx1MDc3MFxcXFx1MDc3MVxcXFx1MDc3MlxcXFx1MDc3M1xcXFx1MDc3NFxcXFx1MDc3NVxcXFx1MDc3NlxcXFx1MDc3N1xcXFx1MDc3OFxcXFx1MDc3OVxcXFx1MDc3QVxcXFx1MDc3QlxcXFx1MDc3Q1xcXFx1MDc3RFxcXFx1MDc3RVxcXFx1MDc3RlxcXFx1MDc4MFxcXFx1MDc4MVxcXFx1MDc4MlxcXFx1MDc4M1xcXFx1MDc4NFxcXFx1MDc4NVxcXFx1MDc4NlxcXFx1MDc4N1xcXFx1MDc4OFxcXFx1MDc4OVxcXFx1MDc4QVxcXFx1MDc4QlxcXFx1MDc4Q1xcXFx1MDc4RFxcXFx1MDc4RVxcXFx1MDc4RlxcXFx1MDc5MFxcXFx1MDc5MVxcXFx1MDc5MlxcXFx1MDc5M1xcXFx1MDc5NFxcXFx1MDc5NVxcXFx1MDc5NlxcXFx1MDc5N1xcXFx1MDc5OFxcXFx1MDc5OVxcXFx1MDc5QVxcXFx1MDc5QlxcXFx1MDc5Q1xcXFx1MDc5RFxcXFx1MDc5RVxcXFx1MDc5RlxcXFx1MDdBMFxcXFx1MDdBMVxcXFx1MDdBMlxcXFx1MDdBM1xcXFx1MDdBNFxcXFx1MDdBNVxcXFx1MDdCMVxcXFx1MDdDQVxcXFx1MDdDQlxcXFx1MDdDQ1xcXFx1MDdDRFxcXFx1MDdDRVxcXFx1MDdDRlxcXFx1MDdEMFxcXFx1MDdEMVxcXFx1MDdEMlxcXFx1MDdEM1xcXFx1MDdENFxcXFx1MDdENVxcXFx1MDdENlxcXFx1MDdEN1xcXFx1MDdEOFxcXFx1MDdEOVxcXFx1MDdEQVxcXFx1MDdEQlxcXFx1MDdEQ1xcXFx1MDdERFxcXFx1MDdERVxcXFx1MDdERlxcXFx1MDdFMFxcXFx1MDdFMVxcXFx1MDdFMlxcXFx1MDdFM1xcXFx1MDdFNFxcXFx1MDdFNVxcXFx1MDdFNlxcXFx1MDdFN1xcXFx1MDdFOFxcXFx1MDdFOVxcXFx1MDdFQVxcXFx1MDkwNFxcXFx1MDkwNVxcXFx1MDkwNlxcXFx1MDkwN1xcXFx1MDkwOFxcXFx1MDkwOVxcXFx1MDkwQVxcXFx1MDkwQlxcXFx1MDkwQ1xcXFx1MDkwRFxcXFx1MDkwRVxcXFx1MDkwRlxcXFx1MDkxMFxcXFx1MDkxMVxcXFx1MDkxMlxcXFx1MDkxM1xcXFx1MDkxNFxcXFx1MDkxNVxcXFx1MDkxNlxcXFx1MDkxN1xcXFx1MDkxOFxcXFx1MDkxOVxcXFx1MDkxQVxcXFx1MDkxQlxcXFx1MDkxQ1xcXFx1MDkxRFxcXFx1MDkxRVxcXFx1MDkxRlxcXFx1MDkyMFxcXFx1MDkyMVxcXFx1MDkyMlxcXFx1MDkyM1xcXFx1MDkyNFxcXFx1MDkyNVxcXFx1MDkyNlxcXFx1MDkyN1xcXFx1MDkyOFxcXFx1MDkyOVxcXFx1MDkyQVxcXFx1MDkyQlxcXFx1MDkyQ1xcXFx1MDkyRFxcXFx1MDkyRVxcXFx1MDkyRlxcXFx1MDkzMFxcXFx1MDkzMVxcXFx1MDkzMlxcXFx1MDkzM1xcXFx1MDkzNFxcXFx1MDkzNVxcXFx1MDkzNlxcXFx1MDkzN1xcXFx1MDkzOFxcXFx1MDkzOVxcXFx1MDkzRFxcXFx1MDk1MFxcXFx1MDk1OFxcXFx1MDk1OVxcXFx1MDk1QVxcXFx1MDk1QlxcXFx1MDk1Q1xcXFx1MDk1RFxcXFx1MDk1RVxcXFx1MDk1RlxcXFx1MDk2MFxcXFx1MDk2MVxcXFx1MDk3MlxcXFx1MDk3QlxcXFx1MDk3Q1xcXFx1MDk3RFxcXFx1MDk3RVxcXFx1MDk3RlxcXFx1MDk4NVxcXFx1MDk4NlxcXFx1MDk4N1xcXFx1MDk4OFxcXFx1MDk4OVxcXFx1MDk4QVxcXFx1MDk4QlxcXFx1MDk4Q1xcXFx1MDk4RlxcXFx1MDk5MFxcXFx1MDk5M1xcXFx1MDk5NFxcXFx1MDk5NVxcXFx1MDk5NlxcXFx1MDk5N1xcXFx1MDk5OFxcXFx1MDk5OVxcXFx1MDk5QVxcXFx1MDk5QlxcXFx1MDk5Q1xcXFx1MDk5RFxcXFx1MDk5RVxcXFx1MDk5RlxcXFx1MDlBMFxcXFx1MDlBMVxcXFx1MDlBMlxcXFx1MDlBM1xcXFx1MDlBNFxcXFx1MDlBNVxcXFx1MDlBNlxcXFx1MDlBN1xcXFx1MDlBOFxcXFx1MDlBQVxcXFx1MDlBQlxcXFx1MDlBQ1xcXFx1MDlBRFxcXFx1MDlBRVxcXFx1MDlBRlxcXFx1MDlCMFxcXFx1MDlCMlxcXFx1MDlCNlxcXFx1MDlCN1xcXFx1MDlCOFxcXFx1MDlCOVxcXFx1MDlCRFxcXFx1MDlDRVxcXFx1MDlEQ1xcXFx1MDlERFxcXFx1MDlERlxcXFx1MDlFMFxcXFx1MDlFMVxcXFx1MDlGMFxcXFx1MDlGMVxcXFx1MEEwNVxcXFx1MEEwNlxcXFx1MEEwN1xcXFx1MEEwOFxcXFx1MEEwOVxcXFx1MEEwQVxcXFx1MEEwRlxcXFx1MEExMFxcXFx1MEExM1xcXFx1MEExNFxcXFx1MEExNVxcXFx1MEExNlxcXFx1MEExN1xcXFx1MEExOFxcXFx1MEExOVxcXFx1MEExQVxcXFx1MEExQlxcXFx1MEExQ1xcXFx1MEExRFxcXFx1MEExRVxcXFx1MEExRlxcXFx1MEEyMFxcXFx1MEEyMVxcXFx1MEEyMlxcXFx1MEEyM1xcXFx1MEEyNFxcXFx1MEEyNVxcXFx1MEEyNlxcXFx1MEEyN1xcXFx1MEEyOFxcXFx1MEEyQVxcXFx1MEEyQlxcXFx1MEEyQ1xcXFx1MEEyRFxcXFx1MEEyRVxcXFx1MEEyRlxcXFx1MEEzMFxcXFx1MEEzMlxcXFx1MEEzM1xcXFx1MEEzNVxcXFx1MEEzNlxcXFx1MEEzOFxcXFx1MEEzOVxcXFx1MEE1OVxcXFx1MEE1QVxcXFx1MEE1QlxcXFx1MEE1Q1xcXFx1MEE1RVxcXFx1MEE3MlxcXFx1MEE3M1xcXFx1MEE3NFxcXFx1MEE4NVxcXFx1MEE4NlxcXFx1MEE4N1xcXFx1MEE4OFxcXFx1MEE4OVxcXFx1MEE4QVxcXFx1MEE4QlxcXFx1MEE4Q1xcXFx1MEE4RFxcXFx1MEE4RlxcXFx1MEE5MFxcXFx1MEE5MVxcXFx1MEE5M1xcXFx1MEE5NFxcXFx1MEE5NVxcXFx1MEE5NlxcXFx1MEE5N1xcXFx1MEE5OFxcXFx1MEE5OVxcXFx1MEE5QVxcXFx1MEE5QlxcXFx1MEE5Q1xcXFx1MEE5RFxcXFx1MEE5RVxcXFx1MEE5RlxcXFx1MEFBMFxcXFx1MEFBMVxcXFx1MEFBMlxcXFx1MEFBM1xcXFx1MEFBNFxcXFx1MEFBNVxcXFx1MEFBNlxcXFx1MEFBN1xcXFx1MEFBOFxcXFx1MEFBQVxcXFx1MEFBQlxcXFx1MEFBQ1xcXFx1MEFBRFxcXFx1MEFBRVxcXFx1MEFBRlxcXFx1MEFCMFxcXFx1MEFCMlxcXFx1MEFCM1xcXFx1MEFCNVxcXFx1MEFCNlxcXFx1MEFCN1xcXFx1MEFCOFxcXFx1MEFCOVxcXFx1MEFCRFxcXFx1MEFEMFxcXFx1MEFFMFxcXFx1MEFFMVxcXFx1MEIwNVxcXFx1MEIwNlxcXFx1MEIwN1xcXFx1MEIwOFxcXFx1MEIwOVxcXFx1MEIwQVxcXFx1MEIwQlxcXFx1MEIwQ1xcXFx1MEIwRlxcXFx1MEIxMFxcXFx1MEIxM1xcXFx1MEIxNFxcXFx1MEIxNVxcXFx1MEIxNlxcXFx1MEIxN1xcXFx1MEIxOFxcXFx1MEIxOVxcXFx1MEIxQVxcXFx1MEIxQlxcXFx1MEIxQ1xcXFx1MEIxRFxcXFx1MEIxRVxcXFx1MEIxRlxcXFx1MEIyMFxcXFx1MEIyMVxcXFx1MEIyMlxcXFx1MEIyM1xcXFx1MEIyNFxcXFx1MEIyNVxcXFx1MEIyNlxcXFx1MEIyN1xcXFx1MEIyOFxcXFx1MEIyQVxcXFx1MEIyQlxcXFx1MEIyQ1xcXFx1MEIyRFxcXFx1MEIyRVxcXFx1MEIyRlxcXFx1MEIzMFxcXFx1MEIzMlxcXFx1MEIzM1xcXFx1MEIzNVxcXFx1MEIzNlxcXFx1MEIzN1xcXFx1MEIzOFxcXFx1MEIzOVxcXFx1MEIzRFxcXFx1MEI1Q1xcXFx1MEI1RFxcXFx1MEI1RlxcXFx1MEI2MFxcXFx1MEI2MVxcXFx1MEI3MVxcXFx1MEI4M1xcXFx1MEI4NVxcXFx1MEI4NlxcXFx1MEI4N1xcXFx1MEI4OFxcXFx1MEI4OVxcXFx1MEI4QVxcXFx1MEI4RVxcXFx1MEI4RlxcXFx1MEI5MFxcXFx1MEI5MlxcXFx1MEI5M1xcXFx1MEI5NFxcXFx1MEI5NVxcXFx1MEI5OVxcXFx1MEI5QVxcXFx1MEI5Q1xcXFx1MEI5RVxcXFx1MEI5RlxcXFx1MEJBM1xcXFx1MEJBNFxcXFx1MEJBOFxcXFx1MEJBOVxcXFx1MEJBQVxcXFx1MEJBRVxcXFx1MEJBRlxcXFx1MEJCMFxcXFx1MEJCMVxcXFx1MEJCMlxcXFx1MEJCM1xcXFx1MEJCNFxcXFx1MEJCNVxcXFx1MEJCNlxcXFx1MEJCN1xcXFx1MEJCOFxcXFx1MEJCOVxcXFx1MEJEMFxcXFx1MEMwNVxcXFx1MEMwNlxcXFx1MEMwN1xcXFx1MEMwOFxcXFx1MEMwOVxcXFx1MEMwQVxcXFx1MEMwQlxcXFx1MEMwQ1xcXFx1MEMwRVxcXFx1MEMwRlxcXFx1MEMxMFxcXFx1MEMxMlxcXFx1MEMxM1xcXFx1MEMxNFxcXFx1MEMxNVxcXFx1MEMxNlxcXFx1MEMxN1xcXFx1MEMxOFxcXFx1MEMxOVxcXFx1MEMxQVxcXFx1MEMxQlxcXFx1MEMxQ1xcXFx1MEMxRFxcXFx1MEMxRVxcXFx1MEMxRlxcXFx1MEMyMFxcXFx1MEMyMVxcXFx1MEMyMlxcXFx1MEMyM1xcXFx1MEMyNFxcXFx1MEMyNVxcXFx1MEMyNlxcXFx1MEMyN1xcXFx1MEMyOFxcXFx1MEMyQVxcXFx1MEMyQlxcXFx1MEMyQ1xcXFx1MEMyRFxcXFx1MEMyRVxcXFx1MEMyRlxcXFx1MEMzMFxcXFx1MEMzMVxcXFx1MEMzMlxcXFx1MEMzM1xcXFx1MEMzNVxcXFx1MEMzNlxcXFx1MEMzN1xcXFx1MEMzOFxcXFx1MEMzOVxcXFx1MEMzRFxcXFx1MEM1OFxcXFx1MEM1OVxcXFx1MEM2MFxcXFx1MEM2MVxcXFx1MEM4NVxcXFx1MEM4NlxcXFx1MEM4N1xcXFx1MEM4OFxcXFx1MEM4OVxcXFx1MEM4QVxcXFx1MEM4QlxcXFx1MEM4Q1xcXFx1MEM4RVxcXFx1MEM4RlxcXFx1MEM5MFxcXFx1MEM5MlxcXFx1MEM5M1xcXFx1MEM5NFxcXFx1MEM5NVxcXFx1MEM5NlxcXFx1MEM5N1xcXFx1MEM5OFxcXFx1MEM5OVxcXFx1MEM5QVxcXFx1MEM5QlxcXFx1MEM5Q1xcXFx1MEM5RFxcXFx1MEM5RVxcXFx1MEM5RlxcXFx1MENBMFxcXFx1MENBMVxcXFx1MENBMlxcXFx1MENBM1xcXFx1MENBNFxcXFx1MENBNVxcXFx1MENBNlxcXFx1MENBN1xcXFx1MENBOFxcXFx1MENBQVxcXFx1MENBQlxcXFx1MENBQ1xcXFx1MENBRFxcXFx1MENBRVxcXFx1MENBRlxcXFx1MENCMFxcXFx1MENCMVxcXFx1MENCMlxcXFx1MENCM1xcXFx1MENCNVxcXFx1MENCNlxcXFx1MENCN1xcXFx1MENCOFxcXFx1MENCOVxcXFx1MENCRFxcXFx1MENERVxcXFx1MENFMFxcXFx1MENFMVxcXFx1MEQwNVxcXFx1MEQwNlxcXFx1MEQwN1xcXFx1MEQwOFxcXFx1MEQwOVxcXFx1MEQwQVxcXFx1MEQwQlxcXFx1MEQwQ1xcXFx1MEQwRVxcXFx1MEQwRlxcXFx1MEQxMFxcXFx1MEQxMlxcXFx1MEQxM1xcXFx1MEQxNFxcXFx1MEQxNVxcXFx1MEQxNlxcXFx1MEQxN1xcXFx1MEQxOFxcXFx1MEQxOVxcXFx1MEQxQVxcXFx1MEQxQlxcXFx1MEQxQ1xcXFx1MEQxRFxcXFx1MEQxRVxcXFx1MEQxRlxcXFx1MEQyMFxcXFx1MEQyMVxcXFx1MEQyMlxcXFx1MEQyM1xcXFx1MEQyNFxcXFx1MEQyNVxcXFx1MEQyNlxcXFx1MEQyN1xcXFx1MEQyOFxcXFx1MEQyQVxcXFx1MEQyQlxcXFx1MEQyQ1xcXFx1MEQyRFxcXFx1MEQyRVxcXFx1MEQyRlxcXFx1MEQzMFxcXFx1MEQzMVxcXFx1MEQzMlxcXFx1MEQzM1xcXFx1MEQzNFxcXFx1MEQzNVxcXFx1MEQzNlxcXFx1MEQzN1xcXFx1MEQzOFxcXFx1MEQzOVxcXFx1MEQzRFxcXFx1MEQ2MFxcXFx1MEQ2MVxcXFx1MEQ3QVxcXFx1MEQ3QlxcXFx1MEQ3Q1xcXFx1MEQ3RFxcXFx1MEQ3RVxcXFx1MEQ3RlxcXFx1MEQ4NVxcXFx1MEQ4NlxcXFx1MEQ4N1xcXFx1MEQ4OFxcXFx1MEQ4OVxcXFx1MEQ4QVxcXFx1MEQ4QlxcXFx1MEQ4Q1xcXFx1MEQ4RFxcXFx1MEQ4RVxcXFx1MEQ4RlxcXFx1MEQ5MFxcXFx1MEQ5MVxcXFx1MEQ5MlxcXFx1MEQ5M1xcXFx1MEQ5NFxcXFx1MEQ5NVxcXFx1MEQ5NlxcXFx1MEQ5QVxcXFx1MEQ5QlxcXFx1MEQ5Q1xcXFx1MEQ5RFxcXFx1MEQ5RVxcXFx1MEQ5RlxcXFx1MERBMFxcXFx1MERBMVxcXFx1MERBMlxcXFx1MERBM1xcXFx1MERBNFxcXFx1MERBNVxcXFx1MERBNlxcXFx1MERBN1xcXFx1MERBOFxcXFx1MERBOVxcXFx1MERBQVxcXFx1MERBQlxcXFx1MERBQ1xcXFx1MERBRFxcXFx1MERBRVxcXFx1MERBRlxcXFx1MERCMFxcXFx1MERCMVxcXFx1MERCM1xcXFx1MERCNFxcXFx1MERCNVxcXFx1MERCNlxcXFx1MERCN1xcXFx1MERCOFxcXFx1MERCOVxcXFx1MERCQVxcXFx1MERCQlxcXFx1MERCRFxcXFx1MERDMFxcXFx1MERDMVxcXFx1MERDMlxcXFx1MERDM1xcXFx1MERDNFxcXFx1MERDNVxcXFx1MERDNlxcXFx1MEUwMVxcXFx1MEUwMlxcXFx1MEUwM1xcXFx1MEUwNFxcXFx1MEUwNVxcXFx1MEUwNlxcXFx1MEUwN1xcXFx1MEUwOFxcXFx1MEUwOVxcXFx1MEUwQVxcXFx1MEUwQlxcXFx1MEUwQ1xcXFx1MEUwRFxcXFx1MEUwRVxcXFx1MEUwRlxcXFx1MEUxMFxcXFx1MEUxMVxcXFx1MEUxMlxcXFx1MEUxM1xcXFx1MEUxNFxcXFx1MEUxNVxcXFx1MEUxNlxcXFx1MEUxN1xcXFx1MEUxOFxcXFx1MEUxOVxcXFx1MEUxQVxcXFx1MEUxQlxcXFx1MEUxQ1xcXFx1MEUxRFxcXFx1MEUxRVxcXFx1MEUxRlxcXFx1MEUyMFxcXFx1MEUyMVxcXFx1MEUyMlxcXFx1MEUyM1xcXFx1MEUyNFxcXFx1MEUyNVxcXFx1MEUyNlxcXFx1MEUyN1xcXFx1MEUyOFxcXFx1MEUyOVxcXFx1MEUyQVxcXFx1MEUyQlxcXFx1MEUyQ1xcXFx1MEUyRFxcXFx1MEUyRVxcXFx1MEUyRlxcXFx1MEUzMFxcXFx1MEUzMlxcXFx1MEUzM1xcXFx1MEU0MFxcXFx1MEU0MVxcXFx1MEU0MlxcXFx1MEU0M1xcXFx1MEU0NFxcXFx1MEU0NVxcXFx1MEU4MVxcXFx1MEU4MlxcXFx1MEU4NFxcXFx1MEU4N1xcXFx1MEU4OFxcXFx1MEU4QVxcXFx1MEU4RFxcXFx1MEU5NFxcXFx1MEU5NVxcXFx1MEU5NlxcXFx1MEU5N1xcXFx1MEU5OVxcXFx1MEU5QVxcXFx1MEU5QlxcXFx1MEU5Q1xcXFx1MEU5RFxcXFx1MEU5RVxcXFx1MEU5RlxcXFx1MEVBMVxcXFx1MEVBMlxcXFx1MEVBM1xcXFx1MEVBNVxcXFx1MEVBN1xcXFx1MEVBQVxcXFx1MEVBQlxcXFx1MEVBRFxcXFx1MEVBRVxcXFx1MEVBRlxcXFx1MEVCMFxcXFx1MEVCMlxcXFx1MEVCM1xcXFx1MEVCRFxcXFx1MEVDMFxcXFx1MEVDMVxcXFx1MEVDMlxcXFx1MEVDM1xcXFx1MEVDNFxcXFx1MEVEQ1xcXFx1MEVERFxcXFx1MEYwMFxcXFx1MEY0MFxcXFx1MEY0MVxcXFx1MEY0MlxcXFx1MEY0M1xcXFx1MEY0NFxcXFx1MEY0NVxcXFx1MEY0NlxcXFx1MEY0N1xcXFx1MEY0OVxcXFx1MEY0QVxcXFx1MEY0QlxcXFx1MEY0Q1xcXFx1MEY0RFxcXFx1MEY0RVxcXFx1MEY0RlxcXFx1MEY1MFxcXFx1MEY1MVxcXFx1MEY1MlxcXFx1MEY1M1xcXFx1MEY1NFxcXFx1MEY1NVxcXFx1MEY1NlxcXFx1MEY1N1xcXFx1MEY1OFxcXFx1MEY1OVxcXFx1MEY1QVxcXFx1MEY1QlxcXFx1MEY1Q1xcXFx1MEY1RFxcXFx1MEY1RVxcXFx1MEY1RlxcXFx1MEY2MFxcXFx1MEY2MVxcXFx1MEY2MlxcXFx1MEY2M1xcXFx1MEY2NFxcXFx1MEY2NVxcXFx1MEY2NlxcXFx1MEY2N1xcXFx1MEY2OFxcXFx1MEY2OVxcXFx1MEY2QVxcXFx1MEY2QlxcXFx1MEY2Q1xcXFx1MEY4OFxcXFx1MEY4OVxcXFx1MEY4QVxcXFx1MEY4QlxcXFx1MTAwMFxcXFx1MTAwMVxcXFx1MTAwMlxcXFx1MTAwM1xcXFx1MTAwNFxcXFx1MTAwNVxcXFx1MTAwNlxcXFx1MTAwN1xcXFx1MTAwOFxcXFx1MTAwOVxcXFx1MTAwQVxcXFx1MTAwQlxcXFx1MTAwQ1xcXFx1MTAwRFxcXFx1MTAwRVxcXFx1MTAwRlxcXFx1MTAxMFxcXFx1MTAxMVxcXFx1MTAxMlxcXFx1MTAxM1xcXFx1MTAxNFxcXFx1MTAxNVxcXFx1MTAxNlxcXFx1MTAxN1xcXFx1MTAxOFxcXFx1MTAxOVxcXFx1MTAxQVxcXFx1MTAxQlxcXFx1MTAxQ1xcXFx1MTAxRFxcXFx1MTAxRVxcXFx1MTAxRlxcXFx1MTAyMFxcXFx1MTAyMVxcXFx1MTAyMlxcXFx1MTAyM1xcXFx1MTAyNFxcXFx1MTAyNVxcXFx1MTAyNlxcXFx1MTAyN1xcXFx1MTAyOFxcXFx1MTAyOVxcXFx1MTAyQVxcXFx1MTAzRlxcXFx1MTA1MFxcXFx1MTA1MVxcXFx1MTA1MlxcXFx1MTA1M1xcXFx1MTA1NFxcXFx1MTA1NVxcXFx1MTA1QVxcXFx1MTA1QlxcXFx1MTA1Q1xcXFx1MTA1RFxcXFx1MTA2MVxcXFx1MTA2NVxcXFx1MTA2NlxcXFx1MTA2RVxcXFx1MTA2RlxcXFx1MTA3MFxcXFx1MTA3NVxcXFx1MTA3NlxcXFx1MTA3N1xcXFx1MTA3OFxcXFx1MTA3OVxcXFx1MTA3QVxcXFx1MTA3QlxcXFx1MTA3Q1xcXFx1MTA3RFxcXFx1MTA3RVxcXFx1MTA3RlxcXFx1MTA4MFxcXFx1MTA4MVxcXFx1MTA4RVxcXFx1MTBEMFxcXFx1MTBEMVxcXFx1MTBEMlxcXFx1MTBEM1xcXFx1MTBENFxcXFx1MTBENVxcXFx1MTBENlxcXFx1MTBEN1xcXFx1MTBEOFxcXFx1MTBEOVxcXFx1MTBEQVxcXFx1MTBEQlxcXFx1MTBEQ1xcXFx1MTBERFxcXFx1MTBERVxcXFx1MTBERlxcXFx1MTBFMFxcXFx1MTBFMVxcXFx1MTBFMlxcXFx1MTBFM1xcXFx1MTBFNFxcXFx1MTBFNVxcXFx1MTBFNlxcXFx1MTBFN1xcXFx1MTBFOFxcXFx1MTBFOVxcXFx1MTBFQVxcXFx1MTBFQlxcXFx1MTBFQ1xcXFx1MTBFRFxcXFx1MTBFRVxcXFx1MTBFRlxcXFx1MTBGMFxcXFx1MTBGMVxcXFx1MTBGMlxcXFx1MTBGM1xcXFx1MTBGNFxcXFx1MTBGNVxcXFx1MTBGNlxcXFx1MTBGN1xcXFx1MTBGOFxcXFx1MTBGOVxcXFx1MTBGQVxcXFx1MTEwMFxcXFx1MTEwMVxcXFx1MTEwMlxcXFx1MTEwM1xcXFx1MTEwNFxcXFx1MTEwNVxcXFx1MTEwNlxcXFx1MTEwN1xcXFx1MTEwOFxcXFx1MTEwOVxcXFx1MTEwQVxcXFx1MTEwQlxcXFx1MTEwQ1xcXFx1MTEwRFxcXFx1MTEwRVxcXFx1MTEwRlxcXFx1MTExMFxcXFx1MTExMVxcXFx1MTExMlxcXFx1MTExM1xcXFx1MTExNFxcXFx1MTExNVxcXFx1MTExNlxcXFx1MTExN1xcXFx1MTExOFxcXFx1MTExOVxcXFx1MTExQVxcXFx1MTExQlxcXFx1MTExQ1xcXFx1MTExRFxcXFx1MTExRVxcXFx1MTExRlxcXFx1MTEyMFxcXFx1MTEyMVxcXFx1MTEyMlxcXFx1MTEyM1xcXFx1MTEyNFxcXFx1MTEyNVxcXFx1MTEyNlxcXFx1MTEyN1xcXFx1MTEyOFxcXFx1MTEyOVxcXFx1MTEyQVxcXFx1MTEyQlxcXFx1MTEyQ1xcXFx1MTEyRFxcXFx1MTEyRVxcXFx1MTEyRlxcXFx1MTEzMFxcXFx1MTEzMVxcXFx1MTEzMlxcXFx1MTEzM1xcXFx1MTEzNFxcXFx1MTEzNVxcXFx1MTEzNlxcXFx1MTEzN1xcXFx1MTEzOFxcXFx1MTEzOVxcXFx1MTEzQVxcXFx1MTEzQlxcXFx1MTEzQ1xcXFx1MTEzRFxcXFx1MTEzRVxcXFx1MTEzRlxcXFx1MTE0MFxcXFx1MTE0MVxcXFx1MTE0MlxcXFx1MTE0M1xcXFx1MTE0NFxcXFx1MTE0NVxcXFx1MTE0NlxcXFx1MTE0N1xcXFx1MTE0OFxcXFx1MTE0OVxcXFx1MTE0QVxcXFx1MTE0QlxcXFx1MTE0Q1xcXFx1MTE0RFxcXFx1MTE0RVxcXFx1MTE0RlxcXFx1MTE1MFxcXFx1MTE1MVxcXFx1MTE1MlxcXFx1MTE1M1xcXFx1MTE1NFxcXFx1MTE1NVxcXFx1MTE1NlxcXFx1MTE1N1xcXFx1MTE1OFxcXFx1MTE1OVxcXFx1MTE1RlxcXFx1MTE2MFxcXFx1MTE2MVxcXFx1MTE2MlxcXFx1MTE2M1xcXFx1MTE2NFxcXFx1MTE2NVxcXFx1MTE2NlxcXFx1MTE2N1xcXFx1MTE2OFxcXFx1MTE2OVxcXFx1MTE2QVxcXFx1MTE2QlxcXFx1MTE2Q1xcXFx1MTE2RFxcXFx1MTE2RVxcXFx1MTE2RlxcXFx1MTE3MFxcXFx1MTE3MVxcXFx1MTE3MlxcXFx1MTE3M1xcXFx1MTE3NFxcXFx1MTE3NVxcXFx1MTE3NlxcXFx1MTE3N1xcXFx1MTE3OFxcXFx1MTE3OVxcXFx1MTE3QVxcXFx1MTE3QlxcXFx1MTE3Q1xcXFx1MTE3RFxcXFx1MTE3RVxcXFx1MTE3RlxcXFx1MTE4MFxcXFx1MTE4MVxcXFx1MTE4MlxcXFx1MTE4M1xcXFx1MTE4NFxcXFx1MTE4NVxcXFx1MTE4NlxcXFx1MTE4N1xcXFx1MTE4OFxcXFx1MTE4OVxcXFx1MTE4QVxcXFx1MTE4QlxcXFx1MTE4Q1xcXFx1MTE4RFxcXFx1MTE4RVxcXFx1MTE4RlxcXFx1MTE5MFxcXFx1MTE5MVxcXFx1MTE5MlxcXFx1MTE5M1xcXFx1MTE5NFxcXFx1MTE5NVxcXFx1MTE5NlxcXFx1MTE5N1xcXFx1MTE5OFxcXFx1MTE5OVxcXFx1MTE5QVxcXFx1MTE5QlxcXFx1MTE5Q1xcXFx1MTE5RFxcXFx1MTE5RVxcXFx1MTE5RlxcXFx1MTFBMFxcXFx1MTFBMVxcXFx1MTFBMlxcXFx1MTFBOFxcXFx1MTFBOVxcXFx1MTFBQVxcXFx1MTFBQlxcXFx1MTFBQ1xcXFx1MTFBRFxcXFx1MTFBRVxcXFx1MTFBRlxcXFx1MTFCMFxcXFx1MTFCMVxcXFx1MTFCMlxcXFx1MTFCM1xcXFx1MTFCNFxcXFx1MTFCNVxcXFx1MTFCNlxcXFx1MTFCN1xcXFx1MTFCOFxcXFx1MTFCOVxcXFx1MTFCQVxcXFx1MTFCQlxcXFx1MTFCQ1xcXFx1MTFCRFxcXFx1MTFCRVxcXFx1MTFCRlxcXFx1MTFDMFxcXFx1MTFDMVxcXFx1MTFDMlxcXFx1MTFDM1xcXFx1MTFDNFxcXFx1MTFDNVxcXFx1MTFDNlxcXFx1MTFDN1xcXFx1MTFDOFxcXFx1MTFDOVxcXFx1MTFDQVxcXFx1MTFDQlxcXFx1MTFDQ1xcXFx1MTFDRFxcXFx1MTFDRVxcXFx1MTFDRlxcXFx1MTFEMFxcXFx1MTFEMVxcXFx1MTFEMlxcXFx1MTFEM1xcXFx1MTFENFxcXFx1MTFENVxcXFx1MTFENlxcXFx1MTFEN1xcXFx1MTFEOFxcXFx1MTFEOVxcXFx1MTFEQVxcXFx1MTFEQlxcXFx1MTFEQ1xcXFx1MTFERFxcXFx1MTFERVxcXFx1MTFERlxcXFx1MTFFMFxcXFx1MTFFMVxcXFx1MTFFMlxcXFx1MTFFM1xcXFx1MTFFNFxcXFx1MTFFNVxcXFx1MTFFNlxcXFx1MTFFN1xcXFx1MTFFOFxcXFx1MTFFOVxcXFx1MTFFQVxcXFx1MTFFQlxcXFx1MTFFQ1xcXFx1MTFFRFxcXFx1MTFFRVxcXFx1MTFFRlxcXFx1MTFGMFxcXFx1MTFGMVxcXFx1MTFGMlxcXFx1MTFGM1xcXFx1MTFGNFxcXFx1MTFGNVxcXFx1MTFGNlxcXFx1MTFGN1xcXFx1MTFGOFxcXFx1MTFGOVxcXFx1MTIwMFxcXFx1MTIwMVxcXFx1MTIwMlxcXFx1MTIwM1xcXFx1MTIwNFxcXFx1MTIwNVxcXFx1MTIwNlxcXFx1MTIwN1xcXFx1MTIwOFxcXFx1MTIwOVxcXFx1MTIwQVxcXFx1MTIwQlxcXFx1MTIwQ1xcXFx1MTIwRFxcXFx1MTIwRVxcXFx1MTIwRlxcXFx1MTIxMFxcXFx1MTIxMVxcXFx1MTIxMlxcXFx1MTIxM1xcXFx1MTIxNFxcXFx1MTIxNVxcXFx1MTIxNlxcXFx1MTIxN1xcXFx1MTIxOFxcXFx1MTIxOVxcXFx1MTIxQVxcXFx1MTIxQlxcXFx1MTIxQ1xcXFx1MTIxRFxcXFx1MTIxRVxcXFx1MTIxRlxcXFx1MTIyMFxcXFx1MTIyMVxcXFx1MTIyMlxcXFx1MTIyM1xcXFx1MTIyNFxcXFx1MTIyNVxcXFx1MTIyNlxcXFx1MTIyN1xcXFx1MTIyOFxcXFx1MTIyOVxcXFx1MTIyQVxcXFx1MTIyQlxcXFx1MTIyQ1xcXFx1MTIyRFxcXFx1MTIyRVxcXFx1MTIyRlxcXFx1MTIzMFxcXFx1MTIzMVxcXFx1MTIzMlxcXFx1MTIzM1xcXFx1MTIzNFxcXFx1MTIzNVxcXFx1MTIzNlxcXFx1MTIzN1xcXFx1MTIzOFxcXFx1MTIzOVxcXFx1MTIzQVxcXFx1MTIzQlxcXFx1MTIzQ1xcXFx1MTIzRFxcXFx1MTIzRVxcXFx1MTIzRlxcXFx1MTI0MFxcXFx1MTI0MVxcXFx1MTI0MlxcXFx1MTI0M1xcXFx1MTI0NFxcXFx1MTI0NVxcXFx1MTI0NlxcXFx1MTI0N1xcXFx1MTI0OFxcXFx1MTI0QVxcXFx1MTI0QlxcXFx1MTI0Q1xcXFx1MTI0RFxcXFx1MTI1MFxcXFx1MTI1MVxcXFx1MTI1MlxcXFx1MTI1M1xcXFx1MTI1NFxcXFx1MTI1NVxcXFx1MTI1NlxcXFx1MTI1OFxcXFx1MTI1QVxcXFx1MTI1QlxcXFx1MTI1Q1xcXFx1MTI1RFxcXFx1MTI2MFxcXFx1MTI2MVxcXFx1MTI2MlxcXFx1MTI2M1xcXFx1MTI2NFxcXFx1MTI2NVxcXFx1MTI2NlxcXFx1MTI2N1xcXFx1MTI2OFxcXFx1MTI2OVxcXFx1MTI2QVxcXFx1MTI2QlxcXFx1MTI2Q1xcXFx1MTI2RFxcXFx1MTI2RVxcXFx1MTI2RlxcXFx1MTI3MFxcXFx1MTI3MVxcXFx1MTI3MlxcXFx1MTI3M1xcXFx1MTI3NFxcXFx1MTI3NVxcXFx1MTI3NlxcXFx1MTI3N1xcXFx1MTI3OFxcXFx1MTI3OVxcXFx1MTI3QVxcXFx1MTI3QlxcXFx1MTI3Q1xcXFx1MTI3RFxcXFx1MTI3RVxcXFx1MTI3RlxcXFx1MTI4MFxcXFx1MTI4MVxcXFx1MTI4MlxcXFx1MTI4M1xcXFx1MTI4NFxcXFx1MTI4NVxcXFx1MTI4NlxcXFx1MTI4N1xcXFx1MTI4OFxcXFx1MTI4QVxcXFx1MTI4QlxcXFx1MTI4Q1xcXFx1MTI4RFxcXFx1MTI5MFxcXFx1MTI5MVxcXFx1MTI5MlxcXFx1MTI5M1xcXFx1MTI5NFxcXFx1MTI5NVxcXFx1MTI5NlxcXFx1MTI5N1xcXFx1MTI5OFxcXFx1MTI5OVxcXFx1MTI5QVxcXFx1MTI5QlxcXFx1MTI5Q1xcXFx1MTI5RFxcXFx1MTI5RVxcXFx1MTI5RlxcXFx1MTJBMFxcXFx1MTJBMVxcXFx1MTJBMlxcXFx1MTJBM1xcXFx1MTJBNFxcXFx1MTJBNVxcXFx1MTJBNlxcXFx1MTJBN1xcXFx1MTJBOFxcXFx1MTJBOVxcXFx1MTJBQVxcXFx1MTJBQlxcXFx1MTJBQ1xcXFx1MTJBRFxcXFx1MTJBRVxcXFx1MTJBRlxcXFx1MTJCMFxcXFx1MTJCMlxcXFx1MTJCM1xcXFx1MTJCNFxcXFx1MTJCNVxcXFx1MTJCOFxcXFx1MTJCOVxcXFx1MTJCQVxcXFx1MTJCQlxcXFx1MTJCQ1xcXFx1MTJCRFxcXFx1MTJCRVxcXFx1MTJDMFxcXFx1MTJDMlxcXFx1MTJDM1xcXFx1MTJDNFxcXFx1MTJDNVxcXFx1MTJDOFxcXFx1MTJDOVxcXFx1MTJDQVxcXFx1MTJDQlxcXFx1MTJDQ1xcXFx1MTJDRFxcXFx1MTJDRVxcXFx1MTJDRlxcXFx1MTJEMFxcXFx1MTJEMVxcXFx1MTJEMlxcXFx1MTJEM1xcXFx1MTJENFxcXFx1MTJENVxcXFx1MTJENlxcXFx1MTJEOFxcXFx1MTJEOVxcXFx1MTJEQVxcXFx1MTJEQlxcXFx1MTJEQ1xcXFx1MTJERFxcXFx1MTJERVxcXFx1MTJERlxcXFx1MTJFMFxcXFx1MTJFMVxcXFx1MTJFMlxcXFx1MTJFM1xcXFx1MTJFNFxcXFx1MTJFNVxcXFx1MTJFNlxcXFx1MTJFN1xcXFx1MTJFOFxcXFx1MTJFOVxcXFx1MTJFQVxcXFx1MTJFQlxcXFx1MTJFQ1xcXFx1MTJFRFxcXFx1MTJFRVxcXFx1MTJFRlxcXFx1MTJGMFxcXFx1MTJGMVxcXFx1MTJGMlxcXFx1MTJGM1xcXFx1MTJGNFxcXFx1MTJGNVxcXFx1MTJGNlxcXFx1MTJGN1xcXFx1MTJGOFxcXFx1MTJGOVxcXFx1MTJGQVxcXFx1MTJGQlxcXFx1MTJGQ1xcXFx1MTJGRFxcXFx1MTJGRVxcXFx1MTJGRlxcXFx1MTMwMFxcXFx1MTMwMVxcXFx1MTMwMlxcXFx1MTMwM1xcXFx1MTMwNFxcXFx1MTMwNVxcXFx1MTMwNlxcXFx1MTMwN1xcXFx1MTMwOFxcXFx1MTMwOVxcXFx1MTMwQVxcXFx1MTMwQlxcXFx1MTMwQ1xcXFx1MTMwRFxcXFx1MTMwRVxcXFx1MTMwRlxcXFx1MTMxMFxcXFx1MTMxMlxcXFx1MTMxM1xcXFx1MTMxNFxcXFx1MTMxNVxcXFx1MTMxOFxcXFx1MTMxOVxcXFx1MTMxQVxcXFx1MTMxQlxcXFx1MTMxQ1xcXFx1MTMxRFxcXFx1MTMxRVxcXFx1MTMxRlxcXFx1MTMyMFxcXFx1MTMyMVxcXFx1MTMyMlxcXFx1MTMyM1xcXFx1MTMyNFxcXFx1MTMyNVxcXFx1MTMyNlxcXFx1MTMyN1xcXFx1MTMyOFxcXFx1MTMyOVxcXFx1MTMyQVxcXFx1MTMyQlxcXFx1MTMyQ1xcXFx1MTMyRFxcXFx1MTMyRVxcXFx1MTMyRlxcXFx1MTMzMFxcXFx1MTMzMVxcXFx1MTMzMlxcXFx1MTMzM1xcXFx1MTMzNFxcXFx1MTMzNVxcXFx1MTMzNlxcXFx1MTMzN1xcXFx1MTMzOFxcXFx1MTMzOVxcXFx1MTMzQVxcXFx1MTMzQlxcXFx1MTMzQ1xcXFx1MTMzRFxcXFx1MTMzRVxcXFx1MTMzRlxcXFx1MTM0MFxcXFx1MTM0MVxcXFx1MTM0MlxcXFx1MTM0M1xcXFx1MTM0NFxcXFx1MTM0NVxcXFx1MTM0NlxcXFx1MTM0N1xcXFx1MTM0OFxcXFx1MTM0OVxcXFx1MTM0QVxcXFx1MTM0QlxcXFx1MTM0Q1xcXFx1MTM0RFxcXFx1MTM0RVxcXFx1MTM0RlxcXFx1MTM1MFxcXFx1MTM1MVxcXFx1MTM1MlxcXFx1MTM1M1xcXFx1MTM1NFxcXFx1MTM1NVxcXFx1MTM1NlxcXFx1MTM1N1xcXFx1MTM1OFxcXFx1MTM1OVxcXFx1MTM1QVxcXFx1MTM4MFxcXFx1MTM4MVxcXFx1MTM4MlxcXFx1MTM4M1xcXFx1MTM4NFxcXFx1MTM4NVxcXFx1MTM4NlxcXFx1MTM4N1xcXFx1MTM4OFxcXFx1MTM4OVxcXFx1MTM4QVxcXFx1MTM4QlxcXFx1MTM4Q1xcXFx1MTM4RFxcXFx1MTM4RVxcXFx1MTM4RlxcXFx1MTNBMFxcXFx1MTNBMVxcXFx1MTNBMlxcXFx1MTNBM1xcXFx1MTNBNFxcXFx1MTNBNVxcXFx1MTNBNlxcXFx1MTNBN1xcXFx1MTNBOFxcXFx1MTNBOVxcXFx1MTNBQVxcXFx1MTNBQlxcXFx1MTNBQ1xcXFx1MTNBRFxcXFx1MTNBRVxcXFx1MTNBRlxcXFx1MTNCMFxcXFx1MTNCMVxcXFx1MTNCMlxcXFx1MTNCM1xcXFx1MTNCNFxcXFx1MTNCNVxcXFx1MTNCNlxcXFx1MTNCN1xcXFx1MTNCOFxcXFx1MTNCOVxcXFx1MTNCQVxcXFx1MTNCQlxcXFx1MTNCQ1xcXFx1MTNCRFxcXFx1MTNCRVxcXFx1MTNCRlxcXFx1MTNDMFxcXFx1MTNDMVxcXFx1MTNDMlxcXFx1MTNDM1xcXFx1MTNDNFxcXFx1MTNDNVxcXFx1MTNDNlxcXFx1MTNDN1xcXFx1MTNDOFxcXFx1MTNDOVxcXFx1MTNDQVxcXFx1MTNDQlxcXFx1MTNDQ1xcXFx1MTNDRFxcXFx1MTNDRVxcXFx1MTNDRlxcXFx1MTNEMFxcXFx1MTNEMVxcXFx1MTNEMlxcXFx1MTNEM1xcXFx1MTNENFxcXFx1MTNENVxcXFx1MTNENlxcXFx1MTNEN1xcXFx1MTNEOFxcXFx1MTNEOVxcXFx1MTNEQVxcXFx1MTNEQlxcXFx1MTNEQ1xcXFx1MTNERFxcXFx1MTNERVxcXFx1MTNERlxcXFx1MTNFMFxcXFx1MTNFMVxcXFx1MTNFMlxcXFx1MTNFM1xcXFx1MTNFNFxcXFx1MTNFNVxcXFx1MTNFNlxcXFx1MTNFN1xcXFx1MTNFOFxcXFx1MTNFOVxcXFx1MTNFQVxcXFx1MTNFQlxcXFx1MTNFQ1xcXFx1MTNFRFxcXFx1MTNFRVxcXFx1MTNFRlxcXFx1MTNGMFxcXFx1MTNGMVxcXFx1MTNGMlxcXFx1MTNGM1xcXFx1MTNGNFxcXFx1MTQwMVxcXFx1MTQwMlxcXFx1MTQwM1xcXFx1MTQwNFxcXFx1MTQwNVxcXFx1MTQwNlxcXFx1MTQwN1xcXFx1MTQwOFxcXFx1MTQwOVxcXFx1MTQwQVxcXFx1MTQwQlxcXFx1MTQwQ1xcXFx1MTQwRFxcXFx1MTQwRVxcXFx1MTQwRlxcXFx1MTQxMFxcXFx1MTQxMVxcXFx1MTQxMlxcXFx1MTQxM1xcXFx1MTQxNFxcXFx1MTQxNVxcXFx1MTQxNlxcXFx1MTQxN1xcXFx1MTQxOFxcXFx1MTQxOVxcXFx1MTQxQVxcXFx1MTQxQlxcXFx1MTQxQ1xcXFx1MTQxRFxcXFx1MTQxRVxcXFx1MTQxRlxcXFx1MTQyMFxcXFx1MTQyMVxcXFx1MTQyMlxcXFx1MTQyM1xcXFx1MTQyNFxcXFx1MTQyNVxcXFx1MTQyNlxcXFx1MTQyN1xcXFx1MTQyOFxcXFx1MTQyOVxcXFx1MTQyQVxcXFx1MTQyQlxcXFx1MTQyQ1xcXFx1MTQyRFxcXFx1MTQyRVxcXFx1MTQyRlxcXFx1MTQzMFxcXFx1MTQzMVxcXFx1MTQzMlxcXFx1MTQzM1xcXFx1MTQzNFxcXFx1MTQzNVxcXFx1MTQzNlxcXFx1MTQzN1xcXFx1MTQzOFxcXFx1MTQzOVxcXFx1MTQzQVxcXFx1MTQzQlxcXFx1MTQzQ1xcXFx1MTQzRFxcXFx1MTQzRVxcXFx1MTQzRlxcXFx1MTQ0MFxcXFx1MTQ0MVxcXFx1MTQ0MlxcXFx1MTQ0M1xcXFx1MTQ0NFxcXFx1MTQ0NVxcXFx1MTQ0NlxcXFx1MTQ0N1xcXFx1MTQ0OFxcXFx1MTQ0OVxcXFx1MTQ0QVxcXFx1MTQ0QlxcXFx1MTQ0Q1xcXFx1MTQ0RFxcXFx1MTQ0RVxcXFx1MTQ0RlxcXFx1MTQ1MFxcXFx1MTQ1MVxcXFx1MTQ1MlxcXFx1MTQ1M1xcXFx1MTQ1NFxcXFx1MTQ1NVxcXFx1MTQ1NlxcXFx1MTQ1N1xcXFx1MTQ1OFxcXFx1MTQ1OVxcXFx1MTQ1QVxcXFx1MTQ1QlxcXFx1MTQ1Q1xcXFx1MTQ1RFxcXFx1MTQ1RVxcXFx1MTQ1RlxcXFx1MTQ2MFxcXFx1MTQ2MVxcXFx1MTQ2MlxcXFx1MTQ2M1xcXFx1MTQ2NFxcXFx1MTQ2NVxcXFx1MTQ2NlxcXFx1MTQ2N1xcXFx1MTQ2OFxcXFx1MTQ2OVxcXFx1MTQ2QVxcXFx1MTQ2QlxcXFx1MTQ2Q1xcXFx1MTQ2RFxcXFx1MTQ2RVxcXFx1MTQ2RlxcXFx1MTQ3MFxcXFx1MTQ3MVxcXFx1MTQ3MlxcXFx1MTQ3M1xcXFx1MTQ3NFxcXFx1MTQ3NVxcXFx1MTQ3NlxcXFx1MTQ3N1xcXFx1MTQ3OFxcXFx1MTQ3OVxcXFx1MTQ3QVxcXFx1MTQ3QlxcXFx1MTQ3Q1xcXFx1MTQ3RFxcXFx1MTQ3RVxcXFx1MTQ3RlxcXFx1MTQ4MFxcXFx1MTQ4MVxcXFx1MTQ4MlxcXFx1MTQ4M1xcXFx1MTQ4NFxcXFx1MTQ4NVxcXFx1MTQ4NlxcXFx1MTQ4N1xcXFx1MTQ4OFxcXFx1MTQ4OVxcXFx1MTQ4QVxcXFx1MTQ4QlxcXFx1MTQ4Q1xcXFx1MTQ4RFxcXFx1MTQ4RVxcXFx1MTQ4RlxcXFx1MTQ5MFxcXFx1MTQ5MVxcXFx1MTQ5MlxcXFx1MTQ5M1xcXFx1MTQ5NFxcXFx1MTQ5NVxcXFx1MTQ5NlxcXFx1MTQ5N1xcXFx1MTQ5OFxcXFx1MTQ5OVxcXFx1MTQ5QVxcXFx1MTQ5QlxcXFx1MTQ5Q1xcXFx1MTQ5RFxcXFx1MTQ5RVxcXFx1MTQ5RlxcXFx1MTRBMFxcXFx1MTRBMVxcXFx1MTRBMlxcXFx1MTRBM1xcXFx1MTRBNFxcXFx1MTRBNVxcXFx1MTRBNlxcXFx1MTRBN1xcXFx1MTRBOFxcXFx1MTRBOVxcXFx1MTRBQVxcXFx1MTRBQlxcXFx1MTRBQ1xcXFx1MTRBRFxcXFx1MTRBRVxcXFx1MTRBRlxcXFx1MTRCMFxcXFx1MTRCMVxcXFx1MTRCMlxcXFx1MTRCM1xcXFx1MTRCNFxcXFx1MTRCNVxcXFx1MTRCNlxcXFx1MTRCN1xcXFx1MTRCOFxcXFx1MTRCOVxcXFx1MTRCQVxcXFx1MTRCQlxcXFx1MTRCQ1xcXFx1MTRCRFxcXFx1MTRCRVxcXFx1MTRCRlxcXFx1MTRDMFxcXFx1MTRDMVxcXFx1MTRDMlxcXFx1MTRDM1xcXFx1MTRDNFxcXFx1MTRDNVxcXFx1MTRDNlxcXFx1MTRDN1xcXFx1MTRDOFxcXFx1MTRDOVxcXFx1MTRDQVxcXFx1MTRDQlxcXFx1MTRDQ1xcXFx1MTRDRFxcXFx1MTRDRVxcXFx1MTRDRlxcXFx1MTREMFxcXFx1MTREMVxcXFx1MTREMlxcXFx1MTREM1xcXFx1MTRENFxcXFx1MTRENVxcXFx1MTRENlxcXFx1MTREN1xcXFx1MTREOFxcXFx1MTREOVxcXFx1MTREQVxcXFx1MTREQlxcXFx1MTREQ1xcXFx1MTRERFxcXFx1MTRERVxcXFx1MTRERlxcXFx1MTRFMFxcXFx1MTRFMVxcXFx1MTRFMlxcXFx1MTRFM1xcXFx1MTRFNFxcXFx1MTRFNVxcXFx1MTRFNlxcXFx1MTRFN1xcXFx1MTRFOFxcXFx1MTRFOVxcXFx1MTRFQVxcXFx1MTRFQlxcXFx1MTRFQ1xcXFx1MTRFRFxcXFx1MTRFRVxcXFx1MTRFRlxcXFx1MTRGMFxcXFx1MTRGMVxcXFx1MTRGMlxcXFx1MTRGM1xcXFx1MTRGNFxcXFx1MTRGNVxcXFx1MTRGNlxcXFx1MTRGN1xcXFx1MTRGOFxcXFx1MTRGOVxcXFx1MTRGQVxcXFx1MTRGQlxcXFx1MTRGQ1xcXFx1MTRGRFxcXFx1MTRGRVxcXFx1MTRGRlxcXFx1MTUwMFxcXFx1MTUwMVxcXFx1MTUwMlxcXFx1MTUwM1xcXFx1MTUwNFxcXFx1MTUwNVxcXFx1MTUwNlxcXFx1MTUwN1xcXFx1MTUwOFxcXFx1MTUwOVxcXFx1MTUwQVxcXFx1MTUwQlxcXFx1MTUwQ1xcXFx1MTUwRFxcXFx1MTUwRVxcXFx1MTUwRlxcXFx1MTUxMFxcXFx1MTUxMVxcXFx1MTUxMlxcXFx1MTUxM1xcXFx1MTUxNFxcXFx1MTUxNVxcXFx1MTUxNlxcXFx1MTUxN1xcXFx1MTUxOFxcXFx1MTUxOVxcXFx1MTUxQVxcXFx1MTUxQlxcXFx1MTUxQ1xcXFx1MTUxRFxcXFx1MTUxRVxcXFx1MTUxRlxcXFx1MTUyMFxcXFx1MTUyMVxcXFx1MTUyMlxcXFx1MTUyM1xcXFx1MTUyNFxcXFx1MTUyNVxcXFx1MTUyNlxcXFx1MTUyN1xcXFx1MTUyOFxcXFx1MTUyOVxcXFx1MTUyQVxcXFx1MTUyQlxcXFx1MTUyQ1xcXFx1MTUyRFxcXFx1MTUyRVxcXFx1MTUyRlxcXFx1MTUzMFxcXFx1MTUzMVxcXFx1MTUzMlxcXFx1MTUzM1xcXFx1MTUzNFxcXFx1MTUzNVxcXFx1MTUzNlxcXFx1MTUzN1xcXFx1MTUzOFxcXFx1MTUzOVxcXFx1MTUzQVxcXFx1MTUzQlxcXFx1MTUzQ1xcXFx1MTUzRFxcXFx1MTUzRVxcXFx1MTUzRlxcXFx1MTU0MFxcXFx1MTU0MVxcXFx1MTU0MlxcXFx1MTU0M1xcXFx1MTU0NFxcXFx1MTU0NVxcXFx1MTU0NlxcXFx1MTU0N1xcXFx1MTU0OFxcXFx1MTU0OVxcXFx1MTU0QVxcXFx1MTU0QlxcXFx1MTU0Q1xcXFx1MTU0RFxcXFx1MTU0RVxcXFx1MTU0RlxcXFx1MTU1MFxcXFx1MTU1MVxcXFx1MTU1MlxcXFx1MTU1M1xcXFx1MTU1NFxcXFx1MTU1NVxcXFx1MTU1NlxcXFx1MTU1N1xcXFx1MTU1OFxcXFx1MTU1OVxcXFx1MTU1QVxcXFx1MTU1QlxcXFx1MTU1Q1xcXFx1MTU1RFxcXFx1MTU1RVxcXFx1MTU1RlxcXFx1MTU2MFxcXFx1MTU2MVxcXFx1MTU2MlxcXFx1MTU2M1xcXFx1MTU2NFxcXFx1MTU2NVxcXFx1MTU2NlxcXFx1MTU2N1xcXFx1MTU2OFxcXFx1MTU2OVxcXFx1MTU2QVxcXFx1MTU2QlxcXFx1MTU2Q1xcXFx1MTU2RFxcXFx1MTU2RVxcXFx1MTU2RlxcXFx1MTU3MFxcXFx1MTU3MVxcXFx1MTU3MlxcXFx1MTU3M1xcXFx1MTU3NFxcXFx1MTU3NVxcXFx1MTU3NlxcXFx1MTU3N1xcXFx1MTU3OFxcXFx1MTU3OVxcXFx1MTU3QVxcXFx1MTU3QlxcXFx1MTU3Q1xcXFx1MTU3RFxcXFx1MTU3RVxcXFx1MTU3RlxcXFx1MTU4MFxcXFx1MTU4MVxcXFx1MTU4MlxcXFx1MTU4M1xcXFx1MTU4NFxcXFx1MTU4NVxcXFx1MTU4NlxcXFx1MTU4N1xcXFx1MTU4OFxcXFx1MTU4OVxcXFx1MTU4QVxcXFx1MTU4QlxcXFx1MTU4Q1xcXFx1MTU4RFxcXFx1MTU4RVxcXFx1MTU4RlxcXFx1MTU5MFxcXFx1MTU5MVxcXFx1MTU5MlxcXFx1MTU5M1xcXFx1MTU5NFxcXFx1MTU5NVxcXFx1MTU5NlxcXFx1MTU5N1xcXFx1MTU5OFxcXFx1MTU5OVxcXFx1MTU5QVxcXFx1MTU5QlxcXFx1MTU5Q1xcXFx1MTU5RFxcXFx1MTU5RVxcXFx1MTU5RlxcXFx1MTVBMFxcXFx1MTVBMVxcXFx1MTVBMlxcXFx1MTVBM1xcXFx1MTVBNFxcXFx1MTVBNVxcXFx1MTVBNlxcXFx1MTVBN1xcXFx1MTVBOFxcXFx1MTVBOVxcXFx1MTVBQVxcXFx1MTVBQlxcXFx1MTVBQ1xcXFx1MTVBRFxcXFx1MTVBRVxcXFx1MTVBRlxcXFx1MTVCMFxcXFx1MTVCMVxcXFx1MTVCMlxcXFx1MTVCM1xcXFx1MTVCNFxcXFx1MTVCNVxcXFx1MTVCNlxcXFx1MTVCN1xcXFx1MTVCOFxcXFx1MTVCOVxcXFx1MTVCQVxcXFx1MTVCQlxcXFx1MTVCQ1xcXFx1MTVCRFxcXFx1MTVCRVxcXFx1MTVCRlxcXFx1MTVDMFxcXFx1MTVDMVxcXFx1MTVDMlxcXFx1MTVDM1xcXFx1MTVDNFxcXFx1MTVDNVxcXFx1MTVDNlxcXFx1MTVDN1xcXFx1MTVDOFxcXFx1MTVDOVxcXFx1MTVDQVxcXFx1MTVDQlxcXFx1MTVDQ1xcXFx1MTVDRFxcXFx1MTVDRVxcXFx1MTVDRlxcXFx1MTVEMFxcXFx1MTVEMVxcXFx1MTVEMlxcXFx1MTVEM1xcXFx1MTVENFxcXFx1MTVENVxcXFx1MTVENlxcXFx1MTVEN1xcXFx1MTVEOFxcXFx1MTVEOVxcXFx1MTVEQVxcXFx1MTVEQlxcXFx1MTVEQ1xcXFx1MTVERFxcXFx1MTVERVxcXFx1MTVERlxcXFx1MTVFMFxcXFx1MTVFMVxcXFx1MTVFMlxcXFx1MTVFM1xcXFx1MTVFNFxcXFx1MTVFNVxcXFx1MTVFNlxcXFx1MTVFN1xcXFx1MTVFOFxcXFx1MTVFOVxcXFx1MTVFQVxcXFx1MTVFQlxcXFx1MTVFQ1xcXFx1MTVFRFxcXFx1MTVFRVxcXFx1MTVFRlxcXFx1MTVGMFxcXFx1MTVGMVxcXFx1MTVGMlxcXFx1MTVGM1xcXFx1MTVGNFxcXFx1MTVGNVxcXFx1MTVGNlxcXFx1MTVGN1xcXFx1MTVGOFxcXFx1MTVGOVxcXFx1MTVGQVxcXFx1MTVGQlxcXFx1MTVGQ1xcXFx1MTVGRFxcXFx1MTVGRVxcXFx1MTVGRlxcXFx1MTYwMFxcXFx1MTYwMVxcXFx1MTYwMlxcXFx1MTYwM1xcXFx1MTYwNFxcXFx1MTYwNVxcXFx1MTYwNlxcXFx1MTYwN1xcXFx1MTYwOFxcXFx1MTYwOVxcXFx1MTYwQVxcXFx1MTYwQlxcXFx1MTYwQ1xcXFx1MTYwRFxcXFx1MTYwRVxcXFx1MTYwRlxcXFx1MTYxMFxcXFx1MTYxMVxcXFx1MTYxMlxcXFx1MTYxM1xcXFx1MTYxNFxcXFx1MTYxNVxcXFx1MTYxNlxcXFx1MTYxN1xcXFx1MTYxOFxcXFx1MTYxOVxcXFx1MTYxQVxcXFx1MTYxQlxcXFx1MTYxQ1xcXFx1MTYxRFxcXFx1MTYxRVxcXFx1MTYxRlxcXFx1MTYyMFxcXFx1MTYyMVxcXFx1MTYyMlxcXFx1MTYyM1xcXFx1MTYyNFxcXFx1MTYyNVxcXFx1MTYyNlxcXFx1MTYyN1xcXFx1MTYyOFxcXFx1MTYyOVxcXFx1MTYyQVxcXFx1MTYyQlxcXFx1MTYyQ1xcXFx1MTYyRFxcXFx1MTYyRVxcXFx1MTYyRlxcXFx1MTYzMFxcXFx1MTYzMVxcXFx1MTYzMlxcXFx1MTYzM1xcXFx1MTYzNFxcXFx1MTYzNVxcXFx1MTYzNlxcXFx1MTYzN1xcXFx1MTYzOFxcXFx1MTYzOVxcXFx1MTYzQVxcXFx1MTYzQlxcXFx1MTYzQ1xcXFx1MTYzRFxcXFx1MTYzRVxcXFx1MTYzRlxcXFx1MTY0MFxcXFx1MTY0MVxcXFx1MTY0MlxcXFx1MTY0M1xcXFx1MTY0NFxcXFx1MTY0NVxcXFx1MTY0NlxcXFx1MTY0N1xcXFx1MTY0OFxcXFx1MTY0OVxcXFx1MTY0QVxcXFx1MTY0QlxcXFx1MTY0Q1xcXFx1MTY0RFxcXFx1MTY0RVxcXFx1MTY0RlxcXFx1MTY1MFxcXFx1MTY1MVxcXFx1MTY1MlxcXFx1MTY1M1xcXFx1MTY1NFxcXFx1MTY1NVxcXFx1MTY1NlxcXFx1MTY1N1xcXFx1MTY1OFxcXFx1MTY1OVxcXFx1MTY1QVxcXFx1MTY1QlxcXFx1MTY1Q1xcXFx1MTY1RFxcXFx1MTY1RVxcXFx1MTY1RlxcXFx1MTY2MFxcXFx1MTY2MVxcXFx1MTY2MlxcXFx1MTY2M1xcXFx1MTY2NFxcXFx1MTY2NVxcXFx1MTY2NlxcXFx1MTY2N1xcXFx1MTY2OFxcXFx1MTY2OVxcXFx1MTY2QVxcXFx1MTY2QlxcXFx1MTY2Q1xcXFx1MTY2RlxcXFx1MTY3MFxcXFx1MTY3MVxcXFx1MTY3MlxcXFx1MTY3M1xcXFx1MTY3NFxcXFx1MTY3NVxcXFx1MTY3NlxcXFx1MTY4MVxcXFx1MTY4MlxcXFx1MTY4M1xcXFx1MTY4NFxcXFx1MTY4NVxcXFx1MTY4NlxcXFx1MTY4N1xcXFx1MTY4OFxcXFx1MTY4OVxcXFx1MTY4QVxcXFx1MTY4QlxcXFx1MTY4Q1xcXFx1MTY4RFxcXFx1MTY4RVxcXFx1MTY4RlxcXFx1MTY5MFxcXFx1MTY5MVxcXFx1MTY5MlxcXFx1MTY5M1xcXFx1MTY5NFxcXFx1MTY5NVxcXFx1MTY5NlxcXFx1MTY5N1xcXFx1MTY5OFxcXFx1MTY5OVxcXFx1MTY5QVxcXFx1MTZBMFxcXFx1MTZBMVxcXFx1MTZBMlxcXFx1MTZBM1xcXFx1MTZBNFxcXFx1MTZBNVxcXFx1MTZBNlxcXFx1MTZBN1xcXFx1MTZBOFxcXFx1MTZBOVxcXFx1MTZBQVxcXFx1MTZBQlxcXFx1MTZBQ1xcXFx1MTZBRFxcXFx1MTZBRVxcXFx1MTZBRlxcXFx1MTZCMFxcXFx1MTZCMVxcXFx1MTZCMlxcXFx1MTZCM1xcXFx1MTZCNFxcXFx1MTZCNVxcXFx1MTZCNlxcXFx1MTZCN1xcXFx1MTZCOFxcXFx1MTZCOVxcXFx1MTZCQVxcXFx1MTZCQlxcXFx1MTZCQ1xcXFx1MTZCRFxcXFx1MTZCRVxcXFx1MTZCRlxcXFx1MTZDMFxcXFx1MTZDMVxcXFx1MTZDMlxcXFx1MTZDM1xcXFx1MTZDNFxcXFx1MTZDNVxcXFx1MTZDNlxcXFx1MTZDN1xcXFx1MTZDOFxcXFx1MTZDOVxcXFx1MTZDQVxcXFx1MTZDQlxcXFx1MTZDQ1xcXFx1MTZDRFxcXFx1MTZDRVxcXFx1MTZDRlxcXFx1MTZEMFxcXFx1MTZEMVxcXFx1MTZEMlxcXFx1MTZEM1xcXFx1MTZENFxcXFx1MTZENVxcXFx1MTZENlxcXFx1MTZEN1xcXFx1MTZEOFxcXFx1MTZEOVxcXFx1MTZEQVxcXFx1MTZEQlxcXFx1MTZEQ1xcXFx1MTZERFxcXFx1MTZERVxcXFx1MTZERlxcXFx1MTZFMFxcXFx1MTZFMVxcXFx1MTZFMlxcXFx1MTZFM1xcXFx1MTZFNFxcXFx1MTZFNVxcXFx1MTZFNlxcXFx1MTZFN1xcXFx1MTZFOFxcXFx1MTZFOVxcXFx1MTZFQVxcXFx1MTcwMFxcXFx1MTcwMVxcXFx1MTcwMlxcXFx1MTcwM1xcXFx1MTcwNFxcXFx1MTcwNVxcXFx1MTcwNlxcXFx1MTcwN1xcXFx1MTcwOFxcXFx1MTcwOVxcXFx1MTcwQVxcXFx1MTcwQlxcXFx1MTcwQ1xcXFx1MTcwRVxcXFx1MTcwRlxcXFx1MTcxMFxcXFx1MTcxMVxcXFx1MTcyMFxcXFx1MTcyMVxcXFx1MTcyMlxcXFx1MTcyM1xcXFx1MTcyNFxcXFx1MTcyNVxcXFx1MTcyNlxcXFx1MTcyN1xcXFx1MTcyOFxcXFx1MTcyOVxcXFx1MTcyQVxcXFx1MTcyQlxcXFx1MTcyQ1xcXFx1MTcyRFxcXFx1MTcyRVxcXFx1MTcyRlxcXFx1MTczMFxcXFx1MTczMVxcXFx1MTc0MFxcXFx1MTc0MVxcXFx1MTc0MlxcXFx1MTc0M1xcXFx1MTc0NFxcXFx1MTc0NVxcXFx1MTc0NlxcXFx1MTc0N1xcXFx1MTc0OFxcXFx1MTc0OVxcXFx1MTc0QVxcXFx1MTc0QlxcXFx1MTc0Q1xcXFx1MTc0RFxcXFx1MTc0RVxcXFx1MTc0RlxcXFx1MTc1MFxcXFx1MTc1MVxcXFx1MTc2MFxcXFx1MTc2MVxcXFx1MTc2MlxcXFx1MTc2M1xcXFx1MTc2NFxcXFx1MTc2NVxcXFx1MTc2NlxcXFx1MTc2N1xcXFx1MTc2OFxcXFx1MTc2OVxcXFx1MTc2QVxcXFx1MTc2QlxcXFx1MTc2Q1xcXFx1MTc2RVxcXFx1MTc2RlxcXFx1MTc3MFxcXFx1MTc4MFxcXFx1MTc4MVxcXFx1MTc4MlxcXFx1MTc4M1xcXFx1MTc4NFxcXFx1MTc4NVxcXFx1MTc4NlxcXFx1MTc4N1xcXFx1MTc4OFxcXFx1MTc4OVxcXFx1MTc4QVxcXFx1MTc4QlxcXFx1MTc4Q1xcXFx1MTc4RFxcXFx1MTc4RVxcXFx1MTc4RlxcXFx1MTc5MFxcXFx1MTc5MVxcXFx1MTc5MlxcXFx1MTc5M1xcXFx1MTc5NFxcXFx1MTc5NVxcXFx1MTc5NlxcXFx1MTc5N1xcXFx1MTc5OFxcXFx1MTc5OVxcXFx1MTc5QVxcXFx1MTc5QlxcXFx1MTc5Q1xcXFx1MTc5RFxcXFx1MTc5RVxcXFx1MTc5RlxcXFx1MTdBMFxcXFx1MTdBMVxcXFx1MTdBMlxcXFx1MTdBM1xcXFx1MTdBNFxcXFx1MTdBNVxcXFx1MTdBNlxcXFx1MTdBN1xcXFx1MTdBOFxcXFx1MTdBOVxcXFx1MTdBQVxcXFx1MTdBQlxcXFx1MTdBQ1xcXFx1MTdBRFxcXFx1MTdBRVxcXFx1MTdBRlxcXFx1MTdCMFxcXFx1MTdCMVxcXFx1MTdCMlxcXFx1MTdCM1xcXFx1MTdEQ1xcXFx1MTgyMFxcXFx1MTgyMVxcXFx1MTgyMlxcXFx1MTgyM1xcXFx1MTgyNFxcXFx1MTgyNVxcXFx1MTgyNlxcXFx1MTgyN1xcXFx1MTgyOFxcXFx1MTgyOVxcXFx1MTgyQVxcXFx1MTgyQlxcXFx1MTgyQ1xcXFx1MTgyRFxcXFx1MTgyRVxcXFx1MTgyRlxcXFx1MTgzMFxcXFx1MTgzMVxcXFx1MTgzMlxcXFx1MTgzM1xcXFx1MTgzNFxcXFx1MTgzNVxcXFx1MTgzNlxcXFx1MTgzN1xcXFx1MTgzOFxcXFx1MTgzOVxcXFx1MTgzQVxcXFx1MTgzQlxcXFx1MTgzQ1xcXFx1MTgzRFxcXFx1MTgzRVxcXFx1MTgzRlxcXFx1MTg0MFxcXFx1MTg0MVxcXFx1MTg0MlxcXFx1MTg0NFxcXFx1MTg0NVxcXFx1MTg0NlxcXFx1MTg0N1xcXFx1MTg0OFxcXFx1MTg0OVxcXFx1MTg0QVxcXFx1MTg0QlxcXFx1MTg0Q1xcXFx1MTg0RFxcXFx1MTg0RVxcXFx1MTg0RlxcXFx1MTg1MFxcXFx1MTg1MVxcXFx1MTg1MlxcXFx1MTg1M1xcXFx1MTg1NFxcXFx1MTg1NVxcXFx1MTg1NlxcXFx1MTg1N1xcXFx1MTg1OFxcXFx1MTg1OVxcXFx1MTg1QVxcXFx1MTg1QlxcXFx1MTg1Q1xcXFx1MTg1RFxcXFx1MTg1RVxcXFx1MTg1RlxcXFx1MTg2MFxcXFx1MTg2MVxcXFx1MTg2MlxcXFx1MTg2M1xcXFx1MTg2NFxcXFx1MTg2NVxcXFx1MTg2NlxcXFx1MTg2N1xcXFx1MTg2OFxcXFx1MTg2OVxcXFx1MTg2QVxcXFx1MTg2QlxcXFx1MTg2Q1xcXFx1MTg2RFxcXFx1MTg2RVxcXFx1MTg2RlxcXFx1MTg3MFxcXFx1MTg3MVxcXFx1MTg3MlxcXFx1MTg3M1xcXFx1MTg3NFxcXFx1MTg3NVxcXFx1MTg3NlxcXFx1MTg3N1xcXFx1MTg4MFxcXFx1MTg4MVxcXFx1MTg4MlxcXFx1MTg4M1xcXFx1MTg4NFxcXFx1MTg4NVxcXFx1MTg4NlxcXFx1MTg4N1xcXFx1MTg4OFxcXFx1MTg4OVxcXFx1MTg4QVxcXFx1MTg4QlxcXFx1MTg4Q1xcXFx1MTg4RFxcXFx1MTg4RVxcXFx1MTg4RlxcXFx1MTg5MFxcXFx1MTg5MVxcXFx1MTg5MlxcXFx1MTg5M1xcXFx1MTg5NFxcXFx1MTg5NVxcXFx1MTg5NlxcXFx1MTg5N1xcXFx1MTg5OFxcXFx1MTg5OVxcXFx1MTg5QVxcXFx1MTg5QlxcXFx1MTg5Q1xcXFx1MTg5RFxcXFx1MTg5RVxcXFx1MTg5RlxcXFx1MThBMFxcXFx1MThBMVxcXFx1MThBMlxcXFx1MThBM1xcXFx1MThBNFxcXFx1MThBNVxcXFx1MThBNlxcXFx1MThBN1xcXFx1MThBOFxcXFx1MThBQVxcXFx1MTkwMFxcXFx1MTkwMVxcXFx1MTkwMlxcXFx1MTkwM1xcXFx1MTkwNFxcXFx1MTkwNVxcXFx1MTkwNlxcXFx1MTkwN1xcXFx1MTkwOFxcXFx1MTkwOVxcXFx1MTkwQVxcXFx1MTkwQlxcXFx1MTkwQ1xcXFx1MTkwRFxcXFx1MTkwRVxcXFx1MTkwRlxcXFx1MTkxMFxcXFx1MTkxMVxcXFx1MTkxMlxcXFx1MTkxM1xcXFx1MTkxNFxcXFx1MTkxNVxcXFx1MTkxNlxcXFx1MTkxN1xcXFx1MTkxOFxcXFx1MTkxOVxcXFx1MTkxQVxcXFx1MTkxQlxcXFx1MTkxQ1xcXFx1MTk1MFxcXFx1MTk1MVxcXFx1MTk1MlxcXFx1MTk1M1xcXFx1MTk1NFxcXFx1MTk1NVxcXFx1MTk1NlxcXFx1MTk1N1xcXFx1MTk1OFxcXFx1MTk1OVxcXFx1MTk1QVxcXFx1MTk1QlxcXFx1MTk1Q1xcXFx1MTk1RFxcXFx1MTk1RVxcXFx1MTk1RlxcXFx1MTk2MFxcXFx1MTk2MVxcXFx1MTk2MlxcXFx1MTk2M1xcXFx1MTk2NFxcXFx1MTk2NVxcXFx1MTk2NlxcXFx1MTk2N1xcXFx1MTk2OFxcXFx1MTk2OVxcXFx1MTk2QVxcXFx1MTk2QlxcXFx1MTk2Q1xcXFx1MTk2RFxcXFx1MTk3MFxcXFx1MTk3MVxcXFx1MTk3MlxcXFx1MTk3M1xcXFx1MTk3NFxcXFx1MTk4MFxcXFx1MTk4MVxcXFx1MTk4MlxcXFx1MTk4M1xcXFx1MTk4NFxcXFx1MTk4NVxcXFx1MTk4NlxcXFx1MTk4N1xcXFx1MTk4OFxcXFx1MTk4OVxcXFx1MTk4QVxcXFx1MTk4QlxcXFx1MTk4Q1xcXFx1MTk4RFxcXFx1MTk4RVxcXFx1MTk4RlxcXFx1MTk5MFxcXFx1MTk5MVxcXFx1MTk5MlxcXFx1MTk5M1xcXFx1MTk5NFxcXFx1MTk5NVxcXFx1MTk5NlxcXFx1MTk5N1xcXFx1MTk5OFxcXFx1MTk5OVxcXFx1MTk5QVxcXFx1MTk5QlxcXFx1MTk5Q1xcXFx1MTk5RFxcXFx1MTk5RVxcXFx1MTk5RlxcXFx1MTlBMFxcXFx1MTlBMVxcXFx1MTlBMlxcXFx1MTlBM1xcXFx1MTlBNFxcXFx1MTlBNVxcXFx1MTlBNlxcXFx1MTlBN1xcXFx1MTlBOFxcXFx1MTlBOVxcXFx1MTlDMVxcXFx1MTlDMlxcXFx1MTlDM1xcXFx1MTlDNFxcXFx1MTlDNVxcXFx1MTlDNlxcXFx1MTlDN1xcXFx1MUEwMFxcXFx1MUEwMVxcXFx1MUEwMlxcXFx1MUEwM1xcXFx1MUEwNFxcXFx1MUEwNVxcXFx1MUEwNlxcXFx1MUEwN1xcXFx1MUEwOFxcXFx1MUEwOVxcXFx1MUEwQVxcXFx1MUEwQlxcXFx1MUEwQ1xcXFx1MUEwRFxcXFx1MUEwRVxcXFx1MUEwRlxcXFx1MUExMFxcXFx1MUExMVxcXFx1MUExMlxcXFx1MUExM1xcXFx1MUExNFxcXFx1MUExNVxcXFx1MUExNlxcXFx1MUIwNVxcXFx1MUIwNlxcXFx1MUIwN1xcXFx1MUIwOFxcXFx1MUIwOVxcXFx1MUIwQVxcXFx1MUIwQlxcXFx1MUIwQ1xcXFx1MUIwRFxcXFx1MUIwRVxcXFx1MUIwRlxcXFx1MUIxMFxcXFx1MUIxMVxcXFx1MUIxMlxcXFx1MUIxM1xcXFx1MUIxNFxcXFx1MUIxNVxcXFx1MUIxNlxcXFx1MUIxN1xcXFx1MUIxOFxcXFx1MUIxOVxcXFx1MUIxQVxcXFx1MUIxQlxcXFx1MUIxQ1xcXFx1MUIxRFxcXFx1MUIxRVxcXFx1MUIxRlxcXFx1MUIyMFxcXFx1MUIyMVxcXFx1MUIyMlxcXFx1MUIyM1xcXFx1MUIyNFxcXFx1MUIyNVxcXFx1MUIyNlxcXFx1MUIyN1xcXFx1MUIyOFxcXFx1MUIyOVxcXFx1MUIyQVxcXFx1MUIyQlxcXFx1MUIyQ1xcXFx1MUIyRFxcXFx1MUIyRVxcXFx1MUIyRlxcXFx1MUIzMFxcXFx1MUIzMVxcXFx1MUIzMlxcXFx1MUIzM1xcXFx1MUI0NVxcXFx1MUI0NlxcXFx1MUI0N1xcXFx1MUI0OFxcXFx1MUI0OVxcXFx1MUI0QVxcXFx1MUI0QlxcXFx1MUI4M1xcXFx1MUI4NFxcXFx1MUI4NVxcXFx1MUI4NlxcXFx1MUI4N1xcXFx1MUI4OFxcXFx1MUI4OVxcXFx1MUI4QVxcXFx1MUI4QlxcXFx1MUI4Q1xcXFx1MUI4RFxcXFx1MUI4RVxcXFx1MUI4RlxcXFx1MUI5MFxcXFx1MUI5MVxcXFx1MUI5MlxcXFx1MUI5M1xcXFx1MUI5NFxcXFx1MUI5NVxcXFx1MUI5NlxcXFx1MUI5N1xcXFx1MUI5OFxcXFx1MUI5OVxcXFx1MUI5QVxcXFx1MUI5QlxcXFx1MUI5Q1xcXFx1MUI5RFxcXFx1MUI5RVxcXFx1MUI5RlxcXFx1MUJBMFxcXFx1MUJBRVxcXFx1MUJBRlxcXFx1MUMwMFxcXFx1MUMwMVxcXFx1MUMwMlxcXFx1MUMwM1xcXFx1MUMwNFxcXFx1MUMwNVxcXFx1MUMwNlxcXFx1MUMwN1xcXFx1MUMwOFxcXFx1MUMwOVxcXFx1MUMwQVxcXFx1MUMwQlxcXFx1MUMwQ1xcXFx1MUMwRFxcXFx1MUMwRVxcXFx1MUMwRlxcXFx1MUMxMFxcXFx1MUMxMVxcXFx1MUMxMlxcXFx1MUMxM1xcXFx1MUMxNFxcXFx1MUMxNVxcXFx1MUMxNlxcXFx1MUMxN1xcXFx1MUMxOFxcXFx1MUMxOVxcXFx1MUMxQVxcXFx1MUMxQlxcXFx1MUMxQ1xcXFx1MUMxRFxcXFx1MUMxRVxcXFx1MUMxRlxcXFx1MUMyMFxcXFx1MUMyMVxcXFx1MUMyMlxcXFx1MUMyM1xcXFx1MUM0RFxcXFx1MUM0RVxcXFx1MUM0RlxcXFx1MUM1QVxcXFx1MUM1QlxcXFx1MUM1Q1xcXFx1MUM1RFxcXFx1MUM1RVxcXFx1MUM1RlxcXFx1MUM2MFxcXFx1MUM2MVxcXFx1MUM2MlxcXFx1MUM2M1xcXFx1MUM2NFxcXFx1MUM2NVxcXFx1MUM2NlxcXFx1MUM2N1xcXFx1MUM2OFxcXFx1MUM2OVxcXFx1MUM2QVxcXFx1MUM2QlxcXFx1MUM2Q1xcXFx1MUM2RFxcXFx1MUM2RVxcXFx1MUM2RlxcXFx1MUM3MFxcXFx1MUM3MVxcXFx1MUM3MlxcXFx1MUM3M1xcXFx1MUM3NFxcXFx1MUM3NVxcXFx1MUM3NlxcXFx1MUM3N1xcXFx1MjEzNVxcXFx1MjEzNlxcXFx1MjEzN1xcXFx1MjEzOFxcXFx1MkQzMFxcXFx1MkQzMVxcXFx1MkQzMlxcXFx1MkQzM1xcXFx1MkQzNFxcXFx1MkQzNVxcXFx1MkQzNlxcXFx1MkQzN1xcXFx1MkQzOFxcXFx1MkQzOVxcXFx1MkQzQVxcXFx1MkQzQlxcXFx1MkQzQ1xcXFx1MkQzRFxcXFx1MkQzRVxcXFx1MkQzRlxcXFx1MkQ0MFxcXFx1MkQ0MVxcXFx1MkQ0MlxcXFx1MkQ0M1xcXFx1MkQ0NFxcXFx1MkQ0NVxcXFx1MkQ0NlxcXFx1MkQ0N1xcXFx1MkQ0OFxcXFx1MkQ0OVxcXFx1MkQ0QVxcXFx1MkQ0QlxcXFx1MkQ0Q1xcXFx1MkQ0RFxcXFx1MkQ0RVxcXFx1MkQ0RlxcXFx1MkQ1MFxcXFx1MkQ1MVxcXFx1MkQ1MlxcXFx1MkQ1M1xcXFx1MkQ1NFxcXFx1MkQ1NVxcXFx1MkQ1NlxcXFx1MkQ1N1xcXFx1MkQ1OFxcXFx1MkQ1OVxcXFx1MkQ1QVxcXFx1MkQ1QlxcXFx1MkQ1Q1xcXFx1MkQ1RFxcXFx1MkQ1RVxcXFx1MkQ1RlxcXFx1MkQ2MFxcXFx1MkQ2MVxcXFx1MkQ2MlxcXFx1MkQ2M1xcXFx1MkQ2NFxcXFx1MkQ2NVxcXFx1MkQ4MFxcXFx1MkQ4MVxcXFx1MkQ4MlxcXFx1MkQ4M1xcXFx1MkQ4NFxcXFx1MkQ4NVxcXFx1MkQ4NlxcXFx1MkQ4N1xcXFx1MkQ4OFxcXFx1MkQ4OVxcXFx1MkQ4QVxcXFx1MkQ4QlxcXFx1MkQ4Q1xcXFx1MkQ4RFxcXFx1MkQ4RVxcXFx1MkQ4RlxcXFx1MkQ5MFxcXFx1MkQ5MVxcXFx1MkQ5MlxcXFx1MkQ5M1xcXFx1MkQ5NFxcXFx1MkQ5NVxcXFx1MkQ5NlxcXFx1MkRBMFxcXFx1MkRBMVxcXFx1MkRBMlxcXFx1MkRBM1xcXFx1MkRBNFxcXFx1MkRBNVxcXFx1MkRBNlxcXFx1MkRBOFxcXFx1MkRBOVxcXFx1MkRBQVxcXFx1MkRBQlxcXFx1MkRBQ1xcXFx1MkRBRFxcXFx1MkRBRVxcXFx1MkRCMFxcXFx1MkRCMVxcXFx1MkRCMlxcXFx1MkRCM1xcXFx1MkRCNFxcXFx1MkRCNVxcXFx1MkRCNlxcXFx1MkRCOFxcXFx1MkRCOVxcXFx1MkRCQVxcXFx1MkRCQlxcXFx1MkRCQ1xcXFx1MkRCRFxcXFx1MkRCRVxcXFx1MkRDMFxcXFx1MkRDMVxcXFx1MkRDMlxcXFx1MkRDM1xcXFx1MkRDNFxcXFx1MkRDNVxcXFx1MkRDNlxcXFx1MkRDOFxcXFx1MkRDOVxcXFx1MkRDQVxcXFx1MkRDQlxcXFx1MkRDQ1xcXFx1MkRDRFxcXFx1MkRDRVxcXFx1MkREMFxcXFx1MkREMVxcXFx1MkREMlxcXFx1MkREM1xcXFx1MkRENFxcXFx1MkRENVxcXFx1MkRENlxcXFx1MkREOFxcXFx1MkREOVxcXFx1MkREQVxcXFx1MkREQlxcXFx1MkREQ1xcXFx1MkRERFxcXFx1MkRERVxcXFx1MzAwNlxcXFx1MzAzQ1xcXFx1MzA0MVxcXFx1MzA0MlxcXFx1MzA0M1xcXFx1MzA0NFxcXFx1MzA0NVxcXFx1MzA0NlxcXFx1MzA0N1xcXFx1MzA0OFxcXFx1MzA0OVxcXFx1MzA0QVxcXFx1MzA0QlxcXFx1MzA0Q1xcXFx1MzA0RFxcXFx1MzA0RVxcXFx1MzA0RlxcXFx1MzA1MFxcXFx1MzA1MVxcXFx1MzA1MlxcXFx1MzA1M1xcXFx1MzA1NFxcXFx1MzA1NVxcXFx1MzA1NlxcXFx1MzA1N1xcXFx1MzA1OFxcXFx1MzA1OVxcXFx1MzA1QVxcXFx1MzA1QlxcXFx1MzA1Q1xcXFx1MzA1RFxcXFx1MzA1RVxcXFx1MzA1RlxcXFx1MzA2MFxcXFx1MzA2MVxcXFx1MzA2MlxcXFx1MzA2M1xcXFx1MzA2NFxcXFx1MzA2NVxcXFx1MzA2NlxcXFx1MzA2N1xcXFx1MzA2OFxcXFx1MzA2OVxcXFx1MzA2QVxcXFx1MzA2QlxcXFx1MzA2Q1xcXFx1MzA2RFxcXFx1MzA2RVxcXFx1MzA2RlxcXFx1MzA3MFxcXFx1MzA3MVxcXFx1MzA3MlxcXFx1MzA3M1xcXFx1MzA3NFxcXFx1MzA3NVxcXFx1MzA3NlxcXFx1MzA3N1xcXFx1MzA3OFxcXFx1MzA3OVxcXFx1MzA3QVxcXFx1MzA3QlxcXFx1MzA3Q1xcXFx1MzA3RFxcXFx1MzA3RVxcXFx1MzA3RlxcXFx1MzA4MFxcXFx1MzA4MVxcXFx1MzA4MlxcXFx1MzA4M1xcXFx1MzA4NFxcXFx1MzA4NVxcXFx1MzA4NlxcXFx1MzA4N1xcXFx1MzA4OFxcXFx1MzA4OVxcXFx1MzA4QVxcXFx1MzA4QlxcXFx1MzA4Q1xcXFx1MzA4RFxcXFx1MzA4RVxcXFx1MzA4RlxcXFx1MzA5MFxcXFx1MzA5MVxcXFx1MzA5MlxcXFx1MzA5M1xcXFx1MzA5NFxcXFx1MzA5NVxcXFx1MzA5NlxcXFx1MzA5RlxcXFx1MzBBMVxcXFx1MzBBMlxcXFx1MzBBM1xcXFx1MzBBNFxcXFx1MzBBNVxcXFx1MzBBNlxcXFx1MzBBN1xcXFx1MzBBOFxcXFx1MzBBOVxcXFx1MzBBQVxcXFx1MzBBQlxcXFx1MzBBQ1xcXFx1MzBBRFxcXFx1MzBBRVxcXFx1MzBBRlxcXFx1MzBCMFxcXFx1MzBCMVxcXFx1MzBCMlxcXFx1MzBCM1xcXFx1MzBCNFxcXFx1MzBCNVxcXFx1MzBCNlxcXFx1MzBCN1xcXFx1MzBCOFxcXFx1MzBCOVxcXFx1MzBCQVxcXFx1MzBCQlxcXFx1MzBCQ1xcXFx1MzBCRFxcXFx1MzBCRVxcXFx1MzBCRlxcXFx1MzBDMFxcXFx1MzBDMVxcXFx1MzBDMlxcXFx1MzBDM1xcXFx1MzBDNFxcXFx1MzBDNVxcXFx1MzBDNlxcXFx1MzBDN1xcXFx1MzBDOFxcXFx1MzBDOVxcXFx1MzBDQVxcXFx1MzBDQlxcXFx1MzBDQ1xcXFx1MzBDRFxcXFx1MzBDRVxcXFx1MzBDRlxcXFx1MzBEMFxcXFx1MzBEMVxcXFx1MzBEMlxcXFx1MzBEM1xcXFx1MzBENFxcXFx1MzBENVxcXFx1MzBENlxcXFx1MzBEN1xcXFx1MzBEOFxcXFx1MzBEOVxcXFx1MzBEQVxcXFx1MzBEQlxcXFx1MzBEQ1xcXFx1MzBERFxcXFx1MzBERVxcXFx1MzBERlxcXFx1MzBFMFxcXFx1MzBFMVxcXFx1MzBFMlxcXFx1MzBFM1xcXFx1MzBFNFxcXFx1MzBFNVxcXFx1MzBFNlxcXFx1MzBFN1xcXFx1MzBFOFxcXFx1MzBFOVxcXFx1MzBFQVxcXFx1MzBFQlxcXFx1MzBFQ1xcXFx1MzBFRFxcXFx1MzBFRVxcXFx1MzBFRlxcXFx1MzBGMFxcXFx1MzBGMVxcXFx1MzBGMlxcXFx1MzBGM1xcXFx1MzBGNFxcXFx1MzBGNVxcXFx1MzBGNlxcXFx1MzBGN1xcXFx1MzBGOFxcXFx1MzBGOVxcXFx1MzBGQVxcXFx1MzBGRlxcXFx1MzEwNVxcXFx1MzEwNlxcXFx1MzEwN1xcXFx1MzEwOFxcXFx1MzEwOVxcXFx1MzEwQVxcXFx1MzEwQlxcXFx1MzEwQ1xcXFx1MzEwRFxcXFx1MzEwRVxcXFx1MzEwRlxcXFx1MzExMFxcXFx1MzExMVxcXFx1MzExMlxcXFx1MzExM1xcXFx1MzExNFxcXFx1MzExNVxcXFx1MzExNlxcXFx1MzExN1xcXFx1MzExOFxcXFx1MzExOVxcXFx1MzExQVxcXFx1MzExQlxcXFx1MzExQ1xcXFx1MzExRFxcXFx1MzExRVxcXFx1MzExRlxcXFx1MzEyMFxcXFx1MzEyMVxcXFx1MzEyMlxcXFx1MzEyM1xcXFx1MzEyNFxcXFx1MzEyNVxcXFx1MzEyNlxcXFx1MzEyN1xcXFx1MzEyOFxcXFx1MzEyOVxcXFx1MzEyQVxcXFx1MzEyQlxcXFx1MzEyQ1xcXFx1MzEyRFxcXFx1MzEzMVxcXFx1MzEzMlxcXFx1MzEzM1xcXFx1MzEzNFxcXFx1MzEzNVxcXFx1MzEzNlxcXFx1MzEzN1xcXFx1MzEzOFxcXFx1MzEzOVxcXFx1MzEzQVxcXFx1MzEzQlxcXFx1MzEzQ1xcXFx1MzEzRFxcXFx1MzEzRVxcXFx1MzEzRlxcXFx1MzE0MFxcXFx1MzE0MVxcXFx1MzE0MlxcXFx1MzE0M1xcXFx1MzE0NFxcXFx1MzE0NVxcXFx1MzE0NlxcXFx1MzE0N1xcXFx1MzE0OFxcXFx1MzE0OVxcXFx1MzE0QVxcXFx1MzE0QlxcXFx1MzE0Q1xcXFx1MzE0RFxcXFx1MzE0RVxcXFx1MzE0RlxcXFx1MzE1MFxcXFx1MzE1MVxcXFx1MzE1MlxcXFx1MzE1M1xcXFx1MzE1NFxcXFx1MzE1NVxcXFx1MzE1NlxcXFx1MzE1N1xcXFx1MzE1OFxcXFx1MzE1OVxcXFx1MzE1QVxcXFx1MzE1QlxcXFx1MzE1Q1xcXFx1MzE1RFxcXFx1MzE1RVxcXFx1MzE1RlxcXFx1MzE2MFxcXFx1MzE2MVxcXFx1MzE2MlxcXFx1MzE2M1xcXFx1MzE2NFxcXFx1MzE2NVxcXFx1MzE2NlxcXFx1MzE2N1xcXFx1MzE2OFxcXFx1MzE2OVxcXFx1MzE2QVxcXFx1MzE2QlxcXFx1MzE2Q1xcXFx1MzE2RFxcXFx1MzE2RVxcXFx1MzE2RlxcXFx1MzE3MFxcXFx1MzE3MVxcXFx1MzE3MlxcXFx1MzE3M1xcXFx1MzE3NFxcXFx1MzE3NVxcXFx1MzE3NlxcXFx1MzE3N1xcXFx1MzE3OFxcXFx1MzE3OVxcXFx1MzE3QVxcXFx1MzE3QlxcXFx1MzE3Q1xcXFx1MzE3RFxcXFx1MzE3RVxcXFx1MzE3RlxcXFx1MzE4MFxcXFx1MzE4MVxcXFx1MzE4MlxcXFx1MzE4M1xcXFx1MzE4NFxcXFx1MzE4NVxcXFx1MzE4NlxcXFx1MzE4N1xcXFx1MzE4OFxcXFx1MzE4OVxcXFx1MzE4QVxcXFx1MzE4QlxcXFx1MzE4Q1xcXFx1MzE4RFxcXFx1MzE4RVxcXFx1MzFBMFxcXFx1MzFBMVxcXFx1MzFBMlxcXFx1MzFBM1xcXFx1MzFBNFxcXFx1MzFBNVxcXFx1MzFBNlxcXFx1MzFBN1xcXFx1MzFBOFxcXFx1MzFBOVxcXFx1MzFBQVxcXFx1MzFBQlxcXFx1MzFBQ1xcXFx1MzFBRFxcXFx1MzFBRVxcXFx1MzFBRlxcXFx1MzFCMFxcXFx1MzFCMVxcXFx1MzFCMlxcXFx1MzFCM1xcXFx1MzFCNFxcXFx1MzFCNVxcXFx1MzFCNlxcXFx1MzFCN1xcXFx1MzFGMFxcXFx1MzFGMVxcXFx1MzFGMlxcXFx1MzFGM1xcXFx1MzFGNFxcXFx1MzFGNVxcXFx1MzFGNlxcXFx1MzFGN1xcXFx1MzFGOFxcXFx1MzFGOVxcXFx1MzFGQVxcXFx1MzFGQlxcXFx1MzFGQ1xcXFx1MzFGRFxcXFx1MzFGRVxcXFx1MzFGRlxcXFx1MzQwMFxcXFx1NERCNVxcXFx1NEUwMFxcXFx1OUZDM1xcXFx1QTAwMFxcXFx1QTAwMVxcXFx1QTAwMlxcXFx1QTAwM1xcXFx1QTAwNFxcXFx1QTAwNVxcXFx1QTAwNlxcXFx1QTAwN1xcXFx1QTAwOFxcXFx1QTAwOVxcXFx1QTAwQVxcXFx1QTAwQlxcXFx1QTAwQ1xcXFx1QTAwRFxcXFx1QTAwRVxcXFx1QTAwRlxcXFx1QTAxMFxcXFx1QTAxMVxcXFx1QTAxMlxcXFx1QTAxM1xcXFx1QTAxNFxcXFx1QTAxNlxcXFx1QTAxN1xcXFx1QTAxOFxcXFx1QTAxOVxcXFx1QTAxQVxcXFx1QTAxQlxcXFx1QTAxQ1xcXFx1QTAxRFxcXFx1QTAxRVxcXFx1QTAxRlxcXFx1QTAyMFxcXFx1QTAyMVxcXFx1QTAyMlxcXFx1QTAyM1xcXFx1QTAyNFxcXFx1QTAyNVxcXFx1QTAyNlxcXFx1QTAyN1xcXFx1QTAyOFxcXFx1QTAyOVxcXFx1QTAyQVxcXFx1QTAyQlxcXFx1QTAyQ1xcXFx1QTAyRFxcXFx1QTAyRVxcXFx1QTAyRlxcXFx1QTAzMFxcXFx1QTAzMVxcXFx1QTAzMlxcXFx1QTAzM1xcXFx1QTAzNFxcXFx1QTAzNVxcXFx1QTAzNlxcXFx1QTAzN1xcXFx1QTAzOFxcXFx1QTAzOVxcXFx1QTAzQVxcXFx1QTAzQlxcXFx1QTAzQ1xcXFx1QTAzRFxcXFx1QTAzRVxcXFx1QTAzRlxcXFx1QTA0MFxcXFx1QTA0MVxcXFx1QTA0MlxcXFx1QTA0M1xcXFx1QTA0NFxcXFx1QTA0NVxcXFx1QTA0NlxcXFx1QTA0N1xcXFx1QTA0OFxcXFx1QTA0OVxcXFx1QTA0QVxcXFx1QTA0QlxcXFx1QTA0Q1xcXFx1QTA0RFxcXFx1QTA0RVxcXFx1QTA0RlxcXFx1QTA1MFxcXFx1QTA1MVxcXFx1QTA1MlxcXFx1QTA1M1xcXFx1QTA1NFxcXFx1QTA1NVxcXFx1QTA1NlxcXFx1QTA1N1xcXFx1QTA1OFxcXFx1QTA1OVxcXFx1QTA1QVxcXFx1QTA1QlxcXFx1QTA1Q1xcXFx1QTA1RFxcXFx1QTA1RVxcXFx1QTA1RlxcXFx1QTA2MFxcXFx1QTA2MVxcXFx1QTA2MlxcXFx1QTA2M1xcXFx1QTA2NFxcXFx1QTA2NVxcXFx1QTA2NlxcXFx1QTA2N1xcXFx1QTA2OFxcXFx1QTA2OVxcXFx1QTA2QVxcXFx1QTA2QlxcXFx1QTA2Q1xcXFx1QTA2RFxcXFx1QTA2RVxcXFx1QTA2RlxcXFx1QTA3MFxcXFx1QTA3MVxcXFx1QTA3MlxcXFx1QTA3M1xcXFx1QTA3NFxcXFx1QTA3NVxcXFx1QTA3NlxcXFx1QTA3N1xcXFx1QTA3OFxcXFx1QTA3OVxcXFx1QTA3QVxcXFx1QTA3QlxcXFx1QTA3Q1xcXFx1QTA3RFxcXFx1QTA3RVxcXFx1QTA3RlxcXFx1QTA4MFxcXFx1QTA4MVxcXFx1QTA4MlxcXFx1QTA4M1xcXFx1QTA4NFxcXFx1QTA4NVxcXFx1QTA4NlxcXFx1QTA4N1xcXFx1QTA4OFxcXFx1QTA4OVxcXFx1QTA4QVxcXFx1QTA4QlxcXFx1QTA4Q1xcXFx1QTA4RFxcXFx1QTA4RVxcXFx1QTA4RlxcXFx1QTA5MFxcXFx1QTA5MVxcXFx1QTA5MlxcXFx1QTA5M1xcXFx1QTA5NFxcXFx1QTA5NVxcXFx1QTA5NlxcXFx1QTA5N1xcXFx1QTA5OFxcXFx1QTA5OVxcXFx1QTA5QVxcXFx1QTA5QlxcXFx1QTA5Q1xcXFx1QTA5RFxcXFx1QTA5RVxcXFx1QTA5RlxcXFx1QTBBMFxcXFx1QTBBMVxcXFx1QTBBMlxcXFx1QTBBM1xcXFx1QTBBNFxcXFx1QTBBNVxcXFx1QTBBNlxcXFx1QTBBN1xcXFx1QTBBOFxcXFx1QTBBOVxcXFx1QTBBQVxcXFx1QTBBQlxcXFx1QTBBQ1xcXFx1QTBBRFxcXFx1QTBBRVxcXFx1QTBBRlxcXFx1QTBCMFxcXFx1QTBCMVxcXFx1QTBCMlxcXFx1QTBCM1xcXFx1QTBCNFxcXFx1QTBCNVxcXFx1QTBCNlxcXFx1QTBCN1xcXFx1QTBCOFxcXFx1QTBCOVxcXFx1QTBCQVxcXFx1QTBCQlxcXFx1QTBCQ1xcXFx1QTBCRFxcXFx1QTBCRVxcXFx1QTBCRlxcXFx1QTBDMFxcXFx1QTBDMVxcXFx1QTBDMlxcXFx1QTBDM1xcXFx1QTBDNFxcXFx1QTBDNVxcXFx1QTBDNlxcXFx1QTBDN1xcXFx1QTBDOFxcXFx1QTBDOVxcXFx1QTBDQVxcXFx1QTBDQlxcXFx1QTBDQ1xcXFx1QTBDRFxcXFx1QTBDRVxcXFx1QTBDRlxcXFx1QTBEMFxcXFx1QTBEMVxcXFx1QTBEMlxcXFx1QTBEM1xcXFx1QTBENFxcXFx1QTBENVxcXFx1QTBENlxcXFx1QTBEN1xcXFx1QTBEOFxcXFx1QTBEOVxcXFx1QTBEQVxcXFx1QTBEQlxcXFx1QTBEQ1xcXFx1QTBERFxcXFx1QTBERVxcXFx1QTBERlxcXFx1QTBFMFxcXFx1QTBFMVxcXFx1QTBFMlxcXFx1QTBFM1xcXFx1QTBFNFxcXFx1QTBFNVxcXFx1QTBFNlxcXFx1QTBFN1xcXFx1QTBFOFxcXFx1QTBFOVxcXFx1QTBFQVxcXFx1QTBFQlxcXFx1QTBFQ1xcXFx1QTBFRFxcXFx1QTBFRVxcXFx1QTBFRlxcXFx1QTBGMFxcXFx1QTBGMVxcXFx1QTBGMlxcXFx1QTBGM1xcXFx1QTBGNFxcXFx1QTBGNVxcXFx1QTBGNlxcXFx1QTBGN1xcXFx1QTBGOFxcXFx1QTBGOVxcXFx1QTBGQVxcXFx1QTBGQlxcXFx1QTBGQ1xcXFx1QTBGRFxcXFx1QTBGRVxcXFx1QTBGRlxcXFx1QTEwMFxcXFx1QTEwMVxcXFx1QTEwMlxcXFx1QTEwM1xcXFx1QTEwNFxcXFx1QTEwNVxcXFx1QTEwNlxcXFx1QTEwN1xcXFx1QTEwOFxcXFx1QTEwOVxcXFx1QTEwQVxcXFx1QTEwQlxcXFx1QTEwQ1xcXFx1QTEwRFxcXFx1QTEwRVxcXFx1QTEwRlxcXFx1QTExMFxcXFx1QTExMVxcXFx1QTExMlxcXFx1QTExM1xcXFx1QTExNFxcXFx1QTExNVxcXFx1QTExNlxcXFx1QTExN1xcXFx1QTExOFxcXFx1QTExOVxcXFx1QTExQVxcXFx1QTExQlxcXFx1QTExQ1xcXFx1QTExRFxcXFx1QTExRVxcXFx1QTExRlxcXFx1QTEyMFxcXFx1QTEyMVxcXFx1QTEyMlxcXFx1QTEyM1xcXFx1QTEyNFxcXFx1QTEyNVxcXFx1QTEyNlxcXFx1QTEyN1xcXFx1QTEyOFxcXFx1QTEyOVxcXFx1QTEyQVxcXFx1QTEyQlxcXFx1QTEyQ1xcXFx1QTEyRFxcXFx1QTEyRVxcXFx1QTEyRlxcXFx1QTEzMFxcXFx1QTEzMVxcXFx1QTEzMlxcXFx1QTEzM1xcXFx1QTEzNFxcXFx1QTEzNVxcXFx1QTEzNlxcXFx1QTEzN1xcXFx1QTEzOFxcXFx1QTEzOVxcXFx1QTEzQVxcXFx1QTEzQlxcXFx1QTEzQ1xcXFx1QTEzRFxcXFx1QTEzRVxcXFx1QTEzRlxcXFx1QTE0MFxcXFx1QTE0MVxcXFx1QTE0MlxcXFx1QTE0M1xcXFx1QTE0NFxcXFx1QTE0NVxcXFx1QTE0NlxcXFx1QTE0N1xcXFx1QTE0OFxcXFx1QTE0OVxcXFx1QTE0QVxcXFx1QTE0QlxcXFx1QTE0Q1xcXFx1QTE0RFxcXFx1QTE0RVxcXFx1QTE0RlxcXFx1QTE1MFxcXFx1QTE1MVxcXFx1QTE1MlxcXFx1QTE1M1xcXFx1QTE1NFxcXFx1QTE1NVxcXFx1QTE1NlxcXFx1QTE1N1xcXFx1QTE1OFxcXFx1QTE1OVxcXFx1QTE1QVxcXFx1QTE1QlxcXFx1QTE1Q1xcXFx1QTE1RFxcXFx1QTE1RVxcXFx1QTE1RlxcXFx1QTE2MFxcXFx1QTE2MVxcXFx1QTE2MlxcXFx1QTE2M1xcXFx1QTE2NFxcXFx1QTE2NVxcXFx1QTE2NlxcXFx1QTE2N1xcXFx1QTE2OFxcXFx1QTE2OVxcXFx1QTE2QVxcXFx1QTE2QlxcXFx1QTE2Q1xcXFx1QTE2RFxcXFx1QTE2RVxcXFx1QTE2RlxcXFx1QTE3MFxcXFx1QTE3MVxcXFx1QTE3MlxcXFx1QTE3M1xcXFx1QTE3NFxcXFx1QTE3NVxcXFx1QTE3NlxcXFx1QTE3N1xcXFx1QTE3OFxcXFx1QTE3OVxcXFx1QTE3QVxcXFx1QTE3QlxcXFx1QTE3Q1xcXFx1QTE3RFxcXFx1QTE3RVxcXFx1QTE3RlxcXFx1QTE4MFxcXFx1QTE4MVxcXFx1QTE4MlxcXFx1QTE4M1xcXFx1QTE4NFxcXFx1QTE4NVxcXFx1QTE4NlxcXFx1QTE4N1xcXFx1QTE4OFxcXFx1QTE4OVxcXFx1QTE4QVxcXFx1QTE4QlxcXFx1QTE4Q1xcXFx1QTE4RFxcXFx1QTE4RVxcXFx1QTE4RlxcXFx1QTE5MFxcXFx1QTE5MVxcXFx1QTE5MlxcXFx1QTE5M1xcXFx1QTE5NFxcXFx1QTE5NVxcXFx1QTE5NlxcXFx1QTE5N1xcXFx1QTE5OFxcXFx1QTE5OVxcXFx1QTE5QVxcXFx1QTE5QlxcXFx1QTE5Q1xcXFx1QTE5RFxcXFx1QTE5RVxcXFx1QTE5RlxcXFx1QTFBMFxcXFx1QTFBMVxcXFx1QTFBMlxcXFx1QTFBM1xcXFx1QTFBNFxcXFx1QTFBNVxcXFx1QTFBNlxcXFx1QTFBN1xcXFx1QTFBOFxcXFx1QTFBOVxcXFx1QTFBQVxcXFx1QTFBQlxcXFx1QTFBQ1xcXFx1QTFBRFxcXFx1QTFBRVxcXFx1QTFBRlxcXFx1QTFCMFxcXFx1QTFCMVxcXFx1QTFCMlxcXFx1QTFCM1xcXFx1QTFCNFxcXFx1QTFCNVxcXFx1QTFCNlxcXFx1QTFCN1xcXFx1QTFCOFxcXFx1QTFCOVxcXFx1QTFCQVxcXFx1QTFCQlxcXFx1QTFCQ1xcXFx1QTFCRFxcXFx1QTFCRVxcXFx1QTFCRlxcXFx1QTFDMFxcXFx1QTFDMVxcXFx1QTFDMlxcXFx1QTFDM1xcXFx1QTFDNFxcXFx1QTFDNVxcXFx1QTFDNlxcXFx1QTFDN1xcXFx1QTFDOFxcXFx1QTFDOVxcXFx1QTFDQVxcXFx1QTFDQlxcXFx1QTFDQ1xcXFx1QTFDRFxcXFx1QTFDRVxcXFx1QTFDRlxcXFx1QTFEMFxcXFx1QTFEMVxcXFx1QTFEMlxcXFx1QTFEM1xcXFx1QTFENFxcXFx1QTFENVxcXFx1QTFENlxcXFx1QTFEN1xcXFx1QTFEOFxcXFx1QTFEOVxcXFx1QTFEQVxcXFx1QTFEQlxcXFx1QTFEQ1xcXFx1QTFERFxcXFx1QTFERVxcXFx1QTFERlxcXFx1QTFFMFxcXFx1QTFFMVxcXFx1QTFFMlxcXFx1QTFFM1xcXFx1QTFFNFxcXFx1QTFFNVxcXFx1QTFFNlxcXFx1QTFFN1xcXFx1QTFFOFxcXFx1QTFFOVxcXFx1QTFFQVxcXFx1QTFFQlxcXFx1QTFFQ1xcXFx1QTFFRFxcXFx1QTFFRVxcXFx1QTFFRlxcXFx1QTFGMFxcXFx1QTFGMVxcXFx1QTFGMlxcXFx1QTFGM1xcXFx1QTFGNFxcXFx1QTFGNVxcXFx1QTFGNlxcXFx1QTFGN1xcXFx1QTFGOFxcXFx1QTFGOVxcXFx1QTFGQVxcXFx1QTFGQlxcXFx1QTFGQ1xcXFx1QTFGRFxcXFx1QTFGRVxcXFx1QTFGRlxcXFx1QTIwMFxcXFx1QTIwMVxcXFx1QTIwMlxcXFx1QTIwM1xcXFx1QTIwNFxcXFx1QTIwNVxcXFx1QTIwNlxcXFx1QTIwN1xcXFx1QTIwOFxcXFx1QTIwOVxcXFx1QTIwQVxcXFx1QTIwQlxcXFx1QTIwQ1xcXFx1QTIwRFxcXFx1QTIwRVxcXFx1QTIwRlxcXFx1QTIxMFxcXFx1QTIxMVxcXFx1QTIxMlxcXFx1QTIxM1xcXFx1QTIxNFxcXFx1QTIxNVxcXFx1QTIxNlxcXFx1QTIxN1xcXFx1QTIxOFxcXFx1QTIxOVxcXFx1QTIxQVxcXFx1QTIxQlxcXFx1QTIxQ1xcXFx1QTIxRFxcXFx1QTIxRVxcXFx1QTIxRlxcXFx1QTIyMFxcXFx1QTIyMVxcXFx1QTIyMlxcXFx1QTIyM1xcXFx1QTIyNFxcXFx1QTIyNVxcXFx1QTIyNlxcXFx1QTIyN1xcXFx1QTIyOFxcXFx1QTIyOVxcXFx1QTIyQVxcXFx1QTIyQlxcXFx1QTIyQ1xcXFx1QTIyRFxcXFx1QTIyRVxcXFx1QTIyRlxcXFx1QTIzMFxcXFx1QTIzMVxcXFx1QTIzMlxcXFx1QTIzM1xcXFx1QTIzNFxcXFx1QTIzNVxcXFx1QTIzNlxcXFx1QTIzN1xcXFx1QTIzOFxcXFx1QTIzOVxcXFx1QTIzQVxcXFx1QTIzQlxcXFx1QTIzQ1xcXFx1QTIzRFxcXFx1QTIzRVxcXFx1QTIzRlxcXFx1QTI0MFxcXFx1QTI0MVxcXFx1QTI0MlxcXFx1QTI0M1xcXFx1QTI0NFxcXFx1QTI0NVxcXFx1QTI0NlxcXFx1QTI0N1xcXFx1QTI0OFxcXFx1QTI0OVxcXFx1QTI0QVxcXFx1QTI0QlxcXFx1QTI0Q1xcXFx1QTI0RFxcXFx1QTI0RVxcXFx1QTI0RlxcXFx1QTI1MFxcXFx1QTI1MVxcXFx1QTI1MlxcXFx1QTI1M1xcXFx1QTI1NFxcXFx1QTI1NVxcXFx1QTI1NlxcXFx1QTI1N1xcXFx1QTI1OFxcXFx1QTI1OVxcXFx1QTI1QVxcXFx1QTI1QlxcXFx1QTI1Q1xcXFx1QTI1RFxcXFx1QTI1RVxcXFx1QTI1RlxcXFx1QTI2MFxcXFx1QTI2MVxcXFx1QTI2MlxcXFx1QTI2M1xcXFx1QTI2NFxcXFx1QTI2NVxcXFx1QTI2NlxcXFx1QTI2N1xcXFx1QTI2OFxcXFx1QTI2OVxcXFx1QTI2QVxcXFx1QTI2QlxcXFx1QTI2Q1xcXFx1QTI2RFxcXFx1QTI2RVxcXFx1QTI2RlxcXFx1QTI3MFxcXFx1QTI3MVxcXFx1QTI3MlxcXFx1QTI3M1xcXFx1QTI3NFxcXFx1QTI3NVxcXFx1QTI3NlxcXFx1QTI3N1xcXFx1QTI3OFxcXFx1QTI3OVxcXFx1QTI3QVxcXFx1QTI3QlxcXFx1QTI3Q1xcXFx1QTI3RFxcXFx1QTI3RVxcXFx1QTI3RlxcXFx1QTI4MFxcXFx1QTI4MVxcXFx1QTI4MlxcXFx1QTI4M1xcXFx1QTI4NFxcXFx1QTI4NVxcXFx1QTI4NlxcXFx1QTI4N1xcXFx1QTI4OFxcXFx1QTI4OVxcXFx1QTI4QVxcXFx1QTI4QlxcXFx1QTI4Q1xcXFx1QTI4RFxcXFx1QTI4RVxcXFx1QTI4RlxcXFx1QTI5MFxcXFx1QTI5MVxcXFx1QTI5MlxcXFx1QTI5M1xcXFx1QTI5NFxcXFx1QTI5NVxcXFx1QTI5NlxcXFx1QTI5N1xcXFx1QTI5OFxcXFx1QTI5OVxcXFx1QTI5QVxcXFx1QTI5QlxcXFx1QTI5Q1xcXFx1QTI5RFxcXFx1QTI5RVxcXFx1QTI5RlxcXFx1QTJBMFxcXFx1QTJBMVxcXFx1QTJBMlxcXFx1QTJBM1xcXFx1QTJBNFxcXFx1QTJBNVxcXFx1QTJBNlxcXFx1QTJBN1xcXFx1QTJBOFxcXFx1QTJBOVxcXFx1QTJBQVxcXFx1QTJBQlxcXFx1QTJBQ1xcXFx1QTJBRFxcXFx1QTJBRVxcXFx1QTJBRlxcXFx1QTJCMFxcXFx1QTJCMVxcXFx1QTJCMlxcXFx1QTJCM1xcXFx1QTJCNFxcXFx1QTJCNVxcXFx1QTJCNlxcXFx1QTJCN1xcXFx1QTJCOFxcXFx1QTJCOVxcXFx1QTJCQVxcXFx1QTJCQlxcXFx1QTJCQ1xcXFx1QTJCRFxcXFx1QTJCRVxcXFx1QTJCRlxcXFx1QTJDMFxcXFx1QTJDMVxcXFx1QTJDMlxcXFx1QTJDM1xcXFx1QTJDNFxcXFx1QTJDNVxcXFx1QTJDNlxcXFx1QTJDN1xcXFx1QTJDOFxcXFx1QTJDOVxcXFx1QTJDQVxcXFx1QTJDQlxcXFx1QTJDQ1xcXFx1QTJDRFxcXFx1QTJDRVxcXFx1QTJDRlxcXFx1QTJEMFxcXFx1QTJEMVxcXFx1QTJEMlxcXFx1QTJEM1xcXFx1QTJENFxcXFx1QTJENVxcXFx1QTJENlxcXFx1QTJEN1xcXFx1QTJEOFxcXFx1QTJEOVxcXFx1QTJEQVxcXFx1QTJEQlxcXFx1QTJEQ1xcXFx1QTJERFxcXFx1QTJERVxcXFx1QTJERlxcXFx1QTJFMFxcXFx1QTJFMVxcXFx1QTJFMlxcXFx1QTJFM1xcXFx1QTJFNFxcXFx1QTJFNVxcXFx1QTJFNlxcXFx1QTJFN1xcXFx1QTJFOFxcXFx1QTJFOVxcXFx1QTJFQVxcXFx1QTJFQlxcXFx1QTJFQ1xcXFx1QTJFRFxcXFx1QTJFRVxcXFx1QTJFRlxcXFx1QTJGMFxcXFx1QTJGMVxcXFx1QTJGMlxcXFx1QTJGM1xcXFx1QTJGNFxcXFx1QTJGNVxcXFx1QTJGNlxcXFx1QTJGN1xcXFx1QTJGOFxcXFx1QTJGOVxcXFx1QTJGQVxcXFx1QTJGQlxcXFx1QTJGQ1xcXFx1QTJGRFxcXFx1QTJGRVxcXFx1QTJGRlxcXFx1QTMwMFxcXFx1QTMwMVxcXFx1QTMwMlxcXFx1QTMwM1xcXFx1QTMwNFxcXFx1QTMwNVxcXFx1QTMwNlxcXFx1QTMwN1xcXFx1QTMwOFxcXFx1QTMwOVxcXFx1QTMwQVxcXFx1QTMwQlxcXFx1QTMwQ1xcXFx1QTMwRFxcXFx1QTMwRVxcXFx1QTMwRlxcXFx1QTMxMFxcXFx1QTMxMVxcXFx1QTMxMlxcXFx1QTMxM1xcXFx1QTMxNFxcXFx1QTMxNVxcXFx1QTMxNlxcXFx1QTMxN1xcXFx1QTMxOFxcXFx1QTMxOVxcXFx1QTMxQVxcXFx1QTMxQlxcXFx1QTMxQ1xcXFx1QTMxRFxcXFx1QTMxRVxcXFx1QTMxRlxcXFx1QTMyMFxcXFx1QTMyMVxcXFx1QTMyMlxcXFx1QTMyM1xcXFx1QTMyNFxcXFx1QTMyNVxcXFx1QTMyNlxcXFx1QTMyN1xcXFx1QTMyOFxcXFx1QTMyOVxcXFx1QTMyQVxcXFx1QTMyQlxcXFx1QTMyQ1xcXFx1QTMyRFxcXFx1QTMyRVxcXFx1QTMyRlxcXFx1QTMzMFxcXFx1QTMzMVxcXFx1QTMzMlxcXFx1QTMzM1xcXFx1QTMzNFxcXFx1QTMzNVxcXFx1QTMzNlxcXFx1QTMzN1xcXFx1QTMzOFxcXFx1QTMzOVxcXFx1QTMzQVxcXFx1QTMzQlxcXFx1QTMzQ1xcXFx1QTMzRFxcXFx1QTMzRVxcXFx1QTMzRlxcXFx1QTM0MFxcXFx1QTM0MVxcXFx1QTM0MlxcXFx1QTM0M1xcXFx1QTM0NFxcXFx1QTM0NVxcXFx1QTM0NlxcXFx1QTM0N1xcXFx1QTM0OFxcXFx1QTM0OVxcXFx1QTM0QVxcXFx1QTM0QlxcXFx1QTM0Q1xcXFx1QTM0RFxcXFx1QTM0RVxcXFx1QTM0RlxcXFx1QTM1MFxcXFx1QTM1MVxcXFx1QTM1MlxcXFx1QTM1M1xcXFx1QTM1NFxcXFx1QTM1NVxcXFx1QTM1NlxcXFx1QTM1N1xcXFx1QTM1OFxcXFx1QTM1OVxcXFx1QTM1QVxcXFx1QTM1QlxcXFx1QTM1Q1xcXFx1QTM1RFxcXFx1QTM1RVxcXFx1QTM1RlxcXFx1QTM2MFxcXFx1QTM2MVxcXFx1QTM2MlxcXFx1QTM2M1xcXFx1QTM2NFxcXFx1QTM2NVxcXFx1QTM2NlxcXFx1QTM2N1xcXFx1QTM2OFxcXFx1QTM2OVxcXFx1QTM2QVxcXFx1QTM2QlxcXFx1QTM2Q1xcXFx1QTM2RFxcXFx1QTM2RVxcXFx1QTM2RlxcXFx1QTM3MFxcXFx1QTM3MVxcXFx1QTM3MlxcXFx1QTM3M1xcXFx1QTM3NFxcXFx1QTM3NVxcXFx1QTM3NlxcXFx1QTM3N1xcXFx1QTM3OFxcXFx1QTM3OVxcXFx1QTM3QVxcXFx1QTM3QlxcXFx1QTM3Q1xcXFx1QTM3RFxcXFx1QTM3RVxcXFx1QTM3RlxcXFx1QTM4MFxcXFx1QTM4MVxcXFx1QTM4MlxcXFx1QTM4M1xcXFx1QTM4NFxcXFx1QTM4NVxcXFx1QTM4NlxcXFx1QTM4N1xcXFx1QTM4OFxcXFx1QTM4OVxcXFx1QTM4QVxcXFx1QTM4QlxcXFx1QTM4Q1xcXFx1QTM4RFxcXFx1QTM4RVxcXFx1QTM4RlxcXFx1QTM5MFxcXFx1QTM5MVxcXFx1QTM5MlxcXFx1QTM5M1xcXFx1QTM5NFxcXFx1QTM5NVxcXFx1QTM5NlxcXFx1QTM5N1xcXFx1QTM5OFxcXFx1QTM5OVxcXFx1QTM5QVxcXFx1QTM5QlxcXFx1QTM5Q1xcXFx1QTM5RFxcXFx1QTM5RVxcXFx1QTM5RlxcXFx1QTNBMFxcXFx1QTNBMVxcXFx1QTNBMlxcXFx1QTNBM1xcXFx1QTNBNFxcXFx1QTNBNVxcXFx1QTNBNlxcXFx1QTNBN1xcXFx1QTNBOFxcXFx1QTNBOVxcXFx1QTNBQVxcXFx1QTNBQlxcXFx1QTNBQ1xcXFx1QTNBRFxcXFx1QTNBRVxcXFx1QTNBRlxcXFx1QTNCMFxcXFx1QTNCMVxcXFx1QTNCMlxcXFx1QTNCM1xcXFx1QTNCNFxcXFx1QTNCNVxcXFx1QTNCNlxcXFx1QTNCN1xcXFx1QTNCOFxcXFx1QTNCOVxcXFx1QTNCQVxcXFx1QTNCQlxcXFx1QTNCQ1xcXFx1QTNCRFxcXFx1QTNCRVxcXFx1QTNCRlxcXFx1QTNDMFxcXFx1QTNDMVxcXFx1QTNDMlxcXFx1QTNDM1xcXFx1QTNDNFxcXFx1QTNDNVxcXFx1QTNDNlxcXFx1QTNDN1xcXFx1QTNDOFxcXFx1QTNDOVxcXFx1QTNDQVxcXFx1QTNDQlxcXFx1QTNDQ1xcXFx1QTNDRFxcXFx1QTNDRVxcXFx1QTNDRlxcXFx1QTNEMFxcXFx1QTNEMVxcXFx1QTNEMlxcXFx1QTNEM1xcXFx1QTNENFxcXFx1QTNENVxcXFx1QTNENlxcXFx1QTNEN1xcXFx1QTNEOFxcXFx1QTNEOVxcXFx1QTNEQVxcXFx1QTNEQlxcXFx1QTNEQ1xcXFx1QTNERFxcXFx1QTNERVxcXFx1QTNERlxcXFx1QTNFMFxcXFx1QTNFMVxcXFx1QTNFMlxcXFx1QTNFM1xcXFx1QTNFNFxcXFx1QTNFNVxcXFx1QTNFNlxcXFx1QTNFN1xcXFx1QTNFOFxcXFx1QTNFOVxcXFx1QTNFQVxcXFx1QTNFQlxcXFx1QTNFQ1xcXFx1QTNFRFxcXFx1QTNFRVxcXFx1QTNFRlxcXFx1QTNGMFxcXFx1QTNGMVxcXFx1QTNGMlxcXFx1QTNGM1xcXFx1QTNGNFxcXFx1QTNGNVxcXFx1QTNGNlxcXFx1QTNGN1xcXFx1QTNGOFxcXFx1QTNGOVxcXFx1QTNGQVxcXFx1QTNGQlxcXFx1QTNGQ1xcXFx1QTNGRFxcXFx1QTNGRVxcXFx1QTNGRlxcXFx1QTQwMFxcXFx1QTQwMVxcXFx1QTQwMlxcXFx1QTQwM1xcXFx1QTQwNFxcXFx1QTQwNVxcXFx1QTQwNlxcXFx1QTQwN1xcXFx1QTQwOFxcXFx1QTQwOVxcXFx1QTQwQVxcXFx1QTQwQlxcXFx1QTQwQ1xcXFx1QTQwRFxcXFx1QTQwRVxcXFx1QTQwRlxcXFx1QTQxMFxcXFx1QTQxMVxcXFx1QTQxMlxcXFx1QTQxM1xcXFx1QTQxNFxcXFx1QTQxNVxcXFx1QTQxNlxcXFx1QTQxN1xcXFx1QTQxOFxcXFx1QTQxOVxcXFx1QTQxQVxcXFx1QTQxQlxcXFx1QTQxQ1xcXFx1QTQxRFxcXFx1QTQxRVxcXFx1QTQxRlxcXFx1QTQyMFxcXFx1QTQyMVxcXFx1QTQyMlxcXFx1QTQyM1xcXFx1QTQyNFxcXFx1QTQyNVxcXFx1QTQyNlxcXFx1QTQyN1xcXFx1QTQyOFxcXFx1QTQyOVxcXFx1QTQyQVxcXFx1QTQyQlxcXFx1QTQyQ1xcXFx1QTQyRFxcXFx1QTQyRVxcXFx1QTQyRlxcXFx1QTQzMFxcXFx1QTQzMVxcXFx1QTQzMlxcXFx1QTQzM1xcXFx1QTQzNFxcXFx1QTQzNVxcXFx1QTQzNlxcXFx1QTQzN1xcXFx1QTQzOFxcXFx1QTQzOVxcXFx1QTQzQVxcXFx1QTQzQlxcXFx1QTQzQ1xcXFx1QTQzRFxcXFx1QTQzRVxcXFx1QTQzRlxcXFx1QTQ0MFxcXFx1QTQ0MVxcXFx1QTQ0MlxcXFx1QTQ0M1xcXFx1QTQ0NFxcXFx1QTQ0NVxcXFx1QTQ0NlxcXFx1QTQ0N1xcXFx1QTQ0OFxcXFx1QTQ0OVxcXFx1QTQ0QVxcXFx1QTQ0QlxcXFx1QTQ0Q1xcXFx1QTQ0RFxcXFx1QTQ0RVxcXFx1QTQ0RlxcXFx1QTQ1MFxcXFx1QTQ1MVxcXFx1QTQ1MlxcXFx1QTQ1M1xcXFx1QTQ1NFxcXFx1QTQ1NVxcXFx1QTQ1NlxcXFx1QTQ1N1xcXFx1QTQ1OFxcXFx1QTQ1OVxcXFx1QTQ1QVxcXFx1QTQ1QlxcXFx1QTQ1Q1xcXFx1QTQ1RFxcXFx1QTQ1RVxcXFx1QTQ1RlxcXFx1QTQ2MFxcXFx1QTQ2MVxcXFx1QTQ2MlxcXFx1QTQ2M1xcXFx1QTQ2NFxcXFx1QTQ2NVxcXFx1QTQ2NlxcXFx1QTQ2N1xcXFx1QTQ2OFxcXFx1QTQ2OVxcXFx1QTQ2QVxcXFx1QTQ2QlxcXFx1QTQ2Q1xcXFx1QTQ2RFxcXFx1QTQ2RVxcXFx1QTQ2RlxcXFx1QTQ3MFxcXFx1QTQ3MVxcXFx1QTQ3MlxcXFx1QTQ3M1xcXFx1QTQ3NFxcXFx1QTQ3NVxcXFx1QTQ3NlxcXFx1QTQ3N1xcXFx1QTQ3OFxcXFx1QTQ3OVxcXFx1QTQ3QVxcXFx1QTQ3QlxcXFx1QTQ3Q1xcXFx1QTQ3RFxcXFx1QTQ3RVxcXFx1QTQ3RlxcXFx1QTQ4MFxcXFx1QTQ4MVxcXFx1QTQ4MlxcXFx1QTQ4M1xcXFx1QTQ4NFxcXFx1QTQ4NVxcXFx1QTQ4NlxcXFx1QTQ4N1xcXFx1QTQ4OFxcXFx1QTQ4OVxcXFx1QTQ4QVxcXFx1QTQ4QlxcXFx1QTQ4Q1xcXFx1QTUwMFxcXFx1QTUwMVxcXFx1QTUwMlxcXFx1QTUwM1xcXFx1QTUwNFxcXFx1QTUwNVxcXFx1QTUwNlxcXFx1QTUwN1xcXFx1QTUwOFxcXFx1QTUwOVxcXFx1QTUwQVxcXFx1QTUwQlxcXFx1QTUwQ1xcXFx1QTUwRFxcXFx1QTUwRVxcXFx1QTUwRlxcXFx1QTUxMFxcXFx1QTUxMVxcXFx1QTUxMlxcXFx1QTUxM1xcXFx1QTUxNFxcXFx1QTUxNVxcXFx1QTUxNlxcXFx1QTUxN1xcXFx1QTUxOFxcXFx1QTUxOVxcXFx1QTUxQVxcXFx1QTUxQlxcXFx1QTUxQ1xcXFx1QTUxRFxcXFx1QTUxRVxcXFx1QTUxRlxcXFx1QTUyMFxcXFx1QTUyMVxcXFx1QTUyMlxcXFx1QTUyM1xcXFx1QTUyNFxcXFx1QTUyNVxcXFx1QTUyNlxcXFx1QTUyN1xcXFx1QTUyOFxcXFx1QTUyOVxcXFx1QTUyQVxcXFx1QTUyQlxcXFx1QTUyQ1xcXFx1QTUyRFxcXFx1QTUyRVxcXFx1QTUyRlxcXFx1QTUzMFxcXFx1QTUzMVxcXFx1QTUzMlxcXFx1QTUzM1xcXFx1QTUzNFxcXFx1QTUzNVxcXFx1QTUzNlxcXFx1QTUzN1xcXFx1QTUzOFxcXFx1QTUzOVxcXFx1QTUzQVxcXFx1QTUzQlxcXFx1QTUzQ1xcXFx1QTUzRFxcXFx1QTUzRVxcXFx1QTUzRlxcXFx1QTU0MFxcXFx1QTU0MVxcXFx1QTU0MlxcXFx1QTU0M1xcXFx1QTU0NFxcXFx1QTU0NVxcXFx1QTU0NlxcXFx1QTU0N1xcXFx1QTU0OFxcXFx1QTU0OVxcXFx1QTU0QVxcXFx1QTU0QlxcXFx1QTU0Q1xcXFx1QTU0RFxcXFx1QTU0RVxcXFx1QTU0RlxcXFx1QTU1MFxcXFx1QTU1MVxcXFx1QTU1MlxcXFx1QTU1M1xcXFx1QTU1NFxcXFx1QTU1NVxcXFx1QTU1NlxcXFx1QTU1N1xcXFx1QTU1OFxcXFx1QTU1OVxcXFx1QTU1QVxcXFx1QTU1QlxcXFx1QTU1Q1xcXFx1QTU1RFxcXFx1QTU1RVxcXFx1QTU1RlxcXFx1QTU2MFxcXFx1QTU2MVxcXFx1QTU2MlxcXFx1QTU2M1xcXFx1QTU2NFxcXFx1QTU2NVxcXFx1QTU2NlxcXFx1QTU2N1xcXFx1QTU2OFxcXFx1QTU2OVxcXFx1QTU2QVxcXFx1QTU2QlxcXFx1QTU2Q1xcXFx1QTU2RFxcXFx1QTU2RVxcXFx1QTU2RlxcXFx1QTU3MFxcXFx1QTU3MVxcXFx1QTU3MlxcXFx1QTU3M1xcXFx1QTU3NFxcXFx1QTU3NVxcXFx1QTU3NlxcXFx1QTU3N1xcXFx1QTU3OFxcXFx1QTU3OVxcXFx1QTU3QVxcXFx1QTU3QlxcXFx1QTU3Q1xcXFx1QTU3RFxcXFx1QTU3RVxcXFx1QTU3RlxcXFx1QTU4MFxcXFx1QTU4MVxcXFx1QTU4MlxcXFx1QTU4M1xcXFx1QTU4NFxcXFx1QTU4NVxcXFx1QTU4NlxcXFx1QTU4N1xcXFx1QTU4OFxcXFx1QTU4OVxcXFx1QTU4QVxcXFx1QTU4QlxcXFx1QTU4Q1xcXFx1QTU4RFxcXFx1QTU4RVxcXFx1QTU4RlxcXFx1QTU5MFxcXFx1QTU5MVxcXFx1QTU5MlxcXFx1QTU5M1xcXFx1QTU5NFxcXFx1QTU5NVxcXFx1QTU5NlxcXFx1QTU5N1xcXFx1QTU5OFxcXFx1QTU5OVxcXFx1QTU5QVxcXFx1QTU5QlxcXFx1QTU5Q1xcXFx1QTU5RFxcXFx1QTU5RVxcXFx1QTU5RlxcXFx1QTVBMFxcXFx1QTVBMVxcXFx1QTVBMlxcXFx1QTVBM1xcXFx1QTVBNFxcXFx1QTVBNVxcXFx1QTVBNlxcXFx1QTVBN1xcXFx1QTVBOFxcXFx1QTVBOVxcXFx1QTVBQVxcXFx1QTVBQlxcXFx1QTVBQ1xcXFx1QTVBRFxcXFx1QTVBRVxcXFx1QTVBRlxcXFx1QTVCMFxcXFx1QTVCMVxcXFx1QTVCMlxcXFx1QTVCM1xcXFx1QTVCNFxcXFx1QTVCNVxcXFx1QTVCNlxcXFx1QTVCN1xcXFx1QTVCOFxcXFx1QTVCOVxcXFx1QTVCQVxcXFx1QTVCQlxcXFx1QTVCQ1xcXFx1QTVCRFxcXFx1QTVCRVxcXFx1QTVCRlxcXFx1QTVDMFxcXFx1QTVDMVxcXFx1QTVDMlxcXFx1QTVDM1xcXFx1QTVDNFxcXFx1QTVDNVxcXFx1QTVDNlxcXFx1QTVDN1xcXFx1QTVDOFxcXFx1QTVDOVxcXFx1QTVDQVxcXFx1QTVDQlxcXFx1QTVDQ1xcXFx1QTVDRFxcXFx1QTVDRVxcXFx1QTVDRlxcXFx1QTVEMFxcXFx1QTVEMVxcXFx1QTVEMlxcXFx1QTVEM1xcXFx1QTVENFxcXFx1QTVENVxcXFx1QTVENlxcXFx1QTVEN1xcXFx1QTVEOFxcXFx1QTVEOVxcXFx1QTVEQVxcXFx1QTVEQlxcXFx1QTVEQ1xcXFx1QTVERFxcXFx1QTVERVxcXFx1QTVERlxcXFx1QTVFMFxcXFx1QTVFMVxcXFx1QTVFMlxcXFx1QTVFM1xcXFx1QTVFNFxcXFx1QTVFNVxcXFx1QTVFNlxcXFx1QTVFN1xcXFx1QTVFOFxcXFx1QTVFOVxcXFx1QTVFQVxcXFx1QTVFQlxcXFx1QTVFQ1xcXFx1QTVFRFxcXFx1QTVFRVxcXFx1QTVFRlxcXFx1QTVGMFxcXFx1QTVGMVxcXFx1QTVGMlxcXFx1QTVGM1xcXFx1QTVGNFxcXFx1QTVGNVxcXFx1QTVGNlxcXFx1QTVGN1xcXFx1QTVGOFxcXFx1QTVGOVxcXFx1QTVGQVxcXFx1QTVGQlxcXFx1QTVGQ1xcXFx1QTVGRFxcXFx1QTVGRVxcXFx1QTVGRlxcXFx1QTYwMFxcXFx1QTYwMVxcXFx1QTYwMlxcXFx1QTYwM1xcXFx1QTYwNFxcXFx1QTYwNVxcXFx1QTYwNlxcXFx1QTYwN1xcXFx1QTYwOFxcXFx1QTYwOVxcXFx1QTYwQVxcXFx1QTYwQlxcXFx1QTYxMFxcXFx1QTYxMVxcXFx1QTYxMlxcXFx1QTYxM1xcXFx1QTYxNFxcXFx1QTYxNVxcXFx1QTYxNlxcXFx1QTYxN1xcXFx1QTYxOFxcXFx1QTYxOVxcXFx1QTYxQVxcXFx1QTYxQlxcXFx1QTYxQ1xcXFx1QTYxRFxcXFx1QTYxRVxcXFx1QTYxRlxcXFx1QTYyQVxcXFx1QTYyQlxcXFx1QTY2RVxcXFx1QTdGQlxcXFx1QTdGQ1xcXFx1QTdGRFxcXFx1QTdGRVxcXFx1QTdGRlxcXFx1QTgwMFxcXFx1QTgwMVxcXFx1QTgwM1xcXFx1QTgwNFxcXFx1QTgwNVxcXFx1QTgwN1xcXFx1QTgwOFxcXFx1QTgwOVxcXFx1QTgwQVxcXFx1QTgwQ1xcXFx1QTgwRFxcXFx1QTgwRVxcXFx1QTgwRlxcXFx1QTgxMFxcXFx1QTgxMVxcXFx1QTgxMlxcXFx1QTgxM1xcXFx1QTgxNFxcXFx1QTgxNVxcXFx1QTgxNlxcXFx1QTgxN1xcXFx1QTgxOFxcXFx1QTgxOVxcXFx1QTgxQVxcXFx1QTgxQlxcXFx1QTgxQ1xcXFx1QTgxRFxcXFx1QTgxRVxcXFx1QTgxRlxcXFx1QTgyMFxcXFx1QTgyMVxcXFx1QTgyMlxcXFx1QTg0MFxcXFx1QTg0MVxcXFx1QTg0MlxcXFx1QTg0M1xcXFx1QTg0NFxcXFx1QTg0NVxcXFx1QTg0NlxcXFx1QTg0N1xcXFx1QTg0OFxcXFx1QTg0OVxcXFx1QTg0QVxcXFx1QTg0QlxcXFx1QTg0Q1xcXFx1QTg0RFxcXFx1QTg0RVxcXFx1QTg0RlxcXFx1QTg1MFxcXFx1QTg1MVxcXFx1QTg1MlxcXFx1QTg1M1xcXFx1QTg1NFxcXFx1QTg1NVxcXFx1QTg1NlxcXFx1QTg1N1xcXFx1QTg1OFxcXFx1QTg1OVxcXFx1QTg1QVxcXFx1QTg1QlxcXFx1QTg1Q1xcXFx1QTg1RFxcXFx1QTg1RVxcXFx1QTg1RlxcXFx1QTg2MFxcXFx1QTg2MVxcXFx1QTg2MlxcXFx1QTg2M1xcXFx1QTg2NFxcXFx1QTg2NVxcXFx1QTg2NlxcXFx1QTg2N1xcXFx1QTg2OFxcXFx1QTg2OVxcXFx1QTg2QVxcXFx1QTg2QlxcXFx1QTg2Q1xcXFx1QTg2RFxcXFx1QTg2RVxcXFx1QTg2RlxcXFx1QTg3MFxcXFx1QTg3MVxcXFx1QTg3MlxcXFx1QTg3M1xcXFx1QTg4MlxcXFx1QTg4M1xcXFx1QTg4NFxcXFx1QTg4NVxcXFx1QTg4NlxcXFx1QTg4N1xcXFx1QTg4OFxcXFx1QTg4OVxcXFx1QTg4QVxcXFx1QTg4QlxcXFx1QTg4Q1xcXFx1QTg4RFxcXFx1QTg4RVxcXFx1QTg4RlxcXFx1QTg5MFxcXFx1QTg5MVxcXFx1QTg5MlxcXFx1QTg5M1xcXFx1QTg5NFxcXFx1QTg5NVxcXFx1QTg5NlxcXFx1QTg5N1xcXFx1QTg5OFxcXFx1QTg5OVxcXFx1QTg5QVxcXFx1QTg5QlxcXFx1QTg5Q1xcXFx1QTg5RFxcXFx1QTg5RVxcXFx1QTg5RlxcXFx1QThBMFxcXFx1QThBMVxcXFx1QThBMlxcXFx1QThBM1xcXFx1QThBNFxcXFx1QThBNVxcXFx1QThBNlxcXFx1QThBN1xcXFx1QThBOFxcXFx1QThBOVxcXFx1QThBQVxcXFx1QThBQlxcXFx1QThBQ1xcXFx1QThBRFxcXFx1QThBRVxcXFx1QThBRlxcXFx1QThCMFxcXFx1QThCMVxcXFx1QThCMlxcXFx1QThCM1xcXFx1QTkwQVxcXFx1QTkwQlxcXFx1QTkwQ1xcXFx1QTkwRFxcXFx1QTkwRVxcXFx1QTkwRlxcXFx1QTkxMFxcXFx1QTkxMVxcXFx1QTkxMlxcXFx1QTkxM1xcXFx1QTkxNFxcXFx1QTkxNVxcXFx1QTkxNlxcXFx1QTkxN1xcXFx1QTkxOFxcXFx1QTkxOVxcXFx1QTkxQVxcXFx1QTkxQlxcXFx1QTkxQ1xcXFx1QTkxRFxcXFx1QTkxRVxcXFx1QTkxRlxcXFx1QTkyMFxcXFx1QTkyMVxcXFx1QTkyMlxcXFx1QTkyM1xcXFx1QTkyNFxcXFx1QTkyNVxcXFx1QTkzMFxcXFx1QTkzMVxcXFx1QTkzMlxcXFx1QTkzM1xcXFx1QTkzNFxcXFx1QTkzNVxcXFx1QTkzNlxcXFx1QTkzN1xcXFx1QTkzOFxcXFx1QTkzOVxcXFx1QTkzQVxcXFx1QTkzQlxcXFx1QTkzQ1xcXFx1QTkzRFxcXFx1QTkzRVxcXFx1QTkzRlxcXFx1QTk0MFxcXFx1QTk0MVxcXFx1QTk0MlxcXFx1QTk0M1xcXFx1QTk0NFxcXFx1QTk0NVxcXFx1QTk0NlxcXFx1QUEwMFxcXFx1QUEwMVxcXFx1QUEwMlxcXFx1QUEwM1xcXFx1QUEwNFxcXFx1QUEwNVxcXFx1QUEwNlxcXFx1QUEwN1xcXFx1QUEwOFxcXFx1QUEwOVxcXFx1QUEwQVxcXFx1QUEwQlxcXFx1QUEwQ1xcXFx1QUEwRFxcXFx1QUEwRVxcXFx1QUEwRlxcXFx1QUExMFxcXFx1QUExMVxcXFx1QUExMlxcXFx1QUExM1xcXFx1QUExNFxcXFx1QUExNVxcXFx1QUExNlxcXFx1QUExN1xcXFx1QUExOFxcXFx1QUExOVxcXFx1QUExQVxcXFx1QUExQlxcXFx1QUExQ1xcXFx1QUExRFxcXFx1QUExRVxcXFx1QUExRlxcXFx1QUEyMFxcXFx1QUEyMVxcXFx1QUEyMlxcXFx1QUEyM1xcXFx1QUEyNFxcXFx1QUEyNVxcXFx1QUEyNlxcXFx1QUEyN1xcXFx1QUEyOFxcXFx1QUE0MFxcXFx1QUE0MVxcXFx1QUE0MlxcXFx1QUE0NFxcXFx1QUE0NVxcXFx1QUE0NlxcXFx1QUE0N1xcXFx1QUE0OFxcXFx1QUE0OVxcXFx1QUE0QVxcXFx1QUE0QlxcXFx1QUMwMFxcXFx1RDdBM1xcXFx1RjkwMFxcXFx1RjkwMVxcXFx1RjkwMlxcXFx1RjkwM1xcXFx1RjkwNFxcXFx1RjkwNVxcXFx1RjkwNlxcXFx1RjkwN1xcXFx1RjkwOFxcXFx1RjkwOVxcXFx1RjkwQVxcXFx1RjkwQlxcXFx1RjkwQ1xcXFx1RjkwRFxcXFx1RjkwRVxcXFx1RjkwRlxcXFx1RjkxMFxcXFx1RjkxMVxcXFx1RjkxMlxcXFx1RjkxM1xcXFx1RjkxNFxcXFx1RjkxNVxcXFx1RjkxNlxcXFx1RjkxN1xcXFx1RjkxOFxcXFx1RjkxOVxcXFx1RjkxQVxcXFx1RjkxQlxcXFx1RjkxQ1xcXFx1RjkxRFxcXFx1RjkxRVxcXFx1RjkxRlxcXFx1RjkyMFxcXFx1RjkyMVxcXFx1RjkyMlxcXFx1RjkyM1xcXFx1RjkyNFxcXFx1RjkyNVxcXFx1RjkyNlxcXFx1RjkyN1xcXFx1RjkyOFxcXFx1RjkyOVxcXFx1RjkyQVxcXFx1RjkyQlxcXFx1RjkyQ1xcXFx1RjkyRFxcXFx1RjkyRVxcXFx1RjkyRlxcXFx1RjkzMFxcXFx1RjkzMVxcXFx1RjkzMlxcXFx1RjkzM1xcXFx1RjkzNFxcXFx1RjkzNVxcXFx1RjkzNlxcXFx1RjkzN1xcXFx1RjkzOFxcXFx1RjkzOVxcXFx1RjkzQVxcXFx1RjkzQlxcXFx1RjkzQ1xcXFx1RjkzRFxcXFx1RjkzRVxcXFx1RjkzRlxcXFx1Rjk0MFxcXFx1Rjk0MVxcXFx1Rjk0MlxcXFx1Rjk0M1xcXFx1Rjk0NFxcXFx1Rjk0NVxcXFx1Rjk0NlxcXFx1Rjk0N1xcXFx1Rjk0OFxcXFx1Rjk0OVxcXFx1Rjk0QVxcXFx1Rjk0QlxcXFx1Rjk0Q1xcXFx1Rjk0RFxcXFx1Rjk0RVxcXFx1Rjk0RlxcXFx1Rjk1MFxcXFx1Rjk1MVxcXFx1Rjk1MlxcXFx1Rjk1M1xcXFx1Rjk1NFxcXFx1Rjk1NVxcXFx1Rjk1NlxcXFx1Rjk1N1xcXFx1Rjk1OFxcXFx1Rjk1OVxcXFx1Rjk1QVxcXFx1Rjk1QlxcXFx1Rjk1Q1xcXFx1Rjk1RFxcXFx1Rjk1RVxcXFx1Rjk1RlxcXFx1Rjk2MFxcXFx1Rjk2MVxcXFx1Rjk2MlxcXFx1Rjk2M1xcXFx1Rjk2NFxcXFx1Rjk2NVxcXFx1Rjk2NlxcXFx1Rjk2N1xcXFx1Rjk2OFxcXFx1Rjk2OVxcXFx1Rjk2QVxcXFx1Rjk2QlxcXFx1Rjk2Q1xcXFx1Rjk2RFxcXFx1Rjk2RVxcXFx1Rjk2RlxcXFx1Rjk3MFxcXFx1Rjk3MVxcXFx1Rjk3MlxcXFx1Rjk3M1xcXFx1Rjk3NFxcXFx1Rjk3NVxcXFx1Rjk3NlxcXFx1Rjk3N1xcXFx1Rjk3OFxcXFx1Rjk3OVxcXFx1Rjk3QVxcXFx1Rjk3QlxcXFx1Rjk3Q1xcXFx1Rjk3RFxcXFx1Rjk3RVxcXFx1Rjk3RlxcXFx1Rjk4MFxcXFx1Rjk4MVxcXFx1Rjk4MlxcXFx1Rjk4M1xcXFx1Rjk4NFxcXFx1Rjk4NVxcXFx1Rjk4NlxcXFx1Rjk4N1xcXFx1Rjk4OFxcXFx1Rjk4OVxcXFx1Rjk4QVxcXFx1Rjk4QlxcXFx1Rjk4Q1xcXFx1Rjk4RFxcXFx1Rjk4RVxcXFx1Rjk4RlxcXFx1Rjk5MFxcXFx1Rjk5MVxcXFx1Rjk5MlxcXFx1Rjk5M1xcXFx1Rjk5NFxcXFx1Rjk5NVxcXFx1Rjk5NlxcXFx1Rjk5N1xcXFx1Rjk5OFxcXFx1Rjk5OVxcXFx1Rjk5QVxcXFx1Rjk5QlxcXFx1Rjk5Q1xcXFx1Rjk5RFxcXFx1Rjk5RVxcXFx1Rjk5RlxcXFx1RjlBMFxcXFx1RjlBMVxcXFx1RjlBMlxcXFx1RjlBM1xcXFx1RjlBNFxcXFx1RjlBNVxcXFx1RjlBNlxcXFx1RjlBN1xcXFx1RjlBOFxcXFx1RjlBOVxcXFx1RjlBQVxcXFx1RjlBQlxcXFx1RjlBQ1xcXFx1RjlBRFxcXFx1RjlBRVxcXFx1RjlBRlxcXFx1RjlCMFxcXFx1RjlCMVxcXFx1RjlCMlxcXFx1RjlCM1xcXFx1RjlCNFxcXFx1RjlCNVxcXFx1RjlCNlxcXFx1RjlCN1xcXFx1RjlCOFxcXFx1RjlCOVxcXFx1RjlCQVxcXFx1RjlCQlxcXFx1RjlCQ1xcXFx1RjlCRFxcXFx1RjlCRVxcXFx1RjlCRlxcXFx1RjlDMFxcXFx1RjlDMVxcXFx1RjlDMlxcXFx1RjlDM1xcXFx1RjlDNFxcXFx1RjlDNVxcXFx1RjlDNlxcXFx1RjlDN1xcXFx1RjlDOFxcXFx1RjlDOVxcXFx1RjlDQVxcXFx1RjlDQlxcXFx1RjlDQ1xcXFx1RjlDRFxcXFx1RjlDRVxcXFx1RjlDRlxcXFx1RjlEMFxcXFx1RjlEMVxcXFx1RjlEMlxcXFx1RjlEM1xcXFx1RjlENFxcXFx1RjlENVxcXFx1RjlENlxcXFx1RjlEN1xcXFx1RjlEOFxcXFx1RjlEOVxcXFx1RjlEQVxcXFx1RjlEQlxcXFx1RjlEQ1xcXFx1RjlERFxcXFx1RjlERVxcXFx1RjlERlxcXFx1RjlFMFxcXFx1RjlFMVxcXFx1RjlFMlxcXFx1RjlFM1xcXFx1RjlFNFxcXFx1RjlFNVxcXFx1RjlFNlxcXFx1RjlFN1xcXFx1RjlFOFxcXFx1RjlFOVxcXFx1RjlFQVxcXFx1RjlFQlxcXFx1RjlFQ1xcXFx1RjlFRFxcXFx1RjlFRVxcXFx1RjlFRlxcXFx1RjlGMFxcXFx1RjlGMVxcXFx1RjlGMlxcXFx1RjlGM1xcXFx1RjlGNFxcXFx1RjlGNVxcXFx1RjlGNlxcXFx1RjlGN1xcXFx1RjlGOFxcXFx1RjlGOVxcXFx1RjlGQVxcXFx1RjlGQlxcXFx1RjlGQ1xcXFx1RjlGRFxcXFx1RjlGRVxcXFx1RjlGRlxcXFx1RkEwMFxcXFx1RkEwMVxcXFx1RkEwMlxcXFx1RkEwM1xcXFx1RkEwNFxcXFx1RkEwNVxcXFx1RkEwNlxcXFx1RkEwN1xcXFx1RkEwOFxcXFx1RkEwOVxcXFx1RkEwQVxcXFx1RkEwQlxcXFx1RkEwQ1xcXFx1RkEwRFxcXFx1RkEwRVxcXFx1RkEwRlxcXFx1RkExMFxcXFx1RkExMVxcXFx1RkExMlxcXFx1RkExM1xcXFx1RkExNFxcXFx1RkExNVxcXFx1RkExNlxcXFx1RkExN1xcXFx1RkExOFxcXFx1RkExOVxcXFx1RkExQVxcXFx1RkExQlxcXFx1RkExQ1xcXFx1RkExRFxcXFx1RkExRVxcXFx1RkExRlxcXFx1RkEyMFxcXFx1RkEyMVxcXFx1RkEyMlxcXFx1RkEyM1xcXFx1RkEyNFxcXFx1RkEyNVxcXFx1RkEyNlxcXFx1RkEyN1xcXFx1RkEyOFxcXFx1RkEyOVxcXFx1RkEyQVxcXFx1RkEyQlxcXFx1RkEyQ1xcXFx1RkEyRFxcXFx1RkEzMFxcXFx1RkEzMVxcXFx1RkEzMlxcXFx1RkEzM1xcXFx1RkEzNFxcXFx1RkEzNVxcXFx1RkEzNlxcXFx1RkEzN1xcXFx1RkEzOFxcXFx1RkEzOVxcXFx1RkEzQVxcXFx1RkEzQlxcXFx1RkEzQ1xcXFx1RkEzRFxcXFx1RkEzRVxcXFx1RkEzRlxcXFx1RkE0MFxcXFx1RkE0MVxcXFx1RkE0MlxcXFx1RkE0M1xcXFx1RkE0NFxcXFx1RkE0NVxcXFx1RkE0NlxcXFx1RkE0N1xcXFx1RkE0OFxcXFx1RkE0OVxcXFx1RkE0QVxcXFx1RkE0QlxcXFx1RkE0Q1xcXFx1RkE0RFxcXFx1RkE0RVxcXFx1RkE0RlxcXFx1RkE1MFxcXFx1RkE1MVxcXFx1RkE1MlxcXFx1RkE1M1xcXFx1RkE1NFxcXFx1RkE1NVxcXFx1RkE1NlxcXFx1RkE1N1xcXFx1RkE1OFxcXFx1RkE1OVxcXFx1RkE1QVxcXFx1RkE1QlxcXFx1RkE1Q1xcXFx1RkE1RFxcXFx1RkE1RVxcXFx1RkE1RlxcXFx1RkE2MFxcXFx1RkE2MVxcXFx1RkE2MlxcXFx1RkE2M1xcXFx1RkE2NFxcXFx1RkE2NVxcXFx1RkE2NlxcXFx1RkE2N1xcXFx1RkE2OFxcXFx1RkE2OVxcXFx1RkE2QVxcXFx1RkE3MFxcXFx1RkE3MVxcXFx1RkE3MlxcXFx1RkE3M1xcXFx1RkE3NFxcXFx1RkE3NVxcXFx1RkE3NlxcXFx1RkE3N1xcXFx1RkE3OFxcXFx1RkE3OVxcXFx1RkE3QVxcXFx1RkE3QlxcXFx1RkE3Q1xcXFx1RkE3RFxcXFx1RkE3RVxcXFx1RkE3RlxcXFx1RkE4MFxcXFx1RkE4MVxcXFx1RkE4MlxcXFx1RkE4M1xcXFx1RkE4NFxcXFx1RkE4NVxcXFx1RkE4NlxcXFx1RkE4N1xcXFx1RkE4OFxcXFx1RkE4OVxcXFx1RkE4QVxcXFx1RkE4QlxcXFx1RkE4Q1xcXFx1RkE4RFxcXFx1RkE4RVxcXFx1RkE4RlxcXFx1RkE5MFxcXFx1RkE5MVxcXFx1RkE5MlxcXFx1RkE5M1xcXFx1RkE5NFxcXFx1RkE5NVxcXFx1RkE5NlxcXFx1RkE5N1xcXFx1RkE5OFxcXFx1RkE5OVxcXFx1RkE5QVxcXFx1RkE5QlxcXFx1RkE5Q1xcXFx1RkE5RFxcXFx1RkE5RVxcXFx1RkE5RlxcXFx1RkFBMFxcXFx1RkFBMVxcXFx1RkFBMlxcXFx1RkFBM1xcXFx1RkFBNFxcXFx1RkFBNVxcXFx1RkFBNlxcXFx1RkFBN1xcXFx1RkFBOFxcXFx1RkFBOVxcXFx1RkFBQVxcXFx1RkFBQlxcXFx1RkFBQ1xcXFx1RkFBRFxcXFx1RkFBRVxcXFx1RkFBRlxcXFx1RkFCMFxcXFx1RkFCMVxcXFx1RkFCMlxcXFx1RkFCM1xcXFx1RkFCNFxcXFx1RkFCNVxcXFx1RkFCNlxcXFx1RkFCN1xcXFx1RkFCOFxcXFx1RkFCOVxcXFx1RkFCQVxcXFx1RkFCQlxcXFx1RkFCQ1xcXFx1RkFCRFxcXFx1RkFCRVxcXFx1RkFCRlxcXFx1RkFDMFxcXFx1RkFDMVxcXFx1RkFDMlxcXFx1RkFDM1xcXFx1RkFDNFxcXFx1RkFDNVxcXFx1RkFDNlxcXFx1RkFDN1xcXFx1RkFDOFxcXFx1RkFDOVxcXFx1RkFDQVxcXFx1RkFDQlxcXFx1RkFDQ1xcXFx1RkFDRFxcXFx1RkFDRVxcXFx1RkFDRlxcXFx1RkFEMFxcXFx1RkFEMVxcXFx1RkFEMlxcXFx1RkFEM1xcXFx1RkFENFxcXFx1RkFENVxcXFx1RkFENlxcXFx1RkFEN1xcXFx1RkFEOFxcXFx1RkFEOVxcXFx1RkIxRFxcXFx1RkIxRlxcXFx1RkIyMFxcXFx1RkIyMVxcXFx1RkIyMlxcXFx1RkIyM1xcXFx1RkIyNFxcXFx1RkIyNVxcXFx1RkIyNlxcXFx1RkIyN1xcXFx1RkIyOFxcXFx1RkIyQVxcXFx1RkIyQlxcXFx1RkIyQ1xcXFx1RkIyRFxcXFx1RkIyRVxcXFx1RkIyRlxcXFx1RkIzMFxcXFx1RkIzMVxcXFx1RkIzMlxcXFx1RkIzM1xcXFx1RkIzNFxcXFx1RkIzNVxcXFx1RkIzNlxcXFx1RkIzOFxcXFx1RkIzOVxcXFx1RkIzQVxcXFx1RkIzQlxcXFx1RkIzQ1xcXFx1RkIzRVxcXFx1RkI0MFxcXFx1RkI0MVxcXFx1RkI0M1xcXFx1RkI0NFxcXFx1RkI0NlxcXFx1RkI0N1xcXFx1RkI0OFxcXFx1RkI0OVxcXFx1RkI0QVxcXFx1RkI0QlxcXFx1RkI0Q1xcXFx1RkI0RFxcXFx1RkI0RVxcXFx1RkI0RlxcXFx1RkI1MFxcXFx1RkI1MVxcXFx1RkI1MlxcXFx1RkI1M1xcXFx1RkI1NFxcXFx1RkI1NVxcXFx1RkI1NlxcXFx1RkI1N1xcXFx1RkI1OFxcXFx1RkI1OVxcXFx1RkI1QVxcXFx1RkI1QlxcXFx1RkI1Q1xcXFx1RkI1RFxcXFx1RkI1RVxcXFx1RkI1RlxcXFx1RkI2MFxcXFx1RkI2MVxcXFx1RkI2MlxcXFx1RkI2M1xcXFx1RkI2NFxcXFx1RkI2NVxcXFx1RkI2NlxcXFx1RkI2N1xcXFx1RkI2OFxcXFx1RkI2OVxcXFx1RkI2QVxcXFx1RkI2QlxcXFx1RkI2Q1xcXFx1RkI2RFxcXFx1RkI2RVxcXFx1RkI2RlxcXFx1RkI3MFxcXFx1RkI3MVxcXFx1RkI3MlxcXFx1RkI3M1xcXFx1RkI3NFxcXFx1RkI3NVxcXFx1RkI3NlxcXFx1RkI3N1xcXFx1RkI3OFxcXFx1RkI3OVxcXFx1RkI3QVxcXFx1RkI3QlxcXFx1RkI3Q1xcXFx1RkI3RFxcXFx1RkI3RVxcXFx1RkI3RlxcXFx1RkI4MFxcXFx1RkI4MVxcXFx1RkI4MlxcXFx1RkI4M1xcXFx1RkI4NFxcXFx1RkI4NVxcXFx1RkI4NlxcXFx1RkI4N1xcXFx1RkI4OFxcXFx1RkI4OVxcXFx1RkI4QVxcXFx1RkI4QlxcXFx1RkI4Q1xcXFx1RkI4RFxcXFx1RkI4RVxcXFx1RkI4RlxcXFx1RkI5MFxcXFx1RkI5MVxcXFx1RkI5MlxcXFx1RkI5M1xcXFx1RkI5NFxcXFx1RkI5NVxcXFx1RkI5NlxcXFx1RkI5N1xcXFx1RkI5OFxcXFx1RkI5OVxcXFx1RkI5QVxcXFx1RkI5QlxcXFx1RkI5Q1xcXFx1RkI5RFxcXFx1RkI5RVxcXFx1RkI5RlxcXFx1RkJBMFxcXFx1RkJBMVxcXFx1RkJBMlxcXFx1RkJBM1xcXFx1RkJBNFxcXFx1RkJBNVxcXFx1RkJBNlxcXFx1RkJBN1xcXFx1RkJBOFxcXFx1RkJBOVxcXFx1RkJBQVxcXFx1RkJBQlxcXFx1RkJBQ1xcXFx1RkJBRFxcXFx1RkJBRVxcXFx1RkJBRlxcXFx1RkJCMFxcXFx1RkJCMVxcXFx1RkJEM1xcXFx1RkJENFxcXFx1RkJENVxcXFx1RkJENlxcXFx1RkJEN1xcXFx1RkJEOFxcXFx1RkJEOVxcXFx1RkJEQVxcXFx1RkJEQlxcXFx1RkJEQ1xcXFx1RkJERFxcXFx1RkJERVxcXFx1RkJERlxcXFx1RkJFMFxcXFx1RkJFMVxcXFx1RkJFMlxcXFx1RkJFM1xcXFx1RkJFNFxcXFx1RkJFNVxcXFx1RkJFNlxcXFx1RkJFN1xcXFx1RkJFOFxcXFx1RkJFOVxcXFx1RkJFQVxcXFx1RkJFQlxcXFx1RkJFQ1xcXFx1RkJFRFxcXFx1RkJFRVxcXFx1RkJFRlxcXFx1RkJGMFxcXFx1RkJGMVxcXFx1RkJGMlxcXFx1RkJGM1xcXFx1RkJGNFxcXFx1RkJGNVxcXFx1RkJGNlxcXFx1RkJGN1xcXFx1RkJGOFxcXFx1RkJGOVxcXFx1RkJGQVxcXFx1RkJGQlxcXFx1RkJGQ1xcXFx1RkJGRFxcXFx1RkJGRVxcXFx1RkJGRlxcXFx1RkMwMFxcXFx1RkMwMVxcXFx1RkMwMlxcXFx1RkMwM1xcXFx1RkMwNFxcXFx1RkMwNVxcXFx1RkMwNlxcXFx1RkMwN1xcXFx1RkMwOFxcXFx1RkMwOVxcXFx1RkMwQVxcXFx1RkMwQlxcXFx1RkMwQ1xcXFx1RkMwRFxcXFx1RkMwRVxcXFx1RkMwRlxcXFx1RkMxMFxcXFx1RkMxMVxcXFx1RkMxMlxcXFx1RkMxM1xcXFx1RkMxNFxcXFx1RkMxNVxcXFx1RkMxNlxcXFx1RkMxN1xcXFx1RkMxOFxcXFx1RkMxOVxcXFx1RkMxQVxcXFx1RkMxQlxcXFx1RkMxQ1xcXFx1RkMxRFxcXFx1RkMxRVxcXFx1RkMxRlxcXFx1RkMyMFxcXFx1RkMyMVxcXFx1RkMyMlxcXFx1RkMyM1xcXFx1RkMyNFxcXFx1RkMyNVxcXFx1RkMyNlxcXFx1RkMyN1xcXFx1RkMyOFxcXFx1RkMyOVxcXFx1RkMyQVxcXFx1RkMyQlxcXFx1RkMyQ1xcXFx1RkMyRFxcXFx1RkMyRVxcXFx1RkMyRlxcXFx1RkMzMFxcXFx1RkMzMVxcXFx1RkMzMlxcXFx1RkMzM1xcXFx1RkMzNFxcXFx1RkMzNVxcXFx1RkMzNlxcXFx1RkMzN1xcXFx1RkMzOFxcXFx1RkMzOVxcXFx1RkMzQVxcXFx1RkMzQlxcXFx1RkMzQ1xcXFx1RkMzRFxcXFx1RkMzRVxcXFx1RkMzRlxcXFx1RkM0MFxcXFx1RkM0MVxcXFx1RkM0MlxcXFx1RkM0M1xcXFx1RkM0NFxcXFx1RkM0NVxcXFx1RkM0NlxcXFx1RkM0N1xcXFx1RkM0OFxcXFx1RkM0OVxcXFx1RkM0QVxcXFx1RkM0QlxcXFx1RkM0Q1xcXFx1RkM0RFxcXFx1RkM0RVxcXFx1RkM0RlxcXFx1RkM1MFxcXFx1RkM1MVxcXFx1RkM1MlxcXFx1RkM1M1xcXFx1RkM1NFxcXFx1RkM1NVxcXFx1RkM1NlxcXFx1RkM1N1xcXFx1RkM1OFxcXFx1RkM1OVxcXFx1RkM1QVxcXFx1RkM1QlxcXFx1RkM1Q1xcXFx1RkM1RFxcXFx1RkM1RVxcXFx1RkM1RlxcXFx1RkM2MFxcXFx1RkM2MVxcXFx1RkM2MlxcXFx1RkM2M1xcXFx1RkM2NFxcXFx1RkM2NVxcXFx1RkM2NlxcXFx1RkM2N1xcXFx1RkM2OFxcXFx1RkM2OVxcXFx1RkM2QVxcXFx1RkM2QlxcXFx1RkM2Q1xcXFx1RkM2RFxcXFx1RkM2RVxcXFx1RkM2RlxcXFx1RkM3MFxcXFx1RkM3MVxcXFx1RkM3MlxcXFx1RkM3M1xcXFx1RkM3NFxcXFx1RkM3NVxcXFx1RkM3NlxcXFx1RkM3N1xcXFx1RkM3OFxcXFx1RkM3OVxcXFx1RkM3QVxcXFx1RkM3QlxcXFx1RkM3Q1xcXFx1RkM3RFxcXFx1RkM3RVxcXFx1RkM3RlxcXFx1RkM4MFxcXFx1RkM4MVxcXFx1RkM4MlxcXFx1RkM4M1xcXFx1RkM4NFxcXFx1RkM4NVxcXFx1RkM4NlxcXFx1RkM4N1xcXFx1RkM4OFxcXFx1RkM4OVxcXFx1RkM4QVxcXFx1RkM4QlxcXFx1RkM4Q1xcXFx1RkM4RFxcXFx1RkM4RVxcXFx1RkM4RlxcXFx1RkM5MFxcXFx1RkM5MVxcXFx1RkM5MlxcXFx1RkM5M1xcXFx1RkM5NFxcXFx1RkM5NVxcXFx1RkM5NlxcXFx1RkM5N1xcXFx1RkM5OFxcXFx1RkM5OVxcXFx1RkM5QVxcXFx1RkM5QlxcXFx1RkM5Q1xcXFx1RkM5RFxcXFx1RkM5RVxcXFx1RkM5RlxcXFx1RkNBMFxcXFx1RkNBMVxcXFx1RkNBMlxcXFx1RkNBM1xcXFx1RkNBNFxcXFx1RkNBNVxcXFx1RkNBNlxcXFx1RkNBN1xcXFx1RkNBOFxcXFx1RkNBOVxcXFx1RkNBQVxcXFx1RkNBQlxcXFx1RkNBQ1xcXFx1RkNBRFxcXFx1RkNBRVxcXFx1RkNBRlxcXFx1RkNCMFxcXFx1RkNCMVxcXFx1RkNCMlxcXFx1RkNCM1xcXFx1RkNCNFxcXFx1RkNCNVxcXFx1RkNCNlxcXFx1RkNCN1xcXFx1RkNCOFxcXFx1RkNCOVxcXFx1RkNCQVxcXFx1RkNCQlxcXFx1RkNCQ1xcXFx1RkNCRFxcXFx1RkNCRVxcXFx1RkNCRlxcXFx1RkNDMFxcXFx1RkNDMVxcXFx1RkNDMlxcXFx1RkNDM1xcXFx1RkNDNFxcXFx1RkNDNVxcXFx1RkNDNlxcXFx1RkNDN1xcXFx1RkNDOFxcXFx1RkNDOVxcXFx1RkNDQVxcXFx1RkNDQlxcXFx1RkNDQ1xcXFx1RkNDRFxcXFx1RkNDRVxcXFx1RkNDRlxcXFx1RkNEMFxcXFx1RkNEMVxcXFx1RkNEMlxcXFx1RkNEM1xcXFx1RkNENFxcXFx1RkNENVxcXFx1RkNENlxcXFx1RkNEN1xcXFx1RkNEOFxcXFx1RkNEOVxcXFx1RkNEQVxcXFx1RkNEQlxcXFx1RkNEQ1xcXFx1RkNERFxcXFx1RkNERVxcXFx1RkNERlxcXFx1RkNFMFxcXFx1RkNFMVxcXFx1RkNFMlxcXFx1RkNFM1xcXFx1RkNFNFxcXFx1RkNFNVxcXFx1RkNFNlxcXFx1RkNFN1xcXFx1RkNFOFxcXFx1RkNFOVxcXFx1RkNFQVxcXFx1RkNFQlxcXFx1RkNFQ1xcXFx1RkNFRFxcXFx1RkNFRVxcXFx1RkNFRlxcXFx1RkNGMFxcXFx1RkNGMVxcXFx1RkNGMlxcXFx1RkNGM1xcXFx1RkNGNFxcXFx1RkNGNVxcXFx1RkNGNlxcXFx1RkNGN1xcXFx1RkNGOFxcXFx1RkNGOVxcXFx1RkNGQVxcXFx1RkNGQlxcXFx1RkNGQ1xcXFx1RkNGRFxcXFx1RkNGRVxcXFx1RkNGRlxcXFx1RkQwMFxcXFx1RkQwMVxcXFx1RkQwMlxcXFx1RkQwM1xcXFx1RkQwNFxcXFx1RkQwNVxcXFx1RkQwNlxcXFx1RkQwN1xcXFx1RkQwOFxcXFx1RkQwOVxcXFx1RkQwQVxcXFx1RkQwQlxcXFx1RkQwQ1xcXFx1RkQwRFxcXFx1RkQwRVxcXFx1RkQwRlxcXFx1RkQxMFxcXFx1RkQxMVxcXFx1RkQxMlxcXFx1RkQxM1xcXFx1RkQxNFxcXFx1RkQxNVxcXFx1RkQxNlxcXFx1RkQxN1xcXFx1RkQxOFxcXFx1RkQxOVxcXFx1RkQxQVxcXFx1RkQxQlxcXFx1RkQxQ1xcXFx1RkQxRFxcXFx1RkQxRVxcXFx1RkQxRlxcXFx1RkQyMFxcXFx1RkQyMVxcXFx1RkQyMlxcXFx1RkQyM1xcXFx1RkQyNFxcXFx1RkQyNVxcXFx1RkQyNlxcXFx1RkQyN1xcXFx1RkQyOFxcXFx1RkQyOVxcXFx1RkQyQVxcXFx1RkQyQlxcXFx1RkQyQ1xcXFx1RkQyRFxcXFx1RkQyRVxcXFx1RkQyRlxcXFx1RkQzMFxcXFx1RkQzMVxcXFx1RkQzMlxcXFx1RkQzM1xcXFx1RkQzNFxcXFx1RkQzNVxcXFx1RkQzNlxcXFx1RkQzN1xcXFx1RkQzOFxcXFx1RkQzOVxcXFx1RkQzQVxcXFx1RkQzQlxcXFx1RkQzQ1xcXFx1RkQzRFxcXFx1RkQ1MFxcXFx1RkQ1MVxcXFx1RkQ1MlxcXFx1RkQ1M1xcXFx1RkQ1NFxcXFx1RkQ1NVxcXFx1RkQ1NlxcXFx1RkQ1N1xcXFx1RkQ1OFxcXFx1RkQ1OVxcXFx1RkQ1QVxcXFx1RkQ1QlxcXFx1RkQ1Q1xcXFx1RkQ1RFxcXFx1RkQ1RVxcXFx1RkQ1RlxcXFx1RkQ2MFxcXFx1RkQ2MVxcXFx1RkQ2MlxcXFx1RkQ2M1xcXFx1RkQ2NFxcXFx1RkQ2NVxcXFx1RkQ2NlxcXFx1RkQ2N1xcXFx1RkQ2OFxcXFx1RkQ2OVxcXFx1RkQ2QVxcXFx1RkQ2QlxcXFx1RkQ2Q1xcXFx1RkQ2RFxcXFx1RkQ2RVxcXFx1RkQ2RlxcXFx1RkQ3MFxcXFx1RkQ3MVxcXFx1RkQ3MlxcXFx1RkQ3M1xcXFx1RkQ3NFxcXFx1RkQ3NVxcXFx1RkQ3NlxcXFx1RkQ3N1xcXFx1RkQ3OFxcXFx1RkQ3OVxcXFx1RkQ3QVxcXFx1RkQ3QlxcXFx1RkQ3Q1xcXFx1RkQ3RFxcXFx1RkQ3RVxcXFx1RkQ3RlxcXFx1RkQ4MFxcXFx1RkQ4MVxcXFx1RkQ4MlxcXFx1RkQ4M1xcXFx1RkQ4NFxcXFx1RkQ4NVxcXFx1RkQ4NlxcXFx1RkQ4N1xcXFx1RkQ4OFxcXFx1RkQ4OVxcXFx1RkQ4QVxcXFx1RkQ4QlxcXFx1RkQ4Q1xcXFx1RkQ4RFxcXFx1RkQ4RVxcXFx1RkQ4RlxcXFx1RkQ5MlxcXFx1RkQ5M1xcXFx1RkQ5NFxcXFx1RkQ5NVxcXFx1RkQ5NlxcXFx1RkQ5N1xcXFx1RkQ5OFxcXFx1RkQ5OVxcXFx1RkQ5QVxcXFx1RkQ5QlxcXFx1RkQ5Q1xcXFx1RkQ5RFxcXFx1RkQ5RVxcXFx1RkQ5RlxcXFx1RkRBMFxcXFx1RkRBMVxcXFx1RkRBMlxcXFx1RkRBM1xcXFx1RkRBNFxcXFx1RkRBNVxcXFx1RkRBNlxcXFx1RkRBN1xcXFx1RkRBOFxcXFx1RkRBOVxcXFx1RkRBQVxcXFx1RkRBQlxcXFx1RkRBQ1xcXFx1RkRBRFxcXFx1RkRBRVxcXFx1RkRBRlxcXFx1RkRCMFxcXFx1RkRCMVxcXFx1RkRCMlxcXFx1RkRCM1xcXFx1RkRCNFxcXFx1RkRCNVxcXFx1RkRCNlxcXFx1RkRCN1xcXFx1RkRCOFxcXFx1RkRCOVxcXFx1RkRCQVxcXFx1RkRCQlxcXFx1RkRCQ1xcXFx1RkRCRFxcXFx1RkRCRVxcXFx1RkRCRlxcXFx1RkRDMFxcXFx1RkRDMVxcXFx1RkRDMlxcXFx1RkRDM1xcXFx1RkRDNFxcXFx1RkRDNVxcXFx1RkRDNlxcXFx1RkRDN1xcXFx1RkRGMFxcXFx1RkRGMVxcXFx1RkRGMlxcXFx1RkRGM1xcXFx1RkRGNFxcXFx1RkRGNVxcXFx1RkRGNlxcXFx1RkRGN1xcXFx1RkRGOFxcXFx1RkRGOVxcXFx1RkRGQVxcXFx1RkRGQlxcXFx1RkU3MFxcXFx1RkU3MVxcXFx1RkU3MlxcXFx1RkU3M1xcXFx1RkU3NFxcXFx1RkU3NlxcXFx1RkU3N1xcXFx1RkU3OFxcXFx1RkU3OVxcXFx1RkU3QVxcXFx1RkU3QlxcXFx1RkU3Q1xcXFx1RkU3RFxcXFx1RkU3RVxcXFx1RkU3RlxcXFx1RkU4MFxcXFx1RkU4MVxcXFx1RkU4MlxcXFx1RkU4M1xcXFx1RkU4NFxcXFx1RkU4NVxcXFx1RkU4NlxcXFx1RkU4N1xcXFx1RkU4OFxcXFx1RkU4OVxcXFx1RkU4QVxcXFx1RkU4QlxcXFx1RkU4Q1xcXFx1RkU4RFxcXFx1RkU4RVxcXFx1RkU4RlxcXFx1RkU5MFxcXFx1RkU5MVxcXFx1RkU5MlxcXFx1RkU5M1xcXFx1RkU5NFxcXFx1RkU5NVxcXFx1RkU5NlxcXFx1RkU5N1xcXFx1RkU5OFxcXFx1RkU5OVxcXFx1RkU5QVxcXFx1RkU5QlxcXFx1RkU5Q1xcXFx1RkU5RFxcXFx1RkU5RVxcXFx1RkU5RlxcXFx1RkVBMFxcXFx1RkVBMVxcXFx1RkVBMlxcXFx1RkVBM1xcXFx1RkVBNFxcXFx1RkVBNVxcXFx1RkVBNlxcXFx1RkVBN1xcXFx1RkVBOFxcXFx1RkVBOVxcXFx1RkVBQVxcXFx1RkVBQlxcXFx1RkVBQ1xcXFx1RkVBRFxcXFx1RkVBRVxcXFx1RkVBRlxcXFx1RkVCMFxcXFx1RkVCMVxcXFx1RkVCMlxcXFx1RkVCM1xcXFx1RkVCNFxcXFx1RkVCNVxcXFx1RkVCNlxcXFx1RkVCN1xcXFx1RkVCOFxcXFx1RkVCOVxcXFx1RkVCQVxcXFx1RkVCQlxcXFx1RkVCQ1xcXFx1RkVCRFxcXFx1RkVCRVxcXFx1RkVCRlxcXFx1RkVDMFxcXFx1RkVDMVxcXFx1RkVDMlxcXFx1RkVDM1xcXFx1RkVDNFxcXFx1RkVDNVxcXFx1RkVDNlxcXFx1RkVDN1xcXFx1RkVDOFxcXFx1RkVDOVxcXFx1RkVDQVxcXFx1RkVDQlxcXFx1RkVDQ1xcXFx1RkVDRFxcXFx1RkVDRVxcXFx1RkVDRlxcXFx1RkVEMFxcXFx1RkVEMVxcXFx1RkVEMlxcXFx1RkVEM1xcXFx1RkVENFxcXFx1RkVENVxcXFx1RkVENlxcXFx1RkVEN1xcXFx1RkVEOFxcXFx1RkVEOVxcXFx1RkVEQVxcXFx1RkVEQlxcXFx1RkVEQ1xcXFx1RkVERFxcXFx1RkVERVxcXFx1RkVERlxcXFx1RkVFMFxcXFx1RkVFMVxcXFx1RkVFMlxcXFx1RkVFM1xcXFx1RkVFNFxcXFx1RkVFNVxcXFx1RkVFNlxcXFx1RkVFN1xcXFx1RkVFOFxcXFx1RkVFOVxcXFx1RkVFQVxcXFx1RkVFQlxcXFx1RkVFQ1xcXFx1RkVFRFxcXFx1RkVFRVxcXFx1RkVFRlxcXFx1RkVGMFxcXFx1RkVGMVxcXFx1RkVGMlxcXFx1RkVGM1xcXFx1RkVGNFxcXFx1RkVGNVxcXFx1RkVGNlxcXFx1RkVGN1xcXFx1RkVGOFxcXFx1RkVGOVxcXFx1RkVGQVxcXFx1RkVGQlxcXFx1RkVGQ1xcXFx1RkY2NlxcXFx1RkY2N1xcXFx1RkY2OFxcXFx1RkY2OVxcXFx1RkY2QVxcXFx1RkY2QlxcXFx1RkY2Q1xcXFx1RkY2RFxcXFx1RkY2RVxcXFx1RkY2RlxcXFx1RkY3MVxcXFx1RkY3MlxcXFx1RkY3M1xcXFx1RkY3NFxcXFx1RkY3NVxcXFx1RkY3NlxcXFx1RkY3N1xcXFx1RkY3OFxcXFx1RkY3OVxcXFx1RkY3QVxcXFx1RkY3QlxcXFx1RkY3Q1xcXFx1RkY3RFxcXFx1RkY3RVxcXFx1RkY3RlxcXFx1RkY4MFxcXFx1RkY4MVxcXFx1RkY4MlxcXFx1RkY4M1xcXFx1RkY4NFxcXFx1RkY4NVxcXFx1RkY4NlxcXFx1RkY4N1xcXFx1RkY4OFxcXFx1RkY4OVxcXFx1RkY4QVxcXFx1RkY4QlxcXFx1RkY4Q1xcXFx1RkY4RFxcXFx1RkY4RVxcXFx1RkY4RlxcXFx1RkY5MFxcXFx1RkY5MVxcXFx1RkY5MlxcXFx1RkY5M1xcXFx1RkY5NFxcXFx1RkY5NVxcXFx1RkY5NlxcXFx1RkY5N1xcXFx1RkY5OFxcXFx1RkY5OVxcXFx1RkY5QVxcXFx1RkY5QlxcXFx1RkY5Q1xcXFx1RkY5RFxcXFx1RkZBMFxcXFx1RkZBMVxcXFx1RkZBMlxcXFx1RkZBM1xcXFx1RkZBNFxcXFx1RkZBNVxcXFx1RkZBNlxcXFx1RkZBN1xcXFx1RkZBOFxcXFx1RkZBOVxcXFx1RkZBQVxcXFx1RkZBQlxcXFx1RkZBQ1xcXFx1RkZBRFxcXFx1RkZBRVxcXFx1RkZBRlxcXFx1RkZCMFxcXFx1RkZCMVxcXFx1RkZCMlxcXFx1RkZCM1xcXFx1RkZCNFxcXFx1RkZCNVxcXFx1RkZCNlxcXFx1RkZCN1xcXFx1RkZCOFxcXFx1RkZCOVxcXFx1RkZCQVxcXFx1RkZCQlxcXFx1RkZCQ1xcXFx1RkZCRFxcXFx1RkZCRVxcXFx1RkZDMlxcXFx1RkZDM1xcXFx1RkZDNFxcXFx1RkZDNVxcXFx1RkZDNlxcXFx1RkZDN1xcXFx1RkZDQVxcXFx1RkZDQlxcXFx1RkZDQ1xcXFx1RkZDRFxcXFx1RkZDRVxcXFx1RkZDRlxcXFx1RkZEMlxcXFx1RkZEM1xcXFx1RkZENFxcXFx1RkZENVxcXFx1RkZENlxcXFx1RkZEN1xcXFx1RkZEQVxcXFx1RkZEQlxcXFx1RkZEQ11cIiB9LFxuICAgICAgICBwZWckYzgwID0gL15bXFx1MDFDNVxcdTAxQzhcXHUwMUNCXFx1MDFGMlxcdTFGODhcXHUxRjg5XFx1MUY4QVxcdTFGOEJcXHUxRjhDXFx1MUY4RFxcdTFGOEVcXHUxRjhGXFx1MUY5OFxcdTFGOTlcXHUxRjlBXFx1MUY5QlxcdTFGOUNcXHUxRjlEXFx1MUY5RVxcdTFGOUZcXHUxRkE4XFx1MUZBOVxcdTFGQUFcXHUxRkFCXFx1MUZBQ1xcdTFGQURcXHUxRkFFXFx1MUZBRlxcdTFGQkNcXHUxRkNDXFx1MUZGQ10vLFxuICAgICAgICBwZWckYzgxID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIltcXFxcdTAxQzVcXFxcdTAxQzhcXFxcdTAxQ0JcXFxcdTAxRjJcXFxcdTFGODhcXFxcdTFGODlcXFxcdTFGOEFcXFxcdTFGOEJcXFxcdTFGOENcXFxcdTFGOERcXFxcdTFGOEVcXFxcdTFGOEZcXFxcdTFGOThcXFxcdTFGOTlcXFxcdTFGOUFcXFxcdTFGOUJcXFxcdTFGOUNcXFxcdTFGOURcXFxcdTFGOUVcXFxcdTFGOUZcXFxcdTFGQThcXFxcdTFGQTlcXFxcdTFGQUFcXFxcdTFGQUJcXFxcdTFGQUNcXFxcdTFGQURcXFxcdTFGQUVcXFxcdTFGQUZcXFxcdTFGQkNcXFxcdTFGQ0NcXFxcdTFGRkNdXCIsIGRlc2NyaXB0aW9uOiBcIltcXFxcdTAxQzVcXFxcdTAxQzhcXFxcdTAxQ0JcXFxcdTAxRjJcXFxcdTFGODhcXFxcdTFGODlcXFxcdTFGOEFcXFxcdTFGOEJcXFxcdTFGOENcXFxcdTFGOERcXFxcdTFGOEVcXFxcdTFGOEZcXFxcdTFGOThcXFxcdTFGOTlcXFxcdTFGOUFcXFxcdTFGOUJcXFxcdTFGOUNcXFxcdTFGOURcXFxcdTFGOUVcXFxcdTFGOUZcXFxcdTFGQThcXFxcdTFGQTlcXFxcdTFGQUFcXFxcdTFGQUJcXFxcdTFGQUNcXFxcdTFGQURcXFxcdTFGQUVcXFxcdTFGQUZcXFxcdTFGQkNcXFxcdTFGQ0NcXFxcdTFGRkNdXCIgfSxcbiAgICAgICAgcGVnJGM4MiA9IC9eW0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXFx4QzBcXHhDMVxceEMyXFx4QzNcXHhDNFxceEM1XFx4QzZcXHhDN1xceEM4XFx4QzlcXHhDQVxceENCXFx4Q0NcXHhDRFxceENFXFx4Q0ZcXHhEMFxceEQxXFx4RDJcXHhEM1xceEQ0XFx4RDVcXHhENlxceEQ4XFx4RDlcXHhEQVxceERCXFx4RENcXHhERFxceERFXFx1MDEwMFxcdTAxMDJcXHUwMTA0XFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAxMEVcXHUwMTEwXFx1MDExMlxcdTAxMTRcXHUwMTE2XFx1MDExOFxcdTAxMUFcXHUwMTFDXFx1MDExRVxcdTAxMjBcXHUwMTIyXFx1MDEyNFxcdTAxMjZcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTJFXFx1MDEzMFxcdTAxMzJcXHUwMTM0XFx1MDEzNlxcdTAxMzlcXHUwMTNCXFx1MDEzRFxcdTAxM0ZcXHUwMTQxXFx1MDE0M1xcdTAxNDVcXHUwMTQ3XFx1MDE0QVxcdTAxNENcXHUwMTRFXFx1MDE1MFxcdTAxNTJcXHUwMTU0XFx1MDE1NlxcdTAxNThcXHUwMTVBXFx1MDE1Q1xcdTAxNUVcXHUwMTYwXFx1MDE2MlxcdTAxNjRcXHUwMTY2XFx1MDE2OFxcdTAxNkFcXHUwMTZDXFx1MDE2RVxcdTAxNzBcXHUwMTcyXFx1MDE3NFxcdTAxNzZcXHUwMTc4XFx1MDE3OVxcdTAxN0JcXHUwMTdEXFx1MDE4MVxcdTAxODJcXHUwMTg0XFx1MDE4NlxcdTAxODdcXHUwMTg5XFx1MDE4QVxcdTAxOEJcXHUwMThFXFx1MDE4RlxcdTAxOTBcXHUwMTkxXFx1MDE5M1xcdTAxOTRcXHUwMTk2XFx1MDE5N1xcdTAxOThcXHUwMTlDXFx1MDE5RFxcdTAxOUZcXHUwMUEwXFx1MDFBMlxcdTAxQTRcXHUwMUE2XFx1MDFBN1xcdTAxQTlcXHUwMUFDXFx1MDFBRVxcdTAxQUZcXHUwMUIxXFx1MDFCMlxcdTAxQjNcXHUwMUI1XFx1MDFCN1xcdTAxQjhcXHUwMUJDXFx1MDFDNFxcdTAxQzdcXHUwMUNBXFx1MDFDRFxcdTAxQ0ZcXHUwMUQxXFx1MDFEM1xcdTAxRDVcXHUwMUQ3XFx1MDFEOVxcdTAxREJcXHUwMURFXFx1MDFFMFxcdTAxRTJcXHUwMUU0XFx1MDFFNlxcdTAxRThcXHUwMUVBXFx1MDFFQ1xcdTAxRUVcXHUwMUYxXFx1MDFGNFxcdTAxRjZcXHUwMUY3XFx1MDFGOFxcdTAxRkFcXHUwMUZDXFx1MDFGRVxcdTAyMDBcXHUwMjAyXFx1MDIwNFxcdTAyMDZcXHUwMjA4XFx1MDIwQVxcdTAyMENcXHUwMjBFXFx1MDIxMFxcdTAyMTJcXHUwMjE0XFx1MDIxNlxcdTAyMThcXHUwMjFBXFx1MDIxQ1xcdTAyMUVcXHUwMjIwXFx1MDIyMlxcdTAyMjRcXHUwMjI2XFx1MDIyOFxcdTAyMkFcXHUwMjJDXFx1MDIyRVxcdTAyMzBcXHUwMjMyXFx1MDIzQVxcdTAyM0JcXHUwMjNEXFx1MDIzRVxcdTAyNDFcXHUwMjQzXFx1MDI0NFxcdTAyNDVcXHUwMjQ2XFx1MDI0OFxcdTAyNEFcXHUwMjRDXFx1MDI0RVxcdTAzNzBcXHUwMzcyXFx1MDM3NlxcdTAzODZcXHUwMzg4XFx1MDM4OVxcdTAzOEFcXHUwMzhDXFx1MDM4RVxcdTAzOEZcXHUwMzkxXFx1MDM5MlxcdTAzOTNcXHUwMzk0XFx1MDM5NVxcdTAzOTZcXHUwMzk3XFx1MDM5OFxcdTAzOTlcXHUwMzlBXFx1MDM5QlxcdTAzOUNcXHUwMzlEXFx1MDM5RVxcdTAzOUZcXHUwM0EwXFx1MDNBMVxcdTAzQTNcXHUwM0E0XFx1MDNBNVxcdTAzQTZcXHUwM0E3XFx1MDNBOFxcdTAzQTlcXHUwM0FBXFx1MDNBQlxcdTAzQ0ZcXHUwM0QyXFx1MDNEM1xcdTAzRDRcXHUwM0Q4XFx1MDNEQVxcdTAzRENcXHUwM0RFXFx1MDNFMFxcdTAzRTJcXHUwM0U0XFx1MDNFNlxcdTAzRThcXHUwM0VBXFx1MDNFQ1xcdTAzRUVcXHUwM0Y0XFx1MDNGN1xcdTAzRjlcXHUwM0ZBXFx1MDNGRFxcdTAzRkVcXHUwM0ZGXFx1MDQwMFxcdTA0MDFcXHUwNDAyXFx1MDQwM1xcdTA0MDRcXHUwNDA1XFx1MDQwNlxcdTA0MDdcXHUwNDA4XFx1MDQwOVxcdTA0MEFcXHUwNDBCXFx1MDQwQ1xcdTA0MERcXHUwNDBFXFx1MDQwRlxcdTA0MTBcXHUwNDExXFx1MDQxMlxcdTA0MTNcXHUwNDE0XFx1MDQxNVxcdTA0MTZcXHUwNDE3XFx1MDQxOFxcdTA0MTlcXHUwNDFBXFx1MDQxQlxcdTA0MUNcXHUwNDFEXFx1MDQxRVxcdTA0MUZcXHUwNDIwXFx1MDQyMVxcdTA0MjJcXHUwNDIzXFx1MDQyNFxcdTA0MjVcXHUwNDI2XFx1MDQyN1xcdTA0MjhcXHUwNDI5XFx1MDQyQVxcdTA0MkJcXHUwNDJDXFx1MDQyRFxcdTA0MkVcXHUwNDJGXFx1MDQ2MFxcdTA0NjJcXHUwNDY0XFx1MDQ2NlxcdTA0NjhcXHUwNDZBXFx1MDQ2Q1xcdTA0NkVcXHUwNDcwXFx1MDQ3MlxcdTA0NzRcXHUwNDc2XFx1MDQ3OFxcdTA0N0FcXHUwNDdDXFx1MDQ3RVxcdTA0ODBcXHUwNDhBXFx1MDQ4Q1xcdTA0OEVcXHUwNDkwXFx1MDQ5MlxcdTA0OTRcXHUwNDk2XFx1MDQ5OFxcdTA0OUFcXHUwNDlDXFx1MDQ5RVxcdTA0QTBcXHUwNEEyXFx1MDRBNFxcdTA0QTZcXHUwNEE4XFx1MDRBQVxcdTA0QUNcXHUwNEFFXFx1MDRCMFxcdTA0QjJcXHUwNEI0XFx1MDRCNlxcdTA0QjhcXHUwNEJBXFx1MDRCQ1xcdTA0QkVcXHUwNEMwXFx1MDRDMVxcdTA0QzNcXHUwNEM1XFx1MDRDN1xcdTA0QzlcXHUwNENCXFx1MDRDRFxcdTA0RDBcXHUwNEQyXFx1MDRENFxcdTA0RDZcXHUwNEQ4XFx1MDREQVxcdTA0RENcXHUwNERFXFx1MDRFMFxcdTA0RTJcXHUwNEU0XFx1MDRFNlxcdTA0RThcXHUwNEVBXFx1MDRFQ1xcdTA0RUVcXHUwNEYwXFx1MDRGMlxcdTA0RjRcXHUwNEY2XFx1MDRGOFxcdTA0RkFcXHUwNEZDXFx1MDRGRVxcdTA1MDBcXHUwNTAyXFx1MDUwNFxcdTA1MDZcXHUwNTA4XFx1MDUwQVxcdTA1MENcXHUwNTBFXFx1MDUxMFxcdTA1MTJcXHUwNTE0XFx1MDUxNlxcdTA1MThcXHUwNTFBXFx1MDUxQ1xcdTA1MUVcXHUwNTIwXFx1MDUyMlxcdTA1MzFcXHUwNTMyXFx1MDUzM1xcdTA1MzRcXHUwNTM1XFx1MDUzNlxcdTA1MzdcXHUwNTM4XFx1MDUzOVxcdTA1M0FcXHUwNTNCXFx1MDUzQ1xcdTA1M0RcXHUwNTNFXFx1MDUzRlxcdTA1NDBcXHUwNTQxXFx1MDU0MlxcdTA1NDNcXHUwNTQ0XFx1MDU0NVxcdTA1NDZcXHUwNTQ3XFx1MDU0OFxcdTA1NDlcXHUwNTRBXFx1MDU0QlxcdTA1NENcXHUwNTREXFx1MDU0RVxcdTA1NEZcXHUwNTUwXFx1MDU1MVxcdTA1NTJcXHUwNTUzXFx1MDU1NFxcdTA1NTVcXHUwNTU2XFx1MTBBMFxcdTEwQTFcXHUxMEEyXFx1MTBBM1xcdTEwQTRcXHUxMEE1XFx1MTBBNlxcdTEwQTdcXHUxMEE4XFx1MTBBOVxcdTEwQUFcXHUxMEFCXFx1MTBBQ1xcdTEwQURcXHUxMEFFXFx1MTBBRlxcdTEwQjBcXHUxMEIxXFx1MTBCMlxcdTEwQjNcXHUxMEI0XFx1MTBCNVxcdTEwQjZcXHUxMEI3XFx1MTBCOFxcdTEwQjlcXHUxMEJBXFx1MTBCQlxcdTEwQkNcXHUxMEJEXFx1MTBCRVxcdTEwQkZcXHUxMEMwXFx1MTBDMVxcdTEwQzJcXHUxMEMzXFx1MTBDNFxcdTEwQzVcXHUxRTAwXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MUUwOFxcdTFFMEFcXHUxRTBDXFx1MUUwRVxcdTFFMTBcXHUxRTEyXFx1MUUxNFxcdTFFMTZcXHUxRTE4XFx1MUUxQVxcdTFFMUNcXHUxRTFFXFx1MUUyMFxcdTFFMjJcXHUxRTI0XFx1MUUyNlxcdTFFMjhcXHUxRTJBXFx1MUUyQ1xcdTFFMkVcXHUxRTMwXFx1MUUzMlxcdTFFMzRcXHUxRTM2XFx1MUUzOFxcdTFFM0FcXHUxRTNDXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MUU0NFxcdTFFNDZcXHUxRTQ4XFx1MUU0QVxcdTFFNENcXHUxRTRFXFx1MUU1MFxcdTFFNTJcXHUxRTU0XFx1MUU1NlxcdTFFNThcXHUxRTVBXFx1MUU1Q1xcdTFFNUVcXHUxRTYwXFx1MUU2MlxcdTFFNjRcXHUxRTY2XFx1MUU2OFxcdTFFNkFcXHUxRTZDXFx1MUU2RVxcdTFFNzBcXHUxRTcyXFx1MUU3NFxcdTFFNzZcXHUxRTc4XFx1MUU3QVxcdTFFN0NcXHUxRTdFXFx1MUU4MFxcdTFFODJcXHUxRTg0XFx1MUU4NlxcdTFFODhcXHUxRThBXFx1MUU4Q1xcdTFFOEVcXHUxRTkwXFx1MUU5MlxcdTFFOTRcXHUxRTlFXFx1MUVBMFxcdTFFQTJcXHUxRUE0XFx1MUVBNlxcdTFFQThcXHUxRUFBXFx1MUVBQ1xcdTFFQUVcXHUxRUIwXFx1MUVCMlxcdTFFQjRcXHUxRUI2XFx1MUVCOFxcdTFFQkFcXHUxRUJDXFx1MUVCRVxcdTFFQzBcXHUxRUMyXFx1MUVDNFxcdTFFQzZcXHUxRUM4XFx1MUVDQVxcdTFFQ0NcXHUxRUNFXFx1MUVEMFxcdTFFRDJcXHUxRUQ0XFx1MUVENlxcdTFFRDhcXHUxRURBXFx1MUVEQ1xcdTFFREVcXHUxRUUwXFx1MUVFMlxcdTFFRTRcXHUxRUU2XFx1MUVFOFxcdTFFRUFcXHUxRUVDXFx1MUVFRVxcdTFFRjBcXHUxRUYyXFx1MUVGNFxcdTFFRjZcXHUxRUY4XFx1MUVGQVxcdTFFRkNcXHUxRUZFXFx1MUYwOFxcdTFGMDlcXHUxRjBBXFx1MUYwQlxcdTFGMENcXHUxRjBEXFx1MUYwRVxcdTFGMEZcXHUxRjE4XFx1MUYxOVxcdTFGMUFcXHUxRjFCXFx1MUYxQ1xcdTFGMURcXHUxRjI4XFx1MUYyOVxcdTFGMkFcXHUxRjJCXFx1MUYyQ1xcdTFGMkRcXHUxRjJFXFx1MUYyRlxcdTFGMzhcXHUxRjM5XFx1MUYzQVxcdTFGM0JcXHUxRjNDXFx1MUYzRFxcdTFGM0VcXHUxRjNGXFx1MUY0OFxcdTFGNDlcXHUxRjRBXFx1MUY0QlxcdTFGNENcXHUxRjREXFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1RlxcdTFGNjhcXHUxRjY5XFx1MUY2QVxcdTFGNkJcXHUxRjZDXFx1MUY2RFxcdTFGNkVcXHUxRjZGXFx1MUZCOFxcdTFGQjlcXHUxRkJBXFx1MUZCQlxcdTFGQzhcXHUxRkM5XFx1MUZDQVxcdTFGQ0JcXHUxRkQ4XFx1MUZEOVxcdTFGREFcXHUxRkRCXFx1MUZFOFxcdTFGRTlcXHUxRkVBXFx1MUZFQlxcdTFGRUNcXHUxRkY4XFx1MUZGOVxcdTFGRkFcXHUxRkZCXFx1MjEwMlxcdTIxMDdcXHUyMTBCXFx1MjEwQ1xcdTIxMERcXHUyMTEwXFx1MjExMVxcdTIxMTJcXHUyMTE1XFx1MjExOVxcdTIxMUFcXHUyMTFCXFx1MjExQ1xcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBXFx1MjEyQlxcdTIxMkNcXHUyMTJEXFx1MjEzMFxcdTIxMzFcXHUyMTMyXFx1MjEzM1xcdTIxM0VcXHUyMTNGXFx1MjE0NVxcdTIxODNcXHUyQzAwXFx1MkMwMVxcdTJDMDJcXHUyQzAzXFx1MkMwNFxcdTJDMDVcXHUyQzA2XFx1MkMwN1xcdTJDMDhcXHUyQzA5XFx1MkMwQVxcdTJDMEJcXHUyQzBDXFx1MkMwRFxcdTJDMEVcXHUyQzBGXFx1MkMxMFxcdTJDMTFcXHUyQzEyXFx1MkMxM1xcdTJDMTRcXHUyQzE1XFx1MkMxNlxcdTJDMTdcXHUyQzE4XFx1MkMxOVxcdTJDMUFcXHUyQzFCXFx1MkMxQ1xcdTJDMURcXHUyQzFFXFx1MkMxRlxcdTJDMjBcXHUyQzIxXFx1MkMyMlxcdTJDMjNcXHUyQzI0XFx1MkMyNVxcdTJDMjZcXHUyQzI3XFx1MkMyOFxcdTJDMjlcXHUyQzJBXFx1MkMyQlxcdTJDMkNcXHUyQzJEXFx1MkMyRVxcdTJDNjBcXHUyQzYyXFx1MkM2M1xcdTJDNjRcXHUyQzY3XFx1MkM2OVxcdTJDNkJcXHUyQzZEXFx1MkM2RVxcdTJDNkZcXHUyQzcyXFx1MkM3NVxcdTJDODBcXHUyQzgyXFx1MkM4NFxcdTJDODZcXHUyQzg4XFx1MkM4QVxcdTJDOENcXHUyQzhFXFx1MkM5MFxcdTJDOTJcXHUyQzk0XFx1MkM5NlxcdTJDOThcXHUyQzlBXFx1MkM5Q1xcdTJDOUVcXHUyQ0EwXFx1MkNBMlxcdTJDQTRcXHUyQ0E2XFx1MkNBOFxcdTJDQUFcXHUyQ0FDXFx1MkNBRVxcdTJDQjBcXHUyQ0IyXFx1MkNCNFxcdTJDQjZcXHUyQ0I4XFx1MkNCQVxcdTJDQkNcXHUyQ0JFXFx1MkNDMFxcdTJDQzJcXHUyQ0M0XFx1MkNDNlxcdTJDQzhcXHUyQ0NBXFx1MkNDQ1xcdTJDQ0VcXHUyQ0QwXFx1MkNEMlxcdTJDRDRcXHUyQ0Q2XFx1MkNEOFxcdTJDREFcXHUyQ0RDXFx1MkNERVxcdTJDRTBcXHUyQ0UyXFx1QTY0MFxcdUE2NDJcXHVBNjQ0XFx1QTY0NlxcdUE2NDhcXHVBNjRBXFx1QTY0Q1xcdUE2NEVcXHVBNjUwXFx1QTY1MlxcdUE2NTRcXHVBNjU2XFx1QTY1OFxcdUE2NUFcXHVBNjVDXFx1QTY1RVxcdUE2NjJcXHVBNjY0XFx1QTY2NlxcdUE2NjhcXHVBNjZBXFx1QTY2Q1xcdUE2ODBcXHVBNjgyXFx1QTY4NFxcdUE2ODZcXHVBNjg4XFx1QTY4QVxcdUE2OENcXHVBNjhFXFx1QTY5MFxcdUE2OTJcXHVBNjk0XFx1QTY5NlxcdUE3MjJcXHVBNzI0XFx1QTcyNlxcdUE3MjhcXHVBNzJBXFx1QTcyQ1xcdUE3MkVcXHVBNzMyXFx1QTczNFxcdUE3MzZcXHVBNzM4XFx1QTczQVxcdUE3M0NcXHVBNzNFXFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTc0NlxcdUE3NDhcXHVBNzRBXFx1QTc0Q1xcdUE3NEVcXHVBNzUwXFx1QTc1MlxcdUE3NTRcXHVBNzU2XFx1QTc1OFxcdUE3NUFcXHVBNzVDXFx1QTc1RVxcdUE3NjBcXHVBNzYyXFx1QTc2NFxcdUE3NjZcXHVBNzY4XFx1QTc2QVxcdUE3NkNcXHVBNzZFXFx1QTc3OVxcdUE3N0JcXHVBNzdEXFx1QTc3RVxcdUE3ODBcXHVBNzgyXFx1QTc4NFxcdUE3ODZcXHVBNzhCXFx1RkYyMVxcdUZGMjJcXHVGRjIzXFx1RkYyNFxcdUZGMjVcXHVGRjI2XFx1RkYyN1xcdUZGMjhcXHVGRjI5XFx1RkYyQVxcdUZGMkJcXHVGRjJDXFx1RkYyRFxcdUZGMkVcXHVGRjJGXFx1RkYzMFxcdUZGMzFcXHVGRjMyXFx1RkYzM1xcdUZGMzRcXHVGRjM1XFx1RkYzNlxcdUZGMzdcXHVGRjM4XFx1RkYzOVxcdUZGM0FdLyxcbiAgICAgICAgcGVnJGM4MyA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcXFxceEMwXFxcXHhDMVxcXFx4QzJcXFxceEMzXFxcXHhDNFxcXFx4QzVcXFxceEM2XFxcXHhDN1xcXFx4QzhcXFxceEM5XFxcXHhDQVxcXFx4Q0JcXFxceENDXFxcXHhDRFxcXFx4Q0VcXFxceENGXFxcXHhEMFxcXFx4RDFcXFxceEQyXFxcXHhEM1xcXFx4RDRcXFxceEQ1XFxcXHhENlxcXFx4RDhcXFxceEQ5XFxcXHhEQVxcXFx4REJcXFxceERDXFxcXHhERFxcXFx4REVcXFxcdTAxMDBcXFxcdTAxMDJcXFxcdTAxMDRcXFxcdTAxMDZcXFxcdTAxMDhcXFxcdTAxMEFcXFxcdTAxMENcXFxcdTAxMEVcXFxcdTAxMTBcXFxcdTAxMTJcXFxcdTAxMTRcXFxcdTAxMTZcXFxcdTAxMThcXFxcdTAxMUFcXFxcdTAxMUNcXFxcdTAxMUVcXFxcdTAxMjBcXFxcdTAxMjJcXFxcdTAxMjRcXFxcdTAxMjZcXFxcdTAxMjhcXFxcdTAxMkFcXFxcdTAxMkNcXFxcdTAxMkVcXFxcdTAxMzBcXFxcdTAxMzJcXFxcdTAxMzRcXFxcdTAxMzZcXFxcdTAxMzlcXFxcdTAxM0JcXFxcdTAxM0RcXFxcdTAxM0ZcXFxcdTAxNDFcXFxcdTAxNDNcXFxcdTAxNDVcXFxcdTAxNDdcXFxcdTAxNEFcXFxcdTAxNENcXFxcdTAxNEVcXFxcdTAxNTBcXFxcdTAxNTJcXFxcdTAxNTRcXFxcdTAxNTZcXFxcdTAxNThcXFxcdTAxNUFcXFxcdTAxNUNcXFxcdTAxNUVcXFxcdTAxNjBcXFxcdTAxNjJcXFxcdTAxNjRcXFxcdTAxNjZcXFxcdTAxNjhcXFxcdTAxNkFcXFxcdTAxNkNcXFxcdTAxNkVcXFxcdTAxNzBcXFxcdTAxNzJcXFxcdTAxNzRcXFxcdTAxNzZcXFxcdTAxNzhcXFxcdTAxNzlcXFxcdTAxN0JcXFxcdTAxN0RcXFxcdTAxODFcXFxcdTAxODJcXFxcdTAxODRcXFxcdTAxODZcXFxcdTAxODdcXFxcdTAxODlcXFxcdTAxOEFcXFxcdTAxOEJcXFxcdTAxOEVcXFxcdTAxOEZcXFxcdTAxOTBcXFxcdTAxOTFcXFxcdTAxOTNcXFxcdTAxOTRcXFxcdTAxOTZcXFxcdTAxOTdcXFxcdTAxOThcXFxcdTAxOUNcXFxcdTAxOURcXFxcdTAxOUZcXFxcdTAxQTBcXFxcdTAxQTJcXFxcdTAxQTRcXFxcdTAxQTZcXFxcdTAxQTdcXFxcdTAxQTlcXFxcdTAxQUNcXFxcdTAxQUVcXFxcdTAxQUZcXFxcdTAxQjFcXFxcdTAxQjJcXFxcdTAxQjNcXFxcdTAxQjVcXFxcdTAxQjdcXFxcdTAxQjhcXFxcdTAxQkNcXFxcdTAxQzRcXFxcdTAxQzdcXFxcdTAxQ0FcXFxcdTAxQ0RcXFxcdTAxQ0ZcXFxcdTAxRDFcXFxcdTAxRDNcXFxcdTAxRDVcXFxcdTAxRDdcXFxcdTAxRDlcXFxcdTAxREJcXFxcdTAxREVcXFxcdTAxRTBcXFxcdTAxRTJcXFxcdTAxRTRcXFxcdTAxRTZcXFxcdTAxRThcXFxcdTAxRUFcXFxcdTAxRUNcXFxcdTAxRUVcXFxcdTAxRjFcXFxcdTAxRjRcXFxcdTAxRjZcXFxcdTAxRjdcXFxcdTAxRjhcXFxcdTAxRkFcXFxcdTAxRkNcXFxcdTAxRkVcXFxcdTAyMDBcXFxcdTAyMDJcXFxcdTAyMDRcXFxcdTAyMDZcXFxcdTAyMDhcXFxcdTAyMEFcXFxcdTAyMENcXFxcdTAyMEVcXFxcdTAyMTBcXFxcdTAyMTJcXFxcdTAyMTRcXFxcdTAyMTZcXFxcdTAyMThcXFxcdTAyMUFcXFxcdTAyMUNcXFxcdTAyMUVcXFxcdTAyMjBcXFxcdTAyMjJcXFxcdTAyMjRcXFxcdTAyMjZcXFxcdTAyMjhcXFxcdTAyMkFcXFxcdTAyMkNcXFxcdTAyMkVcXFxcdTAyMzBcXFxcdTAyMzJcXFxcdTAyM0FcXFxcdTAyM0JcXFxcdTAyM0RcXFxcdTAyM0VcXFxcdTAyNDFcXFxcdTAyNDNcXFxcdTAyNDRcXFxcdTAyNDVcXFxcdTAyNDZcXFxcdTAyNDhcXFxcdTAyNEFcXFxcdTAyNENcXFxcdTAyNEVcXFxcdTAzNzBcXFxcdTAzNzJcXFxcdTAzNzZcXFxcdTAzODZcXFxcdTAzODhcXFxcdTAzODlcXFxcdTAzOEFcXFxcdTAzOENcXFxcdTAzOEVcXFxcdTAzOEZcXFxcdTAzOTFcXFxcdTAzOTJcXFxcdTAzOTNcXFxcdTAzOTRcXFxcdTAzOTVcXFxcdTAzOTZcXFxcdTAzOTdcXFxcdTAzOThcXFxcdTAzOTlcXFxcdTAzOUFcXFxcdTAzOUJcXFxcdTAzOUNcXFxcdTAzOURcXFxcdTAzOUVcXFxcdTAzOUZcXFxcdTAzQTBcXFxcdTAzQTFcXFxcdTAzQTNcXFxcdTAzQTRcXFxcdTAzQTVcXFxcdTAzQTZcXFxcdTAzQTdcXFxcdTAzQThcXFxcdTAzQTlcXFxcdTAzQUFcXFxcdTAzQUJcXFxcdTAzQ0ZcXFxcdTAzRDJcXFxcdTAzRDNcXFxcdTAzRDRcXFxcdTAzRDhcXFxcdTAzREFcXFxcdTAzRENcXFxcdTAzREVcXFxcdTAzRTBcXFxcdTAzRTJcXFxcdTAzRTRcXFxcdTAzRTZcXFxcdTAzRThcXFxcdTAzRUFcXFxcdTAzRUNcXFxcdTAzRUVcXFxcdTAzRjRcXFxcdTAzRjdcXFxcdTAzRjlcXFxcdTAzRkFcXFxcdTAzRkRcXFxcdTAzRkVcXFxcdTAzRkZcXFxcdTA0MDBcXFxcdTA0MDFcXFxcdTA0MDJcXFxcdTA0MDNcXFxcdTA0MDRcXFxcdTA0MDVcXFxcdTA0MDZcXFxcdTA0MDdcXFxcdTA0MDhcXFxcdTA0MDlcXFxcdTA0MEFcXFxcdTA0MEJcXFxcdTA0MENcXFxcdTA0MERcXFxcdTA0MEVcXFxcdTA0MEZcXFxcdTA0MTBcXFxcdTA0MTFcXFxcdTA0MTJcXFxcdTA0MTNcXFxcdTA0MTRcXFxcdTA0MTVcXFxcdTA0MTZcXFxcdTA0MTdcXFxcdTA0MThcXFxcdTA0MTlcXFxcdTA0MUFcXFxcdTA0MUJcXFxcdTA0MUNcXFxcdTA0MURcXFxcdTA0MUVcXFxcdTA0MUZcXFxcdTA0MjBcXFxcdTA0MjFcXFxcdTA0MjJcXFxcdTA0MjNcXFxcdTA0MjRcXFxcdTA0MjVcXFxcdTA0MjZcXFxcdTA0MjdcXFxcdTA0MjhcXFxcdTA0MjlcXFxcdTA0MkFcXFxcdTA0MkJcXFxcdTA0MkNcXFxcdTA0MkRcXFxcdTA0MkVcXFxcdTA0MkZcXFxcdTA0NjBcXFxcdTA0NjJcXFxcdTA0NjRcXFxcdTA0NjZcXFxcdTA0NjhcXFxcdTA0NkFcXFxcdTA0NkNcXFxcdTA0NkVcXFxcdTA0NzBcXFxcdTA0NzJcXFxcdTA0NzRcXFxcdTA0NzZcXFxcdTA0NzhcXFxcdTA0N0FcXFxcdTA0N0NcXFxcdTA0N0VcXFxcdTA0ODBcXFxcdTA0OEFcXFxcdTA0OENcXFxcdTA0OEVcXFxcdTA0OTBcXFxcdTA0OTJcXFxcdTA0OTRcXFxcdTA0OTZcXFxcdTA0OThcXFxcdTA0OUFcXFxcdTA0OUNcXFxcdTA0OUVcXFxcdTA0QTBcXFxcdTA0QTJcXFxcdTA0QTRcXFxcdTA0QTZcXFxcdTA0QThcXFxcdTA0QUFcXFxcdTA0QUNcXFxcdTA0QUVcXFxcdTA0QjBcXFxcdTA0QjJcXFxcdTA0QjRcXFxcdTA0QjZcXFxcdTA0QjhcXFxcdTA0QkFcXFxcdTA0QkNcXFxcdTA0QkVcXFxcdTA0QzBcXFxcdTA0QzFcXFxcdTA0QzNcXFxcdTA0QzVcXFxcdTA0QzdcXFxcdTA0QzlcXFxcdTA0Q0JcXFxcdTA0Q0RcXFxcdTA0RDBcXFxcdTA0RDJcXFxcdTA0RDRcXFxcdTA0RDZcXFxcdTA0RDhcXFxcdTA0REFcXFxcdTA0RENcXFxcdTA0REVcXFxcdTA0RTBcXFxcdTA0RTJcXFxcdTA0RTRcXFxcdTA0RTZcXFxcdTA0RThcXFxcdTA0RUFcXFxcdTA0RUNcXFxcdTA0RUVcXFxcdTA0RjBcXFxcdTA0RjJcXFxcdTA0RjRcXFxcdTA0RjZcXFxcdTA0RjhcXFxcdTA0RkFcXFxcdTA0RkNcXFxcdTA0RkVcXFxcdTA1MDBcXFxcdTA1MDJcXFxcdTA1MDRcXFxcdTA1MDZcXFxcdTA1MDhcXFxcdTA1MEFcXFxcdTA1MENcXFxcdTA1MEVcXFxcdTA1MTBcXFxcdTA1MTJcXFxcdTA1MTRcXFxcdTA1MTZcXFxcdTA1MThcXFxcdTA1MUFcXFxcdTA1MUNcXFxcdTA1MUVcXFxcdTA1MjBcXFxcdTA1MjJcXFxcdTA1MzFcXFxcdTA1MzJcXFxcdTA1MzNcXFxcdTA1MzRcXFxcdTA1MzVcXFxcdTA1MzZcXFxcdTA1MzdcXFxcdTA1MzhcXFxcdTA1MzlcXFxcdTA1M0FcXFxcdTA1M0JcXFxcdTA1M0NcXFxcdTA1M0RcXFxcdTA1M0VcXFxcdTA1M0ZcXFxcdTA1NDBcXFxcdTA1NDFcXFxcdTA1NDJcXFxcdTA1NDNcXFxcdTA1NDRcXFxcdTA1NDVcXFxcdTA1NDZcXFxcdTA1NDdcXFxcdTA1NDhcXFxcdTA1NDlcXFxcdTA1NEFcXFxcdTA1NEJcXFxcdTA1NENcXFxcdTA1NERcXFxcdTA1NEVcXFxcdTA1NEZcXFxcdTA1NTBcXFxcdTA1NTFcXFxcdTA1NTJcXFxcdTA1NTNcXFxcdTA1NTRcXFxcdTA1NTVcXFxcdTA1NTZcXFxcdTEwQTBcXFxcdTEwQTFcXFxcdTEwQTJcXFxcdTEwQTNcXFxcdTEwQTRcXFxcdTEwQTVcXFxcdTEwQTZcXFxcdTEwQTdcXFxcdTEwQThcXFxcdTEwQTlcXFxcdTEwQUFcXFxcdTEwQUJcXFxcdTEwQUNcXFxcdTEwQURcXFxcdTEwQUVcXFxcdTEwQUZcXFxcdTEwQjBcXFxcdTEwQjFcXFxcdTEwQjJcXFxcdTEwQjNcXFxcdTEwQjRcXFxcdTEwQjVcXFxcdTEwQjZcXFxcdTEwQjdcXFxcdTEwQjhcXFxcdTEwQjlcXFxcdTEwQkFcXFxcdTEwQkJcXFxcdTEwQkNcXFxcdTEwQkRcXFxcdTEwQkVcXFxcdTEwQkZcXFxcdTEwQzBcXFxcdTEwQzFcXFxcdTEwQzJcXFxcdTEwQzNcXFxcdTEwQzRcXFxcdTEwQzVcXFxcdTFFMDBcXFxcdTFFMDJcXFxcdTFFMDRcXFxcdTFFMDZcXFxcdTFFMDhcXFxcdTFFMEFcXFxcdTFFMENcXFxcdTFFMEVcXFxcdTFFMTBcXFxcdTFFMTJcXFxcdTFFMTRcXFxcdTFFMTZcXFxcdTFFMThcXFxcdTFFMUFcXFxcdTFFMUNcXFxcdTFFMUVcXFxcdTFFMjBcXFxcdTFFMjJcXFxcdTFFMjRcXFxcdTFFMjZcXFxcdTFFMjhcXFxcdTFFMkFcXFxcdTFFMkNcXFxcdTFFMkVcXFxcdTFFMzBcXFxcdTFFMzJcXFxcdTFFMzRcXFxcdTFFMzZcXFxcdTFFMzhcXFxcdTFFM0FcXFxcdTFFM0NcXFxcdTFFM0VcXFxcdTFFNDBcXFxcdTFFNDJcXFxcdTFFNDRcXFxcdTFFNDZcXFxcdTFFNDhcXFxcdTFFNEFcXFxcdTFFNENcXFxcdTFFNEVcXFxcdTFFNTBcXFxcdTFFNTJcXFxcdTFFNTRcXFxcdTFFNTZcXFxcdTFFNThcXFxcdTFFNUFcXFxcdTFFNUNcXFxcdTFFNUVcXFxcdTFFNjBcXFxcdTFFNjJcXFxcdTFFNjRcXFxcdTFFNjZcXFxcdTFFNjhcXFxcdTFFNkFcXFxcdTFFNkNcXFxcdTFFNkVcXFxcdTFFNzBcXFxcdTFFNzJcXFxcdTFFNzRcXFxcdTFFNzZcXFxcdTFFNzhcXFxcdTFFN0FcXFxcdTFFN0NcXFxcdTFFN0VcXFxcdTFFODBcXFxcdTFFODJcXFxcdTFFODRcXFxcdTFFODZcXFxcdTFFODhcXFxcdTFFOEFcXFxcdTFFOENcXFxcdTFFOEVcXFxcdTFFOTBcXFxcdTFFOTJcXFxcdTFFOTRcXFxcdTFFOUVcXFxcdTFFQTBcXFxcdTFFQTJcXFxcdTFFQTRcXFxcdTFFQTZcXFxcdTFFQThcXFxcdTFFQUFcXFxcdTFFQUNcXFxcdTFFQUVcXFxcdTFFQjBcXFxcdTFFQjJcXFxcdTFFQjRcXFxcdTFFQjZcXFxcdTFFQjhcXFxcdTFFQkFcXFxcdTFFQkNcXFxcdTFFQkVcXFxcdTFFQzBcXFxcdTFFQzJcXFxcdTFFQzRcXFxcdTFFQzZcXFxcdTFFQzhcXFxcdTFFQ0FcXFxcdTFFQ0NcXFxcdTFFQ0VcXFxcdTFFRDBcXFxcdTFFRDJcXFxcdTFFRDRcXFxcdTFFRDZcXFxcdTFFRDhcXFxcdTFFREFcXFxcdTFFRENcXFxcdTFFREVcXFxcdTFFRTBcXFxcdTFFRTJcXFxcdTFFRTRcXFxcdTFFRTZcXFxcdTFFRThcXFxcdTFFRUFcXFxcdTFFRUNcXFxcdTFFRUVcXFxcdTFFRjBcXFxcdTFFRjJcXFxcdTFFRjRcXFxcdTFFRjZcXFxcdTFFRjhcXFxcdTFFRkFcXFxcdTFFRkNcXFxcdTFFRkVcXFxcdTFGMDhcXFxcdTFGMDlcXFxcdTFGMEFcXFxcdTFGMEJcXFxcdTFGMENcXFxcdTFGMERcXFxcdTFGMEVcXFxcdTFGMEZcXFxcdTFGMThcXFxcdTFGMTlcXFxcdTFGMUFcXFxcdTFGMUJcXFxcdTFGMUNcXFxcdTFGMURcXFxcdTFGMjhcXFxcdTFGMjlcXFxcdTFGMkFcXFxcdTFGMkJcXFxcdTFGMkNcXFxcdTFGMkRcXFxcdTFGMkVcXFxcdTFGMkZcXFxcdTFGMzhcXFxcdTFGMzlcXFxcdTFGM0FcXFxcdTFGM0JcXFxcdTFGM0NcXFxcdTFGM0RcXFxcdTFGM0VcXFxcdTFGM0ZcXFxcdTFGNDhcXFxcdTFGNDlcXFxcdTFGNEFcXFxcdTFGNEJcXFxcdTFGNENcXFxcdTFGNERcXFxcdTFGNTlcXFxcdTFGNUJcXFxcdTFGNURcXFxcdTFGNUZcXFxcdTFGNjhcXFxcdTFGNjlcXFxcdTFGNkFcXFxcdTFGNkJcXFxcdTFGNkNcXFxcdTFGNkRcXFxcdTFGNkVcXFxcdTFGNkZcXFxcdTFGQjhcXFxcdTFGQjlcXFxcdTFGQkFcXFxcdTFGQkJcXFxcdTFGQzhcXFxcdTFGQzlcXFxcdTFGQ0FcXFxcdTFGQ0JcXFxcdTFGRDhcXFxcdTFGRDlcXFxcdTFGREFcXFxcdTFGREJcXFxcdTFGRThcXFxcdTFGRTlcXFxcdTFGRUFcXFxcdTFGRUJcXFxcdTFGRUNcXFxcdTFGRjhcXFxcdTFGRjlcXFxcdTFGRkFcXFxcdTFGRkJcXFxcdTIxMDJcXFxcdTIxMDdcXFxcdTIxMEJcXFxcdTIxMENcXFxcdTIxMERcXFxcdTIxMTBcXFxcdTIxMTFcXFxcdTIxMTJcXFxcdTIxMTVcXFxcdTIxMTlcXFxcdTIxMUFcXFxcdTIxMUJcXFxcdTIxMUNcXFxcdTIxMURcXFxcdTIxMjRcXFxcdTIxMjZcXFxcdTIxMjhcXFxcdTIxMkFcXFxcdTIxMkJcXFxcdTIxMkNcXFxcdTIxMkRcXFxcdTIxMzBcXFxcdTIxMzFcXFxcdTIxMzJcXFxcdTIxMzNcXFxcdTIxM0VcXFxcdTIxM0ZcXFxcdTIxNDVcXFxcdTIxODNcXFxcdTJDMDBcXFxcdTJDMDFcXFxcdTJDMDJcXFxcdTJDMDNcXFxcdTJDMDRcXFxcdTJDMDVcXFxcdTJDMDZcXFxcdTJDMDdcXFxcdTJDMDhcXFxcdTJDMDlcXFxcdTJDMEFcXFxcdTJDMEJcXFxcdTJDMENcXFxcdTJDMERcXFxcdTJDMEVcXFxcdTJDMEZcXFxcdTJDMTBcXFxcdTJDMTFcXFxcdTJDMTJcXFxcdTJDMTNcXFxcdTJDMTRcXFxcdTJDMTVcXFxcdTJDMTZcXFxcdTJDMTdcXFxcdTJDMThcXFxcdTJDMTlcXFxcdTJDMUFcXFxcdTJDMUJcXFxcdTJDMUNcXFxcdTJDMURcXFxcdTJDMUVcXFxcdTJDMUZcXFxcdTJDMjBcXFxcdTJDMjFcXFxcdTJDMjJcXFxcdTJDMjNcXFxcdTJDMjRcXFxcdTJDMjVcXFxcdTJDMjZcXFxcdTJDMjdcXFxcdTJDMjhcXFxcdTJDMjlcXFxcdTJDMkFcXFxcdTJDMkJcXFxcdTJDMkNcXFxcdTJDMkRcXFxcdTJDMkVcXFxcdTJDNjBcXFxcdTJDNjJcXFxcdTJDNjNcXFxcdTJDNjRcXFxcdTJDNjdcXFxcdTJDNjlcXFxcdTJDNkJcXFxcdTJDNkRcXFxcdTJDNkVcXFxcdTJDNkZcXFxcdTJDNzJcXFxcdTJDNzVcXFxcdTJDODBcXFxcdTJDODJcXFxcdTJDODRcXFxcdTJDODZcXFxcdTJDODhcXFxcdTJDOEFcXFxcdTJDOENcXFxcdTJDOEVcXFxcdTJDOTBcXFxcdTJDOTJcXFxcdTJDOTRcXFxcdTJDOTZcXFxcdTJDOThcXFxcdTJDOUFcXFxcdTJDOUNcXFxcdTJDOUVcXFxcdTJDQTBcXFxcdTJDQTJcXFxcdTJDQTRcXFxcdTJDQTZcXFxcdTJDQThcXFxcdTJDQUFcXFxcdTJDQUNcXFxcdTJDQUVcXFxcdTJDQjBcXFxcdTJDQjJcXFxcdTJDQjRcXFxcdTJDQjZcXFxcdTJDQjhcXFxcdTJDQkFcXFxcdTJDQkNcXFxcdTJDQkVcXFxcdTJDQzBcXFxcdTJDQzJcXFxcdTJDQzRcXFxcdTJDQzZcXFxcdTJDQzhcXFxcdTJDQ0FcXFxcdTJDQ0NcXFxcdTJDQ0VcXFxcdTJDRDBcXFxcdTJDRDJcXFxcdTJDRDRcXFxcdTJDRDZcXFxcdTJDRDhcXFxcdTJDREFcXFxcdTJDRENcXFxcdTJDREVcXFxcdTJDRTBcXFxcdTJDRTJcXFxcdUE2NDBcXFxcdUE2NDJcXFxcdUE2NDRcXFxcdUE2NDZcXFxcdUE2NDhcXFxcdUE2NEFcXFxcdUE2NENcXFxcdUE2NEVcXFxcdUE2NTBcXFxcdUE2NTJcXFxcdUE2NTRcXFxcdUE2NTZcXFxcdUE2NThcXFxcdUE2NUFcXFxcdUE2NUNcXFxcdUE2NUVcXFxcdUE2NjJcXFxcdUE2NjRcXFxcdUE2NjZcXFxcdUE2NjhcXFxcdUE2NkFcXFxcdUE2NkNcXFxcdUE2ODBcXFxcdUE2ODJcXFxcdUE2ODRcXFxcdUE2ODZcXFxcdUE2ODhcXFxcdUE2OEFcXFxcdUE2OENcXFxcdUE2OEVcXFxcdUE2OTBcXFxcdUE2OTJcXFxcdUE2OTRcXFxcdUE2OTZcXFxcdUE3MjJcXFxcdUE3MjRcXFxcdUE3MjZcXFxcdUE3MjhcXFxcdUE3MkFcXFxcdUE3MkNcXFxcdUE3MkVcXFxcdUE3MzJcXFxcdUE3MzRcXFxcdUE3MzZcXFxcdUE3MzhcXFxcdUE3M0FcXFxcdUE3M0NcXFxcdUE3M0VcXFxcdUE3NDBcXFxcdUE3NDJcXFxcdUE3NDRcXFxcdUE3NDZcXFxcdUE3NDhcXFxcdUE3NEFcXFxcdUE3NENcXFxcdUE3NEVcXFxcdUE3NTBcXFxcdUE3NTJcXFxcdUE3NTRcXFxcdUE3NTZcXFxcdUE3NThcXFxcdUE3NUFcXFxcdUE3NUNcXFxcdUE3NUVcXFxcdUE3NjBcXFxcdUE3NjJcXFxcdUE3NjRcXFxcdUE3NjZcXFxcdUE3NjhcXFxcdUE3NkFcXFxcdUE3NkNcXFxcdUE3NkVcXFxcdUE3NzlcXFxcdUE3N0JcXFxcdUE3N0RcXFxcdUE3N0VcXFxcdUE3ODBcXFxcdUE3ODJcXFxcdUE3ODRcXFxcdUE3ODZcXFxcdUE3OEJcXFxcdUZGMjFcXFxcdUZGMjJcXFxcdUZGMjNcXFxcdUZGMjRcXFxcdUZGMjVcXFxcdUZGMjZcXFxcdUZGMjdcXFxcdUZGMjhcXFxcdUZGMjlcXFxcdUZGMkFcXFxcdUZGMkJcXFxcdUZGMkNcXFxcdUZGMkRcXFxcdUZGMkVcXFxcdUZGMkZcXFxcdUZGMzBcXFxcdUZGMzFcXFxcdUZGMzJcXFxcdUZGMzNcXFxcdUZGMzRcXFxcdUZGMzVcXFxcdUZGMzZcXFxcdUZGMzdcXFxcdUZGMzhcXFxcdUZGMzlcXFxcdUZGM0FdXCIsIGRlc2NyaXB0aW9uOiBcIltBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlxcXFx4QzBcXFxceEMxXFxcXHhDMlxcXFx4QzNcXFxceEM0XFxcXHhDNVxcXFx4QzZcXFxceEM3XFxcXHhDOFxcXFx4QzlcXFxceENBXFxcXHhDQlxcXFx4Q0NcXFxceENEXFxcXHhDRVxcXFx4Q0ZcXFxceEQwXFxcXHhEMVxcXFx4RDJcXFxceEQzXFxcXHhENFxcXFx4RDVcXFxceEQ2XFxcXHhEOFxcXFx4RDlcXFxceERBXFxcXHhEQlxcXFx4RENcXFxceEREXFxcXHhERVxcXFx1MDEwMFxcXFx1MDEwMlxcXFx1MDEwNFxcXFx1MDEwNlxcXFx1MDEwOFxcXFx1MDEwQVxcXFx1MDEwQ1xcXFx1MDEwRVxcXFx1MDExMFxcXFx1MDExMlxcXFx1MDExNFxcXFx1MDExNlxcXFx1MDExOFxcXFx1MDExQVxcXFx1MDExQ1xcXFx1MDExRVxcXFx1MDEyMFxcXFx1MDEyMlxcXFx1MDEyNFxcXFx1MDEyNlxcXFx1MDEyOFxcXFx1MDEyQVxcXFx1MDEyQ1xcXFx1MDEyRVxcXFx1MDEzMFxcXFx1MDEzMlxcXFx1MDEzNFxcXFx1MDEzNlxcXFx1MDEzOVxcXFx1MDEzQlxcXFx1MDEzRFxcXFx1MDEzRlxcXFx1MDE0MVxcXFx1MDE0M1xcXFx1MDE0NVxcXFx1MDE0N1xcXFx1MDE0QVxcXFx1MDE0Q1xcXFx1MDE0RVxcXFx1MDE1MFxcXFx1MDE1MlxcXFx1MDE1NFxcXFx1MDE1NlxcXFx1MDE1OFxcXFx1MDE1QVxcXFx1MDE1Q1xcXFx1MDE1RVxcXFx1MDE2MFxcXFx1MDE2MlxcXFx1MDE2NFxcXFx1MDE2NlxcXFx1MDE2OFxcXFx1MDE2QVxcXFx1MDE2Q1xcXFx1MDE2RVxcXFx1MDE3MFxcXFx1MDE3MlxcXFx1MDE3NFxcXFx1MDE3NlxcXFx1MDE3OFxcXFx1MDE3OVxcXFx1MDE3QlxcXFx1MDE3RFxcXFx1MDE4MVxcXFx1MDE4MlxcXFx1MDE4NFxcXFx1MDE4NlxcXFx1MDE4N1xcXFx1MDE4OVxcXFx1MDE4QVxcXFx1MDE4QlxcXFx1MDE4RVxcXFx1MDE4RlxcXFx1MDE5MFxcXFx1MDE5MVxcXFx1MDE5M1xcXFx1MDE5NFxcXFx1MDE5NlxcXFx1MDE5N1xcXFx1MDE5OFxcXFx1MDE5Q1xcXFx1MDE5RFxcXFx1MDE5RlxcXFx1MDFBMFxcXFx1MDFBMlxcXFx1MDFBNFxcXFx1MDFBNlxcXFx1MDFBN1xcXFx1MDFBOVxcXFx1MDFBQ1xcXFx1MDFBRVxcXFx1MDFBRlxcXFx1MDFCMVxcXFx1MDFCMlxcXFx1MDFCM1xcXFx1MDFCNVxcXFx1MDFCN1xcXFx1MDFCOFxcXFx1MDFCQ1xcXFx1MDFDNFxcXFx1MDFDN1xcXFx1MDFDQVxcXFx1MDFDRFxcXFx1MDFDRlxcXFx1MDFEMVxcXFx1MDFEM1xcXFx1MDFENVxcXFx1MDFEN1xcXFx1MDFEOVxcXFx1MDFEQlxcXFx1MDFERVxcXFx1MDFFMFxcXFx1MDFFMlxcXFx1MDFFNFxcXFx1MDFFNlxcXFx1MDFFOFxcXFx1MDFFQVxcXFx1MDFFQ1xcXFx1MDFFRVxcXFx1MDFGMVxcXFx1MDFGNFxcXFx1MDFGNlxcXFx1MDFGN1xcXFx1MDFGOFxcXFx1MDFGQVxcXFx1MDFGQ1xcXFx1MDFGRVxcXFx1MDIwMFxcXFx1MDIwMlxcXFx1MDIwNFxcXFx1MDIwNlxcXFx1MDIwOFxcXFx1MDIwQVxcXFx1MDIwQ1xcXFx1MDIwRVxcXFx1MDIxMFxcXFx1MDIxMlxcXFx1MDIxNFxcXFx1MDIxNlxcXFx1MDIxOFxcXFx1MDIxQVxcXFx1MDIxQ1xcXFx1MDIxRVxcXFx1MDIyMFxcXFx1MDIyMlxcXFx1MDIyNFxcXFx1MDIyNlxcXFx1MDIyOFxcXFx1MDIyQVxcXFx1MDIyQ1xcXFx1MDIyRVxcXFx1MDIzMFxcXFx1MDIzMlxcXFx1MDIzQVxcXFx1MDIzQlxcXFx1MDIzRFxcXFx1MDIzRVxcXFx1MDI0MVxcXFx1MDI0M1xcXFx1MDI0NFxcXFx1MDI0NVxcXFx1MDI0NlxcXFx1MDI0OFxcXFx1MDI0QVxcXFx1MDI0Q1xcXFx1MDI0RVxcXFx1MDM3MFxcXFx1MDM3MlxcXFx1MDM3NlxcXFx1MDM4NlxcXFx1MDM4OFxcXFx1MDM4OVxcXFx1MDM4QVxcXFx1MDM4Q1xcXFx1MDM4RVxcXFx1MDM4RlxcXFx1MDM5MVxcXFx1MDM5MlxcXFx1MDM5M1xcXFx1MDM5NFxcXFx1MDM5NVxcXFx1MDM5NlxcXFx1MDM5N1xcXFx1MDM5OFxcXFx1MDM5OVxcXFx1MDM5QVxcXFx1MDM5QlxcXFx1MDM5Q1xcXFx1MDM5RFxcXFx1MDM5RVxcXFx1MDM5RlxcXFx1MDNBMFxcXFx1MDNBMVxcXFx1MDNBM1xcXFx1MDNBNFxcXFx1MDNBNVxcXFx1MDNBNlxcXFx1MDNBN1xcXFx1MDNBOFxcXFx1MDNBOVxcXFx1MDNBQVxcXFx1MDNBQlxcXFx1MDNDRlxcXFx1MDNEMlxcXFx1MDNEM1xcXFx1MDNENFxcXFx1MDNEOFxcXFx1MDNEQVxcXFx1MDNEQ1xcXFx1MDNERVxcXFx1MDNFMFxcXFx1MDNFMlxcXFx1MDNFNFxcXFx1MDNFNlxcXFx1MDNFOFxcXFx1MDNFQVxcXFx1MDNFQ1xcXFx1MDNFRVxcXFx1MDNGNFxcXFx1MDNGN1xcXFx1MDNGOVxcXFx1MDNGQVxcXFx1MDNGRFxcXFx1MDNGRVxcXFx1MDNGRlxcXFx1MDQwMFxcXFx1MDQwMVxcXFx1MDQwMlxcXFx1MDQwM1xcXFx1MDQwNFxcXFx1MDQwNVxcXFx1MDQwNlxcXFx1MDQwN1xcXFx1MDQwOFxcXFx1MDQwOVxcXFx1MDQwQVxcXFx1MDQwQlxcXFx1MDQwQ1xcXFx1MDQwRFxcXFx1MDQwRVxcXFx1MDQwRlxcXFx1MDQxMFxcXFx1MDQxMVxcXFx1MDQxMlxcXFx1MDQxM1xcXFx1MDQxNFxcXFx1MDQxNVxcXFx1MDQxNlxcXFx1MDQxN1xcXFx1MDQxOFxcXFx1MDQxOVxcXFx1MDQxQVxcXFx1MDQxQlxcXFx1MDQxQ1xcXFx1MDQxRFxcXFx1MDQxRVxcXFx1MDQxRlxcXFx1MDQyMFxcXFx1MDQyMVxcXFx1MDQyMlxcXFx1MDQyM1xcXFx1MDQyNFxcXFx1MDQyNVxcXFx1MDQyNlxcXFx1MDQyN1xcXFx1MDQyOFxcXFx1MDQyOVxcXFx1MDQyQVxcXFx1MDQyQlxcXFx1MDQyQ1xcXFx1MDQyRFxcXFx1MDQyRVxcXFx1MDQyRlxcXFx1MDQ2MFxcXFx1MDQ2MlxcXFx1MDQ2NFxcXFx1MDQ2NlxcXFx1MDQ2OFxcXFx1MDQ2QVxcXFx1MDQ2Q1xcXFx1MDQ2RVxcXFx1MDQ3MFxcXFx1MDQ3MlxcXFx1MDQ3NFxcXFx1MDQ3NlxcXFx1MDQ3OFxcXFx1MDQ3QVxcXFx1MDQ3Q1xcXFx1MDQ3RVxcXFx1MDQ4MFxcXFx1MDQ4QVxcXFx1MDQ4Q1xcXFx1MDQ4RVxcXFx1MDQ5MFxcXFx1MDQ5MlxcXFx1MDQ5NFxcXFx1MDQ5NlxcXFx1MDQ5OFxcXFx1MDQ5QVxcXFx1MDQ5Q1xcXFx1MDQ5RVxcXFx1MDRBMFxcXFx1MDRBMlxcXFx1MDRBNFxcXFx1MDRBNlxcXFx1MDRBOFxcXFx1MDRBQVxcXFx1MDRBQ1xcXFx1MDRBRVxcXFx1MDRCMFxcXFx1MDRCMlxcXFx1MDRCNFxcXFx1MDRCNlxcXFx1MDRCOFxcXFx1MDRCQVxcXFx1MDRCQ1xcXFx1MDRCRVxcXFx1MDRDMFxcXFx1MDRDMVxcXFx1MDRDM1xcXFx1MDRDNVxcXFx1MDRDN1xcXFx1MDRDOVxcXFx1MDRDQlxcXFx1MDRDRFxcXFx1MDREMFxcXFx1MDREMlxcXFx1MDRENFxcXFx1MDRENlxcXFx1MDREOFxcXFx1MDREQVxcXFx1MDREQ1xcXFx1MDRERVxcXFx1MDRFMFxcXFx1MDRFMlxcXFx1MDRFNFxcXFx1MDRFNlxcXFx1MDRFOFxcXFx1MDRFQVxcXFx1MDRFQ1xcXFx1MDRFRVxcXFx1MDRGMFxcXFx1MDRGMlxcXFx1MDRGNFxcXFx1MDRGNlxcXFx1MDRGOFxcXFx1MDRGQVxcXFx1MDRGQ1xcXFx1MDRGRVxcXFx1MDUwMFxcXFx1MDUwMlxcXFx1MDUwNFxcXFx1MDUwNlxcXFx1MDUwOFxcXFx1MDUwQVxcXFx1MDUwQ1xcXFx1MDUwRVxcXFx1MDUxMFxcXFx1MDUxMlxcXFx1MDUxNFxcXFx1MDUxNlxcXFx1MDUxOFxcXFx1MDUxQVxcXFx1MDUxQ1xcXFx1MDUxRVxcXFx1MDUyMFxcXFx1MDUyMlxcXFx1MDUzMVxcXFx1MDUzMlxcXFx1MDUzM1xcXFx1MDUzNFxcXFx1MDUzNVxcXFx1MDUzNlxcXFx1MDUzN1xcXFx1MDUzOFxcXFx1MDUzOVxcXFx1MDUzQVxcXFx1MDUzQlxcXFx1MDUzQ1xcXFx1MDUzRFxcXFx1MDUzRVxcXFx1MDUzRlxcXFx1MDU0MFxcXFx1MDU0MVxcXFx1MDU0MlxcXFx1MDU0M1xcXFx1MDU0NFxcXFx1MDU0NVxcXFx1MDU0NlxcXFx1MDU0N1xcXFx1MDU0OFxcXFx1MDU0OVxcXFx1MDU0QVxcXFx1MDU0QlxcXFx1MDU0Q1xcXFx1MDU0RFxcXFx1MDU0RVxcXFx1MDU0RlxcXFx1MDU1MFxcXFx1MDU1MVxcXFx1MDU1MlxcXFx1MDU1M1xcXFx1MDU1NFxcXFx1MDU1NVxcXFx1MDU1NlxcXFx1MTBBMFxcXFx1MTBBMVxcXFx1MTBBMlxcXFx1MTBBM1xcXFx1MTBBNFxcXFx1MTBBNVxcXFx1MTBBNlxcXFx1MTBBN1xcXFx1MTBBOFxcXFx1MTBBOVxcXFx1MTBBQVxcXFx1MTBBQlxcXFx1MTBBQ1xcXFx1MTBBRFxcXFx1MTBBRVxcXFx1MTBBRlxcXFx1MTBCMFxcXFx1MTBCMVxcXFx1MTBCMlxcXFx1MTBCM1xcXFx1MTBCNFxcXFx1MTBCNVxcXFx1MTBCNlxcXFx1MTBCN1xcXFx1MTBCOFxcXFx1MTBCOVxcXFx1MTBCQVxcXFx1MTBCQlxcXFx1MTBCQ1xcXFx1MTBCRFxcXFx1MTBCRVxcXFx1MTBCRlxcXFx1MTBDMFxcXFx1MTBDMVxcXFx1MTBDMlxcXFx1MTBDM1xcXFx1MTBDNFxcXFx1MTBDNVxcXFx1MUUwMFxcXFx1MUUwMlxcXFx1MUUwNFxcXFx1MUUwNlxcXFx1MUUwOFxcXFx1MUUwQVxcXFx1MUUwQ1xcXFx1MUUwRVxcXFx1MUUxMFxcXFx1MUUxMlxcXFx1MUUxNFxcXFx1MUUxNlxcXFx1MUUxOFxcXFx1MUUxQVxcXFx1MUUxQ1xcXFx1MUUxRVxcXFx1MUUyMFxcXFx1MUUyMlxcXFx1MUUyNFxcXFx1MUUyNlxcXFx1MUUyOFxcXFx1MUUyQVxcXFx1MUUyQ1xcXFx1MUUyRVxcXFx1MUUzMFxcXFx1MUUzMlxcXFx1MUUzNFxcXFx1MUUzNlxcXFx1MUUzOFxcXFx1MUUzQVxcXFx1MUUzQ1xcXFx1MUUzRVxcXFx1MUU0MFxcXFx1MUU0MlxcXFx1MUU0NFxcXFx1MUU0NlxcXFx1MUU0OFxcXFx1MUU0QVxcXFx1MUU0Q1xcXFx1MUU0RVxcXFx1MUU1MFxcXFx1MUU1MlxcXFx1MUU1NFxcXFx1MUU1NlxcXFx1MUU1OFxcXFx1MUU1QVxcXFx1MUU1Q1xcXFx1MUU1RVxcXFx1MUU2MFxcXFx1MUU2MlxcXFx1MUU2NFxcXFx1MUU2NlxcXFx1MUU2OFxcXFx1MUU2QVxcXFx1MUU2Q1xcXFx1MUU2RVxcXFx1MUU3MFxcXFx1MUU3MlxcXFx1MUU3NFxcXFx1MUU3NlxcXFx1MUU3OFxcXFx1MUU3QVxcXFx1MUU3Q1xcXFx1MUU3RVxcXFx1MUU4MFxcXFx1MUU4MlxcXFx1MUU4NFxcXFx1MUU4NlxcXFx1MUU4OFxcXFx1MUU4QVxcXFx1MUU4Q1xcXFx1MUU4RVxcXFx1MUU5MFxcXFx1MUU5MlxcXFx1MUU5NFxcXFx1MUU5RVxcXFx1MUVBMFxcXFx1MUVBMlxcXFx1MUVBNFxcXFx1MUVBNlxcXFx1MUVBOFxcXFx1MUVBQVxcXFx1MUVBQ1xcXFx1MUVBRVxcXFx1MUVCMFxcXFx1MUVCMlxcXFx1MUVCNFxcXFx1MUVCNlxcXFx1MUVCOFxcXFx1MUVCQVxcXFx1MUVCQ1xcXFx1MUVCRVxcXFx1MUVDMFxcXFx1MUVDMlxcXFx1MUVDNFxcXFx1MUVDNlxcXFx1MUVDOFxcXFx1MUVDQVxcXFx1MUVDQ1xcXFx1MUVDRVxcXFx1MUVEMFxcXFx1MUVEMlxcXFx1MUVENFxcXFx1MUVENlxcXFx1MUVEOFxcXFx1MUVEQVxcXFx1MUVEQ1xcXFx1MUVERVxcXFx1MUVFMFxcXFx1MUVFMlxcXFx1MUVFNFxcXFx1MUVFNlxcXFx1MUVFOFxcXFx1MUVFQVxcXFx1MUVFQ1xcXFx1MUVFRVxcXFx1MUVGMFxcXFx1MUVGMlxcXFx1MUVGNFxcXFx1MUVGNlxcXFx1MUVGOFxcXFx1MUVGQVxcXFx1MUVGQ1xcXFx1MUVGRVxcXFx1MUYwOFxcXFx1MUYwOVxcXFx1MUYwQVxcXFx1MUYwQlxcXFx1MUYwQ1xcXFx1MUYwRFxcXFx1MUYwRVxcXFx1MUYwRlxcXFx1MUYxOFxcXFx1MUYxOVxcXFx1MUYxQVxcXFx1MUYxQlxcXFx1MUYxQ1xcXFx1MUYxRFxcXFx1MUYyOFxcXFx1MUYyOVxcXFx1MUYyQVxcXFx1MUYyQlxcXFx1MUYyQ1xcXFx1MUYyRFxcXFx1MUYyRVxcXFx1MUYyRlxcXFx1MUYzOFxcXFx1MUYzOVxcXFx1MUYzQVxcXFx1MUYzQlxcXFx1MUYzQ1xcXFx1MUYzRFxcXFx1MUYzRVxcXFx1MUYzRlxcXFx1MUY0OFxcXFx1MUY0OVxcXFx1MUY0QVxcXFx1MUY0QlxcXFx1MUY0Q1xcXFx1MUY0RFxcXFx1MUY1OVxcXFx1MUY1QlxcXFx1MUY1RFxcXFx1MUY1RlxcXFx1MUY2OFxcXFx1MUY2OVxcXFx1MUY2QVxcXFx1MUY2QlxcXFx1MUY2Q1xcXFx1MUY2RFxcXFx1MUY2RVxcXFx1MUY2RlxcXFx1MUZCOFxcXFx1MUZCOVxcXFx1MUZCQVxcXFx1MUZCQlxcXFx1MUZDOFxcXFx1MUZDOVxcXFx1MUZDQVxcXFx1MUZDQlxcXFx1MUZEOFxcXFx1MUZEOVxcXFx1MUZEQVxcXFx1MUZEQlxcXFx1MUZFOFxcXFx1MUZFOVxcXFx1MUZFQVxcXFx1MUZFQlxcXFx1MUZFQ1xcXFx1MUZGOFxcXFx1MUZGOVxcXFx1MUZGQVxcXFx1MUZGQlxcXFx1MjEwMlxcXFx1MjEwN1xcXFx1MjEwQlxcXFx1MjEwQ1xcXFx1MjEwRFxcXFx1MjExMFxcXFx1MjExMVxcXFx1MjExMlxcXFx1MjExNVxcXFx1MjExOVxcXFx1MjExQVxcXFx1MjExQlxcXFx1MjExQ1xcXFx1MjExRFxcXFx1MjEyNFxcXFx1MjEyNlxcXFx1MjEyOFxcXFx1MjEyQVxcXFx1MjEyQlxcXFx1MjEyQ1xcXFx1MjEyRFxcXFx1MjEzMFxcXFx1MjEzMVxcXFx1MjEzMlxcXFx1MjEzM1xcXFx1MjEzRVxcXFx1MjEzRlxcXFx1MjE0NVxcXFx1MjE4M1xcXFx1MkMwMFxcXFx1MkMwMVxcXFx1MkMwMlxcXFx1MkMwM1xcXFx1MkMwNFxcXFx1MkMwNVxcXFx1MkMwNlxcXFx1MkMwN1xcXFx1MkMwOFxcXFx1MkMwOVxcXFx1MkMwQVxcXFx1MkMwQlxcXFx1MkMwQ1xcXFx1MkMwRFxcXFx1MkMwRVxcXFx1MkMwRlxcXFx1MkMxMFxcXFx1MkMxMVxcXFx1MkMxMlxcXFx1MkMxM1xcXFx1MkMxNFxcXFx1MkMxNVxcXFx1MkMxNlxcXFx1MkMxN1xcXFx1MkMxOFxcXFx1MkMxOVxcXFx1MkMxQVxcXFx1MkMxQlxcXFx1MkMxQ1xcXFx1MkMxRFxcXFx1MkMxRVxcXFx1MkMxRlxcXFx1MkMyMFxcXFx1MkMyMVxcXFx1MkMyMlxcXFx1MkMyM1xcXFx1MkMyNFxcXFx1MkMyNVxcXFx1MkMyNlxcXFx1MkMyN1xcXFx1MkMyOFxcXFx1MkMyOVxcXFx1MkMyQVxcXFx1MkMyQlxcXFx1MkMyQ1xcXFx1MkMyRFxcXFx1MkMyRVxcXFx1MkM2MFxcXFx1MkM2MlxcXFx1MkM2M1xcXFx1MkM2NFxcXFx1MkM2N1xcXFx1MkM2OVxcXFx1MkM2QlxcXFx1MkM2RFxcXFx1MkM2RVxcXFx1MkM2RlxcXFx1MkM3MlxcXFx1MkM3NVxcXFx1MkM4MFxcXFx1MkM4MlxcXFx1MkM4NFxcXFx1MkM4NlxcXFx1MkM4OFxcXFx1MkM4QVxcXFx1MkM4Q1xcXFx1MkM4RVxcXFx1MkM5MFxcXFx1MkM5MlxcXFx1MkM5NFxcXFx1MkM5NlxcXFx1MkM5OFxcXFx1MkM5QVxcXFx1MkM5Q1xcXFx1MkM5RVxcXFx1MkNBMFxcXFx1MkNBMlxcXFx1MkNBNFxcXFx1MkNBNlxcXFx1MkNBOFxcXFx1MkNBQVxcXFx1MkNBQ1xcXFx1MkNBRVxcXFx1MkNCMFxcXFx1MkNCMlxcXFx1MkNCNFxcXFx1MkNCNlxcXFx1MkNCOFxcXFx1MkNCQVxcXFx1MkNCQ1xcXFx1MkNCRVxcXFx1MkNDMFxcXFx1MkNDMlxcXFx1MkNDNFxcXFx1MkNDNlxcXFx1MkNDOFxcXFx1MkNDQVxcXFx1MkNDQ1xcXFx1MkNDRVxcXFx1MkNEMFxcXFx1MkNEMlxcXFx1MkNENFxcXFx1MkNENlxcXFx1MkNEOFxcXFx1MkNEQVxcXFx1MkNEQ1xcXFx1MkNERVxcXFx1MkNFMFxcXFx1MkNFMlxcXFx1QTY0MFxcXFx1QTY0MlxcXFx1QTY0NFxcXFx1QTY0NlxcXFx1QTY0OFxcXFx1QTY0QVxcXFx1QTY0Q1xcXFx1QTY0RVxcXFx1QTY1MFxcXFx1QTY1MlxcXFx1QTY1NFxcXFx1QTY1NlxcXFx1QTY1OFxcXFx1QTY1QVxcXFx1QTY1Q1xcXFx1QTY1RVxcXFx1QTY2MlxcXFx1QTY2NFxcXFx1QTY2NlxcXFx1QTY2OFxcXFx1QTY2QVxcXFx1QTY2Q1xcXFx1QTY4MFxcXFx1QTY4MlxcXFx1QTY4NFxcXFx1QTY4NlxcXFx1QTY4OFxcXFx1QTY4QVxcXFx1QTY4Q1xcXFx1QTY4RVxcXFx1QTY5MFxcXFx1QTY5MlxcXFx1QTY5NFxcXFx1QTY5NlxcXFx1QTcyMlxcXFx1QTcyNFxcXFx1QTcyNlxcXFx1QTcyOFxcXFx1QTcyQVxcXFx1QTcyQ1xcXFx1QTcyRVxcXFx1QTczMlxcXFx1QTczNFxcXFx1QTczNlxcXFx1QTczOFxcXFx1QTczQVxcXFx1QTczQ1xcXFx1QTczRVxcXFx1QTc0MFxcXFx1QTc0MlxcXFx1QTc0NFxcXFx1QTc0NlxcXFx1QTc0OFxcXFx1QTc0QVxcXFx1QTc0Q1xcXFx1QTc0RVxcXFx1QTc1MFxcXFx1QTc1MlxcXFx1QTc1NFxcXFx1QTc1NlxcXFx1QTc1OFxcXFx1QTc1QVxcXFx1QTc1Q1xcXFx1QTc1RVxcXFx1QTc2MFxcXFx1QTc2MlxcXFx1QTc2NFxcXFx1QTc2NlxcXFx1QTc2OFxcXFx1QTc2QVxcXFx1QTc2Q1xcXFx1QTc2RVxcXFx1QTc3OVxcXFx1QTc3QlxcXFx1QTc3RFxcXFx1QTc3RVxcXFx1QTc4MFxcXFx1QTc4MlxcXFx1QTc4NFxcXFx1QTc4NlxcXFx1QTc4QlxcXFx1RkYyMVxcXFx1RkYyMlxcXFx1RkYyM1xcXFx1RkYyNFxcXFx1RkYyNVxcXFx1RkYyNlxcXFx1RkYyN1xcXFx1RkYyOFxcXFx1RkYyOVxcXFx1RkYyQVxcXFx1RkYyQlxcXFx1RkYyQ1xcXFx1RkYyRFxcXFx1RkYyRVxcXFx1RkYyRlxcXFx1RkYzMFxcXFx1RkYzMVxcXFx1RkYzMlxcXFx1RkYzM1xcXFx1RkYzNFxcXFx1RkYzNVxcXFx1RkYzNlxcXFx1RkYzN1xcXFx1RkYzOFxcXFx1RkYzOVxcXFx1RkYzQV1cIiB9LFxuICAgICAgICBwZWckYzg0ID0gL15bXFx1MDkwM1xcdTA5M0VcXHUwOTNGXFx1MDk0MFxcdTA5NDlcXHUwOTRBXFx1MDk0QlxcdTA5NENcXHUwOTgyXFx1MDk4M1xcdTA5QkVcXHUwOUJGXFx1MDlDMFxcdTA5QzdcXHUwOUM4XFx1MDlDQlxcdTA5Q0NcXHUwOUQ3XFx1MEEwM1xcdTBBM0VcXHUwQTNGXFx1MEE0MFxcdTBBODNcXHUwQUJFXFx1MEFCRlxcdTBBQzBcXHUwQUM5XFx1MEFDQlxcdTBBQ0NcXHUwQjAyXFx1MEIwM1xcdTBCM0VcXHUwQjQwXFx1MEI0N1xcdTBCNDhcXHUwQjRCXFx1MEI0Q1xcdTBCNTdcXHUwQkJFXFx1MEJCRlxcdTBCQzFcXHUwQkMyXFx1MEJDNlxcdTBCQzdcXHUwQkM4XFx1MEJDQVxcdTBCQ0JcXHUwQkNDXFx1MEJEN1xcdTBDMDFcXHUwQzAyXFx1MEMwM1xcdTBDNDFcXHUwQzQyXFx1MEM0M1xcdTBDNDRcXHUwQzgyXFx1MEM4M1xcdTBDQkVcXHUwQ0MwXFx1MENDMVxcdTBDQzJcXHUwQ0MzXFx1MENDNFxcdTBDQzdcXHUwQ0M4XFx1MENDQVxcdTBDQ0JcXHUwQ0Q1XFx1MENENlxcdTBEMDJcXHUwRDAzXFx1MEQzRVxcdTBEM0ZcXHUwRDQwXFx1MEQ0NlxcdTBENDdcXHUwRDQ4XFx1MEQ0QVxcdTBENEJcXHUwRDRDXFx1MEQ1N1xcdTBEODJcXHUwRDgzXFx1MERDRlxcdTBERDBcXHUwREQxXFx1MEREOFxcdTBERDlcXHUwRERBXFx1MEREQlxcdTBERENcXHUwREREXFx1MERERVxcdTBEREZcXHUwREYyXFx1MERGM1xcdTBGM0VcXHUwRjNGXFx1MEY3RlxcdTEwMkJcXHUxMDJDXFx1MTAzMVxcdTEwMzhcXHUxMDNCXFx1MTAzQ1xcdTEwNTZcXHUxMDU3XFx1MTA2MlxcdTEwNjNcXHUxMDY0XFx1MTA2N1xcdTEwNjhcXHUxMDY5XFx1MTA2QVxcdTEwNkJcXHUxMDZDXFx1MTA2RFxcdTEwODNcXHUxMDg0XFx1MTA4N1xcdTEwODhcXHUxMDg5XFx1MTA4QVxcdTEwOEJcXHUxMDhDXFx1MTA4RlxcdTE3QjZcXHUxN0JFXFx1MTdCRlxcdTE3QzBcXHUxN0MxXFx1MTdDMlxcdTE3QzNcXHUxN0M0XFx1MTdDNVxcdTE3QzdcXHUxN0M4XFx1MTkyM1xcdTE5MjRcXHUxOTI1XFx1MTkyNlxcdTE5MjlcXHUxOTJBXFx1MTkyQlxcdTE5MzBcXHUxOTMxXFx1MTkzM1xcdTE5MzRcXHUxOTM1XFx1MTkzNlxcdTE5MzdcXHUxOTM4XFx1MTlCMFxcdTE5QjFcXHUxOUIyXFx1MTlCM1xcdTE5QjRcXHUxOUI1XFx1MTlCNlxcdTE5QjdcXHUxOUI4XFx1MTlCOVxcdTE5QkFcXHUxOUJCXFx1MTlCQ1xcdTE5QkRcXHUxOUJFXFx1MTlCRlxcdTE5QzBcXHUxOUM4XFx1MTlDOVxcdTFBMTlcXHUxQTFBXFx1MUExQlxcdTFCMDRcXHUxQjM1XFx1MUIzQlxcdTFCM0RcXHUxQjNFXFx1MUIzRlxcdTFCNDBcXHUxQjQxXFx1MUI0M1xcdTFCNDRcXHUxQjgyXFx1MUJBMVxcdTFCQTZcXHUxQkE3XFx1MUJBQVxcdTFDMjRcXHUxQzI1XFx1MUMyNlxcdTFDMjdcXHUxQzI4XFx1MUMyOVxcdTFDMkFcXHUxQzJCXFx1MUMzNFxcdTFDMzVcXHVBODIzXFx1QTgyNFxcdUE4MjdcXHVBODgwXFx1QTg4MVxcdUE4QjRcXHVBOEI1XFx1QThCNlxcdUE4QjdcXHVBOEI4XFx1QThCOVxcdUE4QkFcXHVBOEJCXFx1QThCQ1xcdUE4QkRcXHVBOEJFXFx1QThCRlxcdUE4QzBcXHVBOEMxXFx1QThDMlxcdUE4QzNcXHVBOTUyXFx1QTk1M1xcdUFBMkZcXHVBQTMwXFx1QUEzM1xcdUFBMzRcXHVBQTREXS8sXG4gICAgICAgIHBlZyRjODUgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW1xcXFx1MDkwM1xcXFx1MDkzRVxcXFx1MDkzRlxcXFx1MDk0MFxcXFx1MDk0OVxcXFx1MDk0QVxcXFx1MDk0QlxcXFx1MDk0Q1xcXFx1MDk4MlxcXFx1MDk4M1xcXFx1MDlCRVxcXFx1MDlCRlxcXFx1MDlDMFxcXFx1MDlDN1xcXFx1MDlDOFxcXFx1MDlDQlxcXFx1MDlDQ1xcXFx1MDlEN1xcXFx1MEEwM1xcXFx1MEEzRVxcXFx1MEEzRlxcXFx1MEE0MFxcXFx1MEE4M1xcXFx1MEFCRVxcXFx1MEFCRlxcXFx1MEFDMFxcXFx1MEFDOVxcXFx1MEFDQlxcXFx1MEFDQ1xcXFx1MEIwMlxcXFx1MEIwM1xcXFx1MEIzRVxcXFx1MEI0MFxcXFx1MEI0N1xcXFx1MEI0OFxcXFx1MEI0QlxcXFx1MEI0Q1xcXFx1MEI1N1xcXFx1MEJCRVxcXFx1MEJCRlxcXFx1MEJDMVxcXFx1MEJDMlxcXFx1MEJDNlxcXFx1MEJDN1xcXFx1MEJDOFxcXFx1MEJDQVxcXFx1MEJDQlxcXFx1MEJDQ1xcXFx1MEJEN1xcXFx1MEMwMVxcXFx1MEMwMlxcXFx1MEMwM1xcXFx1MEM0MVxcXFx1MEM0MlxcXFx1MEM0M1xcXFx1MEM0NFxcXFx1MEM4MlxcXFx1MEM4M1xcXFx1MENCRVxcXFx1MENDMFxcXFx1MENDMVxcXFx1MENDMlxcXFx1MENDM1xcXFx1MENDNFxcXFx1MENDN1xcXFx1MENDOFxcXFx1MENDQVxcXFx1MENDQlxcXFx1MENENVxcXFx1MENENlxcXFx1MEQwMlxcXFx1MEQwM1xcXFx1MEQzRVxcXFx1MEQzRlxcXFx1MEQ0MFxcXFx1MEQ0NlxcXFx1MEQ0N1xcXFx1MEQ0OFxcXFx1MEQ0QVxcXFx1MEQ0QlxcXFx1MEQ0Q1xcXFx1MEQ1N1xcXFx1MEQ4MlxcXFx1MEQ4M1xcXFx1MERDRlxcXFx1MEREMFxcXFx1MEREMVxcXFx1MEREOFxcXFx1MEREOVxcXFx1MEREQVxcXFx1MEREQlxcXFx1MEREQ1xcXFx1MERERFxcXFx1MERERVxcXFx1MERERlxcXFx1MERGMlxcXFx1MERGM1xcXFx1MEYzRVxcXFx1MEYzRlxcXFx1MEY3RlxcXFx1MTAyQlxcXFx1MTAyQ1xcXFx1MTAzMVxcXFx1MTAzOFxcXFx1MTAzQlxcXFx1MTAzQ1xcXFx1MTA1NlxcXFx1MTA1N1xcXFx1MTA2MlxcXFx1MTA2M1xcXFx1MTA2NFxcXFx1MTA2N1xcXFx1MTA2OFxcXFx1MTA2OVxcXFx1MTA2QVxcXFx1MTA2QlxcXFx1MTA2Q1xcXFx1MTA2RFxcXFx1MTA4M1xcXFx1MTA4NFxcXFx1MTA4N1xcXFx1MTA4OFxcXFx1MTA4OVxcXFx1MTA4QVxcXFx1MTA4QlxcXFx1MTA4Q1xcXFx1MTA4RlxcXFx1MTdCNlxcXFx1MTdCRVxcXFx1MTdCRlxcXFx1MTdDMFxcXFx1MTdDMVxcXFx1MTdDMlxcXFx1MTdDM1xcXFx1MTdDNFxcXFx1MTdDNVxcXFx1MTdDN1xcXFx1MTdDOFxcXFx1MTkyM1xcXFx1MTkyNFxcXFx1MTkyNVxcXFx1MTkyNlxcXFx1MTkyOVxcXFx1MTkyQVxcXFx1MTkyQlxcXFx1MTkzMFxcXFx1MTkzMVxcXFx1MTkzM1xcXFx1MTkzNFxcXFx1MTkzNVxcXFx1MTkzNlxcXFx1MTkzN1xcXFx1MTkzOFxcXFx1MTlCMFxcXFx1MTlCMVxcXFx1MTlCMlxcXFx1MTlCM1xcXFx1MTlCNFxcXFx1MTlCNVxcXFx1MTlCNlxcXFx1MTlCN1xcXFx1MTlCOFxcXFx1MTlCOVxcXFx1MTlCQVxcXFx1MTlCQlxcXFx1MTlCQ1xcXFx1MTlCRFxcXFx1MTlCRVxcXFx1MTlCRlxcXFx1MTlDMFxcXFx1MTlDOFxcXFx1MTlDOVxcXFx1MUExOVxcXFx1MUExQVxcXFx1MUExQlxcXFx1MUIwNFxcXFx1MUIzNVxcXFx1MUIzQlxcXFx1MUIzRFxcXFx1MUIzRVxcXFx1MUIzRlxcXFx1MUI0MFxcXFx1MUI0MVxcXFx1MUI0M1xcXFx1MUI0NFxcXFx1MUI4MlxcXFx1MUJBMVxcXFx1MUJBNlxcXFx1MUJBN1xcXFx1MUJBQVxcXFx1MUMyNFxcXFx1MUMyNVxcXFx1MUMyNlxcXFx1MUMyN1xcXFx1MUMyOFxcXFx1MUMyOVxcXFx1MUMyQVxcXFx1MUMyQlxcXFx1MUMzNFxcXFx1MUMzNVxcXFx1QTgyM1xcXFx1QTgyNFxcXFx1QTgyN1xcXFx1QTg4MFxcXFx1QTg4MVxcXFx1QThCNFxcXFx1QThCNVxcXFx1QThCNlxcXFx1QThCN1xcXFx1QThCOFxcXFx1QThCOVxcXFx1QThCQVxcXFx1QThCQlxcXFx1QThCQ1xcXFx1QThCRFxcXFx1QThCRVxcXFx1QThCRlxcXFx1QThDMFxcXFx1QThDMVxcXFx1QThDMlxcXFx1QThDM1xcXFx1QTk1MlxcXFx1QTk1M1xcXFx1QUEyRlxcXFx1QUEzMFxcXFx1QUEzM1xcXFx1QUEzNFxcXFx1QUE0RF1cIiwgZGVzY3JpcHRpb246IFwiW1xcXFx1MDkwM1xcXFx1MDkzRVxcXFx1MDkzRlxcXFx1MDk0MFxcXFx1MDk0OVxcXFx1MDk0QVxcXFx1MDk0QlxcXFx1MDk0Q1xcXFx1MDk4MlxcXFx1MDk4M1xcXFx1MDlCRVxcXFx1MDlCRlxcXFx1MDlDMFxcXFx1MDlDN1xcXFx1MDlDOFxcXFx1MDlDQlxcXFx1MDlDQ1xcXFx1MDlEN1xcXFx1MEEwM1xcXFx1MEEzRVxcXFx1MEEzRlxcXFx1MEE0MFxcXFx1MEE4M1xcXFx1MEFCRVxcXFx1MEFCRlxcXFx1MEFDMFxcXFx1MEFDOVxcXFx1MEFDQlxcXFx1MEFDQ1xcXFx1MEIwMlxcXFx1MEIwM1xcXFx1MEIzRVxcXFx1MEI0MFxcXFx1MEI0N1xcXFx1MEI0OFxcXFx1MEI0QlxcXFx1MEI0Q1xcXFx1MEI1N1xcXFx1MEJCRVxcXFx1MEJCRlxcXFx1MEJDMVxcXFx1MEJDMlxcXFx1MEJDNlxcXFx1MEJDN1xcXFx1MEJDOFxcXFx1MEJDQVxcXFx1MEJDQlxcXFx1MEJDQ1xcXFx1MEJEN1xcXFx1MEMwMVxcXFx1MEMwMlxcXFx1MEMwM1xcXFx1MEM0MVxcXFx1MEM0MlxcXFx1MEM0M1xcXFx1MEM0NFxcXFx1MEM4MlxcXFx1MEM4M1xcXFx1MENCRVxcXFx1MENDMFxcXFx1MENDMVxcXFx1MENDMlxcXFx1MENDM1xcXFx1MENDNFxcXFx1MENDN1xcXFx1MENDOFxcXFx1MENDQVxcXFx1MENDQlxcXFx1MENENVxcXFx1MENENlxcXFx1MEQwMlxcXFx1MEQwM1xcXFx1MEQzRVxcXFx1MEQzRlxcXFx1MEQ0MFxcXFx1MEQ0NlxcXFx1MEQ0N1xcXFx1MEQ0OFxcXFx1MEQ0QVxcXFx1MEQ0QlxcXFx1MEQ0Q1xcXFx1MEQ1N1xcXFx1MEQ4MlxcXFx1MEQ4M1xcXFx1MERDRlxcXFx1MEREMFxcXFx1MEREMVxcXFx1MEREOFxcXFx1MEREOVxcXFx1MEREQVxcXFx1MEREQlxcXFx1MEREQ1xcXFx1MERERFxcXFx1MERERVxcXFx1MERERlxcXFx1MERGMlxcXFx1MERGM1xcXFx1MEYzRVxcXFx1MEYzRlxcXFx1MEY3RlxcXFx1MTAyQlxcXFx1MTAyQ1xcXFx1MTAzMVxcXFx1MTAzOFxcXFx1MTAzQlxcXFx1MTAzQ1xcXFx1MTA1NlxcXFx1MTA1N1xcXFx1MTA2MlxcXFx1MTA2M1xcXFx1MTA2NFxcXFx1MTA2N1xcXFx1MTA2OFxcXFx1MTA2OVxcXFx1MTA2QVxcXFx1MTA2QlxcXFx1MTA2Q1xcXFx1MTA2RFxcXFx1MTA4M1xcXFx1MTA4NFxcXFx1MTA4N1xcXFx1MTA4OFxcXFx1MTA4OVxcXFx1MTA4QVxcXFx1MTA4QlxcXFx1MTA4Q1xcXFx1MTA4RlxcXFx1MTdCNlxcXFx1MTdCRVxcXFx1MTdCRlxcXFx1MTdDMFxcXFx1MTdDMVxcXFx1MTdDMlxcXFx1MTdDM1xcXFx1MTdDNFxcXFx1MTdDNVxcXFx1MTdDN1xcXFx1MTdDOFxcXFx1MTkyM1xcXFx1MTkyNFxcXFx1MTkyNVxcXFx1MTkyNlxcXFx1MTkyOVxcXFx1MTkyQVxcXFx1MTkyQlxcXFx1MTkzMFxcXFx1MTkzMVxcXFx1MTkzM1xcXFx1MTkzNFxcXFx1MTkzNVxcXFx1MTkzNlxcXFx1MTkzN1xcXFx1MTkzOFxcXFx1MTlCMFxcXFx1MTlCMVxcXFx1MTlCMlxcXFx1MTlCM1xcXFx1MTlCNFxcXFx1MTlCNVxcXFx1MTlCNlxcXFx1MTlCN1xcXFx1MTlCOFxcXFx1MTlCOVxcXFx1MTlCQVxcXFx1MTlCQlxcXFx1MTlCQ1xcXFx1MTlCRFxcXFx1MTlCRVxcXFx1MTlCRlxcXFx1MTlDMFxcXFx1MTlDOFxcXFx1MTlDOVxcXFx1MUExOVxcXFx1MUExQVxcXFx1MUExQlxcXFx1MUIwNFxcXFx1MUIzNVxcXFx1MUIzQlxcXFx1MUIzRFxcXFx1MUIzRVxcXFx1MUIzRlxcXFx1MUI0MFxcXFx1MUI0MVxcXFx1MUI0M1xcXFx1MUI0NFxcXFx1MUI4MlxcXFx1MUJBMVxcXFx1MUJBNlxcXFx1MUJBN1xcXFx1MUJBQVxcXFx1MUMyNFxcXFx1MUMyNVxcXFx1MUMyNlxcXFx1MUMyN1xcXFx1MUMyOFxcXFx1MUMyOVxcXFx1MUMyQVxcXFx1MUMyQlxcXFx1MUMzNFxcXFx1MUMzNVxcXFx1QTgyM1xcXFx1QTgyNFxcXFx1QTgyN1xcXFx1QTg4MFxcXFx1QTg4MVxcXFx1QThCNFxcXFx1QThCNVxcXFx1QThCNlxcXFx1QThCN1xcXFx1QThCOFxcXFx1QThCOVxcXFx1QThCQVxcXFx1QThCQlxcXFx1QThCQ1xcXFx1QThCRFxcXFx1QThCRVxcXFx1QThCRlxcXFx1QThDMFxcXFx1QThDMVxcXFx1QThDMlxcXFx1QThDM1xcXFx1QTk1MlxcXFx1QTk1M1xcXFx1QUEyRlxcXFx1QUEzMFxcXFx1QUEzM1xcXFx1QUEzNFxcXFx1QUE0RF1cIiB9LFxuICAgICAgICBwZWckYzg2ID0gL15bXFx1MDMwMFxcdTAzMDFcXHUwMzAyXFx1MDMwM1xcdTAzMDRcXHUwMzA1XFx1MDMwNlxcdTAzMDdcXHUwMzA4XFx1MDMwOVxcdTAzMEFcXHUwMzBCXFx1MDMwQ1xcdTAzMERcXHUwMzBFXFx1MDMwRlxcdTAzMTBcXHUwMzExXFx1MDMxMlxcdTAzMTNcXHUwMzE0XFx1MDMxNVxcdTAzMTZcXHUwMzE3XFx1MDMxOFxcdTAzMTlcXHUwMzFBXFx1MDMxQlxcdTAzMUNcXHUwMzFEXFx1MDMxRVxcdTAzMUZcXHUwMzIwXFx1MDMyMVxcdTAzMjJcXHUwMzIzXFx1MDMyNFxcdTAzMjVcXHUwMzI2XFx1MDMyN1xcdTAzMjhcXHUwMzI5XFx1MDMyQVxcdTAzMkJcXHUwMzJDXFx1MDMyRFxcdTAzMkVcXHUwMzJGXFx1MDMzMFxcdTAzMzFcXHUwMzMyXFx1MDMzM1xcdTAzMzRcXHUwMzM1XFx1MDMzNlxcdTAzMzdcXHUwMzM4XFx1MDMzOVxcdTAzM0FcXHUwMzNCXFx1MDMzQ1xcdTAzM0RcXHUwMzNFXFx1MDMzRlxcdTAzNDBcXHUwMzQxXFx1MDM0MlxcdTAzNDNcXHUwMzQ0XFx1MDM0NVxcdTAzNDZcXHUwMzQ3XFx1MDM0OFxcdTAzNDlcXHUwMzRBXFx1MDM0QlxcdTAzNENcXHUwMzREXFx1MDM0RVxcdTAzNEZcXHUwMzUwXFx1MDM1MVxcdTAzNTJcXHUwMzUzXFx1MDM1NFxcdTAzNTVcXHUwMzU2XFx1MDM1N1xcdTAzNThcXHUwMzU5XFx1MDM1QVxcdTAzNUJcXHUwMzVDXFx1MDM1RFxcdTAzNUVcXHUwMzVGXFx1MDM2MFxcdTAzNjFcXHUwMzYyXFx1MDM2M1xcdTAzNjRcXHUwMzY1XFx1MDM2NlxcdTAzNjdcXHUwMzY4XFx1MDM2OVxcdTAzNkFcXHUwMzZCXFx1MDM2Q1xcdTAzNkRcXHUwMzZFXFx1MDM2RlxcdTA0ODNcXHUwNDg0XFx1MDQ4NVxcdTA0ODZcXHUwNDg3XFx1MDU5MVxcdTA1OTJcXHUwNTkzXFx1MDU5NFxcdTA1OTVcXHUwNTk2XFx1MDU5N1xcdTA1OThcXHUwNTk5XFx1MDU5QVxcdTA1OUJcXHUwNTlDXFx1MDU5RFxcdTA1OUVcXHUwNTlGXFx1MDVBMFxcdTA1QTFcXHUwNUEyXFx1MDVBM1xcdTA1QTRcXHUwNUE1XFx1MDVBNlxcdTA1QTdcXHUwNUE4XFx1MDVBOVxcdTA1QUFcXHUwNUFCXFx1MDVBQ1xcdTA1QURcXHUwNUFFXFx1MDVBRlxcdTA1QjBcXHUwNUIxXFx1MDVCMlxcdTA1QjNcXHUwNUI0XFx1MDVCNVxcdTA1QjZcXHUwNUI3XFx1MDVCOFxcdTA1QjlcXHUwNUJBXFx1MDVCQlxcdTA1QkNcXHUwNUJEXFx1MDVCRlxcdTA1QzFcXHUwNUMyXFx1MDVDNFxcdTA1QzVcXHUwNUM3XFx1MDYxMFxcdTA2MTFcXHUwNjEyXFx1MDYxM1xcdTA2MTRcXHUwNjE1XFx1MDYxNlxcdTA2MTdcXHUwNjE4XFx1MDYxOVxcdTA2MUFcXHUwNjRCXFx1MDY0Q1xcdTA2NERcXHUwNjRFXFx1MDY0RlxcdTA2NTBcXHUwNjUxXFx1MDY1MlxcdTA2NTNcXHUwNjU0XFx1MDY1NVxcdTA2NTZcXHUwNjU3XFx1MDY1OFxcdTA2NTlcXHUwNjVBXFx1MDY1QlxcdTA2NUNcXHUwNjVEXFx1MDY1RVxcdTA2NzBcXHUwNkQ2XFx1MDZEN1xcdTA2RDhcXHUwNkQ5XFx1MDZEQVxcdTA2REJcXHUwNkRDXFx1MDZERlxcdTA2RTBcXHUwNkUxXFx1MDZFMlxcdTA2RTNcXHUwNkU0XFx1MDZFN1xcdTA2RThcXHUwNkVBXFx1MDZFQlxcdTA2RUNcXHUwNkVEXFx1MDcxMVxcdTA3MzBcXHUwNzMxXFx1MDczMlxcdTA3MzNcXHUwNzM0XFx1MDczNVxcdTA3MzZcXHUwNzM3XFx1MDczOFxcdTA3MzlcXHUwNzNBXFx1MDczQlxcdTA3M0NcXHUwNzNEXFx1MDczRVxcdTA3M0ZcXHUwNzQwXFx1MDc0MVxcdTA3NDJcXHUwNzQzXFx1MDc0NFxcdTA3NDVcXHUwNzQ2XFx1MDc0N1xcdTA3NDhcXHUwNzQ5XFx1MDc0QVxcdTA3QTZcXHUwN0E3XFx1MDdBOFxcdTA3QTlcXHUwN0FBXFx1MDdBQlxcdTA3QUNcXHUwN0FEXFx1MDdBRVxcdTA3QUZcXHUwN0IwXFx1MDdFQlxcdTA3RUNcXHUwN0VEXFx1MDdFRVxcdTA3RUZcXHUwN0YwXFx1MDdGMVxcdTA3RjJcXHUwN0YzXFx1MDkwMVxcdTA5MDJcXHUwOTNDXFx1MDk0MVxcdTA5NDJcXHUwOTQzXFx1MDk0NFxcdTA5NDVcXHUwOTQ2XFx1MDk0N1xcdTA5NDhcXHUwOTREXFx1MDk1MVxcdTA5NTJcXHUwOTUzXFx1MDk1NFxcdTA5NjJcXHUwOTYzXFx1MDk4MVxcdTA5QkNcXHUwOUMxXFx1MDlDMlxcdTA5QzNcXHUwOUM0XFx1MDlDRFxcdTA5RTJcXHUwOUUzXFx1MEEwMVxcdTBBMDJcXHUwQTNDXFx1MEE0MVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEJcXHUwQTRDXFx1MEE0RFxcdTBBNTFcXHUwQTcwXFx1MEE3MVxcdTBBNzVcXHUwQTgxXFx1MEE4MlxcdTBBQkNcXHUwQUMxXFx1MEFDMlxcdTBBQzNcXHUwQUM0XFx1MEFDNVxcdTBBQzdcXHUwQUM4XFx1MEFDRFxcdTBBRTJcXHUwQUUzXFx1MEIwMVxcdTBCM0NcXHUwQjNGXFx1MEI0MVxcdTBCNDJcXHUwQjQzXFx1MEI0NFxcdTBCNERcXHUwQjU2XFx1MEI2MlxcdTBCNjNcXHUwQjgyXFx1MEJDMFxcdTBCQ0RcXHUwQzNFXFx1MEMzRlxcdTBDNDBcXHUwQzQ2XFx1MEM0N1xcdTBDNDhcXHUwQzRBXFx1MEM0QlxcdTBDNENcXHUwQzREXFx1MEM1NVxcdTBDNTZcXHUwQzYyXFx1MEM2M1xcdTBDQkNcXHUwQ0JGXFx1MENDNlxcdTBDQ0NcXHUwQ0NEXFx1MENFMlxcdTBDRTNcXHUwRDQxXFx1MEQ0MlxcdTBENDNcXHUwRDQ0XFx1MEQ0RFxcdTBENjJcXHUwRDYzXFx1MERDQVxcdTBERDJcXHUwREQzXFx1MERENFxcdTBERDZcXHUwRTMxXFx1MEUzNFxcdTBFMzVcXHUwRTM2XFx1MEUzN1xcdTBFMzhcXHUwRTM5XFx1MEUzQVxcdTBFNDdcXHUwRTQ4XFx1MEU0OVxcdTBFNEFcXHUwRTRCXFx1MEU0Q1xcdTBFNERcXHUwRTRFXFx1MEVCMVxcdTBFQjRcXHUwRUI1XFx1MEVCNlxcdTBFQjdcXHUwRUI4XFx1MEVCOVxcdTBFQkJcXHUwRUJDXFx1MEVDOFxcdTBFQzlcXHUwRUNBXFx1MEVDQlxcdTBFQ0NcXHUwRUNEXFx1MEYxOFxcdTBGMTlcXHUwRjM1XFx1MEYzN1xcdTBGMzlcXHUwRjcxXFx1MEY3MlxcdTBGNzNcXHUwRjc0XFx1MEY3NVxcdTBGNzZcXHUwRjc3XFx1MEY3OFxcdTBGNzlcXHUwRjdBXFx1MEY3QlxcdTBGN0NcXHUwRjdEXFx1MEY3RVxcdTBGODBcXHUwRjgxXFx1MEY4MlxcdTBGODNcXHUwRjg0XFx1MEY4NlxcdTBGODdcXHUwRjkwXFx1MEY5MVxcdTBGOTJcXHUwRjkzXFx1MEY5NFxcdTBGOTVcXHUwRjk2XFx1MEY5N1xcdTBGOTlcXHUwRjlBXFx1MEY5QlxcdTBGOUNcXHUwRjlEXFx1MEY5RVxcdTBGOUZcXHUwRkEwXFx1MEZBMVxcdTBGQTJcXHUwRkEzXFx1MEZBNFxcdTBGQTVcXHUwRkE2XFx1MEZBN1xcdTBGQThcXHUwRkE5XFx1MEZBQVxcdTBGQUJcXHUwRkFDXFx1MEZBRFxcdTBGQUVcXHUwRkFGXFx1MEZCMFxcdTBGQjFcXHUwRkIyXFx1MEZCM1xcdTBGQjRcXHUwRkI1XFx1MEZCNlxcdTBGQjdcXHUwRkI4XFx1MEZCOVxcdTBGQkFcXHUwRkJCXFx1MEZCQ1xcdTBGQzZcXHUxMDJEXFx1MTAyRVxcdTEwMkZcXHUxMDMwXFx1MTAzMlxcdTEwMzNcXHUxMDM0XFx1MTAzNVxcdTEwMzZcXHUxMDM3XFx1MTAzOVxcdTEwM0FcXHUxMDNEXFx1MTAzRVxcdTEwNThcXHUxMDU5XFx1MTA1RVxcdTEwNUZcXHUxMDYwXFx1MTA3MVxcdTEwNzJcXHUxMDczXFx1MTA3NFxcdTEwODJcXHUxMDg1XFx1MTA4NlxcdTEwOERcXHUxMzVGXFx1MTcxMlxcdTE3MTNcXHUxNzE0XFx1MTczMlxcdTE3MzNcXHUxNzM0XFx1MTc1MlxcdTE3NTNcXHUxNzcyXFx1MTc3M1xcdTE3QjdcXHUxN0I4XFx1MTdCOVxcdTE3QkFcXHUxN0JCXFx1MTdCQ1xcdTE3QkRcXHUxN0M2XFx1MTdDOVxcdTE3Q0FcXHUxN0NCXFx1MTdDQ1xcdTE3Q0RcXHUxN0NFXFx1MTdDRlxcdTE3RDBcXHUxN0QxXFx1MTdEMlxcdTE3RDNcXHUxN0REXFx1MTgwQlxcdTE4MENcXHUxODBEXFx1MThBOVxcdTE5MjBcXHUxOTIxXFx1MTkyMlxcdTE5MjdcXHUxOTI4XFx1MTkzMlxcdTE5MzlcXHUxOTNBXFx1MTkzQlxcdTFBMTdcXHUxQTE4XFx1MUIwMFxcdTFCMDFcXHUxQjAyXFx1MUIwM1xcdTFCMzRcXHUxQjM2XFx1MUIzN1xcdTFCMzhcXHUxQjM5XFx1MUIzQVxcdTFCM0NcXHUxQjQyXFx1MUI2QlxcdTFCNkNcXHUxQjZEXFx1MUI2RVxcdTFCNkZcXHUxQjcwXFx1MUI3MVxcdTFCNzJcXHUxQjczXFx1MUI4MFxcdTFCODFcXHUxQkEyXFx1MUJBM1xcdTFCQTRcXHUxQkE1XFx1MUJBOFxcdTFCQTlcXHUxQzJDXFx1MUMyRFxcdTFDMkVcXHUxQzJGXFx1MUMzMFxcdTFDMzFcXHUxQzMyXFx1MUMzM1xcdTFDMzZcXHUxQzM3XFx1MURDMFxcdTFEQzFcXHUxREMyXFx1MURDM1xcdTFEQzRcXHUxREM1XFx1MURDNlxcdTFEQzdcXHUxREM4XFx1MURDOVxcdTFEQ0FcXHUxRENCXFx1MURDQ1xcdTFEQ0RcXHUxRENFXFx1MURDRlxcdTFERDBcXHUxREQxXFx1MUREMlxcdTFERDNcXHUxREQ0XFx1MURENVxcdTFERDZcXHUxREQ3XFx1MUREOFxcdTFERDlcXHUxRERBXFx1MUREQlxcdTFERENcXHUxREREXFx1MURERVxcdTFEREZcXHUxREUwXFx1MURFMVxcdTFERTJcXHUxREUzXFx1MURFNFxcdTFERTVcXHUxREU2XFx1MURGRVxcdTFERkZcXHUyMEQwXFx1MjBEMVxcdTIwRDJcXHUyMEQzXFx1MjBENFxcdTIwRDVcXHUyMEQ2XFx1MjBEN1xcdTIwRDhcXHUyMEQ5XFx1MjBEQVxcdTIwREJcXHUyMERDXFx1MjBFMVxcdTIwRTVcXHUyMEU2XFx1MjBFN1xcdTIwRThcXHUyMEU5XFx1MjBFQVxcdTIwRUJcXHUyMEVDXFx1MjBFRFxcdTIwRUVcXHUyMEVGXFx1MjBGMFxcdTJERTBcXHUyREUxXFx1MkRFMlxcdTJERTNcXHUyREU0XFx1MkRFNVxcdTJERTZcXHUyREU3XFx1MkRFOFxcdTJERTlcXHUyREVBXFx1MkRFQlxcdTJERUNcXHUyREVEXFx1MkRFRVxcdTJERUZcXHUyREYwXFx1MkRGMVxcdTJERjJcXHUyREYzXFx1MkRGNFxcdTJERjVcXHUyREY2XFx1MkRGN1xcdTJERjhcXHUyREY5XFx1MkRGQVxcdTJERkJcXHUyREZDXFx1MkRGRFxcdTJERkVcXHUyREZGXFx1MzAyQVxcdTMwMkJcXHUzMDJDXFx1MzAyRFxcdTMwMkVcXHUzMDJGXFx1MzA5OVxcdTMwOUFcXHVBNjZGXFx1QTY3Q1xcdUE2N0RcXHVBODAyXFx1QTgwNlxcdUE4MEJcXHVBODI1XFx1QTgyNlxcdUE4QzRcXHVBOTI2XFx1QTkyN1xcdUE5MjhcXHVBOTI5XFx1QTkyQVxcdUE5MkJcXHVBOTJDXFx1QTkyRFxcdUE5NDdcXHVBOTQ4XFx1QTk0OVxcdUE5NEFcXHVBOTRCXFx1QTk0Q1xcdUE5NERcXHVBOTRFXFx1QTk0RlxcdUE5NTBcXHVBOTUxXFx1QUEyOVxcdUFBMkFcXHVBQTJCXFx1QUEyQ1xcdUFBMkRcXHVBQTJFXFx1QUEzMVxcdUFBMzJcXHVBQTM1XFx1QUEzNlxcdUFBNDNcXHVBQTRDXFx1RkIxRVxcdUZFMDBcXHVGRTAxXFx1RkUwMlxcdUZFMDNcXHVGRTA0XFx1RkUwNVxcdUZFMDZcXHVGRTA3XFx1RkUwOFxcdUZFMDlcXHVGRTBBXFx1RkUwQlxcdUZFMENcXHVGRTBEXFx1RkUwRVxcdUZFMEZcXHVGRTIwXFx1RkUyMVxcdUZFMjJcXHVGRTIzXFx1RkUyNFxcdUZFMjVcXHVGRTI2XS8sXG4gICAgICAgIHBlZyRjODcgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW1xcXFx1MDMwMFxcXFx1MDMwMVxcXFx1MDMwMlxcXFx1MDMwM1xcXFx1MDMwNFxcXFx1MDMwNVxcXFx1MDMwNlxcXFx1MDMwN1xcXFx1MDMwOFxcXFx1MDMwOVxcXFx1MDMwQVxcXFx1MDMwQlxcXFx1MDMwQ1xcXFx1MDMwRFxcXFx1MDMwRVxcXFx1MDMwRlxcXFx1MDMxMFxcXFx1MDMxMVxcXFx1MDMxMlxcXFx1MDMxM1xcXFx1MDMxNFxcXFx1MDMxNVxcXFx1MDMxNlxcXFx1MDMxN1xcXFx1MDMxOFxcXFx1MDMxOVxcXFx1MDMxQVxcXFx1MDMxQlxcXFx1MDMxQ1xcXFx1MDMxRFxcXFx1MDMxRVxcXFx1MDMxRlxcXFx1MDMyMFxcXFx1MDMyMVxcXFx1MDMyMlxcXFx1MDMyM1xcXFx1MDMyNFxcXFx1MDMyNVxcXFx1MDMyNlxcXFx1MDMyN1xcXFx1MDMyOFxcXFx1MDMyOVxcXFx1MDMyQVxcXFx1MDMyQlxcXFx1MDMyQ1xcXFx1MDMyRFxcXFx1MDMyRVxcXFx1MDMyRlxcXFx1MDMzMFxcXFx1MDMzMVxcXFx1MDMzMlxcXFx1MDMzM1xcXFx1MDMzNFxcXFx1MDMzNVxcXFx1MDMzNlxcXFx1MDMzN1xcXFx1MDMzOFxcXFx1MDMzOVxcXFx1MDMzQVxcXFx1MDMzQlxcXFx1MDMzQ1xcXFx1MDMzRFxcXFx1MDMzRVxcXFx1MDMzRlxcXFx1MDM0MFxcXFx1MDM0MVxcXFx1MDM0MlxcXFx1MDM0M1xcXFx1MDM0NFxcXFx1MDM0NVxcXFx1MDM0NlxcXFx1MDM0N1xcXFx1MDM0OFxcXFx1MDM0OVxcXFx1MDM0QVxcXFx1MDM0QlxcXFx1MDM0Q1xcXFx1MDM0RFxcXFx1MDM0RVxcXFx1MDM0RlxcXFx1MDM1MFxcXFx1MDM1MVxcXFx1MDM1MlxcXFx1MDM1M1xcXFx1MDM1NFxcXFx1MDM1NVxcXFx1MDM1NlxcXFx1MDM1N1xcXFx1MDM1OFxcXFx1MDM1OVxcXFx1MDM1QVxcXFx1MDM1QlxcXFx1MDM1Q1xcXFx1MDM1RFxcXFx1MDM1RVxcXFx1MDM1RlxcXFx1MDM2MFxcXFx1MDM2MVxcXFx1MDM2MlxcXFx1MDM2M1xcXFx1MDM2NFxcXFx1MDM2NVxcXFx1MDM2NlxcXFx1MDM2N1xcXFx1MDM2OFxcXFx1MDM2OVxcXFx1MDM2QVxcXFx1MDM2QlxcXFx1MDM2Q1xcXFx1MDM2RFxcXFx1MDM2RVxcXFx1MDM2RlxcXFx1MDQ4M1xcXFx1MDQ4NFxcXFx1MDQ4NVxcXFx1MDQ4NlxcXFx1MDQ4N1xcXFx1MDU5MVxcXFx1MDU5MlxcXFx1MDU5M1xcXFx1MDU5NFxcXFx1MDU5NVxcXFx1MDU5NlxcXFx1MDU5N1xcXFx1MDU5OFxcXFx1MDU5OVxcXFx1MDU5QVxcXFx1MDU5QlxcXFx1MDU5Q1xcXFx1MDU5RFxcXFx1MDU5RVxcXFx1MDU5RlxcXFx1MDVBMFxcXFx1MDVBMVxcXFx1MDVBMlxcXFx1MDVBM1xcXFx1MDVBNFxcXFx1MDVBNVxcXFx1MDVBNlxcXFx1MDVBN1xcXFx1MDVBOFxcXFx1MDVBOVxcXFx1MDVBQVxcXFx1MDVBQlxcXFx1MDVBQ1xcXFx1MDVBRFxcXFx1MDVBRVxcXFx1MDVBRlxcXFx1MDVCMFxcXFx1MDVCMVxcXFx1MDVCMlxcXFx1MDVCM1xcXFx1MDVCNFxcXFx1MDVCNVxcXFx1MDVCNlxcXFx1MDVCN1xcXFx1MDVCOFxcXFx1MDVCOVxcXFx1MDVCQVxcXFx1MDVCQlxcXFx1MDVCQ1xcXFx1MDVCRFxcXFx1MDVCRlxcXFx1MDVDMVxcXFx1MDVDMlxcXFx1MDVDNFxcXFx1MDVDNVxcXFx1MDVDN1xcXFx1MDYxMFxcXFx1MDYxMVxcXFx1MDYxMlxcXFx1MDYxM1xcXFx1MDYxNFxcXFx1MDYxNVxcXFx1MDYxNlxcXFx1MDYxN1xcXFx1MDYxOFxcXFx1MDYxOVxcXFx1MDYxQVxcXFx1MDY0QlxcXFx1MDY0Q1xcXFx1MDY0RFxcXFx1MDY0RVxcXFx1MDY0RlxcXFx1MDY1MFxcXFx1MDY1MVxcXFx1MDY1MlxcXFx1MDY1M1xcXFx1MDY1NFxcXFx1MDY1NVxcXFx1MDY1NlxcXFx1MDY1N1xcXFx1MDY1OFxcXFx1MDY1OVxcXFx1MDY1QVxcXFx1MDY1QlxcXFx1MDY1Q1xcXFx1MDY1RFxcXFx1MDY1RVxcXFx1MDY3MFxcXFx1MDZENlxcXFx1MDZEN1xcXFx1MDZEOFxcXFx1MDZEOVxcXFx1MDZEQVxcXFx1MDZEQlxcXFx1MDZEQ1xcXFx1MDZERlxcXFx1MDZFMFxcXFx1MDZFMVxcXFx1MDZFMlxcXFx1MDZFM1xcXFx1MDZFNFxcXFx1MDZFN1xcXFx1MDZFOFxcXFx1MDZFQVxcXFx1MDZFQlxcXFx1MDZFQ1xcXFx1MDZFRFxcXFx1MDcxMVxcXFx1MDczMFxcXFx1MDczMVxcXFx1MDczMlxcXFx1MDczM1xcXFx1MDczNFxcXFx1MDczNVxcXFx1MDczNlxcXFx1MDczN1xcXFx1MDczOFxcXFx1MDczOVxcXFx1MDczQVxcXFx1MDczQlxcXFx1MDczQ1xcXFx1MDczRFxcXFx1MDczRVxcXFx1MDczRlxcXFx1MDc0MFxcXFx1MDc0MVxcXFx1MDc0MlxcXFx1MDc0M1xcXFx1MDc0NFxcXFx1MDc0NVxcXFx1MDc0NlxcXFx1MDc0N1xcXFx1MDc0OFxcXFx1MDc0OVxcXFx1MDc0QVxcXFx1MDdBNlxcXFx1MDdBN1xcXFx1MDdBOFxcXFx1MDdBOVxcXFx1MDdBQVxcXFx1MDdBQlxcXFx1MDdBQ1xcXFx1MDdBRFxcXFx1MDdBRVxcXFx1MDdBRlxcXFx1MDdCMFxcXFx1MDdFQlxcXFx1MDdFQ1xcXFx1MDdFRFxcXFx1MDdFRVxcXFx1MDdFRlxcXFx1MDdGMFxcXFx1MDdGMVxcXFx1MDdGMlxcXFx1MDdGM1xcXFx1MDkwMVxcXFx1MDkwMlxcXFx1MDkzQ1xcXFx1MDk0MVxcXFx1MDk0MlxcXFx1MDk0M1xcXFx1MDk0NFxcXFx1MDk0NVxcXFx1MDk0NlxcXFx1MDk0N1xcXFx1MDk0OFxcXFx1MDk0RFxcXFx1MDk1MVxcXFx1MDk1MlxcXFx1MDk1M1xcXFx1MDk1NFxcXFx1MDk2MlxcXFx1MDk2M1xcXFx1MDk4MVxcXFx1MDlCQ1xcXFx1MDlDMVxcXFx1MDlDMlxcXFx1MDlDM1xcXFx1MDlDNFxcXFx1MDlDRFxcXFx1MDlFMlxcXFx1MDlFM1xcXFx1MEEwMVxcXFx1MEEwMlxcXFx1MEEzQ1xcXFx1MEE0MVxcXFx1MEE0MlxcXFx1MEE0N1xcXFx1MEE0OFxcXFx1MEE0QlxcXFx1MEE0Q1xcXFx1MEE0RFxcXFx1MEE1MVxcXFx1MEE3MFxcXFx1MEE3MVxcXFx1MEE3NVxcXFx1MEE4MVxcXFx1MEE4MlxcXFx1MEFCQ1xcXFx1MEFDMVxcXFx1MEFDMlxcXFx1MEFDM1xcXFx1MEFDNFxcXFx1MEFDNVxcXFx1MEFDN1xcXFx1MEFDOFxcXFx1MEFDRFxcXFx1MEFFMlxcXFx1MEFFM1xcXFx1MEIwMVxcXFx1MEIzQ1xcXFx1MEIzRlxcXFx1MEI0MVxcXFx1MEI0MlxcXFx1MEI0M1xcXFx1MEI0NFxcXFx1MEI0RFxcXFx1MEI1NlxcXFx1MEI2MlxcXFx1MEI2M1xcXFx1MEI4MlxcXFx1MEJDMFxcXFx1MEJDRFxcXFx1MEMzRVxcXFx1MEMzRlxcXFx1MEM0MFxcXFx1MEM0NlxcXFx1MEM0N1xcXFx1MEM0OFxcXFx1MEM0QVxcXFx1MEM0QlxcXFx1MEM0Q1xcXFx1MEM0RFxcXFx1MEM1NVxcXFx1MEM1NlxcXFx1MEM2MlxcXFx1MEM2M1xcXFx1MENCQ1xcXFx1MENCRlxcXFx1MENDNlxcXFx1MENDQ1xcXFx1MENDRFxcXFx1MENFMlxcXFx1MENFM1xcXFx1MEQ0MVxcXFx1MEQ0MlxcXFx1MEQ0M1xcXFx1MEQ0NFxcXFx1MEQ0RFxcXFx1MEQ2MlxcXFx1MEQ2M1xcXFx1MERDQVxcXFx1MEREMlxcXFx1MEREM1xcXFx1MERENFxcXFx1MERENlxcXFx1MEUzMVxcXFx1MEUzNFxcXFx1MEUzNVxcXFx1MEUzNlxcXFx1MEUzN1xcXFx1MEUzOFxcXFx1MEUzOVxcXFx1MEUzQVxcXFx1MEU0N1xcXFx1MEU0OFxcXFx1MEU0OVxcXFx1MEU0QVxcXFx1MEU0QlxcXFx1MEU0Q1xcXFx1MEU0RFxcXFx1MEU0RVxcXFx1MEVCMVxcXFx1MEVCNFxcXFx1MEVCNVxcXFx1MEVCNlxcXFx1MEVCN1xcXFx1MEVCOFxcXFx1MEVCOVxcXFx1MEVCQlxcXFx1MEVCQ1xcXFx1MEVDOFxcXFx1MEVDOVxcXFx1MEVDQVxcXFx1MEVDQlxcXFx1MEVDQ1xcXFx1MEVDRFxcXFx1MEYxOFxcXFx1MEYxOVxcXFx1MEYzNVxcXFx1MEYzN1xcXFx1MEYzOVxcXFx1MEY3MVxcXFx1MEY3MlxcXFx1MEY3M1xcXFx1MEY3NFxcXFx1MEY3NVxcXFx1MEY3NlxcXFx1MEY3N1xcXFx1MEY3OFxcXFx1MEY3OVxcXFx1MEY3QVxcXFx1MEY3QlxcXFx1MEY3Q1xcXFx1MEY3RFxcXFx1MEY3RVxcXFx1MEY4MFxcXFx1MEY4MVxcXFx1MEY4MlxcXFx1MEY4M1xcXFx1MEY4NFxcXFx1MEY4NlxcXFx1MEY4N1xcXFx1MEY5MFxcXFx1MEY5MVxcXFx1MEY5MlxcXFx1MEY5M1xcXFx1MEY5NFxcXFx1MEY5NVxcXFx1MEY5NlxcXFx1MEY5N1xcXFx1MEY5OVxcXFx1MEY5QVxcXFx1MEY5QlxcXFx1MEY5Q1xcXFx1MEY5RFxcXFx1MEY5RVxcXFx1MEY5RlxcXFx1MEZBMFxcXFx1MEZBMVxcXFx1MEZBMlxcXFx1MEZBM1xcXFx1MEZBNFxcXFx1MEZBNVxcXFx1MEZBNlxcXFx1MEZBN1xcXFx1MEZBOFxcXFx1MEZBOVxcXFx1MEZBQVxcXFx1MEZBQlxcXFx1MEZBQ1xcXFx1MEZBRFxcXFx1MEZBRVxcXFx1MEZBRlxcXFx1MEZCMFxcXFx1MEZCMVxcXFx1MEZCMlxcXFx1MEZCM1xcXFx1MEZCNFxcXFx1MEZCNVxcXFx1MEZCNlxcXFx1MEZCN1xcXFx1MEZCOFxcXFx1MEZCOVxcXFx1MEZCQVxcXFx1MEZCQlxcXFx1MEZCQ1xcXFx1MEZDNlxcXFx1MTAyRFxcXFx1MTAyRVxcXFx1MTAyRlxcXFx1MTAzMFxcXFx1MTAzMlxcXFx1MTAzM1xcXFx1MTAzNFxcXFx1MTAzNVxcXFx1MTAzNlxcXFx1MTAzN1xcXFx1MTAzOVxcXFx1MTAzQVxcXFx1MTAzRFxcXFx1MTAzRVxcXFx1MTA1OFxcXFx1MTA1OVxcXFx1MTA1RVxcXFx1MTA1RlxcXFx1MTA2MFxcXFx1MTA3MVxcXFx1MTA3MlxcXFx1MTA3M1xcXFx1MTA3NFxcXFx1MTA4MlxcXFx1MTA4NVxcXFx1MTA4NlxcXFx1MTA4RFxcXFx1MTM1RlxcXFx1MTcxMlxcXFx1MTcxM1xcXFx1MTcxNFxcXFx1MTczMlxcXFx1MTczM1xcXFx1MTczNFxcXFx1MTc1MlxcXFx1MTc1M1xcXFx1MTc3MlxcXFx1MTc3M1xcXFx1MTdCN1xcXFx1MTdCOFxcXFx1MTdCOVxcXFx1MTdCQVxcXFx1MTdCQlxcXFx1MTdCQ1xcXFx1MTdCRFxcXFx1MTdDNlxcXFx1MTdDOVxcXFx1MTdDQVxcXFx1MTdDQlxcXFx1MTdDQ1xcXFx1MTdDRFxcXFx1MTdDRVxcXFx1MTdDRlxcXFx1MTdEMFxcXFx1MTdEMVxcXFx1MTdEMlxcXFx1MTdEM1xcXFx1MTdERFxcXFx1MTgwQlxcXFx1MTgwQ1xcXFx1MTgwRFxcXFx1MThBOVxcXFx1MTkyMFxcXFx1MTkyMVxcXFx1MTkyMlxcXFx1MTkyN1xcXFx1MTkyOFxcXFx1MTkzMlxcXFx1MTkzOVxcXFx1MTkzQVxcXFx1MTkzQlxcXFx1MUExN1xcXFx1MUExOFxcXFx1MUIwMFxcXFx1MUIwMVxcXFx1MUIwMlxcXFx1MUIwM1xcXFx1MUIzNFxcXFx1MUIzNlxcXFx1MUIzN1xcXFx1MUIzOFxcXFx1MUIzOVxcXFx1MUIzQVxcXFx1MUIzQ1xcXFx1MUI0MlxcXFx1MUI2QlxcXFx1MUI2Q1xcXFx1MUI2RFxcXFx1MUI2RVxcXFx1MUI2RlxcXFx1MUI3MFxcXFx1MUI3MVxcXFx1MUI3MlxcXFx1MUI3M1xcXFx1MUI4MFxcXFx1MUI4MVxcXFx1MUJBMlxcXFx1MUJBM1xcXFx1MUJBNFxcXFx1MUJBNVxcXFx1MUJBOFxcXFx1MUJBOVxcXFx1MUMyQ1xcXFx1MUMyRFxcXFx1MUMyRVxcXFx1MUMyRlxcXFx1MUMzMFxcXFx1MUMzMVxcXFx1MUMzMlxcXFx1MUMzM1xcXFx1MUMzNlxcXFx1MUMzN1xcXFx1MURDMFxcXFx1MURDMVxcXFx1MURDMlxcXFx1MURDM1xcXFx1MURDNFxcXFx1MURDNVxcXFx1MURDNlxcXFx1MURDN1xcXFx1MURDOFxcXFx1MURDOVxcXFx1MURDQVxcXFx1MURDQlxcXFx1MURDQ1xcXFx1MURDRFxcXFx1MURDRVxcXFx1MURDRlxcXFx1MUREMFxcXFx1MUREMVxcXFx1MUREMlxcXFx1MUREM1xcXFx1MURENFxcXFx1MURENVxcXFx1MURENlxcXFx1MUREN1xcXFx1MUREOFxcXFx1MUREOVxcXFx1MUREQVxcXFx1MUREQlxcXFx1MUREQ1xcXFx1MURERFxcXFx1MURERVxcXFx1MURERlxcXFx1MURFMFxcXFx1MURFMVxcXFx1MURFMlxcXFx1MURFM1xcXFx1MURFNFxcXFx1MURFNVxcXFx1MURFNlxcXFx1MURGRVxcXFx1MURGRlxcXFx1MjBEMFxcXFx1MjBEMVxcXFx1MjBEMlxcXFx1MjBEM1xcXFx1MjBENFxcXFx1MjBENVxcXFx1MjBENlxcXFx1MjBEN1xcXFx1MjBEOFxcXFx1MjBEOVxcXFx1MjBEQVxcXFx1MjBEQlxcXFx1MjBEQ1xcXFx1MjBFMVxcXFx1MjBFNVxcXFx1MjBFNlxcXFx1MjBFN1xcXFx1MjBFOFxcXFx1MjBFOVxcXFx1MjBFQVxcXFx1MjBFQlxcXFx1MjBFQ1xcXFx1MjBFRFxcXFx1MjBFRVxcXFx1MjBFRlxcXFx1MjBGMFxcXFx1MkRFMFxcXFx1MkRFMVxcXFx1MkRFMlxcXFx1MkRFM1xcXFx1MkRFNFxcXFx1MkRFNVxcXFx1MkRFNlxcXFx1MkRFN1xcXFx1MkRFOFxcXFx1MkRFOVxcXFx1MkRFQVxcXFx1MkRFQlxcXFx1MkRFQ1xcXFx1MkRFRFxcXFx1MkRFRVxcXFx1MkRFRlxcXFx1MkRGMFxcXFx1MkRGMVxcXFx1MkRGMlxcXFx1MkRGM1xcXFx1MkRGNFxcXFx1MkRGNVxcXFx1MkRGNlxcXFx1MkRGN1xcXFx1MkRGOFxcXFx1MkRGOVxcXFx1MkRGQVxcXFx1MkRGQlxcXFx1MkRGQ1xcXFx1MkRGRFxcXFx1MkRGRVxcXFx1MkRGRlxcXFx1MzAyQVxcXFx1MzAyQlxcXFx1MzAyQ1xcXFx1MzAyRFxcXFx1MzAyRVxcXFx1MzAyRlxcXFx1MzA5OVxcXFx1MzA5QVxcXFx1QTY2RlxcXFx1QTY3Q1xcXFx1QTY3RFxcXFx1QTgwMlxcXFx1QTgwNlxcXFx1QTgwQlxcXFx1QTgyNVxcXFx1QTgyNlxcXFx1QThDNFxcXFx1QTkyNlxcXFx1QTkyN1xcXFx1QTkyOFxcXFx1QTkyOVxcXFx1QTkyQVxcXFx1QTkyQlxcXFx1QTkyQ1xcXFx1QTkyRFxcXFx1QTk0N1xcXFx1QTk0OFxcXFx1QTk0OVxcXFx1QTk0QVxcXFx1QTk0QlxcXFx1QTk0Q1xcXFx1QTk0RFxcXFx1QTk0RVxcXFx1QTk0RlxcXFx1QTk1MFxcXFx1QTk1MVxcXFx1QUEyOVxcXFx1QUEyQVxcXFx1QUEyQlxcXFx1QUEyQ1xcXFx1QUEyRFxcXFx1QUEyRVxcXFx1QUEzMVxcXFx1QUEzMlxcXFx1QUEzNVxcXFx1QUEzNlxcXFx1QUE0M1xcXFx1QUE0Q1xcXFx1RkIxRVxcXFx1RkUwMFxcXFx1RkUwMVxcXFx1RkUwMlxcXFx1RkUwM1xcXFx1RkUwNFxcXFx1RkUwNVxcXFx1RkUwNlxcXFx1RkUwN1xcXFx1RkUwOFxcXFx1RkUwOVxcXFx1RkUwQVxcXFx1RkUwQlxcXFx1RkUwQ1xcXFx1RkUwRFxcXFx1RkUwRVxcXFx1RkUwRlxcXFx1RkUyMFxcXFx1RkUyMVxcXFx1RkUyMlxcXFx1RkUyM1xcXFx1RkUyNFxcXFx1RkUyNVxcXFx1RkUyNl1cIiwgZGVzY3JpcHRpb246IFwiW1xcXFx1MDMwMFxcXFx1MDMwMVxcXFx1MDMwMlxcXFx1MDMwM1xcXFx1MDMwNFxcXFx1MDMwNVxcXFx1MDMwNlxcXFx1MDMwN1xcXFx1MDMwOFxcXFx1MDMwOVxcXFx1MDMwQVxcXFx1MDMwQlxcXFx1MDMwQ1xcXFx1MDMwRFxcXFx1MDMwRVxcXFx1MDMwRlxcXFx1MDMxMFxcXFx1MDMxMVxcXFx1MDMxMlxcXFx1MDMxM1xcXFx1MDMxNFxcXFx1MDMxNVxcXFx1MDMxNlxcXFx1MDMxN1xcXFx1MDMxOFxcXFx1MDMxOVxcXFx1MDMxQVxcXFx1MDMxQlxcXFx1MDMxQ1xcXFx1MDMxRFxcXFx1MDMxRVxcXFx1MDMxRlxcXFx1MDMyMFxcXFx1MDMyMVxcXFx1MDMyMlxcXFx1MDMyM1xcXFx1MDMyNFxcXFx1MDMyNVxcXFx1MDMyNlxcXFx1MDMyN1xcXFx1MDMyOFxcXFx1MDMyOVxcXFx1MDMyQVxcXFx1MDMyQlxcXFx1MDMyQ1xcXFx1MDMyRFxcXFx1MDMyRVxcXFx1MDMyRlxcXFx1MDMzMFxcXFx1MDMzMVxcXFx1MDMzMlxcXFx1MDMzM1xcXFx1MDMzNFxcXFx1MDMzNVxcXFx1MDMzNlxcXFx1MDMzN1xcXFx1MDMzOFxcXFx1MDMzOVxcXFx1MDMzQVxcXFx1MDMzQlxcXFx1MDMzQ1xcXFx1MDMzRFxcXFx1MDMzRVxcXFx1MDMzRlxcXFx1MDM0MFxcXFx1MDM0MVxcXFx1MDM0MlxcXFx1MDM0M1xcXFx1MDM0NFxcXFx1MDM0NVxcXFx1MDM0NlxcXFx1MDM0N1xcXFx1MDM0OFxcXFx1MDM0OVxcXFx1MDM0QVxcXFx1MDM0QlxcXFx1MDM0Q1xcXFx1MDM0RFxcXFx1MDM0RVxcXFx1MDM0RlxcXFx1MDM1MFxcXFx1MDM1MVxcXFx1MDM1MlxcXFx1MDM1M1xcXFx1MDM1NFxcXFx1MDM1NVxcXFx1MDM1NlxcXFx1MDM1N1xcXFx1MDM1OFxcXFx1MDM1OVxcXFx1MDM1QVxcXFx1MDM1QlxcXFx1MDM1Q1xcXFx1MDM1RFxcXFx1MDM1RVxcXFx1MDM1RlxcXFx1MDM2MFxcXFx1MDM2MVxcXFx1MDM2MlxcXFx1MDM2M1xcXFx1MDM2NFxcXFx1MDM2NVxcXFx1MDM2NlxcXFx1MDM2N1xcXFx1MDM2OFxcXFx1MDM2OVxcXFx1MDM2QVxcXFx1MDM2QlxcXFx1MDM2Q1xcXFx1MDM2RFxcXFx1MDM2RVxcXFx1MDM2RlxcXFx1MDQ4M1xcXFx1MDQ4NFxcXFx1MDQ4NVxcXFx1MDQ4NlxcXFx1MDQ4N1xcXFx1MDU5MVxcXFx1MDU5MlxcXFx1MDU5M1xcXFx1MDU5NFxcXFx1MDU5NVxcXFx1MDU5NlxcXFx1MDU5N1xcXFx1MDU5OFxcXFx1MDU5OVxcXFx1MDU5QVxcXFx1MDU5QlxcXFx1MDU5Q1xcXFx1MDU5RFxcXFx1MDU5RVxcXFx1MDU5RlxcXFx1MDVBMFxcXFx1MDVBMVxcXFx1MDVBMlxcXFx1MDVBM1xcXFx1MDVBNFxcXFx1MDVBNVxcXFx1MDVBNlxcXFx1MDVBN1xcXFx1MDVBOFxcXFx1MDVBOVxcXFx1MDVBQVxcXFx1MDVBQlxcXFx1MDVBQ1xcXFx1MDVBRFxcXFx1MDVBRVxcXFx1MDVBRlxcXFx1MDVCMFxcXFx1MDVCMVxcXFx1MDVCMlxcXFx1MDVCM1xcXFx1MDVCNFxcXFx1MDVCNVxcXFx1MDVCNlxcXFx1MDVCN1xcXFx1MDVCOFxcXFx1MDVCOVxcXFx1MDVCQVxcXFx1MDVCQlxcXFx1MDVCQ1xcXFx1MDVCRFxcXFx1MDVCRlxcXFx1MDVDMVxcXFx1MDVDMlxcXFx1MDVDNFxcXFx1MDVDNVxcXFx1MDVDN1xcXFx1MDYxMFxcXFx1MDYxMVxcXFx1MDYxMlxcXFx1MDYxM1xcXFx1MDYxNFxcXFx1MDYxNVxcXFx1MDYxNlxcXFx1MDYxN1xcXFx1MDYxOFxcXFx1MDYxOVxcXFx1MDYxQVxcXFx1MDY0QlxcXFx1MDY0Q1xcXFx1MDY0RFxcXFx1MDY0RVxcXFx1MDY0RlxcXFx1MDY1MFxcXFx1MDY1MVxcXFx1MDY1MlxcXFx1MDY1M1xcXFx1MDY1NFxcXFx1MDY1NVxcXFx1MDY1NlxcXFx1MDY1N1xcXFx1MDY1OFxcXFx1MDY1OVxcXFx1MDY1QVxcXFx1MDY1QlxcXFx1MDY1Q1xcXFx1MDY1RFxcXFx1MDY1RVxcXFx1MDY3MFxcXFx1MDZENlxcXFx1MDZEN1xcXFx1MDZEOFxcXFx1MDZEOVxcXFx1MDZEQVxcXFx1MDZEQlxcXFx1MDZEQ1xcXFx1MDZERlxcXFx1MDZFMFxcXFx1MDZFMVxcXFx1MDZFMlxcXFx1MDZFM1xcXFx1MDZFNFxcXFx1MDZFN1xcXFx1MDZFOFxcXFx1MDZFQVxcXFx1MDZFQlxcXFx1MDZFQ1xcXFx1MDZFRFxcXFx1MDcxMVxcXFx1MDczMFxcXFx1MDczMVxcXFx1MDczMlxcXFx1MDczM1xcXFx1MDczNFxcXFx1MDczNVxcXFx1MDczNlxcXFx1MDczN1xcXFx1MDczOFxcXFx1MDczOVxcXFx1MDczQVxcXFx1MDczQlxcXFx1MDczQ1xcXFx1MDczRFxcXFx1MDczRVxcXFx1MDczRlxcXFx1MDc0MFxcXFx1MDc0MVxcXFx1MDc0MlxcXFx1MDc0M1xcXFx1MDc0NFxcXFx1MDc0NVxcXFx1MDc0NlxcXFx1MDc0N1xcXFx1MDc0OFxcXFx1MDc0OVxcXFx1MDc0QVxcXFx1MDdBNlxcXFx1MDdBN1xcXFx1MDdBOFxcXFx1MDdBOVxcXFx1MDdBQVxcXFx1MDdBQlxcXFx1MDdBQ1xcXFx1MDdBRFxcXFx1MDdBRVxcXFx1MDdBRlxcXFx1MDdCMFxcXFx1MDdFQlxcXFx1MDdFQ1xcXFx1MDdFRFxcXFx1MDdFRVxcXFx1MDdFRlxcXFx1MDdGMFxcXFx1MDdGMVxcXFx1MDdGMlxcXFx1MDdGM1xcXFx1MDkwMVxcXFx1MDkwMlxcXFx1MDkzQ1xcXFx1MDk0MVxcXFx1MDk0MlxcXFx1MDk0M1xcXFx1MDk0NFxcXFx1MDk0NVxcXFx1MDk0NlxcXFx1MDk0N1xcXFx1MDk0OFxcXFx1MDk0RFxcXFx1MDk1MVxcXFx1MDk1MlxcXFx1MDk1M1xcXFx1MDk1NFxcXFx1MDk2MlxcXFx1MDk2M1xcXFx1MDk4MVxcXFx1MDlCQ1xcXFx1MDlDMVxcXFx1MDlDMlxcXFx1MDlDM1xcXFx1MDlDNFxcXFx1MDlDRFxcXFx1MDlFMlxcXFx1MDlFM1xcXFx1MEEwMVxcXFx1MEEwMlxcXFx1MEEzQ1xcXFx1MEE0MVxcXFx1MEE0MlxcXFx1MEE0N1xcXFx1MEE0OFxcXFx1MEE0QlxcXFx1MEE0Q1xcXFx1MEE0RFxcXFx1MEE1MVxcXFx1MEE3MFxcXFx1MEE3MVxcXFx1MEE3NVxcXFx1MEE4MVxcXFx1MEE4MlxcXFx1MEFCQ1xcXFx1MEFDMVxcXFx1MEFDMlxcXFx1MEFDM1xcXFx1MEFDNFxcXFx1MEFDNVxcXFx1MEFDN1xcXFx1MEFDOFxcXFx1MEFDRFxcXFx1MEFFMlxcXFx1MEFFM1xcXFx1MEIwMVxcXFx1MEIzQ1xcXFx1MEIzRlxcXFx1MEI0MVxcXFx1MEI0MlxcXFx1MEI0M1xcXFx1MEI0NFxcXFx1MEI0RFxcXFx1MEI1NlxcXFx1MEI2MlxcXFx1MEI2M1xcXFx1MEI4MlxcXFx1MEJDMFxcXFx1MEJDRFxcXFx1MEMzRVxcXFx1MEMzRlxcXFx1MEM0MFxcXFx1MEM0NlxcXFx1MEM0N1xcXFx1MEM0OFxcXFx1MEM0QVxcXFx1MEM0QlxcXFx1MEM0Q1xcXFx1MEM0RFxcXFx1MEM1NVxcXFx1MEM1NlxcXFx1MEM2MlxcXFx1MEM2M1xcXFx1MENCQ1xcXFx1MENCRlxcXFx1MENDNlxcXFx1MENDQ1xcXFx1MENDRFxcXFx1MENFMlxcXFx1MENFM1xcXFx1MEQ0MVxcXFx1MEQ0MlxcXFx1MEQ0M1xcXFx1MEQ0NFxcXFx1MEQ0RFxcXFx1MEQ2MlxcXFx1MEQ2M1xcXFx1MERDQVxcXFx1MEREMlxcXFx1MEREM1xcXFx1MERENFxcXFx1MERENlxcXFx1MEUzMVxcXFx1MEUzNFxcXFx1MEUzNVxcXFx1MEUzNlxcXFx1MEUzN1xcXFx1MEUzOFxcXFx1MEUzOVxcXFx1MEUzQVxcXFx1MEU0N1xcXFx1MEU0OFxcXFx1MEU0OVxcXFx1MEU0QVxcXFx1MEU0QlxcXFx1MEU0Q1xcXFx1MEU0RFxcXFx1MEU0RVxcXFx1MEVCMVxcXFx1MEVCNFxcXFx1MEVCNVxcXFx1MEVCNlxcXFx1MEVCN1xcXFx1MEVCOFxcXFx1MEVCOVxcXFx1MEVCQlxcXFx1MEVCQ1xcXFx1MEVDOFxcXFx1MEVDOVxcXFx1MEVDQVxcXFx1MEVDQlxcXFx1MEVDQ1xcXFx1MEVDRFxcXFx1MEYxOFxcXFx1MEYxOVxcXFx1MEYzNVxcXFx1MEYzN1xcXFx1MEYzOVxcXFx1MEY3MVxcXFx1MEY3MlxcXFx1MEY3M1xcXFx1MEY3NFxcXFx1MEY3NVxcXFx1MEY3NlxcXFx1MEY3N1xcXFx1MEY3OFxcXFx1MEY3OVxcXFx1MEY3QVxcXFx1MEY3QlxcXFx1MEY3Q1xcXFx1MEY3RFxcXFx1MEY3RVxcXFx1MEY4MFxcXFx1MEY4MVxcXFx1MEY4MlxcXFx1MEY4M1xcXFx1MEY4NFxcXFx1MEY4NlxcXFx1MEY4N1xcXFx1MEY5MFxcXFx1MEY5MVxcXFx1MEY5MlxcXFx1MEY5M1xcXFx1MEY5NFxcXFx1MEY5NVxcXFx1MEY5NlxcXFx1MEY5N1xcXFx1MEY5OVxcXFx1MEY5QVxcXFx1MEY5QlxcXFx1MEY5Q1xcXFx1MEY5RFxcXFx1MEY5RVxcXFx1MEY5RlxcXFx1MEZBMFxcXFx1MEZBMVxcXFx1MEZBMlxcXFx1MEZBM1xcXFx1MEZBNFxcXFx1MEZBNVxcXFx1MEZBNlxcXFx1MEZBN1xcXFx1MEZBOFxcXFx1MEZBOVxcXFx1MEZBQVxcXFx1MEZBQlxcXFx1MEZBQ1xcXFx1MEZBRFxcXFx1MEZBRVxcXFx1MEZBRlxcXFx1MEZCMFxcXFx1MEZCMVxcXFx1MEZCMlxcXFx1MEZCM1xcXFx1MEZCNFxcXFx1MEZCNVxcXFx1MEZCNlxcXFx1MEZCN1xcXFx1MEZCOFxcXFx1MEZCOVxcXFx1MEZCQVxcXFx1MEZCQlxcXFx1MEZCQ1xcXFx1MEZDNlxcXFx1MTAyRFxcXFx1MTAyRVxcXFx1MTAyRlxcXFx1MTAzMFxcXFx1MTAzMlxcXFx1MTAzM1xcXFx1MTAzNFxcXFx1MTAzNVxcXFx1MTAzNlxcXFx1MTAzN1xcXFx1MTAzOVxcXFx1MTAzQVxcXFx1MTAzRFxcXFx1MTAzRVxcXFx1MTA1OFxcXFx1MTA1OVxcXFx1MTA1RVxcXFx1MTA1RlxcXFx1MTA2MFxcXFx1MTA3MVxcXFx1MTA3MlxcXFx1MTA3M1xcXFx1MTA3NFxcXFx1MTA4MlxcXFx1MTA4NVxcXFx1MTA4NlxcXFx1MTA4RFxcXFx1MTM1RlxcXFx1MTcxMlxcXFx1MTcxM1xcXFx1MTcxNFxcXFx1MTczMlxcXFx1MTczM1xcXFx1MTczNFxcXFx1MTc1MlxcXFx1MTc1M1xcXFx1MTc3MlxcXFx1MTc3M1xcXFx1MTdCN1xcXFx1MTdCOFxcXFx1MTdCOVxcXFx1MTdCQVxcXFx1MTdCQlxcXFx1MTdCQ1xcXFx1MTdCRFxcXFx1MTdDNlxcXFx1MTdDOVxcXFx1MTdDQVxcXFx1MTdDQlxcXFx1MTdDQ1xcXFx1MTdDRFxcXFx1MTdDRVxcXFx1MTdDRlxcXFx1MTdEMFxcXFx1MTdEMVxcXFx1MTdEMlxcXFx1MTdEM1xcXFx1MTdERFxcXFx1MTgwQlxcXFx1MTgwQ1xcXFx1MTgwRFxcXFx1MThBOVxcXFx1MTkyMFxcXFx1MTkyMVxcXFx1MTkyMlxcXFx1MTkyN1xcXFx1MTkyOFxcXFx1MTkzMlxcXFx1MTkzOVxcXFx1MTkzQVxcXFx1MTkzQlxcXFx1MUExN1xcXFx1MUExOFxcXFx1MUIwMFxcXFx1MUIwMVxcXFx1MUIwMlxcXFx1MUIwM1xcXFx1MUIzNFxcXFx1MUIzNlxcXFx1MUIzN1xcXFx1MUIzOFxcXFx1MUIzOVxcXFx1MUIzQVxcXFx1MUIzQ1xcXFx1MUI0MlxcXFx1MUI2QlxcXFx1MUI2Q1xcXFx1MUI2RFxcXFx1MUI2RVxcXFx1MUI2RlxcXFx1MUI3MFxcXFx1MUI3MVxcXFx1MUI3MlxcXFx1MUI3M1xcXFx1MUI4MFxcXFx1MUI4MVxcXFx1MUJBMlxcXFx1MUJBM1xcXFx1MUJBNFxcXFx1MUJBNVxcXFx1MUJBOFxcXFx1MUJBOVxcXFx1MUMyQ1xcXFx1MUMyRFxcXFx1MUMyRVxcXFx1MUMyRlxcXFx1MUMzMFxcXFx1MUMzMVxcXFx1MUMzMlxcXFx1MUMzM1xcXFx1MUMzNlxcXFx1MUMzN1xcXFx1MURDMFxcXFx1MURDMVxcXFx1MURDMlxcXFx1MURDM1xcXFx1MURDNFxcXFx1MURDNVxcXFx1MURDNlxcXFx1MURDN1xcXFx1MURDOFxcXFx1MURDOVxcXFx1MURDQVxcXFx1MURDQlxcXFx1MURDQ1xcXFx1MURDRFxcXFx1MURDRVxcXFx1MURDRlxcXFx1MUREMFxcXFx1MUREMVxcXFx1MUREMlxcXFx1MUREM1xcXFx1MURENFxcXFx1MURENVxcXFx1MURENlxcXFx1MUREN1xcXFx1MUREOFxcXFx1MUREOVxcXFx1MUREQVxcXFx1MUREQlxcXFx1MUREQ1xcXFx1MURERFxcXFx1MURERVxcXFx1MURERlxcXFx1MURFMFxcXFx1MURFMVxcXFx1MURFMlxcXFx1MURFM1xcXFx1MURFNFxcXFx1MURFNVxcXFx1MURFNlxcXFx1MURGRVxcXFx1MURGRlxcXFx1MjBEMFxcXFx1MjBEMVxcXFx1MjBEMlxcXFx1MjBEM1xcXFx1MjBENFxcXFx1MjBENVxcXFx1MjBENlxcXFx1MjBEN1xcXFx1MjBEOFxcXFx1MjBEOVxcXFx1MjBEQVxcXFx1MjBEQlxcXFx1MjBEQ1xcXFx1MjBFMVxcXFx1MjBFNVxcXFx1MjBFNlxcXFx1MjBFN1xcXFx1MjBFOFxcXFx1MjBFOVxcXFx1MjBFQVxcXFx1MjBFQlxcXFx1MjBFQ1xcXFx1MjBFRFxcXFx1MjBFRVxcXFx1MjBFRlxcXFx1MjBGMFxcXFx1MkRFMFxcXFx1MkRFMVxcXFx1MkRFMlxcXFx1MkRFM1xcXFx1MkRFNFxcXFx1MkRFNVxcXFx1MkRFNlxcXFx1MkRFN1xcXFx1MkRFOFxcXFx1MkRFOVxcXFx1MkRFQVxcXFx1MkRFQlxcXFx1MkRFQ1xcXFx1MkRFRFxcXFx1MkRFRVxcXFx1MkRFRlxcXFx1MkRGMFxcXFx1MkRGMVxcXFx1MkRGMlxcXFx1MkRGM1xcXFx1MkRGNFxcXFx1MkRGNVxcXFx1MkRGNlxcXFx1MkRGN1xcXFx1MkRGOFxcXFx1MkRGOVxcXFx1MkRGQVxcXFx1MkRGQlxcXFx1MkRGQ1xcXFx1MkRGRFxcXFx1MkRGRVxcXFx1MkRGRlxcXFx1MzAyQVxcXFx1MzAyQlxcXFx1MzAyQ1xcXFx1MzAyRFxcXFx1MzAyRVxcXFx1MzAyRlxcXFx1MzA5OVxcXFx1MzA5QVxcXFx1QTY2RlxcXFx1QTY3Q1xcXFx1QTY3RFxcXFx1QTgwMlxcXFx1QTgwNlxcXFx1QTgwQlxcXFx1QTgyNVxcXFx1QTgyNlxcXFx1QThDNFxcXFx1QTkyNlxcXFx1QTkyN1xcXFx1QTkyOFxcXFx1QTkyOVxcXFx1QTkyQVxcXFx1QTkyQlxcXFx1QTkyQ1xcXFx1QTkyRFxcXFx1QTk0N1xcXFx1QTk0OFxcXFx1QTk0OVxcXFx1QTk0QVxcXFx1QTk0QlxcXFx1QTk0Q1xcXFx1QTk0RFxcXFx1QTk0RVxcXFx1QTk0RlxcXFx1QTk1MFxcXFx1QTk1MVxcXFx1QUEyOVxcXFx1QUEyQVxcXFx1QUEyQlxcXFx1QUEyQ1xcXFx1QUEyRFxcXFx1QUEyRVxcXFx1QUEzMVxcXFx1QUEzMlxcXFx1QUEzNVxcXFx1QUEzNlxcXFx1QUE0M1xcXFx1QUE0Q1xcXFx1RkIxRVxcXFx1RkUwMFxcXFx1RkUwMVxcXFx1RkUwMlxcXFx1RkUwM1xcXFx1RkUwNFxcXFx1RkUwNVxcXFx1RkUwNlxcXFx1RkUwN1xcXFx1RkUwOFxcXFx1RkUwOVxcXFx1RkUwQVxcXFx1RkUwQlxcXFx1RkUwQ1xcXFx1RkUwRFxcXFx1RkUwRVxcXFx1RkUwRlxcXFx1RkUyMFxcXFx1RkUyMVxcXFx1RkUyMlxcXFx1RkUyM1xcXFx1RkUyNFxcXFx1RkUyNVxcXFx1RkUyNl1cIiB9LFxuICAgICAgICBwZWckYzg4ID0gL15bMDEyMzQ1Njc4OVxcdTA2NjBcXHUwNjYxXFx1MDY2MlxcdTA2NjNcXHUwNjY0XFx1MDY2NVxcdTA2NjZcXHUwNjY3XFx1MDY2OFxcdTA2NjlcXHUwNkYwXFx1MDZGMVxcdTA2RjJcXHUwNkYzXFx1MDZGNFxcdTA2RjVcXHUwNkY2XFx1MDZGN1xcdTA2RjhcXHUwNkY5XFx1MDdDMFxcdTA3QzFcXHUwN0MyXFx1MDdDM1xcdTA3QzRcXHUwN0M1XFx1MDdDNlxcdTA3QzdcXHUwN0M4XFx1MDdDOVxcdTA5NjZcXHUwOTY3XFx1MDk2OFxcdTA5NjlcXHUwOTZBXFx1MDk2QlxcdTA5NkNcXHUwOTZEXFx1MDk2RVxcdTA5NkZcXHUwOUU2XFx1MDlFN1xcdTA5RThcXHUwOUU5XFx1MDlFQVxcdTA5RUJcXHUwOUVDXFx1MDlFRFxcdTA5RUVcXHUwOUVGXFx1MEE2NlxcdTBBNjdcXHUwQTY4XFx1MEE2OVxcdTBBNkFcXHUwQTZCXFx1MEE2Q1xcdTBBNkRcXHUwQTZFXFx1MEE2RlxcdTBBRTZcXHUwQUU3XFx1MEFFOFxcdTBBRTlcXHUwQUVBXFx1MEFFQlxcdTBBRUNcXHUwQUVEXFx1MEFFRVxcdTBBRUZcXHUwQjY2XFx1MEI2N1xcdTBCNjhcXHUwQjY5XFx1MEI2QVxcdTBCNkJcXHUwQjZDXFx1MEI2RFxcdTBCNkVcXHUwQjZGXFx1MEJFNlxcdTBCRTdcXHUwQkU4XFx1MEJFOVxcdTBCRUFcXHUwQkVCXFx1MEJFQ1xcdTBCRURcXHUwQkVFXFx1MEJFRlxcdTBDNjZcXHUwQzY3XFx1MEM2OFxcdTBDNjlcXHUwQzZBXFx1MEM2QlxcdTBDNkNcXHUwQzZEXFx1MEM2RVxcdTBDNkZcXHUwQ0U2XFx1MENFN1xcdTBDRThcXHUwQ0U5XFx1MENFQVxcdTBDRUJcXHUwQ0VDXFx1MENFRFxcdTBDRUVcXHUwQ0VGXFx1MEQ2NlxcdTBENjdcXHUwRDY4XFx1MEQ2OVxcdTBENkFcXHUwRDZCXFx1MEQ2Q1xcdTBENkRcXHUwRDZFXFx1MEQ2RlxcdTBFNTBcXHUwRTUxXFx1MEU1MlxcdTBFNTNcXHUwRTU0XFx1MEU1NVxcdTBFNTZcXHUwRTU3XFx1MEU1OFxcdTBFNTlcXHUwRUQwXFx1MEVEMVxcdTBFRDJcXHUwRUQzXFx1MEVENFxcdTBFRDVcXHUwRUQ2XFx1MEVEN1xcdTBFRDhcXHUwRUQ5XFx1MEYyMFxcdTBGMjFcXHUwRjIyXFx1MEYyM1xcdTBGMjRcXHUwRjI1XFx1MEYyNlxcdTBGMjdcXHUwRjI4XFx1MEYyOVxcdTEwNDBcXHUxMDQxXFx1MTA0MlxcdTEwNDNcXHUxMDQ0XFx1MTA0NVxcdTEwNDZcXHUxMDQ3XFx1MTA0OFxcdTEwNDlcXHUxMDkwXFx1MTA5MVxcdTEwOTJcXHUxMDkzXFx1MTA5NFxcdTEwOTVcXHUxMDk2XFx1MTA5N1xcdTEwOThcXHUxMDk5XFx1MTdFMFxcdTE3RTFcXHUxN0UyXFx1MTdFM1xcdTE3RTRcXHUxN0U1XFx1MTdFNlxcdTE3RTdcXHUxN0U4XFx1MTdFOVxcdTE4MTBcXHUxODExXFx1MTgxMlxcdTE4MTNcXHUxODE0XFx1MTgxNVxcdTE4MTZcXHUxODE3XFx1MTgxOFxcdTE4MTlcXHUxOTQ2XFx1MTk0N1xcdTE5NDhcXHUxOTQ5XFx1MTk0QVxcdTE5NEJcXHUxOTRDXFx1MTk0RFxcdTE5NEVcXHUxOTRGXFx1MTlEMFxcdTE5RDFcXHUxOUQyXFx1MTlEM1xcdTE5RDRcXHUxOUQ1XFx1MTlENlxcdTE5RDdcXHUxOUQ4XFx1MTlEOVxcdTFCNTBcXHUxQjUxXFx1MUI1MlxcdTFCNTNcXHUxQjU0XFx1MUI1NVxcdTFCNTZcXHUxQjU3XFx1MUI1OFxcdTFCNTlcXHUxQkIwXFx1MUJCMVxcdTFCQjJcXHUxQkIzXFx1MUJCNFxcdTFCQjVcXHUxQkI2XFx1MUJCN1xcdTFCQjhcXHUxQkI5XFx1MUM0MFxcdTFDNDFcXHUxQzQyXFx1MUM0M1xcdTFDNDRcXHUxQzQ1XFx1MUM0NlxcdTFDNDdcXHUxQzQ4XFx1MUM0OVxcdTFDNTBcXHUxQzUxXFx1MUM1MlxcdTFDNTNcXHUxQzU0XFx1MUM1NVxcdTFDNTZcXHUxQzU3XFx1MUM1OFxcdTFDNTlcXHVBNjIwXFx1QTYyMVxcdUE2MjJcXHVBNjIzXFx1QTYyNFxcdUE2MjVcXHVBNjI2XFx1QTYyN1xcdUE2MjhcXHVBNjI5XFx1QThEMFxcdUE4RDFcXHVBOEQyXFx1QThEM1xcdUE4RDRcXHVBOEQ1XFx1QThENlxcdUE4RDdcXHVBOEQ4XFx1QThEOVxcdUE5MDBcXHVBOTAxXFx1QTkwMlxcdUE5MDNcXHVBOTA0XFx1QTkwNVxcdUE5MDZcXHVBOTA3XFx1QTkwOFxcdUE5MDlcXHVBQTUwXFx1QUE1MVxcdUFBNTJcXHVBQTUzXFx1QUE1NFxcdUFBNTVcXHVBQTU2XFx1QUE1N1xcdUFBNThcXHVBQTU5XFx1RkYxMFxcdUZGMTFcXHVGRjEyXFx1RkYxM1xcdUZGMTRcXHVGRjE1XFx1RkYxNlxcdUZGMTdcXHVGRjE4XFx1RkYxOV0vLFxuICAgICAgICBwZWckYzg5ID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIlswMTIzNDU2Nzg5XFxcXHUwNjYwXFxcXHUwNjYxXFxcXHUwNjYyXFxcXHUwNjYzXFxcXHUwNjY0XFxcXHUwNjY1XFxcXHUwNjY2XFxcXHUwNjY3XFxcXHUwNjY4XFxcXHUwNjY5XFxcXHUwNkYwXFxcXHUwNkYxXFxcXHUwNkYyXFxcXHUwNkYzXFxcXHUwNkY0XFxcXHUwNkY1XFxcXHUwNkY2XFxcXHUwNkY3XFxcXHUwNkY4XFxcXHUwNkY5XFxcXHUwN0MwXFxcXHUwN0MxXFxcXHUwN0MyXFxcXHUwN0MzXFxcXHUwN0M0XFxcXHUwN0M1XFxcXHUwN0M2XFxcXHUwN0M3XFxcXHUwN0M4XFxcXHUwN0M5XFxcXHUwOTY2XFxcXHUwOTY3XFxcXHUwOTY4XFxcXHUwOTY5XFxcXHUwOTZBXFxcXHUwOTZCXFxcXHUwOTZDXFxcXHUwOTZEXFxcXHUwOTZFXFxcXHUwOTZGXFxcXHUwOUU2XFxcXHUwOUU3XFxcXHUwOUU4XFxcXHUwOUU5XFxcXHUwOUVBXFxcXHUwOUVCXFxcXHUwOUVDXFxcXHUwOUVEXFxcXHUwOUVFXFxcXHUwOUVGXFxcXHUwQTY2XFxcXHUwQTY3XFxcXHUwQTY4XFxcXHUwQTY5XFxcXHUwQTZBXFxcXHUwQTZCXFxcXHUwQTZDXFxcXHUwQTZEXFxcXHUwQTZFXFxcXHUwQTZGXFxcXHUwQUU2XFxcXHUwQUU3XFxcXHUwQUU4XFxcXHUwQUU5XFxcXHUwQUVBXFxcXHUwQUVCXFxcXHUwQUVDXFxcXHUwQUVEXFxcXHUwQUVFXFxcXHUwQUVGXFxcXHUwQjY2XFxcXHUwQjY3XFxcXHUwQjY4XFxcXHUwQjY5XFxcXHUwQjZBXFxcXHUwQjZCXFxcXHUwQjZDXFxcXHUwQjZEXFxcXHUwQjZFXFxcXHUwQjZGXFxcXHUwQkU2XFxcXHUwQkU3XFxcXHUwQkU4XFxcXHUwQkU5XFxcXHUwQkVBXFxcXHUwQkVCXFxcXHUwQkVDXFxcXHUwQkVEXFxcXHUwQkVFXFxcXHUwQkVGXFxcXHUwQzY2XFxcXHUwQzY3XFxcXHUwQzY4XFxcXHUwQzY5XFxcXHUwQzZBXFxcXHUwQzZCXFxcXHUwQzZDXFxcXHUwQzZEXFxcXHUwQzZFXFxcXHUwQzZGXFxcXHUwQ0U2XFxcXHUwQ0U3XFxcXHUwQ0U4XFxcXHUwQ0U5XFxcXHUwQ0VBXFxcXHUwQ0VCXFxcXHUwQ0VDXFxcXHUwQ0VEXFxcXHUwQ0VFXFxcXHUwQ0VGXFxcXHUwRDY2XFxcXHUwRDY3XFxcXHUwRDY4XFxcXHUwRDY5XFxcXHUwRDZBXFxcXHUwRDZCXFxcXHUwRDZDXFxcXHUwRDZEXFxcXHUwRDZFXFxcXHUwRDZGXFxcXHUwRTUwXFxcXHUwRTUxXFxcXHUwRTUyXFxcXHUwRTUzXFxcXHUwRTU0XFxcXHUwRTU1XFxcXHUwRTU2XFxcXHUwRTU3XFxcXHUwRTU4XFxcXHUwRTU5XFxcXHUwRUQwXFxcXHUwRUQxXFxcXHUwRUQyXFxcXHUwRUQzXFxcXHUwRUQ0XFxcXHUwRUQ1XFxcXHUwRUQ2XFxcXHUwRUQ3XFxcXHUwRUQ4XFxcXHUwRUQ5XFxcXHUwRjIwXFxcXHUwRjIxXFxcXHUwRjIyXFxcXHUwRjIzXFxcXHUwRjI0XFxcXHUwRjI1XFxcXHUwRjI2XFxcXHUwRjI3XFxcXHUwRjI4XFxcXHUwRjI5XFxcXHUxMDQwXFxcXHUxMDQxXFxcXHUxMDQyXFxcXHUxMDQzXFxcXHUxMDQ0XFxcXHUxMDQ1XFxcXHUxMDQ2XFxcXHUxMDQ3XFxcXHUxMDQ4XFxcXHUxMDQ5XFxcXHUxMDkwXFxcXHUxMDkxXFxcXHUxMDkyXFxcXHUxMDkzXFxcXHUxMDk0XFxcXHUxMDk1XFxcXHUxMDk2XFxcXHUxMDk3XFxcXHUxMDk4XFxcXHUxMDk5XFxcXHUxN0UwXFxcXHUxN0UxXFxcXHUxN0UyXFxcXHUxN0UzXFxcXHUxN0U0XFxcXHUxN0U1XFxcXHUxN0U2XFxcXHUxN0U3XFxcXHUxN0U4XFxcXHUxN0U5XFxcXHUxODEwXFxcXHUxODExXFxcXHUxODEyXFxcXHUxODEzXFxcXHUxODE0XFxcXHUxODE1XFxcXHUxODE2XFxcXHUxODE3XFxcXHUxODE4XFxcXHUxODE5XFxcXHUxOTQ2XFxcXHUxOTQ3XFxcXHUxOTQ4XFxcXHUxOTQ5XFxcXHUxOTRBXFxcXHUxOTRCXFxcXHUxOTRDXFxcXHUxOTREXFxcXHUxOTRFXFxcXHUxOTRGXFxcXHUxOUQwXFxcXHUxOUQxXFxcXHUxOUQyXFxcXHUxOUQzXFxcXHUxOUQ0XFxcXHUxOUQ1XFxcXHUxOUQ2XFxcXHUxOUQ3XFxcXHUxOUQ4XFxcXHUxOUQ5XFxcXHUxQjUwXFxcXHUxQjUxXFxcXHUxQjUyXFxcXHUxQjUzXFxcXHUxQjU0XFxcXHUxQjU1XFxcXHUxQjU2XFxcXHUxQjU3XFxcXHUxQjU4XFxcXHUxQjU5XFxcXHUxQkIwXFxcXHUxQkIxXFxcXHUxQkIyXFxcXHUxQkIzXFxcXHUxQkI0XFxcXHUxQkI1XFxcXHUxQkI2XFxcXHUxQkI3XFxcXHUxQkI4XFxcXHUxQkI5XFxcXHUxQzQwXFxcXHUxQzQxXFxcXHUxQzQyXFxcXHUxQzQzXFxcXHUxQzQ0XFxcXHUxQzQ1XFxcXHUxQzQ2XFxcXHUxQzQ3XFxcXHUxQzQ4XFxcXHUxQzQ5XFxcXHUxQzUwXFxcXHUxQzUxXFxcXHUxQzUyXFxcXHUxQzUzXFxcXHUxQzU0XFxcXHUxQzU1XFxcXHUxQzU2XFxcXHUxQzU3XFxcXHUxQzU4XFxcXHUxQzU5XFxcXHVBNjIwXFxcXHVBNjIxXFxcXHVBNjIyXFxcXHVBNjIzXFxcXHVBNjI0XFxcXHVBNjI1XFxcXHVBNjI2XFxcXHVBNjI3XFxcXHVBNjI4XFxcXHVBNjI5XFxcXHVBOEQwXFxcXHVBOEQxXFxcXHVBOEQyXFxcXHVBOEQzXFxcXHVBOEQ0XFxcXHVBOEQ1XFxcXHVBOEQ2XFxcXHVBOEQ3XFxcXHVBOEQ4XFxcXHVBOEQ5XFxcXHVBOTAwXFxcXHVBOTAxXFxcXHVBOTAyXFxcXHVBOTAzXFxcXHVBOTA0XFxcXHVBOTA1XFxcXHVBOTA2XFxcXHVBOTA3XFxcXHVBOTA4XFxcXHVBOTA5XFxcXHVBQTUwXFxcXHVBQTUxXFxcXHVBQTUyXFxcXHVBQTUzXFxcXHVBQTU0XFxcXHVBQTU1XFxcXHVBQTU2XFxcXHVBQTU3XFxcXHVBQTU4XFxcXHVBQTU5XFxcXHVGRjEwXFxcXHVGRjExXFxcXHVGRjEyXFxcXHVGRjEzXFxcXHVGRjE0XFxcXHVGRjE1XFxcXHVGRjE2XFxcXHVGRjE3XFxcXHVGRjE4XFxcXHVGRjE5XVwiLCBkZXNjcmlwdGlvbjogXCJbMDEyMzQ1Njc4OVxcXFx1MDY2MFxcXFx1MDY2MVxcXFx1MDY2MlxcXFx1MDY2M1xcXFx1MDY2NFxcXFx1MDY2NVxcXFx1MDY2NlxcXFx1MDY2N1xcXFx1MDY2OFxcXFx1MDY2OVxcXFx1MDZGMFxcXFx1MDZGMVxcXFx1MDZGMlxcXFx1MDZGM1xcXFx1MDZGNFxcXFx1MDZGNVxcXFx1MDZGNlxcXFx1MDZGN1xcXFx1MDZGOFxcXFx1MDZGOVxcXFx1MDdDMFxcXFx1MDdDMVxcXFx1MDdDMlxcXFx1MDdDM1xcXFx1MDdDNFxcXFx1MDdDNVxcXFx1MDdDNlxcXFx1MDdDN1xcXFx1MDdDOFxcXFx1MDdDOVxcXFx1MDk2NlxcXFx1MDk2N1xcXFx1MDk2OFxcXFx1MDk2OVxcXFx1MDk2QVxcXFx1MDk2QlxcXFx1MDk2Q1xcXFx1MDk2RFxcXFx1MDk2RVxcXFx1MDk2RlxcXFx1MDlFNlxcXFx1MDlFN1xcXFx1MDlFOFxcXFx1MDlFOVxcXFx1MDlFQVxcXFx1MDlFQlxcXFx1MDlFQ1xcXFx1MDlFRFxcXFx1MDlFRVxcXFx1MDlFRlxcXFx1MEE2NlxcXFx1MEE2N1xcXFx1MEE2OFxcXFx1MEE2OVxcXFx1MEE2QVxcXFx1MEE2QlxcXFx1MEE2Q1xcXFx1MEE2RFxcXFx1MEE2RVxcXFx1MEE2RlxcXFx1MEFFNlxcXFx1MEFFN1xcXFx1MEFFOFxcXFx1MEFFOVxcXFx1MEFFQVxcXFx1MEFFQlxcXFx1MEFFQ1xcXFx1MEFFRFxcXFx1MEFFRVxcXFx1MEFFRlxcXFx1MEI2NlxcXFx1MEI2N1xcXFx1MEI2OFxcXFx1MEI2OVxcXFx1MEI2QVxcXFx1MEI2QlxcXFx1MEI2Q1xcXFx1MEI2RFxcXFx1MEI2RVxcXFx1MEI2RlxcXFx1MEJFNlxcXFx1MEJFN1xcXFx1MEJFOFxcXFx1MEJFOVxcXFx1MEJFQVxcXFx1MEJFQlxcXFx1MEJFQ1xcXFx1MEJFRFxcXFx1MEJFRVxcXFx1MEJFRlxcXFx1MEM2NlxcXFx1MEM2N1xcXFx1MEM2OFxcXFx1MEM2OVxcXFx1MEM2QVxcXFx1MEM2QlxcXFx1MEM2Q1xcXFx1MEM2RFxcXFx1MEM2RVxcXFx1MEM2RlxcXFx1MENFNlxcXFx1MENFN1xcXFx1MENFOFxcXFx1MENFOVxcXFx1MENFQVxcXFx1MENFQlxcXFx1MENFQ1xcXFx1MENFRFxcXFx1MENFRVxcXFx1MENFRlxcXFx1MEQ2NlxcXFx1MEQ2N1xcXFx1MEQ2OFxcXFx1MEQ2OVxcXFx1MEQ2QVxcXFx1MEQ2QlxcXFx1MEQ2Q1xcXFx1MEQ2RFxcXFx1MEQ2RVxcXFx1MEQ2RlxcXFx1MEU1MFxcXFx1MEU1MVxcXFx1MEU1MlxcXFx1MEU1M1xcXFx1MEU1NFxcXFx1MEU1NVxcXFx1MEU1NlxcXFx1MEU1N1xcXFx1MEU1OFxcXFx1MEU1OVxcXFx1MEVEMFxcXFx1MEVEMVxcXFx1MEVEMlxcXFx1MEVEM1xcXFx1MEVENFxcXFx1MEVENVxcXFx1MEVENlxcXFx1MEVEN1xcXFx1MEVEOFxcXFx1MEVEOVxcXFx1MEYyMFxcXFx1MEYyMVxcXFx1MEYyMlxcXFx1MEYyM1xcXFx1MEYyNFxcXFx1MEYyNVxcXFx1MEYyNlxcXFx1MEYyN1xcXFx1MEYyOFxcXFx1MEYyOVxcXFx1MTA0MFxcXFx1MTA0MVxcXFx1MTA0MlxcXFx1MTA0M1xcXFx1MTA0NFxcXFx1MTA0NVxcXFx1MTA0NlxcXFx1MTA0N1xcXFx1MTA0OFxcXFx1MTA0OVxcXFx1MTA5MFxcXFx1MTA5MVxcXFx1MTA5MlxcXFx1MTA5M1xcXFx1MTA5NFxcXFx1MTA5NVxcXFx1MTA5NlxcXFx1MTA5N1xcXFx1MTA5OFxcXFx1MTA5OVxcXFx1MTdFMFxcXFx1MTdFMVxcXFx1MTdFMlxcXFx1MTdFM1xcXFx1MTdFNFxcXFx1MTdFNVxcXFx1MTdFNlxcXFx1MTdFN1xcXFx1MTdFOFxcXFx1MTdFOVxcXFx1MTgxMFxcXFx1MTgxMVxcXFx1MTgxMlxcXFx1MTgxM1xcXFx1MTgxNFxcXFx1MTgxNVxcXFx1MTgxNlxcXFx1MTgxN1xcXFx1MTgxOFxcXFx1MTgxOVxcXFx1MTk0NlxcXFx1MTk0N1xcXFx1MTk0OFxcXFx1MTk0OVxcXFx1MTk0QVxcXFx1MTk0QlxcXFx1MTk0Q1xcXFx1MTk0RFxcXFx1MTk0RVxcXFx1MTk0RlxcXFx1MTlEMFxcXFx1MTlEMVxcXFx1MTlEMlxcXFx1MTlEM1xcXFx1MTlENFxcXFx1MTlENVxcXFx1MTlENlxcXFx1MTlEN1xcXFx1MTlEOFxcXFx1MTlEOVxcXFx1MUI1MFxcXFx1MUI1MVxcXFx1MUI1MlxcXFx1MUI1M1xcXFx1MUI1NFxcXFx1MUI1NVxcXFx1MUI1NlxcXFx1MUI1N1xcXFx1MUI1OFxcXFx1MUI1OVxcXFx1MUJCMFxcXFx1MUJCMVxcXFx1MUJCMlxcXFx1MUJCM1xcXFx1MUJCNFxcXFx1MUJCNVxcXFx1MUJCNlxcXFx1MUJCN1xcXFx1MUJCOFxcXFx1MUJCOVxcXFx1MUM0MFxcXFx1MUM0MVxcXFx1MUM0MlxcXFx1MUM0M1xcXFx1MUM0NFxcXFx1MUM0NVxcXFx1MUM0NlxcXFx1MUM0N1xcXFx1MUM0OFxcXFx1MUM0OVxcXFx1MUM1MFxcXFx1MUM1MVxcXFx1MUM1MlxcXFx1MUM1M1xcXFx1MUM1NFxcXFx1MUM1NVxcXFx1MUM1NlxcXFx1MUM1N1xcXFx1MUM1OFxcXFx1MUM1OVxcXFx1QTYyMFxcXFx1QTYyMVxcXFx1QTYyMlxcXFx1QTYyM1xcXFx1QTYyNFxcXFx1QTYyNVxcXFx1QTYyNlxcXFx1QTYyN1xcXFx1QTYyOFxcXFx1QTYyOVxcXFx1QThEMFxcXFx1QThEMVxcXFx1QThEMlxcXFx1QThEM1xcXFx1QThENFxcXFx1QThENVxcXFx1QThENlxcXFx1QThEN1xcXFx1QThEOFxcXFx1QThEOVxcXFx1QTkwMFxcXFx1QTkwMVxcXFx1QTkwMlxcXFx1QTkwM1xcXFx1QTkwNFxcXFx1QTkwNVxcXFx1QTkwNlxcXFx1QTkwN1xcXFx1QTkwOFxcXFx1QTkwOVxcXFx1QUE1MFxcXFx1QUE1MVxcXFx1QUE1MlxcXFx1QUE1M1xcXFx1QUE1NFxcXFx1QUE1NVxcXFx1QUE1NlxcXFx1QUE1N1xcXFx1QUE1OFxcXFx1QUE1OVxcXFx1RkYxMFxcXFx1RkYxMVxcXFx1RkYxMlxcXFx1RkYxM1xcXFx1RkYxNFxcXFx1RkYxNVxcXFx1RkYxNlxcXFx1RkYxN1xcXFx1RkYxOFxcXFx1RkYxOV1cIiB9LFxuICAgICAgICBwZWckYzkwID0gL15bXFx1MTZFRVxcdTE2RUZcXHUxNkYwXFx1MjE2MFxcdTIxNjFcXHUyMTYyXFx1MjE2M1xcdTIxNjRcXHUyMTY1XFx1MjE2NlxcdTIxNjdcXHUyMTY4XFx1MjE2OVxcdTIxNkFcXHUyMTZCXFx1MjE2Q1xcdTIxNkRcXHUyMTZFXFx1MjE2RlxcdTIxNzBcXHUyMTcxXFx1MjE3MlxcdTIxNzNcXHUyMTc0XFx1MjE3NVxcdTIxNzZcXHUyMTc3XFx1MjE3OFxcdTIxNzlcXHUyMTdBXFx1MjE3QlxcdTIxN0NcXHUyMTdEXFx1MjE3RVxcdTIxN0ZcXHUyMTgwXFx1MjE4MVxcdTIxODJcXHUyMTg1XFx1MjE4NlxcdTIxODdcXHUyMTg4XFx1MzAwN1xcdTMwMjFcXHUzMDIyXFx1MzAyM1xcdTMwMjRcXHUzMDI1XFx1MzAyNlxcdTMwMjdcXHUzMDI4XFx1MzAyOVxcdTMwMzhcXHUzMDM5XFx1MzAzQV0vLFxuICAgICAgICBwZWckYzkxID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIltcXFxcdTE2RUVcXFxcdTE2RUZcXFxcdTE2RjBcXFxcdTIxNjBcXFxcdTIxNjFcXFxcdTIxNjJcXFxcdTIxNjNcXFxcdTIxNjRcXFxcdTIxNjVcXFxcdTIxNjZcXFxcdTIxNjdcXFxcdTIxNjhcXFxcdTIxNjlcXFxcdTIxNkFcXFxcdTIxNkJcXFxcdTIxNkNcXFxcdTIxNkRcXFxcdTIxNkVcXFxcdTIxNkZcXFxcdTIxNzBcXFxcdTIxNzFcXFxcdTIxNzJcXFxcdTIxNzNcXFxcdTIxNzRcXFxcdTIxNzVcXFxcdTIxNzZcXFxcdTIxNzdcXFxcdTIxNzhcXFxcdTIxNzlcXFxcdTIxN0FcXFxcdTIxN0JcXFxcdTIxN0NcXFxcdTIxN0RcXFxcdTIxN0VcXFxcdTIxN0ZcXFxcdTIxODBcXFxcdTIxODFcXFxcdTIxODJcXFxcdTIxODVcXFxcdTIxODZcXFxcdTIxODdcXFxcdTIxODhcXFxcdTMwMDdcXFxcdTMwMjFcXFxcdTMwMjJcXFxcdTMwMjNcXFxcdTMwMjRcXFxcdTMwMjVcXFxcdTMwMjZcXFxcdTMwMjdcXFxcdTMwMjhcXFxcdTMwMjlcXFxcdTMwMzhcXFxcdTMwMzlcXFxcdTMwM0FdXCIsIGRlc2NyaXB0aW9uOiBcIltcXFxcdTE2RUVcXFxcdTE2RUZcXFxcdTE2RjBcXFxcdTIxNjBcXFxcdTIxNjFcXFxcdTIxNjJcXFxcdTIxNjNcXFxcdTIxNjRcXFxcdTIxNjVcXFxcdTIxNjZcXFxcdTIxNjdcXFxcdTIxNjhcXFxcdTIxNjlcXFxcdTIxNkFcXFxcdTIxNkJcXFxcdTIxNkNcXFxcdTIxNkRcXFxcdTIxNkVcXFxcdTIxNkZcXFxcdTIxNzBcXFxcdTIxNzFcXFxcdTIxNzJcXFxcdTIxNzNcXFxcdTIxNzRcXFxcdTIxNzVcXFxcdTIxNzZcXFxcdTIxNzdcXFxcdTIxNzhcXFxcdTIxNzlcXFxcdTIxN0FcXFxcdTIxN0JcXFxcdTIxN0NcXFxcdTIxN0RcXFxcdTIxN0VcXFxcdTIxN0ZcXFxcdTIxODBcXFxcdTIxODFcXFxcdTIxODJcXFxcdTIxODVcXFxcdTIxODZcXFxcdTIxODdcXFxcdTIxODhcXFxcdTMwMDdcXFxcdTMwMjFcXFxcdTMwMjJcXFxcdTMwMjNcXFxcdTMwMjRcXFxcdTMwMjVcXFxcdTMwMjZcXFxcdTMwMjdcXFxcdTMwMjhcXFxcdTMwMjlcXFxcdTMwMzhcXFxcdTMwMzlcXFxcdTMwM0FdXCIgfSxcbiAgICAgICAgcGVnJGM5MiA9IC9eW19cXHUyMDNGXFx1MjA0MFxcdTIwNTRcXHVGRTMzXFx1RkUzNFxcdUZFNERcXHVGRTRFXFx1RkU0RlxcdUZGM0ZdLyxcbiAgICAgICAgcGVnJGM5MyA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbX1xcXFx1MjAzRlxcXFx1MjA0MFxcXFx1MjA1NFxcXFx1RkUzM1xcXFx1RkUzNFxcXFx1RkU0RFxcXFx1RkU0RVxcXFx1RkU0RlxcXFx1RkYzRl1cIiwgZGVzY3JpcHRpb246IFwiW19cXFxcdTIwM0ZcXFxcdTIwNDBcXFxcdTIwNTRcXFxcdUZFMzNcXFxcdUZFMzRcXFxcdUZFNERcXFxcdUZFNEVcXFxcdUZFNEZcXFxcdUZGM0ZdXCIgfSxcbiAgICAgICAgcGVnJGM5NCA9IC9eWyBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBdLyxcbiAgICAgICAgcGVnJGM5NSA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbIFxcXFx4QTBcXFxcdTE2ODBcXFxcdTE4MEVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMEFcXFxcdTIwMkZcXFxcdTIwNUZcXFxcdTMwMDBdXCIsIGRlc2NyaXB0aW9uOiBcIlsgXFxcXHhBMFxcXFx1MTY4MFxcXFx1MTgwRVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwQVxcXFx1MjAyRlxcXFx1MjA1RlxcXFx1MzAwMF1cIiB9LFxuICAgICAgICBwZWckYzk2ID0gZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gWycjJywgbmFtZV07IH0sXG4gICAgICAgIHBlZyRjOTcgPSBcIihcIixcbiAgICAgICAgcGVnJGM5OCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIihcIiwgZGVzY3JpcHRpb246IFwiXFxcIihcXFwiXCIgfSxcbiAgICAgICAgcGVnJGM5OSA9IFwiKVwiLFxuICAgICAgICBwZWckYzEwMCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIilcIiwgZGVzY3JpcHRpb246IFwiXFxcIilcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMDEgPSBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW25hbWVdLmNvbmNhdChhcmdzLnNoaWZ0KCkpO1xuICAgICAgICAgICAgd2hpbGUgKGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICByZXN1bHQgPSBbcmVzdWx0XS5jb25jYXQoYXJncy5zaGlmdCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMxMDIgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJncyAhPT0gbnVsbCA/IGFyZ3MgOiBbXTtcbiAgICAgICAgICB9LFxuICAgICAgICBwZWckYzEwMyA9IFwiLFwiLFxuICAgICAgICBwZWckYzEwNCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIixcIiwgZGVzY3JpcHRpb246IFwiXFxcIixcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMDUgPSBmdW5jdGlvbihoZWFkLCB0YWlsKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW2hlYWRdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWlsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRhaWxbaV1bM10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9LFxuICAgICAgICBwZWckYzEwNiA9IGZ1bmN0aW9uKG9wZXJhdG9yLCBleHByZXNzaW9uKSB7XG4gICAgICAgICAgICAgIHJldHVybiBbb3BlcmF0b3IsIGV4cHJlc3Npb25dO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMxMDcgPSBcIitcIixcbiAgICAgICAgcGVnJGMxMDggPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIrXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIrXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTA5ID0gXCItXCIsXG4gICAgICAgIHBlZyRjMTEwID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiLVwiLCBkZXNjcmlwdGlvbjogXCJcXFwiLVxcXCJcIiB9LFxuICAgICAgICBwZWckYzExMSA9IFwiIVwiLFxuICAgICAgICBwZWckYzExMiA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIiFcIiwgZGVzY3JpcHRpb246IFwiXFxcIiFcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMTMgPSBmdW5jdGlvbihoZWFkLCB0YWlsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBoZWFkO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhaWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBbdGFpbFtpXVsxXSwgcmVzdWx0LCB0YWlsW2ldWzNdXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgcGVnJGMxMTQgPSBcIipcIixcbiAgICAgICAgcGVnJGMxMTUgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIqXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIqXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTE2ID0gXCIvXCIsXG4gICAgICAgIHBlZyRjMTE3ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiL1wiLCBkZXNjcmlwdGlvbjogXCJcXFwiL1xcXCJcIiB9LFxuICAgICAgICBwZWckYzExOCA9IFwiJVwiLFxuICAgICAgICBwZWckYzExOSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIiVcIiwgZGVzY3JpcHRpb246IFwiXFxcIiVcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMjAgPSBcIj1cIixcbiAgICAgICAgcGVnJGMxMjEgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCI9XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCI9XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTIyID0gZnVuY3Rpb24ob3BlcmF0b3IpIHsgcmV0dXJuIG9wZXJhdG9yOyB9LFxuICAgICAgICBwZWckYzEyMyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCIrXCI7IH0sXG4gICAgICAgIHBlZyRjMTI0ID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIi1cIjsgfSxcbiAgICAgICAgcGVnJGMxMjUgPSBcIjw9XCIsXG4gICAgICAgIHBlZyRjMTI2ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiPD1cIiwgZGVzY3JpcHRpb246IFwiXFxcIjw9XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTI3ID0gXCI+PVwiLFxuICAgICAgICBwZWckYzEyOCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIj49XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCI+PVxcXCJcIiB9LFxuICAgICAgICBwZWckYzEyOSA9IFwiPFwiLFxuICAgICAgICBwZWckYzEzMCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIjxcIiwgZGVzY3JpcHRpb246IFwiXFxcIjxcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMzEgPSBcIj5cIixcbiAgICAgICAgcGVnJGMxMzIgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCI+XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCI+XFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTMzID0gXCI9PVwiLFxuICAgICAgICBwZWckYzEzNCA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIj09XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCI9PVxcXCJcIiB9LFxuICAgICAgICBwZWckYzEzNSA9IFwiIT1cIixcbiAgICAgICAgcGVnJGMxMzYgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIhPVwiLCBkZXNjcmlwdGlvbjogXCJcXFwiIT1cXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxMzcgPSBcIiYmXCIsXG4gICAgICAgIHBlZyRjMTM4ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiJiZcIiwgZGVzY3JpcHRpb246IFwiXFxcIiYmXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTM5ID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIiYmXCI7IH0sXG4gICAgICAgIHBlZyRjMTQwID0gXCJ8fFwiLFxuICAgICAgICBwZWckYzE0MSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcInx8XCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJ8fFxcXCJcIiB9LFxuICAgICAgICBwZWckYzE0MiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJ8fFwiOyB9LFxuICAgICAgICBwZWckYzE0MyA9IFwiaWZcIixcbiAgICAgICAgcGVnJGMxNDQgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJpZlwiLCBkZXNjcmlwdGlvbjogXCJcXFwiaWZcXFwiXCIgfSxcbiAgICAgICAgcGVnJGMxNDUgPSBcInRoZW5cIixcbiAgICAgICAgcGVnJGMxNDYgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCJ0aGVuXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCJ0aGVuXFxcIlwiIH0sXG4gICAgICAgIHBlZyRjMTQ3ID0gXCJlbHNlXCIsXG4gICAgICAgIHBlZyRjMTQ4ID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiZWxzZVwiLCBkZXNjcmlwdGlvbjogXCJcXFwiZWxzZVxcXCJcIiB9LFxuICAgICAgICBwZWckYzE0OSA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgdHJ1ZUV4cHJlc3Npb24sIGZhbHNlRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgICByZXR1cm4gWydpZicsIGNvbmRpdGlvbiwgdHJ1ZUV4cHJlc3Npb24sIGZhbHNlRXhwcmVzc2lvbl07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgIHBlZyRjdXJyUG9zICAgICAgICAgID0gMCxcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zICAgICAgPSAwLFxuICAgICAgICBwZWckY2FjaGVkUG9zICAgICAgICA9IDAsXG4gICAgICAgIHBlZyRjYWNoZWRQb3NEZXRhaWxzID0geyBsaW5lOiAxLCBjb2x1bW46IDEsIHNlZW5DUjogZmFsc2UgfSxcbiAgICAgICAgcGVnJG1heEZhaWxQb3MgICAgICAgPSAwLFxuICAgICAgICBwZWckbWF4RmFpbEV4cGVjdGVkICA9IFtdLFxuICAgICAgICBwZWckc2lsZW50RmFpbHMgICAgICA9IDAsXG5cbiAgICAgICAgcGVnJHJlc3VsdDtcblxuICAgIGlmIChcInN0YXJ0UnVsZVwiIGluIG9wdGlvbnMpIHtcbiAgICAgIGlmICghKG9wdGlvbnMuc3RhcnRSdWxlIGluIHBlZyRzdGFydFJ1bGVGdW5jdGlvbnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHN0YXJ0IHBhcnNpbmcgZnJvbSBydWxlIFxcXCJcIiArIG9wdGlvbnMuc3RhcnRSdWxlICsgXCJcXFwiLlwiKTtcbiAgICAgIH1cblxuICAgICAgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uID0gcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uc1tvcHRpb25zLnN0YXJ0UnVsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGV4dCgpIHtcbiAgICAgIHJldHVybiBpbnB1dC5zdWJzdHJpbmcocGVnJHJlcG9ydGVkUG9zLCBwZWckY3VyclBvcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KCkge1xuICAgICAgcmV0dXJuIHBlZyRyZXBvcnRlZFBvcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lKCkge1xuICAgICAgcmV0dXJuIHBlZyRjb21wdXRlUG9zRGV0YWlscyhwZWckcmVwb3J0ZWRQb3MpLmxpbmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29sdW1uKCkge1xuICAgICAgcmV0dXJuIHBlZyRjb21wdXRlUG9zRGV0YWlscyhwZWckcmVwb3J0ZWRQb3MpLmNvbHVtbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBlY3RlZChkZXNjcmlwdGlvbikge1xuICAgICAgdGhyb3cgcGVnJGJ1aWxkRXhjZXB0aW9uKFxuICAgICAgICBudWxsLFxuICAgICAgICBbeyB0eXBlOiBcIm90aGVyXCIsIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB9XSxcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zXG4gICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UpIHtcbiAgICAgIHRocm93IHBlZyRidWlsZEV4Y2VwdGlvbihtZXNzYWdlLCBudWxsLCBwZWckcmVwb3J0ZWRQb3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRjb21wdXRlUG9zRGV0YWlscyhwb3MpIHtcbiAgICAgIGZ1bmN0aW9uIGFkdmFuY2UoZGV0YWlscywgc3RhcnRQb3MsIGVuZFBvcykge1xuICAgICAgICB2YXIgcCwgY2g7XG5cbiAgICAgICAgZm9yIChwID0gc3RhcnRQb3M7IHAgPCBlbmRQb3M7IHArKykge1xuICAgICAgICAgIGNoID0gaW5wdXQuY2hhckF0KHApO1xuICAgICAgICAgIGlmIChjaCA9PT0gXCJcXG5cIikge1xuICAgICAgICAgICAgaWYgKCFkZXRhaWxzLnNlZW5DUikgeyBkZXRhaWxzLmxpbmUrKzsgfVxuICAgICAgICAgICAgZGV0YWlscy5jb2x1bW4gPSAxO1xuICAgICAgICAgICAgZGV0YWlscy5zZWVuQ1IgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoID09PSBcIlxcclwiIHx8IGNoID09PSBcIlxcdTIwMjhcIiB8fCBjaCA9PT0gXCJcXHUyMDI5XCIpIHtcbiAgICAgICAgICAgIGRldGFpbHMubGluZSsrO1xuICAgICAgICAgICAgZGV0YWlscy5jb2x1bW4gPSAxO1xuICAgICAgICAgICAgZGV0YWlscy5zZWVuQ1IgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXRhaWxzLmNvbHVtbisrO1xuICAgICAgICAgICAgZGV0YWlscy5zZWVuQ1IgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBlZyRjYWNoZWRQb3MgIT09IHBvcykge1xuICAgICAgICBpZiAocGVnJGNhY2hlZFBvcyA+IHBvcykge1xuICAgICAgICAgIHBlZyRjYWNoZWRQb3MgPSAwO1xuICAgICAgICAgIHBlZyRjYWNoZWRQb3NEZXRhaWxzID0geyBsaW5lOiAxLCBjb2x1bW46IDEsIHNlZW5DUjogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgICBhZHZhbmNlKHBlZyRjYWNoZWRQb3NEZXRhaWxzLCBwZWckY2FjaGVkUG9zLCBwb3MpO1xuICAgICAgICBwZWckY2FjaGVkUG9zID0gcG9zO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGVnJGNhY2hlZFBvc0RldGFpbHM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJGZhaWwoZXhwZWN0ZWQpIHtcbiAgICAgIGlmIChwZWckY3VyclBvcyA8IHBlZyRtYXhGYWlsUG9zKSB7IHJldHVybjsgfVxuXG4gICAgICBpZiAocGVnJGN1cnJQb3MgPiBwZWckbWF4RmFpbFBvcykge1xuICAgICAgICBwZWckbWF4RmFpbFBvcyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBwZWckbWF4RmFpbEV4cGVjdGVkID0gW107XG4gICAgICB9XG5cbiAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQucHVzaChleHBlY3RlZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJGJ1aWxkRXhjZXB0aW9uKG1lc3NhZ2UsIGV4cGVjdGVkLCBwb3MpIHtcbiAgICAgIGZ1bmN0aW9uIGNsZWFudXBFeHBlY3RlZChleHBlY3RlZCkge1xuICAgICAgICB2YXIgaSA9IDE7XG5cbiAgICAgICAgZXhwZWN0ZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgaWYgKGEuZGVzY3JpcHRpb24gPCBiLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgfSBlbHNlIGlmIChhLmRlc2NyaXB0aW9uID4gYi5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBleHBlY3RlZC5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoZXhwZWN0ZWRbaSAtIDFdID09PSBleHBlY3RlZFtpXSkge1xuICAgICAgICAgICAgZXhwZWN0ZWQuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkTWVzc2FnZShleHBlY3RlZCwgZm91bmQpIHtcbiAgICAgICAgZnVuY3Rpb24gc3RyaW5nRXNjYXBlKHMpIHtcbiAgICAgICAgICBmdW5jdGlvbiBoZXgoY2gpIHsgcmV0dXJuIGNoLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IH1cblxuICAgICAgICAgIHJldHVybiBzXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxcXC9nLCAgICdcXFxcXFxcXCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXCIvZywgICAgJ1xcXFxcIicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFx4MDgvZywgJ1xcXFxiJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHQvZywgICAnXFxcXHQnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCAgICdcXFxcbicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxmL2csICAgJ1xcXFxmJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHIvZywgICAnXFxcXHInKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHgwMC1cXHgwN1xceDBCXFx4MEVcXHgwRl0vZywgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxceDAnICsgaGV4KGNoKTsgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx4MTAtXFx4MUZcXHg4MC1cXHhGRl0vZywgICAgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxceCcgICsgaGV4KGNoKTsgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx1MDE4MC1cXHUwRkZGXS9nLCAgICAgICAgIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHUwJyArIGhleChjaCk7IH0pXG4gICAgICAgICAgICAucmVwbGFjZSgvW1xcdTEwODAtXFx1RkZGRl0vZywgICAgICAgICBmdW5jdGlvbihjaCkgeyByZXR1cm4gJ1xcXFx1JyAgKyBoZXgoY2gpOyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBleHBlY3RlZERlc2NzID0gbmV3IEFycmF5KGV4cGVjdGVkLmxlbmd0aCksXG4gICAgICAgICAgICBleHBlY3RlZERlc2MsIGZvdW5kRGVzYywgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXhwZWN0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBleHBlY3RlZERlc2NzW2ldID0gZXhwZWN0ZWRbaV0uZGVzY3JpcHRpb247XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3RlZERlc2MgPSBleHBlY3RlZC5sZW5ndGggPiAxXG4gICAgICAgICAgPyBleHBlY3RlZERlc2NzLnNsaWNlKDAsIC0xKS5qb2luKFwiLCBcIilcbiAgICAgICAgICAgICAgKyBcIiBvciBcIlxuICAgICAgICAgICAgICArIGV4cGVjdGVkRGVzY3NbZXhwZWN0ZWQubGVuZ3RoIC0gMV1cbiAgICAgICAgICA6IGV4cGVjdGVkRGVzY3NbMF07XG5cbiAgICAgICAgZm91bmREZXNjID0gZm91bmQgPyBcIlxcXCJcIiArIHN0cmluZ0VzY2FwZShmb3VuZCkgKyBcIlxcXCJcIiA6IFwiZW5kIG9mIGlucHV0XCI7XG5cbiAgICAgICAgcmV0dXJuIFwiRXhwZWN0ZWQgXCIgKyBleHBlY3RlZERlc2MgKyBcIiBidXQgXCIgKyBmb3VuZERlc2MgKyBcIiBmb3VuZC5cIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvc0RldGFpbHMgPSBwZWckY29tcHV0ZVBvc0RldGFpbHMocG9zKSxcbiAgICAgICAgICBmb3VuZCAgICAgID0gcG9zIDwgaW5wdXQubGVuZ3RoID8gaW5wdXQuY2hhckF0KHBvcykgOiBudWxsO1xuXG4gICAgICBpZiAoZXhwZWN0ZWQgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYW51cEV4cGVjdGVkKGV4cGVjdGVkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBTeW50YXhFcnJvcihcbiAgICAgICAgbWVzc2FnZSAhPT0gbnVsbCA/IG1lc3NhZ2UgOiBidWlsZE1lc3NhZ2UoZXhwZWN0ZWQsIGZvdW5kKSxcbiAgICAgICAgZXhwZWN0ZWQsXG4gICAgICAgIGZvdW5kLFxuICAgICAgICBwb3MsXG4gICAgICAgIHBvc0RldGFpbHMubGluZSxcbiAgICAgICAgcG9zRGV0YWlscy5jb2x1bW5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlc3RhcnQoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzEoczIpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVNvdXJjZUNoYXJhY3RlcigpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IHBlZyRjdXJyUG9zKSB7XG4gICAgICAgIHMwID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIpOyB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VXaGl0ZVNwYWNlKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICBpZiAocGVnJGM0LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczAgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNSk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZVpzKCk7XG4gICAgICB9XG4gICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzKTsgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlSWRlbnRpZmllcigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICBzMiA9IHBlZyRwYXJzZVJlc2VydmVkV29yZCgpO1xuICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEgPSBwZWckYzc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZUlkZW50aWZpZXJOYW1lKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGM4KHMyKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNik7IH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUlkZW50aWZpZXJOYW1lKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRwYXJzZUlkZW50aWZpZXJTdGFydCgpO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gW107XG4gICAgICAgIHMzID0gcGVnJHBhcnNlSWRlbnRpZmllclBhcnQoKTtcbiAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VJZGVudGlmaWVyUGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMChzMSwgczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG4gICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM2KTsgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlSWRlbnRpZmllclN0YXJ0KCkge1xuICAgICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICAgIHMwID0gcGVnJHBhcnNlVW5pY29kZUxldHRlcigpO1xuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzYpIHtcbiAgICAgICAgICBzMCA9IHBlZyRjMTE7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEyKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTUpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGMxMztcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5Mikge1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMTU7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNik7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZVVuaWNvZGVFc2NhcGVTZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTcoczIpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VJZGVudGlmaWVyUGFydCgpIHtcbiAgICAgIHZhciBzMCwgczE7XG5cbiAgICAgIHMwID0gcGVnJHBhcnNlSWRlbnRpZmllclN0YXJ0KCk7XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckcGFyc2VVbmljb2RlQ29tYmluaW5nTWFyaygpO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMCA9IHBlZyRwYXJzZU5kKCk7XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZVBjKCk7XG4gICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA4MjA0KSB7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzE4O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOSk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjAoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gODIwNSkge1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzIxO1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIyKTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzIzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVVuaWNvZGVMZXR0ZXIoKSB7XG4gICAgICB2YXIgczA7XG5cbiAgICAgIHMwID0gcGVnJHBhcnNlTHUoKTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZUxsKCk7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJHBhcnNlTHQoKTtcbiAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlTG0oKTtcbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZUxvKCk7XG4gICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlTmwoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlVW5pY29kZUNvbWJpbmluZ01hcmsoKSB7XG4gICAgICB2YXIgczA7XG5cbiAgICAgIHMwID0gcGVnJHBhcnNlTW4oKTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZU1jKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VSZXNlcnZlZFdvcmQoKSB7XG4gICAgICB2YXIgczA7XG5cbiAgICAgIHMwID0gcGVnJHBhcnNlTnVsbExpdGVyYWwoKTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZUJvb2xlYW5MaXRlcmFsKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VMaXRlcmFsKCkge1xuICAgICAgdmFyIHMwO1xuXG4gICAgICBzMCA9IHBlZyRwYXJzZU51bGxMaXRlcmFsKCk7XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckcGFyc2VCb29sZWFuTGl0ZXJhbCgpO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMCA9IHBlZyRwYXJzZU51bWVyaWNMaXRlcmFsKCk7XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZVN0cmluZ0xpdGVyYWwoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZU51bGxMaXRlcmFsKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNCkgPT09IHBlZyRjMjQpIHtcbiAgICAgICAgczEgPSBwZWckYzI0O1xuICAgICAgICBwZWckY3VyclBvcyArPSA0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjUpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlSWRlbnRpZmllclBhcnQoKTtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gcGVnJGM3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgczIgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzI2KCk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUJvb2xlYW5MaXRlcmFsKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNSkgPT09IHBlZyRjMjcpIHtcbiAgICAgICAgczEgPSBwZWckYzI3O1xuICAgICAgICBwZWckY3VyclBvcyArPSA1O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjgpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlSWRlbnRpZmllclBhcnQoKTtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gcGVnJGM3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgczIgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzI5KCk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA0KSA9PT0gcGVnJGMzMCkge1xuICAgICAgICAgIHMxID0gcGVnJGMzMDtcbiAgICAgICAgICBwZWckY3VyclBvcyArPSA0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzEpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZUlkZW50aWZpZXJQYXJ0KCk7XG4gICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRjNztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzMyKCk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZU51bWVyaWNMaXRlcmFsKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRwYXJzZUhleEludGVnZXJMaXRlcmFsKCk7XG4gICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEgPSBwZWckcGFyc2VEZWNpbWFsTGl0ZXJhbCgpO1xuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMyA9IHBlZyRwYXJzZUlkZW50aWZpZXJTdGFydCgpO1xuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckYzc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMzQoczEpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG4gICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMyk7IH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZURlY2ltYWxMaXRlcmFsKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMyA9IHBlZyRwYXJzZURlY2ltYWxJbnRlZ2VyTGl0ZXJhbCgpO1xuICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDYpIHtcbiAgICAgICAgICBzNCA9IHBlZyRjMzU7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM2KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlRGVjaW1hbERpZ2l0cygpO1xuICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckYzM3O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlRXhwb25lbnRQYXJ0KCk7XG4gICAgICAgICAgICBpZiAoczYgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckYzM3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gW3MzLCBzNCwgczUsIHM2XTtcbiAgICAgICAgICAgICAgczIgPSBzMztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgczIgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgczIgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gaW5wdXQuc3Vic3RyaW5nKHMxLCBwZWckY3VyclBvcyk7XG4gICAgICB9XG4gICAgICBzMSA9IHMyO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMzgoczEpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ2KSB7XG4gICAgICAgICAgczMgPSBwZWckYzM1O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNik7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZURlY2ltYWxEaWdpdHMoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlRXhwb25lbnRQYXJ0KCk7XG4gICAgICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckYzM3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gW3MzLCBzNCwgczVdO1xuICAgICAgICAgICAgICBzMiA9IHMzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IGlucHV0LnN1YnN0cmluZyhzMSwgcGVnJGN1cnJQb3MpO1xuICAgICAgICB9XG4gICAgICAgIHMxID0gczI7XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMzOShzMSk7XG4gICAgICAgIH1cbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VEZWNpbWFsSW50ZWdlckxpdGVyYWwoKTtcbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlRXhwb25lbnRQYXJ0KCk7XG4gICAgICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckYzM3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gW3MzLCBzNF07XG4gICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gaW5wdXQuc3Vic3RyaW5nKHMxLCBwZWckY3VyclBvcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMxID0gczI7XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMzOShzMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZURlY2ltYWxJbnRlZ2VyTGl0ZXJhbCgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ4KSB7XG4gICAgICAgIHMwID0gcGVnJGM0MDtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQxKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJHBhcnNlTm9uWmVyb0RpZ2l0KCk7XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gcGVnJHBhcnNlRGVjaW1hbERpZ2l0cygpO1xuICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckYzM3O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gW3MxLCBzMl07XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZURlY2ltYWxEaWdpdHMoKSB7XG4gICAgICB2YXIgczAsIHMxO1xuXG4gICAgICBzMCA9IFtdO1xuICAgICAgczEgPSBwZWckcGFyc2VEZWNpbWFsRGlnaXQoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICB3aGlsZSAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMC5wdXNoKHMxKTtcbiAgICAgICAgICBzMSA9IHBlZyRwYXJzZURlY2ltYWxEaWdpdCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZURlY2ltYWxEaWdpdCgpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgaWYgKHBlZyRjNDIudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0Myk7IH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZU5vblplcm9EaWdpdCgpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgaWYgKHBlZyRjNDQudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0NSk7IH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUV4cG9uZW50UGFydCgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyO1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VFeHBvbmVudEluZGljYXRvcigpO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlU2lnbmVkSW50ZWdlcigpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VFeHBvbmVudEluZGljYXRvcigpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgaWYgKHBlZyRjNDYudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0Nyk7IH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVNpZ25lZEludGVnZXIoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMjtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChwZWckYzQ4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDkpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEgPSBwZWckYzM3O1xuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlRGVjaW1hbERpZ2l0cygpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VIZXhJbnRlZ2VyTGl0ZXJhbCgpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0OCkge1xuICAgICAgICBzMSA9IHBlZyRjNDA7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MSk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAocGVnJGM1MC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM1MSk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHM0ID0gW107XG4gICAgICAgICAgczUgPSBwZWckcGFyc2VIZXhEaWdpdCgpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgd2hpbGUgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM0LnB1c2goczUpO1xuICAgICAgICAgICAgICBzNSA9IHBlZyRwYXJzZUhleERpZ2l0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gaW5wdXQuc3Vic3RyaW5nKHMzLCBwZWckY3VyclBvcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM1MihzMyk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlSGV4RGlnaXQoKSB7XG4gICAgICB2YXIgczA7XG5cbiAgICAgIGlmIChwZWckYzUzLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczAgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTQpOyB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VTdHJpbmdMaXRlcmFsKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcblxuICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzQpIHtcbiAgICAgICAgczIgPSBwZWckYzU2O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTcpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VEb3VibGVTdHJpbmdDaGFyYWN0ZXJzKCk7XG4gICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJGMzNztcbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM0KSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRjNTY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTcpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBbczIsIHMzLCBzNF07XG4gICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgfVxuICAgICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzkpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjNTg7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzU5KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlU2luZ2xlU3RyaW5nQ2hhcmFjdGVycygpO1xuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBwZWckYzM3O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzkpIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckYzU4O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTkpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBbczIsIHMzLCBzNF07XG4gICAgICAgICAgICAgIHMxID0gczI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM2MChzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTUpOyB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VEb3VibGVTdHJpbmdDaGFyYWN0ZXJzKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IFtdO1xuICAgICAgczIgPSBwZWckcGFyc2VEb3VibGVTdHJpbmdDaGFyYWN0ZXIoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZURvdWJsZVN0cmluZ0NoYXJhY3RlcigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzYxKHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VTaW5nbGVTdHJpbmdDaGFyYWN0ZXJzKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IFtdO1xuICAgICAgczIgPSBwZWckcGFyc2VTaW5nbGVTdHJpbmdDaGFyYWN0ZXIoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZVNpbmdsZVN0cmluZ0NoYXJhY3RlcigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzYxKHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VEb3VibGVTdHJpbmdDaGFyYWN0ZXIoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMjtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzQpIHtcbiAgICAgICAgczIgPSBwZWckYzU2O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTcpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5Mikge1xuICAgICAgICAgIHMyID0gcGVnJGMxNTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTYpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMxID0gcGVnJGM3O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgczEgPSBwZWckYzA7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VTb3VyY2VDaGFyYWN0ZXIoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzYyKHMyKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTIpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjMTU7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE2KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gcGVnJHBhcnNlRXNjYXBlU2VxdWVuY2UoKTtcbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzYzKHMyKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlU2luZ2xlU3RyaW5nQ2hhcmFjdGVyKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM5KSB7XG4gICAgICAgIHMyID0gcGVnJGM1ODtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzU5KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTIpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjMTU7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE2KTsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMSA9IHBlZyRjNztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgIHMxID0gcGVnJGMwO1xuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlU291cmNlQ2hhcmFjdGVyKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGM2MihzMik7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDkyKSB7XG4gICAgICAgICAgczEgPSBwZWckYzE1O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNik7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZUVzY2FwZVNlcXVlbmNlKCk7XG4gICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM2MyhzMik7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUVzY2FwZVNlcXVlbmNlKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgICBzMCA9IHBlZyRwYXJzZUNoYXJhY3RlckVzY2FwZVNlcXVlbmNlKCk7XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0OCkge1xuICAgICAgICAgIHMxID0gcGVnJGM0MDtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDEpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZURlY2ltYWxEaWdpdCgpO1xuICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckYzc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM2NCgpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJHBhcnNlSGV4RXNjYXBlU2VxdWVuY2UoKTtcbiAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlVW5pY29kZUVzY2FwZVNlcXVlbmNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VDaGFyYWN0ZXJFc2NhcGVTZXF1ZW5jZSgpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgczAgPSBwZWckcGFyc2VTaW5nbGVFc2NhcGVDaGFyYWN0ZXIoKTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZU5vbkVzY2FwZUNoYXJhY3RlcigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlU2luZ2xlRXNjYXBlQ2hhcmFjdGVyKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChwZWckYzY1LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjYpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM2NyhzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlTm9uRXNjYXBlQ2hhcmFjdGVyKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICBzMiA9IHBlZyRwYXJzZUVzY2FwZUNoYXJhY3RlcigpO1xuICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEgPSBwZWckYzc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZVNvdXJjZUNoYXJhY3RlcigpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjNjgoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VFc2NhcGVDaGFyYWN0ZXIoKSB7XG4gICAgICB2YXIgczA7XG5cbiAgICAgIHMwID0gcGVnJHBhcnNlU2luZ2xlRXNjYXBlQ2hhcmFjdGVyKCk7XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckcGFyc2VEZWNpbWFsRGlnaXQoKTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjApIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGM2OTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM3MCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDExNykge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjNzE7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM3Mik7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUhleEVzY2FwZVNlcXVlbmNlKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyMCkge1xuICAgICAgICBzMSA9IHBlZyRjNjk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM3MCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZUhleERpZ2l0KCk7XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlSGV4RGlnaXQoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBpbnB1dC5zdWJzdHJpbmcoczIsIHBlZyRjdXJyUG9zKTtcbiAgICAgICAgfVxuICAgICAgICBzMiA9IHMzO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjNzMoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VVbmljb2RlRXNjYXBlU2VxdWVuY2UoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMTcpIHtcbiAgICAgICAgczEgPSBwZWckYzcxO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNzIpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2VIZXhEaWdpdCgpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZUhleERpZ2l0KCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZUhleERpZ2l0KCk7XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VIZXhEaWdpdCgpO1xuICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNCA9IFtzNCwgczUsIHM2LCBzN107XG4gICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gaW5wdXQuc3Vic3RyaW5nKHMyLCBwZWckY3VyclBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgczIgPSBzMztcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzczKHMyKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlTGwoKSB7XG4gICAgICB2YXIgczA7XG5cbiAgICAgIGlmIChwZWckYzc0LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczAgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNzUpOyB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VMbSgpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgaWYgKHBlZyRjNzYudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM3Nyk7IH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUxvKCkge1xuICAgICAgdmFyIHMwO1xuXG4gICAgICBpZiAocGVnJGM3OC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMwID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzc5KTsgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlTHQoKSB7XG4gICAgICB2YXIgczA7XG5cbiAgICAgIGlmIChwZWckYzgwLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczAgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjODEpOyB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VMdSgpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgaWYgKHBlZyRjODIudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM4Myk7IH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZU1jKCkge1xuICAgICAgdmFyIHMwO1xuXG4gICAgICBpZiAocGVnJGM4NC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMwID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzg1KTsgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlTW4oKSB7XG4gICAgICB2YXIgczA7XG5cbiAgICAgIGlmIChwZWckYzg2LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczAgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjODcpOyB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VOZCgpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgaWYgKHBlZyRjODgudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM4OSk7IH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZU5sKCkge1xuICAgICAgdmFyIHMwO1xuXG4gICAgICBpZiAocGVnJGM5MC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMwID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzkxKTsgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlUGMoKSB7XG4gICAgICB2YXIgczA7XG5cbiAgICAgIGlmIChwZWckYzkyLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczAgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjOTMpOyB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VacygpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgaWYgKHBlZyRjOTQudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5NSk7IH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZV9fKCkge1xuICAgICAgdmFyIHMwLCBzMTtcblxuICAgICAgczAgPSBbXTtcbiAgICAgIHMxID0gcGVnJHBhcnNlV2hpdGVTcGFjZSgpO1xuICAgICAgd2hpbGUgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwLnB1c2goczEpO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZVdoaXRlU3BhY2UoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVByaW1hcnlFeHByZXNzaW9uKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRwYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzk2KHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckcGFyc2VMaXRlcmFsKCk7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgICAgICAgczEgPSBwZWckYzk3O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzk4KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRjOTk7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMDApOyB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxKHMzKTtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VDYWxsRXhwcmVzc2lvbigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRwYXJzZUlkZW50aWZpZXIoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gW107XG4gICAgICAgICAgczQgPSBwZWckcGFyc2VBcmd1bWVudHMoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMy5wdXNoKHM0KTtcbiAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2VBcmd1bWVudHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMTAxKHMxLCBzMyk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlQXJndW1lbnRzKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQwKSB7XG4gICAgICAgIHMxID0gcGVnJGM5NztcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzk4KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VBcmd1bWVudExpc3QoKTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGMzNztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJGM5OTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTAwKTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxMDIoczMpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VBcmd1bWVudExpc3QoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBbXTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRjMTAzO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEwNCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM0ID0gW3M0LCBzNSwgczYsIHM3XTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJGMxMDM7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMDQpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM0ID0gW3M0LCBzNSwgczYsIHM3XTtcbiAgICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzEwNShzMSwgczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VVbmFyeUV4cHJlc3Npb24oKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICAgIHMwID0gcGVnJHBhcnNlQ2FsbEV4cHJlc3Npb24oKTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZVByaW1hcnlFeHByZXNzaW9uKCk7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2VVbmFyeU9wZXJhdG9yKCk7XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VVbmFyeUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzEwNihzMSwgczMpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVVuYXJ5T3BlcmF0b3IoKSB7XG4gICAgICB2YXIgczA7XG5cbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDMpIHtcbiAgICAgICAgczAgPSBwZWckYzEwNztcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEwOCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ1KSB7XG4gICAgICAgICAgczAgPSBwZWckYzEwOTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTEwKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzMpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGMxMTE7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTEyKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlTXVsdGlwbGljYXRpdmVFeHByZXNzaW9uKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlVW5hcnlFeHByZXNzaW9uKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBbXTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZU11bHRpcGxpY2F0aXZlT3BlcmF0b3IoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZVVuYXJ5RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNCA9IFtzNCwgczUsIHM2LCBzN107XG4gICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2VNdWx0aXBsaWNhdGl2ZU9wZXJhdG9yKCk7XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZVVuYXJ5RXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczQgPSBbczQsIHM1LCBzNiwgczddO1xuICAgICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTEzKHMxLCBzMik7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZU11bHRpcGxpY2F0aXZlT3BlcmF0b3IoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQyKSB7XG4gICAgICAgIHMxID0gcGVnJGMxMTQ7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMTUpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0Nykge1xuICAgICAgICAgIHMxID0gcGVnJGMxMTY7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzExNyk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM3KSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMTE4O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzExOSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MSkge1xuICAgICAgICAgIHMzID0gcGVnJGMxMjA7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEyMSk7IH1cbiAgICAgICAgfVxuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckYzc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTIyKHMxKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlQWRkaXRpdmVFeHByZXNzaW9uKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlTXVsdGlwbGljYXRpdmVFeHByZXNzaW9uKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBbXTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZUFkZGl0aXZlT3BlcmF0b3IoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZU11bHRpcGxpY2F0aXZlRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNCA9IFtzNCwgczUsIHM2LCBzN107XG4gICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2VBZGRpdGl2ZU9wZXJhdG9yKCk7XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZU11bHRpcGxpY2F0aXZlRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczQgPSBbczQsIHM1LCBzNiwgczddO1xuICAgICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTEzKHMxLCBzMik7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUFkZGl0aXZlT3BlcmF0b3IoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQzKSB7XG4gICAgICAgIHMxID0gcGVnJGMxMDc7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMDgpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDMpIHtcbiAgICAgICAgICBzMyA9IHBlZyRjMTA3O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMDgpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MSkge1xuICAgICAgICAgICAgczMgPSBwZWckYzEyMDtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMjEpOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMjMoKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDUpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjMTA5O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMTApOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ1KSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMTA5O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzExMCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDYxKSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMxMjA7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMjEpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckYzc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxMjQoKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlUmVsYXRpb25hbEV4cHJlc3Npb24oKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VBZGRpdGl2ZUV4cHJlc3Npb24oKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IFtdO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlUmVsYXRpb25hbE9wZXJhdG9yKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VBZGRpdGl2ZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczQgPSBbczQsIHM1LCBzNiwgczddO1xuICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlUmVsYXRpb25hbE9wZXJhdG9yKCk7XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZUFkZGl0aXZlRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczQgPSBbczQsIHM1LCBzNiwgczddO1xuICAgICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTEzKHMxLCBzMik7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZVJlbGF0aW9uYWxPcGVyYXRvcigpIHtcbiAgICAgIHZhciBzMDtcblxuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMTI1KSB7XG4gICAgICAgIHMwID0gcGVnJGMxMjU7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMjYpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMTI3KSB7XG4gICAgICAgICAgczAgPSBwZWckYzEyNztcbiAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTI4KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjApIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGMxMjk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTMwKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjIpIHtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzEzMTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEzMik7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUVxdWFsaXR5RXhwcmVzc2lvbigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczc7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRwYXJzZVJlbGF0aW9uYWxFeHByZXNzaW9uKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBbXTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZUVxdWFsaXR5T3BlcmF0b3IoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZVJlbGF0aW9uYWxFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM0ID0gW3M0LCBzNSwgczYsIHM3XTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRwYXJzZUVxdWFsaXR5T3BlcmF0b3IoKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlUmVsYXRpb25hbEV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM0ID0gW3M0LCBzNSwgczYsIHM3XTtcbiAgICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzExMyhzMSwgczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VFcXVhbGl0eU9wZXJhdG9yKCkge1xuICAgICAgdmFyIHMwO1xuXG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMxMzMpIHtcbiAgICAgICAgczAgPSBwZWckYzEzMztcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEzNCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMxMzUpIHtcbiAgICAgICAgICBzMCA9IHBlZyRjMTM1O1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMzYpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUxvZ2ljYWxBTkRFeHByZXNzaW9uKCkge1xuICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlRXF1YWxpdHlFeHByZXNzaW9uKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBbXTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZUxvZ2ljYWxBTkRPcGVyYXRvcigpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlRXF1YWxpdHlFeHByZXNzaW9uKCk7XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM0ID0gW3M0LCBzNSwgczYsIHM3XTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRwYXJzZUxvZ2ljYWxBTkRPcGVyYXRvcigpO1xuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VFcXVhbGl0eUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM0ID0gW3M0LCBzNSwgczYsIHM3XTtcbiAgICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzExMyhzMSwgczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VMb2dpY2FsQU5ET3BlcmF0b3IoKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMxMzcpIHtcbiAgICAgICAgczEgPSBwZWckYzEzNztcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEzOCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MSkge1xuICAgICAgICAgIHMzID0gcGVnJGMxMjA7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEyMSk7IH1cbiAgICAgICAgfVxuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckYzc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTM5KCk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBlZyRwYXJzZUxvZ2ljYWxPUkV4cHJlc3Npb24oKSB7XG4gICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuXG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VMb2dpY2FsQU5ERXhwcmVzc2lvbigpO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gW107XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2VMb2dpY2FsT1JPcGVyYXRvcigpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlTG9naWNhbEFOREV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczQgPSBbczQsIHM1LCBzNiwgczddO1xuICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlTG9naWNhbE9ST3BlcmF0b3IoKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlTG9naWNhbEFOREV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM0ID0gW3M0LCBzNSwgczYsIHM3XTtcbiAgICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzExMyhzMSwgczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZWckcGFyc2VMb2dpY2FsT1JPcGVyYXRvcigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzE0MCkge1xuICAgICAgICBzMSA9IHBlZyRjMTQwO1xuICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTQxKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDYxKSB7XG4gICAgICAgICAgczMgPSBwZWckYzEyMDtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTIxKTsgfVxuICAgICAgICB9XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxNDIoKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gczA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVnJHBhcnNlRXhwcmVzc2lvbigpIHtcbiAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczcsIHM4LCBzOSwgczEwLCBzMTE7XG5cbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMxNDMpIHtcbiAgICAgICAgczEgPSBwZWckYzE0MztcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE0NCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlTG9naWNhbE9SRXhwcmVzc2lvbigpO1xuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2VfXygpO1xuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzE0NSkge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJGMxNDU7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE0Nik7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZV9fKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzE0Nykge1xuICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckYzE0NztcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNDgpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChzOSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJHBhcnNlX18oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTAgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczExICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzE0OShzMywgczcsIHMxMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZUxvZ2ljYWxPUkV4cHJlc3Npb24oKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHMwO1xuICAgIH1cblxuICAgIHBlZyRyZXN1bHQgPSBwZWckc3RhcnRSdWxlRnVuY3Rpb24oKTtcblxuICAgIGlmIChwZWckcmVzdWx0ICE9PSBwZWckRkFJTEVEICYmIHBlZyRjdXJyUG9zID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBwZWckcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGVnJHJlc3VsdCAhPT0gcGVnJEZBSUxFRCAmJiBwZWckY3VyclBvcyA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICBwZWckZmFpbCh7IHR5cGU6IFwiZW5kXCIsIGRlc2NyaXB0aW9uOiBcImVuZCBvZiBpbnB1dFwiIH0pO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBwZWckYnVpbGRFeGNlcHRpb24obnVsbCwgcGVnJG1heEZhaWxFeHBlY3RlZCwgcGVnJG1heEZhaWxQb3MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgU3ludGF4RXJyb3I6IFN5bnRheEVycm9yLFxuICAgIHBhcnNlOiAgICAgICBwYXJzZVxuICB9O1xufV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBFeHByZXNzaW9uIHN5bnRheCB0cmVlIHNlcnZpY2UuXG4gKi9cbnJlcXVpcmUoJ2V4cHJlc3Npb25zL0V4cHJlc3Npb25QYXJzZXJTZXJ2aWNlLmpzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdFeHByZXNzaW9uU3ludGF4VHJlZVNlcnZpY2UnLCBbXG4gICAgJ0V4cHJlc3Npb25QYXJzZXJTZXJ2aWNlJywgJ1BBUkFNRVRFUl9UWVBFUycsXG4gICAgZnVuY3Rpb24gKEV4cHJlc3Npb25QYXJzZXJTZXJ2aWNlLCBQQVJBTUVURVJfVFlQRVMpIHtcbiAgICAgICAgLy8gRXhjZXB0aW9ucyB0aGF0IGNhbiBiZSB0aHJvd24gZnJvbSB0aGUgZXZhbHVhdGlvbiBvZiBleHByZXNzaW9ucy5cbiAgICAgICAgdmFyIEV4cHJlc3Npb25FcnJvciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgRXhwcmVzc2lvbkVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuICAgICAgICBFeHByZXNzaW9uRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRXhwcmVzc2lvbkVycm9yO1xuICAgICAgICB2YXIgRXhwclVuZGVmaW5lZFZhckVycm9yID0gZnVuY3Rpb24gKHZhcm5hbWUsIGVudnMpIHtcbiAgICAgICAgICAgIHRoaXMudmFybmFtZSA9IHZhcm5hbWU7XG4gICAgICAgICAgICB0aGlzLmVudnMgPSBlbnZzO1xuICAgICAgICB9O1xuICAgICAgICBFeHByVW5kZWZpbmVkVmFyRXJyb3IucHJvdG90eXBlID0gbmV3IEV4cHJlc3Npb25FcnJvcigpO1xuICAgICAgICBFeHByVW5kZWZpbmVkVmFyRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRXhwclVuZGVmaW5lZFZhckVycm9yO1xuICAgICAgICBFeHByVW5kZWZpbmVkVmFyRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnRXhwclVuZGVmaW5lZFZhckVycm9yJztcbiAgICAgICAgRXhwclVuZGVmaW5lZFZhckVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyAnOiAnICsgdGhpcy52YXJuYW1lICsgJyBub3QgZm91bmQgaW4gJyArIHRoaXMuZW52cztcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIEV4cHJXcm9uZ051bUFyZ3NFcnJvciA9IGZ1bmN0aW9uIChhcmdzLCBleHBlY3RlZE1pbiwgZXhwZWN0ZWRNYXgpIHtcbiAgICAgICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICAgICAgICB0aGlzLmV4cGVjdGVkTWluID0gZXhwZWN0ZWRNaW47XG4gICAgICAgICAgICB0aGlzLmV4cGVjdGVkTWF4ID0gZXhwZWN0ZWRNYXg7XG4gICAgICAgIH07XG4gICAgICAgIEV4cHJXcm9uZ051bUFyZ3NFcnJvci5wcm90b3R5cGUgPSBuZXcgRXhwcmVzc2lvbkVycm9yKCk7XG4gICAgICAgIEV4cHJXcm9uZ051bUFyZ3NFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFeHByV3JvbmdOdW1BcmdzRXJyb3I7XG4gICAgICAgIEV4cHJXcm9uZ051bUFyZ3NFcnJvci5wcm90b3R5cGUubmFtZSA9ICdFeHByV3JvbmdOdW1BcmdzRXJyb3InO1xuICAgICAgICBFeHByV3JvbmdOdW1BcmdzRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZSArICc6IHsnICsgdGhpcy5hcmdzICsgJ30gbm90IGluIHJhbmdlIFsnICtcbiAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdGVkTWluICsgJywnICsgdGhpcy5leHBlY3RlZE1heCArICddJztcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIEV4cHJXcm9uZ0FyZ1R5cGVFcnJvciA9IGZ1bmN0aW9uIChhcmcsIGFjdHVhbFR5cGUsIGV4cGVjdGVkVHlwZSkge1xuICAgICAgICAgICAgdGhpcy5hcmcgPSBhcmc7XG4gICAgICAgICAgICB0aGlzLmFjdHVhbFR5cGUgPSBhY3R1YWxUeXBlO1xuICAgICAgICAgICAgdGhpcy5leHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGU7XG4gICAgICAgIH07XG4gICAgICAgIEV4cHJXcm9uZ0FyZ1R5cGVFcnJvci5wcm90b3R5cGUgPSBuZXcgRXhwcmVzc2lvbkVycm9yKCk7XG4gICAgICAgIEV4cHJXcm9uZ0FyZ1R5cGVFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFeHByV3JvbmdBcmdUeXBlRXJyb3I7XG4gICAgICAgIEV4cHJXcm9uZ0FyZ1R5cGVFcnJvci5wcm90b3R5cGUubmFtZSA9ICdFeHByV3JvbmdBcmdUeXBlRXJyb3InO1xuICAgICAgICBFeHByV3JvbmdBcmdUeXBlRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJnID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZSArICc6IFR5cGUgJyArIHRoaXMuYWN0dWFsVHlwZSArXG4gICAgICAgICAgICAgICAgICAgICcgZG9lcyBub3QgbWF0Y2ggZXhwZWN0ZWQgdHlwZSAnICsgdGhpcy5leHBlY3RlZFR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgJzogJyArIHRoaXMuYXJnICsgJyBoYXMgdHlwZSAnICsgdGhpcy5hY3R1YWxUeXBlICtcbiAgICAgICAgICAgICAgICAnIHdoaWNoIGRvZXMgbm90IG1hdGNoIGV4cGVjdGVkIHR5cGUgJyArIHRoaXMuZXhwZWN0ZWRUeXBlO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZ2V0UGFyYW1zVXNlZEluRXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChleHByZXNzaW9uKSB7XG4gICAgICAgICAgICB2YXIgX2ZpbmRQYXJhbXMgPSBmdW5jdGlvbiAocGFyc2VUcmVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtc0ZvdW5kID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlVHJlZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZVRyZWVbMF0gPT09ICcjJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zRm91bmQucHVzaChwYXJzZVRyZWVbMV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwYXJzZVRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNGb3VuZCA9IHBhcmFtc0ZvdW5kLmNvbmNhdChfZmluZFBhcmFtcyhwYXJzZVRyZWVbaV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdW5pcXVlUGFyYW1zID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXNGb3VuZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodW5pcXVlUGFyYW1zLmluZGV4T2YocGFyYW1zRm91bmRbaV0pID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5pcXVlUGFyYW1zLnB1c2gocGFyYW1zRm91bmRbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmlxdWVQYXJhbXMuc29ydCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBFeHByZXNzaW9uUGFyc2VyU2VydmljZS5wYXJzZShleHByZXNzaW9uKTtcbiAgICAgICAgICAgIHJldHVybiBfZmluZFBhcmFtcyhwYXJzZWQpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBDaGVja3MgaWYgdGhlIGFyZ3MgYXJyYXkgaGFzIHRoZSBleHBlY3RlZE51bSBudW1iZXIgb2YgZWxlbWVudHMgYW5kXG4gICAgICAgIC8vIHRocm93cyBhbiBlcnJvciBpZiBub3QuIElmIG9wdGlvbmFsIGV4cGVjdGVkTWF4IGlzIHNwZWNpZmllZCwgaXRcbiAgICAgICAgLy8gdmVyaWZpZXMgdGhlIG51bWJlciBvZiBhcmdzIGlzIGluIFtleHBlY3RlZE51bSwgZXhwZWN0ZWRNYXhdIHJhbmdlXG4gICAgICAgIC8vIGluY2x1c2l2ZS5cbiAgICAgICAgdmFyIHZlcmlmeU51bUFyZ3MgPSBmdW5jdGlvbiAoYXJncywgZXhwZWN0ZWROdW0sIGV4cGVjdGVkTWF4KSB7XG4gICAgICAgICAgICBpZiAoZXhwZWN0ZWRNYXggPT09IHZvaWQgMCkgeyBleHBlY3RlZE1heCA9IGV4cGVjdGVkTnVtOyB9XG4gICAgICAgICAgICBpZiAoZXhwZWN0ZWRNYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGV4cGVjdGVkTWF4ID0gZXhwZWN0ZWROdW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPj0gZXhwZWN0ZWROdW0gJiYgYXJncy5sZW5ndGggPD0gZXhwZWN0ZWRNYXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhwcldyb25nTnVtQXJnc0Vycm9yKGFyZ3MsIGV4cGVjdGVkTnVtLCBleHBlY3RlZE1heCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfdmVyaWZ5QXJnVHlwZXNNYXRjaEV4cGVjdGVkVHlwZSA9IGZ1bmN0aW9uIChhcmdUeXBlcywgZXhwZWN0ZWRUeXBlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ1R5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ1R5cGVzW2ldICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4cHJXcm9uZ0FyZ1R5cGVFcnJvcihudWxsLCBhcmdUeXBlc1tpXSwgZXhwZWN0ZWRUeXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF92ZXJpZnlBcmdUeXBlc01hdGNoID0gZnVuY3Rpb24gKGFyZ1R5cGUxLCBhcmdUeXBlMikge1xuICAgICAgICAgICAgaWYgKGFyZ1R5cGUxICE9PSBhcmdUeXBlMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeHByV3JvbmdBcmdUeXBlRXJyb3IobnVsbCwgYXJnVHlwZTEsIGFyZ1R5cGUyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgYXBwbHlGdW5jdGlvblRvUGFyc2VUcmVlID0gZnVuY3Rpb24gKHBhcnNlZCwgZW52cywgZnVuYykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmMocGFyc2VkLCBlbnZzLmNvbmNhdChzeXN0ZW0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvb2tzIHVwIGEgdmFyaWFibGUgb2YgdGhlIGdpdmVuIG5hbWUgaW4gdGhlIGVudi4gSGVyZSB0aGUgdmFyaWFibGVcbiAgICAgICAgICogY2FuIGJlIHN5c3RlbSBvciB1c2VyIGRlZmluZWQgZnVuY3Rpb25zIGFuZCBwYXJhbWV0ZXJzLCBhcyB3ZWxsIGFzXG4gICAgICAgICAqIHN5c3RlbSBvcGVyYXRvcnMuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIHRvIGxvb2sgdXAuXG4gICAgICAgICAqIEBwYXJhbSB7IUFycmF5Ljwhb2JqZWN0Pn0gZW52cyBSZXByZXNlbnRzIGEgbmVzdGVkIG5hbWUgc3BhY2VcbiAgICAgICAgICogICAgIGVudmlyb25tZW50IHRvIGxvb2sgdXAgdGhlIG5hbWUgaW4uIFRoZSBmaXJzdCBlbGVtZW50IGlzIGxvb2tlZCB1cFxuICAgICAgICAgKiAgICAgZmlyc3QgKGkuZS4gaGFzIGhpZ2hlciBwcmVjZWRlbmNlKS5cbiAgICAgICAgICogQHRocm93cyB7RXhwclVuZGVmaW5lZFZhckVycm9yfSBUaGUgbmFtZWQgdmFyaWFibGUgd2FzIG5vdCBmb3VuZCBpblxuICAgICAgICAgKiAgICAgdGhlIGdpdmVuIGVudmlyb25tZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGxvb2t1cEVudnMgPSBmdW5jdGlvbiAobmFtZSwgZW52cykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBlbnZzXzEgPSBlbnZzOyBfaSA8IGVudnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZW52ID0gZW52c18xW19pXTtcbiAgICAgICAgICAgICAgICBpZiAoZW52Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbnZbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4cHJVbmRlZmluZWRWYXJFcnJvcihuYW1lLCBlbnZzKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ29lcmNlcyB0aGUgYXJndW1lbnQgdG8gYSBOdW1iZXIsIGFuZCB0aHJvd3MgYW4gZXJyb3IgaWYgdGhlIHJlc3VsdFxuICAgICAgICAvLyBpcyBOYU4uXG4gICAgICAgIHZhciBfY29lcmNlVG9OdW1iZXIgPSBmdW5jdGlvbiAob3JpZ2luYWxWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGNvZXJjZWRWYWx1ZSA9ICgrb3JpZ2luYWxWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKGNvZXJjZWRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29lcmNlZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4cHJXcm9uZ0FyZ1R5cGVFcnJvcihvcmlnaW5hbFZhbHVlLCB0eXBlb2Ygb3JpZ2luYWxWYWx1ZSwgJ051bWJlcicpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBDb2VyY2VzIGFsbCB2YWx1ZXMgaW4gdGhlIGdpdmVuIGFyZ3VtZW50IGFycmF5IHRvIE51bWJlciwgYW5kIHRocm93c1xuICAgICAgICAvLyBhbiBlcnJvciBpZiB0aGUgcmVzdWx0IGlzIE5hTi5cbiAgICAgICAgdmFyIF9jb2VyY2VBbGxBcmdzVG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tpXSA9IF9jb2VyY2VUb051bWJlcihhcmdzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcmdzO1xuICAgICAgICB9O1xuICAgICAgICAvLyBOT1RFIFRPIERFVkVMT1BFUlM6IFdoZW4gYWRkaW5nIGEgbmV3IHJlc2VydmVkIHdvcmQgdG8gdGhpcyBvYmplY3QsXG4gICAgICAgIC8vICAgcGxlYXNlIGZpcnN0IGVuc3VyZSB0aGF0IGV4aXN0aW5nIGV4cGxvcmF0aW9ucyBkbyBub3QgdXNlIHRoaXNcbiAgICAgICAgLy8gICBwYXJhbWV0ZXIgbmFtZS4gQWxzbywgdG8gcHJldmVudCBmdXR1cmUgZXhwbG9yYXRpb25zIHVzaW5nIGl0LFxuICAgICAgICAvLyAgIG1vZGlmeSBjb25zdGFudHMuSU5WQUxJRF9QQVJBTUVURVJfTkFNRVMgYWNjb3JkaW5nbHkuXG4gICAgICAgIC8vIFRPRE8oa2FzaGlkYSk6IERvY3VtZW50IGFsbCBvcGVyYXRvcnMgaW5wdXQgYW5kIG91dHB1dCBjb250cmFjdHMuXG4gICAgICAgIC8vIEFyZ3VtZW50czpcbiAgICAgICAgLy8gYXJnczogZm9yIGV2YWwoKTogbGlzdCBvZiB2YWx1ZXMgb2YgdGhlIGV2YWx1YXRlZCBzdWItZXhwcmVzc2lvblxuICAgICAgICAvLyAgICAgICBmb3IgZ2V0VHlwZSgpOiBsaXN0IG9mIHR5cGVzIG9mIHRoZSBldmFsdWF0ZWQgc3ViLWV4cHJlc3Npb25cbiAgICAgICAgdmFyIHN5c3RlbSA9IHtcbiAgICAgICAgICAgICcrJzoge1xuICAgICAgICAgICAgICAgIGV2YWw6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMSwgMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBudW1lcmljQXJncyA9IF9jb2VyY2VBbGxBcmdzVG9OdW1iZXIoYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1lcmljQXJncy5sZW5ndGggPT09IDEgPyBudW1lcmljQXJnc1swXSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1lcmljQXJnc1swXSArIG51bWVyaWNBcmdzWzFdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VHlwZTogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAxLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgX3ZlcmlmeUFyZ1R5cGVzTWF0Y2hFeHBlY3RlZFR5cGUoYXJncywgUEFSQU1FVEVSX1RZUEVTLlJFQUwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUEFSQU1FVEVSX1RZUEVTLlJFQUw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICctJzoge1xuICAgICAgICAgICAgICAgIGV2YWw6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMSwgMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBudW1lcmljQXJncyA9IF9jb2VyY2VBbGxBcmdzVG9OdW1iZXIoYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1lcmljQXJncy5sZW5ndGggPT09IDEgPyAtbnVtZXJpY0FyZ3NbMF0gOlxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJpY0FyZ3NbMF0gLSBudW1lcmljQXJnc1sxXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMSwgMik7XG4gICAgICAgICAgICAgICAgICAgIF92ZXJpZnlBcmdUeXBlc01hdGNoRXhwZWN0ZWRUeXBlKGFyZ3MsIFBBUkFNRVRFUl9UWVBFUy5SRUFMKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBBUkFNRVRFUl9UWVBFUy5SRUFMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnKic6IHtcbiAgICAgICAgICAgICAgICBldmFsOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZnlOdW1BcmdzKGFyZ3MsIDIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtZXJpY0FyZ3MgPSBfY29lcmNlQWxsQXJnc1RvTnVtYmVyKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtZXJpY0FyZ3NbMF0gKiBudW1lcmljQXJnc1sxXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMik7XG4gICAgICAgICAgICAgICAgICAgIF92ZXJpZnlBcmdUeXBlc01hdGNoRXhwZWN0ZWRUeXBlKGFyZ3MsIFBBUkFNRVRFUl9UWVBFUy5SRUFMKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBBUkFNRVRFUl9UWVBFUy5SRUFMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnLyc6IHtcbiAgICAgICAgICAgICAgICBldmFsOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZnlOdW1BcmdzKGFyZ3MsIDIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtZXJpY0FyZ3MgPSBfY29lcmNlQWxsQXJnc1RvTnVtYmVyKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtZXJpY0FyZ3NbMF0gLyBudW1lcmljQXJnc1sxXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMik7XG4gICAgICAgICAgICAgICAgICAgIF92ZXJpZnlBcmdUeXBlc01hdGNoRXhwZWN0ZWRUeXBlKGFyZ3MsIFBBUkFNRVRFUl9UWVBFUy5SRUFMKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBBUkFNRVRFUl9UWVBFUy5SRUFMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnJSc6IHtcbiAgICAgICAgICAgICAgICBldmFsOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZnlOdW1BcmdzKGFyZ3MsIDIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtZXJpY0FyZ3MgPSBfY29lcmNlQWxsQXJnc1RvTnVtYmVyKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtZXJpY0FyZ3NbMF0gJSBudW1lcmljQXJnc1sxXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMik7XG4gICAgICAgICAgICAgICAgICAgIF92ZXJpZnlBcmdUeXBlc01hdGNoRXhwZWN0ZWRUeXBlKGFyZ3MsIFBBUkFNRVRFUl9UWVBFUy5SRUFMKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBBUkFNRVRFUl9UWVBFUy5SRUFMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnPD0nOiB7XG4gICAgICAgICAgICAgICAgZXZhbDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaWNBcmdzID0gX2NvZXJjZUFsbEFyZ3NUb051bWJlcihhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWVyaWNBcmdzWzBdIDw9IG51bWVyaWNBcmdzWzFdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VHlwZTogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgX3ZlcmlmeUFyZ1R5cGVzTWF0Y2hFeHBlY3RlZFR5cGUoYXJncywgUEFSQU1FVEVSX1RZUEVTLlJFQUwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUEFSQU1FVEVSX1RZUEVTLlVOSUNPREVfU1RSSU5HO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnPj0nOiB7XG4gICAgICAgICAgICAgICAgZXZhbDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaWNBcmdzID0gX2NvZXJjZUFsbEFyZ3NUb051bWJlcihhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWVyaWNBcmdzWzBdID49IG51bWVyaWNBcmdzWzFdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VHlwZTogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgX3ZlcmlmeUFyZ1R5cGVzTWF0Y2hFeHBlY3RlZFR5cGUoYXJncywgUEFSQU1FVEVSX1RZUEVTLlJFQUwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUEFSQU1FVEVSX1RZUEVTLlVOSUNPREVfU1RSSU5HO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnPCc6IHtcbiAgICAgICAgICAgICAgICBldmFsOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZnlOdW1BcmdzKGFyZ3MsIDIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtZXJpY0FyZ3MgPSBfY29lcmNlQWxsQXJnc1RvTnVtYmVyKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtZXJpY0FyZ3NbMF0gPCBudW1lcmljQXJnc1sxXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMik7XG4gICAgICAgICAgICAgICAgICAgIF92ZXJpZnlBcmdUeXBlc01hdGNoRXhwZWN0ZWRUeXBlKGFyZ3MsIFBBUkFNRVRFUl9UWVBFUy5SRUFMKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBBUkFNRVRFUl9UWVBFUy5VTklDT0RFX1NUUklORztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJz4nOiB7XG4gICAgICAgICAgICAgICAgZXZhbDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaWNBcmdzID0gX2NvZXJjZUFsbEFyZ3NUb051bWJlcihhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWVyaWNBcmdzWzBdID4gbnVtZXJpY0FyZ3NbMV07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRUeXBlOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZnlOdW1BcmdzKGFyZ3MsIDIpO1xuICAgICAgICAgICAgICAgICAgICBfdmVyaWZ5QXJnVHlwZXNNYXRjaEV4cGVjdGVkVHlwZShhcmdzLCBQQVJBTUVURVJfVFlQRVMuUkVBTCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQQVJBTUVURVJfVFlQRVMuVU5JQ09ERV9TVFJJTkc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICchJzoge1xuICAgICAgICAgICAgICAgIGV2YWw6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhYXJnc1swXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMSk7XG4gICAgICAgICAgICAgICAgICAgIF92ZXJpZnlBcmdUeXBlc01hdGNoRXhwZWN0ZWRUeXBlKGFyZ3MsIFBBUkFNRVRFUl9UWVBFUy5VTklDT0RFX1NUUklORyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQQVJBTUVURVJfVFlQRVMuVU5JQ09ERV9TVFJJTkc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICc9PSc6IHtcbiAgICAgICAgICAgICAgICBldmFsOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZnlOdW1BcmdzKGFyZ3MsIDIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1swXSA9PT0gYXJnc1sxXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQQVJBTUVURVJfVFlQRVMuVU5JQ09ERV9TVFJJTkc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICchPSc6IHtcbiAgICAgICAgICAgICAgICBldmFsOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZnlOdW1BcmdzKGFyZ3MsIDIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1swXSAhPT0gYXJnc1sxXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQQVJBTUVURVJfVFlQRVMuVU5JQ09ERV9TVFJJTkc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICcmJic6IHtcbiAgICAgICAgICAgICAgICBldmFsOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKGthc2hpZGEpOiBNYWtlIHRoaXMgc2hvcnQtY2lyY3VpdC5cbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4oYXJnc1swXSAmJiBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMik7XG4gICAgICAgICAgICAgICAgICAgIF92ZXJpZnlBcmdUeXBlc01hdGNoRXhwZWN0ZWRUeXBlKGFyZ3MsIFBBUkFNRVRFUl9UWVBFUy5VTklDT0RFX1NUUklORyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQQVJBTUVURVJfVFlQRVMuVU5JQ09ERV9TVFJJTkc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICd8fCc6IHtcbiAgICAgICAgICAgICAgICBldmFsOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKGthc2hpZGEpOiBNYWtlIHRoaXMgc2hvcnQtY2lyY3VpdC5cbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4oYXJnc1swXSB8fCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMik7XG4gICAgICAgICAgICAgICAgICAgIF92ZXJpZnlBcmdUeXBlc01hdGNoRXhwZWN0ZWRUeXBlKGFyZ3MsIFBBUkFNRVRFUl9UWVBFUy5VTklDT0RFX1NUUklORyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQQVJBTUVURVJfVFlQRVMuVU5JQ09ERV9TVFJJTkc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCByZW1vdmluZyBxdW90YXRpb24gbWFya3MgZnJvbSB0aGlzIGtleSBjYXVzZXMgaXNzdWVzIHdpdGhcbiAgICAgICAgICAgIC8vIG1pbmlmaWNhdGlvbiAod2hlbiBydW5uaW5nIHRoZSBkZXBsb3ltZW50IHNjcmlwdHMpLlxuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgcXVvdGUtcHJvcHMgKi9cbiAgICAgICAgICAgICdpZic6IHtcbiAgICAgICAgICAgICAgICBldmFsOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKGthc2hpZGEpOiBNYWtlIHRoaXMgc2hvcnQtY2lyY3VpdC5cbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3NbMF0gPyBhcmdzWzFdIDogYXJnc1syXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMyk7XG4gICAgICAgICAgICAgICAgICAgIF92ZXJpZnlBcmdUeXBlc01hdGNoRXhwZWN0ZWRUeXBlKFthcmdzWzBdXSwgUEFSQU1FVEVSX1RZUEVTLlVOSUNPREVfU1RSSU5HKTtcbiAgICAgICAgICAgICAgICAgICAgX3ZlcmlmeUFyZ1R5cGVzTWF0Y2goYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdzWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnZmxvb3InOiB7XG4gICAgICAgICAgICAgICAgZXZhbDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaWNBcmdzID0gX2NvZXJjZUFsbEFyZ3NUb051bWJlcihhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtZXJpY0FyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VHlwZTogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgX3ZlcmlmeUFyZ1R5cGVzTWF0Y2hFeHBlY3RlZFR5cGUoYXJncywgUEFSQU1FVEVSX1RZUEVTLlJFQUwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUEFSQU1FVEVSX1RZUEVTLlJFQUw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdwb3cnOiB7XG4gICAgICAgICAgICAgICAgZXZhbDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaWNBcmdzID0gX2NvZXJjZUFsbEFyZ3NUb051bWJlcihhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VHlwZTogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgX3ZlcmlmeUFyZ1R5cGVzTWF0Y2hFeHBlY3RlZFR5cGUoYXJncywgUEFSQU1FVEVSX1RZUEVTLlJFQUwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUEFSQU1FVEVSX1RZUEVTLlJFQUw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdsb2cnOiB7XG4gICAgICAgICAgICAgICAgZXZhbDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaWNBcmdzID0gX2NvZXJjZUFsbEFyZ3NUb051bWJlcihhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZWNpc2VBbnMgPSBNYXRoLmxvZyhudW1lcmljQXJnc1swXSkgLyBNYXRoLmxvZyhudW1lcmljQXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHJvdW5kIGFuc3dlcnMgdG8gOSBkZWNpbWFsIHBsYWNlcywgc28gdGhhdCB3ZSBkb24ndCBydW4gaW50b1xuICAgICAgICAgICAgICAgICAgICAvLyBpc3N1ZXMgbGlrZSBsb2coOSwgMykgPSAyLjAwMDAwMDAwMDAwMDQuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHByZWNpc2VBbnMgKiBNYXRoLnBvdygxMCwgOSkpIC8gTWF0aC5wb3coMTAsIDkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VHlwZTogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgX3ZlcmlmeUFyZ1R5cGVzTWF0Y2hFeHBlY3RlZFR5cGUoYXJncywgUEFSQU1FVEVSX1RZUEVTLlJFQUwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUEFSQU1FVEVSX1RZUEVTLlJFQUw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdhYnMnOiB7XG4gICAgICAgICAgICAgICAgZXZhbDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5TnVtQXJncyhhcmdzLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaWNBcmdzID0gX2NvZXJjZUFsbEFyZ3NUb051bWJlcihhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKG51bWVyaWNBcmdzWzBdKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeU51bUFyZ3MoYXJncywgMSk7XG4gICAgICAgICAgICAgICAgICAgIF92ZXJpZnlBcmdUeXBlc01hdGNoRXhwZWN0ZWRUeXBlKGFyZ3MsIFBBUkFNRVRFUl9UWVBFUy5SRUFMKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBBUkFNRVRFUl9UWVBFUy5SRUFMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgcXVvdGUtcHJvcHMgKi9cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEV4cHJlc3Npb25FcnJvcjogRXhwcmVzc2lvbkVycm9yLFxuICAgICAgICAgICAgRXhwclVuZGVmaW5lZFZhckVycm9yOiBFeHByVW5kZWZpbmVkVmFyRXJyb3IsXG4gICAgICAgICAgICBFeHByV3JvbmdOdW1BcmdzRXJyb3I6IEV4cHJXcm9uZ051bUFyZ3NFcnJvcixcbiAgICAgICAgICAgIEV4cHJXcm9uZ0FyZ1R5cGVFcnJvcjogRXhwcldyb25nQXJnVHlwZUVycm9yLFxuICAgICAgICAgICAgYXBwbHlGdW5jdGlvblRvUGFyc2VUcmVlOiBhcHBseUZ1bmN0aW9uVG9QYXJzZVRyZWUsXG4gICAgICAgICAgICBnZXRQYXJhbXNVc2VkSW5FeHByZXNzaW9uOiBnZXRQYXJhbXNVc2VkSW5FeHByZXNzaW9uLFxuICAgICAgICAgICAgbG9va3VwRW52czogbG9va3VwRW52c1xuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBDb252ZXJ0cyBIVE1MIHRvIHVuaWNvZGUuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZpbHRlcignY29udmVydEh0bWxUb1VuaWNvZGUnLCBbZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmVsZW1lbnQoJzxkaXY+JyArIGh0bWwgKyAnPC9kaXY+JykudGV4dCgpO1xuICAgICAgICB9O1xuICAgIH1dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRm9ybWF0UnRlUHJldmlldyBmaWx0ZXIgZm9yIE9wcGlhLlxuICovXG4vKiBUaGUgZm9sbG93aW5nIGZpbHRlciByZXBsYWNlcyBlYWNoIFJURSBlbGVtZW50IG9jY3VycmVuY2UgaW4gdGhlIGlucHV0IGh0bWxcbiAgIGJ5IGl0cyBjb3JyZXNwb25kaW5nIG5hbWUgaW4gc3F1YXJlIGJyYWNrZXRzIGFuZCByZXR1cm5zIGEgc3RyaW5nXG4gICB3aGljaCBjb250YWlucyB0aGUgbmFtZSBpbiB0aGUgc2FtZSBsb2NhdGlvbiBhcyBpbiB0aGUgaW5wdXQgaHRtbC5cbiAgIGVnOiA8cD5TYW1wbGUxIDxvcHBpYS1ub25pbnRlcmFjdGl2ZS1tYXRoPjwvb3BwaWEtbm9uaW50ZXJhY3RpdmUtbWF0aD5cbiAgICAgICAgU2FtcGxlMiA8L3A+XG4gICB3aWxsIGdpdmUgYXMgb3V0cHV0OiBTYW1wbGUxIFtNYXRoXSBTYW1wbGUyICovXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5maWx0ZXIoJ2Zvcm1hdFJ0ZVByZXZpZXcnLCBbXG4gICAgJyRmaWx0ZXInLCBmdW5jdGlvbiAoJGZpbHRlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLyZuYnNwOy9pZywgJyAnKTtcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLyZxdW90Oy9pZywgJycpO1xuICAgICAgICAgICAgLy8gUmVwbGFjZSBhbGwgaHRtbCB0YWdzIG90aGVyIHRoYW4gPG9wcGlhLW5vbmludGVyYWN0aXZlLSoqPiBvbmVzIHRvICcnLlxuICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPCg/IW9wcGlhLW5vbmludGVyYWN0aXZlXFxzKj8pW14+XSs+L2csICcnKTtcbiAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRPdXRwdXQgPSBodG1sLnJlcGxhY2UoLyg8KFtePl0rKT4pL2csIGZ1bmN0aW9uIChydGVUYWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVwbGFjZVN0cmluZyA9ICRmaWx0ZXIoJ2NhcGl0YWxpemUnKShydGVUYWcuc3BsaXQoJy0nKVsyXS5zcGxpdCgnICcpWzBdKTtcbiAgICAgICAgICAgICAgICBpZiAocmVwbGFjZVN0cmluZ1tyZXBsYWNlU3RyaW5nLmxlbmd0aCAtIDFdID09PSAnPicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZVN0cmluZyA9IHJlcGxhY2VTdHJpbmcuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJyBbJyArIHJlcGxhY2VTdHJpbmcgKyAnXSAnO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkT3V0cHV0LnRyaW0oKTtcbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ2FtZWxDYXNlVG9IeXBoZW5zIGZpbHRlciBmb3IgT3BwaWEuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZpbHRlcignY2FtZWxDYXNlVG9IeXBoZW5zJywgW2Z1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGlucHV0LnJlcGxhY2UoLyhbYS16XSk/KFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdFswXSA9PT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBDb252ZXJ0VG9QbGFpblRleHQgZmlsdGVyIGZvciBPcHBpYS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmlsdGVyKCdjb252ZXJ0VG9QbGFpblRleHQnLCBbZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICB2YXIgc3RyaXBwZWRUZXh0ID0gaW5wdXQucmVwbGFjZSgvKDwoW14+XSspPikvaWcsICcnKTtcbiAgICAgICAgICAgIHN0cmlwcGVkVGV4dCA9IHN0cmlwcGVkVGV4dC5yZXBsYWNlKC8mbmJzcDsvaWcsICcgJyk7XG4gICAgICAgICAgICBzdHJpcHBlZFRleHQgPSBzdHJpcHBlZFRleHQucmVwbGFjZSgvJnF1b3Q7L2lnLCAnJyk7XG4gICAgICAgICAgICB2YXIgdHJpbW1lZFRleHQgPSBzdHJpcHBlZFRleHQudHJpbSgpO1xuICAgICAgICAgICAgaWYgKHRyaW1tZWRUZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpcHBlZFRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJpbW1lZFRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBHZXRBYmJyZXZpYXRlZFRleHQgZmlsdGVyIGZvciBPcHBpYS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmlsdGVyKCdnZXRBYmJyZXZpYXRlZFRleHQnLCBbZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRleHQsIGNoYXJhY3RlckNvdW50KSB7XG4gICAgICAgICAgICBpZiAodGV4dC5sZW5ndGggPiBjaGFyYWN0ZXJDb3VudCkge1xuICAgICAgICAgICAgICAgIHZhciBzdWJqZWN0ID0gdGV4dC5zdWJzdHIoMCwgY2hhcmFjdGVyQ291bnQpO1xuICAgICAgICAgICAgICAgIGlmIChzdWJqZWN0LmluZGV4T2YoJyAnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdCA9IHN1YmplY3Quc3BsaXQoJyAnKS5zbGljZSgwLCAtMSkuam9pbignICcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViamVjdC5jb25jYXQoJy4uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBOb3JtYWxpemVXaGl0ZXNwYWNlIGZpbHRlciBmb3IgT3BwaWEuXG4gKi9cbnJlcXVpcmUoJ3NlcnZpY2VzL1V0aWxzU2VydmljZS50cycpO1xuLy8gRmlsdGVyIHRoYXQgcmVtb3ZlcyB3aGl0ZXNwYWNlIGZyb20gdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nLCBhbmRcbi8vIHJlcGxhY2VzIGludGVyaW9yIHdoaXRlc3BhY2Ugd2l0aCBhIHNpbmdsZSBzcGFjZSBjaGFyYWN0ZXIuXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5maWx0ZXIoJ25vcm1hbGl6ZVdoaXRlc3BhY2UnLCBbXG4gICAgJ1V0aWxzU2VydmljZScsIGZ1bmN0aW9uIChVdGlsc1NlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgaWYgKFV0aWxzU2VydmljZS5pc1N0cmluZyhpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgd2hpdGVzcGFjZSBmcm9tIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0aGUgc3RyaW5nLCBhbmRcbiAgICAgICAgICAgICAgICAvLyByZXBsYWNlIGludGVyaW9yIHdoaXRlc3BhY2Ugd2l0aCBhIHNpbmdsZSBzcGFjZSBjaGFyYWN0ZXIuXG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC50cmltKCk7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9cXHN7Mix9L2csICcgJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBUcnVuY2F0ZUFuZENhcGl0YWxpemUgZmlsdGVyIGZvciBPcHBpYS5cbiAqL1xuLy8gTm90ZSB0aGF0IHRoaXMgZmlsdGVyIGRvZXMgbm90IHRydW5jYXRlIGF0IHRoZSBtaWRkbGUgb2YgYSB3b3JkLlxuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmlsdGVyKCd0cnVuY2F0ZUFuZENhcGl0YWxpemUnLCBbZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0LCBtYXhOdW1iZXJPZkNoYXJhY3RlcnMpIHtcbiAgICAgICAgICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgd29yZHMgPSBpbnB1dC50cmltKCkubWF0Y2goL1xcUysvZyk7XG4gICAgICAgICAgICAvLyBDYXBpdGFsaXplIHRoZSBmaXJzdCB3b3JkIGFuZCBhZGQgaXQgdG8gdGhlIHJlc3VsdC5cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB3b3Jkc1swXS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmRzWzBdLnNsaWNlKDEpO1xuICAgICAgICAgICAgLy8gQWRkIHRoZSByZW1haW5pbmcgd29yZHMgdG8gdGhlIHJlc3VsdCB1bnRpbCB0aGUgY2hhcmFjdGVyIGxpbWl0IGlzXG4gICAgICAgICAgICAvLyByZWFjaGVkLlxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB3b3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghbWF4TnVtYmVyT2ZDaGFyYWN0ZXJzIHx8XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5sZW5ndGggKyAxICsgd29yZHNbaV0ubGVuZ3RoIDw9IG1heE51bWJlck9mQ2hhcmFjdGVycykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyAnO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd29yZHNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJy4uLic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBUcnVuY2F0ZUF0Rmlyc3RMaW5lIGZpbHRlciBmb3IgT3BwaWEuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZpbHRlcigndHJ1bmNhdGVBdEZpcnN0TGluZScsIFtmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGF0dGVybiA9IC8oXFxyXFxufFtcXG5cXHZcXGZcXHJcXHg4NVxcdTIwMjhcXHUyMDI5XSkvZztcbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSBsaW5lIGVuZGluZ3MgdGhlbiBzcGxpdCB1c2luZyB0aGUgbm9ybWFsaXplZCBkZWxpbWl0ZXIuXG4gICAgICAgICAgICB2YXIgbGluZXMgPSBpbnB1dC5yZXBsYWNlKHBhdHRlcm4sICdcXG4nKS5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICB2YXIgZmlyc3ROb25lbXB0eUxpbmVJbmRleCA9IC0xO1xuICAgICAgICAgICAgdmFyIG90aGVyTm9uZW1wdHlMaW5lc0V4aXN0ID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVzW2ldLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0Tm9uZW1wdHlMaW5lSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5vbmVtcHR5TGluZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyTm9uZW1wdHlMaW5lc0V4aXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN1ZmZpeCA9IG90aGVyTm9uZW1wdHlMaW5lc0V4aXN0ID8gJy4uLicgOiAnJztcbiAgICAgICAgICAgIHJldHVybiAoZmlyc3ROb25lbXB0eUxpbmVJbmRleCAhPT0gLTEgP1xuICAgICAgICAgICAgICAgIGxpbmVzW2ZpcnN0Tm9uZW1wdHlMaW5lSW5kZXhdICsgc3VmZml4IDogJycpO1xuICAgICAgICB9O1xuICAgIH1dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVHJ1bmNhdGUgZmlsdGVyIGZvciBPcHBpYS5cbiAqL1xucmVxdWlyZSgnZmlsdGVycy9zdHJpbmctdXRpbGl0eS1maWx0ZXJzL2NvbnZlcnQtdG8tcGxhaW4tdGV4dC5maWx0ZXIudHMnKTtcbi8vIEZpbHRlciB0aGF0IHRydW5jYXRlcyBsb25nIGRlc2NyaXB0b3JzLlxuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmlsdGVyKCd0cnVuY2F0ZScsIFsnJGZpbHRlcicsIGZ1bmN0aW9uICgkZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQsIGxlbmd0aCwgc3VmZml4KSB7XG4gICAgICAgICAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTmFOKGxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBsZW5ndGggPSA3MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWZmaXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHN1ZmZpeCA9ICcuLi4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzU3RyaW5nKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gU3RyaW5nKGlucHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlucHV0ID0gJGZpbHRlcignY29udmVydFRvUGxhaW5UZXh0JykoaW5wdXQpO1xuICAgICAgICAgICAgcmV0dXJuIChpbnB1dC5sZW5ndGggPD0gbGVuZ3RoID8gaW5wdXQgOiAoaW5wdXQuc3Vic3RyaW5nKDAsIGxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpICsgc3VmZml4KSk7XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTdW1tYXJpemVOb25uZWdhdGl2ZU51bWJlciBmaWx0ZXIgZm9yIE9wcGlhLlxuICovXG4vLyBGaWx0ZXIgdGhhdCBzdW1tYXJpemVzIGEgbGFyZ2UgbnVtYmVyIHRvIGEgZGVjaW1hbCBmb2xsb3dlZCBieVxuLy8gdGhlIGFwcHJvcHJpYXRlIG1ldHJpYyBwcmVmaXggKEssIE0gb3IgQikuIEZvciBleGFtcGxlLCAxNjc2NTZcbi8vIGJlY29tZXMgMTY3LjdLLlxuLy8gVXNlcnMgb2YgdGhpcyBmaWx0ZXIgc2hvdWxkIGVuc3VyZSB0aGF0IHRoZSBpbnB1dCBpcyBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5maWx0ZXIoJ3N1bW1hcml6ZU5vbm5lZ2F0aXZlTnVtYmVyJywgW2Z1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgaW5wdXQgPSBOdW1iZXIoaW5wdXQpO1xuICAgICAgICAgICAgLy8gTmluZSB6ZXJvcyBmb3IgYmlsbGlvbnMgKGUuZy4gMTQ2MDA4Nzg4Nzg4IC0tPiAxNDYuMEIpLlxuICAgICAgICAgICAgLy8gU2l4IHplcm9zIGZvciBtaWxsaW9ucyAoZS5nLiAxNDYwMDg3ODggLS0+IDE0Ni4wTSkuXG4gICAgICAgICAgICAvLyBUaHJlZSB6ZXJvcyBmb3IgdGhvdXNhbmRzIChlLmcuIDE0NjAwOCAtLT4gMTQ2LjBLKS5cbiAgICAgICAgICAgIC8vIE5vIGNoYW5nZSBmb3Igc21hbGwgbnVtYmVycyAoZS5nLiAxMiAtLT4gMTIpLlxuICAgICAgICAgICAgcmV0dXJuIChpbnB1dCA+PSAxLjBlKzkgPyAoaW5wdXQgLyAxLjBlKzkpLnRvRml4ZWQoMSkgKyAnQicgOlxuICAgICAgICAgICAgICAgIGlucHV0ID49IDEuMGUrNiA/IChpbnB1dCAvIDEuMGUrNikudG9GaXhlZCgxKSArICdNJyA6XG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID49IDEuMGUrMyA/IChpbnB1dCAvIDEuMGUrMykudG9GaXhlZCgxKSArICdLJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCk7XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIHRoZSBmb290ZXIuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnb3BwaWFGb290ZXInLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9vcHBpYV9mb290ZXJfZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3Iga2VlcGluZyB0cmFjayBvZiBzb2x1dGlvbiB2YWxpZGl0eS5cbiAqL1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIFNvbHV0aW9uVmFsaWRpdHlTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNvbHV0aW9uVmFsaWRpdHlTZXJ2aWNlKCkge1xuICAgICAgICB0aGlzLnNvbHV0aW9uVmFsaWRpdGllcyA9IHt9O1xuICAgIH1cbiAgICBTb2x1dGlvblZhbGlkaXR5U2VydmljZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChzdGF0ZU5hbWVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHN0YXRlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICBfdGhpcy5zb2x1dGlvblZhbGlkaXRpZXNbc3RhdGVOYW1lXSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU29sdXRpb25WYWxpZGl0eVNlcnZpY2UucHJvdG90eXBlLmRlbGV0ZVNvbHV0aW9uVmFsaWRpdHkgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnNvbHV0aW9uVmFsaWRpdGllc1tzdGF0ZU5hbWVdO1xuICAgIH07XG4gICAgU29sdXRpb25WYWxpZGl0eVNlcnZpY2UucHJvdG90eXBlLm9uUmVuYW1lU3RhdGUgPSBmdW5jdGlvbiAobmV3U3RhdGVOYW1lLCBvbGRTdGF0ZU5hbWUpIHtcbiAgICAgICAgdGhpcy5zb2x1dGlvblZhbGlkaXRpZXNbbmV3U3RhdGVOYW1lXSA9XG4gICAgICAgICAgICB0aGlzLnNvbHV0aW9uVmFsaWRpdGllc1tvbGRTdGF0ZU5hbWVdO1xuICAgICAgICB0aGlzLmRlbGV0ZVNvbHV0aW9uVmFsaWRpdHkob2xkU3RhdGVOYW1lKTtcbiAgICB9O1xuICAgIFNvbHV0aW9uVmFsaWRpdHlTZXJ2aWNlLnByb3RvdHlwZS51cGRhdGVWYWxpZGl0eSA9IGZ1bmN0aW9uIChzdGF0ZU5hbWUsIHNvbHV0aW9uSXNWYWxpZCkge1xuICAgICAgICB0aGlzLnNvbHV0aW9uVmFsaWRpdGllc1tzdGF0ZU5hbWVdID0gc29sdXRpb25Jc1ZhbGlkO1xuICAgIH07XG4gICAgU29sdXRpb25WYWxpZGl0eVNlcnZpY2UucHJvdG90eXBlLmlzU29sdXRpb25WYWxpZCA9IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc29sdXRpb25WYWxpZGl0aWVzLmhhc093blByb3BlcnR5KHN0YXRlTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNvbHV0aW9uVmFsaWRpdGllc1tzdGF0ZU5hbWVdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTb2x1dGlvblZhbGlkaXR5U2VydmljZS5wcm90b3R5cGUuZ2V0QWxsVmFsaWRpdGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25WYWxpZGl0aWVzO1xuICAgIH07XG4gICAgU29sdXRpb25WYWxpZGl0eVNlcnZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgU29sdXRpb25WYWxpZGl0eVNlcnZpY2UpO1xuICAgIHJldHVybiBTb2x1dGlvblZhbGlkaXR5U2VydmljZTtcbn0oKSk7XG5leHBvcnRzLlNvbHV0aW9uVmFsaWRpdHlTZXJ2aWNlID0gU29sdXRpb25WYWxpZGl0eVNlcnZpY2U7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdTb2x1dGlvblZhbGlkaXR5U2VydmljZScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoU29sdXRpb25WYWxpZGl0eVNlcnZpY2UpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBzZXJ2aWNlIHRoYXQgbWFwcyBJRHMgdG8gQW5ndWxhciBuYW1lcy5cbiAqL1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIEFuZ3VsYXJOYW1lU2VydmljZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbmd1bGFyTmFtZVNlcnZpY2UoKSB7XG4gICAgfVxuICAgIEFuZ3VsYXJOYW1lU2VydmljZV8xID0gQW5ndWxhck5hbWVTZXJ2aWNlO1xuICAgIEFuZ3VsYXJOYW1lU2VydmljZS5wcm90b3R5cGUuZ2V0TmFtZU9mSW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UgPSBmdW5jdGlvbiAoaW50ZXJhY3Rpb25JZCkge1xuICAgICAgICBBbmd1bGFyTmFtZVNlcnZpY2VfMS5hbmd1bGFyTmFtZSA9IGludGVyYWN0aW9uSWQuY2hhckF0KDApICtcbiAgICAgICAgICAgIGludGVyYWN0aW9uSWQuc2xpY2UoMSkgKyAnUnVsZXNTZXJ2aWNlJztcbiAgICAgICAgcmV0dXJuIEFuZ3VsYXJOYW1lU2VydmljZV8xLmFuZ3VsYXJOYW1lO1xuICAgIH07XG4gICAgdmFyIEFuZ3VsYXJOYW1lU2VydmljZV8xO1xuICAgIEFuZ3VsYXJOYW1lU2VydmljZS5hbmd1bGFyTmFtZSA9IG51bGw7XG4gICAgQW5ndWxhck5hbWVTZXJ2aWNlID0gQW5ndWxhck5hbWVTZXJ2aWNlXzEgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgQW5ndWxhck5hbWVTZXJ2aWNlKTtcbiAgICByZXR1cm4gQW5ndWxhck5hbWVTZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuQW5ndWxhck5hbWVTZXJ2aWNlID0gQW5ndWxhck5hbWVTZXJ2aWNlO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnQW5ndWxhck5hbWVTZXJ2aWNlJywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShBbmd1bGFyTmFtZVNlcnZpY2UpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3IgZGlzcGxheWluZyBkaWZmZXJlbnQgdHlwZXMgb2YgbW9kYWxzIGRlcGVuZGluZ1xuICogb24gdGhlIHR5cGUgb2YgcmVzcG9uc2UgcmVjZWl2ZWQgYXMgYSByZXN1bHQgb2YgdGhlIGF1dG9zYXZpbmcgcmVxdWVzdC5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2Uvc2VydmljZXMvJyArXG4gICAgJ2NoYW5nZXMtaW4taHVtYW4tcmVhZGFibGUtZm9ybS5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9zZXJ2aWNlcy9leHBsb3JhdGlvbi1kYXRhLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0xvY2FsU3RvcmFnZVNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0F1dG9zYXZlSW5mb01vZGFsc1NlcnZpY2UnLCBbXG4gICAgJyRsb2cnLCAnJHRpbWVvdXQnLCAnJHVpYk1vZGFsJywgJyR3aW5kb3cnLFxuICAgICdDaGFuZ2VzSW5IdW1hblJlYWRhYmxlRm9ybVNlcnZpY2UnLCAnRXhwbG9yYXRpb25EYXRhU2VydmljZScsXG4gICAgJ0xvY2FsU3RvcmFnZVNlcnZpY2UnLCAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uICgkbG9nLCAkdGltZW91dCwgJHVpYk1vZGFsLCAkd2luZG93LCBDaGFuZ2VzSW5IdW1hblJlYWRhYmxlRm9ybVNlcnZpY2UsIEV4cGxvcmF0aW9uRGF0YVNlcnZpY2UsIExvY2FsU3RvcmFnZVNlcnZpY2UsIFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHZhciBfaXNNb2RhbE9wZW4gPSBmYWxzZTtcbiAgICAgICAgdmFyIF9yZWZyZXNoUGFnZSA9IGZ1bmN0aW9uIChkZWxheSkge1xuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaG93Tm9uU3RyaWN0VmFsaWRhdGlvbkZhaWxNb2RhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvcGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2UvbW9kYWwtdGVtcGxhdGVzLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3NhdmUtdmFsaWRhdGlvbi1mYWlsLW1vZGFsLnRlbXBsYXRlLmh0bWwnKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCBtb2RhbCBmcm9tIGNsb3Npbmcgd2hlbiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSBpdC5cbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xvc2VBbmRSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlZnJlc2hQYWdlKDIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfaXNNb2RhbE9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pc01vZGFsT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF9pc01vZGFsT3BlbiA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNNb2RhbE9wZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2lzTW9kYWxPcGVuO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNob3dWZXJzaW9uTWlzbWF0Y2hNb2RhbDogZnVuY3Rpb24gKGxvc3RDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9tb2RhbC10ZW1wbGF0ZXMvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2F2ZS12ZXJzaW9uLW1pc21hdGNoLW1vZGFsLnRlbXBsYXRlLmh0bWwnKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCBtb2RhbCBmcm9tIGNsb3Npbmcgd2hlbiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSBpdC5cbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsIGZ1bmN0aW9uICgkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBkaXNjYXJkIGNoYW5nZXMgYnV0dG9uLCBzaWduYWwgYmFja2VuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGRpc2NhcmQgdGhlIGRyYWZ0IGFuZCByZWxvYWQgdGhlIHBhZ2UgdGhlcmVhZnRlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzY2FyZENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4cGxvcmF0aW9uRGF0YVNlcnZpY2UuZGlzY2FyZERyYWZ0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWZyZXNoUGFnZSgyMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhhc0xvc3RDaGFuZ2VzID0gKGxvc3RDaGFuZ2VzICYmIGxvc3RDaGFuZ2VzLmxlbmd0aCA+IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaGFzTG9zdENoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhzbGwpOiBUaGlzIHNob3VsZCBhbHNvIGluY2x1ZGUgY2hhbmdlcyB0byBleHBsb3JhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcm9wZXJ0aWVzIChzdWNoIGFzIHRoZSBleHBsb3JhdGlvbiB0aXRsZSwgY2F0ZWdvcnksIGV0Yy4pLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9zdENoYW5nZXNIdG1sID0gKENoYW5nZXNJbkh1bWFuUmVhZGFibGVGb3JtU2VydmljZS5tYWtlSHVtYW5SZWFkYWJsZShsb3N0Q2hhbmdlcykuaHRtbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5lcnJvcignTG9zdCBjaGFuZ2VzOiAnICsgSlNPTi5zdHJpbmdpZnkobG9zdENoYW5nZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdvcHBpYS1hdXRvc2F2ZS12ZXJzaW9uLW1pc21hdGNoLW1vZGFsJ1xuICAgICAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX2lzTW9kYWxPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfaXNNb2RhbE9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfaXNNb2RhbE9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNob3dMb3N0Q2hhbmdlc01vZGFsOiBmdW5jdGlvbiAobG9zdENoYW5nZXMsIGV4cGxvcmF0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL3BhZ2VzL2V4cGxvcmF0aW9uLWVkaXRvci1wYWdlL21vZGFsLXRlbXBsYXRlcy8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdsb3N0LWNoYW5nZXMtbW9kYWwudGVtcGxhdGUuaHRtbCcpLFxuICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IG1vZGFsIGZyb20gY2xvc2luZyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvdXRzaWRlIGl0LlxuICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBkaXNjYXJkIGNoYW5nZXMgYnV0dG9uLCBzaWduYWwgYmFja2VuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGRpc2NhcmQgdGhlIGRyYWZ0IGFuZCByZWxvYWQgdGhlIHBhZ2UgdGhlcmVhZnRlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvY2FsU3RvcmFnZVNlcnZpY2UucmVtb3ZlRXhwbG9yYXRpb25EcmFmdChleHBsb3JhdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9zdENoYW5nZXNIdG1sID0gKENoYW5nZXNJbkh1bWFuUmVhZGFibGVGb3JtU2VydmljZS5tYWtlSHVtYW5SZWFkYWJsZShsb3N0Q2hhbmdlcykuaHRtbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmVycm9yKCdMb3N0IGNoYW5nZXM6ICcgKyBKU09OLnN0cmluZ2lmeShsb3N0Q2hhbmdlcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAnb3BwaWEtbG9zdC1jaGFuZ2VzLW1vZGFsJ1xuICAgICAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX2lzTW9kYWxPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfaXNNb2RhbE9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfaXNNb2RhbE9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBIHNlcnZpY2UgdGhhdCBtYWludGFpbnMgYSBwcm92aXNpb25hbCBsaXN0IG9mIGNoYW5nZXMgdG8gYmVcbiAqIGNvbW1pdHRlZCB0byB0aGUgc2VydmVyLlxuICovXG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9zZXJ2aWNlcy9hdXRvc2F2ZS1pbmZvLW1vZGFscy5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9zZXJ2aWNlcy9leHBsb3JhdGlvbi1kYXRhLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0FsZXJ0c1NlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0NoYW5nZUxpc3RTZXJ2aWNlJywgW1xuICAgICckbG9nJywgJyRyb290U2NvcGUnLCAnQWxlcnRzU2VydmljZScsICdBdXRvc2F2ZUluZm9Nb2RhbHNTZXJ2aWNlJyxcbiAgICAnRXhwbG9yYXRpb25EYXRhU2VydmljZScsXG4gICAgZnVuY3Rpb24gKCRsb2csICRyb290U2NvcGUsIEFsZXJ0c1NlcnZpY2UsIEF1dG9zYXZlSW5mb01vZGFsc1NlcnZpY2UsIEV4cGxvcmF0aW9uRGF0YVNlcnZpY2UpIHtcbiAgICAgICAgLy8gVE9ETyhzbGwpOiBJbXBsZW1lbnQgdW5kbywgcmVkbyBmdW5jdGlvbmFsaXR5LiBTaG93IGEgbWVzc2FnZSBvbiBlYWNoXG4gICAgICAgIC8vIHN0ZXAgc2F5aW5nIHdoYXQgdGhlIHN0ZXAgaXMgZG9pbmcuXG4gICAgICAgIC8vIFRPRE8oc2xsKTogQWxsb3cgdGhlIHVzZXIgdG8gdmlldyB0aGUgbGlzdCBvZiBjaGFuZ2VzIG1hZGUgc28gZmFyLCBhc1xuICAgICAgICAvLyB3ZWxsIGFzIHRoZSBsaXN0IG9mIGNoYW5nZXMgaW4gdGhlIHVuZG8gc3RhY2suXG4gICAgICAgIC8vIFRlbXBvcmFyeSBidWZmZXIgZm9yIGNoYW5nZXMgbWFkZSB0byB0aGUgZXhwbG9yYXRpb24uXG4gICAgICAgIHZhciBleHBsb3JhdGlvbkNoYW5nZUxpc3QgPSBbXTtcbiAgICAgICAgLy8gU3RhY2sgZm9yIHN0b3JpbmcgdW5kb25lIGNoYW5nZXMuIFRoZSBsYXN0IGVsZW1lbnQgaXMgdGhlIG1vc3QgcmVjZW50bHlcbiAgICAgICAgLy8gdW5kb25lIGNoYW5nZS5cbiAgICAgICAgdmFyIHVuZG9uZUNoYW5nZVN0YWNrID0gW107XG4gICAgICAgIC8vIEFsbCB0aGVzZSBjb25zdGFudHMgc2hvdWxkIGNvcnJlc3BvbmQgdG8gdGhvc2UgaW4gZXhwX2RvbWFpbi5weS5cbiAgICAgICAgLy8gVE9ETyhzbGwpOiBFbmZvcmNlIHRoaXMgaW4gY29kZS5cbiAgICAgICAgdmFyIENNRF9BRERfU1RBVEUgPSAnYWRkX3N0YXRlJztcbiAgICAgICAgdmFyIENNRF9SRU5BTUVfU1RBVEUgPSAncmVuYW1lX3N0YXRlJztcbiAgICAgICAgdmFyIENNRF9ERUxFVEVfU1RBVEUgPSAnZGVsZXRlX3N0YXRlJztcbiAgICAgICAgdmFyIENNRF9FRElUX1NUQVRFX1BST1BFUlRZID0gJ2VkaXRfc3RhdGVfcHJvcGVydHknO1xuICAgICAgICB2YXIgQ01EX0VESVRfRVhQTE9SQVRJT05fUFJPUEVSVFkgPSAnZWRpdF9leHBsb3JhdGlvbl9wcm9wZXJ0eSc7XG4gICAgICAgIHZhciBBTExPV0VEX0VYUExPUkFUSU9OX0JBQ0tFTkRfTkFNRVMgPSB7XG4gICAgICAgICAgICBjYXRlZ29yeTogdHJ1ZSxcbiAgICAgICAgICAgIGluaXRfc3RhdGVfbmFtZTogdHJ1ZSxcbiAgICAgICAgICAgIGxhbmd1YWdlX2NvZGU6IHRydWUsXG4gICAgICAgICAgICBvYmplY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBwYXJhbV9jaGFuZ2VzOiB0cnVlLFxuICAgICAgICAgICAgcGFyYW1fc3BlY3M6IHRydWUsXG4gICAgICAgICAgICB0YWdzOiB0cnVlLFxuICAgICAgICAgICAgdGl0bGU6IHRydWUsXG4gICAgICAgICAgICBhdXRvX3R0c19lbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgY29ycmVjdG5lc3NfZmVlZGJhY2tfZW5hYmxlZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICB2YXIgQUxMT1dFRF9TVEFURV9CQUNLRU5EX05BTUVTID0ge1xuICAgICAgICAgICAgYW5zd2VyX2dyb3VwczogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpcm1lZF91bmNsYXNzaWZpZWRfYW5zd2VyczogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRydWUsXG4gICAgICAgICAgICByZWNvcmRlZF92b2ljZW92ZXJzOiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdF9vdXRjb21lOiB0cnVlLFxuICAgICAgICAgICAgaGludHM6IHRydWUsXG4gICAgICAgICAgICBwYXJhbV9jaGFuZ2VzOiB0cnVlLFxuICAgICAgICAgICAgcGFyYW1fc3BlY3M6IHRydWUsXG4gICAgICAgICAgICBzb2xpY2l0X2Fuc3dlcl9kZXRhaWxzOiB0cnVlLFxuICAgICAgICAgICAgc29sdXRpb246IHRydWUsXG4gICAgICAgICAgICBzdGF0ZV9uYW1lOiB0cnVlLFxuICAgICAgICAgICAgd2lkZ2V0X2N1c3RvbWl6YXRpb25fYXJnczogdHJ1ZSxcbiAgICAgICAgICAgIHdpZGdldF9pZDogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXR0ZW5fdHJhbnNsYXRpb25zOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHZhciBhdXRvc2F2ZUNoYW5nZUxpc3RPbkNoYW5nZSA9IGZ1bmN0aW9uIChleHBsb3JhdGlvbkNoYW5nZUxpc3QpIHtcbiAgICAgICAgICAgIC8vIEFzeW5jaHJvbm91c2x5IHNlbmQgYW4gYXV0b3NhdmUgcmVxdWVzdCwgYW5kIGNoZWNrIGZvciBlcnJvcnMgaW4gdGhlXG4gICAgICAgICAgICAvLyByZXNwb25zZTpcbiAgICAgICAgICAgIC8vIElmIGVycm9yIGlzIHByZXNlbnQgLT4gQ2hlY2sgZm9yIHRoZSB0eXBlIG9mIGVycm9yIG9jY3VycmVkXG4gICAgICAgICAgICAvLyAoRGlzcGxheSB0aGUgY29ycmVzcG9uZGluZyBtb2RhbHMgaW4gYm90aCBjYXNlcywgaWYgbm90IGFscmVhZHlcbiAgICAgICAgICAgIC8vIG9wZW5lZCk6XG4gICAgICAgICAgICAvLyAtIFZlcnNpb24gTWlzbWF0Y2guXG4gICAgICAgICAgICAvLyAtIE5vbi1zdHJpY3QgVmFsaWRhdGlvbiBGYWlsLlxuICAgICAgICAgICAgRXhwbG9yYXRpb25EYXRhU2VydmljZS5hdXRvc2F2ZUNoYW5nZUxpc3QoZXhwbG9yYXRpb25DaGFuZ2VMaXN0LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLmRhdGEuaXNfdmVyc2lvbl9vZl9kcmFmdF92YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUF1dG9zYXZlSW5mb01vZGFsc1NlcnZpY2UuaXNNb2RhbE9wZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQXV0b3NhdmVJbmZvTW9kYWxzU2VydmljZS5zaG93VmVyc2lvbk1pc21hdGNoTW9kYWwoZXhwbG9yYXRpb25DaGFuZ2VMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmNsZWFyV2FybmluZ3MoKTtcbiAgICAgICAgICAgICAgICAkbG9nLmVycm9yKCdub25TdHJpY3RWYWxpZGF0aW9uRmFpbHVyZTogJyArXG4gICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGV4cGxvcmF0aW9uQ2hhbmdlTGlzdCkpO1xuICAgICAgICAgICAgICAgIGlmICghQXV0b3NhdmVJbmZvTW9kYWxzU2VydmljZS5pc01vZGFsT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgICAgIEF1dG9zYXZlSW5mb01vZGFsc1NlcnZpY2Uuc2hvd05vblN0cmljdFZhbGlkYXRpb25GYWlsTW9kYWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGFkZENoYW5nZSA9IGZ1bmN0aW9uIChjaGFuZ2VEaWN0KSB7XG4gICAgICAgICAgICBpZiAoJHJvb3RTY29wZS5sb2FkaW5nTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cGxvcmF0aW9uQ2hhbmdlTGlzdC5wdXNoKGNoYW5nZURpY3QpO1xuICAgICAgICAgICAgdW5kb25lQ2hhbmdlU3RhY2sgPSBbXTtcbiAgICAgICAgICAgIGF1dG9zYXZlQ2hhbmdlTGlzdE9uQ2hhbmdlKGV4cGxvcmF0aW9uQ2hhbmdlTGlzdCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNhdmVzIGEgY2hhbmdlIGRpY3QgdGhhdCByZXByZXNlbnRzIGFkZGluZyBhIG5ldyBzdGF0ZS4gSXQgaXMgdGhlXG4gICAgICAgICAgICAgKiByZXNwb25zYmlsaXR5IG9mIHRoZSBjYWxsZXIgdG8gY2hlY2sgdGhhdCB0aGUgbmV3IHN0YXRlIG5hbWUgaXMgdmFsaWQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXRlTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBuZXdseS1hZGRlZCBzdGF0ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZGRTdGF0ZTogZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIGFkZENoYW5nZSh7XG4gICAgICAgICAgICAgICAgICAgIGNtZDogQ01EX0FERF9TVEFURSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVfbmFtZTogc3RhdGVOYW1lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTYXZlcyBhIGNoYW5nZSBkaWN0IHRoYXQgcmVwcmVzZW50cyBkZWxldGluZyBhIG5ldyBzdGF0ZS4gSXQgaXMgdGhlXG4gICAgICAgICAgICAgKiByZXNwb25zYmlsaXR5IG9mIHRoZSBjYWxsZXIgdG8gY2hlY2sgdGhhdCB0aGUgZGVsZXRlZCBzdGF0ZSBuYW1lXG4gICAgICAgICAgICAgKiBjb3JyZXNwb25kcyB0byBhbiBleGlzdGluZyBzdGF0ZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdGVOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGRlbGV0ZWQgc3RhdGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRlbGV0ZVN0YXRlOiBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICAgICAgY21kOiBDTURfREVMRVRFX1NUQVRFLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZV9uYW1lOiBzdGF0ZU5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNjYXJkQWxsQ2hhbmdlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uQ2hhbmdlTGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIHVuZG9uZUNoYW5nZVN0YWNrID0gW107XG4gICAgICAgICAgICAgICAgRXhwbG9yYXRpb25EYXRhU2VydmljZS5kaXNjYXJkRHJhZnQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNhdmVzIGEgY2hhbmdlIGRpY3QgdGhhdCByZXByZXNlbnRzIGEgY2hhbmdlIHRvIGFuIGV4cGxvcmF0aW9uXG4gICAgICAgICAgICAgKiBwcm9wZXJ0eSAoc3VjaCBhcyBpdHMgdGl0bGUsIGNhdGVnb3J5LCAuLi4pLiBJdCBpcyB0aGUgcmVzcG9uc2liaWxpdHlcbiAgICAgICAgICAgICAqIG9mIHRoZSBjYWxsZXIgdG8gY2hlY2sgdGhhdCB0aGUgb2xkIGFuZCBuZXcgdmFsdWVzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJhY2tlbmROYW1lIC0gVGhlIGJhY2tlbmQgbmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgICAgICAgICAqICAgKGUuZy4gdGl0bGUsIGNhdGVnb3J5KVxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1ZhbHVlIC0gVGhlIG5ldyB2YWx1ZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvbGRWYWx1ZSAtIFRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZWRpdEV4cGxvcmF0aW9uUHJvcGVydHk6IGZ1bmN0aW9uIChiYWNrZW5kTmFtZSwgbmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBTExPV0VEX0VYUExPUkFUSU9OX0JBQ0tFTkRfTkFNRVMuaGFzT3duUHJvcGVydHkoYmFja2VuZE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuYWRkV2FybmluZygnSW52YWxpZCBleHBsb3JhdGlvbiBwcm9wZXJ0eTogJyArIGJhY2tlbmROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRDaGFuZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBjbWQ6IENNRF9FRElUX0VYUExPUkFUSU9OX1BST1BFUlRZLFxuICAgICAgICAgICAgICAgICAgICBuZXdfdmFsdWU6IGFuZ3VsYXIuY29weShuZXdWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgIG9sZF92YWx1ZTogYW5ndWxhci5jb3B5KG9sZFZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlfbmFtZTogYmFja2VuZE5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNhdmVzIGEgY2hhbmdlIGRpY3QgdGhhdCByZXByZXNlbnRzIGEgY2hhbmdlIHRvIGEgc3RhdGUgcHJvcGVydHkuIEl0XG4gICAgICAgICAgICAgKiBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIGNhbGxlciB0byBjaGVjayB0aGF0IHRoZSBvbGQgYW5kIG5ld1xuICAgICAgICAgICAgICogdmFsdWVzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXRlTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBzdGF0ZSB0aGF0IGlzIGJlaW5nIGVkaXRlZFxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJhY2tlbmROYW1lIC0gVGhlIGJhY2tlbmQgbmFtZSBvZiB0aGUgZWRpdGVkIHByb3BlcnR5XG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VmFsdWUgLSBUaGUgbmV3IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9sZFZhbHVlIC0gVGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBlZGl0U3RhdGVQcm9wZXJ0eTogZnVuY3Rpb24gKHN0YXRlTmFtZSwgYmFja2VuZE5hbWUsIG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICghQUxMT1dFRF9TVEFURV9CQUNLRU5EX05BTUVTLmhhc093blByb3BlcnR5KGJhY2tlbmROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmFkZFdhcm5pbmcoJ0ludmFsaWQgc3RhdGUgcHJvcGVydHk6ICcgKyBiYWNrZW5kTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICAgICAgY21kOiBDTURfRURJVF9TVEFURV9QUk9QRVJUWSxcbiAgICAgICAgICAgICAgICAgICAgbmV3X3ZhbHVlOiBhbmd1bGFyLmNvcHkobmV3VmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICBvbGRfdmFsdWU6IGFuZ3VsYXIuY29weShvbGRWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5X25hbWU6IGJhY2tlbmROYW1lLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZV9uYW1lOiBzdGF0ZU5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDaGFuZ2VMaXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuY29weShleHBsb3JhdGlvbkNoYW5nZUxpc3QpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzRXhwbG9yYXRpb25Mb2NrZWRGb3JFZGl0aW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cGxvcmF0aW9uQ2hhbmdlTGlzdC5sZW5ndGggPiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW5pdGlhbGl6ZXMgdGhlIGN1cnJlbnQgY2hhbmdlTGlzdCB3aXRoIHRoZSBvbmUgcmVjZWl2ZWQgZnJvbSBiYWNrZW5kLlxuICAgICAgICAgICAgICogVGhpcyBiZWhhdmlvciBleGlzdHMgb25seSBpbiBjYXNlIG9mIGFuIGF1dG9zYXZlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjaGFuZ2VMaXN0IC0gQXV0b3NhdmVkIGNoYW5nZUxpc3QgZGF0YVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsb2FkQXV0b3NhdmVkQ2hhbmdlTGlzdDogZnVuY3Rpb24gKGNoYW5nZUxpc3QpIHtcbiAgICAgICAgICAgICAgICBleHBsb3JhdGlvbkNoYW5nZUxpc3QgPSBjaGFuZ2VMaXN0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2F2ZXMgYSBjaGFuZ2UgZGljdCB0aGF0IHJlcHJlc2VudHMgdGhlIHJlbmFtaW5nIG9mIGEgc3RhdGUuIFRoaXNcbiAgICAgICAgICAgICAqIGlzIGFsc28gaW50ZW5kZWQgdG8gY2hhbmdlIHRoZSBpbml0aWFsIHN0YXRlIG5hbWUgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgKiAodGhhdCBpcywgdGhlIGxhdHRlciBjaGFuZ2UgaXMgaW1wbGllZCBhbmQgZG9lcyBub3QgaGF2ZSB0byBiZVxuICAgICAgICAgICAgICogcmVjb3JkZWQgc2VwYXJhdGVseSBpbiBhbm90aGVyIGNoYW5nZSBkaWN0KS4gSXQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5XG4gICAgICAgICAgICAgKiBvZiB0aGUgY2FsbGVyIHRvIGNoZWNrIHRoYXQgdGhlIHR3byBuYW1lcyBhcmUgbm90IGVxdWFsLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdTdGF0ZU5hbWUgLSBUaGUgbmV3IG5hbWUgb2YgdGhlIHN0YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkU3RhdGVOYW1lIC0gVGhlIHByZXZpb3VzIG5hbWUgb2YgdGhlIHN0YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbmFtZVN0YXRlOiBmdW5jdGlvbiAobmV3U3RhdGVOYW1lLCBvbGRTdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBhZGRDaGFuZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBjbWQ6IENNRF9SRU5BTUVfU1RBVEUsXG4gICAgICAgICAgICAgICAgICAgIG5ld19zdGF0ZV9uYW1lOiBuZXdTdGF0ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG9sZF9zdGF0ZV9uYW1lOiBvbGRTdGF0ZU5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bmRvTGFzdENoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChleHBsb3JhdGlvbkNoYW5nZUxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuYWRkV2FybmluZygnVGhlcmUgYXJlIG5vIGNoYW5nZXMgdG8gdW5kby4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbGFzdENoYW5nZSA9IGV4cGxvcmF0aW9uQ2hhbmdlTGlzdC5wb3AoKTtcbiAgICAgICAgICAgICAgICB1bmRvbmVDaGFuZ2VTdGFjay5wdXNoKGxhc3RDaGFuZ2UpO1xuICAgICAgICAgICAgICAgIGF1dG9zYXZlQ2hhbmdlTGlzdE9uQ2hhbmdlKGV4cGxvcmF0aW9uQ2hhbmdlTGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNlcnZpY2UgdG8gZ2V0IGNoYW5nZXMgaW4gaHVtYW4gcmVhZGFibGUgZm9ybS5cbiAqL1xucmVxdWlyZSgnc2VydmljZXMvVXRpbHNTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdDaGFuZ2VzSW5IdW1hblJlYWRhYmxlRm9ybVNlcnZpY2UnLCBbXG4gICAgJ1V0aWxzU2VydmljZScsIGZ1bmN0aW9uIChVdGlsc1NlcnZpY2UpIHtcbiAgICAgICAgdmFyIENNRF9BRERfU1RBVEUgPSAnYWRkX3N0YXRlJztcbiAgICAgICAgdmFyIENNRF9SRU5BTUVfU1RBVEUgPSAncmVuYW1lX3N0YXRlJztcbiAgICAgICAgdmFyIENNRF9ERUxFVEVfU1RBVEUgPSAnZGVsZXRlX3N0YXRlJztcbiAgICAgICAgdmFyIENNRF9FRElUX1NUQVRFX1BST1BFUlRZID0gJ2VkaXRfc3RhdGVfcHJvcGVydHknO1xuICAgICAgICB2YXIgbWFrZVJ1bGVzTGlzdEh1bWFuUmVhZGFibGUgPSBmdW5jdGlvbiAoYW5zd2VyR3JvdXBWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIHJ1bGVzTGlzdCA9IFtdO1xuICAgICAgICAgICAgYW5zd2VyR3JvdXBWYWx1ZS5ydWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJ1bGVFbG0gPSBhbmd1bGFyLmVsZW1lbnQoJzxsaT48L2xpPicpO1xuICAgICAgICAgICAgICAgIHJ1bGVFbG0uaHRtbCgnPHA+VHlwZTogJyArIHJ1bGUudHlwZSArICc8L3A+Jyk7XG4gICAgICAgICAgICAgICAgcnVsZUVsbS5hcHBlbmQoJzxwPlZhbHVlOiAnICsgKE9iamVjdC5rZXlzKHJ1bGUuaW5wdXRzKS5tYXAoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydWxlLmlucHV0c1tpbnB1dF07XG4gICAgICAgICAgICAgICAgfSkpLnRvU3RyaW5nKCkgKyAnPC9wPicpO1xuICAgICAgICAgICAgICAgIHJ1bGVzTGlzdC5wdXNoKHJ1bGVFbG0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcnVsZXNMaXN0O1xuICAgICAgICB9O1xuICAgICAgICAvLyBBbiBlZGl0IGlzIHJlcHJlc2VudGVkIGVpdGhlciBhcyBhbiBvYmplY3Qgb3IgYW4gYXJyYXkuIElmIGl0J3MgYW5cbiAgICAgICAgLy8gb2JqZWN0LCB0aGVuIHNpbXBseSByZXR1cm4gdGhhdCBvYmplY3QuIEluIGNhc2Ugb2YgYW4gYXJyYXksIHJldHVyblxuICAgICAgICAvLyB0aGUgbGFzdCBpdGVtLlxuICAgICAgICB2YXIgZ2V0U3RhdGVQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24gKHN0YXRlUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNBcnJheShzdGF0ZVByb3BlcnR5VmFsdWUpID9cbiAgICAgICAgICAgICAgICBzdGF0ZVByb3BlcnR5VmFsdWVbc3RhdGVQcm9wZXJ0eVZhbHVlLmxlbmd0aCAtIDFdIDogc3RhdGVQcm9wZXJ0eVZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICAvLyBEZXRlY3RzIHdoZXRoZXIgYW4gb2JqZWN0IG9mIHRoZSB0eXBlICdhbnN3ZXJfZ3JvdXAnIG9yXG4gICAgICAgIC8vICdkZWZhdWx0X291dGNvbWUnIGhhcyBiZWVuIGFkZGVkLCBlZGl0ZWQgb3IgZGVsZXRlZC5cbiAgICAgICAgLy8gUmV0dXJucyAtICdhZGRkZWQnLCAnZWRpdGVkJyBvciAnZGVsZXRlZCcgYWNjb3JkaW5nbHkuXG4gICAgICAgIHZhciBnZXRSZWxhdGl2ZUNoYW5nZVRvR3JvdXBzID0gZnVuY3Rpb24gKGNoYW5nZU9iamVjdCkge1xuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY2hhbmdlT2JqZWN0Lm5ld192YWx1ZTtcbiAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IGNoYW5nZU9iamVjdC5vbGRfdmFsdWU7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KG5ld1ZhbHVlKSAmJiBhbmd1bGFyLmlzQXJyYXkob2xkVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKG5ld1ZhbHVlLmxlbmd0aCA+IG9sZFZhbHVlLmxlbmd0aCkgP1xuICAgICAgICAgICAgICAgICAgICAnYWRkZWQnIDogKG5ld1ZhbHVlLmxlbmd0aCA9PT0gb2xkVmFsdWUubGVuZ3RoKSA/XG4gICAgICAgICAgICAgICAgICAgICdlZGl0ZWQnIDogJ2RlbGV0ZWQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFVdGlsc1NlcnZpY2UuaXNFbXB0eShvbGRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFVdGlsc1NlcnZpY2UuaXNFbXB0eShuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICdlZGl0ZWQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gJ2RlbGV0ZWQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFVdGlsc1NlcnZpY2UuaXNFbXB0eShuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gJ2FkZGVkJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgbWFrZUh1bWFuUmVhZGFibGUgPSBmdW5jdGlvbiAobG9zdENoYW5nZXMpIHtcbiAgICAgICAgICAgIHZhciBvdXRlckh0bWwgPSBhbmd1bGFyLmVsZW1lbnQoJzx1bD48L3VsPicpO1xuICAgICAgICAgICAgdmFyIHN0YXRlV2lzZUVkaXRzTWFwcGluZyA9IHt9O1xuICAgICAgICAgICAgLy8gVGhlIHZhcmlhYmxlIHN0YXRlV2lzZUVkaXRzTWFwcGluZyBzdG9yZXMgdGhlIGVkaXRzIGdyb3VwZWQgYnkgc3RhdGUuXG4gICAgICAgICAgICAvLyBGb3IgaW5zdGFuY2UsIHlvdSBtYWRlIHRoZSBmb2xsb3dpbmcgZWRpdHM6XG4gICAgICAgICAgICAvLyAxLiBDaGFuZ2VkIGNvbnRlbnQgdG8gJ1dlbGNvbWUhJyBpbnN0ZWFkIG9mICcnIGluICdJbnRyb2R1Y3Rpb24nLlxuICAgICAgICAgICAgLy8gMi4gQWRkZWQgYW4gaW50ZXJhY3Rpb24gaW4gdGhpcyBzdGF0ZS5cbiAgICAgICAgICAgIC8vIDIuIEFkZGVkIGEgbmV3IHN0YXRlICdFbmQnLlxuICAgICAgICAgICAgLy8gMy4gRW5kZWQgRXhwb3JhdGlvbiBmcm9tIHN0YXRlICdFbmQnLlxuICAgICAgICAgICAgLy8gc3RhdGVXaXNlRWRpdHNNYXBwaW5nIHdpbGwgbG9vayBzb21ldGhpbmcgbGlrZSB0aGlzOlxuICAgICAgICAgICAgLy8gLSAnSW50cm9kdWN0aW9uJzogW1xuICAgICAgICAgICAgLy8gICAtICdFZGl0ZWQgQ29udGVudDogV2VsY29tZSEnLDpcbiAgICAgICAgICAgIC8vICAgLSAnQWRkZWQgSW50ZXJhY3Rpb246IENvbnRpbnVlJyxcbiAgICAgICAgICAgIC8vICAgLSAnQWRkZWQgaW50ZXJhY3Rpb24gY3VzdG9taXphdGlvbnMnXVxuICAgICAgICAgICAgLy8gLSAnRW5kJzogWydFbmRlZCBleHBsb3JhdGlvbiddXG4gICAgICAgICAgICBsb3N0Q2hhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uIChsb3N0Q2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChsb3N0Q2hhbmdlLmNtZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIENNRF9BRERfU1RBVEU6XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRlckh0bWwuYXBwZW5kKGFuZ3VsYXIuZWxlbWVudCgnPGxpPjwvbGk+JykuaHRtbCgnQWRkZWQgc3RhdGU6ICcgKyBsb3N0Q2hhbmdlLnN0YXRlX25hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIENNRF9SRU5BTUVfU1RBVEU6XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRlckh0bWwuYXBwZW5kKGFuZ3VsYXIuZWxlbWVudCgnPGxpPjwvbGk+JykuaHRtbCgnUmVuYW1lZCBzdGF0ZTogJyArIGxvc3RDaGFuZ2Uub2xkX3N0YXRlX25hbWUgKyAnIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvc3RDaGFuZ2UubmV3X3N0YXRlX25hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIENNRF9ERUxFVEVfU1RBVEU6XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRlckh0bWwuYXBwZW5kKGFuZ3VsYXIuZWxlbWVudCgnPGxpPjwvbGk+JykuaHRtbCgnRGVsZXRlZCBzdGF0ZTogJyArIGxvc3RDaGFuZ2Uuc3RhdGVfbmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ01EX0VESVRfU1RBVEVfUFJPUEVSVFk6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBnZXRTdGF0ZVByb3BlcnR5VmFsdWUobG9zdENoYW5nZS5uZXdfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gZ2V0U3RhdGVQcm9wZXJ0eVZhbHVlKGxvc3RDaGFuZ2Uub2xkX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZU5hbWUgPSBsb3N0Q2hhbmdlLnN0YXRlX25hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlV2lzZUVkaXRzTWFwcGluZ1tzdGF0ZU5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVXaXNlRWRpdHNNYXBwaW5nW3N0YXRlTmFtZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobG9zdENoYW5nZS5wcm9wZXJ0eV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29udGVudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhzbGwpOiBBbHNvIGFkZCBkaXNwbGF5IG9mIGF1ZGlvIHRyYW5zbGF0aW9ucyBoZXJlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVXaXNlRWRpdHNNYXBwaW5nW3N0YXRlTmFtZV0ucHVzaChhbmd1bGFyLmVsZW1lbnQoJzxkaXY+PC9kaXY+JykuaHRtbCgnPHN0cm9uZz5FZGl0ZWQgY29udGVudDogPC9zdHJvbmc+PGRpdiBjbGFzcz1cImNvbnRlbnRcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZS5odG1sICsgJzwvZGl2PicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzdGF0ZS1lZGl0LWRlc2MnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnd2lkZ2V0X2lkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvc3RDaGFuZ2VWYWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gJ0VuZEV4cGxvcmF0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvc3RDaGFuZ2VWYWx1ZSA9ICgnPHN0cm9uZz5BZGRlZCBJbnRlcmFjdGlvbjogPC9zdHJvbmc+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvc3RDaGFuZ2VWYWx1ZSA9ICdFbmRlZCBFeHBsb3JhdGlvbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3N0Q2hhbmdlVmFsdWUgPSAoJzxzdHJvbmc+RGVsZXRlZCBJbnRlcmFjdGlvbjogPC9zdHJvbmc+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlV2lzZUVkaXRzTWFwcGluZ1tzdGF0ZU5hbWVdLnB1c2goYW5ndWxhci5lbGVtZW50KCc8ZGl2PjwvZGl2PicpLmh0bWwobG9zdENoYW5nZVZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzdGF0ZS1lZGl0LWRlc2MnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3dpZGdldF9jdXN0b21pemF0aW9uX2FyZ3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9zdENoYW5nZVZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVdGlsc1NlcnZpY2UuaXNFbXB0eShvbGRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvc3RDaGFuZ2VWYWx1ZSA9ICdBZGRlZCBJbnRlcmFjdGlvbiBDdXN0b21pemF0aW9ucyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoVXRpbHNTZXJ2aWNlLmlzRW1wdHkobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3N0Q2hhbmdlVmFsdWUgPSAnUmVtb3ZlZCBJbnRlcmFjdGlvbiBDdXN0b21pemF0aW9ucyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3N0Q2hhbmdlVmFsdWUgPSAnRWRpdGVkIEludGVyYWN0aW9uIEN1c3RvbWl6YXRpb25zJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZVdpc2VFZGl0c01hcHBpbmdbc3RhdGVOYW1lXS5wdXNoKGFuZ3VsYXIuZWxlbWVudCgnPGRpdj48L2Rpdj4nKS5odG1sKGxvc3RDaGFuZ2VWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc3RhdGUtZWRpdC1kZXNjJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhbnN3ZXJfZ3JvdXBzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuc3dlckdyb3VwQ2hhbmdlcyA9IGdldFJlbGF0aXZlQ2hhbmdlVG9Hcm91cHMobG9zdENoYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbnN3ZXJHcm91cEh0bWwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuc3dlckdyb3VwQ2hhbmdlcyA9PT0gJ2FkZGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyR3JvdXBIdG1sICs9ICgnPHAgY2xhc3M9XCJzdWItZWRpdFwiPjxpPkRlc3RpbmF0aW9uOiA8L2k+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUub3V0Y29tZS5kZXN0ICsgJzwvcD4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlckdyb3VwSHRtbCArPSAoJzxkaXYgY2xhc3M9XCJzdWItZWRpdFwiPjxpPkZlZWRiYWNrOiA8L2k+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmZWVkYmFja1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLm91dGNvbWUuZmVlZGJhY2suZ2V0SHRtbCgpICsgJzwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJ1bGVzTGlzdCA9IG1ha2VSdWxlc0xpc3RIdW1hblJlYWRhYmxlKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydWxlc0xpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlckdyb3VwSHRtbCArPSAnPHAgY2xhc3M9XCJzdWItZWRpdFwiPjxpPlJ1bGVzOiA8L2k+PC9wPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJ1bGVzTGlzdEh0bWwgPSAoYW5ndWxhci5lbGVtZW50KCc8b2w+PC9vbD4nKS5hZGRDbGFzcygncnVsZXMtbGlzdCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBydWxlIGluIHJ1bGVzTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlc0xpc3RIdG1sLmh0bWwocnVsZXNMaXN0W3J1bGVdWzBdLm91dGVySFRNTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlckdyb3VwSHRtbCArPSBydWxlc0xpc3RIdG1sWzBdLm91dGVySFRNTDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlV2lzZUVkaXRzTWFwcGluZ1tzdGF0ZU5hbWVdLnB1c2goYW5ndWxhci5lbGVtZW50KCc8ZGl2PjxzdHJvbmc+QWRkZWQgYW5zd2VyIGdyb3VwOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9zdHJvbmc+PC9kaXY+JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKGFuc3dlckdyb3VwSHRtbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3N0YXRlLWVkaXQtZGVzYyBhbnN3ZXItZ3JvdXAnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYW5zd2VyR3JvdXBDaGFuZ2VzID09PSAnZWRpdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlLm91dGNvbWUuZGVzdCAhPT0gb2xkVmFsdWUub3V0Y29tZS5kZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyR3JvdXBIdG1sICs9ICgnPHAgY2xhc3M9XCJzdWItZWRpdFwiPjxpPkRlc3RpbmF0aW9uOiA8L2k+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLm91dGNvbWUuZGVzdCArICc8L3A+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKG5ld1ZhbHVlLm91dGNvbWUuZmVlZGJhY2suZ2V0SHRtbCgpLCBvbGRWYWx1ZS5vdXRjb21lLmZlZWRiYWNrLmdldEh0bWwoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXJHcm91cEh0bWwgKz0gKCc8ZGl2IGNsYXNzPVwic3ViLWVkaXRcIj48aT5GZWVkYmFjazogPC9pPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZlZWRiYWNrXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLm91dGNvbWUuZmVlZGJhY2suZ2V0SHRtbCgpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVxdWFscyhuZXdWYWx1ZS5ydWxlcywgb2xkVmFsdWUucnVsZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJ1bGVzTGlzdCA9IG1ha2VSdWxlc0xpc3RIdW1hblJlYWRhYmxlKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVsZXNMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyR3JvdXBIdG1sICs9ICgnPHAgY2xhc3M9XCJzdWItZWRpdFwiPjxpPlJ1bGVzOiA8L2k+PC9wPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnVsZXNMaXN0SHRtbCA9IChhbmd1bGFyLmVsZW1lbnQoJzxvbD48L29sPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3J1bGVzLWxpc3QnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJ1bGUgaW4gcnVsZXNMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlc0xpc3RIdG1sLmh0bWwocnVsZXNMaXN0W3J1bGVdWzBdLm91dGVySFRNTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyR3JvdXBDaGFuZ2VzID0gcnVsZXNMaXN0SHRtbFswXS5vdXRlckhUTUw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVXaXNlRWRpdHNNYXBwaW5nW3N0YXRlTmFtZV0ucHVzaChhbmd1bGFyLmVsZW1lbnQoJzxkaXY+PHN0cm9uZz5FZGl0ZWQgYW5zd2VyIGdyb3VwOiA8c3Ryb25nPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoYW5zd2VyR3JvdXBIdG1sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc3RhdGUtZWRpdC1kZXNjIGFuc3dlci1ncm91cCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhbnN3ZXJHcm91cENoYW5nZXMgPT09ICdkZWxldGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVXaXNlRWRpdHNNYXBwaW5nW3N0YXRlTmFtZV0ucHVzaChhbmd1bGFyLmVsZW1lbnQoJzxkaXY+RGVsZXRlZCBhbnN3ZXIgZ3JvdXA8L2Rpdj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc3RhdGUtZWRpdC1kZXNjJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RlZmF1bHRfb3V0Y29tZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0T3V0Y29tZUNoYW5nZXMgPSBnZXRSZWxhdGl2ZUNoYW5nZVRvR3JvdXBzKGxvc3RDaGFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdE91dGNvbWVIdG1sID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0T3V0Y29tZUNoYW5nZXMgPT09ICdhZGRlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRPdXRjb21lSHRtbCArPSAoJzxwIGNsYXNzPVwic3ViLWVkaXRcIj48aT5EZXN0aW5hdGlvbjogPC9pPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLmRlc3QgKyAnPC9wPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE91dGNvbWVIdG1sICs9ICgnPGRpdiBjbGFzcz1cInN1Yi1lZGl0XCI+PGk+RmVlZGJhY2s6IDwvaT4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZlZWRiYWNrXCI+JyArIG5ld1ZhbHVlLmZlZWRiYWNrLmdldEh0bWwoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVXaXNlRWRpdHNNYXBwaW5nW3N0YXRlTmFtZV0ucHVzaChhbmd1bGFyLmVsZW1lbnQoJzxkaXY+QWRkZWQgZGVmYXVsdCBvdXRjb21lOiA8L2Rpdj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoZGVmYXVsdE91dGNvbWVIdG1sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc3RhdGUtZWRpdC1kZXNjIGRlZmF1bHQtb3V0Y29tZScpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkZWZhdWx0T3V0Y29tZUNoYW5nZXMgPT09ICdlZGl0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUuZGVzdCAhPT0gb2xkVmFsdWUuZGVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRPdXRjb21lSHRtbCArPSAoJzxwIGNsYXNzPVwic3ViLWVkaXRcIj48aT5EZXN0aW5hdGlvbjogPC9pPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZS5kZXN0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvcD4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5lcXVhbHMobmV3VmFsdWUuZmVlZGJhY2suZ2V0SHRtbCgpLCBvbGRWYWx1ZS5mZWVkYmFjay5nZXRIdG1sKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE91dGNvbWVIdG1sICs9ICgnPGRpdiBjbGFzcz1cInN1Yi1lZGl0XCI+PGk+RmVlZGJhY2s6IDwvaT4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmZWVkYmFja1wiPicgKyBuZXdWYWx1ZS5mZWVkYmFjayArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlV2lzZUVkaXRzTWFwcGluZ1tzdGF0ZU5hbWVdLnB1c2goYW5ndWxhci5lbGVtZW50KCc8ZGl2PkVkaXRlZCBkZWZhdWx0IG91dGNvbWU6IDwvZGl2PicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChkZWZhdWx0T3V0Y29tZUh0bWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzdGF0ZS1lZGl0LWRlc2MgZGVmYXVsdC1vdXRjb21lJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRlZmF1bHRPdXRjb21lQ2hhbmdlcyA9PT0gJ2RlbGV0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZVdpc2VFZGl0c01hcHBpbmdbc3RhdGVOYW1lXS5wdXNoKGFuZ3VsYXIuZWxlbWVudCgnPGRpdj5EZWxldGVkIGRlZmF1bHQgb3V0Y29tZTwvZGl2PicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzdGF0ZS1lZGl0LWRlc2MnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAodmFyIHN0YXRlTmFtZSBpbiBzdGF0ZVdpc2VFZGl0c01hcHBpbmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVDaGFuZ2VzRWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxsaT5FZGl0cyB0byBzdGF0ZTogJyArIHN0YXRlTmFtZSArICc8L2xpPicpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHN0YXRlRWRpdCBpbiBzdGF0ZVdpc2VFZGl0c01hcHBpbmdbc3RhdGVOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZUNoYW5nZXNFbC5hcHBlbmQoc3RhdGVXaXNlRWRpdHNNYXBwaW5nW3N0YXRlTmFtZV1bc3RhdGVFZGl0XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dGVySHRtbC5hcHBlbmQoc3RhdGVDaGFuZ2VzRWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dGVySHRtbDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ha2VIdW1hblJlYWRhYmxlOiBmdW5jdGlvbiAobG9zdENoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZUh1bWFuUmVhZGFibGUobG9zdENoYW5nZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci5lbGVtZW50KCc8ZGl2PkVycm9yOiBDb3VsZCBub3QgcmVjb3ZlciBsb3N0IGNoYW5nZXMuPC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIGZvciBoYW5kbGluZyBhbGwgaW50ZXJhY3Rpb25zXG4gKiB3aXRoIHRoZSBleHBsb3JhdGlvbiBlZGl0b3IgYmFja2VuZC5cbiAqL1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL0VkaXRhYmxlRXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL1JlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQWxlcnRzU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQ29udGV4dFNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0xvY2FsU3RvcmFnZVNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL2NvbnRleHR1YWwvVXJsU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvc2VydmljZXMuY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnRXhwbG9yYXRpb25EYXRhU2VydmljZScsIFtcbiAgICAnJGh0dHAnLCAnJGxvZycsICckcScsICckd2luZG93JywgJ0FsZXJ0c1NlcnZpY2UnLFxuICAgICdFZGl0YWJsZUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UnLCAnTG9jYWxTdG9yYWdlU2VydmljZScsXG4gICAgJ1JlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZScsICdVcmxTZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoJGh0dHAsICRsb2csICRxLCAkd2luZG93LCBBbGVydHNTZXJ2aWNlLCBFZGl0YWJsZUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UsIExvY2FsU3RvcmFnZVNlcnZpY2UsIFJlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZSwgVXJsU2VydmljZSkge1xuICAgICAgICAvLyBUaGUgcGF0aG5hbWUgKHdpdGhvdXQgdGhlIGhhc2gpIHNob3VsZCBiZTogLi4uL2NyZWF0ZS97ZXhwbG9yYXRpb25faWR9XG4gICAgICAgIHZhciBleHBsb3JhdGlvbklkID0gJyc7XG4gICAgICAgIHZhciBkcmFmdENoYW5nZUxpc3RJZCA9IG51bGw7XG4gICAgICAgIHZhciBwYXRobmFtZUFycmF5ID0gVXJsU2VydmljZS5nZXRQYXRobmFtZSgpLnNwbGl0KCcvJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aG5hbWVBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHBhdGhuYW1lQXJyYXlbaV0gPT09ICdjcmVhdGUnKSB7XG4gICAgICAgICAgICAgICAgZXhwbG9yYXRpb25JZCA9IHBhdGhuYW1lQXJyYXlbaSArIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZXhwbG9yYXRpb25JZCkge1xuICAgICAgICAgICAgJGxvZy5lcnJvcignVW5leHBlY3RlZCBjYWxsIHRvIEV4cGxvcmF0aW9uRGF0YVNlcnZpY2UgZm9yIHBhdGhuYW1lICcsIHBhdGhuYW1lQXJyYXlbaV0pO1xuICAgICAgICAgICAgLy8gTm90ZTogaWYgd2UgZG8gbm90IHJldHVybiBhbnl0aGluZywgS2FybWEgdW5pdCB0ZXN0cyBmYWlsLlxuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXNvbHZlZEFuc3dlcnNVcmxQcmVmaXggPSAoJy9jcmVhdGVoYW5kbGVyL3Jlc29sdmVkX2Fuc3dlcnMvJyArIGV4cGxvcmF0aW9uSWQpO1xuICAgICAgICB2YXIgZXhwbG9yYXRpb25EcmFmdEF1dG9zYXZlVXJsID0gKCcvY3JlYXRlaGFuZGxlci9hdXRvc2F2ZV9kcmFmdC8nICsgZXhwbG9yYXRpb25JZCk7XG4gICAgICAgIC8vIFB1dCBleHBsb3JhdGlvbiB2YXJpYWJsZXMgaGVyZS5cbiAgICAgICAgdmFyIGV4cGxvcmF0aW9uRGF0YSA9IHtcbiAgICAgICAgICAgIGV4cGxvcmF0aW9uSWQ6IGV4cGxvcmF0aW9uSWQsXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHRoZSBjaGFuZ2VMaXN0IGlzIHRoZSBmdWxsIGNoYW5nZUxpc3Qgc2luY2UgdGhlIGxhc3RcbiAgICAgICAgICAgIC8vIGNvbW1pdHRlZCB2ZXJzaW9uIChhcyBvcHBvc2VkIHRvIHRoZSBtb3N0IHJlY2VudCBhdXRvc2F2ZSkuXG4gICAgICAgICAgICBhdXRvc2F2ZUNoYW5nZUxpc3Q6IGZ1bmN0aW9uIChjaGFuZ2VMaXN0LCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrID09PSB2b2lkIDApIHsgc3VjY2Vzc0NhbGxiYWNrID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7IH07IH1cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjayA9PT0gdm9pZCAwKSB7IGVycm9yQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7IH07IH1cbiAgICAgICAgICAgICAgICAvLyBGaXJzdCBzYXZlIGxvY2FsbHkgdG8gYmUgcmV0cmlldmVkIGxhdGVyIGlmIHNhdmUgaXMgdW5zdWNjZXNzZnVsLlxuICAgICAgICAgICAgICAgIExvY2FsU3RvcmFnZVNlcnZpY2Uuc2F2ZUV4cGxvcmF0aW9uRHJhZnQoZXhwbG9yYXRpb25JZCwgY2hhbmdlTGlzdCwgZHJhZnRDaGFuZ2VMaXN0SWQpO1xuICAgICAgICAgICAgICAgICRodHRwLnB1dChleHBsb3JhdGlvbkRyYWZ0QXV0b3NhdmVVcmwsIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlX2xpc3Q6IGNoYW5nZUxpc3QsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246IGV4cGxvcmF0aW9uRGF0YS5kYXRhLnZlcnNpb25cbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBkcmFmdENoYW5nZUxpc3RJZCA9IHJlc3BvbnNlLmRhdGEuZHJhZnRfY2hhbmdlX2xpc3RfaWQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbiBzYWZlbHkgcmVtb3ZlIHRoZSBsb2NhbGx5IHNhdmVkIGRyYWZ0IGNvcHkgaWYgaXQgd2FzIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHRoZSBiYWNrZW5kLlxuICAgICAgICAgICAgICAgICAgICBMb2NhbFN0b3JhZ2VTZXJ2aWNlLnJlbW92ZUV4cGxvcmF0aW9uRHJhZnQoZXhwbG9yYXRpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNjYXJkRHJhZnQ6IGZ1bmN0aW9uIChzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KGV4cGxvcmF0aW9uRHJhZnRBdXRvc2F2ZVVybCwge30pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBMb2NhbFN0b3JhZ2VTZXJ2aWNlLnJlbW92ZUV4cGxvcmF0aW9uRHJhZnQoZXhwbG9yYXRpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBzdXBwbGllcyB0aGUgZGF0YSBmb3IgdGhlIGN1cnJlbnQgZXhwbG9yYXRpb24uXG4gICAgICAgICAgICBnZXREYXRhOiBmdW5jdGlvbiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChleHBsb3JhdGlvbkRhdGEuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkbG9nLmluZm8oJ0ZvdW5kIGV4cGxvcmF0aW9uIGRhdGEgaW4gY2FjaGUuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZXNvbHZlKGV4cGxvcmF0aW9uRGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHJpZXZlIGRhdGEgZnJvbSB0aGUgc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICAvLyBXQVJOSU5HOiBOb3RlIHRoYXQgdGhpcyBpcyBhIHZlcnNpb24gb2YgdGhlIGV4cGxvcmF0aW9uIHdpdGggZHJhZnRcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhbmdlcyBhcHBsaWVkLiBUaGlzIG1ha2VzIGEgZm9yY2UtcmVmcmVzaCBuZWNlc3Nhcnkgd2hlbiBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgICAgIC8vIGFyZSBkaXNjYXJkZWQsIG90aGVyd2lzZSB0aGUgZXhwbG9yYXRpb24td2l0aC1kcmFmdC1jaGFuZ2VzXG4gICAgICAgICAgICAgICAgICAgIC8vICh3aGljaCBpcyBjYWNoZWQgaGVyZSkgd2lsbCBiZSByZXVzZWQuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoRWRpdGFibGVFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlLmZldGNoQXBwbHlEcmFmdEV4cGxvcmF0aW9uKGV4cGxvcmF0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmluZm8oJ1JldHJpZXZlZCBleHBsb3JhdGlvbiBkYXRhLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5pbmZvKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWZ0Q2hhbmdlTGlzdElkID0gcmVzcG9uc2UuZHJhZnRfY2hhbmdlX2xpc3RfaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbkRhdGEuZGF0YSA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRyYWZ0ID0gTG9jYWxTdG9yYWdlU2VydmljZS5nZXRFeHBsb3JhdGlvbkRyYWZ0KGV4cGxvcmF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWZ0LmlzVmFsaWQoZHJhZnRDaGFuZ2VMaXN0SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VMaXN0ID0gZHJhZnQuZ2V0Q2hhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbkRhdGEuYXV0b3NhdmVDaGFuZ2VMaXN0KGNoYW5nZUxpc3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgcmVsb2FkIGlzIG5lZWRlZCBzbyB0aGF0IHRoZSBjaGFuZ2VsaXN0IGp1c3Qgc2F2ZWQgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvYWRlZCBhcyBvcHBvc2VkIHRvIHRoZSBleHBsb3JhdGlvbiByZXR1cm5lZCBieSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNwb25zZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhleHBsb3JhdGlvbklkLCBkcmFmdC5nZXRDaGFuZ2VzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBSZXR1cm5zIGEgcHJvbWlzZSBzdXBwbHlpbmcgdGhlIGxhc3Qgc2F2ZWQgdmVyc2lvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAgICAgICAgIC8vIGV4cGxvcmF0aW9uLlxuICAgICAgICAgICAgZ2V0TGFzdFNhdmVkRGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UubG9hZExhdGVzdEV4cGxvcmF0aW9uKGV4cGxvcmF0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICRsb2cuaW5mbygnUmV0cmlldmVkIHNhdmVkIGV4cGxvcmF0aW9uIGRhdGEuJyk7XG4gICAgICAgICAgICAgICAgICAgICRsb2cuaW5mbyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5leHBsb3JhdGlvbjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNvbHZlQW5zd2VyczogZnVuY3Rpb24gKHN0YXRlTmFtZSwgcmVzb2x2ZWRBbnN3ZXJzTGlzdCkge1xuICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuY2xlYXJXYXJuaW5ncygpO1xuICAgICAgICAgICAgICAgICRodHRwLnB1dChyZXNvbHZlZEFuc3dlcnNVcmxQcmVmaXggKyAnLycgKyBlbmNvZGVVUklDb21wb25lbnQoc3RhdGVOYW1lKSwge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZF9hbnN3ZXJzOiByZXNvbHZlZEFuc3dlcnNMaXN0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTYXZlcyB0aGUgZXhwbG9yYXRpb24gdG8gdGhlIGJhY2tlbmQsIGFuZCwgb24gYSBzdWNjZXNzIGNhbGxiYWNrLFxuICAgICAgICAgICAgICogdXBkYXRlcyB0aGUgbG9jYWwgY29weSBvZiB0aGUgZXhwbG9yYXRpb24gZGF0YS5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjaGFuZ2VMaXN0IC0gUmVwcmVzZW50cyB0aGUgY2hhbmdlIGxpc3QgZm9yXG4gICAgICAgICAgICAgKiAgIHRoaXMgc2F2ZS4gRWFjaCBlbGVtZW50IG9mIHRoZSBsaXN0IGlzIGEgY29tbWFuZCByZXByZXNlbnRpbmcgYW5cbiAgICAgICAgICAgICAqICAgZWRpdGluZyBhY3Rpb24gKHN1Y2ggYXMgYWRkIHN0YXRlLCBkZWxldGUgc3RhdGUsIGV0Yy4pLiBTZWUgdGhlXG4gICAgICAgICAgICAgKiAgXydDaGFuZ2UnIGNsYXNzIGluIGV4cF9zZXJ2aWNlcy5weSBmb3IgZnVsbCBkb2N1bWVudGF0aW9uLlxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1pdE1lc3NhZ2UgLSBUaGUgdXNlci1lbnRlcmVkIGNvbW1pdCBtZXNzYWdlIGZvclxuICAgICAgICAgICAgICogICB0aGlzIHNhdmUgb3BlcmF0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzYXZlOiBmdW5jdGlvbiAoY2hhbmdlTGlzdCwgY29tbWl0TWVzc2FnZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgRWRpdGFibGVFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlLnVwZGF0ZUV4cGxvcmF0aW9uKGV4cGxvcmF0aW9uSWQsIGV4cGxvcmF0aW9uRGF0YS5kYXRhLnZlcnNpb24sIGNvbW1pdE1lc3NhZ2UsIGNoYW5nZUxpc3QpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuY2xlYXJXYXJuaW5ncygpO1xuICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbkRhdGEuZGF0YSA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UuaXNfdmVyc2lvbl9vZl9kcmFmdF92YWxpZCwgcmVzcG9uc2UuZHJhZnRfY2hhbmdlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGV4cGxvcmF0aW9uRGF0YTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQSBkYXRhIHNlcnZpY2UgdGhhdCBzdG9yZXMgdGhlIG5hbWUgb2YgdGhlIGV4cGxvcmF0aW9uJ3NcbiAqIGluaXRpYWwgc3RhdGUuIE5PVEU6IFRoaXMgc2VydmljZSBkb2VzIG5vdCBwZXJmb3JtIHZhbGlkYXRpb24uIFVzZXJzIG9mIHRoaXNcbiAqIHNlcnZpY2Ugc2hvdWxkIGVuc3VyZSB0aGF0IG5ldyBpbml0aWFsIHN0YXRlIG5hbWVzIHBhc3NlZCB0byB0aGUgc2VydmljZSBhcmVcbiAqIHZhbGlkLlxuICovXG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9zZXJ2aWNlcy9leHBsb3JhdGlvbi1wcm9wZXJ0eS5zZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdFeHBsb3JhdGlvbkluaXRTdGF0ZU5hbWVTZXJ2aWNlJywgW1xuICAgICdFeHBsb3JhdGlvblByb3BlcnR5U2VydmljZScsIGZ1bmN0aW9uIChFeHBsb3JhdGlvblByb3BlcnR5U2VydmljZSkge1xuICAgICAgICB2YXIgY2hpbGQgPSBPYmplY3QuY3JlYXRlKEV4cGxvcmF0aW9uUHJvcGVydHlTZXJ2aWNlKTtcbiAgICAgICAgY2hpbGQucHJvcGVydHlOYW1lID0gJ2luaXRfc3RhdGVfbmFtZSc7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZXMgZm9yIHN0b3JpbmcgZXhwbG9yYXRpb24gcHJvcGVydGllcyBmb3JcbiAqIGRpc3BsYXlpbmcgYW5kIGVkaXRpbmcgdGhlbSBpbiBtdWx0aXBsZSBwbGFjZXMgaW4gdGhlIFVJLFxuICogd2l0aCBiYXNlIGNsYXNzIGFzIEV4cGxvcmF0aW9uUHJvcGVydHlTZXJ2aWNlLlxuICovXG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9zZXJ2aWNlcy9jaGFuZ2UtbGlzdC5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BbGVydHNTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdFeHBsb3JhdGlvblByb3BlcnR5U2VydmljZScsIFtcbiAgICAnJGxvZycsICckcm9vdFNjb3BlJywgJ0FsZXJ0c1NlcnZpY2UnLCAnQ2hhbmdlTGlzdFNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uICgkbG9nLCAkcm9vdFNjb3BlLCBBbGVydHNTZXJ2aWNlLCBDaGFuZ2VMaXN0U2VydmljZSkge1xuICAgICAgICAvLyBQdWJsaWMgYmFzZSBBUEkgZm9yIGRhdGEgc2VydmljZXMgY29ycmVzcG9uZGluZyB0byBleHBsb3JhdGlvbiBwcm9wZXJ0aWVzXG4gICAgICAgIC8vICh0aXRsZSwgY2F0ZWdvcnksIGV0Yy4pXG4gICAgICAgIHZhciBCQUNLRU5EX0NPTlZFUlNJT05TID0ge1xuICAgICAgICAgICAgcGFyYW1fY2hhbmdlczogZnVuY3Rpb24gKHBhcmFtQ2hhbmdlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbUNoYW5nZXMubWFwKGZ1bmN0aW9uIChwYXJhbUNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1DaGFuZ2UudG9CYWNrZW5kRGljdCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhcmFtX3NwZWNzOiBmdW5jdGlvbiAocGFyYW1TcGVjcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbVNwZWNzLnRvQmFja2VuZERpY3QoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wZXJ0eU5hbWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ0V4cGxvcmF0aW9uIHByb3BlcnR5IG5hbWUgY2Fubm90IGJlIG51bGwuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJGxvZy5pbmZvKCdJbml0aWFsaXppbmcgZXhwbG9yYXRpb24gJyArIHRoaXMucHJvcGVydHlOYW1lICsgJzonLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHByb3BlcnR5ICh3aGljaCBtYXkgbm90IGhhdmUgYmVlbiBzYXZlZCB0b1xuICAgICAgICAgICAgICAgIC8vIHRoZSBmcm9udGVuZCB5ZXQpLiBJbiBnZW5lcmFsLCB0aGlzIHdpbGwgYmUgYm91bmQgZGlyZWN0bHkgdG8gdGhlIFVJLlxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkID0gYW5ndWxhci5jb3B5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAvLyBUaGUgcHJldmlvdXMgKHNhdmVkLWluLXRoZS1mcm9udGVuZCkgdmFsdWUgb2YgdGhlIHByb3BlcnR5LiBIZXJlLFxuICAgICAgICAgICAgICAgIC8vICdzYXZlZCcgbWVhbnMgdGhhdCB0aGlzIGlzIHRoZSBsYXRlc3QgdmFsdWUgb2YgdGhlIHByb3BlcnR5IGFzXG4gICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lZCBieSB0aGUgZnJvbnRlbmQgY2hhbmdlIGxpc3QuXG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlZE1lbWVudG8gPSBhbmd1bGFyLmNvcHkodmFsdWUpO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnZXhwbG9yYXRpb25Qcm9wZXJ0eUNoYW5nZWQnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgdmFsdWUgaGFzIGNoYW5nZWQgZnJvbSB0aGUgbWVtZW50by5cbiAgICAgICAgICAgIGhhc0NoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWFuZ3VsYXIuZXF1YWxzKHRoaXMuc2F2ZWRNZW1lbnRvLCB0aGlzLmRpc3BsYXllZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gVGhlIGJhY2tlbmQgbmFtZSBmb3IgdGhpcyBwcm9wZXJ0eS4gVEhJUyBNVVNUIEJFIFNQRUNJRklFRCBCWVxuICAgICAgICAgICAgLy8gU1VCQ0xBU1NFUy5cbiAgICAgICAgICAgIHByb3BlcnR5TmFtZTogbnVsbCxcbiAgICAgICAgICAgIC8vIFRyYW5zZm9ybXMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBub3JtYWxpemVkIGZvcm0uIFRISVMgQ0FOIEJFXG4gICAgICAgICAgICAvLyBPVkVSUklEREVOIEJZIFNVQkNMQVNTRVMuIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIGRvIG5vdGhpbmcuXG4gICAgICAgICAgICBfbm9ybWFsaXplOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gVmFsaWRhdGVzIHRoZSBnaXZlbiB2YWx1ZSBhbmQgcmV0dXJucyBhIGJvb2xlYW4gc3RhdGluZyB3aGV0aGVyIGl0XG4gICAgICAgICAgICAvLyBpcyB2YWxpZCBvciBub3QuIFRISVMgQ0FOIEJFIE9WRVJSSURERU4gQlkgU1VCQ0xBU1NFUy4gVGhlIGRlZmF1bHRcbiAgICAgICAgICAgIC8vIGJlaGF2aW9yIGlzIHRvIGFsd2F5cyByZXR1cm4gdHJ1ZS5cbiAgICAgICAgICAgIF9pc1ZhbGlkOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBOb3JtYWxpemVzIHRoZSBkaXNwbGF5ZWQgdmFsdWUuIFRoZW4sIGlmIHRoZSBtZW1lbnRvIGFuZCB0aGUgZGlzcGxheWVkXG4gICAgICAgICAgICAvLyB2YWx1ZSBhcmUgdGhlIHNhbWUsIGRvZXMgbm90aGluZy4gT3RoZXJ3aXNlLCBjcmVhdGVzIGEgbmV3IGVudHJ5IGluIHRoZVxuICAgICAgICAgICAgLy8gY2hhbmdlIGxpc3QsIGFuZCB1cGRhdGVzIHRoZSBtZW1lbnRvIHRvIHRoZSBkaXNwbGF5ZWQgdmFsdWUuXG4gICAgICAgICAgICBzYXZlRGlzcGxheWVkVmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wZXJ0eU5hbWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ0V4cGxvcmF0aW9uIHByb3BlcnR5IG5hbWUgY2Fubm90IGJlIG51bGwuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWQgPSB0aGlzLl9ub3JtYWxpemUodGhpcy5kaXNwbGF5ZWQpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNWYWxpZCh0aGlzLmRpc3BsYXllZCkgfHwgIXRoaXMuaGFzQ2hhbmdlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZUZyb21NZW1lbnRvKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZXF1YWxzKHRoaXMuZGlzcGxheWVkLCB0aGlzLnNhdmVkTWVtZW50bykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmNsZWFyV2FybmluZ3MoKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3QmFja2VuZFZhbHVlID0gYW5ndWxhci5jb3B5KHRoaXMuZGlzcGxheWVkKTtcbiAgICAgICAgICAgICAgICB2YXIgb2xkQmFja2VuZFZhbHVlID0gYW5ndWxhci5jb3B5KHRoaXMuc2F2ZWRNZW1lbnRvKTtcbiAgICAgICAgICAgICAgICBpZiAoQkFDS0VORF9DT05WRVJTSU9OUy5oYXNPd25Qcm9wZXJ0eSh0aGlzLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3QmFja2VuZFZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQ0tFTkRfQ09OVkVSU0lPTlNbdGhpcy5wcm9wZXJ0eU5hbWVdKHRoaXMuZGlzcGxheWVkKTtcbiAgICAgICAgICAgICAgICAgICAgb2xkQmFja2VuZFZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIEJBQ0tFTkRfQ09OVkVSU0lPTlNbdGhpcy5wcm9wZXJ0eU5hbWVdKHRoaXMuc2F2ZWRNZW1lbnRvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ2hhbmdlTGlzdFNlcnZpY2UuZWRpdEV4cGxvcmF0aW9uUHJvcGVydHkodGhpcy5wcm9wZXJ0eU5hbWUsIG5ld0JhY2tlbmRWYWx1ZSwgb2xkQmFja2VuZFZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVkTWVtZW50byA9IGFuZ3VsYXIuY29weSh0aGlzLmRpc3BsYXllZCk7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdleHBsb3JhdGlvblByb3BlcnR5Q2hhbmdlZCcpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIFJldmVydHMgdGhlIGRpc3BsYXllZCB2YWx1ZSB0byB0aGUgc2F2ZWQgbWVtZW50by5cbiAgICAgICAgICAgIHJlc3RvcmVGcm9tTWVtZW50bzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkID0gYW5ndWxhci5jb3B5KHRoaXMuc2F2ZWRNZW1lbnRvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGF0YSBzZXJ2aWNlIGZvciBrZWVwaW5nIHRyYWNrIG9mIHRoZSBleHBsb3JhdGlvbidzIHN0YXRlcy5cbiAqIE5vdGUgdGhhdCB0aGlzIGlzIHVubGlrZSB0aGUgb3RoZXIgZXhwbG9yYXRpb24gcHJvcGVydHkgc2VydmljZXMsIGluIHRoYXQgaXRcbiAqIGtlZXBzIG5vIG1lbWVudG9zLlxuICovXG5yZXF1aXJlKCdkb21haW4vZXhwbG9yYXRpb24vU3RhdGVzT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgnZmlsdGVycy9zdHJpbmctdXRpbGl0eS1maWx0ZXJzL25vcm1hbGl6ZS13aGl0ZXNwYWNlLmZpbHRlci50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2Uvc2VydmljZXMvYW5ndWxhci1uYW1lLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLWVkaXRvci1wYWdlL3NlcnZpY2VzL2NoYW5nZS1saXN0LnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLWVkaXRvci1wYWdlL3NlcnZpY2VzLycgK1xuICAgICdleHBsb3JhdGlvbi1pbml0LXN0YXRlLW5hbWUuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2UvZWRpdG9yLXRhYi9zZXJ2aWNlcy8nICtcbiAgICAnc29sdXRpb24tdmFsaWRpdHkuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvYW5zd2VyLWNsYXNzaWZpY2F0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvc3RhdGUtZWRpdG9yL3N0YXRlLWVkaXRvci1wcm9wZXJ0aWVzLXNlcnZpY2VzLycgK1xuICAgICdzdGF0ZS1lZGl0b3Iuc2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQWxlcnRzU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQ29udGV4dFNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL1ZhbGlkYXRvcnNTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdFeHBsb3JhdGlvblN0YXRlc1NlcnZpY2UnLCBbXG4gICAgJyRmaWx0ZXInLCAnJGluamVjdG9yJywgJyRsb2NhdGlvbicsICckcScsICckcm9vdFNjb3BlJywgJyR1aWJNb2RhbCcsXG4gICAgJ0FsZXJ0c1NlcnZpY2UnLCAnQW5ndWxhck5hbWVTZXJ2aWNlJywgJ0Fuc3dlckNsYXNzaWZpY2F0aW9uU2VydmljZScsXG4gICAgJ0NoYW5nZUxpc3RTZXJ2aWNlJywgJ0NvbnRleHRTZXJ2aWNlJywgJ0V4cGxvcmF0aW9uSW5pdFN0YXRlTmFtZVNlcnZpY2UnLFxuICAgICdTb2x1dGlvblZhbGlkaXR5U2VydmljZScsICdTdGF0ZUVkaXRvclNlcnZpY2UnLCAnU3RhdGVzT2JqZWN0RmFjdG9yeScsXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgJ1ZhbGlkYXRvcnNTZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoJGZpbHRlciwgJGluamVjdG9yLCAkbG9jYXRpb24sICRxLCAkcm9vdFNjb3BlLCAkdWliTW9kYWwsIEFsZXJ0c1NlcnZpY2UsIEFuZ3VsYXJOYW1lU2VydmljZSwgQW5zd2VyQ2xhc3NpZmljYXRpb25TZXJ2aWNlLCBDaGFuZ2VMaXN0U2VydmljZSwgQ29udGV4dFNlcnZpY2UsIEV4cGxvcmF0aW9uSW5pdFN0YXRlTmFtZVNlcnZpY2UsIFNvbHV0aW9uVmFsaWRpdHlTZXJ2aWNlLCBTdGF0ZUVkaXRvclNlcnZpY2UsIFN0YXRlc09iamVjdEZhY3RvcnksIFVybEludGVycG9sYXRpb25TZXJ2aWNlLCBWYWxpZGF0b3JzU2VydmljZSkge1xuICAgICAgICB2YXIgX3N0YXRlcyA9IG51bGw7XG4gICAgICAgIHZhciBzdGF0ZUFkZGVkQ2FsbGJhY2tzID0gW107XG4gICAgICAgIHZhciBzdGF0ZURlbGV0ZWRDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdmFyIHN0YXRlUmVuYW1lZENhbGxiYWNrcyA9IFtdO1xuICAgICAgICB2YXIgc3RhdGVJbnRlcmFjdGlvblNhdmVkQ2FsbGJhY2tzID0gW107XG4gICAgICAgIC8vIFByb3BlcnRpZXMgdGhhdCBoYXZlIGEgZGlmZmVyZW50IGJhY2tlbmQgcmVwcmVzZW50YXRpb24gZnJvbSB0aGVcbiAgICAgICAgLy8gZnJvbnRlbmQgYW5kIG11c3QgYmUgY29udmVydGVkLlxuICAgICAgICB2YXIgQkFDS0VORF9DT05WRVJTSU9OUyA9IHtcbiAgICAgICAgICAgIGFuc3dlcl9ncm91cHM6IGZ1bmN0aW9uIChhbnN3ZXJHcm91cHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5zd2VyR3JvdXBzLm1hcChmdW5jdGlvbiAoYW5zd2VyR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlckdyb3VwLnRvQmFja2VuZERpY3QoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50OiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50LnRvQmFja2VuZERpY3QoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWNvcmRlZF92b2ljZW92ZXJzOiBmdW5jdGlvbiAocmVjb3JkZWRWb2ljZW92ZXJzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZGVkVm9pY2VvdmVycy50b0JhY2tlbmREaWN0KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVmYXVsdF9vdXRjb21lOiBmdW5jdGlvbiAoZGVmYXVsdE91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdE91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRPdXRjb21lLnRvQmFja2VuZERpY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoaW50czogZnVuY3Rpb24gKGhpbnRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhpbnRzLm1hcChmdW5jdGlvbiAoaGludCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGludC50b0JhY2tlbmREaWN0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFyYW1fY2hhbmdlczogZnVuY3Rpb24gKHBhcmFtQ2hhbmdlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbUNoYW5nZXMubWFwKGZ1bmN0aW9uIChwYXJhbUNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1DaGFuZ2UudG9CYWNrZW5kRGljdCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhcmFtX3NwZWNzOiBmdW5jdGlvbiAocGFyYW1TcGVjcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbVNwZWNzLnRvQmFja2VuZERpY3QoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzb2x1dGlvbjogZnVuY3Rpb24gKHNvbHV0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNvbHV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzb2x1dGlvbi50b0JhY2tlbmREaWN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd3JpdHRlbl90cmFuc2xhdGlvbnM6IGZ1bmN0aW9uICh3cml0dGVuVHJhbnNsYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyaXR0ZW5UcmFuc2xhdGlvbnMudG9CYWNrZW5kRGljdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBNYXBzIGJhY2tlbmQgbmFtZXMgdG8gdGhlIGNvcnJlc3BvbmRpbmcgZnJvbnRlbmQgZGljdCBhY2Nlc3NvciBsaXN0cy5cbiAgICAgICAgdmFyIFBST1BFUlRZX1JFRl9EQVRBID0ge1xuICAgICAgICAgICAgYW5zd2VyX2dyb3VwczogWydpbnRlcmFjdGlvbicsICdhbnN3ZXJHcm91cHMnXSxcbiAgICAgICAgICAgIGNvbmZpcm1lZF91bmNsYXNzaWZpZWRfYW5zd2VyczogW1xuICAgICAgICAgICAgICAgICdpbnRlcmFjdGlvbicsICdjb25maXJtZWRVbmNsYXNzaWZpZWRBbnN3ZXJzJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFsnY29udGVudCddLFxuICAgICAgICAgICAgcmVjb3JkZWRfdm9pY2VvdmVyczogWydyZWNvcmRlZFZvaWNlb3ZlcnMnXSxcbiAgICAgICAgICAgIGRlZmF1bHRfb3V0Y29tZTogWydpbnRlcmFjdGlvbicsICdkZWZhdWx0T3V0Y29tZSddLFxuICAgICAgICAgICAgcGFyYW1fY2hhbmdlczogWydwYXJhbUNoYW5nZXMnXSxcbiAgICAgICAgICAgIHBhcmFtX3NwZWNzOiBbJ3BhcmFtU3BlY3MnXSxcbiAgICAgICAgICAgIGhpbnRzOiBbJ2ludGVyYWN0aW9uJywgJ2hpbnRzJ10sXG4gICAgICAgICAgICBzb2xpY2l0X2Fuc3dlcl9kZXRhaWxzOiBbJ3NvbGljaXRBbnN3ZXJEZXRhaWxzJ10sXG4gICAgICAgICAgICBzb2x1dGlvbjogWydpbnRlcmFjdGlvbicsICdzb2x1dGlvbiddLFxuICAgICAgICAgICAgd2lkZ2V0X2lkOiBbJ2ludGVyYWN0aW9uJywgJ2lkJ10sXG4gICAgICAgICAgICB3aWRnZXRfY3VzdG9taXphdGlvbl9hcmdzOiBbJ2ludGVyYWN0aW9uJywgJ2N1c3RvbWl6YXRpb25BcmdzJ10sXG4gICAgICAgICAgICB3cml0dGVuX3RyYW5zbGF0aW9uczogWyd3cml0dGVuVHJhbnNsYXRpb25zJ11cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIENPTlRFTlRfSURfRVhUUkFDVE9SUyA9IHtcbiAgICAgICAgICAgIGFuc3dlcl9ncm91cHM6IGZ1bmN0aW9uIChhbnN3ZXJHcm91cHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudElkcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgICBhbnN3ZXJHcm91cHMuZm9yRWFjaChmdW5jdGlvbiAoYW5zd2VyR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudElkcy5hZGQoYW5zd2VyR3JvdXAub3V0Y29tZS5mZWVkYmFjay5nZXRDb250ZW50SWQoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRJZHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVmYXVsdF9vdXRjb21lOiBmdW5jdGlvbiAoZGVmYXVsdE91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudElkcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdE91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudElkcy5hZGQoZGVmYXVsdE91dGNvbWUuZmVlZGJhY2suZ2V0Q29udGVudElkKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudElkcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoaW50czogZnVuY3Rpb24gKGhpbnRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRJZHMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICAgICAgaGludHMuZm9yRWFjaChmdW5jdGlvbiAoaGludCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50SWRzLmFkZChoaW50LmhpbnRDb250ZW50LmdldENvbnRlbnRJZCgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudElkcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzb2x1dGlvbjogZnVuY3Rpb24gKHNvbHV0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRJZHMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHNvbHV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRJZHMuYWRkKHNvbHV0aW9uLmV4cGxhbmF0aW9uLmdldENvbnRlbnRJZCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRJZHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfZ2V0RWxlbWVudHNJbkZpcnN0U2V0QnV0Tm90SW5TZWNvbmQgPSBmdW5jdGlvbiAoc2V0QSwgc2V0Qikge1xuICAgICAgICAgICAgdmFyIGRpZmZMaXN0ID0gQXJyYXkuZnJvbShzZXRBKS5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXNldEIuaGFzKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGlmZkxpc3Q7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGVOYW1lLCBzdGF0ZURhdGEsIHJlZnJlc2hHcmFwaCkge1xuICAgICAgICAgICAgX3N0YXRlcy5zZXRTdGF0ZShzdGF0ZU5hbWUsIGFuZ3VsYXIuY29weShzdGF0ZURhdGEpKTtcbiAgICAgICAgICAgIGlmIChyZWZyZXNoR3JhcGgpIHtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3JlZnJlc2hHcmFwaCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZ2V0U3RhdGVQcm9wZXJ0eU1lbWVudG8gPSBmdW5jdGlvbiAoc3RhdGVOYW1lLCBiYWNrZW5kTmFtZSkge1xuICAgICAgICAgICAgdmFyIGFjY2Vzc29yTGlzdCA9IFBST1BFUlRZX1JFRl9EQVRBW2JhY2tlbmROYW1lXTtcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eVJlZiA9IF9zdGF0ZXMuZ2V0U3RhdGUoc3RhdGVOYW1lKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzb3JMaXN0LmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVJlZiA9IHByb3BlcnR5UmVmW2tleV07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBhZGRpdGlvbmFsSW5mbyA9ICgnXFxuVW5kZWZpbmVkIHN0YXRlcyBlcnJvciBkZWJ1ZyBsb2dzOicgK1xuICAgICAgICAgICAgICAgICAgICAnXFxuUmVxdWVzdGVkIHN0YXRlIG5hbWU6ICcgKyBzdGF0ZU5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAnXFxuRXhwbG9yYXRpb24gSUQ6ICcgKyBDb250ZXh0U2VydmljZS5nZXRFeHBsb3JhdGlvbklkKCkgK1xuICAgICAgICAgICAgICAgICAgICAnXFxuQ2hhbmdlIGxpc3Q6ICcgKyBKU09OLnN0cmluZ2lmeShDaGFuZ2VMaXN0U2VydmljZS5nZXRDaGFuZ2VMaXN0KCkpICtcbiAgICAgICAgICAgICAgICAgICAgJ1xcbkFsbCBzdGF0ZXMgbmFtZXM6ICcgKyBfc3RhdGVzLmdldFN0YXRlTmFtZXMoKSk7XG4gICAgICAgICAgICAgICAgZS5tZXNzYWdlICs9IGFkZGl0aW9uYWxJbmZvO1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYW5ndWxhci5jb3B5KHByb3BlcnR5UmVmKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHNhdmVTdGF0ZVByb3BlcnR5ID0gZnVuY3Rpb24gKHN0YXRlTmFtZSwgYmFja2VuZE5hbWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSBnZXRTdGF0ZVByb3BlcnR5TWVtZW50byhzdGF0ZU5hbWUsIGJhY2tlbmROYW1lKTtcbiAgICAgICAgICAgIHZhciBuZXdCYWNrZW5kVmFsdWUgPSBhbmd1bGFyLmNvcHkobmV3VmFsdWUpO1xuICAgICAgICAgICAgdmFyIG9sZEJhY2tlbmRWYWx1ZSA9IGFuZ3VsYXIuY29weShvbGRWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoQkFDS0VORF9DT05WRVJTSU9OUy5oYXNPd25Qcm9wZXJ0eShiYWNrZW5kTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBuZXdCYWNrZW5kVmFsdWUgPSBjb252ZXJ0VG9CYWNrZW5kUmVwcmVzZW50YXRpb24obmV3VmFsdWUsIGJhY2tlbmROYW1lKTtcbiAgICAgICAgICAgICAgICBvbGRCYWNrZW5kVmFsdWUgPSBjb252ZXJ0VG9CYWNrZW5kUmVwcmVzZW50YXRpb24ob2xkVmFsdWUsIGJhY2tlbmROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYW5ndWxhci5lcXVhbHMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICAgIENoYW5nZUxpc3RTZXJ2aWNlLmVkaXRTdGF0ZVByb3BlcnR5KHN0YXRlTmFtZSwgYmFja2VuZE5hbWUsIG5ld0JhY2tlbmRWYWx1ZSwgb2xkQmFja2VuZFZhbHVlKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3U3RhdGVEYXRhID0gX3N0YXRlcy5nZXRTdGF0ZShzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIHZhciBhY2Nlc3Nvckxpc3QgPSBQUk9QRVJUWV9SRUZfREFUQVtiYWNrZW5kTmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKENPTlRFTlRfSURfRVhUUkFDVE9SUy5oYXNPd25Qcm9wZXJ0eShiYWNrZW5kTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZENvbnRlbnRJZHMgPSBDT05URU5UX0lEX0VYVFJBQ1RPUlNbYmFja2VuZE5hbWVdKG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0NvbnRlbnRJZHMgPSBDT05URU5UX0lEX0VYVFJBQ1RPUlNbYmFja2VuZE5hbWVdKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRJZHNUb0RlbGV0ZSA9IF9nZXRFbGVtZW50c0luRmlyc3RTZXRCdXROb3RJblNlY29uZChvbGRDb250ZW50SWRzLCBuZXdDb250ZW50SWRzKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRJZHNUb0FkZCA9IF9nZXRFbGVtZW50c0luRmlyc3RTZXRCdXROb3RJblNlY29uZChuZXdDb250ZW50SWRzLCBvbGRDb250ZW50SWRzKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudElkc1RvRGVsZXRlLmZvckVhY2goZnVuY3Rpb24gKGNvbnRlbnRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGVEYXRhLnJlY29yZGVkVm9pY2VvdmVycy5kZWxldGVDb250ZW50SWQoY29udGVudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlRGF0YS53cml0dGVuVHJhbnNsYXRpb25zLmRlbGV0ZUNvbnRlbnRJZChjb250ZW50SWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudElkc1RvQWRkLmZvckVhY2goZnVuY3Rpb24gKGNvbnRlbnRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGVEYXRhLnJlY29yZGVkVm9pY2VvdmVycy5hZGRDb250ZW50SWQoY29udGVudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlRGF0YS53cml0dGVuVHJhbnNsYXRpb25zLmFkZENvbnRlbnRJZChjb250ZW50SWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5UmVmID0gbmV3U3RhdGVEYXRhO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWNjZXNzb3JMaXN0Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVJlZiA9IHByb3BlcnR5UmVmW2FjY2Vzc29yTGlzdFtpXV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb3BlcnR5UmVmW2FjY2Vzc29yTGlzdFthY2Nlc3Nvckxpc3QubGVuZ3RoIC0gMV1dID0gYW5ndWxhci5jb3B5KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAvLyBXZSBkbyBub3QgcmVmcmVzaCB0aGUgc3RhdGUgZWRpdG9yIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBpbnRlcmFjdGlvblxuICAgICAgICAgICAgICAgIC8vIGlkIGFsb25lIGlzIHNhdmVkLCBiZWNhdXNlIHRoZSBjdXN0b21pemF0aW9uIGFyZ3MgZGljdCB3aWxsIGJlXG4gICAgICAgICAgICAgICAgLy8gdGVtcG9yYXJpbHkgaW52YWxpZC4gQSBjaGFuZ2UgaW4gaW50ZXJhY3Rpb24gaWQgd2lsbCBhbHdheXMgZW50YWlsXG4gICAgICAgICAgICAgICAgLy8gYSBjaGFuZ2UgaW4gdGhlIGN1c3RvbWl6YXRpb24gYXJncyBkaWN0IGFueXdheSwgc28gdGhlIGdyYXBoIHdpbGxcbiAgICAgICAgICAgICAgICAvLyBnZXQgcmVmcmVzaGVkIGFmdGVyIGJvdGggcHJvcGVydGllcyBoYXZlIGJlZW4gdXBkYXRlZC5cbiAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaEdyYXBoID0gKGJhY2tlbmROYW1lICE9PSAnd2lkZ2V0X2lkJyk7XG4gICAgICAgICAgICAgICAgX3NldFN0YXRlKHN0YXRlTmFtZSwgbmV3U3RhdGVEYXRhLCByZWZyZXNoR3JhcGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgY29udmVydFRvQmFja2VuZFJlcHJlc2VudGF0aW9uID0gZnVuY3Rpb24gKGZyb250ZW5kVmFsdWUsIGJhY2tlbmROYW1lKSB7XG4gICAgICAgICAgICB2YXIgY29udmVyc2lvbkZ1bmN0aW9uID0gQkFDS0VORF9DT05WRVJTSU9OU1tiYWNrZW5kTmFtZV07XG4gICAgICAgICAgICByZXR1cm4gY29udmVyc2lvbkZ1bmN0aW9uKGZyb250ZW5kVmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBUT0RPKHNsbCk6IEFkZCB1bml0IHRlc3RzIGZvciBhbGwgZ2V0L3NhdmUgbWV0aG9kcy5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChzdGF0ZXNCYWNrZW5kRGljdCkge1xuICAgICAgICAgICAgICAgIF9zdGF0ZXMgPSBTdGF0ZXNPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChzdGF0ZXNCYWNrZW5kRGljdCk7XG4gICAgICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgc29sdXRpb25WYWxpZGl0eVNlcnZpY2UuXG4gICAgICAgICAgICAgICAgU29sdXRpb25WYWxpZGl0eVNlcnZpY2UuaW5pdChfc3RhdGVzLmdldFN0YXRlTmFtZXMoKSk7XG4gICAgICAgICAgICAgICAgX3N0YXRlcy5nZXRTdGF0ZU5hbWVzKCkuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzb2x1dGlvbiA9IF9zdGF0ZXMuZ2V0U3RhdGUoc3RhdGVOYW1lKS5pbnRlcmFjdGlvbi5zb2x1dGlvbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvbHV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gKEFuc3dlckNsYXNzaWZpY2F0aW9uU2VydmljZS5nZXRNYXRjaGluZ0NsYXNzaWZpY2F0aW9uUmVzdWx0KHN0YXRlTmFtZSwgX3N0YXRlcy5nZXRTdGF0ZShzdGF0ZU5hbWUpLmludGVyYWN0aW9uLCBzb2x1dGlvbi5jb3JyZWN0QW5zd2VyLCAkaW5qZWN0b3IuZ2V0KEFuZ3VsYXJOYW1lU2VydmljZS5nZXROYW1lT2ZJbnRlcmFjdGlvblJ1bGVzU2VydmljZShfc3RhdGVzLmdldFN0YXRlKHN0YXRlTmFtZSkuaW50ZXJhY3Rpb24uaWQpKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvbHV0aW9uSXNWYWxpZCA9IHN0YXRlTmFtZSAhPT0gcmVzdWx0Lm91dGNvbWUuZGVzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIFNvbHV0aW9uVmFsaWRpdHlTZXJ2aWNlLnVwZGF0ZVZhbGlkaXR5KHN0YXRlTmFtZSwgc29sdXRpb25Jc1ZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFN0YXRlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmNvcHkoX3N0YXRlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0U3RhdGVOYW1lczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3RhdGVzLmdldFN0YXRlTmFtZXMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNTdGF0ZTogZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3RhdGVzLmhhc1N0YXRlKHN0YXRlTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0U3RhdGU6IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci5jb3B5KF9zdGF0ZXMuZ2V0U3RhdGUoc3RhdGVOYW1lKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0U3RhdGU6IGZ1bmN0aW9uIChzdGF0ZU5hbWUsIHN0YXRlRGF0YSkge1xuICAgICAgICAgICAgICAgIF9zZXRTdGF0ZShzdGF0ZU5hbWUsIHN0YXRlRGF0YSwgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNOZXdTdGF0ZU5hbWVWYWxpZDogZnVuY3Rpb24gKG5ld1N0YXRlTmFtZSwgc2hvd1dhcm5pbmdzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9zdGF0ZXMuaGFzU3RhdGUobmV3U3RhdGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd1dhcm5pbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmFkZFdhcm5pbmcoJ0Egc3RhdGUgd2l0aCB0aGlzIG5hbWUgYWxyZWFkeSBleGlzdHMuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKFZhbGlkYXRvcnNTZXJ2aWNlLmlzVmFsaWRTdGF0ZU5hbWUobmV3U3RhdGVOYW1lLCBzaG93V2FybmluZ3MpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRTdGF0ZUNvbnRlbnRNZW1lbnRvOiBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFN0YXRlUHJvcGVydHlNZW1lbnRvKHN0YXRlTmFtZSwgJ2NvbnRlbnQnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXZlU3RhdGVDb250ZW50OiBmdW5jdGlvbiAoc3RhdGVOYW1lLCBuZXdDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgc2F2ZVN0YXRlUHJvcGVydHkoc3RhdGVOYW1lLCAnY29udGVudCcsIG5ld0NvbnRlbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFN0YXRlUGFyYW1DaGFuZ2VzTWVtZW50bzogZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRTdGF0ZVByb3BlcnR5TWVtZW50byhzdGF0ZU5hbWUsICdwYXJhbV9jaGFuZ2VzJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F2ZVN0YXRlUGFyYW1DaGFuZ2VzOiBmdW5jdGlvbiAoc3RhdGVOYW1lLCBuZXdQYXJhbUNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICBzYXZlU3RhdGVQcm9wZXJ0eShzdGF0ZU5hbWUsICdwYXJhbV9jaGFuZ2VzJywgbmV3UGFyYW1DaGFuZ2VzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRJbnRlcmFjdGlvbklkTWVtZW50bzogZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRTdGF0ZVByb3BlcnR5TWVtZW50byhzdGF0ZU5hbWUsICd3aWRnZXRfaWQnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXZlSW50ZXJhY3Rpb25JZDogZnVuY3Rpb24gKHN0YXRlTmFtZSwgbmV3SW50ZXJhY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgIHNhdmVTdGF0ZVByb3BlcnR5KHN0YXRlTmFtZSwgJ3dpZGdldF9pZCcsIG5ld0ludGVyYWN0aW9uSWQpO1xuICAgICAgICAgICAgICAgIHN0YXRlSW50ZXJhY3Rpb25TYXZlZENhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEludGVyYWN0aW9uQ3VzdG9taXphdGlvbkFyZ3NNZW1lbnRvOiBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFN0YXRlUHJvcGVydHlNZW1lbnRvKHN0YXRlTmFtZSwgJ3dpZGdldF9jdXN0b21pemF0aW9uX2FyZ3MnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXZlSW50ZXJhY3Rpb25DdXN0b21pemF0aW9uQXJnczogZnVuY3Rpb24gKHN0YXRlTmFtZSwgbmV3Q3VzdG9taXphdGlvbkFyZ3MpIHtcbiAgICAgICAgICAgICAgICBzYXZlU3RhdGVQcm9wZXJ0eShzdGF0ZU5hbWUsICd3aWRnZXRfY3VzdG9taXphdGlvbl9hcmdzJywgbmV3Q3VzdG9taXphdGlvbkFyZ3MpO1xuICAgICAgICAgICAgICAgIHN0YXRlSW50ZXJhY3Rpb25TYXZlZENhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEludGVyYWN0aW9uQW5zd2VyR3JvdXBzTWVtZW50bzogZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRTdGF0ZVByb3BlcnR5TWVtZW50byhzdGF0ZU5hbWUsICdhbnN3ZXJfZ3JvdXBzJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F2ZUludGVyYWN0aW9uQW5zd2VyR3JvdXBzOiBmdW5jdGlvbiAoc3RhdGVOYW1lLCBuZXdBbnN3ZXJHcm91cHMpIHtcbiAgICAgICAgICAgICAgICBzYXZlU3RhdGVQcm9wZXJ0eShzdGF0ZU5hbWUsICdhbnN3ZXJfZ3JvdXBzJywgbmV3QW5zd2VyR3JvdXBzKTtcbiAgICAgICAgICAgICAgICBzdGF0ZUludGVyYWN0aW9uU2F2ZWRDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soc3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDb25maXJtZWRVbmNsYXNzaWZpZWRBbnN3ZXJzTWVtZW50bzogZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRTdGF0ZVByb3BlcnR5TWVtZW50byhzdGF0ZU5hbWUsICdjb25maXJtZWRfdW5jbGFzc2lmaWVkX2Fuc3dlcnMnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXZlQ29uZmlybWVkVW5jbGFzc2lmaWVkQW5zd2VyczogZnVuY3Rpb24gKHN0YXRlTmFtZSwgbmV3QW5zd2Vycykge1xuICAgICAgICAgICAgICAgIHNhdmVTdGF0ZVByb3BlcnR5KHN0YXRlTmFtZSwgJ2NvbmZpcm1lZF91bmNsYXNzaWZpZWRfYW5zd2VycycsIG5ld0Fuc3dlcnMpO1xuICAgICAgICAgICAgICAgIHN0YXRlSW50ZXJhY3Rpb25TYXZlZENhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEludGVyYWN0aW9uRGVmYXVsdE91dGNvbWVNZW1lbnRvOiBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFN0YXRlUHJvcGVydHlNZW1lbnRvKHN0YXRlTmFtZSwgJ2RlZmF1bHRfb3V0Y29tZScpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhdmVJbnRlcmFjdGlvbkRlZmF1bHRPdXRjb21lOiBmdW5jdGlvbiAoc3RhdGVOYW1lLCBuZXdEZWZhdWx0T3V0Y29tZSkge1xuICAgICAgICAgICAgICAgIHNhdmVTdGF0ZVByb3BlcnR5KHN0YXRlTmFtZSwgJ2RlZmF1bHRfb3V0Y29tZScsIG5ld0RlZmF1bHRPdXRjb21lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRIaW50c01lbWVudG86IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U3RhdGVQcm9wZXJ0eU1lbWVudG8oc3RhdGVOYW1lLCAnaGludHMnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXZlSGludHM6IGZ1bmN0aW9uIChzdGF0ZU5hbWUsIG5ld0hpbnRzKSB7XG4gICAgICAgICAgICAgICAgc2F2ZVN0YXRlUHJvcGVydHkoc3RhdGVOYW1lLCAnaGludHMnLCBuZXdIaW50cyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0U29sdXRpb25NZW1lbnRvOiBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFN0YXRlUHJvcGVydHlNZW1lbnRvKHN0YXRlTmFtZSwgJ3NvbHV0aW9uJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F2ZVNvbHV0aW9uOiBmdW5jdGlvbiAoc3RhdGVOYW1lLCBuZXdTb2x1dGlvbikge1xuICAgICAgICAgICAgICAgIHNhdmVTdGF0ZVByb3BlcnR5KHN0YXRlTmFtZSwgJ3NvbHV0aW9uJywgbmV3U29sdXRpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFJlY29yZGVkVm9pY2VvdmVyc01lbWVudG86IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U3RhdGVQcm9wZXJ0eU1lbWVudG8oc3RhdGVOYW1lLCAncmVjb3JkZWRfdm9pY2VvdmVycycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhdmVSZWNvcmRlZFZvaWNlb3ZlcnM6IGZ1bmN0aW9uIChzdGF0ZU5hbWUsIG5ld1JlY29yZGVkVm9pY2VvdmVycykge1xuICAgICAgICAgICAgICAgIHNhdmVTdGF0ZVByb3BlcnR5KHN0YXRlTmFtZSwgJ3JlY29yZGVkX3ZvaWNlb3ZlcnMnLCBuZXdSZWNvcmRlZFZvaWNlb3ZlcnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFNvbGljaXRBbnN3ZXJEZXRhaWxzTWVtZW50bzogZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRTdGF0ZVByb3BlcnR5TWVtZW50byhzdGF0ZU5hbWUsICdzb2xpY2l0X2Fuc3dlcl9kZXRhaWxzJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F2ZVNvbGljaXRBbnN3ZXJEZXRhaWxzOiBmdW5jdGlvbiAoc3RhdGVOYW1lLCBuZXdTb2xpY2l0QW5zd2VyRGV0YWlscykge1xuICAgICAgICAgICAgICAgIHNhdmVTdGF0ZVByb3BlcnR5KHN0YXRlTmFtZSwgJ3NvbGljaXRfYW5zd2VyX2RldGFpbHMnLCBuZXdTb2xpY2l0QW5zd2VyRGV0YWlscyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0V3JpdHRlblRyYW5zbGF0aW9uc01lbWVudG86IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U3RhdGVQcm9wZXJ0eU1lbWVudG8oc3RhdGVOYW1lLCAnd3JpdHRlbl90cmFuc2xhdGlvbnMnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXZlV3JpdHRlblRyYW5zbGF0aW9uczogZnVuY3Rpb24gKHN0YXRlTmFtZSwgbmV3V3JpdHRlblRyYW5zbGF0aW9ucykge1xuICAgICAgICAgICAgICAgIHNhdmVTdGF0ZVByb3BlcnR5KHN0YXRlTmFtZSwgJ3dyaXR0ZW5fdHJhbnNsYXRpb25zJywgbmV3V3JpdHRlblRyYW5zbGF0aW9ucyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNJbml0aWFsaXplZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3RhdGVzICE9PSBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZFN0YXRlOiBmdW5jdGlvbiAobmV3U3RhdGVOYW1lLCBzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZU5hbWUgPSAkZmlsdGVyKCdub3JtYWxpemVXaGl0ZXNwYWNlJykobmV3U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoIVZhbGlkYXRvcnNTZXJ2aWNlLmlzVmFsaWRTdGF0ZU5hbWUobmV3U3RhdGVOYW1lLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChfc3RhdGVzLmhhc1N0YXRlKG5ld1N0YXRlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgQWxlcnRzU2VydmljZS5hZGRXYXJuaW5nKCdBIHN0YXRlIHdpdGggdGhpcyBuYW1lIGFscmVhZHkgZXhpc3RzLicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuY2xlYXJXYXJuaW5ncygpO1xuICAgICAgICAgICAgICAgIF9zdGF0ZXMuYWRkU3RhdGUobmV3U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICBDaGFuZ2VMaXN0U2VydmljZS5hZGRTdGF0ZShuZXdTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIHN0YXRlQWRkZWRDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3JlZnJlc2hHcmFwaCcpO1xuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKG5ld1N0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlbGV0ZVN0YXRlOiBmdW5jdGlvbiAoZGVsZXRlU3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgQWxlcnRzU2VydmljZS5jbGVhcldhcm5pbmdzKCk7XG4gICAgICAgICAgICAgICAgdmFyIGluaXRTdGF0ZU5hbWUgPSBFeHBsb3JhdGlvbkluaXRTdGF0ZU5hbWVTZXJ2aWNlLmRpc3BsYXllZDtcbiAgICAgICAgICAgICAgICBpZiAoZGVsZXRlU3RhdGVOYW1lID09PSBpbml0U3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoJ1RoZSBpbml0aWFsIHN0YXRlIGNhbiBub3QgYmUgZGVsZXRlZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFfc3RhdGVzLmhhc1N0YXRlKGRlbGV0ZVN0YXRlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSAnTm8gc3RhdGUgd2l0aCBuYW1lICcgKyBkZWxldGVTdGF0ZU5hbWUgKyAnIGV4aXN0cy4nO1xuICAgICAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmFkZFdhcm5pbmcobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAkdWliTW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL3BhZ2VzL2V4cGxvcmF0aW9uLWVkaXRvci1wYWdlL2VkaXRvci10YWIvdGVtcGxhdGVzLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ21vZGFsLXRlbXBsYXRlcy9jb25maXJtLWRlbGV0ZS1zdGF0ZS1tb2RhbC50ZW1wbGF0ZS5odG1sJyksXG4gICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlU3RhdGVXYXJuaW5nVGV4dCA9ICgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGUgY2FyZCBcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVTdGF0ZU5hbWUgKyAnXCI/Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlYWxseURlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxlcnRzU2VydmljZS5jbGVhcldhcm5pbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3N0YXRlcy5kZWxldGVTdGF0ZShkZWxldGVTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBDaGFuZ2VMaXN0U2VydmljZS5kZWxldGVTdGF0ZShkZWxldGVTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoU3RhdGVFZGl0b3JTZXJ2aWNlLmdldEFjdGl2ZVN0YXRlTmFtZSgpID09PSBkZWxldGVTdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRlRWRpdG9yU2VydmljZS5zZXRBY3RpdmVTdGF0ZU5hbWUoRXhwbG9yYXRpb25Jbml0U3RhdGVOYW1lU2VydmljZS5zYXZlZE1lbWVudG8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlRGVsZXRlZENhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGVsZXRlU3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvZ3VpLycgKyBTdGF0ZUVkaXRvclNlcnZpY2UuZ2V0QWN0aXZlU3RhdGVOYW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3JlZnJlc2hHcmFwaCcpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGVuc3VyZXMgdGhhdCBpZiB0aGUgZGVsZXRpb24gY2hhbmdlcyBydWxlcyBpbiB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgICAgICAvLyBzdGF0ZSwgdGhleSBnZXQgdXBkYXRlZCBpbiB0aGUgdmlldy5cbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdyZWZyZXNoU3RhdGVFZGl0b3InKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW5hbWVTdGF0ZTogZnVuY3Rpb24gKG9sZFN0YXRlTmFtZSwgbmV3U3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhdGVOYW1lID0gJGZpbHRlcignbm9ybWFsaXplV2hpdGVzcGFjZScpKG5ld1N0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFWYWxpZGF0b3JzU2VydmljZS5pc1ZhbGlkU3RhdGVOYW1lKG5ld1N0YXRlTmFtZSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX3N0YXRlcy5oYXNTdGF0ZShuZXdTdGF0ZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuYWRkV2FybmluZygnQSBzdGF0ZSB3aXRoIHRoaXMgbmFtZSBhbHJlYWR5IGV4aXN0cy4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmNsZWFyV2FybmluZ3MoKTtcbiAgICAgICAgICAgICAgICBfc3RhdGVzLnJlbmFtZVN0YXRlKG9sZFN0YXRlTmFtZSwgbmV3U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICBTdGF0ZUVkaXRvclNlcnZpY2Uuc2V0QWN0aXZlU3RhdGVOYW1lKG5ld1N0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgLy8gVGhlICdyZW5hbWUgc3RhdGUnIGNvbW1hbmQgbXVzdCBjb21lIGJlZm9yZSB0aGUgJ2NoYW5nZVxuICAgICAgICAgICAgICAgIC8vIGluaXRfc3RhdGVfbmFtZScgY29tbWFuZCBpbiB0aGUgY2hhbmdlIGxpc3QsIG90aGVyd2lzZSB0aGUgYmFja2VuZFxuICAgICAgICAgICAgICAgIC8vIHdpbGwgcmFpc2UgYW4gZXJyb3IgYmVjYXVzZSB0aGUgbmV3IGluaXRpYWwgc3RhdGUgbmFtZSBkb2VzIG5vdFxuICAgICAgICAgICAgICAgIC8vIGV4aXN0LlxuICAgICAgICAgICAgICAgIENoYW5nZUxpc3RTZXJ2aWNlLnJlbmFtZVN0YXRlKG5ld1N0YXRlTmFtZSwgb2xkU3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICBTb2x1dGlvblZhbGlkaXR5U2VydmljZS5vblJlbmFtZVN0YXRlKG5ld1N0YXRlTmFtZSwgb2xkU3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICAvLyBBbWVuZCBpbml0U3RhdGVOYW1lIGFwcHJvcHJpYXRlbHksIGlmIG5lY2Vzc2FyeS4gTm90ZSB0aGF0IHRoaXNcbiAgICAgICAgICAgICAgICAvLyBtdXN0IGNvbWUgYWZ0ZXIgdGhlIHN0YXRlIHJlbmFtaW5nLCBvdGhlcndpc2Ugc2F2aW5nIHdpbGwgbGVhZCB0b1xuICAgICAgICAgICAgICAgIC8vIGEgY29tcGxhaW50IHRoYXQgdGhlIG5ldyBuYW1lIGlzIG5vdCBhIHZhbGlkIHN0YXRlIG5hbWUuXG4gICAgICAgICAgICAgICAgaWYgKEV4cGxvcmF0aW9uSW5pdFN0YXRlTmFtZVNlcnZpY2UuZGlzcGxheWVkID09PSBvbGRTdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgRXhwbG9yYXRpb25Jbml0U3RhdGVOYW1lU2VydmljZS5kaXNwbGF5ZWQgPSBuZXdTdGF0ZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgIEV4cGxvcmF0aW9uSW5pdFN0YXRlTmFtZVNlcnZpY2Uuc2F2ZURpc3BsYXllZFZhbHVlKG5ld1N0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRlUmVuYW1lZENhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhvbGRTdGF0ZU5hbWUsIG5ld1N0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdyZWZyZXNoR3JhcGgnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWdpc3Rlck9uU3RhdGVBZGRlZENhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFkZGVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVyT25TdGF0ZURlbGV0ZWRDYWxsYmFjazogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVEZWxldGVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVyT25TdGF0ZVJlbmFtZWRDYWxsYmFjazogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVSZW5hbWVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVyT25TdGF0ZUludGVyYWN0aW9uU2F2ZWRDYWxsYmFjazogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVJbnRlcmFjdGlvblNhdmVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIHRoZSBBbnN3ZXIgU3VibWl0IExlYXJuZXIgQWN0aW9uLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9FeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9IdG1sRXNjYXBlclNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnYW5zd2VyU3VibWl0QWN0aW9uJywgW1xuICAgICdFeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlJywgJ0h0bWxFc2NhcGVyU2VydmljZScsXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoRXhwbG9yYXRpb25IdG1sRm9ybWF0dGVyU2VydmljZSwgSHRtbEVzY2FwZXJTZXJ2aWNlLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHt9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvcGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2Uvc3RhdGlzdGljcy10YWIvaXNzdWVzLycgK1xuICAgICAgICAgICAgICAgICdhbnN3ZXItc3VibWl0LWFjdGlvbi5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckYXR0cnMnLCBmdW5jdGlvbiAoJGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgY3RybC5jdXJyZW50U3RhdGVOYW1lID0gJGF0dHJzLmN1cnJlbnRTdGF0ZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZGVzdFN0YXRlTmFtZSA9ICRhdHRycy5kZXN0U3RhdGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmFjdGlvbkluZGV4ID0gJGF0dHJzLmFjdGlvbkluZGV4O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnRpbWVTcGVudEluU3RhdGVTZWNzID0gJGF0dHJzLnRpbWVTcGVudEluU3RhdGVTZWNzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2N1c3RvbWl6YXRpb25BcmdzID0gSHRtbEVzY2FwZXJTZXJ2aWNlLmVzY2FwZWRKc29uVG9PYmooJGF0dHJzLmludGVyYWN0aW9uQ3VzdG9taXphdGlvbkFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2Fuc3dlciA9IEh0bWxFc2NhcGVyU2VydmljZS5lc2NhcGVkSnNvblRvT2JqKCRhdHRycy5hbnN3ZXIpO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmdldFNob3J0QW5zd2VySHRtbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBFeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlLmdldFNob3J0QW5zd2VySHRtbChfYW5zd2VyLCAkYXR0cnMuaW50ZXJhY3Rpb25JZCwgX2N1c3RvbWl6YXRpb25BcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIGZvciByZW5kZXJpbmcgbGVhcm5lciBhY3Rpb24gSFRNTCBzdHJpbmdzLlxuICpcbiAqIFRoZSBzZXJ2aWNlIHNob3VsZCBiZSB1c2VkIGluIHRoZSBmb2xsb3dpbmcgd2F5OlxuICpcbiAqIDEuIEFsbCBsZWFybmVyIGFjdGlvbnMgZm9yIHRoZSBwbGF5dGhyb3VnaCBzaG91bGQgYmUgcGFzc2VkIGFzIGFuIGFyZyB0byB0aGVcbiAqICBmdW5jdGlvbiB0aGF0IHNwbGl0cyB0aGVtIHVwIGludG8gRGlzcGxheSBibG9ja3MuIERpc3BsYXkgYmxvY2tzIGFyZSB0aGVcbiAqICBibG9ja3MgaW4gd2hpY2ggbGVhcm5lciBhY3Rpb25zIHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZWlyIG1vZGFsLlxuICogMi4gTm93LCB0byByZW5kZXIgb25lIERpc3BsYXkgYmxvY2sncyBIVE1MIGVxdWl2YWxlbnQsIHdlIHdvdWxkIHBhc3MgaXQgdG9cbiAqICB0aGUgcmVuZGVyRGlzcGxheUJsb2NrSFRNTCgpIGZ1bmN0aW9uLiBUaGlzIGZ1bmN0aW9uIGNvbnZlcnRzIGVhY2ggbGVhcm5lclxuICogIGFjdGlvbiBpbiB0aGUgYmxvY2sgdG8gaXRzIGNvcnJlc3BvbmRpbmcgSFRNTCBzdHJpbmcgYW5kIGpvaW5zIGFsbCBzdWNoXG4gKiBsZWFybmVyIGFjdGlvbnMgYW5kIHRoZW4gcmV0dXJucyBhIGdpYW50IEhUTUwgc3RyaW5nLlxuICovXG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1lZGl0b3ItcGFnZS9zZXJ2aWNlcy9leHBsb3JhdGlvbi1zdGF0ZXMuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2Uvc3RhdGlzdGljcy10YWIvaXNzdWVzLycgK1xuICAgICdhbnN3ZXItc3VibWl0LWFjdGlvbi5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0V4cGxvcmF0aW9uSHRtbEZvcm1hdHRlclNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0xlYXJuZXJBY3Rpb25SZW5kZXJTZXJ2aWNlJywgW1xuICAgICckc2NlJywgJ0V4cGxvcmF0aW9uU3RhdGVzU2VydmljZScsXG4gICAgJ0h0bWxFc2NhcGVyU2VydmljZScsICdBQ1RJT05fVFlQRV9BTlNXRVJfU1VCTUlUJyxcbiAgICAnQUNUSU9OX1RZUEVfRVhQTE9SQVRJT05fUVVJVCcsICdBQ1RJT05fVFlQRV9FWFBMT1JBVElPTl9TVEFSVCcsXG4gICAgZnVuY3Rpb24gKCRzY2UsIEV4cGxvcmF0aW9uU3RhdGVzU2VydmljZSwgSHRtbEVzY2FwZXJTZXJ2aWNlLCBBQ1RJT05fVFlQRV9BTlNXRVJfU1VCTUlULCBBQ1RJT05fVFlQRV9FWFBMT1JBVElPTl9RVUlULCBBQ1RJT05fVFlQRV9FWFBMT1JBVElPTl9TVEFSVCkge1xuICAgICAgICB2YXIgcmVuZGVyRXhwbG9yYXRpb25TdGFydEFjdGlvbkhUTUwgPSBmdW5jdGlvbiAoc3RhdGVOYW1lLCBhY3Rpb25JbmRleCkge1xuICAgICAgICAgICAgdmFyIHN0YXRlbWVudCA9IGFjdGlvbkluZGV4ICsgJy4gU3RhcnRlZCBleHBsb3JhdGlvbiBhdCBjYXJkIFwiJyArIHN0YXRlTmFtZSArICdcIi4nO1xuICAgICAgICAgICAgcmV0dXJuICgkKCc8c3Bhbj4nKS50ZXh0KHN0YXRlbWVudCkpLmh0bWwoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlbmRlckV4cGxvcmF0aW9uUXVpdEFjdGlvbkhUTUwgPSBmdW5jdGlvbiAoc3RhdGVOYW1lLCB0aW1lU3BlbnRJblN0YXRlU2VjcywgYWN0aW9uSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZW1lbnQgPSBhY3Rpb25JbmRleCArICcuIExlZnQgdGhlIGV4cGxvcmF0aW9uIGFmdGVyIHNwZW5kaW5nIGEgdG90YWwgb2YgJyArXG4gICAgICAgICAgICAgICAgdGltZVNwZW50SW5TdGF0ZVNlY3MgKyAnIHNlY29uZHMgb24gY2FyZCBcIicgKyBzdGF0ZU5hbWUgKyAnXCIuJztcbiAgICAgICAgICAgIHJldHVybiAoJCgnPHNwYW4+JykudGV4dChzdGF0ZW1lbnQpKS5odG1sKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZW5kZXJDb250aW51ZUJ1dHRvblN1Ym1pdEFjdGlvbkhUTUwgPSBmdW5jdGlvbiAoc3RhdGVOYW1lLCB0aW1lU3BlbnRJblN0YXRlU2VjcywgYWN0aW9uSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZW1lbnQgPSBhY3Rpb25JbmRleCArICcuIFByZXNzZWQgXCJDb250aW51ZVwiIHRvIG1vdmUgdG8gY2FyZCBcIicgKyBzdGF0ZU5hbWUgK1xuICAgICAgICAgICAgICAgICdcIiBhZnRlciAnICsgdGltZVNwZW50SW5TdGF0ZVNlY3MgKyAnIHNlY29uZHMuJztcbiAgICAgICAgICAgIHJldHVybiAoJCgnPHNwYW4+JykudGV4dChzdGF0ZW1lbnQpKS5odG1sKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW5kZXJzIHRoZSBjb3JyZWN0IEhUTUwgZm9yIEFuc3dlclN1Ym1pdCBhY3Rpb24gYWZ0ZXIgY2hlY2tpbmcgZm9yIGFcbiAgICAgICAgICogY2hhbmdlIGluIHN0YXRlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYW5zd2VyLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGVzdFN0YXRlTmFtZS5cbiAgICAgICAgICogQHBhcmFtIHtpbnR9IHRpbWVTcGVudEluU3RhdGVTZWNzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY3VycmVudFN0YXRlTmFtZS5cbiAgICAgICAgICogQHBhcmFtIHtpbnR9IGFjdGlvbkluZGV4LlxuICAgICAgICAgKiBAcGFyYW0ge0ludGVyYWN0aW9ufSBpbnRlcmFjdGlvbi5cbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHZhciByZW5kZXJBbnN3ZXJTdWJtaXRBY3Rpb25IVE1MID0gZnVuY3Rpb24gKGFuc3dlciwgZGVzdFN0YXRlTmFtZSwgdGltZVNwZW50SW5TdGF0ZVNlY3MsIGN1cnJlbnRTdGF0ZU5hbWUsIGFjdGlvbkluZGV4LCBpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgdmFyIGVsID0gJCgnPGFuc3dlci1zdWJtaXQtYWN0aW9uPicpO1xuICAgICAgICAgICAgZWwuYXR0cignYW5zd2VyJywgSHRtbEVzY2FwZXJTZXJ2aWNlLm9ialRvRXNjYXBlZEpzb24oYW5zd2VyKSk7XG4gICAgICAgICAgICBlbC5hdHRyKCdkZXN0LXN0YXRlLW5hbWUnLCBkZXN0U3RhdGVOYW1lKTtcbiAgICAgICAgICAgIGVsLmF0dHIoJ3RpbWUtc3BlbnQtaW4tc3RhdGUtc2VjcycsIHRpbWVTcGVudEluU3RhdGVTZWNzKTtcbiAgICAgICAgICAgIGVsLmF0dHIoJ2N1cnJlbnQtc3RhdGUtbmFtZScsIGN1cnJlbnRTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgZWwuYXR0cignYWN0aW9uLWluZGV4JywgYWN0aW9uSW5kZXgpO1xuICAgICAgICAgICAgZWwuYXR0cignaW50ZXJhY3Rpb24taWQnLCBpbnRlcmFjdGlvbi5pZCk7XG4gICAgICAgICAgICBlbC5hdHRyKCdpbnRlcmFjdGlvbi1jdXN0b21pemF0aW9uLWFyZ3MnLCBIdG1sRXNjYXBlclNlcnZpY2Uub2JqVG9Fc2NhcGVkSnNvbihpbnRlcmFjdGlvbi5jdXN0b21pemF0aW9uQXJncykpO1xuICAgICAgICAgICAgcmV0dXJuICgkKCc8c3Bhbj4nKS5hcHBlbmQoZWwpKS5odG1sKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW5kZXJzIHRoZSBjb3JyZWN0IEhUTUwgZm9yIHRoZSB0YWJsZSBkaXNwbGF5IGZvciBNdWx0aXBsZUluY29ycmVjdFxuICAgICAgICAgKiBpc3N1ZS5cbiAgICAgICAgICogQHBhcmFtIHtMZWFybmVyQWN0aW9uW119IGZpbmFsQmxvY2suXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB2YXIgcmVuZGVyTGVhcm5lckFjdGlvbnNUYWJsZUZvck11bHRpcGxlSW5jb3JyZWN0SXNzdWUgPSBmdW5jdGlvbiAoZmluYWxCbG9jaykge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZmluYWxCbG9jay5sZW5ndGggLSAxO1xuICAgICAgICAgICAgdmFyIHN0YXRlTmFtZSA9IGZpbmFsQmxvY2tbaW5kZXhdLmFjdGlvbkN1c3RvbWl6YXRpb25BcmdzLnN0YXRlX25hbWUudmFsdWU7XG4gICAgICAgICAgICB2YXIgdGFibGVIVE1MID0gJzx0YWJsZSBjbGFzcz1cIm9wcGlhLWlzc3Vlcy1sZWFybmVyLWFjdGlvbi10YWJsZVwiPjx0cj48dGg+QW5zd2VyPC90aD4nICtcbiAgICAgICAgICAgICAgICAnPHRoPkZlZWRiYWNrPC90aD48L3RyPic7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluZGV4OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZmluYWxCbG9ja1tpXS5hY3Rpb25UeXBlICE9PSBBQ1RJT05fVFlQRV9BTlNXRVJfU1VCTUlUKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYW5zd2VyID0gZmluYWxCbG9ja1tpXS5hY3Rpb25DdXN0b21pemF0aW9uQXJncy5zdWJtaXR0ZWRfYW5zd2VyLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBmZWVkYmFjayA9IGZpbmFsQmxvY2tbaV0uYWN0aW9uQ3VzdG9taXphdGlvbkFyZ3MuZmVlZGJhY2sudmFsdWUuX2h0bWw7XG4gICAgICAgICAgICAgICAgZmVlZGJhY2sgPSBmZWVkYmFjay5yZXBsYWNlKCd7e2Fuc3dlcn19JywgYW5zd2VyKTtcbiAgICAgICAgICAgICAgICB0YWJsZUhUTUwgKz1cbiAgICAgICAgICAgICAgICAgICAgJzx0cj48dGQ+JyArIGFuc3dlciArICc8L3RkPjx0ZD4nICsgZmVlZGJhY2sgKyAnPC90ZD48L3RyPic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YWJsZUhUTUwgKz0gJzwvdGFibGU+JztcbiAgICAgICAgICAgIHJldHVybiB0YWJsZUhUTUw7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW5kZXJzIHRoZSBjb3JyZWN0IEhUTUwgZm9yIHRoZSBsZWFybmVyIGFjdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtMZWFybmVyQWN0aW9ufSBsZWFybmVyQWN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge2ludH0gYWN0aW9uSW5kZXguXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB2YXIgcmVuZGVyTGVhcm5lckFjdGlvbkhUTUwgPSBmdW5jdGlvbiAobGVhcm5lckFjdGlvbiwgYWN0aW9uSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBhY3Rpb25UeXBlID0gbGVhcm5lckFjdGlvbi5hY3Rpb25UeXBlO1xuICAgICAgICAgICAgdmFyIGN1c3RBcmdzID0gbGVhcm5lckFjdGlvbi5hY3Rpb25DdXN0b21pemF0aW9uQXJncztcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IEV4cGxvcmF0aW9uU3RhdGVzU2VydmljZS5nZXRTdGF0ZShjdXN0QXJncy5zdGF0ZV9uYW1lLnZhbHVlKS5pbnRlcmFjdGlvbjtcbiAgICAgICAgICAgIGlmIChhY3Rpb25UeXBlID09PSBBQ1RJT05fVFlQRV9FWFBMT1JBVElPTl9TVEFSVCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJFeHBsb3JhdGlvblN0YXJ0QWN0aW9uSFRNTChjdXN0QXJncy5zdGF0ZV9uYW1lLnZhbHVlLCBhY3Rpb25JbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY3Rpb25UeXBlID09PSBBQ1RJT05fVFlQRV9FWFBMT1JBVElPTl9RVUlUKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlckV4cGxvcmF0aW9uUXVpdEFjdGlvbkhUTUwoY3VzdEFyZ3Muc3RhdGVfbmFtZS52YWx1ZSwgY3VzdEFyZ3MudGltZV9zcGVudF9pbl9zdGF0ZV9pbl9tc2Vjcy52YWx1ZSwgYWN0aW9uSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWN0aW9uVHlwZSA9PT0gQUNUSU9OX1RZUEVfQU5TV0VSX1NVQk1JVCkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbklkID0gY3VzdEFyZ3MuaW50ZXJhY3Rpb25faWQudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGludGVyYWN0aW9uSWQgPT09ICdDb250aW51ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlckNvbnRpbnVlQnV0dG9uU3VibWl0QWN0aW9uSFRNTChjdXN0QXJncy5kZXN0X3N0YXRlX25hbWUudmFsdWUsIGN1c3RBcmdzLnRpbWVfc3BlbnRfc3RhdGVfaW5fbXNlY3MudmFsdWUsIGFjdGlvbkluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJBbnN3ZXJTdWJtaXRBY3Rpb25IVE1MKGN1c3RBcmdzLnN1Ym1pdHRlZF9hbnN3ZXIudmFsdWUsIGN1c3RBcmdzLmRlc3Rfc3RhdGVfbmFtZS52YWx1ZSwgY3VzdEFyZ3MudGltZV9zcGVudF9zdGF0ZV9pbl9tc2Vjcy52YWx1ZSwgY3VzdEFyZ3Muc3RhdGVfbmFtZS52YWx1ZSwgYWN0aW9uSW5kZXgsIGludGVyYWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgYmxvY2sgbGVuZ3RoIGlzIGxlc3MgdGhhbiBhbiBleHBsaWNpdCBtYXhpbXVtIHZhbHVlLlxuICAgICAgICAgKiBUaGUgYmxvY2sgaXMgbGltaXRpZWQgdG8gYSBtYXhpbXVtIG51bWJlciBvZiBsZWFybmVyIGFjdGlvbnMgc28gdGhhdCB0aGVcbiAgICAgICAgICogZGlzcGxheSBtb2RhbCBpcyBjbGVhbmVyLiBXaGVuIHRoaXMgYm91bmQgaXMgZXhjZWVkZWQsIGFjdGlvbnMgYXJlIGFkZGVkXG4gICAgICAgICAqIHRvIHRoZSBuZXh0IGJsb2NrIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZCBieSBhbiAnZXh0ZW5kJyBidXR0b24uXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgd2l0aGluQmxvY2tVcHBlckJvdW5kID0gZnVuY3Rpb24gKGJsb2NrTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gYmxvY2tMZW5ndGggPCA0O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogSGVscGVyIG9iamVjdCB0byBtYWludGFpbiB0aGUgc3RhdHVzIG9mIGRpZmZlcmVudCBkaXNwbGF5IGJsb2NrcyB3aGlsZVxuICAgICAgICAgKiBzcGxpdHRpbmcgdXAgbGVhcm5lciBhY3Rpb25zLiBUaGlzIG9iamVjdCB3aWxsIGJlIHVwZGF0ZWQgYXMgbGVhcm5lclxuICAgICAgICAgKiBhY3Rpb25zIGFyZSBpbnNlcnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBncm91cGVkRGlzcGxheUJsb2NrcyA9IHtcbiAgICAgICAgICAgIGRpc3BsYXlCbG9ja3M6IG51bGwsXG4gICAgICAgICAgICBsb2NhbEJsb2NrOiBudWxsLFxuICAgICAgICAgICAgbGF0ZXN0U3RhdGVOYW1lOiBudWxsLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbnNlcnRzIG5ldyBsZWFybmVyIGFjdGlvbiBpbnRvIGV4aXN0aW5nIGJsb2NrIG9yIGNyZWF0ZXMgYSBuZXcgYmxvY2tcbiAgICAgICAgICAgICAqIGNvcnJlY3RseSwgZm9sbG93aW5nIGEgY2hhbmdlIGluIHN0YXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBoYW5kbGVDaGFuZ2VJblN0YXRlOiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXRlc3RTdGF0ZU5hbWUgPSBhY3Rpb24uYWN0aW9uQ3VzdG9taXphdGlvbkFyZ3Muc3RhdGVfbmFtZS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAod2l0aGluQmxvY2tVcHBlckJvdW5kKHRoaXMubG9jYWxCbG9jay5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBhY3Rpb24gdG8gYmxvY2suXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9jYWxCbG9jay51bnNoaWZ0KGFjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUHVzaCBjdXJyZW50IGJsb2NrIHRvIGxpc3Qgb2YgYmxvY2tzIGFuZCBhY3Rpb24gaW50byBuZXcgYmxvY2suXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5QmxvY2tzLnB1c2godGhpcy5sb2NhbEJsb2NrKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsQmxvY2sgPSBbYWN0aW9uXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYW5kbGVTYW1lU3RhdGU6IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsQmxvY2sudW5zaGlmdChhY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBIVE1MIGZvciB0aGUgZmluYWwgZGlzcGxheSBibG9jayBpbiBhIE11bHRpcGxlSW5jb3JyZWN0XG4gICAgICAgICAgICAgKiBpc3N1ZS4gVGhpcyBhY2NvdW50cyBmb3IgdGhlIHRhYmxlIHRvIGJlIGRpc3BsYXllZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7TGVhcm5lckFjdGlvbltdfSBibG9jay5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7aW50fSBhY3Rpb25TdGFydEluZGV4LlxuICAgICAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmVuZGVyRmluYWxEaXNwbGF5QmxvY2tGb3JNSVNJc3N1ZUhUTUw6IGZ1bmN0aW9uIChibG9jaywgYWN0aW9uU3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGJsb2NrLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlTmFtZSA9IGJsb2NrW2luZGV4XS5hY3Rpb25DdXN0b21pemF0aW9uQXJncy5zdGF0ZV9uYW1lLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBodG1sU3RyaW5nID0gJyc7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGJsb2NrW2ldLmFjdGlvblR5cGUgIT09IEFDVElPTl9UWVBFX0FOU1dFUl9TVUJNSVQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBodG1sU3RyaW5nICs9IHJlbmRlckxlYXJuZXJBY3Rpb25IVE1MKGJsb2NrW2ldLCBhY3Rpb25TdGFydEluZGV4ICsgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGh0bWxTdHJpbmcgKz1cbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwib3BwaWEtaXNzdWVzLWxlYXJuZXItYWN0aW9uXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAoYWN0aW9uU3RhcnRJbmRleCArIGkpLnRvU3RyaW5nKCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJy4gU3VibWl0dGVkIHRoZSBmb2xsb3dpbmcgYW5zd2VycyBpbiBjYXJkIFwiJyArIHN0YXRlTmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXCI8L3NwYW4+JztcbiAgICAgICAgICAgICAgICBodG1sU3RyaW5nICs9IHJlbmRlckxlYXJuZXJBY3Rpb25zVGFibGVGb3JNdWx0aXBsZUluY29ycmVjdElzc3VlKGJsb2NrKTtcbiAgICAgICAgICAgICAgICBodG1sU3RyaW5nICs9IHJlbmRlckxlYXJuZXJBY3Rpb25IVE1MKGJsb2NrW2luZGV4XSwgYWN0aW9uU3RhcnRJbmRleCArIGkgKyAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHNjZS50cnVzdEFzSHRtbChodG1sU3RyaW5nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW5kZXJMZWFybmVyQWN0aW9uOiBmdW5jdGlvbiAobGVhcm5lckFjdGlvbiwgYmxvY2tJbmRleCwgYWN0aW9uSW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyTGVhcm5lckFjdGlvbkhUTUwobGVhcm5lckFjdGlvbiwgYmxvY2tJbmRleCArIGFjdGlvbkluZGV4KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW5kZXJEaXNwbGF5QmxvY2tIVE1MOiBmdW5jdGlvbiAoYmxvY2ssIGFjdGlvblN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaHRtbFN0cmluZyA9ICcnO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbFN0cmluZyArPSByZW5kZXJMZWFybmVyQWN0aW9uSFRNTChibG9ja1tpXSwgYWN0aW9uU3RhcnRJbmRleCArIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJHNjZS50cnVzdEFzSHRtbChodG1sU3RyaW5nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNwbGl0cyB1cCB0aGUgZW50aXJlIHNldCBvZiBsZWFybmVyIGFjdGlvbnMgaW50byBjb3JyZWN0IGRpc3BsYXkgYmxvY2tzXG4gICAgICAgICAgICAgKiB0byBiZSBkaXNwbGF5ZWQgaW4gc2VxdWVuY2UgaW4gdGhlIHBsYXl0aHJvdWdocyBtb2RhbC5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7TGVhcm5lckFjdGlvbnNbXX0gbGVhcm5lckFjdGlvbnMuXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7TGVhcm5lckFjdGlvbnNbXVtdfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXREaXNwbGF5QmxvY2tzOiBmdW5jdGlvbiAobGVhcm5lckFjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdEluZGV4ID0gbGVhcm5lckFjdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBncm91cGVkRGlzcGxheUJsb2Nrcy5kaXNwbGF5QmxvY2tzID0gW107XG4gICAgICAgICAgICAgICAgZ3JvdXBlZERpc3BsYXlCbG9ja3MubG9jYWxCbG9jayA9IFtsZWFybmVyQWN0aW9uc1tsYXN0SW5kZXhdXTtcbiAgICAgICAgICAgICAgICBncm91cGVkRGlzcGxheUJsb2Nrcy5sYXRlc3RTdGF0ZU5hbWUgPVxuICAgICAgICAgICAgICAgICAgICBsZWFybmVyQWN0aW9uc1tsYXN0SW5kZXhdLmFjdGlvbkN1c3RvbWl6YXRpb25BcmdzLnN0YXRlX25hbWUudmFsdWU7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGxhc3RJbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBsZWFybmVyQWN0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRTdGF0ZU5hbWUgPSBhY3Rpb24uYWN0aW9uQ3VzdG9taXphdGlvbkFyZ3Muc3RhdGVfbmFtZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZU5hbWUgIT09IGdyb3VwZWREaXNwbGF5QmxvY2tzLmxhdGVzdFN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBlZERpc3BsYXlCbG9ja3MuaGFuZGxlQ2hhbmdlSW5TdGF0ZShhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBlZERpc3BsYXlCbG9ja3MuaGFuZGxlU2FtZVN0YXRlKGFjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBsb2NhbCBibG9jayB3aXRoIGFjdGlvbnMgYXQgdGhlIGVuZCwgcHVzaCBpdC5cbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBlZERpc3BsYXlCbG9ja3MubG9jYWxCbG9jaykge1xuICAgICAgICAgICAgICAgICAgICBncm91cGVkRGlzcGxheUJsb2Nrcy5kaXNwbGF5QmxvY2tzLnB1c2goZ3JvdXBlZERpc3BsYXlCbG9ja3MubG9jYWxCbG9jayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBncm91cGVkRGlzcGxheUJsb2Nrcy5kaXNwbGF5QmxvY2tzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgdG8gYmUgdXNlZCBpbiB0aGUgbGVhcm5lciB2aWV3LlxuICovXG4vLyBUT0RPKCM3MDkyKTogRGVsZXRlIHRoaXMgZmlsZSBvbmNlIG1pZ3JhdGlvbiBpcyBjb21wbGV0ZSBhbmQgdGhlc2UgQW5ndWxhckpTXG4vLyBlcXVpdmFsZW50cyBvZiB0aGUgQW5ndWxhciBjb25zdGFudHMgYXJlIG5vIGxvbmdlciBuZWVkZWQuXG52YXIgZXhwbG9yYXRpb25fcGxheWVyX3BhZ2VfY29uc3RhbnRzXzEgPSByZXF1aXJlKFwicGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UuY29uc3RhbnRzXCIpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0NPTlRFTlRfRk9DVVNfTEFCRUxfUFJFRklYJywgZXhwbG9yYXRpb25fcGxheWVyX3BhZ2VfY29uc3RhbnRzXzEuRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuQ09OVEVOVF9GT0NVU19MQUJFTF9QUkVGSVgpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1RXT19DQVJEX1RIUkVTSE9MRF9QWCcsIGV4cGxvcmF0aW9uX3BsYXllcl9wYWdlX2NvbnN0YW50c18xLkV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLlRXT19DQVJEX1RIUkVTSE9MRF9QWCk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnQ09OVElOVUVfQlVUVE9OX0ZPQ1VTX0xBQkVMJywgZXhwbG9yYXRpb25fcGxheWVyX3BhZ2VfY29uc3RhbnRzXzEuRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuQ09OVElOVUVfQlVUVE9OX0ZPQ1VTX0xBQkVMKTtcbi8qIENhbGxlZCB3aGVuIGEgbmV3IGF1ZGlvLWVxdWlwcGFibGUgY29tcG9uZW50IGlzIGxvYWRlZCBhbmQgZGlzcGxheWVkXG4gICB0byB0aGUgdXNlciwgYWxsb3dpbmcgZm9yIHRoZSBhdXRvbWF0aWMgcGxheWluZyBvZiBhdWRpbyBpZiBuZWNlc3NhcnkuICovXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnRVZFTlRfQVVUT1BMQVlfQVVESU8nLCBleHBsb3JhdGlvbl9wbGF5ZXJfcGFnZV9jb25zdGFudHNfMS5FeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5FVkVOVF9BVVRPUExBWV9BVURJTyk7XG4vLyBUaGUgZW5mb3JjZWQgd2FpdGluZyBwZXJpb2QgYmVmb3JlIHRoZSBmaXJzdCBoaW50IHJlcXVlc3QuXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnV0FJVF9GT1JfRklSU1RfSElOVF9NU0VDJywgZXhwbG9yYXRpb25fcGxheWVyX3BhZ2VfY29uc3RhbnRzXzEuRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuV0FJVF9GT1JfRklSU1RfSElOVF9NU0VDKTtcbi8vIFRoZSBlbmZvcmNlZCB3YWl0aW5nIHBlcmlvZCBiZWZvcmUgZWFjaCBvZiB0aGUgc3Vic2VxdWVudCBoaW50IHJlcXVlc3RzLlxuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1dBSVRfRk9SX1NVQlNFUVVFTlRfSElOVFNfTVNFQycsIGV4cGxvcmF0aW9uX3BsYXllcl9wYWdlX2NvbnN0YW50c18xLkV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLldBSVRfRk9SX1NVQlNFUVVFTlRfSElOVFNfTVNFQyk7XG4vLyBUaGUgdGltZSBkZWxheSBiZXR3ZWVuIHRoZSBsZWFybmVyIGNsaWNraW5nIHRoZSBoaW50IGJ1dHRvblxuLy8gYW5kIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBoaW50LlxuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0RFTEFZX0ZPUl9ISU5UX0ZFRURCQUNLX01TRUMnLCBleHBsb3JhdGlvbl9wbGF5ZXJfcGFnZV9jb25zdGFudHNfMS5FeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5ERUxBWV9GT1JfSElOVF9GRUVEQkFDS19NU0VDKTtcbi8vIEFycmF5IG9mIGkxOG4gSURzIGZvciB0aGUgcG9zc2libGUgaGludCByZXF1ZXN0IHN0cmluZ3MuXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnSElOVF9SRVFVRVNUX1NUUklOR19JMThOX0lEUycsIGV4cGxvcmF0aW9uX3BsYXllcl9wYWdlX2NvbnN0YW50c18xLkV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLkhJTlRfUkVRVUVTVF9TVFJJTkdfSTE4Tl9JRFMpO1xuLyogVGhpcyBzaG91bGQgbWF0Y2ggdGhlIENTUyBjbGFzcyBkZWZpbmVkIGluIHRoZSB0dXRvciBjYXJkIGRpcmVjdGl2ZS4gKi9cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdBVURJT19ISUdITElHSFRfQ1NTX0NMQVNTJywgZXhwbG9yYXRpb25fcGxheWVyX3BhZ2VfY29uc3RhbnRzXzEuRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuQVVESU9fSElHSExJR0hUX0NTU19DTEFTUyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnRkxBR19FWFBMT1JBVElPTl9VUkxfVEVNUExBVEUnLCBleHBsb3JhdGlvbl9wbGF5ZXJfcGFnZV9jb25zdGFudHNfMS5FeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5GTEFHX0VYUExPUkFUSU9OX1VSTF9URU1QTEFURSk7XG4vLyBUT0RPKGJoZW5uaW5nKTogRmluZCBhIGJldHRlciBwbGFjZSBmb3IgdGhlc2UgY29uc3RhbnRzLlxuLy8gTk9URSBUTyBERVZFTE9QRVJTOiBUaGVzZSBjb25zdGFudHMgbXVzdCBiZSB0aGUgc2FtZSAoaW4gbmFtZSBhbmQgdmFsdWUpIGFzXG4vLyB0aGUgY29ycmVzcG9uZGluZyBjbGFzc2lmaWNhdGlvbiBjb25zdGFudHMgZGVmaW5lZCBpbiBjb3JlLmRvbWFpbi5leHBfZG9tYWluLlxuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0VYUExJQ0lUX0NMQVNTSUZJQ0FUSU9OJywgZXhwbG9yYXRpb25fcGxheWVyX3BhZ2VfY29uc3RhbnRzXzEuRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuRVhQTElDSVRfQ0xBU1NJRklDQVRJT04pO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1RSQUlOSU5HX0RBVEFfQ0xBU1NJRklDQVRJT04nLCBleHBsb3JhdGlvbl9wbGF5ZXJfcGFnZV9jb25zdGFudHNfMS5FeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5UUkFJTklOR19EQVRBX0NMQVNTSUZJQ0FUSU9OKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdTVEFUSVNUSUNBTF9DTEFTU0lGSUNBVElPTicsIGV4cGxvcmF0aW9uX3BsYXllcl9wYWdlX2NvbnN0YW50c18xLkV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLlNUQVRJU1RJQ0FMX0NMQVNTSUZJQ0FUSU9OKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdERUZBVUxUX09VVENPTUVfQ0xBU1NJRklDQVRJT04nLCBleHBsb3JhdGlvbl9wbGF5ZXJfcGFnZV9jb25zdGFudHNfMS5FeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5ERUZBVUxUX09VVENPTUVfQ0xBU1NJRklDQVRJT04pO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0VYUExPUkFUSU9OX01PREUnLCBleHBsb3JhdGlvbl9wbGF5ZXJfcGFnZV9jb25zdGFudHNfMS5FeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5FWFBMT1JBVElPTl9NT0RFKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdTVEFUU19FVkVOVF9UWVBFUycsIGV4cGxvcmF0aW9uX3BsYXllcl9wYWdlX2NvbnN0YW50c18xLkV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLlNUQVRTX0VWRU5UX1RZUEVTKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdTVEFUU19SRVBPUlRJTkdfVVJMUycsIGV4cGxvcmF0aW9uX3BsYXllcl9wYWdlX2NvbnN0YW50c18xLkV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLlNUQVRTX1JFUE9SVElOR19VUkxTKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdGRUVEQkFDS19QT1BPVkVSX1BBVEgnLCBleHBsb3JhdGlvbl9wbGF5ZXJfcGFnZV9jb25zdGFudHNfMS5FeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5GRUVEQkFDS19QT1BPVkVSX1BBVEgpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgdG8gYmUgdXNlZCBpbiB0aGUgbGVhcm5lciB2aWV3LlxuICovXG52YXIgRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMoKSB7XG4gICAgfVxuICAgIEV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLkNPTlRFTlRfRk9DVVNfTEFCRUxfUFJFRklYID0gJ2NvbnRlbnQtZm9jdXMtbGFiZWwtJztcbiAgICBFeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5UV09fQ0FSRF9USFJFU0hPTERfUFggPSA5NjA7XG4gICAgRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuQ09OVElOVUVfQlVUVE9OX0ZPQ1VTX0xBQkVMID0gJ2NvbnRpbnVlQnV0dG9uJztcbiAgICAvKiBDYWxsZWQgd2hlbiBhIG5ldyBhdWRpby1lcXVpcHBhYmxlIGNvbXBvbmVudCBpcyBsb2FkZWQgYW5kIGRpc3BsYXllZFxuICAgICAgIHRvIHRoZSB1c2VyLCBhbGxvd2luZyBmb3IgdGhlIGF1dG9tYXRpYyBwbGF5aW5nIG9mIGF1ZGlvIGlmIG5lY2Vzc2FyeS4gKi9cbiAgICBFeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5FVkVOVF9BVVRPUExBWV9BVURJTyA9ICdhdXRvUGxheUF1ZGlvJztcbiAgICAvLyBUaGUgZW5mb3JjZWQgd2FpdGluZyBwZXJpb2QgYmVmb3JlIHRoZSBmaXJzdCBoaW50IHJlcXVlc3QuXG4gICAgRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuV0FJVF9GT1JfRklSU1RfSElOVF9NU0VDID0gNjAwMDA7XG4gICAgLy8gVGhlIGVuZm9yY2VkIHdhaXRpbmcgcGVyaW9kIGJlZm9yZSBlYWNoIG9mIHRoZSBzdWJzZXF1ZW50IGhpbnQgcmVxdWVzdHMuXG4gICAgRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuV0FJVF9GT1JfU1VCU0VRVUVOVF9ISU5UU19NU0VDID0gMzAwMDA7XG4gICAgLy8gVGhlIHRpbWUgZGVsYXkgYmV0d2VlbiB0aGUgbGVhcm5lciBjbGlja2luZyB0aGUgaGludCBidXR0b25cbiAgICAvLyBhbmQgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIGhpbnQuXG4gICAgRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuREVMQVlfRk9SX0hJTlRfRkVFREJBQ0tfTVNFQyA9IDEwMDtcbiAgICAvLyBBcnJheSBvZiBpMThuIElEcyBmb3IgdGhlIHBvc3NpYmxlIGhpbnQgcmVxdWVzdCBzdHJpbmdzLlxuICAgIEV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLkhJTlRfUkVRVUVTVF9TVFJJTkdfSTE4Tl9JRFMgPSBbXG4gICAgICAgICdJMThOX1BMQVlFUl9ISU5UX1JFUVVFU1RfU1RSSU5HXzEnLFxuICAgICAgICAnSTE4Tl9QTEFZRVJfSElOVF9SRVFVRVNUX1NUUklOR18yJyxcbiAgICAgICAgJ0kxOE5fUExBWUVSX0hJTlRfUkVRVUVTVF9TVFJJTkdfMydcbiAgICBdO1xuICAgIC8qIFRoaXMgc2hvdWxkIG1hdGNoIHRoZSBDU1MgY2xhc3MgZGVmaW5lZCBpbiB0aGUgdHV0b3IgY2FyZCBkaXJlY3RpdmUuICovXG4gICAgRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuQVVESU9fSElHSExJR0hUX0NTU19DTEFTUyA9ICdjb252ZXJzYXRpb24tc2tpbi1hdWRpby1oaWdobGlnaHQnO1xuICAgIEV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLkZMQUdfRVhQTE9SQVRJT05fVVJMX1RFTVBMQVRFID0gJy9mbGFnZXhwbG9yYXRpb25oYW5kbGVyLzxleHBsb3JhdGlvbl9pZD4nO1xuICAgIC8vIFRPRE8oYmhlbm5pbmcpOiBGaW5kIGEgYmV0dGVyIHBsYWNlIGZvciB0aGVzZSBjb25zdGFudHMuXG4gICAgLy8gTk9URSBUTyBERVZFTE9QRVJTOiBUaGVzZSBjb25zdGFudHMgbXVzdCBiZSB0aGUgc2FtZSAoaW4gbmFtZSBhbmQgdmFsdWUpIGFzXG4gICAgLy8gdGhlIGNvcnJlc3BvbmRpbmcgY2xhc3NpZmljYXRpb24gY29uc3RhbnRzIGRlZmluZWQgaW5cbiAgICAvLyBjb3JlLmRvbWFpbi5leHBfZG9tYWluLlxuICAgIEV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLkVYUExJQ0lUX0NMQVNTSUZJQ0FUSU9OID0gJ2V4cGxpY2l0JztcbiAgICBFeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5UUkFJTklOR19EQVRBX0NMQVNTSUZJQ0FUSU9OID0gJ3RyYWluaW5nX2RhdGFfbWF0Y2gnO1xuICAgIEV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLlNUQVRJU1RJQ0FMX0NMQVNTSUZJQ0FUSU9OID0gJ3N0YXRpc3RpY2FsX2NsYXNzaWZpZXInO1xuICAgIEV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLkRFRkFVTFRfT1VUQ09NRV9DTEFTU0lGSUNBVElPTiA9ICdkZWZhdWx0X291dGNvbWUnO1xuICAgIEV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLkVYUExPUkFUSU9OX01PREUgPSB7XG4gICAgICAgIEVYUExPUkFUSU9OOiAnZXhwbG9yYXRpb24nLFxuICAgICAgICBQUkVURVNUOiAncHJldGVzdCcsXG4gICAgICAgIFFVRVNUSU9OX1BMQVlFUjogJ3F1ZXN0aW9uX3BsYXllcicsXG4gICAgICAgIFNUT1JZX0NIQVBURVI6ICdzdG9yeV9jaGFwdGVyJyxcbiAgICAgICAgT1RIRVI6ICdvdGhlcidcbiAgICB9O1xuICAgIEV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzLlNUQVRTX0VWRU5UX1RZUEVTID0ge1xuICAgICAgICBFVkVOVF9UWVBFX1NUQVJUX0VYUExPUkFUSU9OOiAnc3RhcnQnLFxuICAgICAgICBFVkVOVF9UWVBFX0FDVFVBTF9TVEFSVF9FWFBMT1JBVElPTjogJ2FjdHVhbF9zdGFydCcsXG4gICAgICAgIEVWRU5UX1RZUEVfQ09NUExFVEVfRVhQTE9SQVRJT046ICdjb21wbGV0ZScsXG4gICAgICAgIEVWRU5UX1RZUEVfU1RBVEVfSElUOiAnc3RhdGVfaGl0JyxcbiAgICAgICAgRVZFTlRfVFlQRV9TVEFURV9DT01QTEVURUQ6ICdzdGF0ZV9jb21wbGV0ZScsXG4gICAgICAgIEVWRU5UX1RZUEVfQU5TV0VSX1NVQk1JVFRFRDogJ2Fuc3dlcl9zdWJtaXR0ZWQnLFxuICAgICAgICBFVkVOVF9UWVBFX1NPTFVUSU9OX0hJVDogJ3NvbHV0aW9uX2hpdCcsXG4gICAgICAgIEVWRU5UX1RZUEVfTEVBVkVfRk9SX1JFRlJFU0hFUl9FWFA6ICdsZWF2ZV9mb3JfcmVmcmVzaGVyX2V4cCcsXG4gICAgfTtcbiAgICBFeHBsb3JhdGlvblBsYXllckNvbnN0YW50cy5TVEFUU19SRVBPUlRJTkdfVVJMUyA9IHtcbiAgICAgICAgQU5TV0VSX1NVQk1JVFRFRDogJy9leHBsb3JlaGFuZGxlci9hbnN3ZXJfc3VibWl0dGVkX2V2ZW50LzxleHBsb3JhdGlvbl9pZD4nLFxuICAgICAgICBFWFBMT1JBVElPTl9DT01QTEVURUQ6ICgnL2V4cGxvcmVoYW5kbGVyL2V4cGxvcmF0aW9uX2NvbXBsZXRlX2V2ZW50LzxleHBsb3JhdGlvbl9pZD4nKSxcbiAgICAgICAgRVhQTE9SQVRJT05fTUFZQkVfTEVGVDogKCcvZXhwbG9yZWhhbmRsZXIvZXhwbG9yYXRpb25fbWF5YmVfbGVhdmVfZXZlbnQvPGV4cGxvcmF0aW9uX2lkPicpLFxuICAgICAgICBFWFBMT1JBVElPTl9TVEFSVEVEOiAoJy9leHBsb3JlaGFuZGxlci9leHBsb3JhdGlvbl9zdGFydF9ldmVudC88ZXhwbG9yYXRpb25faWQ+JyksXG4gICAgICAgIFNUQVRFX0hJVDogJy9leHBsb3JlaGFuZGxlci9zdGF0ZV9oaXRfZXZlbnQvPGV4cGxvcmF0aW9uX2lkPicsXG4gICAgICAgIFNUQVRFX0NPTVBMRVRFRDogJy9leHBsb3JlaGFuZGxlci9zdGF0ZV9jb21wbGV0ZV9ldmVudC88ZXhwbG9yYXRpb25faWQ+JyxcbiAgICAgICAgRVhQTE9SQVRJT05fQUNUVUFMTFlfU1RBUlRFRDogKCcvZXhwbG9yZWhhbmRsZXIvZXhwbG9yYXRpb25fYWN0dWFsX3N0YXJ0X2V2ZW50LzxleHBsb3JhdGlvbl9pZD4nKSxcbiAgICAgICAgU09MVVRJT05fSElUOiAnL2V4cGxvcmVoYW5kbGVyL3NvbHV0aW9uX2hpdF9ldmVudC88ZXhwbG9yYXRpb25faWQ+JyxcbiAgICAgICAgTEVBVkVfRk9SX1JFRlJFU0hFUl9FWFA6ICgnL2V4cGxvcmVoYW5kbGVyL2xlYXZlX2Zvcl9yZWZyZXNoZXJfZXhwX2V2ZW50LzxleHBsb3JhdGlvbl9pZD4nKSxcbiAgICAgICAgU1RBVFNfRVZFTlRTOiAnL2V4cGxvcmVoYW5kbGVyL3N0YXRzX2V2ZW50cy88ZXhwbG9yYXRpb25faWQ+J1xuICAgIH07XG4gICAgRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMuRkVFREJBQ0tfUE9QT1ZFUl9QQVRIID0gJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS90ZW1wbGF0ZXMvJyArXG4gICAgICAgICdmZWVkYmFjay1wb3B1cC1jb250YWluZXIudGVtcGxhdGUuaHRtbCc7XG4gICAgcmV0dXJuIEV4cGxvcmF0aW9uUGxheWVyQ29uc3RhbnRzO1xufSgpKTtcbmV4cG9ydHMuRXhwbG9yYXRpb25QbGF5ZXJDb25zdGFudHMgPSBFeHBsb3JhdGlvblBsYXllckNvbnN0YW50cztcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciBhIHNldCBvZiBhdWRpbyBjb250cm9scyBmb3IgYSBzcGVjaWZpY1xuICogYXVkaW8gdHJhbnNsYXRpb24gaW4gdGhlIGxlYXJuZXIgdmlldy5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9Ccm93c2VyQ2hlY2tlclNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvTGFuZ3VhZ2VVdGlsU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvYXVkaW8tcHJlbG9hZGVyLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzLycgK1xuICAgICdhdWRpby10cmFuc2xhdGlvbi1sYW5ndWFnZS5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy8nICtcbiAgICAnYXVkaW8tdHJhbnNsYXRpb24tbWFuYWdlci5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9wbGF5ZXItcG9zaXRpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQXNzZXRzQmFja2VuZEFwaVNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0F1ZGlvUGxheWVyU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvY29udGV4dHVhbC9XaW5kb3dEaW1lbnNpb25zU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdhdWRpb0JhcicsIFtcbiAgICAnQXVkaW9QcmVsb2FkZXJTZXJ2aWNlJywgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoQXVkaW9QcmVsb2FkZXJTZXJ2aWNlLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xheW91dC1kaXJlY3RpdmVzLycgK1xuICAgICAgICAgICAgICAgICdhdWRpby1iYXIuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckdGltZW91dCcsICdBdWRpb1RyYW5zbGF0aW9uTGFuZ3VhZ2VTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnQXVkaW9QbGF5ZXJTZXJ2aWNlJywgJ0xhbmd1YWdlVXRpbFNlcnZpY2UnLCAnQXNzZXRzQmFja2VuZEFwaVNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlJywgJ1BsYXllclBvc2l0aW9uU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ1dpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlJywgJ0F1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ0VWRU5UX0FVVE9QTEFZX0FVRElPJywgJ0Jyb3dzZXJDaGVja2VyU2VydmljZScsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGludGVydmFsLCAkdGltZW91dCwgQXVkaW9UcmFuc2xhdGlvbkxhbmd1YWdlU2VydmljZSwgQXVkaW9QbGF5ZXJTZXJ2aWNlLCBMYW5ndWFnZVV0aWxTZXJ2aWNlLCBBc3NldHNCYWNrZW5kQXBpU2VydmljZSwgQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZSwgUGxheWVyUG9zaXRpb25TZXJ2aWNlLCBXaW5kb3dEaW1lbnNpb25zU2VydmljZSwgQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlLCBFVkVOVF9BVVRPUExBWV9BVURJTywgQnJvd3NlckNoZWNrZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hdWRpb0JhcklzRXhwYW5kZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2dyZXNzQmFySXNTaG93biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZ3VhZ2VzSW5FeHBsb3JhdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1RyYW5zbGF0aW9uTGFuZ3VhZ2VTZXJ2aWNlLmdldExhbmd1YWdlT3B0aW9uc0ZvckRyb3Bkb3duKCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZExhbmd1YWdlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IEF1ZGlvVHJhbnNsYXRpb25MYW5ndWFnZVNlcnZpY2UuZ2V0Q3VycmVudEF1ZGlvTGFuZ3VhZ2VDb2RlKClcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRvbihFVkVOVF9BVVRPUExBWV9BVURJTywgZnVuY3Rpb24gKGUsIHBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hdWRpb0JhcklzRXhwYW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1BsYXllclNlcnZpY2Uuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgdXNlIGEgdGltZW91dCB0byBhbGxvdyBmb3IgYW55IHByZXZpb3VzIGF1ZGlvIHRvIGhhdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGVpciAnb25lbmQnIGNhbGxiYWNrIGNhbGxlZC4gVGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZHJlc3MgZGVsYXlzIHdpdGggYXV0b2dlbmVyYXRlZCBhdWRpbyBjYWxsYmFja3MuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2Uuc2V0U2Vjb25kYXJ5QXVkaW9UcmFuc2xhdGlvbnMocGFyYW1zLmF1ZGlvVHJhbnNsYXRpb25zLCBwYXJhbXMuaHRtbCwgcGFyYW1zLmNvbXBvbmVudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vblBsYXlCdXR0b25DbGlja2VkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0F1ZGlvQmFyQXZhaWxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5sYW5ndWFnZXNJbkV4cGxvcmF0aW9uLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5vbk5ld0xhbmd1YWdlU2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1RyYW5zbGF0aW9uTGFuZ3VhZ2VTZXJ2aWNlLnNldEN1cnJlbnRBdWRpb0xhbmd1YWdlQ29kZSgkc2NvcGUuc2VsZWN0ZWRMYW5ndWFnZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1BsYXllclNlcnZpY2Uuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9QbGF5ZXJTZXJ2aWNlLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pc0F1ZGlvQXZhaWxhYmxlSW5DdXJyZW50TGFuZ3VhZ2UoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpc0F1dG9nZW5lcmF0ZWRMYW5ndWFnZUNvZGVTZWxlY3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF1ZGlvVHJhbnNsYXRpb24gPSBnZXRWb2ljZW92ZXJJbkN1cnJlbnRMYW5ndWFnZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1ZGlvUHJlbG9hZGVyU2VydmljZS5zZXRNb3N0UmVjZW50bHlSZXF1ZXN0ZWRBdWRpb0ZpbGVuYW1lKGF1ZGlvVHJhbnNsYXRpb24uZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1ZGlvUHJlbG9hZGVyU2VydmljZS5yZXN0YXJ0QXVkaW9QcmVsb2FkZXIoUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldEN1cnJlbnRTdGF0ZU5hbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5leHBhbmRBdWRpb0JhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hdWRpb0JhcklzRXhwYW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sbGFwc2VBdWRpb0JhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hdWRpb0JhcklzRXhwYW5kZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEF1ZGlvUGxheWVyU2VydmljZS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1BsYXllclNlcnZpY2UuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0U2Nyb2xsVG9wID0gMDtcbiAgICAgICAgICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChXaW5kb3dEaW1lbnNpb25zU2VydmljZS5pc1dpbmRvd05hcnJvdygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQXVkaW9IZWFkZXJQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZUF1ZGlvSGVhZGVyUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gJCh0aGlzKS5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdWRpb0hlYWRlciA9IGFuZ3VsYXIuZWxlbWVudCgkKCcuYXVkaW8taGVhZGVyOmZpcnN0JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbFRvcCA+IGxhc3RTY3JvbGxUb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpb0hlYWRlci5hZGRDbGFzcygnYXVkaW8tYmFyLW5hdi11cCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmF1ZGlvQmFySXNFeHBhbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpb0hlYWRlci5hZGRDbGFzcygnYXVkaW8tYmFyLW5hdi1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzY3JvbGxUb3AgPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3AgKyAkKHdpbmRvdykuaGVpZ2h0KCkgPCAkKGRvY3VtZW50KS5oZWlnaHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvSGVhZGVyLnJlbW92ZUNsYXNzKCdhdWRpby1iYXItbmF2LXVwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9IZWFkZXIucmVtb3ZlQ2xhc3MoJ2F1ZGlvLWJhci1uYXYtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0Q3VycmVudEF1ZGlvTGFuZ3VhZ2VDb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEF1ZGlvVHJhbnNsYXRpb25MYW5ndWFnZVNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q3VycmVudEF1ZGlvTGFuZ3VhZ2VDb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRDdXJyZW50QXVkaW9MYW5ndWFnZURlc2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEF1ZGlvVHJhbnNsYXRpb25MYW5ndWFnZVNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q3VycmVudEF1ZGlvTGFuZ3VhZ2VEZXNjcmlwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0Vm9pY2VvdmVySW5DdXJyZW50TGFuZ3VhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlLmdldEN1cnJlbnRBdWRpb1RyYW5zbGF0aW9ucygpW0F1ZGlvVHJhbnNsYXRpb25MYW5ndWFnZVNlcnZpY2UuZ2V0Q3VycmVudEF1ZGlvTGFuZ3VhZ2VDb2RlKCldO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNBdWRpb1BsYXlpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXVkaW9QbGF5ZXJTZXJ2aWNlLmlzUGxheWluZygpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZS5pc1BsYXlpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmF1ZGlvTG9hZGluZ0luZGljYXRvcklzU2hvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkF1ZGlvUGxheWVyU2VydmljZSA9IEF1ZGlvUGxheWVyU2VydmljZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQXVkaW9BdmFpbGFibGVJbkN1cnJlbnRMYW5ndWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBCb29sZWFuKGdldFZvaWNlb3ZlckluQ3VycmVudExhbmd1YWdlKCkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNBdXRvZ2VuZXJhdGVkTGFuZ3VhZ2VDb2RlU2VsZWN0ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRvZXNDdXJyZW50QXVkaW9UcmFuc2xhdGlvbk5lZWRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQXV0b2dlbmVyYXRlZExhbmd1YWdlQ29kZVNlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXVkaW9UcmFuc2xhdGlvbiA9IGdldFZvaWNlb3ZlckluQ3VycmVudExhbmd1YWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhdWRpb1RyYW5zbGF0aW9uICYmIGF1ZGlvVHJhbnNsYXRpb24ubmVlZHNVcGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNBdXRvZ2VuZXJhdGVkTGFuZ3VhZ2VDb2RlU2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXVkaW9UcmFuc2xhdGlvbkxhbmd1YWdlU2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pc0F1dG9nZW5lcmF0ZWRMYW5ndWFnZUNvZGVTZWxlY3RlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUub25QbGF5QnV0dG9uQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9ncmVzc0JhcklzU2hvd24gPSAhaXNBdXRvZ2VuZXJhdGVkTGFuZ3VhZ2VDb2RlU2VsZWN0ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0F1dG9nZW5lcmF0ZWRMYW5ndWFnZUNvZGVTZWxlY3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheVBhdXNlQXV0b2dlbmVyYXRlZEF1ZGlvVHJhbnNsYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdWRpb1RyYW5zbGF0aW9uID0gZ2V0Vm9pY2VvdmVySW5DdXJyZW50TGFuZ3VhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXVkaW9UcmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5UGF1c2VVcGxvYWRlZEF1ZGlvVHJhbnNsYXRpb24oZ2V0Q3VycmVudEF1ZGlvTGFuZ3VhZ2VDb2RlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRyYWNrID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IGZ1bmN0aW9uIChwcm9ncmVzc1BlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm5zIHRoZSBjdXJyZW50IHRyYWNrIHByb2dyZXNzLiBJbiBhZGRpdGlvbiwgc2V0cyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmFjayBwcm9ncmVzcyBpZiB0aGUgcHJvZ3Jlc3NQZXJjZW50YWdlIGFyZ3VtZW50IGlzIGRlZmluZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHByb2dyZXNzUGVyY2VudGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9QbGF5ZXJTZXJ2aWNlLnNldFByb2dyZXNzKHByb2dyZXNzUGVyY2VudGFnZSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBdWRpb1BsYXllclNlcnZpY2UuZ2V0UHJvZ3Jlc3MoKSAqIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ2FjaGVkID0gZnVuY3Rpb24gKGF1ZGlvVHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBc3NldHNCYWNrZW5kQXBpU2VydmljZS5pc0NhY2hlZChhdWRpb1RyYW5zbGF0aW9uLmZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsYXlQYXVzZUF1ZGlvVHJhbnNsYXRpb24gPSBmdW5jdGlvbiAobGFuZ3VhZ2VDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXVkaW9UcmFuc2xhdGlvbkxhbmd1YWdlU2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pc0F1dG9nZW5lcmF0ZWRMYW5ndWFnZUNvZGVTZWxlY3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheVBhdXNlQXV0b2dlbmVyYXRlZEF1ZGlvVHJhbnNsYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlQYXVzZVVwbG9hZGVkQXVkaW9UcmFuc2xhdGlvbihsYW5ndWFnZUNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxheVBhdXNlQXV0b2dlbmVyYXRlZEF1ZGlvVHJhbnNsYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTcGVlY2hTeW50aGVzaXMgaW4gQ2hyb21lIHNlZW1zIHRvIGhhdmUgYSBidWdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZXJlIGlmIHlvdSBwYXVzZSB0aGUgdXR0ZXJhbmNlLCB3YWl0IGZvciBhcm91bmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDE1IG9yIG1vcmUgc2Vjb25kcywgdGhlbiB0cnkgcmVzdW1pbmcsIG5vdGhpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgc291bmQuIEFzIGEgdGVtcG9yYXJ5IGZpeCwganVzdCByZXN0YXJ0IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXR0ZXJhbmNlIGZyb20gdGhlIGJlZ2lubmluZyBpbnN0ZWFkIG9mIHJlc3VtaW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UuaXNQbGF5aW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZS5wbGF5KEF1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q3VycmVudEh0bWxGb3JBdXRvZ2VuZXJhdGVkQXVkaW8oKSwgQXVkaW9UcmFuc2xhdGlvbkxhbmd1YWdlU2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0U3BlZWNoU3ludGhlc2lzTGFuZ3VhZ2VDb2RlKCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlZCB0byB1cGRhdGUgYmluZGluZ3MgdG8gc2hvdyBhIHNpbGVudCBzcGVha2VyIGFmdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF1dG9nZW5lcmF0ZWQgYXVkaW8gaGFzIGZpbmlzaGVkIHBsYXlpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHlBc3luYygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbGVhclNlY29uZGFyeUF1ZGlvVHJhbnNsYXRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBwbGF5UGF1c2VVcGxvYWRlZEF1ZGlvVHJhbnNsYXRpb24gPSBmdW5jdGlvbiAobGFuZ3VhZ2VDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUF1ZGlvUGxheWVyU2VydmljZS5pc1BsYXlpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBdWRpb1BsYXllclNlcnZpY2UuaXNUcmFja0xvYWRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1ZGlvUGxheWVyU2VydmljZS5wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkQW5kUGxheUF1ZGlvVHJhbnNsYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1BsYXllclNlcnZpY2UucGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsYXlDYWNoZWRBdWRpb1RyYW5zbGF0aW9uID0gZnVuY3Rpb24gKGF1ZGlvRmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEF1ZGlvUGxheWVyU2VydmljZS5sb2FkKGF1ZGlvRmlsZW5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hdWRpb0xvYWRpbmdJbmRpY2F0b3JJc1Nob3duID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9QbGF5ZXJTZXJ2aWNlLnBsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gYW4gYXVkaW8gZmlsZSBmaW5pc2hlcyBsb2FkaW5nLlxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXVkaW9GaWxlbmFtZSAtIEZpbGVuYW1lIG9mIHRoZSBhdWRpbyBmaWxlIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZCBsb2FkaW5nLlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uRmluaXNoZWRMb2FkaW5nQXVkaW8gPSBmdW5jdGlvbiAoYXVkaW9GaWxlbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vc3RSZWNlbnRseVJlcXVlc3RlZEF1ZGlvRmlsZW5hbWUgPSBBdWRpb1ByZWxvYWRlclNlcnZpY2UuZ2V0TW9zdFJlY2VudGx5UmVxdWVzdGVkQXVkaW9GaWxlbmFtZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hdWRpb0xvYWRpbmdJbmRpY2F0b3JJc1Nob3duICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9GaWxlbmFtZSA9PT0gbW9zdFJlY2VudGx5UmVxdWVzdGVkQXVkaW9GaWxlbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlDYWNoZWRBdWRpb1RyYW5zbGF0aW9uKGF1ZGlvRmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBBdWRpb1ByZWxvYWRlclNlcnZpY2Uuc2V0QXVkaW9Mb2FkZWRDYWxsYmFjayhvbkZpbmlzaGVkTG9hZGluZ0F1ZGlvKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvYWRBbmRQbGF5QXVkaW9UcmFuc2xhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hdWRpb0xvYWRpbmdJbmRpY2F0b3JJc1Nob3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdWRpb1RyYW5zbGF0aW9uID0gZ2V0Vm9pY2VvdmVySW5DdXJyZW50TGFuZ3VhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEF1ZGlvUHJlbG9hZGVyU2VydmljZS5zZXRNb3N0UmVjZW50bHlSZXF1ZXN0ZWRBdWRpb0ZpbGVuYW1lKGF1ZGlvVHJhbnNsYXRpb24uZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF1ZGlvVHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNDYWNoZWQoYXVkaW9UcmFuc2xhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheUNhY2hlZEF1ZGlvVHJhbnNsYXRpb24oYXVkaW9UcmFuc2xhdGlvbi5maWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFBdWRpb1ByZWxvYWRlclNlcnZpY2UuaXNMb2FkaW5nQXVkaW9GaWxlKGF1ZGlvVHJhbnNsYXRpb24uZmlsZW5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1ZGlvUHJlbG9hZGVyU2VydmljZS5yZXN0YXJ0QXVkaW9QcmVsb2FkZXIoUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldEN1cnJlbnRTdGF0ZU5hbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciB0aGUgY29ycmVjdG5lc3MgZm9vdGVyIGluIHRoZSBleHBsb3JhdGlvbiBwbGF5ZXIuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnY29ycmVjdG5lc3NGb290ZXInLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvbGF5b3V0LWRpcmVjdGl2ZXMvJyArXG4gICAgICAgICAgICAgICAgJ2NvcnJlY3RuZXNzLWZvb3Rlci5kaXJlY3RpdmUuaHRtbCcpXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNiBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3Igc2hvd2luZyBhdXRob3Ivc2hhcmUgZm9vdGVyXG4gKiBpbiBleHBsb3JhdGlvbiBwbGF5ZXIuXG4gKi9cbnJlcXVpcmUoJ2NvbXBvbmVudHMvYnV0dG9uLWRpcmVjdGl2ZXMvaGludC1hbmQtc29sdXRpb24tYnV0dG9ucy5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9zdW1tYXJ5L0V4cGxvcmF0aW9uU3VtbWFyeUJhY2tlbmRBcGlTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Db250ZXh0U2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvY29udGV4dHVhbC9VcmxTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9jb250ZXh0dWFsL1dpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ2V4cGxvcmF0aW9uRm9vdGVyJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xheW91dC1kaXJlY3RpdmVzLycgK1xuICAgICAgICAgICAgICAgICdleHBsb3JhdGlvbi1mb290ZXIuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyRodHRwJywgJyRsb2cnLCAnQ29udGV4dFNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdFeHBsb3JhdGlvblN1bW1hcnlCYWNrZW5kQXBpU2VydmljZScsICdVcmxTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnV2luZG93RGltZW5zaW9uc1NlcnZpY2UnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkbG9nLCBDb250ZXh0U2VydmljZSwgRXhwbG9yYXRpb25TdW1tYXJ5QmFja2VuZEFwaVNlcnZpY2UsIFVybFNlcnZpY2UsIFdpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5leHBsb3JhdGlvbklkID0gQ29udGV4dFNlcnZpY2UuZ2V0RXhwbG9yYXRpb25JZCgpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0U3RhdGljSW1hZ2VVcmwgPSBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRTdGF0aWNJbWFnZVVybDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlmcmFtZWQgPSBVcmxTZXJ2aWNlLmlzSWZyYW1lZCgpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUud2luZG93SXNOYXJyb3cgPSBXaW5kb3dEaW1lbnNpb25zU2VydmljZS5pc1dpbmRvd05hcnJvdygpO1xuICAgICAgICAgICAgICAgICAgICBXaW5kb3dEaW1lbnNpb25zU2VydmljZS5yZWdpc3Rlck9uUmVzaXplSG9vayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUud2luZG93SXNOYXJyb3cgPSBXaW5kb3dEaW1lbnNpb25zU2VydmljZS5pc1dpbmRvd05hcnJvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRyaWJ1dG9yTmFtZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFDb250ZXh0U2VydmljZS5pc0luUXVlc3Rpb25QbGF5ZXJNb2RlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV4cGxvcmF0aW9uU3VtbWFyeUJhY2tlbmRBcGlTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmxvYWRQdWJsaWNBbmRQcml2YXRlRXhwbG9yYXRpb25TdW1tYXJpZXMoWyRzY29wZS5leHBsb3JhdGlvbklkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoc3VtbWFyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1bW1hcnlCYWNrZW5kT2JqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VtbWFyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyaWJ1dG9yU3VtbWFyeSA9IChzdW1tYXJpZXNbMF0uaHVtYW5fcmVhZGFibGVfY29udHJpYnV0b3JzX3N1bW1hcnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29udHJpYnV0b3JOYW1lcyA9IChPYmplY3Qua2V5cyhjb250cmlidXRvclN1bW1hcnkpLnNvcnQoZnVuY3Rpb24gKGNvbnRyaWJ1dG9yVXNlcm5hbWUxLCBjb250cmlidXRvclVzZXJuYW1lMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1pdHNPZkNvbnRyaWJ1dG9yMSA9IGNvbnRyaWJ1dG9yU3VtbWFyeVtjb250cmlidXRvclVzZXJuYW1lMV0ubnVtX2NvbW1pdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tbWl0c09mQ29udHJpYnV0b3IyID0gY29udHJpYnV0b3JTdW1tYXJ5W2NvbnRyaWJ1dG9yVXNlcm5hbWUyXS5udW1fY29tbWl0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21taXRzT2ZDb250cmlidXRvcjIgLSBjb21taXRzT2ZDb250cmlidXRvcjE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciB0aGUgZmVlZGJhY2sgcG9wdXAuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2ZpbHRlcnMvc3RyaW5nLXV0aWxpdHktZmlsdGVycy9nZXQtYWJicmV2aWF0ZWQtdGV4dC5maWx0ZXIudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2V4cGxvcmF0aW9uLWVuZ2luZS5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9wbGF5ZXItcG9zaXRpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQWxlcnRzU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvVXNlclNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL2NvbnRleHR1YWwvV2luZG93RGltZW5zaW9uc1NlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL3N0YXRlZnVsL0JhY2tncm91bmRNYXNrU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvc3RhdGVmdWwvRm9jdXNNYW5hZ2VyU2VydmljZS50cycpO1xuLy8gVGhpcyBkaXJlY3RpdmUgaXMgdW51c3VhbCBpbiB0aGF0IGl0IHNob3VsZCBvbmx5IGJlIGludm9rZWQgaW5kaXJlY3RseSwgYXNcbi8vIGZvbGxvd3M6XG4vL1xuLy8gPHNvbWUtaHRtbC1lbGVtZW50IHBvcG92ZXItcGxhY2VtZW50PVwiYm90dG9tXCJcbi8vICAgICAgICAgICAgICAgICAgICB1aWItcG9wb3Zlci10ZW1wbGF0ZT1cIic8W2dldEZlZWRiYWNrUG9wb3ZlclVybCgpXT4nXCJcbi8vICAgICAgICAgICAgICAgICAgICBwb3BvdmVyLXRyaWdnZXI9XCJjbGlja1wiIHN0YXRlLW5hbWU9XCI8W1NUQVRFX05BTUVdPlwiPlxuLy8gPC9zb21lLWh0bWwtZWxlbWVudD5cbi8vXG4vLyBUaGUgc3RhdGUtbmFtZSBhcmd1bWVudCBpcyBvcHRpb25hbC4gSWYgaXQgaXMgbm90IHByb3ZpZGVkLCB0aGUgZmVlZGJhY2sgaXNcbi8vIGFzc3VtZWQgdG8gYXBwbHkgdG8gdGhlIGV4cGxvcmF0aW9uIGFzIGEgd2hvbGUuXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ2ZlZWRiYWNrUG9wdXAnLCBbXG4gICAgJ0V4cGxvcmF0aW9uRW5naW5lU2VydmljZScsICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgZnVuY3Rpb24gKEV4cGxvcmF0aW9uRW5naW5lU2VydmljZSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sYXlvdXQtZGlyZWN0aXZlcy8nICtcbiAgICAgICAgICAgICAgICAnZmVlZGJhY2stcG9wdXAuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyRlbGVtZW50JywgJyRmaWx0ZXInLCAnJGh0dHAnLCAnJGxvZycsICckdGltZW91dCcsXG4gICAgICAgICAgICAgICAgJ0FsZXJ0c1NlcnZpY2UnLCAnQmFja2dyb3VuZE1hc2tTZXJ2aWNlJywgJ0ZvY3VzTWFuYWdlclNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdQbGF5ZXJQb3NpdGlvblNlcnZpY2UnLCAnVXNlclNlcnZpY2UnLCAnV2luZG93RGltZW5zaW9uc1NlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdGRUVEQkFDS19TVUJKRUNUX01BWF9DSEFSX0xJTUlUJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJGZpbHRlciwgJGh0dHAsICRsb2csICR0aW1lb3V0LCBBbGVydHNTZXJ2aWNlLCBCYWNrZ3JvdW5kTWFza1NlcnZpY2UsIEZvY3VzTWFuYWdlclNlcnZpY2UsIFBsYXllclBvc2l0aW9uU2VydmljZSwgVXNlclNlcnZpY2UsIFdpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlLCBGRUVEQkFDS19TVUJKRUNUX01BWF9DSEFSX0xJTUlUKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5mZWVkYmFja1RleHQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzU3VibWl0dGVyQW5vbnltaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNMb2dnZWRJbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmdldFVzZXJJbmZvQXN5bmMoKS50aGVuKGZ1bmN0aW9uICh1c2VySW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzTG9nZ2VkSW4gPSB1c2VySW5mby5pc0xvZ2dlZEluKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmVlZGJhY2tTdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2VuZXJhdGUgYSByYW5kb20gaWQgc2luY2UgdGhlcmUgbWF5IGJlIG11bHRpcGxlIHBvcG92ZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gZWxlbWVudHMgb24gdGhlIHNhbWUgcGFnZS5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZlZWRiYWNrUG9wb3ZlcklkID0gKCdmZWVkYmFja1BvcG92ZXInICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMikpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmVlZGJhY2tUaXRsZSA9ICgnRmVlZGJhY2sgd2hlbiB0aGUgdXNlciB3YXMgYXQgY2FyZCBcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldEN1cnJlbnRTdGF0ZU5hbWUoKSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoV2luZG93RGltZW5zaW9uc1NlcnZpY2UuaXNXaW5kb3dOYXJyb3coKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQmFja2dyb3VuZE1hc2tTZXJ2aWNlLmFjdGl2YXRlTWFzaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEZvY3VzTWFuYWdlclNlcnZpY2Uuc2V0Rm9jdXMoJHNjb3BlLmZlZWRiYWNrUG9wb3ZlcklkKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZlZWRiYWNrVXJsID0gKCcvZXhwbG9yZWhhbmRsZXIvZ2l2ZV9mZWVkYmFjay8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV4cGxvcmF0aW9uRW5naW5lU2VydmljZS5nZXRFeHBsb3JhdGlvbklkKCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0VHJpZ2dlckVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIHBvcG92ZXIgdHJpZ2dlciBub2RlICh0aGUgb25lIHdpdGggYSBwb3BvdmVyLXRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhdHRyaWJ1dGUpLiBUaGlzIGlzIGFsc28gdGhlIERPTSBub2RlIHRoYXQgY29udGFpbnMgdGhlIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuYW1lLiBTaW5jZSB0aGUgcG9wb3ZlciBET00gbm9kZSBpcyBpbnNlcnRlZCBhcyBhIHNpYmxpbmcgdG8gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub2RlLCB3ZSB0aGVyZWZvcmUgY2xpbWIgdXAgdGhlIERPTSB0cmVlIHVudGlsIHdlIGZpbmQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0b3AtbGV2ZWwgcG9wb3ZlciBlbGVtZW50LiBUaGUgdHJpZ2dlciB3aWxsIGJlIG9uZSBvZiBpdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNpYmxpbmdzLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0cmlnZ2VyIGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLCBhIHZhbHVlIG9mIHVuZGVmaW5lZCBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuZWQuIFRoaXMgY291bGQgaGFwcGVuIGlmIHRoZSB0cmlnZ2VyIGlzIGNsaWNrZWQgd2hpbGUgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmZWVkYmFjayBjb25maXJtYXRpb24gbWVzc2FnZSBpcyBiZWluZyBkaXNwbGF5ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWx0ID0gJGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9wb3ZlckNoaWxkRWx0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsdCA9IGVsdC5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNVbmRlZmluZWQoZWx0LmF0dHIoJ3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwJykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcG92ZXJDaGlsZEVsdCA9IGVsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3BvdmVyQ2hpbGRFbHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmVycm9yKCdDb3VsZCBub3QgY2xvc2UgcG9wb3ZlciBlbGVtZW50LicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9wb3ZlckVsdCA9IHBvcG92ZXJDaGlsZEVsdC5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyRWx0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZEVsdHMgPSBwb3BvdmVyRWx0LmNoaWxkcmVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkRWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZEVsdCA9ICQoY2hpbGRFbHRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRFbHQuYXR0cigndWliLXBvcG92ZXItdGVtcGxhdGUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyRWx0ID0gY2hpbGRFbHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHJpZ2dlckVsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2cuZXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHBvcG92ZXIgdHJpZ2dlci4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXJFbHQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zYXZlRmVlZGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmZlZWRiYWNrVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLnBvc3QoZmVlZGJhY2tVcmwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdDogJHNjb3BlLmZlZWRiYWNrVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlZWRiYWNrOiAkc2NvcGUuZmVlZGJhY2tUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlX2F1dGhvcjogKCEkc2NvcGUuaXNTdWJtaXR0ZXJBbm9ueW1pemVkICYmICRzY29wZS5pc0xvZ2dlZEluKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVfbmFtZTogUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldEN1cnJlbnRTdGF0ZU5hbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZlZWRiYWNrU3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJpZ2dlckVsdCA9IGdldFRyaWdnZXJFbHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJpZ2dlckVsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyRWx0LnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jbG9zZVBvcG92ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbG9zaW5nIHRoZSBwb3BvdmVyIGlzIGRvbmUgYnkgY2xpY2tpbmcgb24gdGhlIHBvcG92ZXIgdHJpZ2dlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSB0aW1lb3V0IGlzIG5lZWRlZCB0byBwb3N0cG9uZSB0aGUgY2xpY2sgZXZlbnQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzdWJzZXF1ZW50IGRpZ2VzdCBjeWNsZS4gT3RoZXJ3aXNlLCBhbiBcIiRhcHBseSBhbHJlYWR5XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBwcm9ncmVzc1wiIGVycm9yIGlzIHJhaXNlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRUcmlnZ2VyRWx0KCkudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgQmFja2dyb3VuZE1hc2tTZXJ2aWNlLmRlYWN0aXZhdGVNYXNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQmFja2dyb3VuZE1hc2tTZXJ2aWNlLmRlYWN0aXZhdGVNYXNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciB0aGUgbG9jYWwgbmF2aWdhdGlvbiBpbiB0aGUgbGVhcm5lciB2aWV3LlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vZXhwbG9yYXRpb24vUmVhZE9ubHlFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9leHBsb3JhdGlvbi1lbmdpbmUuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZXhwbG9yYXRpb24tcGxheWVyLXN0YXRlLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xheW91dC1kaXJlY3RpdmVzLycgK1xuICAgICdmZWVkYmFjay1wb3B1cC5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3BsYXllci1wb3NpdGlvbi5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zdWdnZXN0aW9uLW1vZGFsLWZvci1sZWFybmVyLWxvY2FsLXZpZXcvJyArXG4gICAgJ3N1Z2dlc3Rpb24tbW9kYWwtZm9yLWV4cGxvcmF0aW9uLXBsYXllci5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BbGVydHNTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Vc2VyU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvc3RhdGVmdWwvRm9jdXNNYW5hZ2VyU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UuY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdsZWFybmVyTG9jYWxOYXYnLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sYXlvdXQtZGlyZWN0aXZlcy8nICtcbiAgICAgICAgICAgICAgICAnbGVhcm5lci1sb2NhbC1uYXYuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJGh0dHAnLCAnJHJvb3RTY29wZScsICckdWliTW9kYWwnLCAnQWxlcnRzU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ0V4cGxvcmF0aW9uRW5naW5lU2VydmljZScsICdFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ0ZvY3VzTWFuYWdlclNlcnZpY2UnLCAnUmVhZE9ubHlFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnU3VnZ2VzdGlvbk1vZGFsRm9yRXhwbG9yYXRpb25QbGF5ZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCAnVXNlclNlcnZpY2UnLCAnRkVFREJBQ0tfUE9QT1ZFUl9QQVRIJyxcbiAgICAgICAgICAgICAgICAnRkxBR19FWFBMT1JBVElPTl9VUkxfVEVNUExBVEUnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkaHR0cCwgJHJvb3RTY29wZSwgJHVpYk1vZGFsLCBBbGVydHNTZXJ2aWNlLCBFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2UsIEV4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLCBGb2N1c01hbmFnZXJTZXJ2aWNlLCBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UsIFN1Z2dlc3Rpb25Nb2RhbEZvckV4cGxvcmF0aW9uUGxheWVyU2VydmljZSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UsIFVzZXJTZXJ2aWNlLCBGRUVEQkFDS19QT1BPVkVSX1BBVEgsIEZMQUdfRVhQTE9SQVRJT05fVVJMX1RFTVBMQVRFKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgY3RybC5leHBsb3JhdGlvbklkID0gRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlLmdldEV4cGxvcmF0aW9uSWQoKTtcbiAgICAgICAgICAgICAgICAgICAgUmVhZE9ubHlFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAubG9hZEV4cGxvcmF0aW9uKGN0cmwuZXhwbG9yYXRpb25JZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChleHBsb3JhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5jYW5FZGl0ID0gZXhwbG9yYXRpb24uY2FuX2VkaXQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnVzZXJuYW1lID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUubG9hZGluZ01lc3NhZ2UgPSAnTG9hZGluZyc7XG4gICAgICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmdldFVzZXJJbmZvQXN5bmMoKS50aGVuKGZ1bmN0aW9uICh1c2VySW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC51c2VybmFtZSA9IHVzZXJJbmZvLmdldFVzZXJuYW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmxvYWRpbmdNZXNzYWdlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmdldEZlZWRiYWNrUG9wb3ZlclVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybChGRUVEQkFDS19QT1BPVkVSX1BBVEgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnNob3dMZWFybmVyU3VnZ2VzdGlvbk1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgU3VnZ2VzdGlvbk1vZGFsRm9yRXhwbG9yYXRpb25QbGF5ZXJTZXJ2aWNlLnNob3dTdWdnZXN0aW9uTW9kYWwoJ2VkaXRfZXhwbG9yYXRpb25fc3RhdGVfY29udGVudCcsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5zaG93RmxhZ0V4cGxvcmF0aW9uTW9kYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvdGVtcGxhdGVzLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmxhZy1leHBsb3JhdGlvbi1tb2RhbC50ZW1wbGF0ZS5odG1sJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJ1BsYXllclBvc2l0aW9uU2VydmljZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlLCBQbGF5ZXJQb3NpdGlvblNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mbGFnTWVzc2FnZVRleHRhcmVhSXNTaG93biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlTmFtZSA9IFBsYXllclBvc2l0aW9uU2VydmljZS5nZXRDdXJyZW50U3RhdGVOYW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZsYWdNZXNzYWdlVGV4dGFyZWEgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZsYWdNZXNzYWdlVGV4dGFyZWFJc1Nob3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9jdXNNYW5hZ2VyU2VydmljZS5zZXRGb2N1cygnZmxhZ01lc3NhZ2VUZXh0YXJlYScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0UmVwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZmxhZ01lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0X3R5cGU6ICRzY29wZS5mbGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0X3RleHQ6ICRzY29wZS5mbGFnTWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbGFnRXhwbG9yYXRpb25VcmwgPSBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5pbnRlcnBvbGF0ZVVybChGTEFHX0VYUExPUkFUSU9OX1VSTF9URU1QTEFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbl9pZDogY3RybC5leHBsb3JhdGlvbklkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcG9ydCA9ICgnWycgKyByZXN1bHQuc3RhdGUgKyAnXSAoJyArIHJlc3VsdC5yZXBvcnRfdHlwZSArICcpICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVwb3J0X3RleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLnBvc3QoZmxhZ0V4cGxvcmF0aW9uVXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9ydF90ZXh0OiByZXBvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxlcnRzU2VydmljZS5hZGRXYXJuaW5nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3RlbXBsYXRlcy8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdleHBsb3JhdGlvbi1zdWNjZXNzZnVsbHktZmxhZ2dlZC1tb2RhbC50ZW1wbGF0ZS5odG1sJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgdGhlIGxlYXJuZXIgdmlldyBpbmZvIHNlY3Rpb24gb2YgdGhlXG4gKiBmb290ZXIuXG4gKi9cbnJlcXVpcmUoJ2NvbXBvbmVudHMvcHJvZmlsZS1saW5rLWRpcmVjdGl2ZXMvcHJvZmlsZS1saW5rLWltYWdlLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9jb21tb24tbGF5b3V0LWRpcmVjdGl2ZXMvY29tbW9uLWVsZW1lbnRzLycgK1xuICAgICdzaGFyaW5nLWxpbmtzLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnZmlsdGVycy9zdW1tYXJpemUtbm9ubmVnYXRpdmUtbnVtYmVyLmZpbHRlci50cycpO1xucmVxdWlyZSgnZmlsdGVycy9zdHJpbmctdXRpbGl0eS1maWx0ZXJzL3RydW5jYXRlLWFuZC1jYXBpdGFsaXplLmZpbHRlci50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9yYXRpbmdzL3JhdGluZy1jb21wdXRhdGlvbi9yYXRpbmctY29tcHV0YXRpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL1JlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQ29udGV4dFNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL2NvbnRleHR1YWwvVXJsU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvRGF0ZVRpbWVGb3JtYXRTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ2xlYXJuZXJWaWV3SW5mbycsIFtcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCBmdW5jdGlvbiAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sYXlvdXQtZGlyZWN0aXZlcy8nICtcbiAgICAgICAgICAgICAgICAnbGVhcm5lci12aWV3LWluZm8uZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJGh0dHAnLCAnJGxvZycsICckdWliTW9kYWwnLCAnQ29udGV4dFNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UnLCAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdVcmxTZXJ2aWNlJywgJ0RFRkFVTFRfVFdJVFRFUl9TSEFSRV9NRVNTQUdFX0VESVRPUicsXG4gICAgICAgICAgICAgICAgJ0VYUExPUkFUSU9OX1NVTU1BUllfREFUQV9VUkxfVEVNUExBVEUnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkaHR0cCwgJGxvZywgJHVpYk1vZGFsLCBDb250ZXh0U2VydmljZSwgUmVhZE9ubHlFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSwgVXJsU2VydmljZSwgREVGQVVMVF9UV0lUVEVSX1NIQVJFX01FU1NBR0VfRURJVE9SLCBFWFBMT1JBVElPTl9TVU1NQVJZX0RBVEFfVVJMX1RFTVBMQVRFKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGxvcmF0aW9uSWQgPSBDb250ZXh0U2VydmljZS5nZXRFeHBsb3JhdGlvbklkKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBleHBJbmZvID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5leHBsb3JhdGlvblRpdGxlID0gJ0xvYWRpbmcuLi4nO1xuICAgICAgICAgICAgICAgICAgICBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UuZmV0Y2hFeHBsb3JhdGlvbihleHBsb3JhdGlvbklkLCBVcmxTZXJ2aWNlLmdldEV4cGxvcmF0aW9uVmVyc2lvbkZyb21VcmwoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5leHBsb3JhdGlvblRpdGxlID0gcmVzcG9uc2UuZXhwbG9yYXRpb24udGl0bGU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnNob3dJbmZvcm1hdGlvbkNhcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhwSW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5JbmZvcm1hdGlvbkNhcmRNb2RhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEVYUExPUkFUSU9OX1NVTU1BUllfREFUQV9VUkxfVEVNUExBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdpZmllZF9leHBfaWRzOiBKU09OLnN0cmluZ2lmeShbZXhwbG9yYXRpb25JZF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZV9wcml2YXRlX2V4cGxvcmF0aW9uczogSlNPTi5zdHJpbmdpZnkodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cEluZm8gPSByZXNwb25zZS5kYXRhLnN1bW1hcmllc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkluZm9ybWF0aW9uQ2FyZE1vZGFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmVycm9yKCdJbmZvcm1hdGlvbiBjYXJkIGZhaWxlZCB0byBsb2FkIGZvciBleHBsb3JhdGlvbiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3BlbkluZm9ybWF0aW9uQ2FyZE1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS90ZW1wbGF0ZXMvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbmZvcm1hdGlvbi1jYXJkLW1vZGFsLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdvcHBpYS1tb2RhbC1pbmZvcm1hdGlvbi1jYXJkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cEluZm86IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleHBJbmZvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRGF0ZVRpbWVGb3JtYXRTZXJ2aWNlJywgJ1JhdGluZ0NvbXB1dGF0aW9uU2VydmljZScsICdleHBJbmZvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsIERhdGVUaW1lRm9ybWF0U2VydmljZSwgUmF0aW5nQ29tcHV0YXRpb25TZXJ2aWNlLCBleHBJbmZvLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldEV4cGxvcmF0aW9uVGFnc1N1bW1hcnkgPSBmdW5jdGlvbiAoYXJyYXlPZlRhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFnc1RvU2hvdyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWdzSW5Ub29sdGlwID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIE1BWF9DSEFSU19UT19TSE9XID0gNDU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3TGVuZ3RoID0gKHRhZ3NUb1Nob3cudG9TdHJpbmcoKSArIGFycmF5T2ZUYWdzW2ldKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdMZW5ndGggPCBNQVhfQ0hBUlNfVE9fU0hPVykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnc1RvU2hvdy5wdXNoKGFycmF5T2ZUYWdzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3NJblRvb2x0aXAucHVzaChhcnJheU9mVGFnc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnc1RvU2hvdzogdGFnc1RvU2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnc0luVG9vbHRpcDogdGFnc0luVG9vbHRpcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldExhc3RVcGRhdGVkU3RyaW5nID0gZnVuY3Rpb24gKG1pbGxpc1NpbmNlRXBvY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZVRpbWVGb3JtYXRTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRMb2NhbGVBYmJyZXZpYXRlZERhdGV0aW1lU3RyaW5nKG1pbGxpc1NpbmNlRXBvY2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERUZBVUxUX1RXSVRURVJfU0hBUkVfTUVTU0FHRV9QTEFZRVIgPSAoREVGQVVMVF9UV0lUVEVSX1NIQVJFX01FU1NBR0VfRURJVE9SKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hdmVyYWdlUmF0aW5nID0gKFJhdGluZ0NvbXB1dGF0aW9uU2VydmljZS5jb21wdXRlQXZlcmFnZVJhdGluZyhleHBJbmZvLnJhdGluZ3MpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cmlidXRvcnNTdW1tYXJ5ID0gKGV4cEluZm8uaHVtYW5fcmVhZGFibGVfY29udHJpYnV0b3JzX3N1bW1hcnkgfHwge30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRyaWJ1dG9yTmFtZXMgPSBPYmplY3Qua2V5cyhjb250cmlidXRvcnNTdW1tYXJ5KS5zb3J0KGZ1bmN0aW9uIChjb250cmlidXRvclVzZXJuYW1lMSwgY29udHJpYnV0b3JVc2VybmFtZTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tbWl0c09mQ29udHJpYnV0b3IxID0gY29udHJpYnV0b3JzU3VtbWFyeVtjb250cmlidXRvclVzZXJuYW1lMV0ubnVtX2NvbW1pdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1pdHNPZkNvbnRyaWJ1dG9yMiA9IGNvbnRyaWJ1dG9yc1N1bW1hcnlbY29udHJpYnV0b3JVc2VybmFtZTJdLm51bV9jb21taXRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21taXRzT2ZDb250cmlidXRvcjIgLSBjb21taXRzT2ZDb250cmlidXRvcjE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5leHBsb3JhdGlvbklkID0gZXhwSW5mby5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5leHBsb3JhdGlvblRhZ3MgPSBnZXRFeHBsb3JhdGlvblRhZ3NTdW1tYXJ5KGV4cEluZm8udGFncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwbG9yYXRpb25UaXRsZSA9IGV4cEluZm8udGl0bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5mb0NhcmRCYWNrZ3JvdW5kQ3NzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogZXhwSW5mby50aHVtYm5haWxfYmdfY29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5mb0NhcmRCYWNrZ3JvdW5kSW1hZ2VVcmwgPSBleHBJbmZvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRodW1ibmFpbF9pY29uX3VybDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRTdGF0aWNJbWFnZVVybCA9IChVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRTdGF0aWNJbWFnZVVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFzdFVwZGF0ZWRTdHJpbmcgPSBnZXRMYXN0VXBkYXRlZFN0cmluZyhleHBJbmZvLmxhc3RfdXBkYXRlZF9tc2VjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5udW1WaWV3cyA9IGV4cEluZm8ubnVtX3ZpZXdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9iamVjdGl2ZSA9IGV4cEluZm8ub2JqZWN0aXZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4cGxvcmF0aW9uSXNQcml2YXRlID0gKGV4cEluZm8uc3RhdHVzID09PSAncHJpdmF0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTcgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIG5hdmlnYXRpb24gaW4gdGhlIGNvbnZlcnNhdGlvbiBza2luLlxuICovXG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sZWFybmVyLWV4cGVyaWVuY2UvJyArXG4gICAgJ2NvbnRpbnVlLWJ1dHRvbi5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2V4cGxvcmF0aW9uLWVuZ2luZS5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9leHBsb3JhdGlvbi1wbGF5ZXItc3RhdGUuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcGxheWVyLXBvc2l0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3BsYXllci10cmFuc2NyaXB0LnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL2NvbnRleHR1YWwvVXJsU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvY29udGV4dHVhbC9XaW5kb3dEaW1lbnNpb25zU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UuY29uc3RhbnRzLmFqcy50cycpO1xucmVxdWlyZSgncGFnZXMvaW50ZXJhY3Rpb24tc3BlY3MuY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdwcm9ncmVzc05hdicsIFtcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCBmdW5jdGlvbiAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIG9uU3VibWl0OiAnJicsXG4gICAgICAgICAgICAgICAgb25DbGlja0NvbnRpbnVlQnV0dG9uOiAnJicsXG4gICAgICAgICAgICAgICAgaXNMZWFybkFnYWluQnV0dG9uOiAnJicsXG4gICAgICAgICAgICAgICAgZ2V0RGlzcGxheWVkQ2FyZDogJyZkaXNwbGF5ZWRDYXJkJyxcbiAgICAgICAgICAgICAgICBpc1N1Ym1pdEJ1dHRvblNob3duOiAnJnN1Ym1pdEJ1dHRvbklzU2hvd24nLFxuICAgICAgICAgICAgICAgIGlzU3VibWl0QnV0dG9uRGlzYWJsZWQ6ICcmc3VibWl0QnV0dG9uSXNEaXNhYmxlZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sYXlvdXQtZGlyZWN0aXZlcy8nICtcbiAgICAgICAgICAgICAgICAncHJvZ3Jlc3MtbmF2LmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgJyRzY29wZScsICckcm9vdFNjb3BlJywgJ1BsYXllclBvc2l0aW9uU2VydmljZScsICdVcmxTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UnLCAnRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnV2luZG93RGltZW5zaW9uc1NlcnZpY2UnLCAnVFdPX0NBUkRfVEhSRVNIT0xEX1BYJyxcbiAgICAgICAgICAgICAgICAnQ09OVElOVUVfQlVUVE9OX0ZPQ1VTX0xBQkVMJywgJ0lOVEVSQUNUSU9OX1NQRUNTJyxcbiAgICAgICAgICAgICAgICAnRXhwbG9yYXRpb25QbGF5ZXJTdGF0ZVNlcnZpY2UnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsIFBsYXllclBvc2l0aW9uU2VydmljZSwgVXJsU2VydmljZSwgUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UsIEV4cGxvcmF0aW9uRW5naW5lU2VydmljZSwgV2luZG93RGltZW5zaW9uc1NlcnZpY2UsIFRXT19DQVJEX1RIUkVTSE9MRF9QWCwgQ09OVElOVUVfQlVUVE9OX0ZPQ1VTX0xBQkVMLCBJTlRFUkFDVElPTl9TUEVDUywgRXhwbG9yYXRpb25QbGF5ZXJTdGF0ZVNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkNPTlRJTlVFX0JVVFRPTl9GT0NVU19MQUJFTCA9IENPTlRJTlVFX0JVVFRPTl9GT0NVU19MQUJFTDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzSWZyYW1lZCA9IFVybFNlcnZpY2UuaXNJZnJhbWVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2NyaXB0TGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uSXNJbmxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25IYXNOYXZTdWJtaXRCdXR0b24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZURpc3BsYXllZENhcmRJbmZvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjcmlwdExlbmd0aCA9IFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmdldE51bUNhcmRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheWVkQ2FyZEluZGV4ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGF5ZXJQb3NpdGlvblNlcnZpY2UuZ2V0RGlzcGxheWVkQ2FyZEluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheWVkQ2FyZCA9ICRzY29wZS5nZXREaXNwbGF5ZWRDYXJkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGFzUHJldmlvdXMgPSAkc2NvcGUuZGlzcGxheWVkQ2FyZEluZGV4ID4gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5oYXNOZXh0ID0gIVBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmlzTGFzdENhcmQoJHNjb3BlLmRpc3BsYXllZENhcmRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29uY2VwdENhcmRJc0JlaW5nU2hvd24gPSAoJHNjb3BlLmRpc3BsYXllZENhcmQuZ2V0U3RhdGVOYW1lKCkgPT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhRXhwbG9yYXRpb25QbGF5ZXJTdGF0ZVNlcnZpY2UuaXNJblF1ZXN0aW9uTW9kZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9ICRzY29wZS5kaXNwbGF5ZWRDYXJkLmdldEludGVyYWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5jb25jZXB0Q2FyZElzQmVpbmdTaG93bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0aW9uSXNJbmxpbmUgPSAoJHNjb3BlLmRpc3BsYXllZENhcmQuaXNJbnRlcmFjdGlvbklubGluZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW50ZXJhY3Rpb25DdXN0b21pemF0aW9uQXJncyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5ZWRDYXJkLmdldEludGVyYWN0aW9uQ3VzdG9taXphdGlvbkFyZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW50ZXJhY3Rpb25JZCA9ICRzY29wZS5kaXNwbGF5ZWRDYXJkLmdldEludGVyYWN0aW9uSWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmludGVyYWN0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25IYXNOYXZTdWJtaXRCdXR0b24gPSAoZG9lc0ludGVyYWN0aW9uSGF2ZU5hdlN1Ym1pdEJ1dHRvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGVscENhcmRIYXNDb250aW51ZUJ1dHRvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQbGF5ZXJQb3NpdGlvblNlcnZpY2UuZ2V0RGlzcGxheWVkQ2FyZEluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHVwZGF0ZURpc3BsYXllZENhcmRJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRvbignaGVscENhcmRBdmFpbGFibGUnLCBmdW5jdGlvbiAoZXZ0LCBoZWxwQ2FyZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhlbHBDYXJkSGFzQ29udGludWVCdXR0b24gPSBoZWxwQ2FyZC5oYXNDb250aW51ZUJ1dHRvbjtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb2VzSW50ZXJhY3Rpb25IYXZlTmF2U3VibWl0QnV0dG9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChCb29sZWFuKCRzY29wZS5pbnRlcmFjdGlvbklkKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOVEVSQUNUSU9OX1NQRUNTWyRzY29wZS5pbnRlcmFjdGlvbklkXS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd19nZW5lcmljX3N1Ym1pdF9idXR0b24pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlQ2FyZCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0cmFuc2NyaXB0TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxheWVyUG9zaXRpb25TZXJ2aWNlLnJlY29yZE5hdmlnYXRpb25CdXR0b25DbGljaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYXllclBvc2l0aW9uU2VydmljZS5zZXREaXNwbGF5ZWRDYXJkSW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlQWN0aXZlU3RhdGVJZkluRWRpdG9yJywgUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldEN1cnJlbnRTdGF0ZU5hbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdjdXJyZW50UXVlc3Rpb25DaGFuZ2VkJywgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1RhcmdldCBjYXJkIGluZGV4IG91dCBvZiBib3VuZHMuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybnMgd2hldGhlciB0aGUgc2NyZWVuIGlzIHdpZGUgZW5vdWdoIHRvIGZpdCB0d29cbiAgICAgICAgICAgICAgICAgICAgLy8gY2FyZHMgKGUuZy4sIHRoZSB0dXRvciBhbmQgc3VwcGxlbWVudGFsIGNhcmRzKSBzaWRlLWJ5LXNpZGUuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5XaW5kb3dTaG93VHdvQ2FyZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gV2luZG93RGltZW5zaW9uc1NlcnZpY2UuZ2V0V2lkdGgoKSA+IFRXT19DQVJEX1RIUkVTSE9MRF9QWDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3VsZEdlbmVyaWNTdWJtaXRCdXR0b25CZVNob3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbnRlcmFjdGlvbklkID09PSAnSXRlbVNlbGVjdGlvbklucHV0JyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcmFjdGlvbkN1c3RvbWl6YXRpb25BcmdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXhBbGxvd2FibGVTZWxlY3Rpb25Db3VudC52YWx1ZSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZG9lc0ludGVyYWN0aW9uSGF2ZU5hdlN1Ym1pdEJ1dHRvbigpICYmIChpbnRlcmFjdGlvbklzSW5saW5lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgISRzY29wZS5jYW5XaW5kb3dTaG93VHdvQ2FyZHMoKSkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvdWxkQ29udGludWVCdXR0b25CZVNob3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jb25jZXB0Q2FyZElzQmVpbmdTaG93bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4oaW50ZXJhY3Rpb25Jc0lubGluZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5ZWRDYXJkLmlzQ29tcGxldGVkKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheWVkQ2FyZC5nZXRMYXN0T3BwaWFSZXNwb25zZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgdGhlIENvbnRpbnVlIGJ1dHRvbiBpbiBleHBsb3JhdGlvbiBwbGF5ZXIgYW5kXG4gKiBlZGl0b3IuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnY29udGludWVCdXR0b24nLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBvbkNsaWNrQ29udGludWVCdXR0b246ICcmJyxcbiAgICAgICAgICAgICAgICBpc0xlYXJuQWdhaW5CdXR0b246ICcmJyxcbiAgICAgICAgICAgICAgICBmb2N1c0xhYmVsOiAnQCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sZWFybmVyLWV4cGVyaWVuY2UvJyArXG4gICAgICAgICAgICAgICAgJ2NvbnRpbnVlLWJ1dHRvbi5kaXJlY3RpdmUuaHRtbCcpXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENvbnRyb2xsZXIgZm9yIHRoZSBjb252ZXJzYXRpb24gc2tpbi5cbiAqL1xucmVxdWlyZSgnY29tcG9uZW50cy9xdWVzdGlvbi1kaXJlY3RpdmVzL3F1ZXN0aW9uLXBsYXllci9zZXJ2aWNlcy8nICtcbiAgICAncXVlc3Rpb24tcGxheWVyLXN0YXRlLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvcmF0aW5ncy9yYXRpbmctZGlzcGxheS9yYXRpbmctZGlzcGxheS5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvc3VtbWFyeS10aWxlL2V4cGxvcmF0aW9uLXN1bW1hcnktdGlsZS5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvc3VtbWFyeS10aWxlL2NvbGxlY3Rpb24tc3VtbWFyeS10aWxlLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnZGlyZWN0aXZlcy9hbmd1bGFyLWh0bWwtYmluZC5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xheW91dC1kaXJlY3RpdmVzLycgK1xuICAgICdjb3JyZWN0bmVzcy1mb290ZXIuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sYXlvdXQtZGlyZWN0aXZlcy9wcm9ncmVzcy1uYXYuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sZWFybmVyLWV4cGVyaWVuY2UvJyArXG4gICAgJ2xlYXJuZXItYW5zd2VyLWluZm8tY2FyZC5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xlYXJuZXItZXhwZXJpZW5jZS8nICtcbiAgICAnc3VwcGxlbWVudGFsLWNhcmQuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sZWFybmVyLWV4cGVyaWVuY2UvdHV0b3ItY2FyZC5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2xlYXJuZXItYW5zd2VyLWluZm8uc2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL2NvbGxlY3Rpb24vR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vY29sbGVjdGlvbi9SZWFkT25seUNvbGxlY3Rpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL0VkaXRhYmxlRXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL1JlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3F1ZXN0aW9uL1ByZXRlc3RRdWVzdGlvbkJhY2tlbmRBcGlTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vc2tpbGwvQ29uY2VwdENhcmRCYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3NraWxsL0NvbmNlcHRDYXJkT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL3N0YXRlX2NhcmQvU3RhdGVDYXJkT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL3N0b3J5X3ZpZXdlci9SZWFkT25seVN0b3J5Tm9kZU9iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9zdG9yeV92aWV3ZXIvU3RvcnlWaWV3ZXJCYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvJyArXG4gICAgJ2F1ZGlvLXRyYW5zbGF0aW9uLW1hbmFnZXIuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvY3VycmVudC1pbnRlcmFjdGlvbi5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9leHBsb3JhdGlvbi1lbmdpbmUuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZXhwbG9yYXRpb24tcGxheWVyLXN0YXRlLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzLycgK1xuICAgICdleHBsb3JhdGlvbi1yZWNvbW1lbmRhdGlvbnMuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZmF0aWd1ZS1kZXRlY3Rpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvbGF5b3V0LWRpcmVjdGl2ZXMvJyArXG4gICAgJ2ZlZWRiYWNrLXBvcHVwLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvJyArXG4gICAgJ2hpbnRzLWFuZC1zb2x1dGlvbi1tYW5hZ2VyLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2ltYWdlLXByZWxvYWRlci5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9sZWFybmVyLXBhcmFtcy5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9sZWFybmVyLXZpZXctcmF0aW5nLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL251bWJlci1hdHRlbXB0cy5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy8nICtcbiAgICAncGxheWVyLWNvcnJlY3RuZXNzLWZlZWRiYWNrLWVuYWJsZWQuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcGxheWVyLXBvc2l0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3BsYXllci10cmFuc2NyaXB0LnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3F1ZXN0aW9uLXBsYXllci1lbmdpbmUuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvJyArXG4gICAgJ3JlZnJlc2hlci1leHBsb3JhdGlvbi1jb25maXJtYXRpb24tbW9kYWwuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvc3RhdGUtY2xhc3NpZmllci1tYXBwaW5nLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3N0YXRzLXJlcG9ydGluZy5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BbGVydHNTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Db250ZXh0U2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvTWVzc2VuZ2VyU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvUGxheXRocm91Z2hTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9TaXRlQW5hbHl0aWNzU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvVXNlclNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL2NvbnRleHR1YWwvVXJsU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvY29udGV4dHVhbC9XaW5kb3dEaW1lbnNpb25zU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvc3RhdGVmdWwvRm9jdXNNYW5hZ2VyU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UuY29uc3RhbnRzLmFqcy50cycpO1xucmVxdWlyZSgncGFnZXMvaW50ZXJhY3Rpb24tc3BlY3MuY29uc3RhbnRzLmFqcy50cycpO1xuLy8gTm90ZTogVGhpcyBmaWxlIHNob3VsZCBiZSBhc3N1bWVkIHRvIGJlIGluIGFuIElJRkUsIGFuZCB0aGUgY29uc3RhbnRzIGJlbG93XG4vLyBzaG91bGQgb25seSBiZSB1c2VkIHdpdGhpbiB0aGlzIGZpbGUuXG52YXIgVElNRV9GQURFT1VUX01TRUMgPSAxMDA7XG52YXIgVElNRV9IRUlHSFRfQ0hBTkdFX01TRUMgPSA1MDA7XG52YXIgVElNRV9GQURFSU5fTVNFQyA9IDEwMDtcbnZhciBUSU1FX05VTV9DQVJEU19DSEFOR0VfTVNFQyA9IDUwMDtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmFuaW1hdGlvbignLmNvbnZlcnNhdGlvbi1za2luLWFuaW1hdGUtdHV0b3ItY2FyZC1vbi1uYXJyb3cnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHR1dG9yQ2FyZExlZnQsIHR1dG9yQ2FyZFdpZHRoLCB0dXRvckNhcmRIZWlnaHQsIG9wcGlhQXZhdGFyTGVmdDtcbiAgICB2YXIgdHV0b3JDYXJkQW5pbWF0ZWRMZWZ0LCB0dXRvckNhcmRBbmltYXRlZFdpZHRoO1xuICAgIHZhciBiZWZvcmVBZGRDbGFzcyA9IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcbiAgICAgICAgaWYgKGNsYXNzTmFtZSAhPT0gJ25nLWhpZGUnKSB7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR1dG9yQ2FyZCA9IGVsZW1lbnQ7XG4gICAgICAgIHZhciBzdXBwbGVtZW50YWxDYXJkID0gJCgnLmNvbnZlcnNhdGlvbi1za2luLXN1cHBsZW1lbnRhbC1jYXJkLWNvbnRhaW5lcicpO1xuICAgICAgICB2YXIgb3BwaWFBdmF0YXIgPSAkKCcuY29udmVyc2F0aW9uLXNraW4tb3BwaWEtYXZhdGFyLnNob3ctdHV0b3ItY2FyZCcpO1xuICAgICAgICBvcHBpYUF2YXRhckxlZnQgPSBzdXBwbGVtZW50YWxDYXJkLnBvc2l0aW9uKCkubGVmdCArXG4gICAgICAgICAgICBzdXBwbGVtZW50YWxDYXJkLndpZHRoKCkgLSBvcHBpYUF2YXRhci53aWR0aCgpO1xuICAgICAgICB0dXRvckNhcmRMZWZ0ID0gdHV0b3JDYXJkLnBvc2l0aW9uKCkubGVmdDtcbiAgICAgICAgdHV0b3JDYXJkV2lkdGggPSB0dXRvckNhcmQud2lkdGgoKTtcbiAgICAgICAgdHV0b3JDYXJkSGVpZ2h0ID0gdHV0b3JDYXJkLmhlaWdodCgpO1xuICAgICAgICBpZiAodHV0b3JDYXJkLm9mZnNldCgpLmxlZnQgKyB0dXRvckNhcmRXaWR0aCA+IG9wcGlhQXZhdGFyLm9mZnNldCgpLmxlZnQpIHtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25MZW5ndGggPSBNYXRoLm1pbihvcHBpYUF2YXRhckxlZnQgLSB0dXRvckNhcmQub2Zmc2V0KCkubGVmdCwgdHV0b3JDYXJkV2lkdGgpO1xuICAgICAgICAgICAgdHV0b3JDYXJkQW5pbWF0ZWRMZWZ0ID0gdHV0b3JDYXJkTGVmdCArIGFuaW1hdGlvbkxlbmd0aDtcbiAgICAgICAgICAgIHR1dG9yQ2FyZEFuaW1hdGVkV2lkdGggPSB0dXRvckNhcmRXaWR0aCAtIGFuaW1hdGlvbkxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHR1dG9yQ2FyZEFuaW1hdGVkTGVmdCA9IG9wcGlhQXZhdGFyTGVmdDtcbiAgICAgICAgICAgIHR1dG9yQ2FyZEFuaW1hdGVkV2lkdGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIG9wcGlhQXZhdGFyLmhpZGUoKTtcbiAgICAgICAgdHV0b3JDYXJkLmNzcyh7XG4gICAgICAgICAgICAnbWluLXdpZHRoJzogMFxuICAgICAgICB9KTtcbiAgICAgICAgdHV0b3JDYXJkLmFuaW1hdGUoe1xuICAgICAgICAgICAgbGVmdDogdHV0b3JDYXJkQW5pbWF0ZWRMZWZ0LFxuICAgICAgICAgICAgd2lkdGg6IHR1dG9yQ2FyZEFuaW1hdGVkV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0sIDUwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb3BwaWFBdmF0YXIuc2hvdygpO1xuICAgICAgICAgICAgdHV0b3JDYXJkLmNzcyh7XG4gICAgICAgICAgICAgICAgbGVmdDogJycsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogJycsXG4gICAgICAgICAgICAgICAgJ21pbi13aWR0aCc6ICcnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7XG4gICAgICAgIGlmIChjbGFzc05hbWUgIT09ICduZy1oaWRlJykge1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0dXRvckNhcmQgPSBlbGVtZW50O1xuICAgICAgICAkKCcuY29udmVyc2F0aW9uLXNraW4tb3BwaWEtYXZhdGFyLnNob3ctdHV0b3ItY2FyZCcpLmhpZGUoMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdHV0b3JDYXJkLmNzcyh7XG4gICAgICAgICAgICAgICAgbGVmdDogdHV0b3JDYXJkQW5pbWF0ZWRMZWZ0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiB0dXRvckNhcmRBbmltYXRlZFdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgICdtaW4td2lkdGgnOiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHR1dG9yQ2FyZC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBsZWZ0OiB0dXRvckNhcmRMZWZ0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiB0dXRvckNhcmRXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHR1dG9yQ2FyZEhlaWdodCxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LCA1MDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0dXRvckNhcmQuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJycsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogJycsXG4gICAgICAgICAgICAgICAgICAgICdtaW4td2lkdGgnOiAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGJlZm9yZUFkZENsYXNzOiBiZWZvcmVBZGRDbGFzcyxcbiAgICAgICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzXG4gICAgfTtcbn0pO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuYW5pbWF0aW9uKCcuY29udmVyc2F0aW9uLXNraW4tYW5pbWF0ZS10dXRvci1jYXJkLWNvbnRlbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFuaW1hdGVDYXJkQ2hhbmdlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkge1xuICAgICAgICBpZiAoY2xhc3NOYW1lICE9PSAnYW5pbWF0ZS1jYXJkLWNoYW5nZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3VycmVudEhlaWdodCA9IGVsZW1lbnQuaGVpZ2h0KCk7XG4gICAgICAgIHZhciBleHBlY3RlZE5leHRIZWlnaHQgPSAkKCcuY29udmVyc2F0aW9uLXNraW4tZnV0dXJlLXR1dG9yLWNhcmQgJyArXG4gICAgICAgICAgICAnLm9wcGlhLWxlYXJuZXItdmlldy1jYXJkLWNvbnRlbnQnKS5oZWlnaHQoKTtcbiAgICAgICAgLy8gRml4IHRoZSBjdXJyZW50IGNhcmQgaGVpZ2h0LCBzbyB0aGF0IGl0IGRvZXMgbm90IGNoYW5nZSBkdXJpbmcgdGhlXG4gICAgICAgIC8vIGFuaW1hdGlvbiwgZXZlbiB0aG91Z2ggaXRzIGNvbnRlbnRzIG1pZ2h0LlxuICAgICAgICBlbGVtZW50LmNzcygnaGVpZ2h0JywgY3VycmVudEhlaWdodCk7XG4gICAgICAgIGpRdWVyeShlbGVtZW50KS5hbmltYXRlKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfSwgVElNRV9GQURFT1VUX01TRUMpLmFuaW1hdGUoe1xuICAgICAgICAgICAgaGVpZ2h0OiBleHBlY3RlZE5leHRIZWlnaHRcbiAgICAgICAgfSwgVElNRV9IRUlHSFRfQ0hBTkdFX01TRUMpLmFuaW1hdGUoe1xuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9LCBUSU1FX0ZBREVJTl9NU0VDLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNzcygnaGVpZ2h0JywgJycpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjYW5jZWwpIHtcbiAgICAgICAgICAgIGlmIChjYW5jZWwpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNzcygnb3BhY2l0eScsICcxLjAnKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNzcygnaGVpZ2h0JywgJycpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkQ2xhc3M6IGFuaW1hdGVDYXJkQ2hhbmdlXG4gICAgfTtcbn0pO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuYW5pbWF0aW9uKCcuY29udmVyc2F0aW9uLXNraW4tYW5pbWF0ZS1jYXJkcycsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBUaGlzIHJlbW92ZXMgdGhlIG5ld2x5LWFkZGVkIGNsYXNzIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC5cbiAgICB2YXIgYW5pbWF0ZUNhcmRzID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkge1xuICAgICAgICB2YXIgdHV0b3JDYXJkRWx0ID0galF1ZXJ5KGVsZW1lbnQpLmZpbmQoJy5jb252ZXJzYXRpb24tc2tpbi1tYWluLXR1dG9yLWNhcmQnKTtcbiAgICAgICAgdmFyIHN1cHBsZW1lbnRhbENhcmRFbHQgPSBqUXVlcnkoZWxlbWVudCkuZmluZCgnLmNvbnZlcnNhdGlvbi1za2luLXN1cHBsZW1lbnRhbC1jYXJkLWNvbnRhaW5lcicpO1xuICAgICAgICBpZiAoY2xhc3NOYW1lID09PSAnYW5pbWF0ZS10by10d28tY2FyZHMnKSB7XG4gICAgICAgICAgICB2YXIgc3VwcGxlbWVudGFsV2lkdGggPSBzdXBwbGVtZW50YWxDYXJkRWx0LndpZHRoKCk7XG4gICAgICAgICAgICBzdXBwbGVtZW50YWxDYXJkRWx0LmNzcyh7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgJ21pbi13aWR0aCc6ICcwJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAnMCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3VwcGxlbWVudGFsQ2FyZEVsdC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogc3VwcGxlbWVudGFsV2lkdGhcbiAgICAgICAgICAgIH0sIFRJTUVfTlVNX0NBUkRTX0NIQU5HRV9NU0VDLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3VwcGxlbWVudGFsQ2FyZEVsdC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogJzEnXG4gICAgICAgICAgICAgICAgfSwgVElNRV9GQURFSU5fTVNFQywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdXBwbGVtZW50YWxDYXJkRWx0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWluLXdpZHRoJzogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAnJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLnJlbW92ZUNsYXNzKCdhbmltYXRlLXRvLXR3by1jYXJkcycpO1xuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2FuY2VsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbCkge1xuICAgICAgICAgICAgICAgICAgICBzdXBwbGVtZW50YWxDYXJkRWx0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWluLXdpZHRoJzogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAnJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3VwcGxlbWVudGFsQ2FyZEVsdC5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS5yZW1vdmVDbGFzcygnYW5pbWF0ZS10by10d28tY2FyZHMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsYXNzTmFtZSA9PT0gJ2FuaW1hdGUtdG8tb25lLWNhcmQnKSB7XG4gICAgICAgICAgICBzdXBwbGVtZW50YWxDYXJkRWx0LmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICAnbWluLXdpZHRoJzogMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdXBwbGVtZW50YWxDYXJkRWx0LmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIHdpZHRoOiAwXG4gICAgICAgICAgICB9LCBUSU1FX05VTV9DQVJEU19DSEFOR0VfTVNFQywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtZW50KS5yZW1vdmVDbGFzcygnYW5pbWF0ZS10by1vbmUtY2FyZCcpO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjYW5jZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBsZW1lbnRhbENhcmRFbHQuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi13aWR0aCc6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdXBwbGVtZW50YWxDYXJkRWx0LnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLnJlbW92ZUNsYXNzKCdhbmltYXRlLXRvLW9uZS1jYXJkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkQ2xhc3M6IGFuaW1hdGVDYXJkc1xuICAgIH07XG59KTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnY29udmVyc2F0aW9uU2tpbicsIFtcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCAnVXJsU2VydmljZScsXG4gICAgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlLCBVcmxTZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBnZXRRdWVzdGlvblBsYXllckNvbmZpZzogJyZxdWVzdGlvblBsYXllckNvbmZpZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzSWZyYW1lZCA9IFVybFNlcnZpY2UuaXNJZnJhbWVkKCk7XG4gICAgICAgICAgICAgICAgc2NvcGUuZGlyZWN0aXZlVGVtcGxhdGUgPSBpc0lmcmFtZWQgP1xuICAgICAgICAgICAgICAgICAgICBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xlYXJuZXItZXhwZXJpZW5jZS8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb252ZXJzYXRpb24tc2tpbi1lbWJlZC5kaXJlY3RpdmUuaHRtbCcpIDpcbiAgICAgICAgICAgICAgICAgICAgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sZWFybmVyLWV4cGVyaWVuY2UvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29udmVyc2F0aW9uLXNraW4uZGlyZWN0aXZlLmh0bWwnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgbmctaW5jbHVkZT1cImRpcmVjdGl2ZVRlbXBsYXRlXCI+PC9kaXY+JyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJGh0dHAnLCAnJGxvY2F0aW9uJywgJyRxJywgJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyR0aW1lb3V0JyxcbiAgICAgICAgICAgICAgICAnJHRyYW5zbGF0ZScsICckd2luZG93JywgJ0FsZXJ0c1NlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2UnLCAnQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ0NvbmNlcHRDYXJkQmFja2VuZEFwaVNlcnZpY2UnLCAnQ29uY2VwdENhcmRPYmplY3RGYWN0b3J5JyxcbiAgICAgICAgICAgICAgICAnQ29udGV4dFNlcnZpY2UnLCAnQ3VycmVudEludGVyYWN0aW9uU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ0VkaXRhYmxlRXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZScsICdFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZScsICdFeHBsb3JhdGlvblJlY29tbWVuZGF0aW9uc1NlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdGYXRpZ3VlRGV0ZWN0aW9uU2VydmljZScsICdGb2N1c01hbmFnZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnR3Vlc3RDb2xsZWN0aW9uUHJvZ3Jlc3NTZXJ2aWNlJywgJ0hpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ0ltYWdlUHJlbG9hZGVyU2VydmljZScsICdMZWFybmVyQW5zd2VySW5mb1NlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdMZWFybmVyUGFyYW1zU2VydmljZScsICdMZWFybmVyVmlld1JhdGluZ1NlcnZpY2UnLCAnTWVzc2VuZ2VyU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ051bWJlckF0dGVtcHRzU2VydmljZScsICdQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdQbGF5ZXJQb3NpdGlvblNlcnZpY2UnLCAnUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdQbGF5dGhyb3VnaFNlcnZpY2UnLCAnUHJldGVzdFF1ZXN0aW9uQmFja2VuZEFwaVNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdRdWVzdGlvblBsYXllckVuZ2luZVNlcnZpY2UnLCAnUXVlc3Rpb25QbGF5ZXJTdGF0ZVNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdSZWFkT25seUNvbGxlY3Rpb25CYWNrZW5kQXBpU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ1JlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ1JlYWRPbmx5U3RvcnlOb2RlT2JqZWN0RmFjdG9yeScsXG4gICAgICAgICAgICAgICAgJ1JlZnJlc2hlckV4cGxvcmF0aW9uQ29uZmlybWF0aW9uTW9kYWxTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnU3RhdGVDbGFzc2lmaWVyTWFwcGluZ1NlcnZpY2UnLCAnU2l0ZUFuYWx5dGljc1NlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdTdGF0ZUNhcmRPYmplY3RGYWN0b3J5JywgJ1N0YXRzUmVwb3J0aW5nU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ1N0b3J5Vmlld2VyQmFja2VuZEFwaVNlcnZpY2UnLCAnVXJsU2VydmljZScsICdVc2VyU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ1dpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlJywgJ0NPTVBPTkVOVF9OQU1FX0ZFRURCQUNLJyxcbiAgICAgICAgICAgICAgICAnQ09OVEVOVF9GT0NVU19MQUJFTF9QUkVGSVgnLCAnQ09OVElOVUVfQlVUVE9OX0ZPQ1VTX0xBQkVMJyxcbiAgICAgICAgICAgICAgICAnREVGQVVMVF9UV0lUVEVSX1NIQVJFX01FU1NBR0VfRURJVE9SJyxcbiAgICAgICAgICAgICAgICAnRU5BQkxFX1NPTElDSVRfQU5TV0VSX0RFVEFJTFNfRkVBVFVSRScsXG4gICAgICAgICAgICAgICAgJ0VWRU5UX0FDVElWRV9DQVJEX0NIQU5HRUQnLCAnRVZFTlRfQVVUT1BMQVlfQVVESU8nLFxuICAgICAgICAgICAgICAgICdFVkVOVF9ORVdfQ0FSRF9BVkFJTEFCTEUnLCAnRVZFTlRfTkVXX0NBUkRfT1BFTkVEJyxcbiAgICAgICAgICAgICAgICAnRVhQTE9SQVRJT05fU1VNTUFSWV9EQVRBX1VSTF9URU1QTEFURScsICdGRUVEQkFDS19QT1BPVkVSX1BBVEgnLFxuICAgICAgICAgICAgICAgICdJTlRFUkFDVElPTl9ESVNQTEFZX01PREVfSU5MSU5FJyxcbiAgICAgICAgICAgICAgICAnSU5URVJBQ1RJT05fU1BFQ1MnLCAnTlVNX0VYUExPUkFUSU9OU19QRVJfUkVWSUVXX1RFU1QnLFxuICAgICAgICAgICAgICAgICdQQUdFX0NPTlRFWFQnLCAnU1VQUE9SVEVEX1NJVEVfTEFOR1VBR0VTJywgJ1RXT19DQVJEX1RIUkVTSE9MRF9QWCcsXG4gICAgICAgICAgICAgICAgJ1dISVRFTElTVEVEX0NPTExFQ1RJT05fSURTX0ZPUl9TQVZJTkdfR1VFU1RfUFJPR1JFU1MnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkaHR0cCwgJGxvY2F0aW9uLCAkcSwgJHJvb3RTY29wZSwgJHNjb3BlLCAkdGltZW91dCwgJHRyYW5zbGF0ZSwgJHdpbmRvdywgQWxlcnRzU2VydmljZSwgQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlLCBBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLCBDb25jZXB0Q2FyZEJhY2tlbmRBcGlTZXJ2aWNlLCBDb25jZXB0Q2FyZE9iamVjdEZhY3RvcnksIENvbnRleHRTZXJ2aWNlLCBDdXJyZW50SW50ZXJhY3Rpb25TZXJ2aWNlLCBFZGl0YWJsZUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UsIEV4cGxvcmF0aW9uRW5naW5lU2VydmljZSwgRXhwbG9yYXRpb25QbGF5ZXJTdGF0ZVNlcnZpY2UsIEV4cGxvcmF0aW9uUmVjb21tZW5kYXRpb25zU2VydmljZSwgRmF0aWd1ZURldGVjdGlvblNlcnZpY2UsIEZvY3VzTWFuYWdlclNlcnZpY2UsIEd1ZXN0Q29sbGVjdGlvblByb2dyZXNzU2VydmljZSwgSGludHNBbmRTb2x1dGlvbk1hbmFnZXJTZXJ2aWNlLCBJbWFnZVByZWxvYWRlclNlcnZpY2UsIExlYXJuZXJBbnN3ZXJJbmZvU2VydmljZSwgTGVhcm5lclBhcmFtc1NlcnZpY2UsIExlYXJuZXJWaWV3UmF0aW5nU2VydmljZSwgTWVzc2VuZ2VyU2VydmljZSwgTnVtYmVyQXR0ZW1wdHNTZXJ2aWNlLCBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UsIFBsYXllclBvc2l0aW9uU2VydmljZSwgUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UsIFBsYXl0aHJvdWdoU2VydmljZSwgUHJldGVzdFF1ZXN0aW9uQmFja2VuZEFwaVNlcnZpY2UsIFF1ZXN0aW9uUGxheWVyRW5naW5lU2VydmljZSwgUXVlc3Rpb25QbGF5ZXJTdGF0ZVNlcnZpY2UsIFJlYWRPbmx5Q29sbGVjdGlvbkJhY2tlbmRBcGlTZXJ2aWNlLCBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UsIFJlYWRPbmx5U3RvcnlOb2RlT2JqZWN0RmFjdG9yeSwgUmVmcmVzaGVyRXhwbG9yYXRpb25Db25maXJtYXRpb25Nb2RhbFNlcnZpY2UsIFN0YXRlQ2xhc3NpZmllck1hcHBpbmdTZXJ2aWNlLCBTaXRlQW5hbHl0aWNzU2VydmljZSwgU3RhdGVDYXJkT2JqZWN0RmFjdG9yeSwgU3RhdHNSZXBvcnRpbmdTZXJ2aWNlLCBTdG9yeVZpZXdlckJhY2tlbmRBcGlTZXJ2aWNlLCBVcmxTZXJ2aWNlLCBVc2VyU2VydmljZSwgV2luZG93RGltZW5zaW9uc1NlcnZpY2UsIENPTVBPTkVOVF9OQU1FX0ZFRURCQUNLLCBDT05URU5UX0ZPQ1VTX0xBQkVMX1BSRUZJWCwgQ09OVElOVUVfQlVUVE9OX0ZPQ1VTX0xBQkVMLCBERUZBVUxUX1RXSVRURVJfU0hBUkVfTUVTU0FHRV9FRElUT1IsIEVOQUJMRV9TT0xJQ0lUX0FOU1dFUl9ERVRBSUxTX0ZFQVRVUkUsIEVWRU5UX0FDVElWRV9DQVJEX0NIQU5HRUQsIEVWRU5UX0FVVE9QTEFZX0FVRElPLCBFVkVOVF9ORVdfQ0FSRF9BVkFJTEFCTEUsIEVWRU5UX05FV19DQVJEX09QRU5FRCwgRVhQTE9SQVRJT05fU1VNTUFSWV9EQVRBX1VSTF9URU1QTEFURSwgRkVFREJBQ0tfUE9QT1ZFUl9QQVRILCBJTlRFUkFDVElPTl9ESVNQTEFZX01PREVfSU5MSU5FLCBJTlRFUkFDVElPTl9TUEVDUywgTlVNX0VYUExPUkFUSU9OU19QRVJfUkVWSUVXX1RFU1QsIFBBR0VfQ09OVEVYVCwgU1VQUE9SVEVEX1NJVEVfTEFOR1VBR0VTLCBUV09fQ0FSRF9USFJFU0hPTERfUFgsIFdISVRFTElTVEVEX0NPTExFQ1RJT05fSURTX0ZPUl9TQVZJTkdfR1VFU1RfUFJPR1JFU1MpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkNPTlRJTlVFX0JVVFRPTl9GT0NVU19MQUJFTCA9IENPTlRJTlVFX0JVVFRPTl9GT0NVU19MQUJFTDtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG1pbmltdW0gd2lkdGgsIGluIHBpeGVscywgbmVlZGVkIHRvIGJlIGFibGUgdG8gc2hvdyB0d28gY2FyZHNcbiAgICAgICAgICAgICAgICAgICAgLy8gc2lkZS1ieS1zaWRlLlxuICAgICAgICAgICAgICAgICAgICB2YXIgVElNRV9QQURESU5HX01TRUMgPSAyNTA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBUSU1FX1NDUk9MTF9NU0VDID0gNjAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgTUlOX0NBUkRfTE9BRElOR19ERUxBWV9NU0VDID0gOTUwO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNMb2dnZWRJbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmdldFVzZXJJbmZvQXN5bmMoKS50aGVuKGZ1bmN0aW9uICh1c2VySW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzTG9nZ2VkSW4gPSB1c2VySW5mby5pc0xvZ2dlZEluKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sbGVjdGlvbklkID0gVXJsU2VydmljZS5nZXRDb2xsZWN0aW9uSWRGcm9tRXhwbG9yYXRpb25VcmwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jb2xsZWN0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWRPbmx5Q29sbGVjdGlvbkJhY2tlbmRBcGlTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmxvYWRDb2xsZWN0aW9uKCRzY29wZS5jb2xsZWN0aW9uSWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sbGVjdGlvblRpdGxlID0gY29sbGVjdGlvbi50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbGxlY3Rpb25UaXRsZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldEZlZWRiYWNrUG9wb3ZlclVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybChGRUVEQkFDS19QT1BPVkVSX1BBVEgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWx3YXlzQXNrTGVhcm5lckZvckFuc3dlckRldGFpbHMgPSAoRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlLmdldEFsd2F5c0Fza0xlYXJuZXJGb3JBbnN3ZXJEZXRhaWxzKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbkFza0xlYXJuZXJGb3JBbnN3ZXJJbmZvID0gKExlYXJuZXJBbnN3ZXJJbmZvU2VydmljZS5jYW5Bc2tMZWFybmVyRm9yQW5zd2VySW5mbyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbml0TGVhcm5lckFuc3dlckluZm9TZXJ2aWNlID0gKExlYXJuZXJBbnN3ZXJJbmZvU2VydmljZS5pbml0TGVhcm5lckFuc3dlckluZm9TZXJ2aWNlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc0ludGVyYWN0ZWRBdExlYXN0T25jZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYW5zd2VySXNCZWluZ1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX25leHRGb2N1c0xhYmVsID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9lZGl0b3JQcmV2aWV3TW9kZSA9IENvbnRleHRTZXJ2aWNlLmlzSW5FeHBsb3JhdGlvbkVkaXRvclBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB2YXJpYWJsZSBpcyB1c2VkIG9ubHkgd2hlbiB2aWV3cG9ydCBpcyBuYXJyb3cuXG4gICAgICAgICAgICAgICAgICAgIC8vIEluZGljYXRlcyB3aGV0aGVyIHRoZSB0dXRvciBjYXJkIGlzIGRpc3BsYXllZC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHR1dG9yQ2FyZElzRGlzcGxheWVkSWZOYXJyb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhwbG9yYXRpb25JZCA9IEV4cGxvcmF0aW9uRW5naW5lU2VydmljZS5nZXRFeHBsb3JhdGlvbklkKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvblBsYXllckNvbmZpZyA9ICRzY29wZS5nZXRRdWVzdGlvblBsYXllckNvbmZpZygpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNJblByZXZpZXdNb2RlID0gRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlLmlzSW5QcmV2aWV3TW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNJZnJhbWVkID0gVXJsU2VydmljZS5pc0lmcmFtZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5sb2FkaW5nTWVzc2FnZSA9ICdMb2FkaW5nJztcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhhc0Z1bGx5TG9hZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWNvbW1lbmRlZEV4cGxvcmF0aW9uU3VtbWFyaWVzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFuc3dlcklzQ29ycmVjdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV4dENhcmQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGVuZGluZ0NhcmRXYXNTZWVuQmVmb3JlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBsYXllckNvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkU2VydmljZS5pc0VuYWJsZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdG5lc3NGb290ZXJFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgkc2NvcGUuYW5zd2VySXNDb3JyZWN0ICYmICRzY29wZS5pc0NvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGF5ZXJQb3NpdGlvblNlcnZpY2UuaGFzTGVhcm5lckp1c3RTdWJtaXR0ZWRBbkFuc3dlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzTGVhcm5BZ2FpbkJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb25jZXB0Q2FyZElzQmVpbmdTaG93biA9ICgkc2NvcGUuZGlzcGxheWVkQ2FyZC5nZXRTdGF0ZU5hbWUoKSA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZS5pc0luUXVlc3Rpb25Nb2RlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmNlcHRDYXJkSXNCZWluZ1Nob3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uID0gJHNjb3BlLmRpc3BsYXllZENhcmQuZ2V0SW50ZXJhY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChJTlRFUkFDVElPTl9TUEVDU1tpbnRlcmFjdGlvbi5pZF0uaXNfbGluZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgkc2NvcGUucGVuZGluZ0NhcmRXYXNTZWVuQmVmb3JlICYmICEkc2NvcGUuYW5zd2VySXNDb3JyZWN0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ29ycmVjdG5lc3NGZWVkYmFja0VuYWJsZWQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBfZ2V0UmFuZG9tU3VmZml4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdoZW4gYSByZWZyZXNoIHRvIGEgJHNjb3BlIHZhcmlhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYXBwZW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW5ndWxhckpTIGNvbXBhcmVzIHRoZSBuZXcgdmFsdWUgb2YgdGhlIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWUuIElmIHRoZXkgYXJlIHRoZSBzYW1lLCB0aGVuIHRoZSB2YXJpYWJsZSBpcyBub3QgdXBkYXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZGluZyBhIHJhbmRvbSBzdWZmaXggbWFrZXMgdGhlIG5ldyB2YWx1ZSBkaWZmZXJlbnQgZnJvbSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzIG9uZSwgYW5kIHRodXMgaW5kaXJlY3RseSBmb3JjZXMgYSByZWZyZXNoLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmRvbVN1ZmZpeCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIE4gPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZG9tU3VmZml4ICs9ICcgJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByYW5kb21TdWZmaXg7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5PUFBJQV9BVkFUQVJfSU1BR0VfVVJMID0gKFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldFN0YXRpY0ltYWdlVXJsKCcvYXZhdGFyL29wcGlhX2F2YXRhcl8xMDBweC5zdmcnKSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRTdGF0aWNJbWFnZVVybCA9IChVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRTdGF0aWNJbWFnZVVybCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5ZWRDYXJkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGxvcmF0aW9uQWN0dWFsbHlTdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS51cGNvbWluZ0lubGluZUludGVyYWN0aW9uSHRtbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ERUZBVUxUX1RXSVRURVJfU0hBUkVfTUVTU0FHRV9QTEFZRVIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9UV0lUVEVSX1NIQVJFX01FU1NBR0VfRURJVE9SO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29udGVudEZvY3VzTGFiZWwgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDT05URU5UX0ZPQ1VTX0xBQkVMX1BSRUZJWCArIGluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZXhwbG9yYXRpb24gaXMgaWZyYW1lZCwgc2VuZCBkYXRhIHRvIGl0cyBwYXJlbnQgYWJvdXQgaXRzXG4gICAgICAgICAgICAgICAgICAgIC8vIGhlaWdodCBzbyB0aGF0IHRoZSBwYXJlbnQgY2FuIGJlIHJlc2l6ZWQgYXMgbmVjZXNzYXJ5LlxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFzdFJlcXVlc3RlZEhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sYXN0UmVxdWVzdGVkU2Nyb2xsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGp1c3RQYWdlSGVpZ2h0ID0gZnVuY3Rpb24gKHNjcm9sbCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKCRzY29wZS5sYXN0UmVxdWVzdGVkSGVpZ2h0IC0gbmV3SGVpZ2h0KSA+IDUwLjUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNjcm9sbCAmJiAhJHNjb3BlLmxhc3RSZXF1ZXN0ZWRTY3JvbGwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbWV0aW1lcyBzZXR0aW5nIGlmcmFtZSBoZWlnaHQgdG8gdGhlIGV4YWN0IGNvbnRlbnQgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0aWxsIHByb2R1Y2VzIHNjcm9sbGJhciwgc28gYWRkaW5nIDUwIGV4dHJhIHB4LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdIZWlnaHQgKz0gNTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NlbmdlclNlcnZpY2Uuc2VuZE1lc3NhZ2UoTWVzc2VuZ2VyU2VydmljZS5IRUlHSFRfQ0hBTkdFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IG5ld0hlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbDogc2Nyb2xsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFzdFJlcXVlc3RlZEhlaWdodCA9IG5ld0hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhc3RSZXF1ZXN0ZWRTY3JvbGwgPSBzY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWxvYWRFeHBsb3JhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc09uVGVybWluYWxDYXJkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgkc2NvcGUuZGlzcGxheWVkQ2FyZCAmJiAkc2NvcGUuZGlzcGxheWVkQ2FyZC5pc1Rlcm1pbmFsKCkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNTdXBwbGVtZW50YWxDYXJkTm9uZW1wdHkgPSBmdW5jdGlvbiAoY2FyZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFjYXJkLmlzSW50ZXJhY3Rpb25JbmxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ3VycmVudFN1cHBsZW1lbnRhbENhcmROb25lbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuZGlzcGxheWVkQ2FyZCAmJiBpc1N1cHBsZW1lbnRhbENhcmROb25lbXB0eSgkc2NvcGUuZGlzcGxheWVkQ2FyZCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1N1cHBsZW1lbnRhbE5hdlNob3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kaXNwbGF5ZWRDYXJkLmdldFN0YXRlTmFtZSgpID09PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIUV4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLmlzSW5RdWVzdGlvbk1vZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9ICRzY29wZS5kaXNwbGF5ZWRDYXJkLmdldEludGVyYWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKEJvb2xlYW4oaW50ZXJhY3Rpb24uaWQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5URVJBQ1RJT05fU1BFQ1NbaW50ZXJhY3Rpb24uaWRdLnNob3dfZ2VuZXJpY19zdWJtaXRfYnV0dG9uICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ3VycmVudENhcmRBdEVuZE9mVHJhbnNjcmlwdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWNvcmRMZWF2ZUZvclJlZnJlc2hlckV4cCA9IGZ1bmN0aW9uIChyZWZyZXNoZXJFeHBJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZWRpdG9yUHJldmlld01vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0c1JlcG9ydGluZ1NlcnZpY2UucmVjb3JkTGVhdmVGb3JSZWZyZXNoZXJFeHAoUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldEN1cnJlbnRTdGF0ZU5hbWUoKSwgcmVmcmVzaGVyRXhwSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAvLyBOYXZpZ2F0ZXMgdG8gdGhlIGN1cnJlbnRseS1hY3RpdmUgY2FyZCwgYW5kIHJlc2V0cyB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3Nob3cgcHJldmlvdXMgcmVzcG9uc2VzJyBzZXR0aW5nLlxuICAgICAgICAgICAgICAgICAgICB2YXIgX25hdmlnYXRlVG9EaXNwbGF5ZWRDYXJkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldERpc3BsYXllZENhcmRJbmRleCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXllZENhcmQgPSBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5nZXRDYXJkKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChFVkVOVF9BQ1RJVkVfQ0FSRF9DSEFOR0VEKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KEVWRU5UX0FVVE9QTEFZX0FVRElPKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIEEgaGFzaCB2YWx1ZSBpcyBhZGRlZCB0byBVUkwgZm9yIHNjcm9sbGluZyB0byBPcHBpYSBmZWVkYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBhbnN3ZXIgaXMgc3VibWl0dGVkIGJ5IHVzZXIgaW4gbW9iaWxlIHZpZXcuIFRoaXMgaGFzaCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzIHRvIGJlIHJlc2V0IGVhY2ggdGltZSBhIG5ldyBjYXJkIGlzIGxvYWRlZCB0byBwcmV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB1bndhbnRlZCBzY3JvbGxpbmcgaW4gdGhlIG5ldyBjYXJkLiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLmhhc2gobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGVuZGluZ0NhcmRXYXNTZWVuQmVmb3JlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuaGFzRW5jb3VudGVyZWRTdGF0ZUJlZm9yZSgkc2NvcGUuZGlzcGxheWVkQ2FyZC5nZXRTdGF0ZU5hbWUoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGVuZGluZ0NhcmRXYXNTZWVuQmVmb3JlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG11c3QgY2FuY2VsIHRoZSBhdXRvZ2VuZXJhdGVkIGF1ZGlvIHBsYXllciBoZXJlLCBvciBlbHNlIGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1ZyB3aGVyZSB0aGUgYXV0b2dlbmVyYXRlZCBhdWRpbyBwbGF5ZXIgZ2VuZXJhdGVzIGR1cGxpY2F0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXR0ZXJhbmNlcyBvY2N1cnMuXG4gICAgICAgICAgICAgICAgICAgICAgICBBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHV0b3JDYXJkSXNEaXNwbGF5ZWRJZk5hcnJvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX25leHRGb2N1c0xhYmVsICYmIFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmlzTGFzdENhcmQoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9jdXNNYW5hZ2VyU2VydmljZS5zZXRGb2N1c0lmT25EZXNrdG9wKF9uZXh0Rm9jdXNMYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb2N1c01hbmFnZXJTZXJ2aWNlLnNldEZvY3VzSWZPbkRlc2t0b3AoJHNjb3BlLmdldENvbnRlbnRGb2N1c0xhYmVsKGluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXR1cm5Ub0V4cGxvcmF0aW9uQWZ0ZXJDb25jZXB0Q2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmFkZFByZXZpb3VzQ2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bUNhcmRzID0gUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuZ2V0TnVtQ2FyZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBsYXllclBvc2l0aW9uU2VydmljZS5zZXREaXNwbGF5ZWRDYXJkSW5kZXgobnVtQ2FyZHMgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGVUb1R3b0NhcmRzID0gZnVuY3Rpb24gKGRvbmVDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQW5pbWF0aW5nVG9Ud29DYXJkcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQW5pbWF0aW5nVG9Ud29DYXJkcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgVElNRV9OVU1fQ0FSRFNfQ0hBTkdFX01TRUMgKyBUSU1FX0ZBREVJTl9NU0VDICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUSU1FX1BBRERJTkdfTVNFQyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRlVG9PbmVDYXJkID0gZnVuY3Rpb24gKGRvbmVDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQW5pbWF0aW5nVG9PbmVDYXJkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNBbmltYXRpbmdUb09uZUNhcmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIFRJTUVfTlVNX0NBUkRTX0NIQU5HRV9NU0VDKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEV4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLmlzSW5RdWVzdGlvblBsYXllck1vZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ2hpbnRDb25zdW1lZCcsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWVzdGlvblBsYXllclN0YXRlU2VydmljZS5oaW50VXNlZChRdWVzdGlvblBsYXllckVuZ2luZVNlcnZpY2UuZ2V0Q3VycmVudFF1ZXN0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignc29sdXRpb25WaWV3ZWQnLCBmdW5jdGlvbiAoZXZ0LCB0aW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWVzdGlvblBsYXllclN0YXRlU2VydmljZS5zb2x1dGlvblZpZXdlZChRdWVzdGlvblBsYXllckVuZ2luZVNlcnZpY2UuZ2V0Q3VycmVudFF1ZXN0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzQ3VycmVudENhcmRBdEVuZE9mVHJhbnNjcmlwdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5pc0xhc3RDYXJkKFBsYXllclBvc2l0aW9uU2VydmljZS5nZXREaXNwbGF5ZWRDYXJkSW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYWRkTmV3Q2FyZCA9IGZ1bmN0aW9uIChuZXdDYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5hZGROZXdDYXJkKG5ld0NhcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsTnVtQ2FyZHMgPSBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5nZXROdW1DYXJkcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzU3VwcGxlbWVudGFsQ2FyZElzTm9uZW1wdHkgPSAodG90YWxOdW1DYXJkcyA+IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1N1cHBsZW1lbnRhbENhcmROb25lbXB0eShQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5nZXRDYXJkKHRvdGFsTnVtQ2FyZHMgLSAyKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRTdXBwbGVtZW50YWxDYXJkSXNOb25lbXB0eSA9IGlzU3VwcGxlbWVudGFsQ2FyZE5vbmVtcHR5KFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmdldExhc3RDYXJkKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvdGFsTnVtQ2FyZHMgPiAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbldpbmRvd1Nob3dUd29DYXJkcygpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIXByZXZpb3VzU3VwcGxlbWVudGFsQ2FyZElzTm9uZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0U3VwcGxlbWVudGFsQ2FyZElzTm9uZW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGF5ZXJQb3NpdGlvblNlcnZpY2Uuc2V0RGlzcGxheWVkQ2FyZEluZGV4KHRvdGFsTnVtQ2FyZHMgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlVG9Ud29DYXJkcyhmdW5jdGlvbiAoKSB7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodG90YWxOdW1DYXJkcyA+IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuV2luZG93U2hvd1R3b0NhcmRzKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1N1cHBsZW1lbnRhbENhcmRJc05vbmVtcHR5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIW5leHRTdXBwbGVtZW50YWxDYXJkSXNOb25lbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVUb09uZUNhcmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGF5ZXJQb3NpdGlvblNlcnZpY2Uuc2V0RGlzcGxheWVkQ2FyZEluZGV4KHRvdGFsTnVtQ2FyZHMgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYXllclBvc2l0aW9uU2VydmljZS5zZXREaXNwbGF5ZWRDYXJkSW5kZXgodG90YWxOdW1DYXJkcyAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdjdXJyZW50UXVlc3Rpb25DaGFuZ2VkJywgUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldERpc3BsYXllZENhcmRJbmRleCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGlzcGxheWVkQ2FyZC5pc1Rlcm1pbmFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNSZWZyZXNoZXJFeHBsb3JhdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXJlbnRFeHBsb3JhdGlvbklkcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVybFNlcnZpY2UuZ2V0UXVlcnlGaWVsZFZhbHVlc0FzTGlzdCgncGFyZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlY29tbWVuZGVkRXhwbG9yYXRpb25JZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5jbHVkZUF1dG9nZW5lcmF0ZWRSZWNvbW1lbmRhdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnBhcmVudEV4cGxvcmF0aW9uSWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUmVmcmVzaGVyRXhwbG9yYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50RXhwbG9yYXRpb25JZCA9ICRzY29wZS5wYXJlbnRFeHBsb3JhdGlvbklkc1skc2NvcGUucGFyZW50RXhwbG9yYXRpb25JZHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGVkRXhwbG9yYXRpb25JZHMucHVzaChwYXJlbnRFeHBsb3JhdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGVkRXhwbG9yYXRpb25JZHMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlLmdldEF1dGhvclJlY29tbWVuZGVkRXhwSWRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVBdXRvZ2VuZXJhdGVkUmVjb21tZW5kYXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhwbG9yYXRpb25SZWNvbW1lbmRhdGlvbnNTZXJ2aWNlLmdldFJlY29tbWVuZGVkU3VtbWFyeURpY3RzKHJlY29tbWVuZGVkRXhwbG9yYXRpb25JZHMsIGluY2x1ZGVBdXRvZ2VuZXJhdGVkUmVjb21tZW5kYXRpb25zLCBmdW5jdGlvbiAoc3VtbWFyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWNvbW1lbmRlZEV4cGxvcmF0aW9uU3VtbWFyaWVzID0gc3VtbWFyaWVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2luaXRpYWxpemVEaXJlY3RpdmVDb21wb25lbnRzID0gZnVuY3Rpb24gKGluaXRpYWxDYXJkLCBmb2N1c0xhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkTmV3Q2FyZChpbml0aWFsQ2FyZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV4dENhcmQgPSBpbml0aWFsQ2FyZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgncGxheWVyU3RhdGVDaGFuZ2UnLCAkc2NvcGUubmV4dENhcmQuZ2V0U3RhdGVOYW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgRm9jdXNNYW5hZ2VyU2VydmljZS5zZXRGb2N1c0lmT25EZXNrdG9wKGZvY3VzTGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5sb2FkaW5nTWVzc2FnZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhhc0Z1bGx5TG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBleHBsb3JhdGlvbiBpcyBlbWJlZGRlZCwgdXNlIHRoZSBleHBsb3JhdGlvbiBsYW5ndWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXMgc2l0ZSBsYW5ndWFnZS4gSWYgdGhlIGV4cGxvcmF0aW9uIGxhbmd1YWdlIGlzIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzIHNpdGUgbGFuZ3VhZ2UsIEVuZ2xpc2ggaXMgdXNlZCBhcyBkZWZhdWx0LlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmdDb2RlcyA9IFNVUFBPUlRFRF9TSVRFX0xBTkdVQUdFUy5tYXAoZnVuY3Rpb24gKGxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhbmd1YWdlLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmlzSWZyYW1lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHBsb3JhdGlvbkxhbmd1YWdlQ29kZSA9IChFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZS5nZXRMYW5ndWFnZUNvZGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhbmdDb2Rlcy5pbmRleE9mKGV4cGxvcmF0aW9uTGFuZ3VhZ2VDb2RlKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRyYW5zbGF0ZS51c2UoZXhwbG9yYXRpb25MYW5ndWFnZUNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRyYW5zbGF0ZS51c2UoJ2VuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkanVzdFBhZ2VIZWlnaHQoZmFsc2UsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSB0aW1lb3V0IGlzIG5lZWRlZCBpbiBvcmRlciB0byBnaXZlIHRoZSByZWNpcGllbnQgb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBicm9hZGNhc3Qgc3VmZmljaWVudCB0aW1lIHRvIGxvYWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KEVWRU5UX05FV19DQVJEX09QRU5FRCwgaW5pdGlhbENhcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbml0aWFsaXplUGFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0ludGVyYWN0ZWRBdExlYXN0T25jZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlY29tbWVuZGVkRXhwbG9yYXRpb25TdW1tYXJpZXMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgUGxheWVyUG9zaXRpb25TZXJ2aWNlLmluaXQoX25hdmlnYXRlVG9EaXNwbGF5ZWRDYXJkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvblBsYXllckNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLmluaXRpYWxpemVRdWVzdGlvblBsYXllcihxdWVzdGlvblBsYXllckNvbmZpZywgX2luaXRpYWxpemVEaXJlY3RpdmVDb21wb25lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLmluaXRpYWxpemVQbGF5ZXIoX2luaXRpYWxpemVEaXJlY3RpdmVDb21wb25lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ3BsYXllclN0YXRlQ2hhbmdlJywgZnVuY3Rpb24gKGV2dCwgbmV3U3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld1N0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRvIHJlc3RhcnQgdGhlIHByZWxvYWRlciBmb3IgdGhlIG5ldyBzdGF0ZSBpZiByZXF1aXJlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2VkaXRvclByZXZpZXdNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSW1hZ2VQcmVsb2FkZXJTZXJ2aWNlLm9uU3RhdGVDaGFuZ2UobmV3U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGUgdHJhbnNpdGlvbiB0byBhIHRlcm1pbmFsIHN0YXRlIHByb3Blcmx5IGxvZ3MgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2YgdGhlIGV4cGxvcmF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZWRpdG9yUHJldmlld01vZGUgJiYgJHNjb3BlLm5leHRDYXJkLmlzVGVybWluYWwoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRzUmVwb3J0aW5nU2VydmljZS5yZWNvcmRFeHBsb3JhdGlvbkNvbXBsZXRlZChuZXdTdGF0ZU5hbWUsIExlYXJuZXJQYXJhbXNTZXJ2aWNlLmdldEFsbFBhcmFtcygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBpcyBhIGd1ZXN0LCBoYXMgY29tcGxldGVkIHRoaXMgZXhwbG9yYXRpb24gd2l0aGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGNvbnRleHQgb2YgYSBjb2xsZWN0aW9uLCBhbmQgdGhlIGNvbGxlY3Rpb24gaXMgd2hpdGVsaXN0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVjb3JkIHRoZWlyIHRlbXBvcmFyeSBwcm9ncmVzcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sbGVjdGlvbkFsbG93c0d1ZXN0UHJvZ3Jlc3MgPSAoV0hJVEVMSVNURURfQ09MTEVDVElPTl9JRFNfRk9SX1NBVklOR19HVUVTVF9QUk9HUkVTUy5pbmRleE9mKCRzY29wZS5jb2xsZWN0aW9uSWQpICE9PSAtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb25BbGxvd3NHdWVzdFByb2dyZXNzICYmICEkc2NvcGUuaXNMb2dnZWRJbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHdWVzdENvbGxlY3Rpb25Qcm9ncmVzc1NlcnZpY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmRFeHBsb3JhdGlvbkNvbXBsZXRlZEluQ29sbGVjdGlvbigkc2NvcGUuY29sbGVjdGlvbklkLCAkc2NvcGUuZXhwbG9yYXRpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZS5pc0luU3RvcnlDaGFwdGVyTW9kZSgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXh0Q2FyZC5pc1Rlcm1pbmFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3J5SWQgPSBVcmxTZXJ2aWNlLmdldFVybFBhcmFtcygpLnN0b3J5X2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZUlkID0gVXJsU2VydmljZS5nZXRVcmxQYXJhbXMoKS5ub2RlX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdG9yeVZpZXdlckJhY2tlbmRBcGlTZXJ2aWNlLnJlY29yZFN0b3J5Tm9kZUNvbXBsZXRpb24oc3RvcnlJZCwgbm9kZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcnlWaWV3ZXJCYWNrZW5kQXBpU2VydmljZS5mZXRjaFN0b3J5RGF0YShzdG9yeUlkKS50aGVuKGZ1bmN0aW9uIChzdG9yeURhdGFEaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcnlOb2RlcyA9IHN0b3J5RGF0YURpY3Quc3Rvcnlfbm9kZXMubWFwKGZ1bmN0aW9uIChzdG9yeU5vZGVEaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlYWRPbmx5U3RvcnlOb2RlT2JqZWN0RmFjdG9yeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY3JlYXRlRnJvbUJhY2tlbmREaWN0KHN0b3J5Tm9kZURpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tcGxldGVkU3RvcnlOb2RlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcnlOb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9yeU5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcnlOb2RlLmlzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZFN0b3J5Tm9kZXMucHVzaChzdG9yeU5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZFN0b3J5Tm9kZXMubGVuZ3RoICVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOVU1fRVhQTE9SQVRJT05TX1BFUl9SRVZJRVdfVEVTVCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZFN0b3J5Tm9kZXMubGVuZ3RoID09PSBzdG9yeU5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBSRVZJRVdfVEVTVF9VUkxfVEVNUExBVEUgPSAoJy9yZXZpZXdfdGVzdC88c3RvcnlfaWQ+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKFJFVklFV19URVNUX1VSTF9URU1QTEFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcnlfaWQ6IHN0b3J5SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3Igc2luZ2xlIHN0YXRlIGV4cGxvcmF0aW9ucywgd2hlbiB0aGUgZXhwbG9yYXRpb24gcmVhY2hlcyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0ZXJtaW5hbCBzdGF0ZSBhbmQgZXhwbG9yYXRpb25BY3R1YWxseVN0YXJ0ZWQgaXMgZmFsc2UsIHJlY29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cGxvcmF0aW9uIGFjdHVhbCBzdGFydCBldmVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWV4cGxvcmF0aW9uQWN0dWFsbHlTdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRzUmVwb3J0aW5nU2VydmljZS5yZWNvcmRFeHBsb3JhdGlvbkFjdHVhbGx5U3RhcnRlZChuZXdTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbkFjdHVhbGx5U3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdEFuc3dlciA9IGZ1bmN0aW9uIChhbnN3ZXIsIGludGVyYWN0aW9uUnVsZXNTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTYWZldHkgY2hlY2sgdG8gcHJldmVudCBkb3VibGUgc3VibWlzc2lvbnMgZnJvbSBvY2N1cnJpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFuc3dlcklzQmVpbmdQcm9jZXNzZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhJHNjb3BlLmlzQ3VycmVudENhcmRBdEVuZE9mVHJhbnNjcmlwdCgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXllZENhcmQuaXNDb21wbGV0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmlzSW5QcmV2aWV3TW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZhdGlndWVEZXRlY3Rpb25TZXJ2aWNlLnJlY29yZFN1Ym1pc3Npb25UaW1lc3RhbXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRmF0aWd1ZURldGVjdGlvblNlcnZpY2UuaXNTdWJtaXR0aW5nVG9vRmFzdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZhdGlndWVEZXRlY3Rpb25TZXJ2aWNlLmRpc3BsYXlUYWtlQnJlYWtNZXNzYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdvcHBpYUZlZWRiYWNrQXZhaWxhYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5pc0luUHJldmlld01vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFTkFCTEVfU09MSUNJVF9BTlNXRVJfREVUQUlMU19GRUFUVVJFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdExlYXJuZXJBbnN3ZXJJbmZvU2VydmljZSgkc2NvcGUuZXhwbG9yYXRpb25JZCwgRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlLmdldFN0YXRlKCksIGFuc3dlciwgaW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UsIGFsd2F5c0Fza0xlYXJuZXJGb3JBbnN3ZXJEZXRhaWxzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyQXR0ZW1wdHNTZXJ2aWNlLnN1Ym1pdEF0dGVtcHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbnN3ZXJJc0JlaW5nUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0ludGVyYWN0ZWRBdExlYXN0T25jZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5hZGROZXdJbnB1dChhbnN3ZXIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY2FuQXNrTGVhcm5lckZvckFuc3dlckluZm8oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuYWRkTmV3UmVzcG9uc2UoTGVhcm5lckFuc3dlckluZm9TZXJ2aWNlLmdldFNvbGljaXRBbnN3ZXJEZXRhaWxzUXVlc3Rpb24oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbnN3ZXJJc0JlaW5nUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdoZWxwQ2FyZEF2YWlsYWJsZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBDYXJkSHRtbDogKExlYXJuZXJBbnN3ZXJJbmZvU2VydmljZS5nZXRTb2xpY2l0QW5zd2VyRGV0YWlsc1F1ZXN0aW9uKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ29udGludWVCdXR0b246IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVBdFNlcnZlckNhbGwgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBsYXllclBvc2l0aW9uU2VydmljZS5yZWNvcmRBbnN3ZXJTdWJtaXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudEVuZ2luZVNlcnZpY2UgPSBFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZS5nZXRDdXJyZW50RW5naW5lU2VydmljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFuc3dlcklzQ29ycmVjdCA9IGN1cnJlbnRFbmdpbmVTZXJ2aWNlLnN1Ym1pdEFuc3dlcihhbnN3ZXIsIGludGVyYWN0aW9uUnVsZXNTZXJ2aWNlLCBmdW5jdGlvbiAobmV4dENhcmQsIHJlZnJlc2hJbnRlcmFjdGlvbiwgZmVlZGJhY2tIdG1sLCBmZWVkYmFja0F1ZGlvVHJhbnNsYXRpb25zLCByZWZyZXNoZXJFeHBsb3JhdGlvbklkLCBtaXNzaW5nUHJlcmVxdWlzaXRlU2tpbGxJZCwgcmVtYWluT25DdXJyZW50Q2FyZCwgdGFnZ2VkU2tpbGxNaXNjb25jZXB0aW9uSWQsIHdhc09sZFN0YXRlSW5pdGlhbCwgaXNGaXJzdEhpdCwgaXNGaW5hbFF1ZXN0aW9uLCBmb2N1c0xhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5leHRDYXJkID0gbmV4dENhcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZWRpdG9yUHJldmlld01vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIUV4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLmlzSW5RdWVzdGlvbk1vZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2xkU3RhdGVOYW1lID0gUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldEN1cnJlbnRTdGF0ZU5hbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1haW5PbkN1cnJlbnRDYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0c1JlcG9ydGluZ1NlcnZpY2UucmVjb3JkU3RhdGVUcmFuc2l0aW9uKG9sZFN0YXRlTmFtZSwgbmV4dENhcmQuZ2V0U3RhdGVOYW1lKCksIGFuc3dlciwgTGVhcm5lclBhcmFtc1NlcnZpY2UuZ2V0QWxsUGFyYW1zKCksIGlzRmlyc3RIaXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHNSZXBvcnRpbmdTZXJ2aWNlLnJlY29yZFN0YXRlQ29tcGxldGVkKG9sZFN0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRDYXJkLmlzVGVybWluYWwoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHNSZXBvcnRpbmdTZXJ2aWNlLnJlY29yZFN0YXRlQ29tcGxldGVkKG5leHRDYXJkLmdldFN0YXRlTmFtZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2FzT2xkU3RhdGVJbml0aWFsICYmICFleHBsb3JhdGlvbkFjdHVhbGx5U3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHNSZXBvcnRpbmdTZXJ2aWNlLnJlY29yZEV4cGxvcmF0aW9uQWN0dWFsbHlTdGFydGVkKG9sZFN0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbkFjdHVhbGx5U3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZS5pc0luUXVlc3Rpb25Nb2RlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdwbGF5ZXJTdGF0ZUNoYW5nZScsIG5leHRDYXJkLmdldFN0YXRlTmFtZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFF1ZXN0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLmFuc3dlclN1Ym1pdHRlZChRdWVzdGlvblBsYXllckVuZ2luZVNlcnZpY2UuZ2V0Q3VycmVudFF1ZXN0aW9uKCksICFyZW1haW5PbkN1cnJlbnRDYXJkLCB0YWdnZWRTa2lsbE1pc2NvbmNlcHRpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdCB3YWl0IGlmIHRoZSBpbnRlcmFjdGlvbiBpcyBzdXBwbGVtZW50YWwgLS0gdGhlcmUnc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgYSBkZWxheSBicmluZ2luZyBpbiB0aGUgaGVscCBjYXJkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtaWxsaXNlY3NMZWZ0VG9XYWl0ID0gKCEkc2NvcGUuZGlzcGxheWVkQ2FyZC5pc0ludGVyYWN0aW9uSW5saW5lKCkgPyAxLjAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1heChNSU5fQ0FSRF9MT0FESU5HX0RFTEFZX01TRUMgLSAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aW1lQXRTZXJ2ZXJDYWxsKSwgMS4wKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnb3BwaWFGZWVkYmFja0F2YWlsYWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFpcnMgPSAoUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuZ2V0TGFzdENhcmQoKS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldElucHV0UmVzcG9uc2VQYWlycygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RBbnN3ZXJGZWVkYmFja1BhaXIgPSBwYWlyc1twYWlycy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoRVZFTlRfQVVUT1BMQVlfQVVESU8sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvVHJhbnNsYXRpb25zOiBmZWVkYmFja0F1ZGlvVHJhbnNsYXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogZmVlZGJhY2tIdG1sLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50TmFtZTogQ09NUE9ORU5UX05BTUVfRkVFREJBQ0tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1haW5PbkN1cnJlbnRDYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdGF5IG9uIHRoZSBzYW1lIGNhcmQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIaW50c0FuZFNvbHV0aW9uTWFuYWdlclNlcnZpY2UucmVjb3JkV3JvbmdBbnN3ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmFkZE5ld1Jlc3BvbnNlKGZlZWRiYWNrSHRtbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVscENhcmRBdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWVkYmFja0h0bWwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhJHNjb3BlLmRpc3BsYXllZENhcmQuaXNJbnRlcmFjdGlvbklubGluZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscENhcmRBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlbHBDYXJkQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2hlbHBDYXJkQXZhaWxhYmxlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwQ2FyZEh0bWw6IGZlZWRiYWNrSHRtbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ29udGludWVCdXR0b246IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWlzc2luZ1ByZXJlcXVpc2l0ZVNraWxsSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheWVkQ2FyZC5tYXJrQXNDb21wbGV0ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25jZXB0Q2FyZEJhY2tlbmRBcGlTZXJ2aWNlLmxvYWRDb25jZXB0Q2FyZHMoW21pc3NpbmdQcmVyZXF1aXNpdGVTa2lsbElkXSkudGhlbihmdW5jdGlvbiAoY29uY2VwdENhcmRCYWNrZW5kRGljdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29uY2VwdENhcmQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29uY2VwdENhcmRPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChjb25jZXB0Q2FyZEJhY2tlbmREaWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlbHBDYXJkQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnaGVscENhcmRBdmFpbGFibGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscENhcmRIdG1sOiBmZWVkYmFja0h0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ29udGludWVCdXR0b246IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmcmVzaEludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGUgcHJldmlvdXMgaW50ZXJhY3Rpb24gd2l0aCBhbm90aGVyIG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNhbWUgdHlwZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbmV4dEZvY3VzTGFiZWwgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb2N1c01hbmFnZXJTZXJ2aWNlLmdlbmVyYXRlRm9jdXNMYWJlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLnVwZGF0ZUxhdGVzdEludGVyYWN0aW9uSHRtbCgkc2NvcGUuZGlzcGxheWVkQ2FyZC5nZXRJbnRlcmFjdGlvbkh0bWwoX25leHRGb2N1c0xhYmVsKSArIF9nZXRSYW5kb21TdWZmaXgoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVkaXJlY3RUb1JlZnJlc2hlckV4cGxvcmF0aW9uQ29uZmlybWVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmcmVzaGVyRXhwbG9yYXRpb25JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE8oYmhlbm5pbmcpOiBBZGQgdGVzdHMgdG8gdmVyaWZ5IHRoZSBldmVudCBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb3Blcmx5IHJlY29yZGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb25maXJtUmVkaXJlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWRpcmVjdFRvUmVmcmVzaGVyRXhwbG9yYXRpb25Db25maXJtZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVjb3JkTGVhdmVGb3JSZWZyZXNoZXJFeHAocmVmcmVzaGVyRXhwbG9yYXRpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5nZXQoRVhQTE9SQVRJT05fU1VNTUFSWV9EQVRBX1VSTF9URU1QTEFURSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ2lmaWVkX2V4cF9pZHM6IEpTT04uc3RyaW5naWZ5KFtyZWZyZXNoZXJFeHBsb3JhdGlvbklkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN1bW1hcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWZyZXNoZXJFeHBsb3JhdGlvbkNvbmZpcm1hdGlvbk1vZGFsU2VydmljZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5UmVkaXJlY3RDb25maXJtYXRpb25Nb2RhbChyZWZyZXNoZXJFeHBsb3JhdGlvbklkLCBjb25maXJtUmVkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb2N1c01hbmFnZXJTZXJ2aWNlLnNldEZvY3VzSWZPbkRlc2t0b3AoX25leHRGb2N1c0xhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvQm90dG9tKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBhIG5ldyBjYXJkLiBJZiB0aGVyZSBpcyBubyBmZWVkYmFjaywgbW92ZSBvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW1tZWRpYXRlbHkuIE90aGVyd2lzZSwgZ2l2ZSB0aGUgbGVhcm5lciBhIGNoYW5jZSB0byByZWFkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZmVlZGJhY2ssIGFuZCBkaXNwbGF5IGEgJ0NvbnRpbnVlJyBidXR0b24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheWVkQ2FyZC5tYXJrQXNDb21wbGV0ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0ZpbmFsUXVlc3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRXhwbG9yYXRpb25QbGF5ZXJTdGF0ZVNlcnZpY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSW5RdWVzdGlvblBsYXllck1vZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSB3aWxsIHJlZGlyZWN0IHRvIHRoZSByZXN1bHRzIHBhZ2UgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25TZXNzaW9uQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vdmVUb0V4cGxvcmF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVlZGJhY2tIdG1sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmFkZE5ld1Jlc3BvbnNlKGZlZWRiYWNrSHRtbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmRpc3BsYXllZENhcmQuaXNJbnRlcmFjdGlvbklubGluZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnaGVscENhcmRBdmFpbGFibGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscENhcmRIdG1sOiBmZWVkYmFja0h0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ29udGludWVCdXR0b246IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1VwY29taW5nQ2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYW5zd2VySXNCZWluZ1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZhdGlndWVEZXRlY3Rpb25TZXJ2aWNlLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdW1iZXJBdHRlbXB0c1NlcnZpY2UucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXNOZXh0SW50ZXJhY3Rpb25JbmxpbmUgPSAkc2NvcGUubmV4dENhcmQuaXNJbnRlcmFjdGlvbklubGluZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwY29taW5nSW5saW5lSW50ZXJhY3Rpb25IdG1sID0gKF9pc05leHRJbnRlcmFjdGlvbklubGluZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5leHRDYXJkLmdldEludGVyYWN0aW9uSHRtbCgpIDogJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwY29taW5nSW50ZXJhY3Rpb25JbnN0cnVjdGlvbnMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXh0Q2FyZC5nZXRJbnRlcmFjdGlvbkluc3RydWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlZWRiYWNrSHRtbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5oYXNFbmNvdW50ZXJlZFN0YXRlQmVmb3JlKG5leHRDYXJkLmdldFN0YXRlTmFtZSgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGVuZGluZ0NhcmRXYXNTZWVuQmVmb3JlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuYWRkTmV3UmVzcG9uc2UoZmVlZGJhY2tIdG1sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5kaXNwbGF5ZWRDYXJkLmlzSW50ZXJhY3Rpb25JbmxpbmUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnaGVscENhcmRBdmFpbGFibGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwQ2FyZEh0bWw6IGZlZWRiYWNrSHRtbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NvbnRpbnVlQnV0dG9uOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoRVZFTlRfTkVXX0NBUkRfQVZBSUxBQkxFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbmV4dEZvY3VzTGFiZWwgPSAkc2NvcGUuQ09OVElOVUVfQlVUVE9OX0ZPQ1VTX0xBQkVMO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvY3VzTWFuYWdlclNlcnZpY2Uuc2V0Rm9jdXNJZk9uRGVza3RvcChfbmV4dEZvY3VzTGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvQm90dG9tKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5hZGROZXdSZXNwb25zZShmZWVkYmFja0h0bWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGZlZWRiYWNrLCBpdCBpbW1lZGlhdGVseSBtb3ZlcyBvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIG5leHQgY2FyZC4gVGhlcmVmb3JlICRzY29wZS5hbnN3ZXJJc0NvcnJlY3QgbmVlZHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBiZSBzZXQgdG8gZmFsc2UgYmVmb3JlIGl0IHByb2NlZWRzIHRvIG5leHQgY2FyZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYW5zd2VySXNDb3JyZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQZW5kaW5nQ2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycmVudEludGVyYWN0aW9uU2VydmljZS5jbGVhclByZXN1Ym1pdEhvb2tzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFuc3dlcklzQmVpbmdQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBtaWxsaXNlY3NMZWZ0VG9XYWl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBDdXJyZW50SW50ZXJhY3Rpb25TZXJ2aWNlLnNldE9uU3VibWl0Rm4oJHNjb3BlLnN1Ym1pdEFuc3dlcik7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGFydENhcmRDaGFuZ2VBbmltYXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQZW5kaW5nQ2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGFydENhcmRDaGFuZ2VBbmltYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgRXhwbG9yYXRpb25QbGF5ZXJTdGF0ZVNlcnZpY2UucmVjb3JkTmV3Q2FyZEFkZGVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZE5ld0NhcmQoJHNjb3BlLm5leHRDYXJkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBjb21pbmdJbmxpbmVJbnRlcmFjdGlvbkh0bWwgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGNvbWluZ0ludGVyYWN0aW9uSW5zdHJ1Y3Rpb25zID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIFRJTUVfRkFERU9VVF9NU0VDICsgMC4xICogVElNRV9IRUlHSFRfQ0hBTkdFX01TRUMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvY3VzTWFuYWdlclNlcnZpY2Uuc2V0Rm9jdXNJZk9uRGVza3RvcChfbmV4dEZvY3VzTGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvVG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBUSU1FX0ZBREVPVVRfTVNFQyArIFRJTUVfSEVJR0hUX0NIQU5HRV9NU0VDICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjUgKiBUSU1FX0ZBREVJTl9NU0VDKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhcnRDYXJkQ2hhbmdlQW5pbWF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBUSU1FX0ZBREVPVVRfTVNFQyArIFRJTUVfSEVJR0hUX0NIQU5HRV9NU0VDICsgVElNRV9GQURFSU5fTVNFQyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVElNRV9QQURESU5HX01TRUMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KEVWRU5UX05FV19DQVJEX09QRU5FRCwgJHNjb3BlLm5leHRDYXJkKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dVcGNvbWluZ0NhcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldERpc3BsYXllZENhcmRJbmRleCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbmNlcHRDYXJkSXNCZWluZ1Nob3duID0gKCRzY29wZS5kaXNwbGF5ZWRDYXJkLmdldFN0YXRlTmFtZSgpID09PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIUV4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLmlzSW5RdWVzdGlvbk1vZGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uY2VwdENhcmRJc0JlaW5nU2hvd24gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5pc0xhc3RDYXJkKGN1cnJlbnRJbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmV0dXJuVG9FeHBsb3JhdGlvbkFmdGVyQ29uY2VwdENhcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnF1ZXN0aW9uU2Vzc2lvbkNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgncXVlc3Rpb25TZXNzaW9uQ29tcGxldGVkJywgUXVlc3Rpb25QbGF5ZXJTdGF0ZVNlcnZpY2UuZ2V0UXVlc3Rpb25QbGF5ZXJTdGF0ZURhdGEoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5tb3ZlVG9FeHBsb3JhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb3ZlVG9FeHBsb3JhdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLm1vdmVUb0V4cGxvcmF0aW9uKF9pbml0aWFsaXplRGlyZWN0aXZlQ29tcG9uZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kaXNwbGF5ZWRDYXJkLmlzQ29tcGxldGVkKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJHNjb3BlLm5leHRDYXJkLmdldFN0YXRlTmFtZSgpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheWVkQ2FyZC5nZXRTdGF0ZU5hbWUoKSkgJiYgJHNjb3BlLmNvbmNlcHRDYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhwbG9yYXRpb25QbGF5ZXJTdGF0ZVNlcnZpY2UucmVjb3JkTmV3Q2FyZEFkZGVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZE5ld0NhcmQoU3RhdGVDYXJkT2JqZWN0RmFjdG9yeS5jcmVhdGVOZXdDYXJkKG51bGwsICRzY29wZS5jb25jZXB0Q2FyZC5nZXRFeHBsYW5hdGlvbigpLCBudWxsLCBudWxsLCBudWxsLCBudWxsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLyogVGhpcyBpcyBmb3IgdGhlIGZvbGxvd2luZyBzaXR1YXRpb246XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBBLT5CLT5DIGlzIHRoZSBhcnJhbmdlbWVudCBvZiBjYXJkcyBhbmQgQyByZWRpcmVjdGVkIHRvIEEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVuIGFmdGVyIHRoaXMsIEIgYW5kIEMgYXJlIHZpc2l0ZWQgY2FyZHMgYW5kIGhlbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQ2FyZFdhc1NlZW5CZWZvcmUgd291bGQgYmUgdHJ1ZSBkdXJpbmcgYm90aCB0aGVzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbnMgYW5kIGFzIGFuc3dlcklzQ29ycmVjdCBpcyBzZXQgdG8gZmFsc2UgYmVsb3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBDb250aW51ZSB3b3VsZCBicmllZmx5IGNoYW5nZSB0byBMZWFybiBBZ2FpbiAoYWZ0ZXIgaXQgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrZWQpIGR1cmluZyB0aGVzZSB0cmFuc2l0aW9ucyB3aGljaCBpcyBub3QgcmVxdWlyZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBBbHNvLCBpZiB0aGUgJ2lmJyBjaGVjayBpcyBub3QgdGhlcmUsIExlYXJuIEFnYWluIGJ1dHRvbiB3b3VsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZWZseSBzd2l0Y2hlZCB0byBDb250aW51ZSBiZWZvcmUgZ29pbmcgdG8gbmV4dCBjYXJkLiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hbnN3ZXJJc0NvcnJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGVuZGluZ0NhcmRXYXNTZWVuQmVmb3JlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYW5zd2VySXNDb3JyZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1BlbmRpbmdDYXJkKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb0JvdHRvbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHV0b3JDYXJkID0gJCgnLmNvbnZlcnNhdGlvbi1za2luLW1haW4tdHV0b3ItY2FyZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0dXRvckNhcmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR1dG9yQ2FyZEJvdHRvbSA9ICh0dXRvckNhcmQub2Zmc2V0KCkudG9wICsgdHV0b3JDYXJkLm91dGVySGVpZ2h0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHdpbmRvdykuc2Nyb2xsVG9wKCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHdpbmRvdykuaGVpZ2h0KCkgPCB0dXRvckNhcmRCb3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiB0dXRvckNhcmRCb3R0b20gLSAkKHdpbmRvdykuaGVpZ2h0KCkgKyAxMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVElNRV9TQ1JPTExfTVNFQyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9Ub3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA4MDAsICdlYXNlT3V0UXVhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdFVzZXJSYXRpbmcgPSBmdW5jdGlvbiAocmF0aW5nVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExlYXJuZXJWaWV3UmF0aW5nU2VydmljZS5zdWJtaXRVc2VyUmF0aW5nKHJhdGluZ1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRvbigncmF0aW5nVXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyUmF0aW5nID0gTGVhcm5lclZpZXdSYXRpbmdTZXJ2aWNlLmdldFVzZXJSYXRpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVkaXJlY3RUb1JlZnJlc2hlckV4cGxvcmF0aW9uQ29uZmlybWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0ludGVyYWN0ZWRBdExlYXN0T25jZSAmJiAhJHNjb3BlLmlzSW5QcmV2aWV3TW9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEkc2NvcGUuZGlzcGxheWVkQ2FyZC5pc1Rlcm1pbmFsKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0c1JlcG9ydGluZ1NlcnZpY2UucmVjb3JkTWF5YmVMZWF2ZUV2ZW50KFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmdldExhc3RTdGF0ZU5hbWUoKSwgTGVhcm5lclBhcmFtc1NlcnZpY2UuZ2V0QWxsUGFyYW1zKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb25maXJtYXRpb25NZXNzYWdlID0gKCdJZiB5b3UgbmF2aWdhdGUgYXdheSBmcm9tIHRoaXMgcGFnZSwgeW91ciBwcm9ncmVzcyBvbiB0aGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdleHBsb3JhdGlvbiB3aWxsIGJlIGxvc3QuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUgfHwgJHdpbmRvdy5ldmVudCkucmV0dXJuVmFsdWUgPSBjb25maXJtYXRpb25NZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maXJtYXRpb25NZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJucyB3aGV0aGVyIHRoZSBzY3JlZW4gaXMgd2lkZSBlbm91Z2ggdG8gZml0IHR3b1xuICAgICAgICAgICAgICAgICAgICAvLyBjYXJkcyAoZS5nLiwgdGhlIHR1dG9yIGFuZCBzdXBwbGVtZW50YWwgY2FyZHMpIHNpZGUtYnktc2lkZS5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbldpbmRvd1Nob3dUd29DYXJkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBXaW5kb3dEaW1lbnNpb25zU2VydmljZS5nZXRXaWR0aCgpID4gVFdPX0NBUkRfVEhSRVNIT0xEX1BYO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkd2luZG93Lm9ucmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkanVzdFBhZ2VIZWlnaHQoZmFsc2UsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeFN1cHBsZW1lbnRPblNjcm9sbCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpeFN1cHBsZW1lbnRPblNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdXBwbGVtZW50Q2FyZCA9ICQoJ2Rpdi5jb252ZXJzYXRpb24tc2tpbi1zdXBwbGVtZW50YWwtY2FyZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvcE1hcmdpbiA9ICQoJy5uYXZiYXItY29udGFpbmVyJykuaGVpZ2h0KCkgLSAyMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHdpbmRvdykuc2Nyb2xsVG9wKCkgPiB0b3BNYXJnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBwbGVtZW50Q2FyZC5hZGRDbGFzcygnY29udmVyc2F0aW9uLXNraW4tc3VwcGxlbWVudGFsLWNhcmQtZml4ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBsZW1lbnRDYXJkLnJlbW92ZUNsYXNzKCdjb252ZXJzYXRpb24tc2tpbi1zdXBwbGVtZW50YWwtY2FyZC1maXhlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5pdGlhbGl6ZVBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFxdWVzdGlvblBsYXllckNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgTGVhcm5lclZpZXdSYXRpbmdTZXJ2aWNlLmluaXQoZnVuY3Rpb24gKHVzZXJSYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlclJhdGluZyA9IHVzZXJSYXRpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sbGVjdGlvblN1bW1hcnkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNvbGxlY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvY29sbGVjdGlvbnN1bW1hcmllc2hhbmRsZXIvZGF0YScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5naWZpZWRfY29sbGVjdGlvbl9pZHM6IEpTT04uc3RyaW5naWZ5KFskc2NvcGUuY29sbGVjdGlvbklkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb2xsZWN0aW9uU3VtbWFyeSA9IHJlc3BvbnNlLmRhdGEuc3VtbWFyaWVzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuYWRkV2FybmluZygnVGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGZldGNoaW5nIHRoZSBjb2xsZWN0aW9uIHN1bW1hcnkuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUub25OYXZpZ2F0ZUZyb21JZnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTaXRlQW5hbHl0aWNzU2VydmljZS5yZWdpc3RlclZpc2l0T3BwaWFGcm9tSWZyYW1lRXZlbnQoJHNjb3BlLmV4cGxvcmF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNTdWJtaXRCdXR0b25EaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBQbGF5ZXJQb3NpdGlvblNlcnZpY2UuZ2V0RGlzcGxheWVkQ2FyZEluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGNoZWNrIGlzIGFkZGVkIGJlY2F1c2UgaXQgd2FzIG9ic2VydmVkIHRoYXQgd2hlbiByZXR1cm5pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGN1cnJlbnQgY2FyZCBhZnRlciBuYXZpZ2F0aW5nIHRocm91Z2ggcHJldmlvdXMgY2FyZHMsIHVzaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYXJyb3dzLCB0aGUgU3VibWl0IGJ1dHRvbiB3YXMgc29tZXRpbWVzIGZhbHNlbHkgZGlzYWJsZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbHNvLCBzaW5jZSBhIGxlYXJuZXIncyBhbnN3ZXJzIHdvdWxkIGFsd2F5cyBiZSBpbiB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FyZCwgdGhpcyBhZGRpdGlvbmFsIGNoZWNrIGRvZXNuJ3QgaW50ZXJmZXJlIHdpdGggaXRzIG5vcm1hbFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd29ya2luZy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuaXNMYXN0Q2FyZChjdXJyZW50SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJlbnRJbnRlcmFjdGlvblNlcnZpY2UuaXNTdWJtaXRCdXR0b25EaXNhYmxlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0QW5zd2VyRnJvbVByb2dyZXNzTmF2ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ3VycmVudEludGVyYWN0aW9uU2VydmljZS5zdWJtaXRBbnN3ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgYW4gaW5wdXQvcmVzcG9uc2UgcGFpciBpbiB0aGUgbGVhcm5lciB2aWV3LlxuICovXG5yZXF1aXJlKCdkaXJlY3RpdmVzL2FuZ3VsYXItaHRtbC1iaW5kLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvJyArXG4gICAgJ2F1ZGlvLXRyYW5zbGF0aW9uLW1hbmFnZXIuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZXhwbG9yYXRpb24tZW5naW5lLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2V4cGxvcmF0aW9uLXBsYXllci1zdGF0ZS5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9wbGF5ZXItcG9zaXRpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcGxheWVyLXRyYW5zY3JpcHQuc2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQXVkaW9QbGF5ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9FeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9pbnRlcmFjdGlvbi1zcGVjcy5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ2lucHV0UmVzcG9uc2VQYWlyJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgZGF0YTogJz0nLFxuICAgICAgICAgICAgICAgIG9wcGlhQXZhdGFySW1hZ2VVcmw6ICcmJyxcbiAgICAgICAgICAgICAgICBwcm9maWxlUGljdHVyZTogJyYnLFxuICAgICAgICAgICAgICAgIGdldElucHV0UmVzcG9uc2VQYWlySWQ6ICcmaW5wdXRSZXNwb25zZVBhaXJJZCcsXG4gICAgICAgICAgICAgICAgaXNMYXN0UGFpcjogJyYnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xlYXJuZXItZXhwZXJpZW5jZS8nICtcbiAgICAgICAgICAgICAgICAnaW5wdXQtcmVzcG9uc2UtcGFpci5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlcjogW1xuICAgICAgICAgICAgICAgICckc2NvcGUnLCAnRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlJywgJ1BsYXllclRyYW5zY3JpcHRTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnRXhwbG9yYXRpb25IdG1sRm9ybWF0dGVyU2VydmljZScsICdJTlRFUkFDVElPTl9TUEVDUycsXG4gICAgICAgICAgICAgICAgJ1BsYXllclBvc2l0aW9uU2VydmljZScsICdDT01QT05FTlRfTkFNRV9GRUVEQkFDSycsXG4gICAgICAgICAgICAgICAgJ0F1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZScsICdBdWRpb1BsYXllclNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlJywgJ0FVRElPX0hJR0hMSUdIVF9DU1NfQ0xBU1MnLFxuICAgICAgICAgICAgICAgICdFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZScsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlLCBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZSwgRXhwbG9yYXRpb25IdG1sRm9ybWF0dGVyU2VydmljZSwgSU5URVJBQ1RJT05fU1BFQ1MsIFBsYXllclBvc2l0aW9uU2VydmljZSwgQ09NUE9ORU5UX05BTUVfRkVFREJBQ0ssIEF1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZSwgQXVkaW9QbGF5ZXJTZXJ2aWNlLCBBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLCBBVURJT19ISUdITElHSFRfQ1NTX0NMQVNTLCBFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0QW5zd2VyUG9wb3ZlclVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3RlbXBsYXRlcy8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYW5zd2VyLXBvcHVwLWNvbnRhaW5lci50ZW1wbGF0ZS5odG1sJyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0N1cnJlbnRDYXJkQXRFbmRPZlRyYW5zY3JpcHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuaXNMYXN0Q2FyZChQbGF5ZXJQb3NpdGlvblNlcnZpY2UuZ2V0RGlzcGxheWVkQ2FyZEluZGV4KCkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0QW5zd2VySHRtbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5ZWRDYXJkID0gUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuZ2V0Q2FyZChQbGF5ZXJQb3NpdGlvblNlcnZpY2UuZ2V0RGlzcGxheWVkQ2FyZEluZGV4KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uID0gZGlzcGxheWVkQ2FyZC5nZXRJbnRlcmFjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV4cGxvcmF0aW9uSHRtbEZvcm1hdHRlclNlcnZpY2UuZ2V0QW5zd2VySHRtbCgkc2NvcGUuZGF0YS5sZWFybmVySW5wdXQsIGludGVyYWN0aW9uLmlkLCBpbnRlcmFjdGlvbi5jdXN0b21pemF0aW9uQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybnMgYSBIVE1MIHN0cmluZyByZXByZXNlbnRpbmcgYSBzaG9ydCBzdW1tYXJ5IG9mIHRoZSBhbnN3ZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gLCBvciBudWxsIGlmIHRoZSBhbnN3ZXIgZG9lcyBub3QgaGF2ZSB0byBiZSBzdW1tYXJpemVkLlxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0U2hvcnRBbnN3ZXJIdG1sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXllZENhcmQgPSBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5nZXRDYXJkKFBsYXllclBvc2l0aW9uU2VydmljZS5nZXREaXNwbGF5ZWRDYXJkSW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb24gPSBkaXNwbGF5ZWRDYXJkLmdldEludGVyYWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hvcnRBbnN3ZXJIdG1sID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRhdGEubGVhcm5lcklucHV0Lmhhc093blByb3BlcnR5KCdhbnN3ZXJEZXRhaWxzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydEFuc3dlckh0bWwgPSAkc2NvcGUuZGF0YS5sZWFybmVySW5wdXQuYW5zd2VyRGV0YWlscztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCRzY29wZS5kYXRhICYmIGludGVyYWN0aW9uLmlkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5URVJBQ1RJT05fU1BFQ1NbaW50ZXJhY3Rpb24uaWRdLm5lZWRzX3N1bW1hcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydEFuc3dlckh0bWwgPSAoRXhwbG9yYXRpb25IdG1sRm9ybWF0dGVyU2VydmljZS5nZXRTaG9ydEFuc3dlckh0bWwoJHNjb3BlLmRhdGEubGVhcm5lcklucHV0LCBpbnRlcmFjdGlvbi5pZCwgaW50ZXJhY3Rpb24uY3VzdG9taXphdGlvbkFyZ3MpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaG9ydEFuc3dlckh0bWw7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRGZWVkYmFja0F1ZGlvSGlnaGxpZ2h0Q2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5pc0xhc3RQYWlyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEF1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRDdXJyZW50Q29tcG9uZW50TmFtZSgpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTVBPTkVOVF9OQU1FX0ZFRURCQUNLICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKEF1ZGlvUGxheWVyU2VydmljZS5pc1BsYXlpbmcoKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLmlzUGxheWluZygpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBVURJT19ISUdITElHSFRfQ1NTX0NMQVNTO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciBhc2tpbmcgbGVhcm5lciBmb3IgYW5zd2VyIGRldGFpbHMuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3BsYXllci10cmFuc2NyaXB0LnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2xlYXJuZXItYW5zd2VyLWluZm8uc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZXhwbG9yYXRpb24tZW5naW5lLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0V4cGxvcmF0aW9uSHRtbEZvcm1hdHRlclNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnbGVhcm5lckFuc3dlckluZm9DYXJkJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcbiAgICAgICAgICAgICAgICBnZXRTdWJtaXRBbnN3ZXJGbjogJyZzdWJtaXRBbnN3ZXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvbGVhcm5lci1leHBlcmllbmNlLycgK1xuICAgICAgICAgICAgICAgICdsZWFybmVyLWFuc3dlci1pbmZvLWNhcmQuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlJywgJ0V4cGxvcmF0aW9uSHRtbEZvcm1hdHRlclNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdMZWFybmVyQW5zd2VySW5mb1NlcnZpY2UnLCAnUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2UsIEV4cGxvcmF0aW9uSHRtbEZvcm1hdHRlclNlcnZpY2UsIExlYXJuZXJBbnN3ZXJJbmZvU2VydmljZSwgUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmFuc3dlckRldGFpbHMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb24gPSBFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2UuZ2V0U3RhdGUoKS5pbnRlcmFjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5zdWJtaXRMZWFybmVyQW5zd2VySW5mbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExlYXJuZXJBbnN3ZXJJbmZvU2VydmljZS5yZWNvcmRMZWFybmVyQW5zd2VySW5mbyhjdHJsLmFuc3dlckRldGFpbHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuYWRkTmV3SW5wdXQoeyBhbnN3ZXJEZXRhaWxzOiBjdHJsLmFuc3dlckRldGFpbHMgfSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuYWRkTmV3UmVzcG9uc2UoTGVhcm5lckFuc3dlckluZm9TZXJ2aWNlLmdldFNvbGljaXRBbnN3ZXJEZXRhaWxzRmVlZGJhY2soKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmdldFN1Ym1pdEFuc3dlckZuKCkoTGVhcm5lckFuc3dlckluZm9TZXJ2aWNlLmdldEN1cnJlbnRBbnN3ZXIoKSwgTGVhcm5lckFuc3dlckluZm9TZXJ2aWNlLmdldEN1cnJlbnRJbnRlcmFjdGlvblJ1bGVzU2VydmljZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5kaXNwbGF5Q3VycmVudEFuc3dlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBFeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlLmdldEFuc3dlckh0bWwoTGVhcm5lckFuc3dlckluZm9TZXJ2aWNlLmdldEN1cnJlbnRBbnN3ZXIoKSwgaW50ZXJhY3Rpb24uaWQsIGludGVyYWN0aW9uLmN1c3RvbWl6YXRpb25BcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNiBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENvbnRyb2xsZXIgZm9yIHRoZSBzdXBwbGVtZW50YWwgY2FyZC5cbiAqL1xucmVxdWlyZSgnZGlyZWN0aXZlcy9hbmd1bGFyLWh0bWwtYmluZC5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzLycgK1xuICAgICdhdWRpby10cmFuc2xhdGlvbi1tYW5hZ2VyLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2N1cnJlbnQtaW50ZXJhY3Rpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQXVkaW9QbGF5ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9jb250ZXh0dWFsL1dpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ3N1cHBsZW1lbnRhbENhcmQnLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBvbkNsaWNrQ29udGludWVCdXR0b246ICcmJyxcbiAgICAgICAgICAgICAgICBpc0xlYXJuQWdhaW5CdXR0b246ICcmJyxcbiAgICAgICAgICAgICAgICBnZXREaXNwbGF5ZWRDYXJkOiAnJmRpc3BsYXllZENhcmQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2xlYXJuZXItZXhwZXJpZW5jZS8nICtcbiAgICAgICAgICAgICAgICAnc3VwcGxlbWVudGFsLWNhcmQuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyR0aW1lb3V0JywgJyR3aW5kb3cnLFxuICAgICAgICAgICAgICAgICdXaW5kb3dEaW1lbnNpb25zU2VydmljZScsICdDT05URU5UX0ZPQ1VTX0xBQkVMX1BSRUZJWCcsXG4gICAgICAgICAgICAgICAgJ1RXT19DQVJEX1RIUkVTSE9MRF9QWCcsICdFVkVOVF9BQ1RJVkVfQ0FSRF9DSEFOR0VEJyxcbiAgICAgICAgICAgICAgICAnQ09OVElOVUVfQlVUVE9OX0ZPQ1VTX0xBQkVMJywgJ0F1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZScsXG4gICAgICAgICAgICAgICAgJ0F1ZGlvUGxheWVyU2VydmljZScsICdBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnQ09NUE9ORU5UX05BTUVfRkVFREJBQ0snLCAnQVVESU9fSElHSExJR0hUX0NTU19DTEFTUycsXG4gICAgICAgICAgICAgICAgJ0N1cnJlbnRJbnRlcmFjdGlvblNlcnZpY2UnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR0aW1lb3V0LCAkd2luZG93LCBXaW5kb3dEaW1lbnNpb25zU2VydmljZSwgQ09OVEVOVF9GT0NVU19MQUJFTF9QUkVGSVgsIFRXT19DQVJEX1RIUkVTSE9MRF9QWCwgRVZFTlRfQUNUSVZFX0NBUkRfQ0hBTkdFRCwgQ09OVElOVUVfQlVUVE9OX0ZPQ1VTX0xBQkVMLCBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2UsIEF1ZGlvUGxheWVyU2VydmljZSwgQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZSwgQ09NUE9ORU5UX05BTUVfRkVFREJBQ0ssIEFVRElPX0hJR0hMSUdIVF9DU1NfQ0xBU1MsIEN1cnJlbnRJbnRlcmFjdGlvblNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZURpc3BsYXllZENhcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheWVkQ2FyZCA9ICRzY29wZS5nZXREaXNwbGF5ZWRDYXJkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xlYXJIZWxwQ2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhc3RBbnN3ZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kaXNwbGF5ZWRDYXJkLmlzQ29tcGxldGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFzdEFuc3dlciA9ICRzY29wZS5kaXNwbGF5ZWRDYXJkLmdldExhc3RBbnN3ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QUElBX0FWQVRBUl9JTUFHRV9VUkwgPSAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0U3RhdGljSW1hZ2VVcmwoJy9hdmF0YXIvb3BwaWFfYXZhdGFyXzEwMHB4LnN2ZycpKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkNPTlRJTlVFX0JVVFRPTl9GT0NVU19MQUJFTCA9IENPTlRJTlVFX0JVVFRPTl9GT0NVU19MQUJFTDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhlbHBDYXJkSHRtbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5oZWxwQ2FyZEhhc0NvbnRpbnVlQnV0dG9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS53aW5kb3dEaW1lbnNpb25zU2VydmljZSA9IFdpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSB1c2UgdGhlIG1heCBiZWNhdXNlIHRoZSBoZWlnaHQgcHJvcGVydHkgb2YgdGhlIGhlbHAgY2FyZCBpc1xuICAgICAgICAgICAgICAgICAgICAvLyB1bnN0YWJsZSB3aGlsZSBhbmltYXRpbmcsIGNhdXNpbmcgaW5maW5pdGUgZGlnZXN0IGVycm9ycy5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heEhlbHBDYXJkSGVpZ2h0U2VlbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jbGVhckhlbHBDYXJkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhlbHBDYXJkSHRtbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGVscENhcmRIYXNDb250aW51ZUJ1dHRvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4SGVscENhcmRIZWlnaHRTZWVuID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzSGVscENhcmRUYWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlbHBDYXJkID0gJCgnLmNvbnZlcnNhdGlvbi1za2luLWhlbHAtY2FyZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlbHBDYXJkLmhlaWdodCgpID4gbWF4SGVscENhcmRIZWlnaHRTZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4SGVscENhcmRIZWlnaHRTZWVuID0gaGVscENhcmQuaGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF4SGVscENhcmRIZWlnaHRTZWVuID4gJCh3aW5kb3cpLmhlaWdodCgpIC0gMTAwO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0SGVscENhcmRCb3R0b21Qb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWxwQ2FyZCA9ICQoJy5jb252ZXJzYXRpb24tc2tpbi1oZWxwLWNhcmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAkKCcuY29udmVyc2F0aW9uLXNraW4tc3VwcGxlbWVudGFsLWNhcmQtY29udGFpbmVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoY29udGFpbmVyLmhlaWdodCgpIC0gaGVscENhcmQuaGVpZ2h0KCkgLyAyLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgQ3VycmVudEludGVyYWN0aW9uU2VydmljZS5yZWdpc3RlclByZXN1Ym1pdEhvb2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IGNsZWFyIHRoZSBoZWxwIGNhcmQgb3Igc3VibWl0IGFuIGFuc3dlciBpZiB0aGVyZSBpcyBhblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBjb21pbmcgY2FyZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGlzcGxheWVkQ2FyZC5pc0NvbXBsZXRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsZWFySGVscENhcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kb24oRVZFTlRfQUNUSVZFX0NBUkRfQ0hBTkdFRCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGlzcGxheWVkQ2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRvbignaGVscENhcmRBdmFpbGFibGUnLCBmdW5jdGlvbiAoZXZlbnQsIGhlbHBDYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGVscENhcmRIdG1sID0gaGVscENhcmQuaGVscENhcmRIdG1sO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhlbHBDYXJkSGFzQ29udGludWVCdXR0b24gPSBoZWxwQ2FyZC5oYXNDb250aW51ZUJ1dHRvbjtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRGZWVkYmFja0F1ZGlvSGlnaGxpZ2h0Q2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldEN1cnJlbnRDb21wb25lbnROYW1lKCkgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NUE9ORU5UX05BTUVfRkVFREJBQ0sgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQXVkaW9QbGF5ZXJTZXJ2aWNlLmlzUGxheWluZygpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UuaXNQbGF5aW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFVRElPX0hJR0hMSUdIVF9DU1NfQ0xBU1M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZURpc3BsYXllZENhcmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENvbnRyb2xsZXIgZm9yIHRoZSBUdXRvciBDYXJkLlxuICovXG5yZXF1aXJlKCdkaXJlY3RpdmVzL2FuZ3VsYXItaHRtbC1iaW5kLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvbGF5b3V0LWRpcmVjdGl2ZXMvYXVkaW8tYmFyLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvbGVhcm5lci1leHBlcmllbmNlLycgK1xuICAgICdpbnB1dC1yZXNwb25zZS1wYWlyLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvYXVkaW8tcHJlbG9hZGVyLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzLycgK1xuICAgICdhdWRpby10cmFuc2xhdGlvbi1tYW5hZ2VyLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2N1cnJlbnQtaW50ZXJhY3Rpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZXhwbG9yYXRpb24tZW5naW5lLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2V4cGxvcmF0aW9uLXBsYXllci1zdGF0ZS5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9sZWFybmVyLWFuc3dlci1pbmZvLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlLmNvbnN0YW50cy50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQXVkaW9QbGF5ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Db250ZXh0U2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvVXNlclNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL2NvbnRleHR1YWwvRGV2aWNlSW5mb1NlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL2NvbnRleHR1YWwvVXJsU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvY29udGV4dHVhbC9XaW5kb3dEaW1lbnNpb25zU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UuY29uc3RhbnRzLmFqcy50cycpO1xucmVxdWlyZSgncGFnZXMvaW50ZXJhY3Rpb24tc3BlY3MuY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuYW5pbWF0aW9uKCcuY29udmVyc2F0aW9uLXNraW4tcmVzcG9uc2VzLWFuaW1hdGUtc2xpZGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUgIT09ICduZy1oaWRlJykge1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50LmhpZGUoKS5zbGlkZURvd24oNDAwLCBkb25lKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUgIT09ICduZy1oaWRlJykge1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50LnNsaWRlVXAoNDAwLCBkb25lKTtcbiAgICAgICAgfVxuICAgIH07XG59KTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgndHV0b3JDYXJkJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsIGZ1bmN0aW9uIChVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgaXNMZWFybkFnYWluQnV0dG9uOiAnJicsXG4gICAgICAgICAgICAgICAgb25EaXNtaXNzOiAnJicsXG4gICAgICAgICAgICAgICAgZ2V0RGlzcGxheWVkQ2FyZDogJyZkaXNwbGF5ZWRDYXJkJyxcbiAgICAgICAgICAgICAgICBzdGFydENhcmRDaGFuZ2VBbmltYXRpb246ICc9JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9sZWFybmVyLWV4cGVyaWVuY2UvJyArXG4gICAgICAgICAgICAgICAgJ3R1dG9yLWNhcmQuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJGFuY2hvclNjcm9sbCcsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHRpbWVvdXQnLFxuICAgICAgICAgICAgICAgICdBdWRpb1BsYXllclNlcnZpY2UnLCAnQXVkaW9QcmVsb2FkZXJTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlJywgJ0F1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdDb250ZXh0U2VydmljZScsICdDdXJyZW50SW50ZXJhY3Rpb25TZXJ2aWNlJywgJ0RldmljZUluZm9TZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlJywgJ0V4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnTGVhcm5lckFuc3dlckluZm9TZXJ2aWNlJywgJ1VybFNlcnZpY2UnLCAnVXNlclNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdXaW5kb3dEaW1lbnNpb25zU2VydmljZScsICdBVURJT19ISUdITElHSFRfQ1NTX0NMQVNTJyxcbiAgICAgICAgICAgICAgICAnQ09NUE9ORU5UX05BTUVfQ09OVEVOVCcsICdDT05URU5UX0ZPQ1VTX0xBQkVMX1BSRUZJWCcsXG4gICAgICAgICAgICAgICAgJ0NPTlRJTlVFX0JVVFRPTl9GT0NVU19MQUJFTCcsICdERUZBVUxUX1BST0ZJTEVfSU1BR0VfUEFUSCcsXG4gICAgICAgICAgICAgICAgJ0VWRU5UX0FDVElWRV9DQVJEX0NIQU5HRUQnLCAnRVZFTlRfTkVXX0NBUkRfQVZBSUxBQkxFJyxcbiAgICAgICAgICAgICAgICAnSU5URVJBQ1RJT05fRElTUExBWV9NT0RFX0lOTElORScsICdJTlRFUkFDVElPTl9TUEVDUycsICdQQUdFX0NPTlRFWFQnLFxuICAgICAgICAgICAgICAgICdUV09fQ0FSRF9USFJFU0hPTERfUFgnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkYW5jaG9yU2Nyb2xsLCAkbG9jYXRpb24sICRyb290U2NvcGUsICRzY29wZSwgJHRpbWVvdXQsIEF1ZGlvUGxheWVyU2VydmljZSwgQXVkaW9QcmVsb2FkZXJTZXJ2aWNlLCBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2UsIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UsIENvbnRleHRTZXJ2aWNlLCBDdXJyZW50SW50ZXJhY3Rpb25TZXJ2aWNlLCBEZXZpY2VJbmZvU2VydmljZSwgRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlLCBFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZSwgTGVhcm5lckFuc3dlckluZm9TZXJ2aWNlLCBVcmxTZXJ2aWNlLCBVc2VyU2VydmljZSwgV2luZG93RGltZW5zaW9uc1NlcnZpY2UsIEFVRElPX0hJR0hMSUdIVF9DU1NfQ0xBU1MsIENPTVBPTkVOVF9OQU1FX0NPTlRFTlQsIENPTlRFTlRfRk9DVVNfTEFCRUxfUFJFRklYLCBDT05USU5VRV9CVVRUT05fRk9DVVNfTEFCRUwsIERFRkFVTFRfUFJPRklMRV9JTUFHRV9QQVRILCBFVkVOVF9BQ1RJVkVfQ0FSRF9DSEFOR0VELCBFVkVOVF9ORVdfQ0FSRF9BVkFJTEFCTEUsIElOVEVSQUNUSU9OX0RJU1BMQVlfTU9ERV9JTkxJTkUsIElOVEVSQUNUSU9OX1NQRUNTLCBQQUdFX0NPTlRFWFQsIFRXT19DQVJEX1RIUkVTSE9MRF9QWCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2VkaXRvclByZXZpZXdNb2RlID0gQ29udGV4dFNlcnZpY2UuaXNJbkV4cGxvcmF0aW9uRWRpdG9yUGFnZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlRGlzcGxheWVkQ2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcmVQcmV2aW91c1Jlc3BvbnNlc1Nob3duID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFzdEFuc3dlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29uY2VwdENhcmRJc0JlaW5nU2hvd24gPSBCb29sZWFuKCEkc2NvcGUuZ2V0RGlzcGxheWVkQ2FyZCgpLmdldEludGVyYWN0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludGVyYWN0aW9uSXNBY3RpdmUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEkc2NvcGUuZ2V0RGlzcGxheWVkQ2FyZCgpLmlzQ29tcGxldGVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKEVWRU5UX05FV19DQVJEX0FWQUlMQUJMRSwgZnVuY3Rpb24gKGV2dCwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnRlcmFjdGlvbklzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJlbnRJbnRlcmFjdGlvblNlcnZpY2UucmVnaXN0ZXJQcmVzdWJtaXRIb29rKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUud2FpdGluZ0Zvck9wcGlhRmVlZGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5pbnRlcmFjdGlvbklzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhc3RBbnN3ZXIgPSAkc2NvcGUuZ2V0RGlzcGxheWVkQ2FyZCgpLmdldExhc3RBbnN3ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmNvbmNlcHRDYXJkSXNCZWluZ1Nob3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludGVyYWN0aW9uSW5zdHJ1Y3Rpb25zID0gKCRzY29wZS5nZXREaXNwbGF5ZWRDYXJkKCkuZ2V0SW50ZXJhY3Rpb25JbnN0cnVjdGlvbnMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRlbnRBdWRpb1RyYW5zbGF0aW9ucyA9ICgkc2NvcGUuZ2V0RGlzcGxheWVkQ2FyZCgpLmdldFZvaWNlb3ZlcnMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbGVhclNlY29uZGFyeUF1ZGlvVHJhbnNsYXRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlLnNldENvbnRlbnRBdWRpb1RyYW5zbGF0aW9ucyhhbmd1bGFyLmNvcHkoJHNjb3BlLmNvbnRlbnRBdWRpb1RyYW5zbGF0aW9ucyksICRzY29wZS5nZXREaXNwbGF5ZWRDYXJkKCkuZ2V0Q29udGVudEh0bWwoKSwgQ09NUE9ORU5UX05BTUVfQ09OVEVOVCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9QbGF5ZXJTZXJ2aWNlLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1ByZWxvYWRlclNlcnZpY2UuY2xlYXJNb3N0UmVjZW50bHlSZXF1ZXN0ZWRBdWRpb0ZpbGVuYW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZS5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzSW50ZXJhY3Rpb25JbmxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNvbmNlcHRDYXJkSXNCZWluZ1Nob3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmdldERpc3BsYXllZENhcmQoKS5pc0ludGVyYWN0aW9uSW5saW5lKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRDb250ZW50QXVkaW9IaWdobGlnaHRDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q3VycmVudENvbXBvbmVudE5hbWUoKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT01QT05FTlRfTkFNRV9DT05URU5UICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKEF1ZGlvUGxheWVyU2VydmljZS5pc1BsYXlpbmcoKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLmlzUGxheWluZygpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBVURJT19ISUdITElHSFRfQ1NTX0NMQVNTO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXJlUHJldmlvdXNSZXNwb25zZXNTaG93biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUud2FpdGluZ0Zvck9wcGlhRmVlZGJhY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLndpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlID0gV2luZG93RGltZW5zaW9uc1NlcnZpY2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0lmcmFtZWQgPSBVcmxTZXJ2aWNlLmlzSWZyYW1lZCgpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuQXNrTGVhcm5lckZvckFuc3dlckluZm8gPSAoTGVhcm5lckFuc3dlckluZm9TZXJ2aWNlLmNhbkFza0xlYXJuZXJGb3JBbnN3ZXJJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QUElBX0FWQVRBUl9JTUFHRV9VUkwgPSAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0U3RhdGljSW1hZ2VVcmwoJy9hdmF0YXIvb3BwaWFfYXZhdGFyXzEwMHB4LnN2ZycpKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2ZpbGVQaWN0dXJlID0gVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0U3RhdGljSW1hZ2VVcmwoJy9hdmF0YXIvdXNlcl9ibHVlXzcycHgucG5nJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2VkaXRvclByZXZpZXdNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5nZXRQcm9maWxlSW1hZ2VEYXRhVXJsQXN5bmMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2ZpbGVQaWN0dXJlID0gZGF0YVVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2ZpbGVQaWN0dXJlID0gKFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldFN0YXRpY0ltYWdlVXJsKERFRkFVTFRfUFJPRklMRV9JTUFHRV9QQVRIKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldENvbnRlbnRGb2N1c0xhYmVsID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ09OVEVOVF9GT0NVU19MQUJFTF9QUkVGSVggKyBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZVNob3dQcmV2aW91c1Jlc3BvbnNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcmVQcmV2aW91c1Jlc3BvbnNlc1Nob3duID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhJHNjb3BlLmFyZVByZXZpb3VzUmVzcG9uc2VzU2hvd247XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1dpbmRvd05hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBXaW5kb3dEaW1lbnNpb25zU2VydmljZS5pc1dpbmRvd05hcnJvdygpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuV2luZG93U2hvd1R3b0NhcmRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFdpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlLmdldFdpZHRoKCkgPiBUV09fQ0FSRF9USFJFU0hPTERfUFg7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QXVkaW9CYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCEkc2NvcGUuaXNJZnJhbWVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIUV4cGxvcmF0aW9uUGxheWVyU3RhdGVTZXJ2aWNlLmlzSW5RdWVzdGlvbk1vZGUoKSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvbnRlbnRBdWRpb1RyYW5zbGF0aW9uQXZhaWxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jb25jZXB0Q2FyZElzQmVpbmdTaG93bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoJHNjb3BlLmdldERpc3BsYXllZENhcmQoKS5pc0NvbnRlbnRBdWRpb1RyYW5zbGF0aW9uQXZhaWxhYmxlKCkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDdXJyZW50Q2FyZEF0RW5kT2ZUcmFuc2NyaXB0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEkc2NvcGUuZ2V0RGlzcGxheWVkQ2FyZCgpLmlzQ29tcGxldGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc09uVGVybWluYWxDYXJkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgkc2NvcGUuZ2V0RGlzcGxheWVkQ2FyZCgpLmlzVGVybWluYWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRJbnB1dFJlc3BvbnNlUGFpcklkID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2lucHV0LXJlc3BvbnNlLXBhaXItJyArIGluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKEVWRU5UX0FDVElWRV9DQVJEX0NIQU5HRUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZURpc3BsYXllZENhcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kb24oJ29wcGlhRmVlZGJhY2tBdmFpbGFibGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUud2FpdGluZ0Zvck9wcGlhRmVlZGJhY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF1dG8gc2Nyb2xsIHRvIHRoZSBuZXcgZmVlZGJhY2sgb24gbW9iaWxlIGRldmljZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEZXZpY2VJbmZvU2VydmljZS5pc01vYmlsZURldmljZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhdGVzdEZlZWRiYWNrSW5kZXggPSAoJHNjb3BlLmdldERpc3BsYXllZENhcmQoKS5nZXRJbnB1dFJlc3BvbnNlUGFpcnMoKS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBSZWZlcmVuY2U6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQwMTM0MzgxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCkgd2l0aG91dCBjaGFuZ2luZyBhY3R1YWwgaGFzaCB2YWx1ZSBvZiB1cmxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtzIG9ubHkgd2hlbiB3cml0dGVuIGluc2lkZSBhIHRpbWVvdXQgb2YgMCBtcy4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsLnlPZmZzZXQgPSA4MDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24uaGFzaCgkc2NvcGUuZ2V0SW5wdXRSZXNwb25zZVBhaXJJZChsYXRlc3RGZWVkYmFja0luZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGlzcGxheWVkQ2FyZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE1IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ2xhc3NpZmljYXRpb24gc2VydmljZSBmb3IgYW5zd2VyIGdyb3Vwcy5cbiAqL1xucmVxdWlyZSgnZG9tYWluL2NsYXNzaWZpZXIvQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHRPYmplY3RGYWN0b3J5LnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy8nICtcbiAgICAncHJlZGljdGlvbi1hbGdvcml0aG0tcmVnaXN0cnkuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvc3RhdGUtY2xhc3NpZmllci1tYXBwaW5nLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0FsZXJ0c1NlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlLmNvbnN0YW50cy5hanMudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2ludGVyYWN0aW9uLXNwZWNzLmNvbnN0YW50cy5hanMudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0Fuc3dlckNsYXNzaWZpY2F0aW9uU2VydmljZScsIFtcbiAgICAnQWxlcnRzU2VydmljZScsICdBbnN3ZXJDbGFzc2lmaWNhdGlvblJlc3VsdE9iamVjdEZhY3RvcnknLFxuICAgICdQcmVkaWN0aW9uQWxnb3JpdGhtUmVnaXN0cnlTZXJ2aWNlJywgJ1N0YXRlQ2xhc3NpZmllck1hcHBpbmdTZXJ2aWNlJyxcbiAgICAnREVGQVVMVF9PVVRDT01FX0NMQVNTSUZJQ0FUSU9OJywgJ0VOQUJMRV9NTF9DTEFTU0lGSUVSUycsXG4gICAgJ0VYUExJQ0lUX0NMQVNTSUZJQ0FUSU9OJyxcbiAgICAnSU5URVJBQ1RJT05fU1BFQ1MnLCAnU1RBVElTVElDQUxfQ0xBU1NJRklDQVRJT04nLFxuICAgICdUUkFJTklOR19EQVRBX0NMQVNTSUZJQ0FUSU9OJyxcbiAgICBmdW5jdGlvbiAoQWxlcnRzU2VydmljZSwgQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHRPYmplY3RGYWN0b3J5LCBQcmVkaWN0aW9uQWxnb3JpdGhtUmVnaXN0cnlTZXJ2aWNlLCBTdGF0ZUNsYXNzaWZpZXJNYXBwaW5nU2VydmljZSwgREVGQVVMVF9PVVRDT01FX0NMQVNTSUZJQ0FUSU9OLCBFTkFCTEVfTUxfQ0xBU1NJRklFUlMsIEVYUExJQ0lUX0NMQVNTSUZJQ0FUSU9OLCBJTlRFUkFDVElPTl9TUEVDUywgU1RBVElTVElDQUxfQ0xBU1NJRklDQVRJT04sIFRSQUlOSU5HX0RBVEFfQ0xBU1NJRklDQVRJT04pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbmRzIHRoZSBmaXJzdCBhbnN3ZXIgZ3JvdXAgd2l0aCBhIHJ1bGUgdGhhdCByZXR1cm5zIHRydWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gYW5zd2VyIC0gVGhlIGFuc3dlciB0aGF0IHRoZSB1c2VyIGhhcyBzdWJtaXR0ZWQuXG4gICAgICAgICAqIEBwYXJhbSB7YXJyYXl9IGFuc3dlckdyb3VwcyAtIFRoZSBhbnN3ZXIgZ3JvdXBzIG9mIHRoZSBpbnRlcmFjdGlvbi4gRWFjaFxuICAgICAgICAgKiAgICAgYW5zd2VyIGdyb3VwIGNvbnRhaW5zIHJ1bGVfc3BlY3MsIHdoaWNoIGlzIGEgbGlzdCBvZiBydWxlcy5cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGRlZmF1bHRPdXRjb21lIC0gVGhlIGRlZmF1bHQgb3V0Y29tZSBvZiB0aGUgaW50ZXJhY3Rpb24uXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGludGVyYWN0aW9uUnVsZXNTZXJ2aWNlIFRoZSBzZXJ2aWNlIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAgICAgKiAgICAgZXhwbGljaXQgcnVsZXMgb2YgdGhhdCBpbnRlcmFjdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7b2JqZWN0fSBBbiBBbnN3ZXJDbGFzc2lmaWNhdGlvblJlc3VsdCBkb21haW4gb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGNsYXNzaWZ5QW5zd2VyID0gZnVuY3Rpb24gKGFuc3dlciwgYW5zd2VyR3JvdXBzLCBkZWZhdWx0T3V0Y29tZSwgaW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UpIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGZpcnN0IGdyb3VwIHRoYXQgY29udGFpbnMgYSBydWxlIHdoaWNoIHJldHVybnMgdHJ1ZVxuICAgICAgICAgICAgLy8gVE9ETyhiaGVubmluZyk6IEltcGxlbWVudCB0cmFpbmluZyBkYXRhIGNsYXNzaWZpY2F0aW9uLlxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbnN3ZXJHcm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFuc3dlckdyb3Vwc1tpXS5ydWxlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IGFuc3dlckdyb3Vwc1tpXS5ydWxlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyYWN0aW9uUnVsZXNTZXJ2aWNlW3J1bGUudHlwZV0oYW5zd2VyLCBydWxlLmlucHV0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBbnN3ZXJDbGFzc2lmaWNhdGlvblJlc3VsdE9iamVjdEZhY3RvcnkuY3JlYXRlTmV3KGFuc3dlckdyb3Vwc1tpXS5vdXRjb21lLCBpLCBqLCBFWFBMSUNJVF9DTEFTU0lGSUNBVElPTik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiBubyBydWxlIGluIGFueSBhbnN3ZXIgZ3JvdXAgcmV0dXJucyB0cnVlLCB0aGUgZGVmYXVsdCAnZ3JvdXAnIGlzXG4gICAgICAgICAgICAvLyByZXR1cm5lZC4gVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBkZWZhdWx0IG91dGNvbWUgaXMgbm90IGRlZmluZWQuXG4gICAgICAgICAgICBpZiAoZGVmYXVsdE91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHRPYmplY3RGYWN0b3J5LmNyZWF0ZU5ldyhkZWZhdWx0T3V0Y29tZSwgYW5zd2VyR3JvdXBzLmxlbmd0aCwgMCwgREVGQVVMVF9PVVRDT01FX0NMQVNTSUZJQ0FUSU9OKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuYWRkV2FybmluZygnU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCB0aGUgZXhwbG9yYXRpb24uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENsYXNzaWZpZXMgdGhlIGFuc3dlciBhY2NvcmRpbmcgdG8gdGhlIGFuc3dlciBncm91cHMuIGFuZCByZXR1cm5zIHRoZVxuICAgICAgICAgICAgICogY29ycmVzcG9uZGluZyBhbnN3ZXIgY2xhc3NpZmljYXRpb24gcmVzdWx0LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0ZU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgc3RhdGUgd2hlcmUgdGhlIHVzZXJcbiAgICAgICAgICAgICAqICAgc3VibWl0dGVkIHRoZSBhbnN3ZXIuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gaW50ZXJhY3Rpb25Jbk9sZFN0YXRlIC0gVGhlIGludGVyYWN0aW9uIHByZXNlbnQgaW4gdGhlXG4gICAgICAgICAgICAgKiAgIHN0YXRlIHdoZXJlIHRoZSB1c2VyIHN1Ym1pdHRlZCB0aGUgYW5zd2VyLlxuICAgICAgICAgICAgICogQHBhcmFtIHsqfSBhbnN3ZXIgLSBUaGUgYW5zd2VyIHRoYXQgdGhlIHVzZXIgaGFzIHN1Ym1pdHRlZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGludGVyYWN0aW9uUnVsZXNTZXJ2aWNlIC0gVGhlIHNlcnZpY2Ugd2hpY2ggY29udGFpbnNcbiAgICAgICAgICAgICAqICAgdGhlIGV4cGxpY2l0IHJ1bGVzIG9mIHRoYXQgaW50ZXJhY3Rpb24uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHJldHVybiB7QW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHR9IFRoZSByZXN1bHRpbmdcbiAgICAgICAgICAgICAqICAgQW5zd2VyQ2xhc3NpZmljYXRpb25SZXN1bHQgZG9tYWluIG9iamVjdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0TWF0Y2hpbmdDbGFzc2lmaWNhdGlvblJlc3VsdDogZnVuY3Rpb24gKHN0YXRlTmFtZSwgaW50ZXJhY3Rpb25Jbk9sZFN0YXRlLCBhbnN3ZXIsIGludGVyYWN0aW9uUnVsZXNTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgYW5zd2VyR3JvdXBzID0gaW50ZXJhY3Rpb25Jbk9sZFN0YXRlLmFuc3dlckdyb3VwcztcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdE91dGNvbWUgPSBpbnRlcmFjdGlvbkluT2xkU3RhdGUuZGVmYXVsdE91dGNvbWU7XG4gICAgICAgICAgICAgICAgaWYgKGludGVyYWN0aW9uUnVsZXNTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0ID0gY2xhc3NpZnlBbnN3ZXIoYW5zd2VyLCBhbnN3ZXJHcm91cHMsIGRlZmF1bHRPdXRjb21lLCBpbnRlcmFjdGlvblJ1bGVzU2VydmljZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmFkZFdhcm5pbmcoJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggdGhlIGV4cGxvcmF0aW9uOiBubyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbnRlcmFjdGlvblJ1bGVzU2VydmljZSB3YXMgYXZhaWxhYmxlLicpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignTm8gaW50ZXJhY3Rpb25SdWxlc1NlcnZpY2Ugd2FzIGF2YWlsYWJsZSB0byBjbGFzc2lmeSB0aGUgYW5zd2VyLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcnVsZUJhc2VkT3V0Y29tZUlzRGVmYXVsdCA9IChhbnN3ZXJDbGFzc2lmaWNhdGlvblJlc3VsdC5vdXRjb21lID09PSBkZWZhdWx0T3V0Y29tZSk7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uSXNUcmFpbmFibGUgPSBJTlRFUkFDVElPTl9TUEVDU1tpbnRlcmFjdGlvbkluT2xkU3RhdGUuaWRdLmlzX3RyYWluYWJsZTtcbiAgICAgICAgICAgICAgICBpZiAocnVsZUJhc2VkT3V0Y29tZUlzRGVmYXVsdCAmJiBpbnRlcmFjdGlvbklzVHJhaW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5zd2VyR3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5zd2VyR3JvdXBzW2ldLnRyYWluaW5nRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYW5zd2VyR3JvdXBzW2ldLnRyYWluaW5nRGF0YS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lcXVhbHMoYW5zd2VyLCBhbnN3ZXJHcm91cHNbaV0udHJhaW5pbmdEYXRhW2pdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeS5jcmVhdGVOZXcoYW5zd2VyR3JvdXBzW2ldLm91dGNvbWUsIGksIG51bGwsIFRSQUlOSU5HX0RBVEFfQ0xBU1NJRklDQVRJT04pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChFTkFCTEVfTUxfQ0xBU1NJRklFUlMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc2lmaWVyID0gU3RhdGVDbGFzc2lmaWVyTWFwcGluZ1NlcnZpY2UuZ2V0Q2xhc3NpZmllcihzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzaWZpZXIgJiYgY2xhc3NpZmllci5jbGFzc2lmaWVyRGF0YSAmJiAoY2xhc3NpZmllci5hbGdvcml0aG1JZCAmJiBjbGFzc2lmaWVyLmRhdGFTY2hlbWFWZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmVkaWN0aW9uU2VydmljZSA9IChQcmVkaWN0aW9uQWxnb3JpdGhtUmVnaXN0cnlTZXJ2aWNlLmdldFByZWRpY3Rpb25TZXJ2aWNlKGNsYXNzaWZpZXIuYWxnb3JpdGhtSWQsIGNsYXNzaWZpZXIuZGF0YVNjaGVtYVZlcnNpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBwcmVkaWN0aW9uIHNlcnZpY2UgZXhpc3RzLCB3ZSBydW4gY2xhc3NpZmllci4gV2UgcmV0dXJuIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgb3V0Y29tZSBvdGhlcndpc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZWRpY3Rpb25TZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmVkaWN0ZWRBbnN3ZXJHcm91cEluZGV4ID0gcHJlZGljdGlvblNlcnZpY2UucHJlZGljdChjbGFzc2lmaWVyLmNsYXNzaWZpZXJEYXRhLCBhbnN3ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJlZGljdGVkQW5zd2VyR3JvdXBJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0ID0gKEFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeS5jcmVhdGVOZXcoZGVmYXVsdE91dGNvbWUsIGFuc3dlckdyb3Vwcy5sZW5ndGgsIDAsIERFRkFVTFRfT1VUQ09NRV9DTEFTU0lGSUNBVElPTikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0ID0gKEFuc3dlckNsYXNzaWZpY2F0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeS5jcmVhdGVOZXcoYW5zd2VyR3JvdXBzW3ByZWRpY3RlZEFuc3dlckdyb3VwSW5kZXhdLm91dGNvbWUsIHByZWRpY3RlZEFuc3dlckdyb3VwSW5kZXgsIG51bGwsIFNUQVRJU1RJQ0FMX0NMQVNTSUZJQ0FUSU9OKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhbnN3ZXJDbGFzc2lmaWNhdGlvblJlc3VsdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0NsYXNzaWZpZWRFeHBsaWNpdGx5T3JHb2VzVG9OZXdTdGF0ZTogZnVuY3Rpb24gKHN0YXRlTmFtZSwgc3RhdGUsIGFuc3dlciwgaW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5nZXRNYXRjaGluZ0NsYXNzaWZpY2F0aW9uUmVzdWx0KHN0YXRlTmFtZSwgc3RhdGUuaW50ZXJhY3Rpb24sIGFuc3dlciwgaW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiAocmVzdWx0Lm91dGNvbWUuZGVzdCAhPT0gc3RhdGUubmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuY2xhc3NpZmljYXRpb25DYXRlZ29yaXphdGlvbiAhPT1cbiAgICAgICAgICAgICAgICAgICAgICAgIERFRkFVTFRfT1VUQ09NRV9DTEFTU0lGSUNBVElPTik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNlcnZpY2UgdG8gcHJlbG9hZCBhdWRpbyBpbnRvIEFzc2V0c0JhY2tlbmRBcGlTZXJ2aWNlJ3MgY2FjaGUuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvTGFuZ3VhZ2VVdGlsU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvJyArXG4gICAgJ2F1ZGlvLXRyYW5zbGF0aW9uLWxhbmd1YWdlLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0Fzc2V0c0JhY2tlbmRBcGlTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Db21wdXRlR3JhcGhTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Db250ZXh0U2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnQXVkaW9QcmVsb2FkZXJTZXJ2aWNlJywgW1xuICAgICdBc3NldHNCYWNrZW5kQXBpU2VydmljZScsICdBdWRpb1RyYW5zbGF0aW9uTGFuZ3VhZ2VTZXJ2aWNlJyxcbiAgICAnQ29tcHV0ZUdyYXBoU2VydmljZScsICdDb250ZXh0U2VydmljZScsXG4gICAgZnVuY3Rpb24gKEFzc2V0c0JhY2tlbmRBcGlTZXJ2aWNlLCBBdWRpb1RyYW5zbGF0aW9uTGFuZ3VhZ2VTZXJ2aWNlLCBDb21wdXRlR3JhcGhTZXJ2aWNlLCBDb250ZXh0U2VydmljZSkge1xuICAgICAgICB2YXIgTUFYX05VTV9BVURJT19GSUxFU19UT19ET1dOTE9BRF9TSU1VTFRBTkVPVVNMWSA9IDM7XG4gICAgICAgIHZhciBfZmlsZW5hbWVzT2ZBdWRpb0N1cnJlbnRseURvd25sb2FkaW5nID0gW107XG4gICAgICAgIHZhciBfZmlsZW5hbWVzT2ZBdWRpb1RvQmVEb3dubG9hZGVkID0gW107XG4gICAgICAgIHZhciBfZXhwbG9yYXRpb24gPSBudWxsO1xuICAgICAgICB2YXIgX2F1ZGlvTG9hZGVkQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB2YXIgX21vc3RSZWNlbnRseVJlcXVlc3RlZEF1ZGlvRmlsZW5hbWUgPSBudWxsO1xuICAgICAgICB2YXIgX2luaXQgPSBmdW5jdGlvbiAoZXhwbG9yYXRpb24pIHtcbiAgICAgICAgICAgIF9leHBsb3JhdGlvbiA9IGV4cGxvcmF0aW9uO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2dldEF1ZGlvRmlsZW5hbWVzSW5CZnNPcmRlciA9IGZ1bmN0aW9uIChzb3VyY2VTdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgIHZhciBsYW5ndWFnZUNvZGUgPSBBdWRpb1RyYW5zbGF0aW9uTGFuZ3VhZ2VTZXJ2aWNlXG4gICAgICAgICAgICAgICAgLmdldEN1cnJlbnRBdWRpb0xhbmd1YWdlQ29kZSgpO1xuICAgICAgICAgICAgdmFyIHN0YXRlTmFtZXNJbkJmc09yZGVyID0gQ29tcHV0ZUdyYXBoU2VydmljZS5jb21wdXRlQmZzVHJhdmVyc2FsT2ZTdGF0ZXMoX2V4cGxvcmF0aW9uLmdldEluaXRpYWxTdGF0ZSgpLm5hbWUsIF9leHBsb3JhdGlvbi5nZXRTdGF0ZXMoKSwgc291cmNlU3RhdGVOYW1lKTtcbiAgICAgICAgICAgIHZhciBhdWRpb0ZpbGVuYW1lcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGFsbEF1ZGlvVHJhbnNsYXRpb25zID0gX2V4cGxvcmF0aW9uLmdldEFsbFZvaWNlb3ZlcnMobGFuZ3VhZ2VDb2RlKTtcbiAgICAgICAgICAgIHN0YXRlTmFtZXNJbkJmc09yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBhbGxBdWRpb1RyYW5zbGF0aW9uc0ZvclN0YXRlID0gYWxsQXVkaW9UcmFuc2xhdGlvbnNbc3RhdGVOYW1lXTtcbiAgICAgICAgICAgICAgICBhbGxBdWRpb1RyYW5zbGF0aW9uc0ZvclN0YXRlLmZvckVhY2goZnVuY3Rpb24gKGF1ZGlvVHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgYXVkaW9GaWxlbmFtZXMucHVzaChhdWRpb1RyYW5zbGF0aW9uLmZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGF1ZGlvRmlsZW5hbWVzO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2xvYWRBdWRpbyA9IGZ1bmN0aW9uIChhdWRpb0ZpbGVuYW1lKSB7XG4gICAgICAgICAgICBBc3NldHNCYWNrZW5kQXBpU2VydmljZS5sb2FkQXVkaW8oQ29udGV4dFNlcnZpY2UuZ2V0RXhwbG9yYXRpb25JZCgpLCBhdWRpb0ZpbGVuYW1lKS50aGVuKGZ1bmN0aW9uIChsb2FkZWRBdWRpbykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX2ZpbGVuYW1lc09mQXVkaW9DdXJyZW50bHlEb3dubG9hZGluZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2ZpbGVuYW1lc09mQXVkaW9DdXJyZW50bHlEb3dubG9hZGluZ1tpXSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlZEF1ZGlvLmZpbGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZmlsZW5hbWVzT2ZBdWRpb0N1cnJlbnRseURvd25sb2FkaW5nLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChfZmlsZW5hbWVzT2ZBdWRpb1RvQmVEb3dubG9hZGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRBdWRpb0ZpbGVuYW1lID0gX2ZpbGVuYW1lc09mQXVkaW9Ub0JlRG93bmxvYWRlZC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBfZmlsZW5hbWVzT2ZBdWRpb0N1cnJlbnRseURvd25sb2FkaW5nLnB1c2gobmV4dEF1ZGlvRmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBfbG9hZEF1ZGlvKG5leHRBdWRpb0ZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF9hdWRpb0xvYWRlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIF9hdWRpb0xvYWRlZENhbGxiYWNrKGxvYWRlZEF1ZGlvLmZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF9raWNrT2ZmQXVkaW9QcmVsb2FkZXIgPSBmdW5jdGlvbiAoc291cmNlU3RhdGVOYW1lKSB7XG4gICAgICAgICAgICBfZmlsZW5hbWVzT2ZBdWRpb1RvQmVEb3dubG9hZGVkID1cbiAgICAgICAgICAgICAgICBfZ2V0QXVkaW9GaWxlbmFtZXNJbkJmc09yZGVyKHNvdXJjZVN0YXRlTmFtZSk7XG4gICAgICAgICAgICB3aGlsZSAoX2ZpbGVuYW1lc09mQXVkaW9DdXJyZW50bHlEb3dubG9hZGluZy5sZW5ndGggPFxuICAgICAgICAgICAgICAgIE1BWF9OVU1fQVVESU9fRklMRVNfVE9fRE9XTkxPQURfU0lNVUxUQU5FT1VTTFkgJiZcbiAgICAgICAgICAgICAgICBfZmlsZW5hbWVzT2ZBdWRpb1RvQmVEb3dubG9hZGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgYXVkaW9GaWxlbmFtZSA9IF9maWxlbmFtZXNPZkF1ZGlvVG9CZURvd25sb2FkZWQuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBfZmlsZW5hbWVzT2ZBdWRpb0N1cnJlbnRseURvd25sb2FkaW5nLnB1c2goYXVkaW9GaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgX2xvYWRBdWRpbyhhdWRpb0ZpbGVuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF9jYW5jZWxQcmVsb2FkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgQXNzZXRzQmFja2VuZEFwaVNlcnZpY2UuYWJvcnRBbGxDdXJyZW50QXVkaW9Eb3dubG9hZHMoKTtcbiAgICAgICAgICAgIF9maWxlbmFtZXNPZkF1ZGlvQ3VycmVudGx5RG93bmxvYWRpbmcgPSBbXTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChleHBsb3JhdGlvbikge1xuICAgICAgICAgICAgICAgIF9pbml0KGV4cGxvcmF0aW9uKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBraWNrT2ZmQXVkaW9QcmVsb2FkZXI6IGZ1bmN0aW9uIChzb3VyY2VTdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBfa2lja09mZkF1ZGlvUHJlbG9hZGVyKHNvdXJjZVN0YXRlTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNMb2FkaW5nQXVkaW9GaWxlOiBmdW5jdGlvbiAoZmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2ZpbGVuYW1lc09mQXVkaW9DdXJyZW50bHlEb3dubG9hZGluZy5pbmRleE9mKGZpbGVuYW1lKSAhPT0gLTE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdGFydEF1ZGlvUHJlbG9hZGVyOiBmdW5jdGlvbiAoc291cmNlU3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgX2NhbmNlbFByZWxvYWRpbmcoKTtcbiAgICAgICAgICAgICAgICBfa2lja09mZkF1ZGlvUHJlbG9hZGVyKHNvdXJjZVN0YXRlTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0QXVkaW9Mb2FkZWRDYWxsYmFjazogZnVuY3Rpb24gKGF1ZGlvTG9hZGVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBfYXVkaW9Mb2FkZWRDYWxsYmFjayA9IGF1ZGlvTG9hZGVkQ2FsbGJhY2s7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0TW9zdFJlY2VudGx5UmVxdWVzdGVkQXVkaW9GaWxlbmFtZTogZnVuY3Rpb24gKG1vc3RSZWNlbnRseVJlcXVlc3RlZEF1ZGlvRmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICBfbW9zdFJlY2VudGx5UmVxdWVzdGVkQXVkaW9GaWxlbmFtZSA9XG4gICAgICAgICAgICAgICAgICAgIG1vc3RSZWNlbnRseVJlcXVlc3RlZEF1ZGlvRmlsZW5hbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xlYXJNb3N0UmVjZW50bHlSZXF1ZXN0ZWRBdWRpb0ZpbGVuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX21vc3RSZWNlbnRseVJlcXVlc3RlZEF1ZGlvRmlsZW5hbWUgPSBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE1vc3RSZWNlbnRseVJlcXVlc3RlZEF1ZGlvRmlsZW5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX21vc3RSZWNlbnRseVJlcXVlc3RlZEF1ZGlvRmlsZW5hbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0RmlsZW5hbWVzT2ZBdWRpb0N1cnJlbnRseURvd25sb2FkaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9maWxlbmFtZXNPZkF1ZGlvQ3VycmVudGx5RG93bmxvYWRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNlcnZpY2UgdG8gbWFuYWdlIHRoZSBjdXJyZW50IGxhbmd1YWdlIGJlaW5nXG4gKiB1c2VkIGZvciBhdWRpbyB0cmFuc2xhdGlvbnMuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvQnJvd3NlckNoZWNrZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL0xhbmd1YWdlVXRpbFNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0F1ZGlvVHJhbnNsYXRpb25MYW5ndWFnZVNlcnZpY2UnLCBbXG4gICAgJ0Jyb3dzZXJDaGVja2VyU2VydmljZScsICdMYW5ndWFnZVV0aWxTZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoQnJvd3NlckNoZWNrZXJTZXJ2aWNlLCBMYW5ndWFnZVV0aWxTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBfY3VycmVudEF1ZGlvTGFuZ3VhZ2VDb2RlID0gbnVsbDtcbiAgICAgICAgdmFyIF9hbGxBdWRpb0xhbmd1YWdlQ29kZXNJbkV4cGxvcmF0aW9uID0gbnVsbDtcbiAgICAgICAgdmFyIF9leHBsb3JhdGlvbkxhbmd1YWdlQ29kZSA9IG51bGw7XG4gICAgICAgIHZhciBfYXV0b21hdGljVGV4dFRvU3BlZWNoRW5hYmxlZCA9IG51bGw7XG4gICAgICAgIHZhciBfbGFuZ3VhZ2VzSW5FeHBsb3JhdGlvbiA9IFtdO1xuICAgICAgICB2YXIgYXR0ZW1wdFRvU2V0QXVkaW9MYW5ndWFnZVRvRXhwbG9yYXRpb25MYW5ndWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFdlIG1pbmltaXplIHRoZSBudW1iZXIgb2YgcmVsYXRlZCBsYW5ndWFnZXMsIGJlY2F1c2Ugd2Ugd2FudCB0b1xuICAgICAgICAgICAgLy8gcGljayB0aGUgbGFuZ3VhZ2UgdGhhdCBpcyB0aGUgbW9zdCBkaXJlY3RseSByZWxhdGVkIHRvIHRoZSBleHBsb3JhdGlvblxuICAgICAgICAgICAgLy8gbGFuZ3VhZ2UuIEZvciBleGFtcGxlLCB0aGlzIHdvdWxkIHByaW9yaXRpemUgSGluZGkgb3ZlciBIaW5nbGlzaFxuICAgICAgICAgICAgLy8gaWYgYm90aCB3ZXJlIGF2YWlsYWJsZSBhcyBhdWRpbyBsYW5ndWFnZXMuXG4gICAgICAgICAgICB2YXIgbnVtUmVsYXRlZExhbmd1YWdlcyA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICBfYWxsQXVkaW9MYW5ndWFnZUNvZGVzSW5FeHBsb3JhdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChhdWRpb0xhbmd1YWdlQ29kZSkge1xuICAgICAgICAgICAgICAgIHZhciByZWxhdGVkTGFuZ3VhZ2VDb2RlcyA9IExhbmd1YWdlVXRpbFNlcnZpY2UuZ2V0TGFuZ3VhZ2VDb2Rlc1JlbGF0ZWRUb0F1ZGlvTGFuZ3VhZ2VDb2RlKGF1ZGlvTGFuZ3VhZ2VDb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVsYXRlZExhbmd1YWdlQ29kZXMubGVuZ3RoIDwgbnVtUmVsYXRlZExhbmd1YWdlcyAmJlxuICAgICAgICAgICAgICAgICAgICByZWxhdGVkTGFuZ3VhZ2VDb2Rlcy5pbmRleE9mKF9leHBsb3JhdGlvbkxhbmd1YWdlQ29kZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIF9jdXJyZW50QXVkaW9MYW5ndWFnZUNvZGUgPSBhdWRpb0xhbmd1YWdlQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgbnVtUmVsYXRlZExhbmd1YWdlcyA9IHJlbGF0ZWRMYW5ndWFnZUNvZGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF9pc0F1dG9nZW5lcmF0ZWRBdWRpb0FsbG93ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2F1dG9tYXRpY1RleHRUb1NwZWVjaEVuYWJsZWQgJiZcbiAgICAgICAgICAgICAgICBMYW5ndWFnZVV0aWxTZXJ2aWNlLnN1cHBvcnRzQXV0b2dlbmVyYXRlZEF1ZGlvKF9leHBsb3JhdGlvbkxhbmd1YWdlQ29kZSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uIChhbGxBdWRpb0xhbmd1YWdlQ29kZXNJbkV4cGxvcmF0aW9uLCBwcmVmZXJyZWRBdWRpb0xhbmd1YWdlQ29kZSwgZXhwbG9yYXRpb25MYW5ndWFnZUNvZGUsIGF1dG9tYXRpY1RleHRUb1NwZWVjaEVuYWJsZWQpIHtcbiAgICAgICAgICAgIF9hbGxBdWRpb0xhbmd1YWdlQ29kZXNJbkV4cGxvcmF0aW9uID0gYWxsQXVkaW9MYW5ndWFnZUNvZGVzSW5FeHBsb3JhdGlvbjtcbiAgICAgICAgICAgIF9leHBsb3JhdGlvbkxhbmd1YWdlQ29kZSA9IGV4cGxvcmF0aW9uTGFuZ3VhZ2VDb2RlO1xuICAgICAgICAgICAgX2F1dG9tYXRpY1RleHRUb1NwZWVjaEVuYWJsZWQgPSBhdXRvbWF0aWNUZXh0VG9TcGVlY2hFbmFibGVkO1xuICAgICAgICAgICAgX2xhbmd1YWdlc0luRXhwbG9yYXRpb24gPSBbXTtcbiAgICAgICAgICAgIC8vIFNldCB0aGUgYXVkaW8gbGFuZ3VhZ2UgdGhhdCBpcyBjaG9zZW4gaW5pdGlhbGx5LlxuICAgICAgICAgICAgLy8gVXNlIHRoZSBmb2xsb3dpbmcgcHJpb3JpdHkgKGhpZ2hlc3QgdG8gbG93ZXN0KTpcbiAgICAgICAgICAgIC8vIDEuIElmIHRoZSBsZWFybmVyIGhhcyBhIHByZWZlcnJlZCBhdWRpbyBsYW5ndWFnZSBzZXQsIHRoZW4gc2V0IGl0IHRvXG4gICAgICAgICAgICAvLyB0aGF0IGxhbmd1YWdlIGlmIGl0IGlzIGF2YWlsYWJsZS5cbiAgICAgICAgICAgIC8vIDIuIElmIHRoZSBleHBsb3JhdGlvbiBsYW5ndWFnZSBoYXMgYSByZWxhdGVkIGF1ZGlvIGxhbmd1YWdlLCB0aGVuIHNldFxuICAgICAgICAgICAgLy8gaXQgdG8gdGhhdC5cbiAgICAgICAgICAgIC8vIDMuIElmIG9ubHkgdGhlIGF1dG9nZW5lcmF0ZWQgYXVkaW8gbGFuZ3VhZ2UgaXMgYXZhaWxhYmxlLCB0aGVuIHNldCBpdFxuICAgICAgICAgICAgLy8gdG8gdGhhdC5cbiAgICAgICAgICAgIC8vIDQuIE90aGVyd2lzZSwganVzdCBwaWNrIGFuIGF2YWlsYWJsZSBub24tYXV0b2dlbmVyYXRlZCBhdWRpbyBsYW5ndWFnZVxuICAgICAgICAgICAgLy8gYXQgcmFuZG9tLlxuICAgICAgICAgICAgaWYgKHByZWZlcnJlZEF1ZGlvTGFuZ3VhZ2VDb2RlICYmXG4gICAgICAgICAgICAgICAgYWxsQXVkaW9MYW5ndWFnZUNvZGVzSW5FeHBsb3JhdGlvbi5pbmRleE9mKHByZWZlcnJlZEF1ZGlvTGFuZ3VhZ2VDb2RlKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBfY3VycmVudEF1ZGlvTGFuZ3VhZ2VDb2RlID0gcHJlZmVycmVkQXVkaW9MYW5ndWFnZUNvZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX2N1cnJlbnRBdWRpb0xhbmd1YWdlQ29kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGF0dGVtcHRUb1NldEF1ZGlvTGFuZ3VhZ2VUb0V4cGxvcmF0aW9uTGFuZ3VhZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfY3VycmVudEF1ZGlvTGFuZ3VhZ2VDb2RlID09PSBudWxsICYmXG4gICAgICAgICAgICAgICAgX2FsbEF1ZGlvTGFuZ3VhZ2VDb2Rlc0luRXhwbG9yYXRpb24ubGVuZ3RoID49IDEpIHtcbiAgICAgICAgICAgICAgICBfY3VycmVudEF1ZGlvTGFuZ3VhZ2VDb2RlID0gX2FsbEF1ZGlvTGFuZ3VhZ2VDb2Rlc0luRXhwbG9yYXRpb25bMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX2N1cnJlbnRBdWRpb0xhbmd1YWdlQ29kZSA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIF9hbGxBdWRpb0xhbmd1YWdlQ29kZXNJbkV4cGxvcmF0aW9uLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIF9pc0F1dG9nZW5lcmF0ZWRBdWRpb0FsbG93ZWQoKSkge1xuICAgICAgICAgICAgICAgIF9jdXJyZW50QXVkaW9MYW5ndWFnZUNvZGUgPVxuICAgICAgICAgICAgICAgICAgICBMYW5ndWFnZVV0aWxTZXJ2aWNlLmdldEF1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlKF9leHBsb3JhdGlvbkxhbmd1YWdlQ29kZSkuaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfYWxsQXVkaW9MYW5ndWFnZUNvZGVzSW5FeHBsb3JhdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChsYW5ndWFnZUNvZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2VEZXNjcmlwdGlvbiA9IExhbmd1YWdlVXRpbFNlcnZpY2UuZ2V0QXVkaW9MYW5ndWFnZURlc2NyaXB0aW9uKGxhbmd1YWdlQ29kZSk7XG4gICAgICAgICAgICAgICAgX2xhbmd1YWdlc0luRXhwbG9yYXRpb24ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBsYW5ndWFnZUNvZGUsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZDogbGFuZ3VhZ2VEZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoX2lzQXV0b2dlbmVyYXRlZEF1ZGlvQWxsb3dlZCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlID0gTGFuZ3VhZ2VVdGlsU2VydmljZS5nZXRBdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZShfZXhwbG9yYXRpb25MYW5ndWFnZUNvZGUpO1xuICAgICAgICAgICAgICAgIF9sYW5ndWFnZXNJbkV4cGxvcmF0aW9uLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2UuaWQsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZDogYXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2UuZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChhbGxBdWRpb0xhbmd1YWdlQ29kZXNJbkV4cGxvcmF0aW9uLCBwcmVmZXJyZWRBdWRpb0xhbmd1YWdlQ29kZSwgZXhwbG9yYXRpb25MYW5ndWFnZUNvZGUsIGF1dG9tYXRpY1RleHRUb1NwZWVjaEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBfaW5pdChhbGxBdWRpb0xhbmd1YWdlQ29kZXNJbkV4cGxvcmF0aW9uLCBwcmVmZXJyZWRBdWRpb0xhbmd1YWdlQ29kZSwgZXhwbG9yYXRpb25MYW5ndWFnZUNvZGUsIGF1dG9tYXRpY1RleHRUb1NwZWVjaEVuYWJsZWQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEN1cnJlbnRBdWRpb0xhbmd1YWdlQ29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfY3VycmVudEF1ZGlvTGFuZ3VhZ2VDb2RlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEN1cnJlbnRBdWRpb0xhbmd1YWdlRGVzY3JpcHRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTGFuZ3VhZ2VVdGlsU2VydmljZS5nZXRBdWRpb0xhbmd1YWdlRGVzY3JpcHRpb24oX2N1cnJlbnRBdWRpb0xhbmd1YWdlQ29kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0YWxsQXVkaW9MYW5ndWFnZUNvZGVzSW5FeHBsb3JhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfYWxsQXVkaW9MYW5ndWFnZUNvZGVzSW5FeHBsb3JhdGlvbjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRMYW5ndWFnZU9wdGlvbnNGb3JEcm9wZG93bjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfbGFuZ3VhZ2VzSW5FeHBsb3JhdGlvbjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhckN1cnJlbnRBdWRpb0xhbmd1YWdlQ29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9jdXJyZW50QXVkaW9MYW5ndWFnZUNvZGUgPSBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldEN1cnJlbnRBdWRpb0xhbmd1YWdlQ29kZTogZnVuY3Rpb24gKG5ld0xhbmd1YWdlQ29kZSkge1xuICAgICAgICAgICAgICAgIF9jdXJyZW50QXVkaW9MYW5ndWFnZUNvZGUgPSBuZXdMYW5ndWFnZUNvZGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNBdXRvZ2VuZXJhdGVkQXVkaW9BbGxvd2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9pc0F1dG9nZW5lcmF0ZWRBdWRpb0FsbG93ZWQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0F1dG9nZW5lcmF0ZWRMYW5ndWFnZUNvZGVTZWxlY3RlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBMYW5ndWFnZVV0aWxTZXJ2aWNlLmlzQXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2UoX2N1cnJlbnRBdWRpb0xhbmd1YWdlQ29kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNBdXRvbWF0aWNUZXh0VG9TcGVlY2hFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9hdXRvbWF0aWNUZXh0VG9TcGVlY2hFbmFibGVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFNwZWVjaFN5bnRoZXNpc0xhbmd1YWdlQ29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZSA9IExhbmd1YWdlVXRpbFNlcnZpY2UuZ2V0QXV0b2dlbmVyYXRlZEF1ZGlvTGFuZ3VhZ2UoX2V4cGxvcmF0aW9uTGFuZ3VhZ2VDb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAoQnJvd3NlckNoZWNrZXJTZXJ2aWNlLmlzTW9iaWxlRGV2aWNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF1dG9nZW5lcmF0ZWRBdWRpb0xhbmd1YWdlLnNwZWVjaFN5bnRoZXNpc0NvZGVNb2JpbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhdXRvZ2VuZXJhdGVkQXVkaW9MYW5ndWFnZS5zcGVlY2hTeW50aGVzaXNDb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIHRvIG1hbmFnZSB3aGF0IGF1ZGlvIHRyYW5zbGF0aW9ucyBhcmUgY3VycmVudGx5XG4gKiBiZWluZyBwbGF5ZWQgb3IgcGF1c2VkLlxuICovXG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZSgpIHtcbiAgICAgICAgLy8gQXVkaW8gdHJhbnNsYXRpb25zIGZvciB0aGUgbWFpbiBjb250ZW50IG9mIGEgY2FyZCBhdCB0aGUgdG9wLlxuICAgICAgICB0aGlzLl9jb250ZW50QXVkaW9UcmFuc2xhdGlvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLl9jb250ZW50SHRtbEZvckF1dG9nZW5lcmF0ZWRBdWRpbyA9IG51bGw7XG4gICAgICAgIC8vIEF1ZGlvIHRyYW5zbGF0aW9ucyBmb3IgZXZlcnl0aGluZyBvdGhlciB0aGFuIHRoZSBtYWluIGNvbnRlbnQsIHN1Y2ggYXNcbiAgICAgICAgLy8gdGhvc2UgZm9yIGZlZWRiYWNrLCBoaW50cywgYW5kIHNvbHV0aW9ucy5cbiAgICAgICAgdGhpcy5fc2Vjb25kYXJ5QXVkaW9UcmFuc2xhdGlvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLl9zZWNvbmRhcnlIdG1sRm9yQXV0b2dlbmVyYXRlZEF1ZGlvID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY3VycmVudFByaW1hcnlDb21wb25lbnROYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY3VycmVudFNlY29uZGFyeUNvbXBvbmVudE5hbWUgPSBudWxsO1xuICAgIH1cbiAgICBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2UucHJvdG90eXBlLnNldENvbnRlbnRBdWRpb1RyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uIChhdWRpb1RyYW5zbGF0aW9ucywgaHRtbCwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICB0aGlzLl9jb250ZW50QXVkaW9UcmFuc2xhdGlvbnMgPSBhdWRpb1RyYW5zbGF0aW9ucztcbiAgICAgICAgdGhpcy5fY29udGVudEh0bWxGb3JBdXRvZ2VuZXJhdGVkQXVkaW8gPSBodG1sO1xuICAgICAgICB0aGlzLl9jdXJyZW50UHJpbWFyeUNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lO1xuICAgIH07XG4gICAgQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlLnByb3RvdHlwZS5zZXRTZWNvbmRhcnlBdWRpb1RyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uIChhdWRpb1RyYW5zbGF0aW9ucywgaHRtbCwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICB0aGlzLl9zZWNvbmRhcnlBdWRpb1RyYW5zbGF0aW9ucyA9IGF1ZGlvVHJhbnNsYXRpb25zO1xuICAgICAgICB0aGlzLl9zZWNvbmRhcnlIdG1sRm9yQXV0b2dlbmVyYXRlZEF1ZGlvID0gaHRtbDtcbiAgICAgICAgdGhpcy5fY3VycmVudFNlY29uZGFyeUNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lO1xuICAgIH07XG4gICAgQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlLnByb3RvdHlwZS5jbGVhclNlY29uZGFyeUF1ZGlvVHJhbnNsYXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zZWNvbmRhcnlBdWRpb1RyYW5zbGF0aW9ucyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3NlY29uZGFyeUh0bWxGb3JBdXRvZ2VuZXJhdGVkQXVkaW8gPSBudWxsO1xuICAgICAgICB0aGlzLl9jdXJyZW50U2Vjb25kYXJ5Q29tcG9uZW50TmFtZSA9IG51bGw7XG4gICAgfTtcbiAgICBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2UucHJvdG90eXBlLmdldEN1cnJlbnRBdWRpb1RyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NlY29uZGFyeUF1ZGlvVHJhbnNsYXRpb25zICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2Vjb25kYXJ5QXVkaW9UcmFuc2xhdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRBdWRpb1RyYW5zbGF0aW9ucztcbiAgICB9O1xuICAgIEF1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZS5wcm90b3R5cGUuZ2V0Q3VycmVudEh0bWxGb3JBdXRvZ2VuZXJhdGVkQXVkaW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZWNvbmRhcnlIdG1sRm9yQXV0b2dlbmVyYXRlZEF1ZGlvICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2Vjb25kYXJ5SHRtbEZvckF1dG9nZW5lcmF0ZWRBdWRpbztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudEh0bWxGb3JBdXRvZ2VuZXJhdGVkQXVkaW87XG4gICAgfTtcbiAgICBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2UucHJvdG90eXBlLmdldEN1cnJlbnRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudFNlY29uZGFyeUNvbXBvbmVudE5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50U2Vjb25kYXJ5Q29tcG9uZW50TmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFByaW1hcnlDb21wb25lbnROYW1lO1xuICAgIH07XG4gICAgQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KVxuICAgIF0sIEF1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZSk7XG4gICAgcmV0dXJuIEF1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZTtcbn0oKSk7XG5leHBvcnRzLkF1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZSA9IEF1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0F1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlKSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEZhY2lsaXRhdGVzIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgY3VycmVudCBpbnRlcmFjdGlvblxuICogYW5kIHRoZSBwcm9ncmVzcyBuYXYuIFRoZSBmb3JtZXIgaG9sZHMgZGF0YSBhYm91dCB0aGUgbGVhcm5lcidzIGFuc3dlcixcbiAqIHdoaWxlIHRoZSBsYXR0ZXIgY29udGFpbnMgdGhlIGFjdHVhbCBcIlN1Ym1pdFwiIGJ1dHRvbiB3aGljaCB0cmlnZ2VycyB0aGVcbiAqIGFuc3dlciBzdWJtaXNzaW9uIHByb2Nlc3MuXG4gKi9cbnJlcXVpcmUoJ2NvbXBvbmVudHMvc3RhdGUtZWRpdG9yL3N0YXRlLWVkaXRvci1wcm9wZXJ0aWVzLXNlcnZpY2VzLycgK1xuICAgICdzdGF0ZS1lZGl0b3Iuc2VydmljZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9zdGF0ZS1lZGl0b3Ivc3RhdGUtZWRpdG9yLXByb3BlcnRpZXMtc2VydmljZXMvJyArXG4gICAgJ3N0YXRlLWludGVyYWN0aW9uLWlkLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2NvbXBvbmVudHMvc3RhdGUtZWRpdG9yL3N0YXRlLWVkaXRvci1wcm9wZXJ0aWVzLXNlcnZpY2VzLycgK1xuICAgICdzdGF0ZS1wcm9wZXJ0eS5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Db250ZXh0U2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnQ3VycmVudEludGVyYWN0aW9uU2VydmljZScsIFtcbiAgICAnQ29udGV4dFNlcnZpY2UnLCAnU3RhdGVFZGl0b3JTZXJ2aWNlJywgJ1N0YXRlSW50ZXJhY3Rpb25JZFNlcnZpY2UnLCBmdW5jdGlvbiAoQ29udGV4dFNlcnZpY2UsIFN0YXRlRWRpdG9yU2VydmljZSwgU3RhdGVJbnRlcmFjdGlvbklkU2VydmljZSkge1xuICAgICAgICB2YXIgX3N1Ym1pdEFuc3dlckZuID0gbnVsbDtcbiAgICAgICAgdmFyIF9vblN1Ym1pdEZuID0gbnVsbDtcbiAgICAgICAgdmFyIF92YWxpZGl0eUNoZWNrRm4gPSBudWxsO1xuICAgICAgICB2YXIgX3ByZXN1Ym1pdEhvb2tzID0gW107XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRPblN1Ym1pdEZuOiBmdW5jdGlvbiAob25TdWJtaXQpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBUaGUgQ29udmVyc2F0aW9uU2tpbkRpcmVjdGl2ZSBzaG91bGQgcmVnaXN0ZXIgaXRzIG9uU3VibWl0XG4gICAgICAgICAgICAgICAgICogY2FsbGJhY2sgaGVyZS5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5zd2VyLCBpbnRlcmFjdGlvblJ1bGVzU2VydmljZSl9IG9uU3VibWl0XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgX29uU3VibWl0Rm4gPSBvblN1Ym1pdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWdpc3RlckN1cnJlbnRJbnRlcmFjdGlvbjogZnVuY3Rpb24gKHN1Ym1pdEFuc3dlckZuLCB2YWxpZGl0eUNoZWNrRm4pIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBFYWNoIGludGVyYWN0aW9uIGRpcmVjdGl2ZSBzaG91bGQgY2FsbCByZWdpc3RlckN1cnJlbnRJbnRlcmFjdGlvblxuICAgICAgICAgICAgICAgICAqIHdoZW4gdGhlIGludGVyYWN0aW9uIGRpcmVjdGl2ZSBpcyBmaXJzdCBjcmVhdGVkLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbnxudWxsfSBzdWJtaXRBbnN3ZXJGbiAtIFNob3VsZCBncmFiIHRoZSBsZWFybmVyJ3NcbiAgICAgICAgICAgICAgICAgKiAgIGFuc3dlciBhbmQgcGFzcyBpdCB0byBvblN1Ym1pdC4gVGhlIGludGVyYWN0aW9uIGNhbiBwYXNzIGluXG4gICAgICAgICAgICAgICAgICogICBudWxsIGlmIGl0IGRvZXMgbm90IHVzZSB0aGUgcHJvZ3Jlc3MgbmF2J3Mgc3VibWl0IGJ1dHRvblxuICAgICAgICAgICAgICAgICAqICAgKGV4OiBNdWx0aXBsZUNob2ljZUlucHV0KS5cbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB2YWxpZGl0eUNoZWNrRm4gLSBUaGUgcHJvZ3Jlc3MgbmF2IHdpbGwgdXNlIHRoaXNcbiAgICAgICAgICAgICAgICAgKiAgIHRvIGRlY2lkZSB3aGV0aGVyIG9yIG5vdCB0byBkaXNhYmxlIHRoZSBzdWJtaXQgYnV0dG9uLiBJZiB0aGVcbiAgICAgICAgICAgICAgICAgKiAgIGludGVyYWN0aW9uIHBhc3NlcyBpbiBudWxsLCB0aGUgc3VibWl0IGJ1dHRvbiB3aWxsIHJlbWFpblxuICAgICAgICAgICAgICAgICAqICAgZW5hYmxlZCAoZm9yIHRoZSBlbnRpcmUgZHVyYXRpb24gb2YgdGhlIGN1cnJlbnQgaW50ZXJhY3Rpb24pLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIF9zdWJtaXRBbnN3ZXJGbiA9IHN1Ym1pdEFuc3dlckZuIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgX3ZhbGlkaXR5Q2hlY2tGbiA9IHZhbGlkaXR5Q2hlY2tGbiB8fCBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVyUHJlc3VibWl0SG9vazogZnVuY3Rpb24gKGhvb2tGbikge1xuICAgICAgICAgICAgICAgIC8qIFJlZ2lzdGVyIGEgaG9vayB0aGF0IHdpbGwgYmUgY2FsbGVkIHJpZ2h0IGJlZm9yZSBvblN1Ym1pdC5cbiAgICAgICAgICAgICAgICAgKiBBbGwgaG9va3MgZm9yIHRoZSBjdXJyZW50IGludGVyYWN0aW9uIHdpbGwgYmUgY2xlYXJlZCByaWdodFxuICAgICAgICAgICAgICAgICAqIGJlZm9yZSBsb2FkaW5nIHRoZSBuZXh0IGNhcmQuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgX3ByZXN1Ym1pdEhvb2tzLnB1c2goaG9va0ZuKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhclByZXN1Ym1pdEhvb2tzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLyogQ2xlYXIgb3V0IGFsbCB0aGUgaG9va3MgZm9yIHRoZSBjdXJyZW50IGludGVyYWN0aW9uLiBTaG91bGRcbiAgICAgICAgICAgICAgICAgKiBiZSBjYWxsZWQgYmVmb3JlIGxvYWRpbmcgdGhlIG5leHQgY2FyZC5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBfcHJlc3VibWl0SG9va3MgPSBbXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblN1Ym1pdDogZnVuY3Rpb24gKGFuc3dlciwgaW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9wcmVzdWJtaXRIb29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBfcHJlc3VibWl0SG9va3NbaV0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX29uU3VibWl0Rm4oYW5zd2VyLCBpbnRlcmFjdGlvblJ1bGVzU2VydmljZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VibWl0QW5zd2VyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLyogVGhpcyBzdGFydHMgdGhlIGFuc3dlciBzdWJtaXQgcHJvY2VzcywgaXQgc2hvdWxkIGJlIGNhbGxlZCBvbmNlIHRoZVxuICAgICAgICAgICAgICAgICAqIGxlYXJuZXIgcHJlc3NlcyB0aGUgXCJTdWJtaXRcIiBidXR0b24uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKF9zdWJtaXRBbnN3ZXJGbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWRkaXRpb25hbEluZm8gPSAoJ1xcblVuZGVmaW5lZCBzdWJtaXQgYW5zd2VyIGRlYnVnIGxvZ3M6JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuSW50ZXJhY3Rpb24gSUQ6ICcgKyBTdGF0ZUludGVyYWN0aW9uSWRTZXJ2aWNlLnNhdmVkTWVtZW50byArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuRXhwbG9yYXRpb24gSUQ6ICcgKyBDb250ZXh0U2VydmljZS5nZXRFeHBsb3JhdGlvbklkKCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcblN0YXRlIG5hbWU6ICcgKyBTdGF0ZUVkaXRvclNlcnZpY2UuZ2V0QWN0aXZlU3RhdGVOYW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignVGhlIGN1cnJlbnQgaW50ZXJhY3Rpb24gZGlkIG5vdCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZWdpc3RlciBhIF9zdWJtaXRBbnN3ZXJGbi4nICsgYWRkaXRpb25hbEluZm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3N1Ym1pdEFuc3dlckZuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzU3VibWl0QnV0dG9uRGlzYWJsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBTdWJtaXQgYnV0dG9uIHNob3VsZCBiZSBkaXNhYmxlZCBiYXNlZCBvblxuICAgICAgICAgICAgICAgICAqIHRoZSB2YWxpZGl0eSBvZiB0aGUgY3VycmVudCBhbnN3ZXIuIElmIHRoZSBpbnRlcmFjdGlvbiBkb2VzIG5vdCBwYXNzXG4gICAgICAgICAgICAgICAgICogaW4gYSBfdmFsaWRpdHlDaGVja0ZuLCB0aGVuIF92YWxpZGl0eUNoZWNrRm4gd2lsbCBiZSBudWxsIGFuZCBieVxuICAgICAgICAgICAgICAgICAqIGRlZmF1bHQgd2UgYXNzdW1lIHRoZSBhbnN3ZXIgaXMgdmFsaWQsIHNvIHRoZSBzdWJtaXQgYnV0dG9uIHNob3VsZFxuICAgICAgICAgICAgICAgICAqIG5vdCBiZSBkaXNhYmxlZC5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoX3ZhbGlkaXR5Q2hlY2tGbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhX3ZhbGlkaXR5Q2hlY2tGbigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0eSBzZXJ2aWNlIGZvciB0aGUgbGVhcm5lcidzIHZpZXcgb2YgYW4gZXhwbG9yYXRpb24uXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi9jb2xsZWN0aW9uL0d1ZXN0Q29sbGVjdGlvblByb2dyZXNzU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL0VkaXRhYmxlRXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL0V4cGxvcmF0aW9uT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL1JlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3N0YXRlX2NhcmQvU3RhdGVDYXJkT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9MYW5ndWFnZVV0aWxTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdleHByZXNzaW9ucy9FeHByZXNzaW9uSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2Fuc3dlci1jbGFzc2lmaWNhdGlvbi5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9hdWRpby1wcmVsb2FkZXIuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvJyArXG4gICAgJ2F1ZGlvLXRyYW5zbGF0aW9uLWxhbmd1YWdlLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2ltYWdlLXByZWxvYWRlci5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9sZWFybmVyLXBhcmFtcy5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9udW1iZXItYXR0ZW1wdHMuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcGxheWVyLXRyYW5zY3JpcHQuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvc3RhdGUtY2xhc3NpZmllci1tYXBwaW5nLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3N0YXRzLXJlcG9ydGluZy5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BbGVydHNTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Db250ZXh0U2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvRXhwbG9yYXRpb25GZWF0dXJlc0JhY2tlbmRBcGlTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9FeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Vc2VyU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvY29udGV4dHVhbC9VcmxTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9jb250ZXh0dWFsL1dpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9zdGF0ZWZ1bC9Gb2N1c01hbmFnZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9pbnRlcmFjdGlvbi1zcGVjcy5jb25zdGFudHMuYWpzLnRzJyk7XG4vLyBBIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBhIG51bWJlciBvZiB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgSlMgdXNlZCBieVxuLy8gdGhlIHBsYXllciBza2luLlxuLy8gTm90ZSB0aGF0IHRoaXMgc2VydmljZSBpcyB1c2VkIGJvdGggaW4gdGhlIGxlYXJuZXIgYW5kIHRoZSBlZGl0b3Igdmlld3MuXG4vLyBUaGUgVVJMIGRldGVybWluZXMgd2hpY2ggb2YgdGhlc2UgaXQgaXMuIFNvbWUgbWV0aG9kcyBtYXkgbmVlZCB0byBiZVxuLy8gaW1wbGVtZW50ZWQgZGlmZmVyZW50bHkgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHNraW4gaXMgYmVpbmcgcGxheWVkXG4vLyBpbiB0aGUgbGVhcm5lciB2aWV3LCBvciB3aGV0aGVyIGl0IGlzIGJlaW5nIHByZXZpZXdlZCBpbiB0aGUgZWRpdG9yIHZpZXcuXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2UnLCBbXG4gICAgJyRyb290U2NvcGUnLCAnQWxlcnRzU2VydmljZScsICdBbnN3ZXJDbGFzc2lmaWNhdGlvblNlcnZpY2UnLFxuICAgICdBdWRpb1ByZWxvYWRlclNlcnZpY2UnLCAnQXVkaW9UcmFuc2xhdGlvbkxhbmd1YWdlU2VydmljZScsICdDb250ZXh0U2VydmljZScsXG4gICAgJ0V4cGxvcmF0aW9uRmVhdHVyZXNCYWNrZW5kQXBpU2VydmljZScsICdFeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlJyxcbiAgICAnRXhwbG9yYXRpb25PYmplY3RGYWN0b3J5JywgJ0V4cHJlc3Npb25JbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgJ0ZvY3VzTWFuYWdlclNlcnZpY2UnLCAnSW1hZ2VQcmVsb2FkZXJTZXJ2aWNlJywgJ0xlYXJuZXJQYXJhbXNTZXJ2aWNlJyxcbiAgICAnUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UnLCAnUmVhZE9ubHlFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlJyxcbiAgICAnU3RhdGVDYXJkT2JqZWN0RmFjdG9yeScsICdTdGF0c1JlcG9ydGluZ1NlcnZpY2UnLCAnVXJsU2VydmljZScsXG4gICAgZnVuY3Rpb24gKCRyb290U2NvcGUsIEFsZXJ0c1NlcnZpY2UsIEFuc3dlckNsYXNzaWZpY2F0aW9uU2VydmljZSwgQXVkaW9QcmVsb2FkZXJTZXJ2aWNlLCBBdWRpb1RyYW5zbGF0aW9uTGFuZ3VhZ2VTZXJ2aWNlLCBDb250ZXh0U2VydmljZSwgRXhwbG9yYXRpb25GZWF0dXJlc0JhY2tlbmRBcGlTZXJ2aWNlLCBFeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlLCBFeHBsb3JhdGlvbk9iamVjdEZhY3RvcnksIEV4cHJlc3Npb25JbnRlcnBvbGF0aW9uU2VydmljZSwgRm9jdXNNYW5hZ2VyU2VydmljZSwgSW1hZ2VQcmVsb2FkZXJTZXJ2aWNlLCBMZWFybmVyUGFyYW1zU2VydmljZSwgUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UsIFJlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZSwgU3RhdGVDYXJkT2JqZWN0RmFjdG9yeSwgU3RhdHNSZXBvcnRpbmdTZXJ2aWNlLCBVcmxTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBfZXhwbG9yYXRpb25JZCA9IENvbnRleHRTZXJ2aWNlLmdldEV4cGxvcmF0aW9uSWQoKTtcbiAgICAgICAgdmFyIF9lZGl0b3JQcmV2aWV3TW9kZSA9IENvbnRleHRTZXJ2aWNlLmlzSW5FeHBsb3JhdGlvbkVkaXRvclBhZ2UoKTtcbiAgICAgICAgdmFyIF9xdWVzdGlvblBsYXllck1vZGUgPSBDb250ZXh0U2VydmljZS5pc0luUXVlc3Rpb25QbGF5ZXJNb2RlKCk7XG4gICAgICAgIHZhciBhbnN3ZXJJc0JlaW5nUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgICAgIHZhciBhbHdheXNBc2tMZWFybmVyc0ZvckFuc3dlckRldGFpbHMgPSBmYWxzZTtcbiAgICAgICAgdmFyIGV4cGxvcmF0aW9uID0gbnVsbDtcbiAgICAgICAgLy8gVGhpcyBsaXN0IG1heSBjb250YWluIGR1cGxpY2F0ZXMuIEEgc3RhdGUgbmFtZSBpcyBhZGRlZCB0byBpdCBlYWNoIHRpbWVcbiAgICAgICAgLy8gdGhlIGxlYXJuZXIgbW92ZXMgdG8gYSBuZXcgY2FyZC5cbiAgICAgICAgdmFyIHZpc2l0ZWRTdGF0ZU5hbWVzID0gW107XG4gICAgICAgIHZhciBjdXJyZW50U3RhdGVOYW1lID0gbnVsbDtcbiAgICAgICAgdmFyIG5leHRTdGF0ZU5hbWUgPSBudWxsO1xuICAgICAgICAvLyBQYXJhbSBjaGFuZ2VzIHRvIGJlIHVzZWQgT05MWSBpbiBlZGl0b3IgcHJldmlldyBtb2RlLlxuICAgICAgICB2YXIgbWFudWFsUGFyYW1DaGFuZ2VzID0gbnVsbDtcbiAgICAgICAgdmFyIGluaXRTdGF0ZU5hbWUgPSBudWxsO1xuICAgICAgICB2YXIgdmVyc2lvbiA9IFVybFNlcnZpY2UuZ2V0RXhwbG9yYXRpb25WZXJzaW9uRnJvbVVybCgpO1xuICAgICAgICBpZiAoIV9xdWVzdGlvblBsYXllck1vZGUpIHtcbiAgICAgICAgICAgIFJlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZVxuICAgICAgICAgICAgICAgIC5sb2FkRXhwbG9yYXRpb24oX2V4cGxvcmF0aW9uSWQsIHZlcnNpb24pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGV4cGxvcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9IGV4cGxvcmF0aW9uLnZlcnNpb247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmFuZG9tRnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycikge1xuICAgICAgICAgICAgcmV0dXJuIGFycltNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnIubGVuZ3RoKV07XG4gICAgICAgIH07XG4gICAgICAgIC8vIEV2YWx1YXRlIGZlZWRiYWNrLlxuICAgICAgICB2YXIgbWFrZUZlZWRiYWNrID0gZnVuY3Rpb24gKGZlZWRiYWNrSHRtbCwgZW52cykge1xuICAgICAgICAgICAgcmV0dXJuIEV4cHJlc3Npb25JbnRlcnBvbGF0aW9uU2VydmljZS5wcm9jZXNzSHRtbChmZWVkYmFja0h0bWwsIGVudnMpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2dldFJhbmRvbVN1ZmZpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXaGVuIGEgcmVmcmVzaCB0byBhICRzY29wZSB2YXJpYWJsZVxuICAgICAgICAgICAgLy8gaGFwcGVucyxcbiAgICAgICAgICAgIC8vIEFuZ3VsYXJKUyBjb21wYXJlcyB0aGUgbmV3IHZhbHVlIG9mIHRoZSB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXNcbiAgICAgICAgICAgIC8vIHZhbHVlLiBJZiB0aGV5IGFyZSB0aGUgc2FtZSwgdGhlbiB0aGUgdmFyaWFibGUgaXMgbm90IHVwZGF0ZWQuXG4gICAgICAgICAgICAvLyBBcHBlbmRpbmcgYSByYW5kb20gc3VmZml4IG1ha2VzIHRoZSBuZXcgdmFsdWUgZGlmZmVyZW50IGZyb20gdGhlXG4gICAgICAgICAgICAvLyBwcmV2aW91cyBvbmUsIGFuZCB0aHVzIGluZGlyZWN0bHkgZm9yY2VzIGEgcmVmcmVzaC5cbiAgICAgICAgICAgIHZhciByYW5kb21TdWZmaXggPSAnJztcbiAgICAgICAgICAgIHZhciBOID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgICAgICAgICAgIHJhbmRvbVN1ZmZpeCArPSAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmFuZG9tU3VmZml4O1xuICAgICAgICB9O1xuICAgICAgICAvLyBFdmFsdWF0ZSBwYXJhbWV0ZXJzLiBSZXR1cm5zIG51bGwgaWYgYW55IGV2YWx1YXRpb24gZmFpbHMuXG4gICAgICAgIHZhciBtYWtlUGFyYW1zID0gZnVuY3Rpb24gKG9sZFBhcmFtcywgcGFyYW1DaGFuZ2VzLCBlbnZzKSB7XG4gICAgICAgICAgICB2YXIgbmV3UGFyYW1zID0gYW5ndWxhci5jb3B5KG9sZFBhcmFtcyk7XG4gICAgICAgICAgICBpZiAocGFyYW1DaGFuZ2VzLmV2ZXJ5KGZ1bmN0aW9uIChwYykge1xuICAgICAgICAgICAgICAgIGlmIChwYy5nZW5lcmF0b3JJZCA9PT0gJ0NvcGllcicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYy5jdXN0b21pemF0aW9uQXJncy5wYXJzZV93aXRoX2ppbmphKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQYXJhbXNbcGMubmFtZV0gPSBwYy5jdXN0b21pemF0aW9uQXJncy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbVZhbHVlID0gRXhwcmVzc2lvbkludGVycG9sYXRpb25TZXJ2aWNlLnByb2Nlc3NVbmljb2RlKHBjLmN1c3RvbWl6YXRpb25BcmdzLnZhbHVlLCBbbmV3UGFyYW1zXS5jb25jYXQoZW52cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQYXJhbXNbcGMubmFtZV0gPSBwYXJhbVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBSYW5kb21TZWxlY3Rvci5cbiAgICAgICAgICAgICAgICAgICAgbmV3UGFyYW1zW3BjLm5hbWVdID0gcmFuZG9tRnJvbUFycmF5KHBjLmN1c3RvbWl6YXRpb25BcmdzLmxpc3Rfb2ZfdmFsdWVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgIC8vIEFsbCBwYXJhbWV0ZXJzIHdlcmUgZXZhbHVhdGVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3UGFyYW1zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRXZhbHVhdGlvbiBvZiBzb21lIHBhcmFtZXRlciBmYWlsZWQuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gRXZhbHVhdGUgcXVlc3Rpb24gc3RyaW5nLlxuICAgICAgICB2YXIgbWFrZVF1ZXN0aW9uID0gZnVuY3Rpb24gKG5ld1N0YXRlLCBlbnZzKSB7XG4gICAgICAgICAgICByZXR1cm4gRXhwcmVzc2lvbkludGVycG9sYXRpb25TZXJ2aWNlLnByb2Nlc3NIdG1sKG5ld1N0YXRlLmNvbnRlbnQuZ2V0SHRtbCgpLCBlbnZzKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlbiAnZXhwbG9yYXRpb24nIGlzIG5vbi1udWxsLlxuICAgICAgICB2YXIgX2xvYWRJbml0aWFsU3RhdGUgPSBmdW5jdGlvbiAoc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgaW5pdGlhbFN0YXRlID0gZXhwbG9yYXRpb24uZ2V0SW5pdGlhbFN0YXRlKCk7XG4gICAgICAgICAgICB2YXIgb2xkUGFyYW1zID0gTGVhcm5lclBhcmFtc1NlcnZpY2UuZ2V0QWxsUGFyYW1zKCk7XG4gICAgICAgICAgICB2YXIgbmV3UGFyYW1zID0gbWFrZVBhcmFtcyhvbGRQYXJhbXMsIGluaXRpYWxTdGF0ZS5wYXJhbUNoYW5nZXMsIFtvbGRQYXJhbXNdKTtcbiAgICAgICAgICAgIGlmIChuZXdQYXJhbXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmFkZFdhcm5pbmcoJ0V4cHJlc3Npb24gcGFyc2luZyBlcnJvci4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3UGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgTGVhcm5lclBhcmFtc1NlcnZpY2UuaW5pdChuZXdQYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFN0YXRlTmFtZSA9IGV4cGxvcmF0aW9uLmluaXRTdGF0ZU5hbWU7XG4gICAgICAgICAgICBuZXh0U3RhdGVOYW1lID0gZXhwbG9yYXRpb24uaW5pdFN0YXRlTmFtZTtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IGV4cGxvcmF0aW9uLmdldEludGVyYWN0aW9uKGV4cGxvcmF0aW9uLmluaXRTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgdmFyIG5leHRGb2N1c0xhYmVsID0gRm9jdXNNYW5hZ2VyU2VydmljZS5nZW5lcmF0ZUZvY3VzTGFiZWwoKTtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbklkID0gaW50ZXJhY3Rpb24uaWQ7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25IdG1sID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25IdG1sID0gRXhwbG9yYXRpb25IdG1sRm9ybWF0dGVyU2VydmljZS5nZXRJbnRlcmFjdGlvbkh0bWwoaW50ZXJhY3Rpb25JZCwgZXhwbG9yYXRpb24uZ2V0SW50ZXJhY3Rpb25DdXN0b21pemF0aW9uQXJncyhjdXJyZW50U3RhdGVOYW1lKSwgdHJ1ZSwgbmV4dEZvY3VzTGFiZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uSHRtbCA9IG1ha2VRdWVzdGlvbihpbml0aWFsU3RhdGUsIFtuZXdQYXJhbXNdKTtcbiAgICAgICAgICAgIGlmIChxdWVzdGlvbkh0bWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmFkZFdhcm5pbmcoJ0V4cHJlc3Npb24gcGFyc2luZyBlcnJvci4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIV9lZGl0b3JQcmV2aWV3TW9kZSkge1xuICAgICAgICAgICAgICAgIFN0YXRzUmVwb3J0aW5nU2VydmljZS5yZWNvcmRFeHBsb3JhdGlvblN0YXJ0ZWQoZXhwbG9yYXRpb24uaW5pdFN0YXRlTmFtZSwgbmV3UGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbml0aWFsQ2FyZCA9IFN0YXRlQ2FyZE9iamVjdEZhY3RvcnkuY3JlYXRlTmV3Q2FyZChjdXJyZW50U3RhdGVOYW1lLCBxdWVzdGlvbkh0bWwsIGludGVyYWN0aW9uSHRtbCwgaW50ZXJhY3Rpb24sIGluaXRpYWxTdGF0ZS5yZWNvcmRlZFZvaWNlb3ZlcnMsIGluaXRpYWxTdGF0ZS5jb250ZW50LmdldENvbnRlbnRJZCgpKTtcbiAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhpbml0aWFsQ2FyZCwgbmV4dEZvY3VzTGFiZWwpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBwYXJhbWV0ZXJzIGluIHRoZSBleHBsb3JhdGlvbiBhcyBzcGVjaWZpZWQgaW4gdGhlXG4gICAgICAgIC8vIGV4cGxvcmF0aW9uLWxldmVsIGluaXRpYWwgcGFyYW1ldGVyIGNoYW5nZXMgbGlzdCwgZm9sbG93ZWQgYnkgYW55XG4gICAgICAgIC8vIG1hbnVhbCBwYXJhbWV0ZXIgY2hhbmdlcyAoaW4gZWRpdG9yIHByZXZpZXcgbW9kZSkuXG4gICAgICAgIHZhciBpbml0UGFyYW1zID0gZnVuY3Rpb24gKG1hbnVhbFBhcmFtQ2hhbmdlcykge1xuICAgICAgICAgICAgdmFyIGJhc2VQYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIGV4cGxvcmF0aW9uLnBhcmFtU3BlY3MuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1OYW1lLCBwYXJhbVNwZWMpIHtcbiAgICAgICAgICAgICAgICBiYXNlUGFyYW1zW3BhcmFtTmFtZV0gPSBwYXJhbVNwZWMuZ2V0VHlwZSgpLmNyZWF0ZURlZmF1bHRWYWx1ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgc3RhcnRpbmdQYXJhbXMgPSBtYWtlUGFyYW1zKGJhc2VQYXJhbXMsIGV4cGxvcmF0aW9uLnBhcmFtQ2hhbmdlcy5jb25jYXQobWFudWFsUGFyYW1DaGFuZ2VzKSwgW2Jhc2VQYXJhbXNdKTtcbiAgICAgICAgICAgIExlYXJuZXJQYXJhbXNTZXJ2aWNlLmluaXQoc3RhcnRpbmdQYXJhbXMpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2dldE5leHRJbnRlcmFjdGlvbkh0bWwgPSBmdW5jdGlvbiAobGFiZWxGb3JGb2N1c1RhcmdldCkge1xuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uSWQgPSBleHBsb3JhdGlvbi5nZXRJbnRlcmFjdGlvbklkKG5leHRTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIEV4cGxvcmF0aW9uSHRtbEZvcm1hdHRlclNlcnZpY2UuZ2V0SW50ZXJhY3Rpb25IdG1sKGludGVyYWN0aW9uSWQsIGV4cGxvcmF0aW9uLmdldEludGVyYWN0aW9uQ3VzdG9taXphdGlvbkFyZ3MobmV4dFN0YXRlTmFtZSksIHRydWUsIGxhYmVsRm9yRm9jdXNUYXJnZXQpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY2hlY2tBbHdheXNBc2tMZWFybmVyc0ZvckFuc3dlckRldGFpbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBFeHBsb3JhdGlvbkZlYXR1cmVzQmFja2VuZEFwaVNlcnZpY2UuZmV0Y2hFeHBsb3JhdGlvbkZlYXR1cmVzKF9leHBsb3JhdGlvbklkKS50aGVuKGZ1bmN0aW9uIChmZWF0dXJlc0RhdGEpIHtcbiAgICAgICAgICAgICAgICBhbHdheXNBc2tMZWFybmVyc0ZvckFuc3dlckRldGFpbHMgPSAoZmVhdHVyZXNEYXRhLmFsd2F5c19hc2tfbGVhcm5lcnNfZm9yX2Fuc3dlcl9kZXRhaWxzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIGluIGVkaXRvciBwcmV2aWV3IG1vZGUuIEl0IHNldHMgdGhlXG4gICAgICAgICAgICAvLyBleHBsb3JhdGlvbiBkYXRhIGZyb20gd2hhdCdzIGN1cnJlbnRseSBzcGVjaWZpZWQgaW4gdGhlIGVkaXRvciwgYW5kXG4gICAgICAgICAgICAvLyBhbHNvIGluaXRpYWxpemVzIHRoZSBwYXJhbWV0ZXJzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICAgICAgICBpbml0U2V0dGluZ3NGcm9tRWRpdG9yOiBmdW5jdGlvbiAoYWN0aXZlU3RhdGVOYW1lRnJvbVByZXZpZXdUYWIsIG1hbnVhbFBhcmFtQ2hhbmdlc1RvSW5pdCkge1xuICAgICAgICAgICAgICAgIGlmIChfZWRpdG9yUHJldmlld01vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFudWFsUGFyYW1DaGFuZ2VzID0gbWFudWFsUGFyYW1DaGFuZ2VzVG9Jbml0O1xuICAgICAgICAgICAgICAgICAgICBpbml0U3RhdGVOYW1lID0gYWN0aXZlU3RhdGVOYW1lRnJvbVByZXZpZXdUYWI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnRXJyb3I6IGNhbm5vdCBwb3B1bGF0ZSBleHBsb3JhdGlvbiBpbiBsZWFybmVyIG1vZGUuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbml0aWFsaXplcyBhbiBleHBsb3JhdGlvbiwgcGFzc2luZyB0aGUgZGF0YSBmb3IgdGhlIGZpcnN0IHN0YXRlIHRvXG4gICAgICAgICAgICAgKiBzdWNjZXNzQ2FsbGJhY2suXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogSW4gZWRpdG9yIHByZXZpZXcgbW9kZSwgcG9wdWxhdGVFeHBsb3JhdGlvbigpIG11c3QgYmUgY2FsbGVkIGJlZm9yZVxuICAgICAgICAgICAgICogY2FsbGluZyBpbml0KCkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gc3VjY2Vzc0NhbGxiYWNrIC0gVGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYWZ0ZXIgdGhlXG4gICAgICAgICAgICAgKiAgIGluaXRpYWwgZXhwbG9yYXRpb24gZGF0YSBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkLiBUaGlzIGZ1bmN0aW9uIHdpbGxcbiAgICAgICAgICAgICAqICAgYmUgcGFzc2VkIHR3byBhcmd1bWVudHM6XG4gICAgICAgICAgICAgKiAgIC0gc3RhdGVOYW1lIHtzdHJpbmd9LCB0aGUgbmFtZSBvZiB0aGUgZmlyc3Qgc3RhdGVcbiAgICAgICAgICAgICAqICAgLSBpbml0SHRtbCB7c3RyaW5nfSwgYW4gSFRNTCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjb250ZW50IG9mIHRoZVxuICAgICAgICAgICAgICogICAgICAgZmlyc3Qgc3RhdGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChleHBsb3JhdGlvbkRpY3QsIGV4cGxvcmF0aW9uVmVyc2lvbiwgcHJlZmVycmVkQXVkaW9MYW5ndWFnZSwgYXV0b1R0c0VuYWJsZWQsIHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGFuc3dlcklzQmVpbmdQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoX2VkaXRvclByZXZpZXdNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uID0gRXhwbG9yYXRpb25PYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21CYWNrZW5kRGljdChleHBsb3JhdGlvbkRpY3QpO1xuICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbi5zZXRJbml0aWFsU3RhdGVOYW1lKGluaXRTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2aXNpdGVkU3RhdGVOYW1lcyA9IFtleHBsb3JhdGlvbi5nZXRJbml0aWFsU3RhdGUoKS5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdFBhcmFtcyhtYW51YWxQYXJhbUNoYW5nZXMpO1xuICAgICAgICAgICAgICAgICAgICBBdWRpb1RyYW5zbGF0aW9uTGFuZ3VhZ2VTZXJ2aWNlLmluaXQoZXhwbG9yYXRpb24uZ2V0QWxsVm9pY2VvdmVyTGFuZ3VhZ2VDb2RlcygpLCBudWxsLCBleHBsb3JhdGlvbi5nZXRMYW5ndWFnZUNvZGUoKSwgZXhwbG9yYXRpb25EaWN0LmF1dG9fdHRzX2VuYWJsZWQpO1xuICAgICAgICAgICAgICAgICAgICBBdWRpb1ByZWxvYWRlclNlcnZpY2UuaW5pdChleHBsb3JhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIEF1ZGlvUHJlbG9hZGVyU2VydmljZS5raWNrT2ZmQXVkaW9QcmVsb2FkZXIoaW5pdFN0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIF9sb2FkSW5pdGlhbFN0YXRlKHN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbiA9IEV4cGxvcmF0aW9uT2JqZWN0RmFjdG9yeS5jcmVhdGVGcm9tQmFja2VuZERpY3QoZXhwbG9yYXRpb25EaWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdmlzaXRlZFN0YXRlTmFtZXMucHVzaChleHBsb3JhdGlvbi5nZXRJbml0aWFsU3RhdGUoKS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IGV4cGxvcmF0aW9uVmVyc2lvbjtcbiAgICAgICAgICAgICAgICAgICAgaW5pdFBhcmFtcyhbXSk7XG4gICAgICAgICAgICAgICAgICAgIEF1ZGlvVHJhbnNsYXRpb25MYW5ndWFnZVNlcnZpY2UuaW5pdChleHBsb3JhdGlvbi5nZXRBbGxWb2ljZW92ZXJMYW5ndWFnZUNvZGVzKCksIHByZWZlcnJlZEF1ZGlvTGFuZ3VhZ2UsIGV4cGxvcmF0aW9uLmdldExhbmd1YWdlQ29kZSgpLCBhdXRvVHRzRW5hYmxlZCk7XG4gICAgICAgICAgICAgICAgICAgIEF1ZGlvUHJlbG9hZGVyU2VydmljZS5pbml0KGV4cGxvcmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgQXVkaW9QcmVsb2FkZXJTZXJ2aWNlLmtpY2tPZmZBdWRpb1ByZWxvYWRlcihleHBsb3JhdGlvbi5nZXRJbml0aWFsU3RhdGUoKS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgSW1hZ2VQcmVsb2FkZXJTZXJ2aWNlLmluaXQoZXhwbG9yYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBJbWFnZVByZWxvYWRlclNlcnZpY2Uua2lja09mZkltYWdlUHJlbG9hZGVyKGV4cGxvcmF0aW9uLmdldEluaXRpYWxTdGF0ZSgpLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjaGVja0Fsd2F5c0Fza0xlYXJuZXJzRm9yQW5zd2VyRGV0YWlscygpO1xuICAgICAgICAgICAgICAgICAgICBfbG9hZEluaXRpYWxTdGF0ZShzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtb3ZlVG9FeHBsb3JhdGlvbjogZnVuY3Rpb24gKHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIF9sb2FkSW5pdGlhbFN0YXRlKHN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNDdXJyZW50U3RhdGVJbml0aWFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZU5hbWUgPT09IGV4cGxvcmF0aW9uLmluaXRTdGF0ZU5hbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVjb3JkTmV3Q2FyZEFkZGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlTmFtZSA9IG5leHRTdGF0ZU5hbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0U3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVOYW1lID0gUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuZ2V0TGFzdFN0YXRlTmFtZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBsb3JhdGlvbi5nZXRTdGF0ZShzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEV4cGxvcmF0aW9uSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2V4cGxvcmF0aW9uSWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0RXhwbG9yYXRpb25UaXRsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBsb3JhdGlvbi50aXRsZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRFeHBsb3JhdGlvblZlcnNpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmVyc2lvbjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRBdXRob3JSZWNvbW1lbmRlZEV4cElkczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBsb3JhdGlvbi5nZXRBdXRob3JSZWNvbW1lbmRlZEV4cElkcyhjdXJyZW50U3RhdGVOYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRMYW5ndWFnZUNvZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwbG9yYXRpb24uZ2V0TGFuZ3VhZ2VDb2RlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNJblByZXZpZXdNb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhX2VkaXRvclByZXZpZXdNb2RlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Ym1pdEFuc3dlcjogZnVuY3Rpb24gKGFuc3dlciwgaW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UsIHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChhbnN3ZXJJc0JlaW5nUHJvY2Vzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYW5zd2VySXNCZWluZ1Byb2Nlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIG9sZFN0YXRlTmFtZSA9IFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmdldExhc3RTdGF0ZU5hbWUoKTtcbiAgICAgICAgICAgICAgICB2YXIgb2xkU3RhdGUgPSBleHBsb3JhdGlvbi5nZXRTdGF0ZShvbGRTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIHZhciByZWNvcmRlZFZvaWNlb3ZlcnMgPSBvbGRTdGF0ZS5yZWNvcmRlZFZvaWNlb3ZlcnM7XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzaWZpY2F0aW9uUmVzdWx0ID0gKEFuc3dlckNsYXNzaWZpY2F0aW9uU2VydmljZS5nZXRNYXRjaGluZ0NsYXNzaWZpY2F0aW9uUmVzdWx0KG9sZFN0YXRlTmFtZSwgb2xkU3RhdGUuaW50ZXJhY3Rpb24sIGFuc3dlciwgaW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UpKTtcbiAgICAgICAgICAgICAgICB2YXIgYW5zd2VySXNDb3JyZWN0ID0gY2xhc3NpZmljYXRpb25SZXN1bHQub3V0Y29tZS5sYWJlbGxlZEFzQ29ycmVjdDtcbiAgICAgICAgICAgICAgICAvLyBVc2UgYW5ndWxhci5jb3B5KCkgdG8gY2xvbmUgdGhlIG9iamVjdFxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIGNsYXNzaWZpY2F0aW9uUmVzdWx0Lm91dGNvbWUgcG9pbnRzXG4gICAgICAgICAgICAgICAgLy8gYXQgb2xkU3RhdGUuaW50ZXJhY3Rpb24uZGVmYXVsdF9vdXRjb21lXG4gICAgICAgICAgICAgICAgdmFyIG91dGNvbWUgPSBhbmd1bGFyLmNvcHkoY2xhc3NpZmljYXRpb25SZXN1bHQub3V0Y29tZSk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1N0YXRlTmFtZSA9IG91dGNvbWUuZGVzdDtcbiAgICAgICAgICAgICAgICBpZiAoIV9lZGl0b3JQcmV2aWV3TW9kZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmVlZGJhY2tJc1VzZWZ1bCA9IChBbnN3ZXJDbGFzc2lmaWNhdGlvblNlcnZpY2UuaXNDbGFzc2lmaWVkRXhwbGljaXRseU9yR29lc1RvTmV3U3RhdGUob2xkU3RhdGVOYW1lLCBvbGRTdGF0ZSwgYW5zd2VyLCBpbnRlcmFjdGlvblJ1bGVzU2VydmljZSkpO1xuICAgICAgICAgICAgICAgICAgICBTdGF0c1JlcG9ydGluZ1NlcnZpY2UucmVjb3JkQW5zd2VyU3VibWl0dGVkKG9sZFN0YXRlTmFtZSwgTGVhcm5lclBhcmFtc1NlcnZpY2UuZ2V0QWxsUGFyYW1zKCksIGFuc3dlciwgY2xhc3NpZmljYXRpb25SZXN1bHQuYW5zd2VyR3JvdXBJbmRleCwgY2xhc3NpZmljYXRpb25SZXN1bHQucnVsZUluZGV4LCBjbGFzc2lmaWNhdGlvblJlc3VsdC5jbGFzc2lmaWNhdGlvbkNhdGVnb3JpemF0aW9uLCBmZWVkYmFja0lzVXNlZnVsKTtcbiAgICAgICAgICAgICAgICAgICAgU3RhdHNSZXBvcnRpbmdTZXJ2aWNlLnJlY29yZEFuc3dlclN1Ym1pdEFjdGlvbihvbGRTdGF0ZU5hbWUsIG5ld1N0YXRlTmFtZSwgb2xkU3RhdGUuaW50ZXJhY3Rpb24uaWQsIGFuc3dlciwgb3V0Y29tZS5mZWVkYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZWZyZXNoZXJFeHBsb3JhdGlvbklkID0gb3V0Y29tZS5yZWZyZXNoZXJFeHBsb3JhdGlvbklkO1xuICAgICAgICAgICAgICAgIHZhciBtaXNzaW5nUHJlcmVxdWlzaXRlU2tpbGxJZCA9IG91dGNvbWUubWlzc2luZ1ByZXJlcXVpc2l0ZVNraWxsSWQ7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1N0YXRlID0gZXhwbG9yYXRpb24uZ2V0U3RhdGUobmV3U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNGaXJzdEhpdCA9IEJvb2xlYW4odmlzaXRlZFN0YXRlTmFtZXMuaW5kZXhPZihuZXdTdGF0ZU5hbWUpID09PSAtMSk7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFN0YXRlTmFtZSAhPT0gbmV3U3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2l0ZWRTdGF0ZU5hbWVzLnB1c2gobmV3U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZGF0YSBmb3IgdGhlIG5leHQgc3RhdGUuXG4gICAgICAgICAgICAgICAgdmFyIG9sZFBhcmFtcyA9IExlYXJuZXJQYXJhbXNTZXJ2aWNlLmdldEFsbFBhcmFtcygpO1xuICAgICAgICAgICAgICAgIG9sZFBhcmFtcy5hbnN3ZXIgPSBhbnN3ZXI7XG4gICAgICAgICAgICAgICAgdmFyIGZlZWRiYWNrSHRtbCA9IG1ha2VGZWVkYmFjayhvdXRjb21lLmZlZWRiYWNrLmdldEh0bWwoKSwgW29sZFBhcmFtc10pO1xuICAgICAgICAgICAgICAgIHZhciBmZWVkYmFja0NvbnRlbnRJZCA9IG91dGNvbWUuZmVlZGJhY2suZ2V0Q29udGVudElkKCk7XG4gICAgICAgICAgICAgICAgdmFyIGZlZWRiYWNrQXVkaW9UcmFuc2xhdGlvbnMgPSAocmVjb3JkZWRWb2ljZW92ZXJzLmdldEJpbmRhYmxlVm9pY2VvdmVycyhmZWVkYmFja0NvbnRlbnRJZCkpO1xuICAgICAgICAgICAgICAgIGlmIChmZWVkYmFja0h0bWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VySXNCZWluZ1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmFkZFdhcm5pbmcoJ0V4cHJlc3Npb24gcGFyc2luZyBlcnJvci4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbmV3UGFyYW1zID0gKG5ld1N0YXRlID8gbWFrZVBhcmFtcyhvbGRQYXJhbXMsIG5ld1N0YXRlLnBhcmFtQ2hhbmdlcywgW29sZFBhcmFtc10pIDogb2xkUGFyYW1zKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3UGFyYW1zID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuc3dlcklzQmVpbmdQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgQWxlcnRzU2VydmljZS5hZGRXYXJuaW5nKCdFeHByZXNzaW9uIHBhcnNpbmcgZXJyb3IuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXN0aW9uSHRtbCA9IG1ha2VRdWVzdGlvbihuZXdTdGF0ZSwgW25ld1BhcmFtcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiAnYW5zd2VyJ1xuICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uSHRtbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhbnN3ZXJJc0JlaW5nUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuYWRkV2FybmluZygnRXhwcmVzc2lvbiBwYXJzaW5nIGVycm9yLicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRPRE8oc2xsKTogUmVtb3ZlIHRoZSAnYW5zd2VyJyBrZXkgZnJvbSBuZXdQYXJhbXMuXG4gICAgICAgICAgICAgICAgbmV3UGFyYW1zLmFuc3dlciA9IGFuc3dlcjtcbiAgICAgICAgICAgICAgICBhbnN3ZXJJc0JlaW5nUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIHJlZnJlc2hJbnRlcmFjdGlvbiA9IChvbGRTdGF0ZU5hbWUgIT09IG5ld1N0YXRlTmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbi5pc0ludGVyYWN0aW9uSW5saW5lKG9sZFN0YXRlTmFtZSkpO1xuICAgICAgICAgICAgICAgIG5leHRTdGF0ZU5hbWUgPSBuZXdTdGF0ZU5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIG9uU2FtZUNhcmQgPSAob2xkU3RhdGVOYW1lID09PSBuZXdTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlQWN0aXZlU3RhdGVJZkluRWRpdG9yJywgbmV3U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICB2YXIgX25leHRGb2N1c0xhYmVsID0gRm9jdXNNYW5hZ2VyU2VydmljZS5nZW5lcmF0ZUZvY3VzTGFiZWwoKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEludGVyYWN0aW9uSHRtbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGV4cGxvcmF0aW9uLmdldEludGVyYWN0aW9uKG5leHRTdGF0ZU5hbWUpLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRJbnRlcmFjdGlvbkh0bWwgPSBfZ2V0TmV4dEludGVyYWN0aW9uSHRtbChfbmV4dEZvY3VzTGFiZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV3UGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIExlYXJuZXJQYXJhbXNTZXJ2aWNlLmluaXQobmV3UGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcXVlc3Rpb25IdG1sID0gcXVlc3Rpb25IdG1sICsgX2dldFJhbmRvbVN1ZmZpeCgpO1xuICAgICAgICAgICAgICAgIG5leHRJbnRlcmFjdGlvbkh0bWwgPSBuZXh0SW50ZXJhY3Rpb25IdG1sICsgX2dldFJhbmRvbVN1ZmZpeCgpO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0Q2FyZCA9IFN0YXRlQ2FyZE9iamVjdEZhY3RvcnkuY3JlYXRlTmV3Q2FyZChuZXh0U3RhdGVOYW1lLCBxdWVzdGlvbkh0bWwsIG5leHRJbnRlcmFjdGlvbkh0bWwsIGV4cGxvcmF0aW9uLmdldEludGVyYWN0aW9uKG5leHRTdGF0ZU5hbWUpLCBleHBsb3JhdGlvbi5nZXRTdGF0ZShuZXh0U3RhdGVOYW1lKS5yZWNvcmRlZFZvaWNlb3ZlcnMsIGV4cGxvcmF0aW9uLmdldFN0YXRlKG5leHRTdGF0ZU5hbWUpLmNvbnRlbnQuZ2V0Q29udGVudElkKCkpO1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhuZXh0Q2FyZCwgcmVmcmVzaEludGVyYWN0aW9uLCBmZWVkYmFja0h0bWwsIGZlZWRiYWNrQXVkaW9UcmFuc2xhdGlvbnMsIHJlZnJlc2hlckV4cGxvcmF0aW9uSWQsIG1pc3NpbmdQcmVyZXF1aXNpdGVTa2lsbElkLCBvblNhbWVDYXJkLCBudWxsLCAob2xkU3RhdGVOYW1lID09PSBleHBsb3JhdGlvbi5pbml0U3RhdGVOYW1lKSwgaXNGaXJzdEhpdCwgZmFsc2UsIF9uZXh0Rm9jdXNMYWJlbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlcklzQ29ycmVjdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0Fuc3dlckJlaW5nUHJvY2Vzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlcklzQmVpbmdQcm9jZXNzZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0QWx3YXlzQXNrTGVhcm5lckZvckFuc3dlckRldGFpbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWx3YXlzQXNrTGVhcm5lcnNGb3JBbnN3ZXJEZXRhaWxzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBBIHNlcnZpY2UgdGhhdCBtYWludGFpbnMgYSByZWNvcmQgb2YgdGhlIHN0YXRlIG9mIHRoZSBwbGF5ZXIsXG4gKiAgbGlrZSBlbmdpbmUgc2VydmljZS5cbiAqL1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL0VkaXRhYmxlRXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL1JlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3F1ZXN0aW9uL1ByZXRlc3RRdWVzdGlvbkJhY2tlbmRBcGlTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vcXVlc3Rpb24vUXVlc3Rpb25CYWNrZW5kQXBpU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvZXhwbG9yYXRpb24tZW5naW5lLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL251bWJlci1hdHRlbXB0cy5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9wbGF5ZXItcG9zaXRpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcGxheWVyLXRyYW5zY3JpcHQuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcXVlc3Rpb24tcGxheWVyLWVuZ2luZS5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9zdGF0ZS1jbGFzc2lmaWVyLW1hcHBpbmcuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvc3RhdHMtcmVwb3J0aW5nLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0NvbnRleHRTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9FeHBsb3JhdGlvbkZlYXR1cmVzQmFja2VuZEFwaVNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0V4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9QbGF5dGhyb3VnaElzc3Vlc1NlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL1BsYXl0aHJvdWdoU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvY29udGV4dHVhbC9VcmxTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdFeHBsb3JhdGlvblBsYXllclN0YXRlU2VydmljZScsIFtcbiAgICAnJHEnLCAnJHJvb3RTY29wZScsICdDb250ZXh0U2VydmljZScsXG4gICAgJ0VkaXRhYmxlRXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZScsXG4gICAgJ0V4cGxvcmF0aW9uRW5naW5lU2VydmljZScsICdFeHBsb3JhdGlvbkZlYXR1cmVzQmFja2VuZEFwaVNlcnZpY2UnLFxuICAgICdFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZScsICdOdW1iZXJBdHRlbXB0c1NlcnZpY2UnLFxuICAgICdQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UnLFxuICAgICdQbGF5ZXJUcmFuc2NyaXB0U2VydmljZScsICdQbGF5dGhyb3VnaElzc3Vlc1NlcnZpY2UnLCAnUGxheXRocm91Z2hTZXJ2aWNlJyxcbiAgICAnUHJldGVzdFF1ZXN0aW9uQmFja2VuZEFwaVNlcnZpY2UnLFxuICAgICdRdWVzdGlvbkJhY2tlbmRBcGlTZXJ2aWNlJywgJ1F1ZXN0aW9uUGxheWVyRW5naW5lU2VydmljZScsXG4gICAgJ1JlYWRPbmx5RXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZScsICdTdGF0ZUNsYXNzaWZpZXJNYXBwaW5nU2VydmljZScsXG4gICAgJ1N0YXRzUmVwb3J0aW5nU2VydmljZScsICdVcmxTZXJ2aWNlJywgJ0VYUExPUkFUSU9OX01PREUnLFxuICAgIGZ1bmN0aW9uICgkcSwgJHJvb3RTY29wZSwgQ29udGV4dFNlcnZpY2UsIEVkaXRhYmxlRXhwbG9yYXRpb25CYWNrZW5kQXBpU2VydmljZSwgRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlLCBFeHBsb3JhdGlvbkZlYXR1cmVzQmFja2VuZEFwaVNlcnZpY2UsIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlLCBOdW1iZXJBdHRlbXB0c1NlcnZpY2UsIFBsYXllckNvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkU2VydmljZSwgUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UsIFBsYXl0aHJvdWdoSXNzdWVzU2VydmljZSwgUGxheXRocm91Z2hTZXJ2aWNlLCBQcmV0ZXN0UXVlc3Rpb25CYWNrZW5kQXBpU2VydmljZSwgUXVlc3Rpb25CYWNrZW5kQXBpU2VydmljZSwgUXVlc3Rpb25QbGF5ZXJFbmdpbmVTZXJ2aWNlLCBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UsIFN0YXRlQ2xhc3NpZmllck1hcHBpbmdTZXJ2aWNlLCBTdGF0c1JlcG9ydGluZ1NlcnZpY2UsIFVybFNlcnZpY2UsIEVYUExPUkFUSU9OX01PREUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRFbmdpbmVTZXJ2aWNlID0gbnVsbDtcbiAgICAgICAgdmFyIGV4cGxvcmF0aW9uTW9kZSA9IEVYUExPUkFUSU9OX01PREUuT1RIRVI7XG4gICAgICAgIHZhciBlZGl0b3JQcmV2aWV3TW9kZSA9IENvbnRleHRTZXJ2aWNlLmlzSW5FeHBsb3JhdGlvbkVkaXRvclBhZ2UoKTtcbiAgICAgICAgdmFyIHF1ZXN0aW9uUGxheWVyTW9kZSA9IENvbnRleHRTZXJ2aWNlLmlzSW5RdWVzdGlvblBsYXllck1vZGUoKTtcbiAgICAgICAgdmFyIGV4cGxvcmF0aW9uSWQgPSBDb250ZXh0U2VydmljZS5nZXRFeHBsb3JhdGlvbklkKCk7XG4gICAgICAgIHZhciB2ZXJzaW9uID0gVXJsU2VydmljZS5nZXRFeHBsb3JhdGlvblZlcnNpb25Gcm9tVXJsKCk7XG4gICAgICAgIGlmICghcXVlc3Rpb25QbGF5ZXJNb2RlKSB7XG4gICAgICAgICAgICBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2VcbiAgICAgICAgICAgICAgICAubG9hZEV4cGxvcmF0aW9uKGV4cGxvcmF0aW9uSWQsIHZlcnNpb24pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGV4cGxvcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9IGV4cGxvcmF0aW9uLnZlcnNpb247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RvcnlJZCA9IFVybFNlcnZpY2UuZ2V0U3RvcnlJZEluUGxheWVyKCk7XG4gICAgICAgIHZhciBpbml0aWFsaXplRXhwbG9yYXRpb25TZXJ2aWNlcyA9IGZ1bmN0aW9uIChyZXR1cm5EaWN0LCBhcmVQcmV0ZXN0c0F2YWlsYWJsZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIFN0YXRlQ2xhc3NpZmllck1hcHBpbmdTZXJ2aWNlLmluaXQocmV0dXJuRGljdC5zdGF0ZV9jbGFzc2lmaWVyX21hcHBpbmcpO1xuICAgICAgICAgICAgU3RhdHNSZXBvcnRpbmdTZXJ2aWNlLmluaXRTZXNzaW9uKGV4cGxvcmF0aW9uSWQsIHJldHVybkRpY3QuZXhwbG9yYXRpb24udGl0bGUsIHZlcnNpb24sIHJldHVybkRpY3Quc2Vzc2lvbl9pZCwgVXJsU2VydmljZS5nZXRDb2xsZWN0aW9uSWRGcm9tRXhwbG9yYXRpb25VcmwoKSk7XG4gICAgICAgICAgICBQbGF5dGhyb3VnaFNlcnZpY2UuaW5pdFNlc3Npb24oZXhwbG9yYXRpb25JZCwgdmVyc2lvbiwgcmV0dXJuRGljdC5yZWNvcmRfcGxheXRocm91Z2hfcHJvYmFiaWxpdHkpO1xuICAgICAgICAgICAgUGxheXRocm91Z2hJc3N1ZXNTZXJ2aWNlLmluaXRTZXNzaW9uKGV4cGxvcmF0aW9uSWQsIHZlcnNpb24pO1xuICAgICAgICAgICAgUGxheWVyQ29ycmVjdG5lc3NGZWVkYmFja0VuYWJsZWRTZXJ2aWNlLmluaXQocmV0dXJuRGljdC5jb3JyZWN0bmVzc19mZWVkYmFja19lbmFibGVkKTtcbiAgICAgICAgICAgIEV4cGxvcmF0aW9uRW5naW5lU2VydmljZS5pbml0KHJldHVybkRpY3QuZXhwbG9yYXRpb24sIHJldHVybkRpY3QudmVyc2lvbiwgcmV0dXJuRGljdC5wcmVmZXJyZWRfYXVkaW9fbGFuZ3VhZ2VfY29kZSwgcmV0dXJuRGljdC5hdXRvX3R0c19lbmFibGVkLCBhcmVQcmV0ZXN0c0F2YWlsYWJsZSA/IGZ1bmN0aW9uICgpIHsgfSA6IGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGluaXRpYWxpemVQcmV0ZXN0U2VydmljZXMgPSBmdW5jdGlvbiAocHJldGVzdFF1ZXN0aW9uRGljdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UuaW5pdCh0cnVlKTtcbiAgICAgICAgICAgIFF1ZXN0aW9uUGxheWVyRW5naW5lU2VydmljZS5pbml0KHByZXRlc3RRdWVzdGlvbkRpY3RzLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBpbml0aWFsaXplUXVlc3Rpb25QbGF5ZXJTZXJ2aWNlcyA9IGZ1bmN0aW9uIChxdWVzdGlvbkRpY3RzLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgUGxheWVyQ29ycmVjdG5lc3NGZWVkYmFja0VuYWJsZWRTZXJ2aWNlLmluaXQodHJ1ZSk7XG4gICAgICAgICAgICBRdWVzdGlvblBsYXllckVuZ2luZVNlcnZpY2UuaW5pdChxdWVzdGlvbkRpY3RzLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzZXRFeHBsb3JhdGlvbk1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBsb3JhdGlvbk1vZGUgPSBFWFBMT1JBVElPTl9NT0RFLkVYUExPUkFUSU9OO1xuICAgICAgICAgICAgY3VycmVudEVuZ2luZVNlcnZpY2UgPSBFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2U7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzZXRQcmV0ZXN0TW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGV4cGxvcmF0aW9uTW9kZSA9IEVYUExPUkFUSU9OX01PREUuUFJFVEVTVDtcbiAgICAgICAgICAgIGN1cnJlbnRFbmdpbmVTZXJ2aWNlID0gUXVlc3Rpb25QbGF5ZXJFbmdpbmVTZXJ2aWNlO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgc2V0UXVlc3Rpb25QbGF5ZXJNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwbG9yYXRpb25Nb2RlID0gRVhQTE9SQVRJT05fTU9ERS5RVUVTVElPTl9QTEFZRVI7XG4gICAgICAgICAgICBjdXJyZW50RW5naW5lU2VydmljZSA9IFF1ZXN0aW9uUGxheWVyRW5naW5lU2VydmljZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHNldFN0b3J5Q2hhcHRlck1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBsb3JhdGlvbk1vZGUgPSBFWFBMT1JBVElPTl9NT0RFLlNUT1JZX0NIQVBURVI7XG4gICAgICAgICAgICBjdXJyZW50RW5naW5lU2VydmljZSA9IEV4cGxvcmF0aW9uRW5naW5lU2VydmljZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGluaXRFeHBsb3JhdGlvblByZXZpZXdQbGF5ZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHNldEV4cGxvcmF0aW9uTW9kZSgpO1xuICAgICAgICAgICAgJHEuYWxsKFtcbiAgICAgICAgICAgICAgICBFZGl0YWJsZUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UuZmV0Y2hBcHBseURyYWZ0RXhwbG9yYXRpb24oZXhwbG9yYXRpb25JZCksXG4gICAgICAgICAgICAgICAgRXhwbG9yYXRpb25GZWF0dXJlc0JhY2tlbmRBcGlTZXJ2aWNlLmZldGNoRXhwbG9yYXRpb25GZWF0dXJlcyhleHBsb3JhdGlvbklkKSxcbiAgICAgICAgICAgIF0pLnRoZW4oZnVuY3Rpb24gKGNvbWJpbmVkRGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBleHBsb3JhdGlvbkRhdGEgPSBjb21iaW5lZERhdGFbMF07XG4gICAgICAgICAgICAgICAgdmFyIGZlYXR1cmVzRGF0YSA9IGNvbWJpbmVkRGF0YVsxXTtcbiAgICAgICAgICAgICAgICBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZS5pbml0KGV4cGxvcmF0aW9uRGF0YSwgZmVhdHVyZXNEYXRhKTtcbiAgICAgICAgICAgICAgICBFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2UuaW5pdChleHBsb3JhdGlvbkRhdGEsIG51bGwsIG51bGwsIG51bGwsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UuaW5pdChleHBsb3JhdGlvbkRhdGEuY29ycmVjdG5lc3NfZmVlZGJhY2tfZW5hYmxlZCk7XG4gICAgICAgICAgICAgICAgTnVtYmVyQXR0ZW1wdHNTZXJ2aWNlLnJlc2V0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGluaXRRdWVzdGlvblBsYXllciA9IGZ1bmN0aW9uIChxdWVzdGlvblBsYXllckNvbmZpZywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHNldFF1ZXN0aW9uUGxheWVyTW9kZSgpO1xuICAgICAgICAgICAgUXVlc3Rpb25CYWNrZW5kQXBpU2VydmljZS5mZXRjaFF1ZXN0aW9ucyhxdWVzdGlvblBsYXllckNvbmZpZy5za2lsbExpc3QsIHF1ZXN0aW9uUGxheWVyQ29uZmlnLnF1ZXN0aW9uQ291bnQsIHF1ZXN0aW9uUGxheWVyQ29uZmlnLnF1ZXN0aW9uc1NvcnRlZEJ5RGlmZmljdWx0eSkudGhlbihmdW5jdGlvbiAocXVlc3Rpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd0b3RhbFF1ZXN0aW9uc1JlY2VpdmVkJywgcXVlc3Rpb25EYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZVF1ZXN0aW9uUGxheWVyU2VydmljZXMocXVlc3Rpb25EYXRhLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGluaXRFeHBsb3JhdGlvblBsYXllciA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGV4cGxvcmF0aW9uRGF0YVByb21pc2UgPSB2ZXJzaW9uID9cbiAgICAgICAgICAgICAgICBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UubG9hZEV4cGxvcmF0aW9uKGV4cGxvcmF0aW9uSWQsIHZlcnNpb24pIDpcbiAgICAgICAgICAgICAgICBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UubG9hZExhdGVzdEV4cGxvcmF0aW9uKGV4cGxvcmF0aW9uSWQpO1xuICAgICAgICAgICAgJHEuYWxsKFtcbiAgICAgICAgICAgICAgICBleHBsb3JhdGlvbkRhdGFQcm9taXNlLFxuICAgICAgICAgICAgICAgIFByZXRlc3RRdWVzdGlvbkJhY2tlbmRBcGlTZXJ2aWNlLmZldGNoUHJldGVzdFF1ZXN0aW9ucyhleHBsb3JhdGlvbklkLCBzdG9yeUlkKSxcbiAgICAgICAgICAgICAgICBFeHBsb3JhdGlvbkZlYXR1cmVzQmFja2VuZEFwaVNlcnZpY2UuZmV0Y2hFeHBsb3JhdGlvbkZlYXR1cmVzKGV4cGxvcmF0aW9uSWQpLFxuICAgICAgICAgICAgXSkudGhlbihmdW5jdGlvbiAoY29tYmluZWREYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV4cGxvcmF0aW9uRGF0YSA9IGNvbWJpbmVkRGF0YVswXTtcbiAgICAgICAgICAgICAgICB2YXIgcHJldGVzdFF1ZXN0aW9uc0RhdGEgPSBjb21iaW5lZERhdGFbMV07XG4gICAgICAgICAgICAgICAgdmFyIGZlYXR1cmVzRGF0YSA9IGNvbWJpbmVkRGF0YVsyXTtcbiAgICAgICAgICAgICAgICBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZS5pbml0KGV4cGxvcmF0aW9uRGF0YSwgZmVhdHVyZXNEYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAocHJldGVzdFF1ZXN0aW9uc0RhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRQcmV0ZXN0TW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplRXhwbG9yYXRpb25TZXJ2aWNlcyhleHBsb3JhdGlvbkRhdGEsIHRydWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZVByZXRlc3RTZXJ2aWNlcyhwcmV0ZXN0UXVlc3Rpb25zRGF0YSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChVcmxTZXJ2aWNlLmdldFVybFBhcmFtcygpLmhhc093blByb3BlcnR5KCdzdG9yeV9pZCcpICYmXG4gICAgICAgICAgICAgICAgICAgIFVybFNlcnZpY2UuZ2V0VXJsUGFyYW1zKCkuaGFzT3duUHJvcGVydHkoJ25vZGVfaWQnKSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRTdG9yeUNoYXB0ZXJNb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVFeHBsb3JhdGlvblNlcnZpY2VzKGV4cGxvcmF0aW9uRGF0YSwgZmFsc2UsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEV4cGxvcmF0aW9uTW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplRXhwbG9yYXRpb25TZXJ2aWNlcyhleHBsb3JhdGlvbkRhdGEsIGZhbHNlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0aWFsaXplUGxheWVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5pbml0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGVkaXRvclByZXZpZXdNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRFeHBsb3JhdGlvblByZXZpZXdQbGF5ZXIoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdEV4cGxvcmF0aW9uUGxheWVyKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5pdGlhbGl6ZVF1ZXN0aW9uUGxheWVyOiBmdW5jdGlvbiAoY29uZmlnLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmluaXQoKTtcbiAgICAgICAgICAgICAgICBpbml0UXVlc3Rpb25QbGF5ZXIoY29uZmlnLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q3VycmVudEVuZ2luZVNlcnZpY2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudEVuZ2luZVNlcnZpY2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNJblByZXRlc3RNb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cGxvcmF0aW9uTW9kZSA9PT0gRVhQTE9SQVRJT05fTU9ERS5QUkVURVNUO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzSW5RdWVzdGlvbk1vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwbG9yYXRpb25Nb2RlID09PSBFWFBMT1JBVElPTl9NT0RFLlBSRVRFU1QgfHxcbiAgICAgICAgICAgICAgICAgICAgZXhwbG9yYXRpb25Nb2RlID09PSBFWFBMT1JBVElPTl9NT0RFLlFVRVNUSU9OX1BMQVlFUjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0luUXVlc3Rpb25QbGF5ZXJNb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cGxvcmF0aW9uTW9kZSA9PT0gRVhQTE9SQVRJT05fTU9ERS5RVUVTVElPTl9QTEFZRVI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNJblN0b3J5Q2hhcHRlck1vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwbG9yYXRpb25Nb2RlID09PSBFWFBMT1JBVElPTl9NT0RFLlNUT1JZX0NIQVBURVI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UHJldGVzdFF1ZXN0aW9uQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUXVlc3Rpb25QbGF5ZXJFbmdpbmVTZXJ2aWNlLmdldFByZXRlc3RRdWVzdGlvbkNvdW50KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW92ZVRvRXhwbG9yYXRpb246IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHNldEV4cGxvcmF0aW9uTW9kZSgpO1xuICAgICAgICAgICAgICAgIEV4cGxvcmF0aW9uRW5naW5lU2VydmljZS5tb3ZlVG9FeHBsb3JhdGlvbihjYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TGFuZ3VhZ2VDb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRFbmdpbmVTZXJ2aWNlLmdldExhbmd1YWdlQ29kZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZE5ld0NhcmRBZGRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RW5naW5lU2VydmljZS5yZWNvcmROZXdDYXJkQWRkZWQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNlcnZpY2UgZm9yIHJlY29tbWVuZGluZyBleHBsb3JhdGlvbnMgYXQgdGhlIGVuZCBvZiBhblxuICogZXhwbG9yYXRpb24uXG4gKi9cbnJlcXVpcmUoJ3NlcnZpY2VzL0NvbnRleHRTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9jb250ZXh0dWFsL1VybFNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0V4cGxvcmF0aW9uUmVjb21tZW5kYXRpb25zU2VydmljZScsIFtcbiAgICAnJGh0dHAnLCAnQ29udGV4dFNlcnZpY2UnLCAnVXJsU2VydmljZScsICdFWFBMT1JBVElPTl9FRElUT1JfVEFCX0NPTlRFWFQnLFxuICAgICdQQUdFX0NPTlRFWFQnLFxuICAgIGZ1bmN0aW9uICgkaHR0cCwgQ29udGV4dFNlcnZpY2UsIFVybFNlcnZpY2UsIEVYUExPUkFUSU9OX0VESVRPUl9UQUJfQ09OVEVYVCwgUEFHRV9DT05URVhUKSB7XG4gICAgICAgIHZhciBpc0lmcmFtZWQgPSBVcmxTZXJ2aWNlLmlzSWZyYW1lZCgpO1xuICAgICAgICB2YXIgaXNJbkVkaXRvclBhZ2UgPSAoQ29udGV4dFNlcnZpY2UuZ2V0UGFnZUNvbnRleHQoKSA9PT0gUEFHRV9DT05URVhULkVYUExPUkFUSU9OX0VESVRPUik7XG4gICAgICAgIHZhciBpc0luRWRpdG9yUHJldmlld01vZGUgPSBpc0luRWRpdG9yUGFnZSAmJiAoQ29udGV4dFNlcnZpY2UuZ2V0RWRpdG9yVGFiQ29udGV4dCgpID09PVxuICAgICAgICAgICAgRVhQTE9SQVRJT05fRURJVE9SX1RBQl9DT05URVhULlBSRVZJRVcpO1xuICAgICAgICB2YXIgZXhwbG9yYXRpb25JZCA9IENvbnRleHRTZXJ2aWNlLmdldEV4cGxvcmF0aW9uSWQoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldFJlY29tbWVuZGVkU3VtbWFyeURpY3RzOiBmdW5jdGlvbiAoYXV0aG9yUmVjb21tZW5kZWRFeHBJZHMsIGluY2x1ZGVBdXRvZ2VuZXJhdGVkUmVjb21tZW5kYXRpb25zLCBzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVjb21tZW5kYXRpb25zVXJsUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdpZmllZF9hdXRob3JfcmVjb21tZW5kZWRfaWRzOiBKU09OLnN0cmluZ2lmeShhdXRob3JSZWNvbW1lbmRlZEV4cElkcyksXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25faWQ6IFVybFNlcnZpY2UuZ2V0Q29sbGVjdGlvbklkRnJvbUV4cGxvcmF0aW9uVXJsKCksXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVfc3lzdGVtX3JlY29tbWVuZGF0aW9uczogbnVsbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGluY2x1ZGVBdXRvZ2VuZXJhdGVkUmVjb21tZW5kYXRpb25zICYmICFpc0luRWRpdG9yUGFnZSkge1xuICAgICAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnNVcmxQYXJhbXMuaW5jbHVkZV9zeXN0ZW1fcmVjb21tZW5kYXRpb25zID0gJ3RydWUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9leHBsb3JlaGFuZGxlci9yZWNvbW1lbmRhdGlvbnMvJyArIGV4cGxvcmF0aW9uSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiByZWNvbW1lbmRhdGlvbnNVcmxQYXJhbXNcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UuZGF0YS5zdW1tYXJpZXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIGZvciBkZXRlY3Rpbmcgc3BhbW1pbmcgYmVoYXZpb3IgZnJvbSB0aGUgbGVhcm5lci5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnRmF0aWd1ZURldGVjdGlvblNlcnZpY2UnLCBbXG4gICAgJyR1aWJNb2RhbCcsICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgZnVuY3Rpb24gKCR1aWJNb2RhbCwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgLy8gNCBzdWJtaXNzaW9ucyBpbiB1bmRlciAxMCBzZWNvbmRzIHRyaWdnZXJzIG1vZGFsLlxuICAgICAgICB2YXIgU1BBTV9DT1VOVF9USFJFU0hPTEQgPSA0O1xuICAgICAgICB2YXIgU1BBTV9XSU5ET1dfTVNFQyA9IDEwMDAwO1xuICAgICAgICB2YXIgc3VibWlzc2lvblRpbWVzTXNlYyA9IFtdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVjb3JkU3VibWlzc2lvblRpbWVzdGFtcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN1Ym1pc3Npb25UaW1lc01zZWMucHVzaCgobmV3IERhdGUoKSkuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1N1Ym1pdHRpbmdUb29GYXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Ym1pc3Npb25UaW1lc01zZWMubGVuZ3RoID49IFNQQU1fQ09VTlRfVEhSRVNIT0xEKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dTdGFydFRpbWUgPSBzdWJtaXNzaW9uVGltZXNNc2VjLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dFbmRUaW1lID0gc3VibWlzc2lvblRpbWVzTXNlY1tzdWJtaXNzaW9uVGltZXNNc2VjLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93RW5kVGltZSAtIHdpbmRvd1N0YXJ0VGltZSA8IFNQQU1fV0lORE9XX01TRUMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNwbGF5VGFrZUJyZWFrTWVzc2FnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvdGVtcGxhdGVzLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Rha2UtYnJlYWstbW9kYWwudGVtcGxhdGUuaHRtbCcpLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHt9LFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCdva2F5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3VibWlzc2lvblRpbWVzTXNlYyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIGZvciBzaG93aW5nIHRoZSBoaW50IGFuZCBzb2x1dGlvbiBtb2RhbHMuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzLycgK1xuICAgICdhdWRpby10cmFuc2xhdGlvbi1tYW5hZ2VyLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzLycgK1xuICAgICdoaW50cy1hbmQtc29sdXRpb24tbWFuYWdlci5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9wbGF5ZXItcG9zaXRpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcGxheWVyLXRyYW5zY3JpcHQuc2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvQXVkaW9QbGF5ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdIaW50QW5kU29sdXRpb25Nb2RhbFNlcnZpY2UnLCBbXG4gICAgJyR1aWJNb2RhbCcsICdBdWRpb1BsYXllclNlcnZpY2UnLFxuICAgICdBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2UnLFxuICAgICdBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlJyxcbiAgICAnSGludHNBbmRTb2x1dGlvbk1hbmFnZXJTZXJ2aWNlJywgJ1BsYXllclBvc2l0aW9uU2VydmljZScsXG4gICAgJ1BsYXllclRyYW5zY3JpcHRTZXJ2aWNlJywgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgJ0NPTVBPTkVOVF9OQU1FX0hJTlQnLFxuICAgICdDT01QT05FTlRfTkFNRV9TT0xVVElPTicsICdFVkVOVF9BVVRPUExBWV9BVURJTycsXG4gICAgZnVuY3Rpb24gKCR1aWJNb2RhbCwgQXVkaW9QbGF5ZXJTZXJ2aWNlLCBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2UsIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UsIEhpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZSwgUGxheWVyUG9zaXRpb25TZXJ2aWNlLCBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UsIENPTVBPTkVOVF9OQU1FX0hJTlQsIENPTVBPTkVOVF9OQU1FX1NPTFVUSU9OLCBFVkVOVF9BVVRPUExBWV9BVURJTykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcGxheUhpbnRNb2RhbDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvdGVtcGxhdGVzLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2hpbnQtYW5kLXNvbHV0aW9uLW1vZGFsLnRlbXBsYXRlLmh0bWwnKSxcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNIaW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGludCA9IEhpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZS5kaXNwbGF5SGludChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXllZENhcmQgPSBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5nZXRDYXJkKFBsYXllclBvc2l0aW9uU2VydmljZS5nZXREaXNwbGF5ZWRDYXJkSW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlY29yZGVkVm9pY2VvdmVycyA9IGRpc3BsYXllZENhcmQuZ2V0UmVjb3JkZWRWb2ljZW92ZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhpbnRDb250ZW50SWQgPSAkc2NvcGUuaGludC5nZXRDb250ZW50SWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2Uuc2V0U2Vjb25kYXJ5QXVkaW9UcmFuc2xhdGlvbnMocmVjb3JkZWRWb2ljZW92ZXJzLmdldEJpbmRhYmxlVm9pY2VvdmVycyhoaW50Q29udGVudElkKSwgJHNjb3BlLmhpbnQuZ2V0SHRtbCgpLCBDT01QT05FTlRfTkFNRV9ISU5UKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoRVZFTlRfQVVUT1BMQVlfQVVESU8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jbG9zZU1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1BsYXllclNlcnZpY2Uuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbGVhclNlY29uZGFyeUF1ZGlvVHJhbnNsYXRpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNwbGF5U29sdXRpb25Nb2RhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkdWliTW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXREaXJlY3RpdmVUZW1wbGF0ZVVybCgnL3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3RlbXBsYXRlcy8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdoaW50LWFuZC1zb2x1dGlvbi1tb2RhbC50ZW1wbGF0ZS5odG1sJyksXG4gICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgJyRzY29wZScsICckcm9vdFNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzSGludCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb2x1dGlvbiA9IEhpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZS5kaXNwbGF5U29sdXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc29sdXRpb25Db250ZW50SWQgPSBzb2x1dGlvbi5leHBsYW5hdGlvbi5nZXRDb250ZW50SWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheWVkQ2FyZCA9IFBsYXllclRyYW5zY3JpcHRTZXJ2aWNlLmdldENhcmQoUGxheWVyUG9zaXRpb25TZXJ2aWNlLmdldERpc3BsYXllZENhcmRJbmRleCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVjb3JkZWRWb2ljZW92ZXJzID0gZGlzcGxheWVkQ2FyZC5nZXRSZWNvcmRlZFZvaWNlb3ZlcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdWRpb1RyYW5zbGF0aW9uTWFuYWdlclNlcnZpY2Uuc2V0U2Vjb25kYXJ5QXVkaW9UcmFuc2xhdGlvbnMocmVjb3JkZWRWb2ljZW92ZXJzLmdldEJpbmRhYmxlVm9pY2VvdmVycyhzb2x1dGlvbkNvbnRlbnRJZCksIHNvbHV0aW9uLmV4cGxhbmF0aW9uLmdldEh0bWwoKSwgQ09NUE9ORU5UX05BTUVfU09MVVRJT04pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChFVkVOVF9BVVRPUExBWV9BVURJTyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uID0gZGlzcGxheWVkQ2FyZC5nZXRJbnRlcmFjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG9ydEFuc3dlckh0bWwgPSBzb2x1dGlvbi5nZXRPcHBpYVNob3J0QW5zd2VyUmVzcG9uc2VIdG1sKGludGVyYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc29sdXRpb25FeHBsYW5hdGlvbkh0bWwgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2x1dGlvbi5nZXRPcHBpYVNvbHV0aW9uRXhwbGFuYXRpb25SZXNwb25zZUh0bWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xvc2VNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9QbGF5ZXJTZXJ2aWNlLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZS5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xlYXJTZWNvbmRhcnlBdWRpb1RyYW5zbGF0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzcGxheVNvbHV0aW9uSW50ZXJzdGl0aWFsTW9kYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHVpYk1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS90ZW1wbGF0ZXMvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnc29sdXRpb24taW50ZXJzdGl0aWFsLW1vZGFsLnRlbXBsYXRlLmh0bWwnKSxcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRpbnVlVG9Tb2x1dGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0eSBzZXJ2aWNlIGZvciBIaW50cyBpbiB0aGUgbGVhcm5lcidzIHZpZXcuXG4gKi9cbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlLmNvbnN0YW50cy5hanMudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0hpbnRzQW5kU29sdXRpb25NYW5hZ2VyU2VydmljZScsIFtcbiAgICAnJHJvb3RTY29wZScsICckdGltZW91dCcsICdFVkVOVF9ORVdfQ0FSRF9BVkFJTEFCTEUnLFxuICAgICdXQUlUX0ZPUl9GSVJTVF9ISU5UX01TRUMnLCAnV0FJVF9GT1JfU1VCU0VRVUVOVF9ISU5UU19NU0VDJyxcbiAgICBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRpbWVvdXQsIEVWRU5UX05FV19DQVJEX0FWQUlMQUJMRSwgV0FJVF9GT1JfRklSU1RfSElOVF9NU0VDLCBXQUlUX0ZPUl9TVUJTRVFVRU5UX0hJTlRTX01TRUMpIHtcbiAgICAgICAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICB2YXIgQUNDRUxFUkFURURfSElOVF9XQUlUX1RJTUVfTVNFQyA9IDEwMDAwO1xuICAgICAgICB2YXIgV0FJVF9GT1JfVE9PTFRJUF9UT19CRV9TSE9XTl9NU0VDID0gNjAwMDA7XG4gICAgICAgIHZhciBudW1IaW50c1JlbGVhc2VkID0gMDtcbiAgICAgICAgdmFyIG51bUhpbnRzQ29uc3VtZWQgPSAwO1xuICAgICAgICB2YXIgc29sdXRpb25SZWxlYXNlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgc29sdXRpb25Db25zdW1lZCA9IGZhbHNlO1xuICAgICAgICB2YXIgaGludHNGb3JMYXRlc3RDYXJkID0gW107XG4gICAgICAgIHZhciBzb2x1dGlvbkZvckxhdGVzdENhcmQgPSBudWxsO1xuICAgICAgICB2YXIgd3JvbmdBbnN3ZXJzU2luY2VMYXN0SGludENvbnN1bWVkID0gMDtcbiAgICAgICAgdmFyIGNvcnJlY3RBbnN3ZXJTdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gdG9vbHRpcElzT3BlbiBpcyBhIGZsYWcgd2hpY2ggc2F5cyB0aGF0IHRoZSB0b29sdGlwIGlzIGN1cnJlbnRseVxuICAgICAgICAvLyB2aXNpYmxlIHRvIHRoZSBsZWFybmVyLlxuICAgICAgICB2YXIgdG9vbHRpcElzT3BlbiA9IGZhbHNlO1xuICAgICAgICAvLyBUaGlzIGlzIHNldCB0byB0cnVlIGFzIHNvb24gYXMgYSBoaW50L3NvbHV0aW9uIGlzIGNsaWNrZWQgb3Igd2hlbiB0aGVcbiAgICAgICAgLy8gdG9vbHRpcCBoYXMgYmVlbiB0cmlnZ2VyZWQuXG4gICAgICAgIHZhciBoaW50c0Rpc2NvdmVyZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHRvb2x0aXBUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgJHJvb3RTY29wZS4kb24oRVZFTlRfTkVXX0NBUkRfQVZBSUxBQkxFLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb3JyZWN0QW5zd2VyU3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIFRoaXMgcHJldmVudHMgdG9vbHRpcCB0byBoaWRlIHRoZSBDb250aW51ZSBidXR0b24gb2YgdGhlIGhlbHAgY2FyZCBpblxuICAgICAgICAgICAgLy8gbW9iaWxlIHZpZXcuXG4gICAgICAgICAgICB0b29sdGlwSXNPcGVuID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaGlzIHJlcGxhY2VzIGFueSB0aW1lb3V0cyB0aGF0IGFyZSBhbHJlYWR5IHF1ZXVlZC5cbiAgICAgICAgdmFyIGVucXVldWVUaW1lb3V0ID0gZnVuY3Rpb24gKGZ1bmMsIHRpbWVUb1dhaXRNc2VjKSB7XG4gICAgICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbWVvdXQgPSAkdGltZW91dChmdW5jLCB0aW1lVG9XYWl0TXNlYyk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzaG93VG9vbHRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRvb2x0aXBJc09wZW4gPSB0cnVlO1xuICAgICAgICAgICAgaGludHNEaXNjb3ZlcmVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlbGVhc2VIaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFjb3JyZWN0QW5zd2VyU3VibWl0dGVkKSB7XG4gICAgICAgICAgICAgICAgbnVtSGludHNSZWxlYXNlZCsrO1xuICAgICAgICAgICAgICAgIGlmICghaGludHNEaXNjb3ZlcmVkICYmICF0b29sdGlwVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICB0b29sdGlwVGltZW91dCA9ICR0aW1lb3V0KHNob3dUb29sdGlwLCBXQUlUX0ZPUl9UT09MVElQX1RPX0JFX1NIT1dOX01TRUMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlbGVhc2VTb2x1dGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNvbHV0aW9uUmVsZWFzZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgYWNjZWxlcmF0ZUhpbnRSZWxlYXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW5xdWV1ZVRpbWVvdXQocmVsZWFzZUhpbnQsIEFDQ0VMRVJBVEVEX0hJTlRfV0FJVF9USU1FX01TRUMpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgYXJlQWxsSGludHNFeGhhdXN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtSGludHNSZWxlYXNlZCA9PT0gaGludHNGb3JMYXRlc3RDYXJkLmxlbmd0aDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGlzQUhpbnRXYWl0aW5nVG9CZVZpZXdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1IaW50c0NvbnN1bWVkIDwgbnVtSGludHNSZWxlYXNlZDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNvbnN1bWVIaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaGludHNEaXNjb3ZlcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRvb2x0aXBJc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0b29sdGlwVGltZW91dCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0b29sdGlwVGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2hpbnRDb25zdW1lZCcpO1xuICAgICAgICAgICAgbnVtSGludHNDb25zdW1lZCsrO1xuICAgICAgICAgICAgd3JvbmdBbnN3ZXJzU2luY2VMYXN0SGludENvbnN1bWVkID0gMDtcbiAgICAgICAgICAgIHZhciBmdW5jVG9FbnF1ZXVlID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghYXJlQWxsSGludHNFeGhhdXN0ZWQoKSkge1xuICAgICAgICAgICAgICAgIGZ1bmNUb0VucXVldWUgPSByZWxlYXNlSGludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCEhc29sdXRpb25Gb3JMYXRlc3RDYXJkICYmICFzb2x1dGlvblJlbGVhc2VkKSB7XG4gICAgICAgICAgICAgICAgZnVuY1RvRW5xdWV1ZSA9IHJlbGVhc2VTb2x1dGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmdW5jVG9FbnF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgZW5xdWV1ZVRpbWVvdXQoZnVuY1RvRW5xdWV1ZSwgV0FJVF9GT1JfU1VCU0VRVUVOVF9ISU5UU19NU0VDKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAobmV3SGludHMsIG5ld1NvbHV0aW9uKSB7XG4gICAgICAgICAgICAgICAgbnVtSGludHNSZWxlYXNlZCA9IDA7XG4gICAgICAgICAgICAgICAgbnVtSGludHNDb25zdW1lZCA9IDA7XG4gICAgICAgICAgICAgICAgc29sdXRpb25SZWxlYXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHNvbHV0aW9uQ29uc3VtZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBoaW50c0ZvckxhdGVzdENhcmQgPSBuZXdIaW50cztcbiAgICAgICAgICAgICAgICBzb2x1dGlvbkZvckxhdGVzdENhcmQgPSBuZXdTb2x1dGlvbjtcbiAgICAgICAgICAgICAgICB3cm9uZ0Fuc3dlcnNTaW5jZUxhc3RIaW50Q29uc3VtZWQgPSAwO1xuICAgICAgICAgICAgICAgIGNvcnJlY3RBbnN3ZXJTdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0b29sdGlwVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwodG9vbHRpcFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaGludHNGb3JMYXRlc3RDYXJkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZW5xdWV1ZVRpbWVvdXQocmVsZWFzZUhpbnQsIFdBSVRfRk9SX0ZJUlNUX0hJTlRfTVNFQyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIFdBUk5JTkc6IFRoaXMgbWV0aG9kIGhhcyBhIHNpZGUtZWZmZWN0LiBJZiB0aGUgcmV0cmlldmVkIGhpbnQgaXMgYVxuICAgICAgICAgICAgLy8gcGVuZGluZyBoaW50IHRoYXQncyBiZWluZyB2aWV3ZWQsIGl0IHN0YXJ0cyB0aGUgdGltZXIgZm9yIHRoZSBuZXh0XG4gICAgICAgICAgICAvLyBoaW50LlxuICAgICAgICAgICAgZGlzcGxheUhpbnQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gbnVtSGludHNDb25zdW1lZCAmJiBudW1IaW50c0NvbnN1bWVkIDwgbnVtSGludHNSZWxlYXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbGF0ZXN0IGhpbnQgaGFzIGJlZW4gY29uc3VtZWQuIFN0YXJ0IHRoZSB0aW1lci5cbiAgICAgICAgICAgICAgICAgICAgY29uc3VtZUhpbnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgbnVtSGludHNSZWxlYXNlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGludHNGb3JMYXRlc3RDYXJkW2luZGV4XS5oaW50Q29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzcGxheVNvbHV0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGludHNEaXNjb3ZlcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzb2x1dGlvbkNvbnN1bWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3NvbHV0aW9uVmlld2VkJyk7XG4gICAgICAgICAgICAgICAgaWYgKHRvb2x0aXBUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0b29sdGlwVGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzb2x1dGlvbkZvckxhdGVzdENhcmQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TnVtSGludHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGludHNGb3JMYXRlc3RDYXJkLmxlbmd0aDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0hpbnRWaWV3YWJsZTogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4IDwgbnVtSGludHNSZWxlYXNlZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0hpbnRDb25zdW1lZDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4IDwgbnVtSGludHNDb25zdW1lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0hpbnRUb29sdGlwT3BlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b29sdGlwSXNPcGVuO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzU29sdXRpb25WaWV3YWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzb2x1dGlvblJlbGVhc2VkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzU29sdXRpb25Db25zdW1lZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzb2x1dGlvbkNvbnN1bWVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZFdyb25nQW5zd2VyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQUhpbnRXYWl0aW5nVG9CZVZpZXdlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd3JvbmdBbnN3ZXJzU2luY2VMYXN0SGludENvbnN1bWVkKys7XG4gICAgICAgICAgICAgICAgaWYgKCFhcmVBbGxIaW50c0V4aGF1c3RlZCgpICYmICFpc0FIaW50V2FpdGluZ1RvQmVWaWV3ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVtSGludHNSZWxlYXNlZCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgd3JvbmdBbnN3ZXJzU2luY2VMYXN0SGludENvbnN1bWVkID49IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VsZXJhdGVIaW50UmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG51bUhpbnRzUmVsZWFzZWQgPiAwICYmIHdyb25nQW5zd2Vyc1NpbmNlTGFzdEhpbnRDb25zdW1lZCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NlbGVyYXRlSGludFJlbGVhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3IgbGVhcm5lciBhbnN3ZXIgaW5mby5cbiAqL1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvYW5zd2VyLWNsYXNzaWZpY2F0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9zdGF0aXN0aWNzL0xlYXJuZXJBbnN3ZXJEZXRhaWxzQmFja2VuZEFwaVNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0xlYXJuZXJBbnN3ZXJJbmZvU2VydmljZScsIFtcbiAgICAnQW5zd2VyQ2xhc3NpZmljYXRpb25TZXJ2aWNlJywgJ0xlYXJuZXJBbnN3ZXJEZXRhaWxzQmFja2VuZEFwaVNlcnZpY2UnLFxuICAgICdJTlRFUkFDVElPTl9JRFNfV0lUSE9VVF9BTlNXRVJfREVUQUlMUycsXG4gICAgZnVuY3Rpb24gKEFuc3dlckNsYXNzaWZpY2F0aW9uU2VydmljZSwgTGVhcm5lckFuc3dlckRldGFpbHNCYWNrZW5kQXBpU2VydmljZSwgSU5URVJBQ1RJT05fSURTX1dJVEhPVVRfQU5TV0VSX0RFVEFJTFMpIHtcbiAgICAgICAgdmFyIHN1Ym1pdHRlZEFuc3dlckluZm9Db3VudCA9IDA7XG4gICAgICAgIHZhciBjdXJyZW50RW50aXR5SWQgPSBudWxsO1xuICAgICAgICB2YXIgc3RhdGVOYW1lID0gbnVsbDtcbiAgICAgICAgdmFyIGludGVyYWN0aW9uSWQgPSBudWxsO1xuICAgICAgICB2YXIgY3VycmVudEFuc3dlciA9IG51bGw7XG4gICAgICAgIHZhciBjdXJyZW50SW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UgPSBudWxsO1xuICAgICAgICB2YXIgY2FuQXNrTGVhcm5lckZvckFuc3dlckluZm8gPSBmYWxzZTtcbiAgICAgICAgdmFyIHZpc2l0ZWRTdGF0ZXMgPSBbXTtcbiAgICAgICAgdmFyIHByb2JhYmlsaXR5SW5kZXhlcyA9IHtcbiAgICAgICAgICAgIC8vIFRoZSBwcm9iYWJpbGl0eSB0aGF0IGEgcmVxdWVzdCBmb3IgZXhwbGFuYXRpb24gb2YgdGhlIGFuc3dlciB0aGF0IGlzXG4gICAgICAgICAgICAvLyBzdWJtaXR0ZWQgYnkgdGhlIGxlYXJuZXIuIFRoZXJlIGFyZSB0aHJlZSBkaWZmZXJlbnQgcHJvYmFiaWxpdGllc1xuICAgICAgICAgICAgLy8gYmFzZWQgb24gdGhlIG91dGNvbWUgb2YgdGhlIGFuc3dlci5cbiAgICAgICAgICAgIC8vIFRoZSBwcm9iYWJpbGl0eSBpbmRleCB3aGVuIHRoZSBvdXRjb21lIGlzIGVxdWFsIHRvIHRoZSBkZWZhdWx0IG91dGNvbWVcbiAgICAgICAgICAgIC8vIGZvciBhbiBpbnRlcmFjdGlvbi5cbiAgICAgICAgICAgIHR5cGVBOiAwLjI1LFxuICAgICAgICAgICAgLy8gVGhlIHByb2JhYmlsaXR5IGluZGV4IHdoZW4gdGhlIG91dGNvbWUgaXMgbWFya2VkIGFzIGNvcnJlY3QgaS5lXG4gICAgICAgICAgICAvLyBsYWJlbGxlZF9hc19jb3JyZWN0IHByb3BlcnR5IGlzIHRydWUuXG4gICAgICAgICAgICB0eXBlQjogMC4xMCxcbiAgICAgICAgICAgIC8vIFRoZSBwcm9iYWJpbGl0eSBpbmRleCB3aGVuIHRoZSBvdXRjb21lIGlzIG5vdCB0aGUgZGVmYXVsdCBvdXRjb21lXG4gICAgICAgICAgICAvLyBhbmQgaXQgaXMgbm90IG1hcmtlZCBhcyBjb3JyZWN0IGkuZS4gaXQgaXMgYW55IGdlbmVyYWwgb3V0Y29tZS5cbiAgICAgICAgICAgIHR5cGVDOiAwLjA1XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRSYW5kb21Qcm9iYWJpbGl0eUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG1pbiA9IDA7XG4gICAgICAgICAgICB2YXIgbWF4ID0gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluKSAvIDEwMDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRMZWFybmVyQW5zd2VySW5mb1NlcnZpY2U6IGZ1bmN0aW9uIChlbnRpdHlJZCwgc3RhdGUsIGFuc3dlciwgaW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UsIGFsd2F5c0Fza0xlYXJuZXJGb3JBbnN3ZXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEVudGl0eUlkID0gZW50aXR5SWQ7XG4gICAgICAgICAgICAgICAgY3VycmVudEFuc3dlciA9IGFuc3dlcjtcbiAgICAgICAgICAgICAgICBjdXJyZW50SW50ZXJhY3Rpb25SdWxlc1NlcnZpY2UgPSBpbnRlcmFjdGlvblJ1bGVzU2VydmljZTtcbiAgICAgICAgICAgICAgICBzdGF0ZU5hbWUgPSBzdGF0ZS5uYW1lO1xuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uSWQgPSBzdGF0ZS5pbnRlcmFjdGlvbi5pZDtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdE91dGNvbWUgPSBzdGF0ZS5pbnRlcmFjdGlvbi5kZWZhdWx0T3V0Y29tZTtcbiAgICAgICAgICAgICAgICBpZiAoc3VibWl0dGVkQW5zd2VySW5mb0NvdW50ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5zb2xpY2l0QW5zd2VyRGV0YWlscykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChJTlRFUkFDVElPTl9JRFNfV0lUSE9VVF9BTlNXRVJfREVUQUlMUy5pbmRleE9mKGludGVyYWN0aW9uSWQpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2aXNpdGVkU3RhdGVzLmluZGV4T2Yoc3RhdGVOYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWx3YXlzQXNrTGVhcm5lckZvckFuc3dlckluZm8gPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FuQXNrTGVhcm5lckZvckFuc3dlckluZm8gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjbGFzc2lmaWNhdGlvblJlc3VsdCA9IChBbnN3ZXJDbGFzc2lmaWNhdGlvblNlcnZpY2UuZ2V0TWF0Y2hpbmdDbGFzc2lmaWNhdGlvblJlc3VsdChzdGF0ZU5hbWUsIHN0YXRlLmludGVyYWN0aW9uLCBhbnN3ZXIsIGludGVyYWN0aW9uUnVsZXNTZXJ2aWNlKSk7XG4gICAgICAgICAgICAgICAgdmFyIG91dGNvbWUgPSBjbGFzc2lmaWNhdGlvblJlc3VsdC5vdXRjb21lO1xuICAgICAgICAgICAgICAgIHZhciB0aHJlc2hvbGRQcm9iYWJpbGl0eUluZGV4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZG9tUHJvYmFiaWxpdHlJbmRleCA9IGdldFJhbmRvbVByb2JhYmlsaXR5SW5kZXgoKTtcbiAgICAgICAgICAgICAgICBpZiAob3V0Y29tZSA9PT0gZGVmYXVsdE91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkUHJvYmFiaWxpdHlJbmRleCA9IHByb2JhYmlsaXR5SW5kZXhlcy50eXBlQTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob3V0Y29tZS5sYWJlbGxlZEFzQ29ycmVjdCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJlc2hvbGRQcm9iYWJpbGl0eUluZGV4ID0gcHJvYmFiaWxpdHlJbmRleGVzLnR5cGVCO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkUHJvYmFiaWxpdHlJbmRleCA9IHByb2JhYmlsaXR5SW5kZXhlcy50eXBlQztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FuQXNrTGVhcm5lckZvckFuc3dlckluZm8gPSAocmFuZG9tUHJvYmFiaWxpdHlJbmRleCA8PSB0aHJlc2hvbGRQcm9iYWJpbGl0eUluZGV4KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNldFN1Ym1pdHRlZEFuc3dlckluZm9Db3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN1Ym1pdHRlZEFuc3dlckluZm9Db3VudCA9IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVjb3JkTGVhcm5lckFuc3dlckluZm86IGZ1bmN0aW9uIChhbnN3ZXJEZXRhaWxzKSB7XG4gICAgICAgICAgICAgICAgTGVhcm5lckFuc3dlckRldGFpbHNCYWNrZW5kQXBpU2VydmljZS5yZWNvcmRMZWFybmVyQW5zd2VyRGV0YWlscyhjdXJyZW50RW50aXR5SWQsIHN0YXRlTmFtZSwgaW50ZXJhY3Rpb25JZCwgY3VycmVudEFuc3dlciwgYW5zd2VyRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgc3VibWl0dGVkQW5zd2VySW5mb0NvdW50Kys7XG4gICAgICAgICAgICAgICAgdmlzaXRlZFN0YXRlcy5wdXNoKHN0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgY2FuQXNrTGVhcm5lckZvckFuc3dlckluZm8gPSBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5Bc2tMZWFybmVyRm9yQW5zd2VySW5mbzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW5Bc2tMZWFybmVyRm9yQW5zd2VySW5mbztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDdXJyZW50QW5zd2VyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRBbnN3ZXI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q3VycmVudEludGVyYWN0aW9uUnVsZXNTZXJ2aWNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJbnRlcmFjdGlvblJ1bGVzU2VydmljZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRTb2xpY2l0QW5zd2VyRGV0YWlsc1F1ZXN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsID0gJCgnPHA+Jyk7XG4gICAgICAgICAgICAgICAgZWwuYXR0cigndHJhbnNsYXRlJywgJ0kxOE5fU09MSUNJVF9BTlNXRVJfREVUQUlMU19RVUVTVElPTicpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoJCgnPHNwYW4+JykuYXBwZW5kKGVsKSkuaHRtbCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFNvbGljaXRBbnN3ZXJEZXRhaWxzRmVlZGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSAkKCc8cD4nKTtcbiAgICAgICAgICAgICAgICBlbC5hdHRyKCd0cmFuc2xhdGUnLCAnSTE4Tl9TT0xJQ0lUX0FOU1dFUl9ERVRBSUxTX0ZFRURCQUNLJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgkKCc8c3Bhbj4nKS5hcHBlbmQoZWwpKS5odG1sKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEEgc2VydmljZSB0aGF0IG1haW50YWlucyB0aGUgY3VycmVudCBzZXQgb2YgcGFyYW1ldGVycyBmb3IgdGhlXG4gKiBsZWFybmVyLlxuICovXG52YXIgY2xvbmVEZWVwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC9jbG9uZURlZXBcIikpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIExlYXJuZXJQYXJhbXNTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExlYXJuZXJQYXJhbXNTZXJ2aWNlKCkge1xuICAgICAgICB0aGlzLl9wYXJhbURpY3QgPSB7fTtcbiAgICB9XG4gICAgLy8gVE9ETyhzbGwpOiBGb3JiaWQgdXNlIG9mICdhbnN3ZXInLCAnY2hvaWNlcycgYXMgcG9zc2libGUga2V5cy5cbiAgICAvLyBUT0RPKCM3MTY1KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIHR5cGVkXG4gICAgLy8gYXMgJ2FueScgc2luY2UgJ2luaXRQYXJhbVNwZWNzJyBpcyBhIGRpY3Qgd2l0aCBQYXJhbVNwZWMgdHlwZSBvYmplY3RcbiAgICAvLyB2YWx1ZXMgd2hpY2ggaXMgaW4gQW5ndWxhckpTLiBSZXBsYWNlIHRoaXMgd2l0aCB0aGUgZXhhY3QgdHlwZSBvbmNlIGl0IGlzXG4gICAgLy8gdXBncmFkZWQuXG4gICAgTGVhcm5lclBhcmFtc1NlcnZpY2UucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoaW5pdFBhcmFtU3BlY3MpIHtcbiAgICAgICAgLy8gVGhlIGluaXRQYXJhbVNwZWNzIGFyZyBpcyBhIGRpY3QgbWFwcGluZyB0aGUgcGFyYW1ldGVyIG5hbWVzIHVzZWQgaW5cbiAgICAgICAgLy8gdGhlIGV4cGxvcmF0aW9uIHRvIHRoZWlyIGRlZmF1bHQgdmFsdWVzLlxuICAgICAgICB0aGlzLl9wYXJhbURpY3QgPSBjbG9uZURlZXBfMS5kZWZhdWx0KGluaXRQYXJhbVNwZWNzKTtcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNjUpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4gdHlwZWRcbiAgICAvLyBhcyAnYW55JyBzaW5jZSB0aGUgcmV0dXJuIHR5cGUgaXMgYSBkaWN0IHdpdGggUGFyYW1TcGVjIHR5cGUgb2JqZWN0XG4gICAgLy8gdmFsdWVzIHdoaWNoIGlzIGluIEFuZ3VsYXJKUy4gUmVwbGFjZSB0aGlzIHdpdGggdGhlIGV4YWN0IHR5cGUgb25jZSBpdCBpc1xuICAgIC8vIHVwZ3JhZGVkLlxuICAgIExlYXJuZXJQYXJhbXNTZXJ2aWNlLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIChwYXJhbU5hbWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wYXJhbURpY3QuaGFzT3duUHJvcGVydHkocGFyYW1OYW1lKSkge1xuICAgICAgICAgICAgdGhyb3cgJ0ludmFsaWQgcGFyYW1ldGVyIG5hbWU6ICcgKyBwYXJhbU5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY2xvbmVEZWVwXzEuZGVmYXVsdCh0aGlzLl9wYXJhbURpY3RbcGFyYW1OYW1lXSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExlYXJuZXJQYXJhbXNTZXJ2aWNlLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIChwYXJhbU5hbWUsIG5ld1BhcmFtVmFsdWUpIHtcbiAgICAgICAgLy8gVE9ETyhzbGwpOiBDdXJyZW50bHksIGFsbCBwYXJhbWV0ZXJzIGFyZSBzdHJpbmdzLiBJbiB0aGUgZnV0dXJlLCB3ZVxuICAgICAgICAvLyB3aWxsIG5lZWQgdG8gbWFpbnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgcGFyYW1ldGVyIHR5cGVzLlxuICAgICAgICBpZiAoIXRoaXMuX3BhcmFtRGljdC5oYXNPd25Qcm9wZXJ0eShwYXJhbU5hbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyAnQ2Fubm90IHNldCB1bmtub3duIHBhcmFtZXRlcjogJyArIHBhcmFtTmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtRGljdFtwYXJhbU5hbWVdID0gU3RyaW5nKG5ld1BhcmFtVmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMZWFybmVyUGFyYW1zU2VydmljZS5wcm90b3R5cGUuZ2V0QWxsUGFyYW1zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2xvbmVEZWVwXzEuZGVmYXVsdCh0aGlzLl9wYXJhbURpY3QpO1xuICAgIH07XG4gICAgTGVhcm5lclBhcmFtc1NlcnZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pXG4gICAgXSwgTGVhcm5lclBhcmFtc1NlcnZpY2UpO1xuICAgIHJldHVybiBMZWFybmVyUGFyYW1zU2VydmljZTtcbn0oKSk7XG5leHBvcnRzLkxlYXJuZXJQYXJhbXNTZXJ2aWNlID0gTGVhcm5lclBhcmFtc1NlcnZpY2U7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdMZWFybmVyUGFyYW1zU2VydmljZScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoTGVhcm5lclBhcmFtc1NlcnZpY2UpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3IgdGhlIHJhdGluZyBmdW5jdGlvbmFsaXR5IGluIHRoZSBsZWFybmVyIHZpZXcuXG4gKi9cbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2V4cGxvcmF0aW9uLWVuZ2luZS5zZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdMZWFybmVyVmlld1JhdGluZ1NlcnZpY2UnLCBbXG4gICAgJyRodHRwJywgJyRyb290U2NvcGUnLCAnRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoJGh0dHAsICRyb290U2NvcGUsIEV4cGxvcmF0aW9uRW5naW5lU2VydmljZSkge1xuICAgICAgICB2YXIgZXhwbG9yYXRpb25JZCA9IEV4cGxvcmF0aW9uRW5naW5lU2VydmljZS5nZXRFeHBsb3JhdGlvbklkKCk7XG4gICAgICAgIHZhciByYXRpbmdzVXJsID0gJy9leHBsb3JlaGFuZGxlci9yYXRpbmcvJyArIGV4cGxvcmF0aW9uSWQ7XG4gICAgICAgIHZhciB1c2VyUmF0aW5nO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICRodHRwLmdldChyYXRpbmdzVXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UuZGF0YS51c2VyX3JhdGluZyk7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJSYXRpbmcgPSByZXNwb25zZS5kYXRhLnVzZXJfcmF0aW5nO1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3JhdGluZ1NlcnZpY2VJbml0aWFsaXplZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Ym1pdFVzZXJSYXRpbmc6IGZ1bmN0aW9uIChyYXRpbmdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICRodHRwLnB1dChyYXRpbmdzVXJsLCB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJfcmF0aW5nOiByYXRpbmdWYWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHVzZXJSYXRpbmcgPSByYXRpbmdWYWx1ZTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3JhdGluZ1VwZGF0ZWQnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRVc2VyUmF0aW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJSYXRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNlcnZpY2UgdG8gdHJhY2sgdGhlIG51bWJlciBvZiBhbnN3ZXIgYXR0ZW1wdHMgYnkgdGhlIGxlYXJuZXJcbiAqIHdpdGhpbiBhIGNhcmQuXG4gKi9cbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBOdW1iZXJBdHRlbXB0c1NlcnZpY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTnVtYmVyQXR0ZW1wdHNTZXJ2aWNlKCkge1xuICAgIH1cbiAgICBOdW1iZXJBdHRlbXB0c1NlcnZpY2VfMSA9IE51bWJlckF0dGVtcHRzU2VydmljZTtcbiAgICBOdW1iZXJBdHRlbXB0c1NlcnZpY2UucHJvdG90eXBlLnN1Ym1pdEF0dGVtcHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE51bWJlckF0dGVtcHRzU2VydmljZV8xLm51bWJlckF0dGVtcHRzKys7XG4gICAgfTtcbiAgICBOdW1iZXJBdHRlbXB0c1NlcnZpY2UucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBOdW1iZXJBdHRlbXB0c1NlcnZpY2VfMS5udW1iZXJBdHRlbXB0cyA9IDA7XG4gICAgfTtcbiAgICBOdW1iZXJBdHRlbXB0c1NlcnZpY2UucHJvdG90eXBlLmdldE51bWJlckF0dGVtcHRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTnVtYmVyQXR0ZW1wdHNTZXJ2aWNlXzEubnVtYmVyQXR0ZW1wdHM7XG4gICAgfTtcbiAgICB2YXIgTnVtYmVyQXR0ZW1wdHNTZXJ2aWNlXzE7XG4gICAgTnVtYmVyQXR0ZW1wdHNTZXJ2aWNlLm51bWJlckF0dGVtcHRzID0gMDtcbiAgICBOdW1iZXJBdHRlbXB0c1NlcnZpY2UgPSBOdW1iZXJBdHRlbXB0c1NlcnZpY2VfMSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSlcbiAgICBdLCBOdW1iZXJBdHRlbXB0c1NlcnZpY2UpO1xuICAgIHJldHVybiBOdW1iZXJBdHRlbXB0c1NlcnZpY2U7XG59KCkpO1xuZXhwb3J0cy5OdW1iZXJBdHRlbXB0c1NlcnZpY2UgPSBOdW1iZXJBdHRlbXB0c1NlcnZpY2U7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdOdW1iZXJBdHRlbXB0c1NlcnZpY2UnLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKE51bWJlckF0dGVtcHRzU2VydmljZSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTcgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIHdoaWNoIHNldHMgYW5kIGRldGVybWluZXMgd2hldGhlciB0aGUgY29ycmVjdG5lc3NcbiAqIGZlZWRiYWNrIGlzIGVuYWJsZWQgb3Igbm90LlxuICovXG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgUGxheWVyQ29ycmVjdG5lc3NGZWVkYmFja0VuYWJsZWRTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBsYXllckNvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkU2VydmljZSgpIHtcbiAgICB9XG4gICAgUGxheWVyQ29ycmVjdG5lc3NGZWVkYmFja0VuYWJsZWRTZXJ2aWNlXzEgPSBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2U7XG4gICAgUGxheWVyQ29ycmVjdG5lc3NGZWVkYmFja0VuYWJsZWRTZXJ2aWNlLl9pbml0ID0gZnVuY3Rpb24gKGNvcnJlY3RuZXNzRmVlZGJhY2tJc0VuYWJsZWQpIHtcbiAgICAgICAgUGxheWVyQ29ycmVjdG5lc3NGZWVkYmFja0VuYWJsZWRTZXJ2aWNlXzEuX2NvcnJlY3RuZXNzRmVlZGJhY2tJc0VuYWJsZWQgPSAoY29ycmVjdG5lc3NGZWVkYmFja0lzRW5hYmxlZCk7XG4gICAgfTtcbiAgICBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoY29ycmVjdG5lc3NGZWVkYmFja0lzRW5hYmxlZCkge1xuICAgICAgICBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2VfMS5faW5pdChjb3JyZWN0bmVzc0ZlZWRiYWNrSXNFbmFibGVkKTtcbiAgICB9O1xuICAgIFBsYXllckNvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkU2VydmljZS5wcm90b3R5cGUuaXNFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFBsYXllckNvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkU2VydmljZV8xLl9jb3JyZWN0bmVzc0ZlZWRiYWNrSXNFbmFibGVkKTtcbiAgICB9O1xuICAgIHZhciBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2VfMTtcbiAgICBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UuX2NvcnJlY3RuZXNzRmVlZGJhY2tJc0VuYWJsZWQgPSBmYWxzZTtcbiAgICBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UgPSBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2VfMSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSlcbiAgICBdLCBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UpO1xuICAgIHJldHVybiBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2U7XG59KCkpO1xuZXhwb3J0cy5QbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UgPSBQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2U7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdQbGF5ZXJDb3JyZWN0bmVzc0ZlZWRiYWNrRW5hYmxlZFNlcnZpY2UnLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKFBsYXllckNvcnJlY3RuZXNzRmVlZGJhY2tFbmFibGVkU2VydmljZSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIGZvciBrZWVwaW5nIHRyYWNrIG9mIHRoZSBsZWFybmVyJ3MgcG9zaXRpb24uXG4gKi9cbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3BsYXllci10cmFuc2NyaXB0LnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0NvbnRleHRTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdQbGF5ZXJQb3NpdGlvblNlcnZpY2UnLCBbXG4gICAgJ0NvbnRleHRTZXJ2aWNlJywgJ1BsYXllclRyYW5zY3JpcHRTZXJ2aWNlJywgZnVuY3Rpb24gKENvbnRleHRTZXJ2aWNlLCBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZSkge1xuICAgICAgICB2YXIgZGlzcGxheWVkQ2FyZEluZGV4ID0gbnVsbDtcbiAgICAgICAgdmFyIG9uQ2hhbmdlQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB2YXIgbGVhcm5lckp1c3RTdWJtaXR0ZWRBbkFuc3dlciA9IGZhbHNlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheWVkQ2FyZEluZGV4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBvbkNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q3VycmVudFN0YXRlTmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UuZ2V0Q2FyZChkaXNwbGF5ZWRDYXJkSW5kZXgpLmdldFN0YXRlTmFtZSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkZGl0aW9uYWxJbmZvID0gKCdcXG5VbmRlZmluZWQgY2FyZCBlcnJvciBkZWJ1ZyBsb2dzOicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcblJlcXVlc3RlZCBjYXJkIGluZGV4OiAnICsgZGlzcGxheWVkQ2FyZEluZGV4ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXG5FeHBsb3JhdGlvbiBJRDogJyArIENvbnRleHRTZXJ2aWNlLmdldEV4cGxvcmF0aW9uSWQoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuVG90YWwgY2FyZHM6ICcgKyBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5nZXROdW1DYXJkcygpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXG5MYXN0IHN0YXRlIG5hbWU6ICcgKyBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5nZXRMYXN0U3RhdGVOYW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICBlLm1lc3NhZ2UgKz0gYWRkaXRpb25hbEluZm87XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldERpc3BsYXllZENhcmRJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZEluZGV4ID0gZGlzcGxheWVkQ2FyZEluZGV4O1xuICAgICAgICAgICAgICAgIGRpc3BsYXllZENhcmRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIGlmIChvbGRJbmRleCAhPT0gZGlzcGxheWVkQ2FyZEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0RGlzcGxheWVkQ2FyZEluZGV4OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpc3BsYXllZENhcmRJbmRleDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWNvcmRBbnN3ZXJTdWJtaXNzaW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbGVhcm5lckp1c3RTdWJtaXR0ZWRBbkFuc3dlciA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVjb3JkTmF2aWdhdGlvbkJ1dHRvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbGVhcm5lckp1c3RTdWJtaXR0ZWRBbkFuc3dlciA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhc0xlYXJuZXJKdXN0U3VibWl0dGVkQW5BbnN3ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVhcm5lckp1c3RTdWJtaXR0ZWRBbkFuc3dlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3IgdGhlIGxlYXJuZXIgdmlldyB0cmFuc2NyaXB0LlxuICovXG5yZXF1aXJlKCdkb21haW4vc3RhdGVfY2FyZC9TdGF0ZUNhcmRPYmplY3RGYWN0b3J5LnRzJyk7XG4vLyBBIHNlcnZpY2UgdGhhdCBtYWludGFpbnMgdGhlIHRyYW5zY3JpcHQgb2YgdGhlIHBsYXl0aHJvdWdoIChpLmUuLCB3aGF0IGNhcmRzXG4vLyBhcmUgc2hvd24sIHdoYXQgYW5zd2VycyBoYXZlIGJlZW4gZ2l2ZW4sIGV0Yy4gTm90ZSB0aGF0IHRoaXMgc2VydmljZSBkb2VzXG4vLyBub3QgbWFpbnRhaW4gdGhlIGN1cnJlbnRseS1hY3RpdmUgY2FyZCAtLSBpdCdzIG1vcmUgbGlrZSBhIGxvZyBvZiB3aGF0IHRoZVxuLy8gbGVhcm5lciBoYXMgJ2Rpc2NvdmVyZWQnIHNvIGZhci5cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1BsYXllclRyYW5zY3JpcHRTZXJ2aWNlJywgW1xuICAgICckbG9nJywgZnVuY3Rpb24gKCRsb2cpIHtcbiAgICAgICAgLy8gRWFjaCBlbGVtZW50IG9mIHRoaXMgYXJyYXkgcmVwcmVzZW50cyBhICdTdGF0ZUNhcmQnIGRvbWFpbiBvYmplY3QuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIE5vdGUgdGhhdCBldmVyeSBjYXJkIGluIHRoaXMgdHJhbnNjcmlwdCBpcyB2aXNpYmxlIG9uIHRoZSBzY3JlZW4uIFRoZVxuICAgICAgICAvLyAnY2FyZC5nZXREZXN0U3RhdGVOYW1lKCknIGZpZWxkIGlzIGludGVuZGVkIHRvIGlkZW50aWZ5IHRyYW5zY3JpcHRzIHdoZXJlXG4gICAgICAgIC8vIHRoZXJlIGlzIGEgY2FyZCAnaW4gcmVzZXJ2ZScsIGJ1dCB0aGUgbGVhcm5lciBoYXMgbm90IHlldCBuYXZpZ2F0ZWQgdG8gaXRcbiAgICAgICAgLy8gLS0gdGhpcyBoYXBwZW5zIGlmIHRoZSBjdXJyZW50IGNhcmQgb2ZmZXJzIGZlZWRiYWNrIHRvIHRoZSBsZWFybmVyIGJlZm9yZVxuICAgICAgICAvLyB0aGV5IGNhcnJ5IG9uLlxuICAgICAgICB2YXIgdHJhbnNjcmlwdCA9IFtdO1xuICAgICAgICB2YXIgbnVtQW5zd2Vyc1N1Ym1pdHRlZCA9IDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0b3JlOiBmdW5jdGlvbiAob2xkVHJhbnNjcmlwdCkge1xuICAgICAgICAgICAgICAgIHRyYW5zY3JpcHQgPSBhbmd1bGFyLmNvcHkob2xkVHJhbnNjcmlwdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyYW5zY3JpcHQgPSBbXTtcbiAgICAgICAgICAgICAgICBudW1BbnN3ZXJzU3VibWl0dGVkID0gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNFbmNvdW50ZXJlZFN0YXRlQmVmb3JlOiBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zY3JpcHQuc29tZShmdW5jdGlvbiAodHJhbnNjcmlwdEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zY3JpcHRJdGVtLmdldFN0YXRlTmFtZSgpID09PSBzdGF0ZU5hbWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWRkTmV3Q2FyZDogZnVuY3Rpb24gKG5ld0NhcmQpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2NyaXB0LnB1c2gobmV3Q2FyZCk7XG4gICAgICAgICAgICAgICAgbnVtQW5zd2Vyc1N1Ym1pdHRlZCA9IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWRkUHJldmlvdXNDYXJkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zY3JpcHQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdFeHBsb3JhdGlvbiBwbGF5ZXIgaXMgb24gdGhlIGZpcnN0IGNhcmQgYW5kIGhlbmNlIG5vIHByZXZpb3VzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcmQgZXhpc3RzLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUT0RPKGFrczY4MSk6IE9uY2Ugd29ya2VkIGV4YW1wbGVzIGFyZSBpbnRyb2R1Y2VkLCBtb2RpZnkgdGhlIGJlbG93XG4gICAgICAgICAgICAgICAgLy8gbGluZSB0byB0YWtlIGludG8gYWNjb3VudCB0aGUgbnVtYmVyIG9mIHdvcmtlZCBleGFtcGxlcyBkaXNwbGF5ZWQuXG4gICAgICAgICAgICAgICAgdmFyIGNvcHlPZlByZXZpb3VzQ2FyZCA9IGFuZ3VsYXIuY29weSh0cmFuc2NyaXB0W3RyYW5zY3JpcHQubGVuZ3RoIC0gMl0pO1xuICAgICAgICAgICAgICAgIGNvcHlPZlByZXZpb3VzQ2FyZC5tYXJrQXNOb3RDb21wbGV0ZWQoKTtcbiAgICAgICAgICAgICAgICB0cmFuc2NyaXB0LnB1c2goY29weU9mUHJldmlvdXNDYXJkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZGROZXdJbnB1dDogZnVuY3Rpb24gKGlucHV0LCBpc0hpbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FyZCA9IHRoaXMuZ2V0TGFzdENhcmQoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFpcnMgPSBjYXJkLmdldElucHV0UmVzcG9uc2VQYWlycygpO1xuICAgICAgICAgICAgICAgIGlmIChwYWlycy5sZW5ndGggPiAwICYmIGNhcmQuZ2V0TGFzdE9wcGlhUmVzcG9uc2UoKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignVHJ5aW5nIHRvIGFkZCBhbiBpbnB1dCBiZWZvcmUgdGhlIHJlc3BvbnNlIGZvciB0aGUgcHJldmlvdXMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnaW5wdXQgaGFzIGJlZW4gcmVjZWl2ZWQuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNIaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIG51bUFuc3dlcnNTdWJtaXR0ZWQgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJhbnNjcmlwdFt0cmFuc2NyaXB0Lmxlbmd0aCAtIDFdLmFkZElucHV0UmVzcG9uc2VQYWlyKHtcbiAgICAgICAgICAgICAgICAgICAgbGVhcm5lcklucHV0OiBpbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgb3BwaWFSZXNwb25zZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgaXNIaW50OiBpc0hpbnRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZGROZXdSZXNwb25zZTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhcmQgPSB0aGlzLmdldExhc3RDYXJkKCk7XG4gICAgICAgICAgICAgICAgY2FyZC5zZXRMYXN0T3BwaWFSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TnVtQ2FyZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNjcmlwdC5sZW5ndGg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2FyZDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0cmFuc2NyaXB0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAkbG9nLmVycm9yKCdSZXF1ZXN0ZWQgY2FyZCB3aXRoIGluZGV4ICcgKyBpbmRleCArXG4gICAgICAgICAgICAgICAgICAgICAgICAnLCBidXQgdHJhbnNjcmlwdCBvbmx5IGhhcyBsZW5ndGggJyArXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NyaXB0Lmxlbmd0aCArICcgY2FyZHMuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2NyaXB0W2luZGV4XTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRMYXN0QW5zd2VyT25EaXNwbGF5ZWRDYXJkOiBmdW5jdGlvbiAoZGlzcGxheWVkQ2FyZEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNMYXN0Q2FyZChkaXNwbGF5ZWRDYXJkSW5kZXgpIHx8XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zY3JpcHRbZGlzcGxheWVkQ2FyZEluZGV4XS5nZXRTdGF0ZU5hbWUoKSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2NyaXB0W2Rpc3BsYXllZENhcmRJbmRleF0uZ2V0SW5wdXRSZXNwb25zZVBhaXJzKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zY3JpcHRbZGlzcGxheWVkQ2FyZEluZGV4XS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGdldElucHV0UmVzcG9uc2VQYWlycygpLnNsaWNlKC0xKVswXS5sZWFybmVySW5wdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzTGFzdENhcmQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gdHJhbnNjcmlwdC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldExhc3RDYXJkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FyZCh0cmFuc2NyaXB0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE51bVN1Ym1pdHNGb3JMYXN0Q2FyZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1BbnN3ZXJzU3VibWl0dGVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVwZGF0ZUxhdGVzdEludGVyYWN0aW9uSHRtbDogZnVuY3Rpb24gKG5ld0ludGVyYWN0aW9uSHRtbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0TGFzdENhcmQoKS5zZXRJbnRlcmFjdGlvbkh0bWwobmV3SW50ZXJhY3Rpb25IdG1sKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRMYXN0U3RhdGVOYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGFzdENhcmQoKS5nZXRTdGF0ZU5hbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE1IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3IgbWFwcGluZyBhbGdvcml0aG1JZCB0byBQcmVkaWN0aW9uQWxnb3JpdGhtU2VydmljZS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnUHJlZGljdGlvbkFsZ29yaXRobVJlZ2lzdHJ5U2VydmljZScsIFtcbiAgICAnJGluamVjdG9yJywgZnVuY3Rpb24gKCRpbmplY3Rvcikge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBtYXBwaW5nIG5lZWRzIHRvIGJlIHVwZGF0ZWQgd2hlbmV2ZXIgYSBuZXcgcHJlZGljdGlvbiBzZXJ2aWNlIG5lZWRzXG4gICAgICAgICAqIHRvIGJlIGFkZGVkIGZvciBjbGFzc2lmaWNhdGlvbi4gVGhlIG1hcHBpbmcgaXMgZnJvbSBhbGdvcml0aG1JZCB0byBhXG4gICAgICAgICAqIGxpc3Qgb2Ygb2JqZWN0cy4gVGhlIG1hcHBpbmcgc2hvdWxkIGJlIG9mIHRoZSB0eXBlOlxuICAgICAgICAgKiB7XG4gICAgICAgICAqICAgYWxnb3JpdGhtSWQ6IHtcbiAgICAgICAgICogICAgIGRhdGFTY2hlbWFWZXJzaW9uOiBwcmVkaWN0aW9uU2VydmljZVxuICAgICAgICAgKiAgIH1cbiAgICAgICAgICogfVxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGFsZ29yaXRobUlkUHJlZGljdGlvblNlcnZpY2VNYXBwaW5nID0ge1xuICAgICAgICAgICAgQ29kZUNsYXNzaWZpZXI6IHtcbiAgICAgICAgICAgICAgICB2MTogJ0NvZGVSZXBsUHJlZGljdGlvblNlcnZpY2UnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgVGV4dENsYXNzaWZpZXI6IHtcbiAgICAgICAgICAgICAgICB2MTogJ1RleHRJbnB1dFByZWRpY3Rpb25TZXJ2aWNlJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0UHJlZGljdGlvblNlcnZpY2U6IGZ1bmN0aW9uIChhbGdvcml0aG1JZCwgZGF0YVNjaGVtYVZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoYWxnb3JpdGhtSWRQcmVkaWN0aW9uU2VydmljZU1hcHBpbmcuaGFzT3duUHJvcGVydHkoYWxnb3JpdGhtSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGNvbnZlcnQgZGF0YVNjaGVtYVZlcnNpb24gdG8gYSBzdHJpbmcgYmVsb3cgc2luY2UgSlMgb2JqZWN0c1xuICAgICAgICAgICAgICAgICAgICAvLyBjYW4ndCBoYXZlIGludGVnZXIgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZpY2VOYW1lID0gKGFsZ29yaXRobUlkUHJlZGljdGlvblNlcnZpY2VNYXBwaW5nW2FsZ29yaXRobUlkXVsndicgKyBkYXRhU2NoZW1hVmVyc2lvbi50b1N0cmluZygpXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkaW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBUaGUgYmVsb3cgZnVuY3Rpb24gaXMgcmVxdWlyZWQgZm9yIHJ1bm5pbmcgdGVzdHMgd2l0aCBzYW1wbGVcbiAgICAgICAgICAgIC8vIHByZWRpY3Rpb24gc2VydmljZXMuXG4gICAgICAgICAgICBzZXRNYXBwaW5nOiBmdW5jdGlvbiAobmV3QWxnb3JpdGhtSWRQcmVkaWN0aW9uU2VydmljZU1hcHBpbmcpIHtcbiAgICAgICAgICAgICAgICBhbGdvcml0aG1JZFByZWRpY3Rpb25TZXJ2aWNlTWFwcGluZyA9IChuZXdBbGdvcml0aG1JZFByZWRpY3Rpb25TZXJ2aWNlTWFwcGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFV0aWxpdHkgc2VydmljZSBmb3IgdGhlIHF1ZXN0aW9uIHBsYXllciBmb3IgYW4gZXhwbG9yYXRpb24uXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi9leHBsb3JhdGlvbi9SZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9xdWVzdGlvbi9RdWVzdGlvbk9iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi9zdGF0ZV9jYXJkL1N0YXRlQ2FyZE9iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2V4cHJlc3Npb25zL0V4cHJlc3Npb25JbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvYW5zd2VyLWNsYXNzaWZpY2F0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0FsZXJ0c1NlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0NvbnRleHRTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9jb250ZXh0dWFsL1VybFNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0V4cGxvcmF0aW9uSHRtbEZvcm1hdHRlclNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL3N0YXRlZnVsL0ZvY3VzTWFuYWdlclNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlLmNvbnN0YW50cy5hanMudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2ludGVyYWN0aW9uLXNwZWNzLmNvbnN0YW50cy5hanMudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1F1ZXN0aW9uUGxheWVyRW5naW5lU2VydmljZScsIFtcbiAgICAnQWxlcnRzU2VydmljZScsICdBbnN3ZXJDbGFzc2lmaWNhdGlvblNlcnZpY2UnLFxuICAgICdDb250ZXh0U2VydmljZScsICdFeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlJyxcbiAgICAnRXhwcmVzc2lvbkludGVycG9sYXRpb25TZXJ2aWNlJywgJ0ZvY3VzTWFuYWdlclNlcnZpY2UnLFxuICAgICdRdWVzdGlvbk9iamVjdEZhY3RvcnknLCAnUmVhZE9ubHlFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlJyxcbiAgICAnU3RhdGVDYXJkT2JqZWN0RmFjdG9yeScsICdVcmxTZXJ2aWNlJywgJ0lOVEVSQUNUSU9OX0RJU1BMQVlfTU9ERV9JTkxJTkUnLFxuICAgICdJTlRFUkFDVElPTl9TUEVDUycsXG4gICAgZnVuY3Rpb24gKEFsZXJ0c1NlcnZpY2UsIEFuc3dlckNsYXNzaWZpY2F0aW9uU2VydmljZSwgQ29udGV4dFNlcnZpY2UsIEV4cGxvcmF0aW9uSHRtbEZvcm1hdHRlclNlcnZpY2UsIEV4cHJlc3Npb25JbnRlcnBvbGF0aW9uU2VydmljZSwgRm9jdXNNYW5hZ2VyU2VydmljZSwgUXVlc3Rpb25PYmplY3RGYWN0b3J5LCBSZWFkT25seUV4cGxvcmF0aW9uQmFja2VuZEFwaVNlcnZpY2UsIFN0YXRlQ2FyZE9iamVjdEZhY3RvcnksIFVybFNlcnZpY2UsIElOVEVSQUNUSU9OX0RJU1BMQVlfTU9ERV9JTkxJTkUsIElOVEVSQUNUSU9OX1NQRUNTKSB7XG4gICAgICAgIHZhciBfZXhwbG9yYXRpb25JZCA9IENvbnRleHRTZXJ2aWNlLmdldEV4cGxvcmF0aW9uSWQoKTtcbiAgICAgICAgdmFyIF9xdWVzdGlvblBsYXllck1vZGUgPSBDb250ZXh0U2VydmljZS5pc0luUXVlc3Rpb25QbGF5ZXJNb2RlKCk7XG4gICAgICAgIHZhciB2ZXJzaW9uID0gVXJsU2VydmljZS5nZXRFeHBsb3JhdGlvblZlcnNpb25Gcm9tVXJsKCk7XG4gICAgICAgIGlmICghX3F1ZXN0aW9uUGxheWVyTW9kZSkge1xuICAgICAgICAgICAgUmVhZE9ubHlFeHBsb3JhdGlvbkJhY2tlbmRBcGlTZXJ2aWNlXG4gICAgICAgICAgICAgICAgLmxvYWRFeHBsb3JhdGlvbihfZXhwbG9yYXRpb25JZCwgdmVyc2lvbilcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZXhwbG9yYXRpb24pIHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gZXhwbG9yYXRpb24udmVyc2lvbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbnN3ZXJJc0JlaW5nUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgICAgIHZhciBxdWVzdGlvbnMgPSBbXTtcbiAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IG51bGw7XG4gICAgICAgIHZhciBuZXh0SW5kZXggPSBudWxsO1xuICAgICAgICB2YXIgcmFuZG9tRnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycikge1xuICAgICAgICAgICAgcmV0dXJuIGFycltNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnIubGVuZ3RoKV07XG4gICAgICAgIH07XG4gICAgICAgIC8vIEV2YWx1YXRlIGZlZWRiYWNrLlxuICAgICAgICB2YXIgbWFrZUZlZWRiYWNrID0gZnVuY3Rpb24gKGZlZWRiYWNrSHRtbCwgZW52cykge1xuICAgICAgICAgICAgcmV0dXJuIEV4cHJlc3Npb25JbnRlcnBvbGF0aW9uU2VydmljZS5wcm9jZXNzSHRtbChmZWVkYmFja0h0bWwsIGVudnMpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBFdmFsdWF0ZSBxdWVzdGlvbiBzdHJpbmcuXG4gICAgICAgIHZhciBtYWtlUXVlc3Rpb24gPSBmdW5jdGlvbiAobmV3U3RhdGUsIGVudnMpIHtcbiAgICAgICAgICAgIHJldHVybiBFeHByZXNzaW9uSW50ZXJwb2xhdGlvblNlcnZpY2UucHJvY2Vzc0h0bWwobmV3U3RhdGUuY29udGVudC5nZXRIdG1sKCksIGVudnMpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2dldFJhbmRvbVN1ZmZpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXaGVuIGEgcmVmcmVzaCB0byBhICRzY29wZSB2YXJpYWJsZVxuICAgICAgICAgICAgLy8gaGFwcGVucyxcbiAgICAgICAgICAgIC8vIEFuZ3VsYXJKUyBjb21wYXJlcyB0aGUgbmV3IHZhbHVlIG9mIHRoZSB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXNcbiAgICAgICAgICAgIC8vIHZhbHVlLiBJZiB0aGV5IGFyZSB0aGUgc2FtZSwgdGhlbiB0aGUgdmFyaWFibGUgaXMgbm90IHVwZGF0ZWQuXG4gICAgICAgICAgICAvLyBBcHBlbmRpbmcgYSByYW5kb20gc3VmZml4IG1ha2VzIHRoZSBuZXcgdmFsdWUgZGlmZmVyZW50IGZyb20gdGhlXG4gICAgICAgICAgICAvLyBwcmV2aW91cyBvbmUsIGFuZCB0aHVzIGluZGlyZWN0bHkgZm9yY2VzIGEgcmVmcmVzaC5cbiAgICAgICAgICAgIHZhciByYW5kb21TdWZmaXggPSAnJztcbiAgICAgICAgICAgIHZhciBOID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgICAgICAgICAgIHJhbmRvbVN1ZmZpeCArPSAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmFuZG9tU3VmZml4O1xuICAgICAgICB9O1xuICAgICAgICAvLyBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuICdleHBsb3JhdGlvbicgaXMgbm9uLW51bGwuXG4gICAgICAgIHZhciBfbG9hZEluaXRpYWxRdWVzdGlvbiA9IGZ1bmN0aW9uIChzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBpbml0aWFsU3RhdGUgPSBxdWVzdGlvbnNbMF0uZ2V0U3RhdGVEYXRhKCk7XG4gICAgICAgICAgICB2YXIgcXVlc3Rpb25IdG1sID0gbWFrZVF1ZXN0aW9uKGluaXRpYWxTdGF0ZSwgW10pO1xuICAgICAgICAgICAgaWYgKHF1ZXN0aW9uSHRtbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuYWRkV2FybmluZygnRXhwcmVzc2lvbiBwYXJzaW5nIGVycm9yLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IDA7XG4gICAgICAgICAgICBuZXh0SW5kZXggPSAwO1xuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uID0gaW5pdGlhbFN0YXRlLmludGVyYWN0aW9uO1xuICAgICAgICAgICAgdmFyIG5leHRGb2N1c0xhYmVsID0gRm9jdXNNYW5hZ2VyU2VydmljZS5nZW5lcmF0ZUZvY3VzTGFiZWwoKTtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbklkID0gaW50ZXJhY3Rpb24uaWQ7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25IdG1sID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25IdG1sID0gRXhwbG9yYXRpb25IdG1sRm9ybWF0dGVyU2VydmljZS5nZXRJbnRlcmFjdGlvbkh0bWwoaW50ZXJhY3Rpb25JZCwgaW50ZXJhY3Rpb24uY3VzdG9taXphdGlvbkFyZ3MsIHRydWUsIG5leHRGb2N1c0xhYmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbml0aWFsQ2FyZCA9IFN0YXRlQ2FyZE9iamVjdEZhY3RvcnkuY3JlYXRlTmV3Q2FyZChudWxsLCBxdWVzdGlvbkh0bWwsIGludGVyYWN0aW9uSHRtbCwgaW50ZXJhY3Rpb24sIGluaXRpYWxTdGF0ZS5yZWNvcmRlZFZvaWNlb3ZlcnMsIGluaXRpYWxTdGF0ZS5jb250ZW50LmdldENvbnRlbnRJZCgpKTtcbiAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhpbml0aWFsQ2FyZCwgbmV4dEZvY3VzTGFiZWwpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2dldEN1cnJlbnRTdGF0ZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcXVlc3Rpb25zW2N1cnJlbnRJbmRleF0uZ2V0U3RhdGVEYXRhKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfZ2V0TmV4dFN0YXRlRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBxdWVzdGlvbnNbbmV4dEluZGV4XS5nZXRTdGF0ZURhdGEoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF9nZXROZXh0SW50ZXJhY3Rpb25IdG1sID0gZnVuY3Rpb24gKGxhYmVsRm9yRm9jdXNUYXJnZXQpIHtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbklkID0gX2dldE5leHRTdGF0ZURhdGEoKS5pbnRlcmFjdGlvbi5pZDtcbiAgICAgICAgICAgIHJldHVybiBFeHBsb3JhdGlvbkh0bWxGb3JtYXR0ZXJTZXJ2aWNlLmdldEludGVyYWN0aW9uSHRtbChpbnRlcmFjdGlvbklkLCBfZ2V0TmV4dFN0YXRlRGF0YSgpLmludGVyYWN0aW9uLmN1c3RvbWl6YXRpb25BcmdzLCB0cnVlLCBsYWJlbEZvckZvY3VzVGFyZ2V0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW5pdGlhbGl6ZXMgdGhlIHF1ZXN0aW9uIHBsYXllciBmb3IgYW4gZXhwbG9yYXRpb24sXG4gICAgICAgICAgICAgKiBwYXNzaW5nIHRoZSBkYXRhIGZvciB0aGUgZmlyc3QgcXVlc3Rpb24gdG8gc3VjY2Vzc0NhbGxiYWNrLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWNjZXNzQ2FsbGJhY2sgLSBUaGUgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhZnRlciB0aGVcbiAgICAgICAgICAgICAqICAgcXVlc3Rpb24gZGF0YSBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkLiBUaGlzIGZ1bmN0aW9uIHdpbGxcbiAgICAgICAgICAgICAqICAgYmUgcGFzc2VkIHR3byBhcmd1bWVudHM6XG4gICAgICAgICAgICAgKiAgIC0gaW5pdEh0bWwge3N0cmluZ30sIGFuIEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29udGVudCBvZiB0aGVcbiAgICAgICAgICAgICAqICAgICAgIGZpcnN0IHN0YXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAocXVlc3Rpb25EaWN0cywgc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgYW5zd2VySXNCZWluZ1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVlc3Rpb25EaWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbnMucHVzaChRdWVzdGlvbk9iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KHF1ZXN0aW9uRGljdHNbaV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX2xvYWRJbml0aWFsUXVlc3Rpb24oc3VjY2Vzc0NhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWNvcmROZXdDYXJkQWRkZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q3VycmVudFF1ZXN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXN0aW9uc1tjdXJyZW50SW5kZXhdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEN1cnJlbnRRdWVzdGlvbklkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXN0aW9uc1tjdXJyZW50SW5kZXhdLmdldElkKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UXVlc3Rpb25Db3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBxdWVzdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEV4cGxvcmF0aW9uSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2V4cGxvcmF0aW9uSWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0RXhwbG9yYXRpb25WZXJzaW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TGFuZ3VhZ2VDb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXN0aW9uc1tjdXJyZW50SW5kZXhdLmdldExhbmd1YWdlQ29kZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzSW5QcmV2aWV3TW9kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWJtaXRBbnN3ZXI6IGZ1bmN0aW9uIChhbnN3ZXIsIGludGVyYWN0aW9uUnVsZXNTZXJ2aWNlLCBzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5zd2VySXNCZWluZ1Byb2Nlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFuc3dlcklzQmVpbmdQcm9jZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBvbGRJbmRleCA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICB2YXIgb2xkU3RhdGUgPSBfZ2V0Q3VycmVudFN0YXRlRGF0YSgpO1xuICAgICAgICAgICAgICAgIHZhciByZWNvcmRlZFZvaWNlb3ZlcnMgPSBvbGRTdGF0ZS5yZWNvcmRlZFZvaWNlb3ZlcnM7XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzaWZpY2F0aW9uUmVzdWx0ID0gKEFuc3dlckNsYXNzaWZpY2F0aW9uU2VydmljZS5nZXRNYXRjaGluZ0NsYXNzaWZpY2F0aW9uUmVzdWx0KG51bGwsIG9sZFN0YXRlLmludGVyYWN0aW9uLCBhbnN3ZXIsIGludGVyYWN0aW9uUnVsZXNTZXJ2aWNlKSk7XG4gICAgICAgICAgICAgICAgdmFyIGFuc3dlcklzQ29ycmVjdCA9IGNsYXNzaWZpY2F0aW9uUmVzdWx0Lm91dGNvbWUubGFiZWxsZWRBc0NvcnJlY3Q7XG4gICAgICAgICAgICAgICAgdmFyIHRhZ2dlZFNraWxsTWlzY29uY2VwdGlvbklkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAob2xkU3RhdGUuaW50ZXJhY3Rpb24uYW5zd2VyR3JvdXBzW2Fuc3dlcl0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGFnZ2VkU2tpbGxNaXNjb25jZXB0aW9uSWQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkU3RhdGUuaW50ZXJhY3Rpb24uYW5zd2VyR3JvdXBzW2Fuc3dlcl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGFnZ2VkU2tpbGxNaXNjb25jZXB0aW9uSWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFVzZSBhbmd1bGFyLmNvcHkoKSB0byBjbG9uZSB0aGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgLy8gc2luY2UgY2xhc3NpZmljYXRpb25SZXN1bHQub3V0Y29tZSBwb2ludHNcbiAgICAgICAgICAgICAgICAvLyBhdCBvbGRTdGF0ZS5pbnRlcmFjdGlvbi5kZWZhdWx0X291dGNvbWVcbiAgICAgICAgICAgICAgICB2YXIgb3V0Y29tZSA9IGFuZ3VsYXIuY29weShjbGFzc2lmaWNhdGlvblJlc3VsdC5vdXRjb21lKTtcbiAgICAgICAgICAgICAgICAvLyBDb21wdXRlIHRoZSBkYXRhIGZvciB0aGUgbmV4dCBzdGF0ZS5cbiAgICAgICAgICAgICAgICB2YXIgb2xkUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IGFuc3dlclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIGZlZWRiYWNrSHRtbCA9IG1ha2VGZWVkYmFjayhvdXRjb21lLmZlZWRiYWNrLmdldEh0bWwoKSwgW29sZFBhcmFtc10pO1xuICAgICAgICAgICAgICAgIHZhciBmZWVkYmFja0NvbnRlbnRJZCA9IG91dGNvbWUuZmVlZGJhY2suZ2V0Q29udGVudElkKCk7XG4gICAgICAgICAgICAgICAgdmFyIGZlZWRiYWNrQXVkaW9UcmFuc2xhdGlvbnMgPSAocmVjb3JkZWRWb2ljZW92ZXJzLmdldEJpbmRhYmxlVm9pY2VvdmVycyhmZWVkYmFja0NvbnRlbnRJZCkpO1xuICAgICAgICAgICAgICAgIGlmIChmZWVkYmFja0h0bWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VySXNCZWluZ1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmFkZFdhcm5pbmcoJ0V4cHJlc3Npb24gcGFyc2luZyBlcnJvci4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbmV3U3RhdGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChhbnN3ZXJJc0NvcnJlY3QgJiYgKGN1cnJlbnRJbmRleCA8IHF1ZXN0aW9ucy5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHF1ZXN0aW9uc1tjdXJyZW50SW5kZXggKyAxXS5nZXRTdGF0ZURhdGEoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlID0gb2xkU3RhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvbkh0bWwgPSBtYWtlUXVlc3Rpb24obmV3U3RhdGUsIFtvbGRQYXJhbXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogJ2Fuc3dlcidcbiAgICAgICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbkh0bWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VySXNCZWluZ1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmFkZFdhcm5pbmcoJ0V4cHJlc3Npb24gcGFyc2luZyBlcnJvci4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhbnN3ZXJJc0JlaW5nUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uSWQgPSBvbGRTdGF0ZS5pbnRlcmFjdGlvbi5pZDtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25Jc0lubGluZSA9ICghaW50ZXJhY3Rpb25JZCB8fFxuICAgICAgICAgICAgICAgICAgICBJTlRFUkFDVElPTl9TUEVDU1tpbnRlcmFjdGlvbklkXS5kaXNwbGF5X21vZGUgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBJTlRFUkFDVElPTl9ESVNQTEFZX01PREVfSU5MSU5FKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaEludGVyYWN0aW9uID0gKGFuc3dlcklzQ29ycmVjdCB8fCBpbnRlcmFjdGlvbklzSW5saW5lKTtcbiAgICAgICAgICAgICAgICBuZXh0SW5kZXggPSBjdXJyZW50SW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIHZhciBpc0ZpbmFsUXVlc3Rpb24gPSAobmV4dEluZGV4ID09PSBxdWVzdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB2YXIgb25TYW1lQ2FyZCA9ICFhbnN3ZXJJc0NvcnJlY3Q7XG4gICAgICAgICAgICAgICAgdmFyIF9uZXh0Rm9jdXNMYWJlbCA9IEZvY3VzTWFuYWdlclNlcnZpY2UuZ2VuZXJhdGVGb2N1c0xhYmVsKCk7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRDYXJkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoIWlzRmluYWxRdWVzdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dEludGVyYWN0aW9uSHRtbCA9IF9nZXROZXh0SW50ZXJhY3Rpb25IdG1sKF9uZXh0Rm9jdXNMYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uSHRtbCA9IHF1ZXN0aW9uSHRtbCArIF9nZXRSYW5kb21TdWZmaXgoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dEludGVyYWN0aW9uSHRtbCA9IG5leHRJbnRlcmFjdGlvbkh0bWwgKyBfZ2V0UmFuZG9tU3VmZml4KCk7XG4gICAgICAgICAgICAgICAgICAgIG5leHRDYXJkID0gU3RhdGVDYXJkT2JqZWN0RmFjdG9yeS5jcmVhdGVOZXdDYXJkKHRydWUsIHF1ZXN0aW9uSHRtbCwgbmV4dEludGVyYWN0aW9uSHRtbCwgX2dldE5leHRTdGF0ZURhdGEoKS5pbnRlcmFjdGlvbiwgX2dldE5leHRTdGF0ZURhdGEoKS5yZWNvcmRlZFZvaWNlb3ZlcnMsIF9nZXROZXh0U3RhdGVEYXRhKCkuY29udGVudC5nZXRDb250ZW50SWQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhuZXh0Q2FyZCwgcmVmcmVzaEludGVyYWN0aW9uLCBmZWVkYmFja0h0bWwsIGZlZWRiYWNrQXVkaW9UcmFuc2xhdGlvbnMsIG51bGwsIG51bGwsIG9uU2FtZUNhcmQsIHRhZ2dlZFNraWxsTWlzY29uY2VwdGlvbklkLCBudWxsLCBudWxsLCBpc0ZpbmFsUXVlc3Rpb24sIF9uZXh0Rm9jdXNMYWJlbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlcklzQ29ycmVjdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0Fuc3dlckJlaW5nUHJvY2Vzc2VkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlcklzQmVpbmdQcm9jZXNzZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNlcnZpY2UgZm9yIG1hbmFnaW5nIHRoZSByZWRpcmVjdGlvbiB0byBhIHJlZnJlc2hlclxuICogZXhwbG9yYXRpb24uXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2V4cGxvcmF0aW9uLWVuZ2luZS5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9jb250ZXh0dWFsL1VybFNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1JlZnJlc2hlckV4cGxvcmF0aW9uQ29uZmlybWF0aW9uTW9kYWxTZXJ2aWNlJywgW1xuICAgICckdWliTW9kYWwnLCAnRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlJywgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICAnVXJsU2VydmljZScsXG4gICAgZnVuY3Rpb24gKCR1aWJNb2RhbCwgRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSwgVXJsU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcGxheVJlZGlyZWN0Q29uZmlybWF0aW9uTW9kYWw6IGZ1bmN0aW9uIChyZWZyZXNoZXJFeHBsb3JhdGlvbklkLCByZWRpcmVjdENvbmZpcm1hdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS90ZW1wbGF0ZXMvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAncmVmcmVzaGVyLWV4cGxvcmF0aW9uLWNvbmZpcm1hdGlvbi1tb2RhbC50ZW1wbGF0ZS5odG1sJyksXG4gICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsICckd2luZG93JywgJyR0aW1lb3V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlLCAkd2luZG93LCAkdGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb25maXJtUmVkaXJlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0Q29uZmlybWF0aW9uQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9IFVybFNlcnZpY2UuZ2V0VXJsUGFyYW1zKCkuY29sbGVjdGlvbl9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudElkTGlzdCA9IFVybFNlcnZpY2UuZ2V0UXVlcnlGaWVsZFZhbHVlc0FzTGlzdCgncGFyZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBFWFBMT1JBVElPTl9VUkxfVEVNUExBVEUgPSAnL2V4cGxvcmUvPGV4cGxvcmF0aW9uX2lkPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5pbnRlcnBvbGF0ZVVybChFWFBMT1JBVElPTl9VUkxfVEVNUExBVEUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uX2lkOiByZWZyZXNoZXJFeHBsb3JhdGlvbklkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBVcmxTZXJ2aWNlLmFkZEZpZWxkKHVybCwgJ2NvbGxlY3Rpb25faWQnLCBjb2xsZWN0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50SWRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBVcmxTZXJ2aWNlLmFkZEZpZWxkKHVybCwgJ3BhcmVudCcsIHBhcmVudElkTGlzdFtpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gVXJsU2VydmljZS5hZGRGaWVsZCh1cmwsICdwYXJlbnQnLCBFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2UuZ2V0RXhwbG9yYXRpb25JZCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2FpdCBhIGxpdHRsZSBiZWZvcmUgcmVkaXJlY3RpbmcgdGhlIHBhZ2UgdG8gZW5zdXJlIG90aGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhc2tzIHN0YXJ0ZWQgaGVyZSAoZS5nLiBldmVudCByZWNvcmRpbmcpIGhhdmUgc3VmZmljaWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW1lIHRvIGNvbXBsZXRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKGJoZW5uaW5nKTogRmluZCBhIHJlbGlhYmxlIHdheSB0byBzZW5kIGV2ZW50cyB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IGdldCBpbnRlcnJ1cHRlZCB3aXRoIGJyb3dzZXIgcmVkaXJlY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cub3Blbih1cmwsICdfc2VsZicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxNTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDbG9zZSB0aGUgZGlhbG9nIHRvIGVuc3VyZSB0aGUgY29uZmlybWF0aW9uIGNhbm5vdCBiZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsZWQgbXVsdGlwbGUgdGltZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsUmVkaXJlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNlcnZpY2VzIGZvciBtYXBwaW5nIHN0YXRlIG5hbWVzIHRvIGNsYXNzaWZpZXIgZGV0YWlscy5cbiAqL1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIENsYXNzaWZpZXJPYmplY3RGYWN0b3J5XzEgPSByZXF1aXJlKFwiZG9tYWluL2NsYXNzaWZpZXIvQ2xhc3NpZmllck9iamVjdEZhY3RvcnlcIik7XG52YXIgU3RhdGVDbGFzc2lmaWVyTWFwcGluZ1NlcnZpY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RhdGVDbGFzc2lmaWVyTWFwcGluZ1NlcnZpY2UoY2xhc3NpZmllck9iamVjdEZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5jbGFzc2lmaWVyT2JqZWN0RmFjdG9yeSA9IGNsYXNzaWZpZXJPYmplY3RGYWN0b3J5O1xuICAgICAgICB0aGlzLnN0YXRlQ2xhc3NpZmllck1hcHBpbmcgPSBudWxsO1xuICAgIH1cbiAgICAvLyBUT0RPKCM3MTc2KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlICdiYWNrZW5kU3RhdGVDbGFzc2lmaWVyTWFwcGluZycgaXMgYSBkaWN0IHdpdGhcbiAgICAvLyB1bmRlcnNjb3JlX2Nhc2VkIGtleXMgd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmcgaW5cbiAgICAvLyBmYXZvciBvZiBjYW1lbENhc2luZy5cbiAgICBTdGF0ZUNsYXNzaWZpZXJNYXBwaW5nU2VydmljZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChiYWNrZW5kU3RhdGVDbGFzc2lmaWVyTWFwcGluZykge1xuICAgICAgICB0aGlzLnN0YXRlQ2xhc3NpZmllck1hcHBpbmcgPSB7fTtcbiAgICAgICAgdmFyIGFsZ29yaXRobUlkLCBjbGFzc2lmaWVyRGF0YSwgZGF0YVNjaGVtYVZlcnNpb247XG4gICAgICAgIGZvciAodmFyIHN0YXRlTmFtZSBpbiBiYWNrZW5kU3RhdGVDbGFzc2lmaWVyTWFwcGluZykge1xuICAgICAgICAgICAgaWYgKGJhY2tlbmRTdGF0ZUNsYXNzaWZpZXJNYXBwaW5nLmhhc093blByb3BlcnR5KHN0YXRlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBhbGdvcml0aG1JZCA9IGJhY2tlbmRTdGF0ZUNsYXNzaWZpZXJNYXBwaW5nW3N0YXRlTmFtZV0uYWxnb3JpdGhtX2lkO1xuICAgICAgICAgICAgICAgIGNsYXNzaWZpZXJEYXRhID0gYmFja2VuZFN0YXRlQ2xhc3NpZmllck1hcHBpbmdbc3RhdGVOYW1lXS5jbGFzc2lmaWVyX2RhdGE7XG4gICAgICAgICAgICAgICAgZGF0YVNjaGVtYVZlcnNpb24gPSBiYWNrZW5kU3RhdGVDbGFzc2lmaWVyTWFwcGluZ1tzdGF0ZU5hbWVdLmRhdGFfc2NoZW1hX3ZlcnNpb247XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUNsYXNzaWZpZXJNYXBwaW5nW3N0YXRlTmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzaWZpZXJPYmplY3RGYWN0b3J5LmNyZWF0ZShhbGdvcml0aG1JZCwgY2xhc3NpZmllckRhdGEsIGRhdGFTY2hlbWFWZXJzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3RhdGVDbGFzc2lmaWVyTWFwcGluZ1NlcnZpY2UucHJvdG90eXBlLmdldENsYXNzaWZpZXIgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlQ2xhc3NpZmllck1hcHBpbmcgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGVDbGFzc2lmaWVyTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShzdGF0ZU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZUNsYXNzaWZpZXJNYXBwaW5nW3N0YXRlTmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIF9hO1xuICAgIFN0YXRlQ2xhc3NpZmllck1hcHBpbmdTZXJ2aWNlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFt0eXBlb2YgKF9hID0gdHlwZW9mIENsYXNzaWZpZXJPYmplY3RGYWN0b3J5XzEuQ2xhc3NpZmllck9iamVjdEZhY3RvcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgQ2xhc3NpZmllck9iamVjdEZhY3RvcnlfMS5DbGFzc2lmaWVyT2JqZWN0RmFjdG9yeSkgPT09IFwiZnVuY3Rpb25cIiA/IF9hIDogT2JqZWN0XSlcbiAgICBdLCBTdGF0ZUNsYXNzaWZpZXJNYXBwaW5nU2VydmljZSk7XG4gICAgcmV0dXJuIFN0YXRlQ2xhc3NpZmllck1hcHBpbmdTZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuU3RhdGVDbGFzc2lmaWVyTWFwcGluZ1NlcnZpY2UgPSBTdGF0ZUNsYXNzaWZpZXJNYXBwaW5nU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1N0YXRlQ2xhc3NpZmllck1hcHBpbmdTZXJ2aWNlJywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShTdGF0ZUNsYXNzaWZpZXJNYXBwaW5nU2VydmljZSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlcyBmb3Igc3RhdHMgcmVwb3J0aW5nLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1N0b3B3YXRjaE9iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL2Fuc3dlci1jbGFzc2lmaWNhdGlvbi5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9Db250ZXh0U2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvTWVzc2VuZ2VyU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvUGxheXRocm91Z2hTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9TaXRlQW5hbHl0aWNzU2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UuY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnU3RhdHNSZXBvcnRpbmdTZXJ2aWNlJywgW1xuICAgICckaHR0cCcsICckaW50ZXJ2YWwnLCAnQ29udGV4dFNlcnZpY2UnLCAnTWVzc2VuZ2VyU2VydmljZScsXG4gICAgJ1BsYXl0aHJvdWdoU2VydmljZScsICdTaXRlQW5hbHl0aWNzU2VydmljZScsICdTdG9wd2F0Y2hPYmplY3RGYWN0b3J5JyxcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCAnU1RBVFNfUkVQT1JUSU5HX1VSTFMnLFxuICAgIGZ1bmN0aW9uICgkaHR0cCwgJGludGVydmFsLCBDb250ZXh0U2VydmljZSwgTWVzc2VuZ2VyU2VydmljZSwgUGxheXRocm91Z2hTZXJ2aWNlLCBTaXRlQW5hbHl0aWNzU2VydmljZSwgU3RvcHdhdGNoT2JqZWN0RmFjdG9yeSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UsIFNUQVRTX1JFUE9SVElOR19VUkxTKSB7XG4gICAgICAgIHZhciBleHBsb3JhdGlvbklkID0gbnVsbDtcbiAgICAgICAgdmFyIGV4cGxvcmF0aW9uVGl0bGUgPSBudWxsO1xuICAgICAgICB2YXIgZXhwbG9yYXRpb25WZXJzaW9uID0gbnVsbDtcbiAgICAgICAgdmFyIHNlc3Npb25JZCA9IG51bGw7XG4gICAgICAgIHZhciBzdGF0ZVN0b3B3YXRjaCA9IG51bGw7XG4gICAgICAgIHZhciBvcHRpb25hbENvbGxlY3Rpb25JZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHN0YXRlc1Zpc2l0ZWQgPSB7fTtcbiAgICAgICAgdmFyIG51bVN0YXRlc1Zpc2l0ZWQgPSAwO1xuICAgICAgICB2YXIgZXhwbG9yYXRpb25TdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBleHBsb3JhdGlvbkFjdHVhbGx5U3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXhwbG9yYXRpb25Jc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBjdXJyZW50U3RhdGVOYW1lID0gbnVsbDtcbiAgICAgICAgdmFyIG5leHRFeHBJZCA9IG51bGw7XG4gICAgICAgIHZhciBwcmV2aW91c1N0YXRlTmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBuZXh0U3RhdGVOYW1lID0gbnVsbDtcbiAgICAgICAgdmFyIF9lZGl0b3JQcmV2aWV3TW9kZSA9IENvbnRleHRTZXJ2aWNlLmlzSW5FeHBsb3JhdGlvbkVkaXRvclBhZ2UoKTtcbiAgICAgICAgdmFyIF9xdWVzdGlvblBsYXllck1vZGUgPSBDb250ZXh0U2VydmljZS5pc0luUXVlc3Rpb25QbGF5ZXJNb2RlKCk7XG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgZGljdCB3aWxsIGNvbnRhaW4gYWxsIHN0YXRzIGRhdGEgYWNjdW11bGF0ZWQgb3ZlciB0aGVcbiAgICAgICAgLy8gaW50ZXJ2YWwgdGltZSBhbmQgd2lsbCBiZSByZXNldCB3aGVuIHRoZSBkaWN0IGlzIHNlbnQgdG8gYmFja2VuZCBmb3JcbiAgICAgICAgLy8gcmVjb3JkaW5nLlxuICAgICAgICB2YXIgYWdncmVnYXRlZFN0YXRzID0ge1xuICAgICAgICAgICAgbnVtX3N0YXJ0czogbnVsbCxcbiAgICAgICAgICAgIG51bV9jb21wbGV0aW9uczogbnVsbCxcbiAgICAgICAgICAgIG51bV9hY3R1YWxfc3RhcnRzOiBudWxsLFxuICAgICAgICAgICAgc3RhdGVfc3RhdHNfbWFwcGluZzogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVmcmVzaEFnZ3JlZ2F0ZWRTdGF0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFnZ3JlZ2F0ZWRTdGF0cyA9IHtcbiAgICAgICAgICAgICAgICBudW1fc3RhcnRzOiAwLFxuICAgICAgICAgICAgICAgIG51bV9jb21wbGV0aW9uczogMCxcbiAgICAgICAgICAgICAgICBudW1fYWN0dWFsX3N0YXJ0czogMCxcbiAgICAgICAgICAgICAgICBzdGF0ZV9zdGF0c19tYXBwaW5nOiB7fVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNyZWF0ZURlZmF1bHRTdGF0ZVN0YXRzTWFwcGluZyA9IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgIGFnZ3JlZ2F0ZWRTdGF0cy5zdGF0ZV9zdGF0c19tYXBwaW5nW3N0YXRlTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgdG90YWxfYW5zd2Vyc19jb3VudDogMCxcbiAgICAgICAgICAgICAgICB1c2VmdWxfZmVlZGJhY2tfY291bnQ6IDAsXG4gICAgICAgICAgICAgICAgdG90YWxfaGl0X2NvdW50OiAwLFxuICAgICAgICAgICAgICAgIGZpcnN0X2hpdF9jb3VudDogMCxcbiAgICAgICAgICAgICAgICBudW1fdGltZXNfc29sdXRpb25fdmlld2VkOiAwLFxuICAgICAgICAgICAgICAgIG51bV9jb21wbGV0aW9uczogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdldEZ1bGxTdGF0c1VybCA9IGZ1bmN0aW9uICh1cmxJZGVudGlmaWVyKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5pbnRlcnBvbGF0ZVVybChTVEFUU19SRVBPUlRJTkdfVVJMU1t1cmxJZGVudGlmaWVyXSwge1xuICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbl9pZDogZXhwbG9yYXRpb25JZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWRkaXRpb25hbEluZm8gPSAoJ1xcblVuZGVmaW5lZCBleHBsb3JhdGlvbiBpZCBlcnJvciBkZWJ1ZyBsb2dzOicgK1xuICAgICAgICAgICAgICAgICAgICAnXFxuVGhlIGV2ZW50IGJlaW5nIHJlY29yZGVkOiAnICsgdXJsSWRlbnRpZmllciArXG4gICAgICAgICAgICAgICAgICAgICdcXG5FeHBsb3JhdGlvbiBJRDogJyArIENvbnRleHRTZXJ2aWNlLmdldEV4cGxvcmF0aW9uSWQoKSk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbEluZm8gKz0gKCdcXG5DdXJyZW50IFN0YXRlIG5hbWU6ICcgKyBjdXJyZW50U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHRFeHBJZCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsSW5mbyArPSAoJ1xcblJlZnJlc2hlciBleHAgaWQ6ICcgKyBuZXh0RXhwSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNTdGF0ZU5hbWUgJiYgbmV4dFN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsSW5mbyArPSAoJ1xcbk9sZCBTdGF0ZSBuYW1lOiAnICsgcHJldmlvdXNTdGF0ZU5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbk5ldyBTdGF0ZSBuYW1lOiAnICsgbmV4dFN0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGUubWVzc2FnZSArPSBhZGRpdGlvbmFsSW5mbztcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIV9lZGl0b3JQcmV2aWV3TW9kZSAmJiAhX3F1ZXN0aW9uUGxheWVyTW9kZSkge1xuICAgICAgICAgICAgJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBwb3N0U3RhdHNUb0JhY2tlbmQoKTtcbiAgICAgICAgICAgIH0sIDMwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW5ldmVyIGEgbGVhcm5lciB0cmllcyB0byBsZWF2ZSBhbiBleHBsb3JhdGlvbixcbiAgICAgICAgLy8gd2hlbiBhIGxlYXJuZXIgc3RhcnRzIGFuIGV4cGxvcmF0aW9uLCB3aGVuIGEgbGVhcm5lciBjb21wbGV0ZXMgYW5cbiAgICAgICAgLy8gZXhwbG9yYXRpb24gYW5kIGFsc28gZXZlcnkgZml2ZSBtaW51dGVzLlxuICAgICAgICB2YXIgcG9zdFN0YXRzVG9CYWNrZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGV4cGxvcmF0aW9uSXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRodHRwLnBvc3QoZ2V0RnVsbFN0YXRzVXJsKCdTVEFUU19FVkVOVFMnKSwge1xuICAgICAgICAgICAgICAgIGFnZ3JlZ2F0ZWRfc3RhdHM6IGFnZ3JlZ2F0ZWRTdGF0cyxcbiAgICAgICAgICAgICAgICBleHBfdmVyc2lvbjogZXhwbG9yYXRpb25WZXJzaW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlZnJlc2hBZ2dyZWdhdGVkU3RhdHMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRTZXNzaW9uOiBmdW5jdGlvbiAobmV3RXhwbG9yYXRpb25JZCwgbmV3RXhwbG9yYXRpb25UaXRsZSwgbmV3RXhwbG9yYXRpb25WZXJzaW9uLCBuZXdTZXNzaW9uSWQsIGNvbGxlY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uSWQgPSBuZXdFeHBsb3JhdGlvbklkO1xuICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uVGl0bGUgPSBuZXdFeHBsb3JhdGlvblRpdGxlO1xuICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uVmVyc2lvbiA9IG5ld0V4cGxvcmF0aW9uVmVyc2lvbjtcbiAgICAgICAgICAgICAgICBzZXNzaW9uSWQgPSBuZXdTZXNzaW9uSWQ7XG4gICAgICAgICAgICAgICAgc3RhdGVTdG9wd2F0Y2ggPSBTdG9wd2F0Y2hPYmplY3RGYWN0b3J5LmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIG9wdGlvbmFsQ29sbGVjdGlvbklkID0gY29sbGVjdGlvbklkO1xuICAgICAgICAgICAgICAgIHJlZnJlc2hBZ2dyZWdhdGVkU3RhdHMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBhbHNvIHJlc2V0cyB0aGUgc3RhdGVTdG9wd2F0Y2guXG4gICAgICAgICAgICByZWNvcmRFeHBsb3JhdGlvblN0YXJ0ZWQ6IGZ1bmN0aW9uIChzdGF0ZU5hbWUsIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGlmIChleHBsb3JhdGlvblN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkU3RhdHMubnVtX3N0YXJ0cyArPSAxO1xuICAgICAgICAgICAgICAgIGNyZWF0ZURlZmF1bHRTdGF0ZVN0YXRzTWFwcGluZyhzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIGFnZ3JlZ2F0ZWRTdGF0cy5zdGF0ZV9zdGF0c19tYXBwaW5nW3N0YXRlTmFtZV0udG90YWxfaGl0X2NvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgYWdncmVnYXRlZFN0YXRzLnN0YXRlX3N0YXRzX21hcHBpbmdbc3RhdGVOYW1lXS5maXJzdF9oaXRfY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICBwb3N0U3RhdHNUb0JhY2tlbmQoKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGVOYW1lID0gc3RhdGVOYW1lO1xuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoZ2V0RnVsbFN0YXRzVXJsKCdFWFBMT1JBVElPTl9TVEFSVEVEJyksIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25faWQ6IHNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVfbmFtZTogc3RhdGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBleHBsb3JhdGlvblZlcnNpb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KGdldEZ1bGxTdGF0c1VybCgnU1RBVEVfSElUJyksIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50X3RpbWVfc3BlbnRfaW5fc2VjczogMC4wLFxuICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbl92ZXJzaW9uOiBleHBsb3JhdGlvblZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIG5ld19zdGF0ZV9uYW1lOiBzdGF0ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG9sZF9wYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE1lc3NlbmdlclNlcnZpY2Uuc2VuZE1lc3NhZ2UoTWVzc2VuZ2VyU2VydmljZS5FWFBMT1JBVElPTl9MT0FERUQsIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbG9yYXRpb25WZXJzaW9uOiBleHBsb3JhdGlvblZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uVGl0bGU6IGV4cGxvcmF0aW9uVGl0bGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdGF0ZXNWaXNpdGVkW3N0YXRlTmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIG51bVN0YXRlc1Zpc2l0ZWQgPSAxO1xuICAgICAgICAgICAgICAgIFNpdGVBbmFseXRpY3NTZXJ2aWNlLnJlZ2lzdGVyTmV3Q2FyZCgxKTtcbiAgICAgICAgICAgICAgICBzdGF0ZVN0b3B3YXRjaC5yZXNldCgpO1xuICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVjb3JkRXhwbG9yYXRpb25BY3R1YWxseVN0YXJ0ZWQ6IGZ1bmN0aW9uIChzdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXhwbG9yYXRpb25BY3R1YWxseVN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkU3RhdHMubnVtX2FjdHVhbF9zdGFydHMgKz0gMTtcbiAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGVOYW1lID0gc3RhdGVOYW1lO1xuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoZ2V0RnVsbFN0YXRzVXJsKCdFWFBMT1JBVElPTl9BQ1RVQUxMWV9TVEFSVEVEJyksIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbG9yYXRpb25fdmVyc2lvbjogZXhwbG9yYXRpb25WZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZV9uYW1lOiBzdGF0ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25faWQ6IHNlc3Npb25JZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFBsYXl0aHJvdWdoU2VydmljZS5yZWNvcmRFeHBsb3JhdGlvblN0YXJ0QWN0aW9uKHN0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgZXhwbG9yYXRpb25BY3R1YWxseVN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZFNvbHV0aW9uSGl0OiBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhZ2dyZWdhdGVkU3RhdHMuc3RhdGVfc3RhdHNfbWFwcGluZy5oYXNPd25Qcm9wZXJ0eShzdGF0ZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZURlZmF1bHRTdGF0ZVN0YXRzTWFwcGluZyhzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkU3RhdHMuc3RhdGVfc3RhdHNfbWFwcGluZ1tzdGF0ZU5hbWVdLm51bV90aW1lc19zb2x1dGlvbl92aWV3ZWQgKz0gMTtcbiAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGVOYW1lID0gc3RhdGVOYW1lO1xuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoZ2V0RnVsbFN0YXRzVXJsKCdTT0xVVElPTl9ISVQnKSwge1xuICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbl92ZXJzaW9uOiBleHBsb3JhdGlvblZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlX25hbWU6IHN0YXRlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkLFxuICAgICAgICAgICAgICAgICAgICB0aW1lX3NwZW50X2luX3N0YXRlX3NlY3M6IHN0YXRlU3RvcHdhdGNoLmdldFRpbWVJblNlY3MoKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZExlYXZlRm9yUmVmcmVzaGVyRXhwOiBmdW5jdGlvbiAoc3RhdGVOYW1lLCByZWZyZXNoZXJFeHBJZCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZU5hbWUgPSBzdGF0ZU5hbWU7XG4gICAgICAgICAgICAgICAgbmV4dEV4cElkID0gcmVmcmVzaGVyRXhwSWQ7XG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChnZXRGdWxsU3RhdHNVcmwoJ0xFQVZFX0ZPUl9SRUZSRVNIRVJfRVhQJyksIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbG9yYXRpb25fdmVyc2lvbjogZXhwbG9yYXRpb25WZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoZXJfZXhwX2lkOiByZWZyZXNoZXJFeHBJZCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVfbmFtZTogc3RhdGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uX2lkOiBzZXNzaW9uSWQsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVfc3BlbnRfaW5fc3RhdGVfc2Vjczogc3RhdGVTdG9wd2F0Y2guZ2V0VGltZUluU2VjcygpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgYWxzbyByZXNldHMgdGhlIHN0YXRlU3RvcHdhdGNoLlxuICAgICAgICAgICAgcmVjb3JkU3RhdGVUcmFuc2l0aW9uOiBmdW5jdGlvbiAob2xkU3RhdGVOYW1lLCBuZXdTdGF0ZU5hbWUsIGFuc3dlciwgb2xkUGFyYW1zLCBpc0ZpcnN0SGl0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhZ2dyZWdhdGVkU3RhdHMuc3RhdGVfc3RhdHNfbWFwcGluZy5oYXNPd25Qcm9wZXJ0eShuZXdTdGF0ZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZURlZmF1bHRTdGF0ZVN0YXRzTWFwcGluZyhuZXdTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkU3RhdHMuc3RhdGVfc3RhdHNfbWFwcGluZ1tuZXdTdGF0ZU5hbWVdLnRvdGFsX2hpdF9jb3VudCArPSAxO1xuICAgICAgICAgICAgICAgIGlmIChpc0ZpcnN0SGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFnZ3JlZ2F0ZWRTdGF0cy5zdGF0ZV9zdGF0c19tYXBwaW5nW25ld1N0YXRlTmFtZV0uZmlyc3RfaGl0X2NvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZpb3VzU3RhdGVOYW1lID0gb2xkU3RhdGVOYW1lO1xuICAgICAgICAgICAgICAgIG5leHRTdGF0ZU5hbWUgPSBuZXdTdGF0ZU5hbWU7XG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChnZXRGdWxsU3RhdHNVcmwoJ1NUQVRFX0hJVCcpLCB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHRpbWUgc3BlbnQgc2luY2UgdGhlIGxhc3Qgc3VibWlzc2lvbi5cbiAgICAgICAgICAgICAgICAgICAgY2xpZW50X3RpbWVfc3BlbnRfaW5fc2Vjczogc3RhdGVTdG9wd2F0Y2guZ2V0VGltZUluU2VjcygpLFxuICAgICAgICAgICAgICAgICAgICBleHBsb3JhdGlvbl92ZXJzaW9uOiBleHBsb3JhdGlvblZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIG5ld19zdGF0ZV9uYW1lOiBuZXdTdGF0ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG9sZF9wYXJhbXM6IG9sZFBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIEJyb2FkY2FzdCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3RhdGUgdHJhbnNpdGlvbiB0byBsaXN0ZW5lcnMuXG4gICAgICAgICAgICAgICAgTWVzc2VuZ2VyU2VydmljZS5zZW5kTWVzc2FnZShNZXNzZW5nZXJTZXJ2aWNlLlNUQVRFX1RSQU5TSVRJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbG9yYXRpb25WZXJzaW9uOiBleHBsb3JhdGlvblZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGpzb25BbnN3ZXI6IEpTT04uc3RyaW5naWZ5KGFuc3dlciksXG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlTmFtZTogbmV3U3RhdGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBvbGRTdGF0ZU5hbWU6IG9sZFN0YXRlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1WYWx1ZXM6IG9sZFBhcmFtc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghc3RhdGVzVmlzaXRlZC5oYXNPd25Qcm9wZXJ0eShuZXdTdGF0ZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlc1Zpc2l0ZWRbbmV3U3RhdGVOYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG51bVN0YXRlc1Zpc2l0ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgU2l0ZUFuYWx5dGljc1NlcnZpY2UucmVnaXN0ZXJOZXdDYXJkKG51bVN0YXRlc1Zpc2l0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGF0ZVN0b3B3YXRjaC5yZXNldCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZFN0YXRlQ29tcGxldGVkOiBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhZ2dyZWdhdGVkU3RhdHMuc3RhdGVfc3RhdHNfbWFwcGluZy5oYXNPd25Qcm9wZXJ0eShzdGF0ZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZURlZmF1bHRTdGF0ZVN0YXRzTWFwcGluZyhzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkU3RhdHMuc3RhdGVfc3RhdHNfbWFwcGluZ1tzdGF0ZU5hbWVdLm51bV9jb21wbGV0aW9ucyArPSAxO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZU5hbWUgPSBzdGF0ZU5hbWU7XG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChnZXRGdWxsU3RhdHNVcmwoJ1NUQVRFX0NPTVBMRVRFRCcpLCB7XG4gICAgICAgICAgICAgICAgICAgIGV4cF92ZXJzaW9uOiBleHBsb3JhdGlvblZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlX25hbWU6IHN0YXRlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkLFxuICAgICAgICAgICAgICAgICAgICB0aW1lX3NwZW50X2luX3N0YXRlX3NlY3M6IHN0YXRlU3RvcHdhdGNoLmdldFRpbWVJblNlY3MoKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZEV4cGxvcmF0aW9uQ29tcGxldGVkOiBmdW5jdGlvbiAoc3RhdGVOYW1lLCBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVkU3RhdHMubnVtX2NvbXBsZXRpb25zICs9IDE7XG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlTmFtZSA9IHN0YXRlTmFtZTtcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KGdldEZ1bGxTdGF0c1VybCgnRVhQTE9SQVRJT05fQ09NUExFVEVEJyksIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50X3RpbWVfc3BlbnRfaW5fc2Vjczogc3RhdGVTdG9wd2F0Y2guZ2V0VGltZUluU2VjcygpLFxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uX2lkOiBvcHRpb25hbENvbGxlY3Rpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25faWQ6IHNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVfbmFtZTogc3RhdGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBleHBsb3JhdGlvblZlcnNpb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXJTZXJ2aWNlLnNlbmRNZXNzYWdlKE1lc3NlbmdlclNlcnZpY2UuRVhQTE9SQVRJT05fQ09NUExFVEVELCB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uVmVyc2lvbjogZXhwbG9yYXRpb25WZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbVZhbHVlczogcGFyYW1zXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgU2l0ZUFuYWx5dGljc1NlcnZpY2UucmVnaXN0ZXJGaW5pc2hFeHBsb3JhdGlvbigpO1xuICAgICAgICAgICAgICAgIHBvc3RTdGF0c1RvQmFja2VuZCgpO1xuICAgICAgICAgICAgICAgIFBsYXl0aHJvdWdoU2VydmljZS5yZWNvcmRFeHBsb3JhdGlvblF1aXRBY3Rpb24oc3RhdGVOYW1lLCBzdGF0ZVN0b3B3YXRjaC5nZXRUaW1lSW5TZWNzKCkpO1xuICAgICAgICAgICAgICAgIFBsYXl0aHJvdWdoU2VydmljZS5yZWNvcmRQbGF5dGhyb3VnaCh0cnVlKTtcbiAgICAgICAgICAgICAgICBleHBsb3JhdGlvbklzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZEFuc3dlclN1Ym1pdHRlZDogZnVuY3Rpb24gKHN0YXRlTmFtZSwgcGFyYW1zLCBhbnN3ZXIsIGFuc3dlckdyb3VwSW5kZXgsIHJ1bGVJbmRleCwgY2xhc3NpZmljYXRpb25DYXRlZ29yaXphdGlvbiwgZmVlZGJhY2tJc1VzZWZ1bCkge1xuICAgICAgICAgICAgICAgIGlmICghYWdncmVnYXRlZFN0YXRzLnN0YXRlX3N0YXRzX21hcHBpbmcuaGFzT3duUHJvcGVydHkoc3RhdGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVEZWZhdWx0U3RhdGVTdGF0c01hcHBpbmcoc3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWdncmVnYXRlZFN0YXRzLnN0YXRlX3N0YXRzX21hcHBpbmdbc3RhdGVOYW1lXS50b3RhbF9hbnN3ZXJzX2NvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgaWYgKGZlZWRiYWNrSXNVc2VmdWwpIHtcbiAgICAgICAgICAgICAgICAgICAgYWdncmVnYXRlZFN0YXRzLnN0YXRlX3N0YXRzX21hcHBpbmdbc3RhdGVOYW1lXS51c2VmdWxfZmVlZGJhY2tfY291bnQgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlTmFtZSA9IHN0YXRlTmFtZTtcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KGdldEZ1bGxTdGF0c1VybCgnQU5TV0VSX1NVQk1JVFRFRCcpLCB7XG4gICAgICAgICAgICAgICAgICAgIGFuc3dlcjogYW5zd2VyLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogZXhwbG9yYXRpb25WZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uX2lkOiBzZXNzaW9uSWQsXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudF90aW1lX3NwZW50X2luX3NlY3M6IHN0YXRlU3RvcHdhdGNoLmdldFRpbWVJblNlY3MoKSxcbiAgICAgICAgICAgICAgICAgICAgb2xkX3N0YXRlX25hbWU6IHN0YXRlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VyX2dyb3VwX2luZGV4OiBhbnN3ZXJHcm91cEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBydWxlX3NwZWNfaW5kZXg6IHJ1bGVJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NpZmljYXRpb25fY2F0ZWdvcml6YXRpb246IGNsYXNzaWZpY2F0aW9uQ2F0ZWdvcml6YXRpb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWNvcmRNYXliZUxlYXZlRXZlbnQ6IGZ1bmN0aW9uIChzdGF0ZU5hbWUsIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZU5hbWUgPSBzdGF0ZU5hbWU7XG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChnZXRGdWxsU3RhdHNVcmwoJ0VYUExPUkFUSU9OX01BWUJFX0xFRlQnKSwge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnRfdGltZV9zcGVudF9pbl9zZWNzOiBzdGF0ZVN0b3B3YXRjaC5nZXRUaW1lSW5TZWNzKCksXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25faWQ6IG9wdGlvbmFsQ29sbGVjdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZV9uYW1lOiBzdGF0ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246IGV4cGxvcmF0aW9uVmVyc2lvblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHBvc3RTdGF0c1RvQmFja2VuZCgpO1xuICAgICAgICAgICAgICAgIFBsYXl0aHJvdWdoU2VydmljZS5yZWNvcmRFeHBsb3JhdGlvblF1aXRBY3Rpb24oc3RhdGVOYW1lLCBzdGF0ZVN0b3B3YXRjaC5nZXRUaW1lSW5TZWNzKCkpO1xuICAgICAgICAgICAgICAgIFBsYXl0aHJvdWdoU2VydmljZS5yZWNvcmRQbGF5dGhyb3VnaCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZEFuc3dlclN1Ym1pdEFjdGlvbjogZnVuY3Rpb24gKHN0YXRlTmFtZSwgZGVzdFN0YXRlTmFtZSwgaW50ZXJhY3Rpb25JZCwgYW5zd2VyLCBmZWVkYmFjaykge1xuICAgICAgICAgICAgICAgIFBsYXl0aHJvdWdoU2VydmljZS5yZWNvcmRBbnN3ZXJTdWJtaXRBY3Rpb24oc3RhdGVOYW1lLCBkZXN0U3RhdGVOYW1lLCBpbnRlcmFjdGlvbklkLCBhbnN3ZXIsIGZlZWRiYWNrLCBzdGF0ZVN0b3B3YXRjaC5nZXRUaW1lSW5TZWNzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIHRvIGRpc3BsYXkgc3VnZ2VzdGlvbiBtb2RhbCBpbiBsZWFybmVyIGxvY2FsIHZpZXcuXG4gKi9cbnJlcXVpcmUoJ2NvbXBvbmVudHMvY2stZWRpdG9yLWhlbHBlcnMvY2stZWRpdG9yLTQtcnRlLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9jay1lZGl0b3ItaGVscGVycy9jay1lZGl0b3ItNC13aWRnZXRzLmluaXRpYWxpemVyLnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9leHBsb3JhdGlvbi1lbmdpbmUuc2VydmljZS50cycpO1xucmVxdWlyZSgncGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2Uvc2VydmljZXMvcGxheWVyLXBvc2l0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLXBsYXllci1wYWdlL3NlcnZpY2VzL3BsYXllci10cmFuc2NyaXB0LnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0FsZXJ0c1NlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL1N1Z2dlc3Rpb25Nb2RhbFNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1N1Z2dlc3Rpb25Nb2RhbEZvckV4cGxvcmF0aW9uUGxheWVyU2VydmljZScsIFtcbiAgICAnJGh0dHAnLCAnJHVpYk1vZGFsJywgJ0FsZXJ0c1NlcnZpY2UnLCAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uICgkaHR0cCwgJHVpYk1vZGFsLCBBbGVydHNTZXJ2aWNlLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICB2YXIgX3RlbXBsYXRlVXJsID0gVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS90ZW1wbGF0ZXMvJyArXG4gICAgICAgICAgICAnZXhwbG9yYXRpb24tcGxheWVyLXN1Z2dlc3Rpb24tbW9kYWwuZGlyZWN0aXZlLmh0bWwnKTtcbiAgICAgICAgdmFyIF9zaG93RWRpdFN0YXRlQ29udGVudFN1Z2dlc3Rpb25Nb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogX3RlbXBsYXRlVXJsLFxuICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7fSxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgICAgICckc2NvcGUnLCAnJHRpbWVvdXQnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnRXhwbG9yYXRpb25FbmdpbmVTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ1BsYXllclBvc2l0aW9uU2VydmljZScsICdQbGF5ZXJUcmFuc2NyaXB0U2VydmljZScsXG4gICAgICAgICAgICAgICAgICAgICdTdWdnZXN0aW9uTW9kYWxTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHRpbWVvdXQsICR1aWJNb2RhbEluc3RhbmNlLCBFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2UsIFBsYXllclBvc2l0aW9uU2VydmljZSwgUGxheWVyVHJhbnNjcmlwdFNlcnZpY2UsIFN1Z2dlc3Rpb25Nb2RhbFNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZU5hbWUgPSBQbGF5ZXJQb3NpdGlvblNlcnZpY2UuZ2V0Q3VycmVudFN0YXRlTmFtZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXllZENhcmQgPSBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5nZXRDYXJkKFBsYXllclBvc2l0aW9uU2VydmljZS5nZXREaXNwbGF5ZWRDYXJkSW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3JpZ2luYWxIdG1sID0gZGlzcGxheWVkQ2FyZC5nZXRDb250ZW50SHRtbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlc2NyaXB0aW9uID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZy1tb2RlbCBuZWVkcyB0byBiaW5kIHRvIGEgcHJvcGVydHkgb2YgYW4gb2JqZWN0IG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2NvcGUgKHRoZSBwcm9wZXJ0eSBjYW5ub3Qgc2l0IGRpcmVjdGx5IG9uIHRoZSBzY29wZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZmVyZW5jZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTI2MTgzNDJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdWdnZXN0aW9uRGF0YSA9IHsgc3VnZ2VzdGlvbkh0bWw6ICRzY29wZS5vcmlnaW5hbEh0bWwgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RWRpdG9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSdGUgaW5pdGlhbGx5IGRpc3BsYXlzIGNvbnRlbnQgdW5yZW5kZXJlZCBmb3IgYSBzcGxpdCBzZWNvbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0VkaXRvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbFN1Z2dlc3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3VnZ2VzdGlvbk1vZGFsU2VydmljZS5jYW5jZWxTdWdnZXN0aW9uKCR1aWJNb2RhbEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0U3VnZ2VzdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2lkOiBFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2UuZ2V0RXhwbG9yYXRpb25JZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBFeHBsb3JhdGlvbkVuZ2luZVNlcnZpY2UuZ2V0RXhwbG9yYXRpb25WZXJzaW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlTmFtZTogc3RhdGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0aW9uX3R5cGU6ICdlZGl0X2V4cGxvcmF0aW9uX3N0YXRlX2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfdHlwZTogJ2V4cGxvcmF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICRzY29wZS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGlvbkh0bWw6ICRzY29wZS5zdWdnZXN0aW9uRGF0YS5zdWdnZXN0aW9uSHRtbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25fdHlwZTogcmVzdWx0LnN1Z2dlc3Rpb25fdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X3R5cGU6IHJlc3VsdC50YXJnZXRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2lkOiByZXN1bHQudGFyZ2V0X2lkLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfdmVyc2lvbl9hdF9zdWJtaXNzaW9uOiByZXN1bHQudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRfcmV2aWV3ZXJfaWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsX3Jldmlld2VyX2lkOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVzdWx0LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZDogJ2VkaXRfc3RhdGVfcHJvcGVydHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlfbmFtZTogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVfbmFtZTogcmVzdWx0LnN0YXRlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld192YWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6IHJlc3VsdC5zdWdnZXN0aW9uSHRtbFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy9zdWdnZXN0aW9uaGFuZGxlci8nO1xuICAgICAgICAgICAgICAgICRodHRwLnBvc3QodXJsLCBkYXRhKS5lcnJvcihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuYWRkV2FybmluZyhyZXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvcGFnZXMvZXhwbG9yYXRpb24tcGxheWVyLXBhZ2UvdGVtcGxhdGVzLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2xlYXJuZXItc3VnZ2VzdGlvbi1zdWJtaXR0ZWQtbW9kYWwudGVtcGxhdGUuaHRtbCcpLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge30sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNob3dTdWdnZXN0aW9uTW9kYWw6IGZ1bmN0aW9uIChzdWdnZXN0aW9uVHlwZSwgZXh0cmFQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3VnZ2VzdGlvblR5cGUgPT09ICdlZGl0X2V4cGxvcmF0aW9uX3N0YXRlX2NvbnRlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zaG93RWRpdFN0YXRlQ29udGVudFN1Z2dlc3Rpb25Nb2RhbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29uc3RhbnQgZmlsZSBmb3IgdGhlIElOVEVSQUNUSU9OX1NQRUNTIGNvbnN0YW50LlxuICovXG52YXIgSU5URVJBQ1RJT05fU1BFQ1MgPSByZXF1aXJlKCdpbnRlcmFjdGlvbnMvaW50ZXJhY3Rpb25fc3BlY3MuanNvbicpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0lOVEVSQUNUSU9OX1NQRUNTJywgSU5URVJBQ1RJT05fU1BFQ1MpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBVdGlsaXR5IHNlcnZpY2UgZm9yIHRoZSByZXZpZXcgdGVzdHMuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1Jldmlld1Rlc3RFbmdpbmVTZXJ2aWNlJywgW1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldFJldmlld1Rlc3RRdWVzdGlvbkNvdW50OiBmdW5jdGlvbiAobnVtT2ZTa2lsbHMpIHtcbiAgICAgICAgICAgICAgICAvLyBudW1PZlNraWxscyBzaG91bGQgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlci5cbiAgICAgICAgICAgICAgICBpZiAobnVtT2ZTa2lsbHMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChudW1PZlNraWxscyA8IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bU9mU2tpbGxzICogMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobnVtT2ZTa2lsbHMgPCAxMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtT2ZTa2lsbHMgKiAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bU9mU2tpbGxzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29uc3RhbnRzIGZvciB0aGUgcmV2aWV3IHRlc3RzLlxuICovXG4vLyBUT0RPKCM3MDkyKTogRGVsZXRlIHRoaXMgZmlsZSBvbmNlIG1pZ3JhdGlvbiBpcyBjb21wbGV0ZSBhbmQgdGhlc2UgQW5ndWxhckpTXG4vLyBlcXVpdmFsZW50cyBvZiB0aGUgQW5ndWxhciBjb25zdGFudHMgYXJlIG5vIGxvbmdlciBuZWVkZWQuXG52YXIgcmV2aWV3X3Rlc3RfcGFnZV9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJwYWdlcy9yZXZpZXctdGVzdC1wYWdlL3Jldmlldy10ZXN0LXBhZ2UuY29uc3RhbnRzXCIpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ1JFVklFV19URVNUX0RBVEFfVVJMJywgcmV2aWV3X3Rlc3RfcGFnZV9jb25zdGFudHNfMS5SZXZpZXdUZXN0UGFnZUNvbnN0YW50cy5SRVZJRVdfVEVTVF9EQVRBX1VSTCk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnUkVWSUVXX1RFU1RTX1VSTCcsIHJldmlld190ZXN0X3BhZ2VfY29uc3RhbnRzXzEuUmV2aWV3VGVzdFBhZ2VDb25zdGFudHMuUkVWSUVXX1RFU1RTX1VSTCk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnU1RPUllfVklFV0VSX1BBR0UnLCByZXZpZXdfdGVzdF9wYWdlX2NvbnN0YW50c18xLlJldmlld1Rlc3RQYWdlQ29uc3RhbnRzLlNUT1JZX1ZJRVdFUl9QQUdFKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29uc3RhbnRzIGZvciB0aGUgcmV2aWV3IHRlc3RzLlxuICovXG52YXIgUmV2aWV3VGVzdFBhZ2VDb25zdGFudHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmV2aWV3VGVzdFBhZ2VDb25zdGFudHMoKSB7XG4gICAgfVxuICAgIFJldmlld1Rlc3RQYWdlQ29uc3RhbnRzLlJFVklFV19URVNUX0RBVEFfVVJMID0gJy9yZXZpZXdfdGVzdF9oYW5kbGVyL2RhdGEvPHN0b3J5X2lkPic7XG4gICAgUmV2aWV3VGVzdFBhZ2VDb25zdGFudHMuUkVWSUVXX1RFU1RTX1VSTCA9ICcvcmV2aWV3X3Rlc3QvPHN0b3J5X2lkPic7XG4gICAgUmV2aWV3VGVzdFBhZ2VDb25zdGFudHMuU1RPUllfVklFV0VSX1BBR0UgPSAnL3N0b3J5LzxzdG9yeV9pZD4nO1xuICAgIHJldHVybiBSZXZpZXdUZXN0UGFnZUNvbnN0YW50cztcbn0oKSk7XG5leHBvcnRzLlJldmlld1Rlc3RQYWdlQ29uc3RhbnRzID0gUmV2aWV3VGVzdFBhZ2VDb25zdGFudHM7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgdGhlIHJldmlldyB0ZXN0cyBwYWdlLlxuICovXG5yZXF1aXJlKCdjb21wb25lbnRzL2NvbW1vbi1sYXlvdXQtZGlyZWN0aXZlcy9jb21tb24tZWxlbWVudHMvJyArXG4gICAgJ2JhY2tncm91bmQtYmFubmVyLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnY29tcG9uZW50cy9xdWVzdGlvbi1kaXJlY3RpdmVzL3F1ZXN0aW9uLXBsYXllci8nICtcbiAgICAncXVlc3Rpb24tcGxheWVyLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL2ludGVyYWN0aW9uc1F1ZXN0aW9uc1JlcXVpcmVzLnRzJyk7XG5yZXF1aXJlKCdvYmplY3RzL29iamVjdENvbXBvbmVudHNSZXF1aXJlc0ZvclBsYXllcnMudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2ludGVyYWN0aW9uLXNwZWNzLmNvbnN0YW50cy5hanMudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL3Jldmlldy10ZXN0LXBhZ2UvcmV2aWV3LXRlc3QtcGFnZS5jb25zdGFudHMuYWpzLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9yZXZpZXctdGVzdC1wYWdlL3Jldmlldy10ZXN0LWVuZ2luZS5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9BbGVydHNTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9QYWdlVGl0bGVTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9jb250ZXh0dWFsL1VybFNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgncmV2aWV3VGVzdFBhZ2UnLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RGlyZWN0aXZlVGVtcGxhdGVVcmwoJy9wYWdlcy9yZXZpZXctdGVzdC1wYWdlL3Jldmlldy10ZXN0LXBhZ2UuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJGh0dHAnLCAnJHJvb3RTY29wZScsICdBbGVydHNTZXJ2aWNlJywgJ1BhZ2VUaXRsZVNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdSZXZpZXdUZXN0RW5naW5lU2VydmljZScsICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsICdVcmxTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnRkFUQUxfRVJST1JfQ09ERVMnLCAnUVVFU1RJT05fUExBWUVSX01PREUnLCAnUkVWSUVXX1RFU1RfREFUQV9VUkwnLFxuICAgICAgICAgICAgICAgICdSRVZJRVdfVEVTVFNfVVJMJywgJ1NUT1JZX1ZJRVdFUl9QQUdFJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJGh0dHAsICRyb290U2NvcGUsIEFsZXJ0c1NlcnZpY2UsIFBhZ2VUaXRsZVNlcnZpY2UsIFJldmlld1Rlc3RFbmdpbmVTZXJ2aWNlLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSwgVXJsU2VydmljZSwgRkFUQUxfRVJST1JfQ09ERVMsIFFVRVNUSU9OX1BMQVlFUl9NT0RFLCBSRVZJRVdfVEVTVF9EQVRBX1VSTCwgUkVWSUVXX1RFU1RTX1VSTCwgU1RPUllfVklFV0VSX1BBR0UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnN0b3J5SWQgPSBVcmxTZXJ2aWNlLmdldFN0b3J5SWRGcm9tVXJsKCk7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwucXVlc3Rpb25QbGF5ZXJDb25maWcgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2ZldGNoU2tpbGxEZXRhaWxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldmlld1Rlc3RzRGF0YVVybCA9IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKFJFVklFV19URVNUX0RBVEFfVVJMLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcnlfaWQ6IGN0cmwuc3RvcnlJZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV2aWV3VGVzdHNVcmwgPSBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5pbnRlcnBvbGF0ZVVybChSRVZJRVdfVEVTVFNfVVJMLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcnlfaWQ6IGN0cmwuc3RvcnlJZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcnlWaWV3ZXJVcmwgPSBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5pbnRlcnBvbGF0ZVVybChTVE9SWV9WSUVXRVJfUEFHRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3J5X2lkOiBjdHJsLnN0b3J5SWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHJldmlld1Rlc3RzRGF0YVVybCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNraWxsSWRMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNraWxsRGVzY3JpcHRpb25zID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFnZVRpdGxlU2VydmljZS5zZXRQYWdlVGl0bGUoJ1JldmlldyBUZXN0OiAnICsgcmVzdWx0LmRhdGEuc3RvcnlfbmFtZSArICcgLSBPcHBpYScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHNraWxsSWQgaW4gcmVzdWx0LmRhdGEuc2tpbGxfZGVzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraWxsSWRMaXN0LnB1c2goc2tpbGxJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraWxsRGVzY3JpcHRpb25zLnB1c2gocmVzdWx0LmRhdGEuc2tpbGxfZGVzY3JpcHRpb25zW3NraWxsSWRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXN0aW9uUGxheWVyQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRBY3Rpb25CdXR0b25zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0JPT1NUX1NDT1JFJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpMThuSWQ6ICdJMThOX1FVRVNUSU9OX1BMQVlFUl9CT09TVF9TQ09SRSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1JFVFJZX1NFU1NJT04nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkxOG5JZDogJ0kxOE5fUVVFU1RJT05fUExBWUVSX1JFVFJZX1RFU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcmV2aWV3VGVzdHNVcmxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0RBU0hCT0FSRCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaTE4bklkOiAnSTE4Tl9RVUVTVElPTl9QTEFZRVJfUkVUVVJOX1RPX1NUT1JZJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHN0b3J5Vmlld2VyVXJsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraWxsTGlzdDogc2tpbGxJZExpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraWxsRGVzY3JpcHRpb25zOiBza2lsbERlc2NyaXB0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25Db3VudDogUmV2aWV3VGVzdEVuZ2luZVNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRSZXZpZXdUZXN0UXVlc3Rpb25Db3VudChza2lsbElkTGlzdC5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvblBsYXllck1vZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVUeXBlOiBRVUVTVElPTl9QTEFZRVJfTU9ERS5QQVNTX0ZBSUxfTU9ERSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NDdXRvZmY6IDAuNzVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zU29ydGVkQnlEaWZmaWN1bHR5OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnF1ZXN0aW9uUGxheWVyQ29uZmlnID0gcXVlc3Rpb25QbGF5ZXJDb25maWc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgX2ZldGNoU2tpbGxEZXRhaWxzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBNb2R1bGUgZm9yIHRoZSByZXZpZXcgdGVzdHMgcGFnZS5cbiAqL1xucmVxdWlyZShcImNvcmUtanMvZXM3L3JlZmxlY3RcIik7XG5yZXF1aXJlKFwiem9uZS5qc1wiKTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBwbGF0Zm9ybV9icm93c2VyXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiKTtcbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBodHRwXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIik7XG4vLyBUaGlzIGNvbXBvbmVudCBpcyBuZWVkZWQgdG8gZm9yY2UtYm9vdHN0cmFwIEFuZ3VsYXIgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGVcbi8vIGFwcC5cbnZhciBTZXJ2aWNlQm9vdHN0cmFwQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcnZpY2VCb290c3RyYXBDb21wb25lbnQoKSB7XG4gICAgfVxuICAgIFNlcnZpY2VCb290c3RyYXBDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkNvbXBvbmVudCh7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ3NlcnZpY2UtYm9vdHN0cmFwJyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnJ1xuICAgICAgICB9KVxuICAgIF0sIFNlcnZpY2VCb290c3RyYXBDb21wb25lbnQpO1xuICAgIHJldHVybiBTZXJ2aWNlQm9vdHN0cmFwQ29tcG9uZW50O1xufSgpKTtcbmV4cG9ydHMuU2VydmljZUJvb3RzdHJhcENvbXBvbmVudCA9IFNlcnZpY2VCb290c3RyYXBDb21wb25lbnQ7XG52YXIgYXBwX2NvbnN0YW50c18xID0gcmVxdWlyZShcImFwcC5jb25zdGFudHNcIik7XG52YXIgaW50ZXJhY3Rpb25zX2V4dGVuc2lvbl9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJpbnRlcmFjdGlvbnMvaW50ZXJhY3Rpb25zLWV4dGVuc2lvbi5jb25zdGFudHNcIik7XG52YXIgb2JqZWN0c19kb21haW5fY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiZG9tYWluL29iamVjdHMvb2JqZWN0cy1kb21haW4uY29uc3RhbnRzXCIpO1xudmFyIHF1ZXN0aW9uX3BsYXllcl9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJjb21wb25lbnRzL3F1ZXN0aW9uLWRpcmVjdGl2ZXMvcXVlc3Rpb24tcGxheWVyL3F1ZXN0aW9uLXBsYXllci5jb25zdGFudHNcIik7XG52YXIgc2VydmljZXNfY29uc3RhbnRzXzEgPSByZXF1aXJlKFwic2VydmljZXMvc2VydmljZXMuY29uc3RhbnRzXCIpO1xudmFyIHJldmlld190ZXN0X3BhZ2VfY29uc3RhbnRzXzEgPSByZXF1aXJlKFwicGFnZXMvcmV2aWV3LXRlc3QtcGFnZS9yZXZpZXctdGVzdC1wYWdlLmNvbnN0YW50c1wiKTtcbnZhciBSZXZpZXdUZXN0UGFnZU1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXZpZXdUZXN0UGFnZU1vZHVsZSgpIHtcbiAgICB9XG4gICAgLy8gRW1wdHkgcGxhY2Vob2xkZXIgbWV0aG9kIHRvIHNhdGlzZnkgdGhlIGBDb21waWxlcmAuXG4gICAgUmV2aWV3VGVzdFBhZ2VNb2R1bGUucHJvdG90eXBlLm5nRG9Cb290c3RyYXAgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgUmV2aWV3VGVzdFBhZ2VNb2R1bGUgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLk5nTW9kdWxlKHtcbiAgICAgICAgICAgIGltcG9ydHM6IFtcbiAgICAgICAgICAgICAgICBwbGF0Zm9ybV9icm93c2VyXzEuQnJvd3Nlck1vZHVsZSxcbiAgICAgICAgICAgICAgICBodHRwXzEuSHR0cENsaWVudE1vZHVsZVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICAgICAgICAgIFNlcnZpY2VCb290c3RyYXBDb21wb25lbnRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICBTZXJ2aWNlQm9vdHN0cmFwQ29tcG9uZW50XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgYXBwX2NvbnN0YW50c18xLkFwcENvbnN0YW50cyxcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbnNfZXh0ZW5zaW9uX2NvbnN0YW50c18xLkludGVyYWN0aW9uc0V4dGVuc2lvbnNDb25zdGFudHMsXG4gICAgICAgICAgICAgICAgb2JqZWN0c19kb21haW5fY29uc3RhbnRzXzEuT2JqZWN0c0RvbWFpbkNvbnN0YW50cyxcbiAgICAgICAgICAgICAgICBxdWVzdGlvbl9wbGF5ZXJfY29uc3RhbnRzXzEuUXVlc3Rpb25QbGF5ZXJDb25zdGFudHMsXG4gICAgICAgICAgICAgICAgc2VydmljZXNfY29uc3RhbnRzXzEuU2VydmljZXNDb25zdGFudHMsXG4gICAgICAgICAgICAgICAgcmV2aWV3X3Rlc3RfcGFnZV9jb25zdGFudHNfMS5SZXZpZXdUZXN0UGFnZUNvbnN0YW50c1xuICAgICAgICAgICAgXVxuICAgICAgICB9KVxuICAgIF0sIFJldmlld1Rlc3RQYWdlTW9kdWxlKTtcbiAgICByZXR1cm4gUmV2aWV3VGVzdFBhZ2VNb2R1bGU7XG59KCkpO1xudmFyIHBsYXRmb3JtX2Jyb3dzZXJfZHluYW1pY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pY1wiKTtcbnZhciBzdGF0aWNfMiA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBib290c3RyYXBGbiA9IGZ1bmN0aW9uIChleHRyYVByb3ZpZGVycykge1xuICAgIHZhciBwbGF0Zm9ybVJlZiA9IHBsYXRmb3JtX2Jyb3dzZXJfZHluYW1pY18xLnBsYXRmb3JtQnJvd3NlckR5bmFtaWMoZXh0cmFQcm92aWRlcnMpO1xuICAgIHJldHVybiBwbGF0Zm9ybVJlZi5ib290c3RyYXBNb2R1bGUoUmV2aWV3VGVzdFBhZ2VNb2R1bGUpO1xufTtcbnZhciBkb3duZ3JhZGVkTW9kdWxlID0gc3RhdGljXzIuZG93bmdyYWRlTW9kdWxlKGJvb3RzdHJhcEZuKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScsIFtcbiAgICAnZG5kTGlzdHMnLCAnaGVhZHJvb20nLCAnaW5maW5pdGUtc2Nyb2xsJywgJ25nQW5pbWF0ZScsXG4gICAgJ25nQXVkaW8nLCAnbmdDb29raWVzJywgJ25nSW1nQ3JvcCcsICduZ0pveVJpZGUnLCAnbmdNYXRlcmlhbCcsXG4gICAgJ25nUmVzb3VyY2UnLCAnbmdTYW5pdGl6ZScsICduZ1RvdWNoJywgJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnLFxuICAgICd0b2FzdHInLCAndWkuYm9vdHN0cmFwJywgJ3VpLnNvcnRhYmxlJywgJ3VpLnRyZWUnLCAndWkudmFsaWRhdGUnLFxuICAgIGRvd25ncmFkZWRNb2R1bGVcbl0pXG4gICAgLy8gVGhpcyBkaXJlY3RpdmUgaXMgdGhlIGRvd25ncmFkZWQgdmVyc2lvbiBvZiB0aGUgQW5ndWxhciBjb21wb25lbnQgdG9cbiAgICAvLyBib290c3RyYXAgdGhlIEFuZ3VsYXIgOC5cbiAgICAuZGlyZWN0aXZlKCdzZXJ2aWNlQm9vdHN0cmFwJywgc3RhdGljXzEuZG93bmdyYWRlQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnQ6IFNlcnZpY2VCb290c3RyYXBDb21wb25lbnRcbn0pKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2NyaXB0cyBmb3IgdGhlIHJldmlldyB0ZXN0cy5cbiAqL1xuLy8gVGhlIG1vZHVsZSBuZWVkcyB0byBiZSBsb2FkZWQgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBzaW5jZSBpdCBkZWZpbmVzIHRoZVxuLy8gbWFpbiBtb2R1bGUgdGhlIGVsZW1lbnRzIGFyZSBhdHRhY2hlZCB0by5cbnJlcXVpcmUoJ3BhZ2VzL3Jldmlldy10ZXN0LXBhZ2UvcmV2aWV3LXRlc3QtcGFnZS5tb2R1bGUudHMnKTtcbnJlcXVpcmUoJ0FwcC50cycpO1xucmVxdWlyZSgnYmFzZV9jb21wb25lbnRzL0Jhc2VDb250ZW50RGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9yZXZpZXctdGVzdC1wYWdlL3Jldmlldy10ZXN0LXBhZ2UuZGlyZWN0aXZlLnRzJyk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNlcnZpY2UgdG8gb3BlcmF0ZSB0aGUgcGxheWJhY2sgb2YgYXVkaW8uXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0F1ZGlvUGxheWVyU2VydmljZScsIFtcbiAgICAnJHEnLCAnJHRpbWVvdXQnLCAnQXNzZXRzQmFja2VuZEFwaVNlcnZpY2UnLCAnQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlJyxcbiAgICAnQ29udGV4dFNlcnZpY2UnLCAnbmdBdWRpbycsXG4gICAgZnVuY3Rpb24gKCRxLCAkdGltZW91dCwgQXNzZXRzQmFja2VuZEFwaVNlcnZpY2UsIEF1ZGlvVHJhbnNsYXRpb25NYW5hZ2VyU2VydmljZSwgQ29udGV4dFNlcnZpY2UsIG5nQXVkaW8pIHtcbiAgICAgICAgdmFyIF9jdXJyZW50VHJhY2tGaWxlbmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBfY3VycmVudFRyYWNrID0gbnVsbDtcbiAgICAgICAgdmFyIF9jdXJyZW50VHJhY2tEdXJhdGlvbiA9IG51bGw7XG4gICAgICAgIHZhciBfbG9hZCA9IGZ1bmN0aW9uIChmaWxlbmFtZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoZmlsZW5hbWUgIT09IF9jdXJyZW50VHJhY2tGaWxlbmFtZSkge1xuICAgICAgICAgICAgICAgIEFzc2V0c0JhY2tlbmRBcGlTZXJ2aWNlLmxvYWRBdWRpbyhDb250ZXh0U2VydmljZS5nZXRFeHBsb3JhdGlvbklkKCksIGZpbGVuYW1lKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobG9hZGVkQXVkaW9maWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBibG9iVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChsb2FkZWRBdWRpb2ZpbGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIF9jdXJyZW50VHJhY2sgPSBuZ0F1ZGlvLmxvYWQoYmxvYlVybCk7XG4gICAgICAgICAgICAgICAgICAgIF9jdXJyZW50VHJhY2tGaWxlbmFtZSA9IGZpbGVuYW1lO1xuICAgICAgICAgICAgICAgICAgICAvLyBuZ0F1ZGlvIGRvZXNuJ3Qgc2VlbSB0byBwcm92aWRlIGFueSB3YXkgb2YgZGV0ZWN0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gbmF0aXZlIGF1ZGlvIG9iamVjdCBoYXMgZmluaXNoZWQgbG9hZGluZyAtLSBzZWVcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2RhbmllbHN0ZXJuL25nQXVkaW8vaXNzdWVzLzEzOS4gSXQgc2VlbXNcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCBhZnRlciBjcmVhdGluZyBhbiBuZ0F1ZGlvIG9iamVjdCwgdGhlIG5hdGl2ZSBhdWRpb1xuICAgICAgICAgICAgICAgICAgICAvLyBvYmplY3QgaXMgYXN5bmNocm9ub3VzbHkgbG9hZGVkLiBTbyB3ZSB1c2UgYSB0aW1lb3V0XG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGdyYWIgbmF0aXZlIGF1ZGlvLlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKHRqaWFuZzExKTogTG9vayBmb3IgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfY3VycmVudFRyYWNrIGNvdWxkIGJlIG51bGwgaWYgdGhlIGxlYXJuZXIgc3RvcHMgYXVkaW9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3J0bHkgYWZ0ZXIgbG9hZGluZyBhIG5ldyBjYXJkIG9yIGxhbmd1YWdlLiBJbiBzdWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlcywgd2UgZG8gbm90IHdhbnQgdG8gYXR0ZW1wdCBzZXR0aW5nIHRoZSAnb25lbmRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb3BlcnR5IG9mIHRoZSBhdWRpby5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfY3VycmVudFRyYWNrICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2N1cnJlbnRUcmFjay5hdWRpby5vbmVuZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY3VycmVudFRyYWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2N1cnJlbnRUcmFja0ZpbGVuYW1lID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9UcmFuc2xhdGlvbk1hbmFnZXJTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xlYXJTZWNvbmRhcnlBdWRpb1RyYW5zbGF0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhyZWFzb24pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgX3BsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX2N1cnJlbnRUcmFjaykge1xuICAgICAgICAgICAgICAgIF9jdXJyZW50VHJhY2sucGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgX3BhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF9jdXJyZW50VHJhY2spIHtcbiAgICAgICAgICAgICAgICBfY3VycmVudFRyYWNrLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfY3VycmVudFRyYWNrKSB7XG4gICAgICAgICAgICAgICAgX2N1cnJlbnRUcmFjay5zdG9wKCk7XG4gICAgICAgICAgICAgICAgX2N1cnJlbnRUcmFja0ZpbGVuYW1lID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfY3VycmVudFRyYWNrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF9yZXdpbmQgPSBmdW5jdGlvbiAoc2Vjb25kcykge1xuICAgICAgICAgICAgaWYgKF9jdXJyZW50VHJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNlY29uZHMgPSBfY3VycmVudFRyYWNrLnByb2dyZXNzICogX2N1cnJlbnRUcmFjay5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgcmV3aW5kZWRQcm9ncmVzcyA9IChjdXJyZW50U2Vjb25kcyAtIHNlY29uZHMpIC8gX2N1cnJlbnRUcmFjay5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICBfY3VycmVudFRyYWNrLnByb2dyZXNzID0gcmV3aW5kZWRQcm9ncmVzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uIChmaWxlbmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2FkKGZpbGVuYW1lLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfcGxheSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhdXNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3BhdXNlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9zdG9wKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV3aW5kOiBmdW5jdGlvbiAoc2Vjb25kcykge1xuICAgICAgICAgICAgICAgIF9yZXdpbmQoc2Vjb25kcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q3VycmVudFRpbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2N1cnJlbnRUcmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChfY3VycmVudFRyYWNrLmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRBdWRpb0R1cmF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jdXJyZW50VHJhY2sgJiYgX2N1cnJlbnRUcmFjay5hdWRpbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChfY3VycmVudFRyYWNrLmF1ZGlvLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRQcm9ncmVzczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghX2N1cnJlbnRUcmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jdXJyZW50VHJhY2sucHJvZ3Jlc3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0UHJvZ3Jlc3M6IGZ1bmN0aW9uIChwcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIGlmIChfY3VycmVudFRyYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIF9jdXJyZW50VHJhY2sucHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNQbGF5aW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4oX2N1cnJlbnRUcmFjayAmJiAhX2N1cnJlbnRUcmFjay5wYXVzZWQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzVHJhY2tMb2FkZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQm9vbGVhbihfY3VycmVudFRyYWNrKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9jdXJyZW50VHJhY2sgPSBudWxsO1xuICAgICAgICAgICAgICAgIF9jdXJyZW50VHJhY2tGaWxlbmFtZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIHRvIG9wZXJhdGUgdGhlIHBsYXliYWNrIG9mIGF1dG9nZW5lcmF0ZWQgYXVkaW9cbiAqIHVzaW5nIHRoZSBTcGVlY2hTeW50aGVzaXMgQVBJLlxuICovXG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgU3BlZWNoU3ludGhlc2lzQ2h1bmtlclNlcnZpY2VfMSA9IHJlcXVpcmUoXCJzZXJ2aWNlcy9TcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZVwiKTtcbnZhciBBdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2Uoc3BlZWNoU3ludGhlc2lzQ2h1bmtlclNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5zcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZSA9IHNwZWVjaFN5bnRoZXNpc0NodW5rZXJTZXJ2aWNlO1xuICAgICAgICB0aGlzLkRFRkFVTFRfUExBWUJBQ0tfUkFURSA9IDAuOTI7XG4gICAgICAgIHRoaXMuREVGQVVMVF9QTEFZQkFDS19WT0xVTUUgPSAxO1xuICAgICAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlLCBzbyB3ZSBuZWVkIHRoZVxuICAgICAgICAvLyBjaGVjayB0byBwcmV2ZW50IGEgXCJTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UgaXMgbm90IGRlZmluZWRcIiBlcnJvci5cbiAgICAgICAgdGhpcy5fc3BlZWNoU3ludGhlc2lzID0gKHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnc3BlZWNoU3ludGhlc2lzJykpID8gd2luZG93LnNwZWVjaFN5bnRoZXNpcyA6IG51bGw7XG4gICAgICAgIHRoaXMudXR0ZXJhbmNlID0gKHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnc3BlZWNoU3ludGhlc2lzJykpID8gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSgpIDogbnVsbDtcbiAgICB9XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgdHlwZSBvZiAnaHRtbCcgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZCBjb3JyZWN0bHkuIFRoZVxuICAgIC8vIHR5cGUgb2YgdGhlIGNhbGxiYWNrIG5lZWRzIHRvIGJlIGRldGVybWluZWQgdG9vLlxuICAgIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UucHJvdG90eXBlLl9wbGF5ID0gZnVuY3Rpb24gKGh0bWwsIGxhbmd1YWdlLCBhdWRpb0ZpbmlzaGVkQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5zcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZS5jYW5jZWwoKTtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB0aGlzLnNwZWVjaFN5bnRoZXNpc0NodW5rZXJTZXJ2aWNlLmNvbnZlcnRUb1NwZWFrYWJsZVRleHQoaHRtbCk7XG4gICAgICAgIHRoaXMudXR0ZXJhbmNlLnRleHQgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLnV0dGVyYW5jZS5sYW5nID0gbGFuZ3VhZ2U7XG4gICAgICAgIHRoaXMudXR0ZXJhbmNlLnJhdGUgPSB0aGlzLkRFRkFVTFRfUExBWUJBQ0tfUkFURTtcbiAgICAgICAgdGhpcy51dHRlcmFuY2Uudm9sdW1lID0gdGhpcy5ERUZBVUxUX1BMQVlCQUNLX1ZPTFVNRTtcbiAgICAgICAgdGhpcy5zcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZS5zcGVhayh0aGlzLnV0dGVyYW5jZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXVkaW9GaW5pc2hlZENhbGxiYWNrKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgdHlwZSBvZiAnaHRtbCcgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZCBjb3JyZWN0bHkuIFRoZVxuICAgIC8vIHR5cGUgb2YgdGhlIGNhbGxiYWNrIG5lZWRzIHRvIGJlIGRldGVybWluZWQgdG9vLlxuICAgIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbiAoaHRtbCwgbGFuZ3VhZ2UsIGF1ZGlvRmluaXNoZWRDYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGxheShodG1sLCBsYW5ndWFnZSwgYXVkaW9GaW5pc2hlZENhbGxiYWNrKTtcbiAgICB9O1xuICAgIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZS5jYW5jZWwoKTtcbiAgICB9O1xuICAgIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UucHJvdG90eXBlLmlzUGxheWluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NwZWVjaFN5bnRoZXNpcyAmJiB0aGlzLl9zcGVlY2hTeW50aGVzaXMuc3BlYWtpbmc7XG4gICAgfTtcbiAgICB2YXIgX2E7XG4gICAgQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBTcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZV8xLlNwZWVjaFN5bnRoZXNpc0NodW5rZXJTZXJ2aWNlICE9PSBcInVuZGVmaW5lZFwiICYmIFNwZWVjaFN5bnRoZXNpc0NodW5rZXJTZXJ2aWNlXzEuU3BlZWNoU3ludGhlc2lzQ2h1bmtlclNlcnZpY2UpID09PSBcImZ1bmN0aW9uXCIgPyBfYSA6IE9iamVjdF0pXG4gICAgXSwgQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZSk7XG4gICAgcmV0dXJuIEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2U7XG59KCkpO1xuZXhwb3J0cy5BdXRvZ2VuZXJhdGVkQXVkaW9QbGF5ZXJTZXJ2aWNlID0gQXV0b2dlbmVyYXRlZEF1ZGlvUGxheWVyU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0F1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UnLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKEF1dG9nZW5lcmF0ZWRBdWRpb1BsYXllclNlcnZpY2UpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3IgZmV0Y2hpbmcgdGhlIGZlYXR1cmVzIHRoZSBleHBsb3JhdGlvbiBlZGl0b3IgaXNcbiAqIGNvbmZpZ3VyZWQgdG8gc3VwcG9ydC5cbiAqL1xucmVxdWlyZSgnc2VydmljZXMvc2VydmljZXMuY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnRXhwbG9yYXRpb25GZWF0dXJlc0JhY2tlbmRBcGlTZXJ2aWNlJywgW1xuICAgICckaHR0cCcsICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsICdFWFBMT1JBVElPTl9GRUFUVVJFU19VUkwnLFxuICAgIGZ1bmN0aW9uICgkaHR0cCwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UsIEVYUExPUkFUSU9OX0ZFQVRVUkVTX1VSTCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXRyaWV2ZXMgZGF0YSByZWdhcmRpbmcgdGhlIGZlYXR1cmVzIHRoZSBnaXZlbiBleHBsb3JhdGlvbiBzdXBwb3J0cy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBOT1RFOiBUaGlzIHNlcnZpY2UgcmVxdWlyZXMgcGxheS1hY2Nlc3MgZm9yIHRoZSBFeHBsb3JhdGlvbiBzbyB0aGF0IHRoZVxuICAgICAgICAgICAgICogZmVhdHVyZXMgY2FuIGJlIGZldGNoZWQgaW4gYm90aCB0aGUgZXhwbG9yYXRpb24gcGxheWVyIGFuZCBlZGl0b3IuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCAqPn0gLSBEZXNjcmliZXMgdGhlIGZlYXR1cmVzIHRoZSBnaXZlblxuICAgICAgICAgICAgICogICAgIGV4cGxvcmF0aW9uIHN1cHBvcnRzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmZXRjaEV4cGxvcmF0aW9uRmVhdHVyZXM6IGZ1bmN0aW9uIChleHBsb3JhdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldChVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5pbnRlcnBvbGF0ZVVybChFWFBMT1JBVElPTl9GRUFUVVJFU19VUkwsIHsgZXhwbG9yYXRpb25faWQ6IGV4cGxvcmF0aW9uSWQgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3IgZGV0ZXJtaW5pbmcgdGhlIHZpc2liaWxpdHkgb2YgYWR2YW5jZWQgZmVhdHVyZXMgaW5cbiAqICAgICAgICAgICAgICAgdGhlIGV4cGxvcmF0aW9uIGVkaXRvci5cbiAqL1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlKCkge1xuICAgIH1cbiAgICBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZV8xID0gRXhwbG9yYXRpb25GZWF0dXJlc1NlcnZpY2U7XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnZXhwbG9yYXRpb25EYXRhJyBhbmQgJ2ZlYXR1cmVzRGF0YScgYXJlIGRpY3RzIHdpdGhcbiAgICAvLyB1bmRlcnNjb3JlX2Nhc2VkIGtleXMgd2hpY2ggZ2l2ZSB0c2xpbnQgZXJyb3JzIGFnYWluc3QgdW5kZXJzY29yZV9jYXNpbmdcbiAgICAvLyBpbiBmYXZvciBvZiBjYW1lbENhc2luZy5cbiAgICBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChleHBsb3JhdGlvbkRhdGEsIGZlYXR1cmVzRGF0YSkge1xuICAgICAgICBpZiAoRXhwbG9yYXRpb25GZWF0dXJlc1NlcnZpY2VfMS5zZXJ2aWNlSXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlXzEuc2V0dGluZ3MuaXNJbXByb3ZlbWVudHNUYWJFbmFibGVkID1cbiAgICAgICAgICAgIGZlYXR1cmVzRGF0YS5pc19pbXByb3ZlbWVudHNfdGFiX2VuYWJsZWQ7XG4gICAgICAgIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlXzEuc2V0dGluZ3MuaXNQbGF5dGhyb3VnaFJlY29yZGluZ0VuYWJsZWQgPVxuICAgICAgICAgICAgZmVhdHVyZXNEYXRhLmlzX2V4cGxvcmF0aW9uX3doaXRlbGlzdGVkO1xuICAgICAgICBpZiAoZXhwbG9yYXRpb25EYXRhLnBhcmFtX2NoYW5nZXMgJiZcbiAgICAgICAgICAgIGV4cGxvcmF0aW9uRGF0YS5wYXJhbV9jaGFuZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlUGFyYW1ldGVycygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgc3RhdGUgaW4gZXhwbG9yYXRpb25EYXRhLnN0YXRlcykge1xuICAgICAgICAgICAgICAgIGlmIChleHBsb3JhdGlvbkRhdGEuc3RhdGVzW3N0YXRlXS5wYXJhbV9jaGFuZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmFibGVQYXJhbWV0ZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZV8xLnNlcnZpY2VJc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlLnByb3RvdHlwZS5pc0luaXRpYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRXhwbG9yYXRpb25GZWF0dXJlc1NlcnZpY2VfMS5zZXJ2aWNlSXNJbml0aWFsaXplZDtcbiAgICB9O1xuICAgIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlLnByb3RvdHlwZS5hcmVQYXJhbWV0ZXJzRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlXzEuc2V0dGluZ3MuYXJlUGFyYW1ldGVyc0VuYWJsZWQ7XG4gICAgfTtcbiAgICBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZS5wcm90b3R5cGUuaXNJbXByb3ZlbWVudHNUYWJFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRXhwbG9yYXRpb25GZWF0dXJlc1NlcnZpY2VfMS5zZXR0aW5ncy5pc0ltcHJvdmVtZW50c1RhYkVuYWJsZWQ7XG4gICAgfTtcbiAgICBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZS5wcm90b3R5cGUuaXNQbGF5dGhyb3VnaFJlY29yZGluZ0VuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZV8xLnNldHRpbmdzLmlzUGxheXRocm91Z2hSZWNvcmRpbmdFbmFibGVkO1xuICAgIH07XG4gICAgRXhwbG9yYXRpb25GZWF0dXJlc1NlcnZpY2UucHJvdG90eXBlLmVuYWJsZVBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlXzEuc2V0dGluZ3MuYXJlUGFyYW1ldGVyc0VuYWJsZWQgPSB0cnVlO1xuICAgIH07XG4gICAgdmFyIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlXzE7XG4gICAgRXhwbG9yYXRpb25GZWF0dXJlc1NlcnZpY2Uuc2VydmljZUlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZS5zZXR0aW5ncyA9IHtcbiAgICAgICAgaXNJbXByb3ZlbWVudHNUYWJFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgaXNQbGF5dGhyb3VnaFJlY29yZGluZ0VuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBhcmVQYXJhbWV0ZXJzRW5hYmxlZDogZmFsc2VcbiAgICB9O1xuICAgIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlID0gRXhwbG9yYXRpb25GZWF0dXJlc1NlcnZpY2VfMSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSlcbiAgICBdLCBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZSk7XG4gICAgcmV0dXJuIEV4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuRXhwbG9yYXRpb25GZWF0dXJlc1NlcnZpY2UgPSBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0V4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlJywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBVdGlsaXR5IHNlcnZpY2VzIGZvciBleHBsb3JhdGlvbnMgd2hpY2ggbWF5IGJlIHNoYXJlZCBieSBib3RoXG4gKiB0aGUgbGVhcm5lciBhbmQgZWRpdG9yIHZpZXdzLlxuICovXG5yZXF1aXJlKCdmaWx0ZXJzL3N0cmluZy11dGlsaXR5LWZpbHRlcnMvY2FtZWwtY2FzZS10by1oeXBoZW5zLmZpbHRlci50cycpO1xucmVxdWlyZSgnc2VydmljZXMvRXh0ZW5zaW9uVGFnQXNzZW1ibGVyU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvSHRtbEVzY2FwZXJTZXJ2aWNlLnRzJyk7XG4vLyBBIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBhIG51bWJlciBvZiB1dGlsaXR5IGZ1bmN0aW9ucyB1c2VmdWwgdG8gYm90aCB0aGVcbi8vIGVkaXRvciBhbmQgcGxheWVyLlxuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnRXhwbG9yYXRpb25IdG1sRm9ybWF0dGVyU2VydmljZScsIFtcbiAgICAnJGZpbHRlcicsICdFeHRlbnNpb25UYWdBc3NlbWJsZXJTZXJ2aWNlJywgJ0h0bWxFc2NhcGVyU2VydmljZScsXG4gICAgZnVuY3Rpb24gKCRmaWx0ZXIsIEV4dGVuc2lvblRhZ0Fzc2VtYmxlclNlcnZpY2UsIEh0bWxFc2NhcGVyU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW50ZXJhY3Rpb25JZCAtIFRoZSBpbnRlcmFjdGlvbiBpZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbnRlcmFjdGlvbkN1c3RvbWl6YXRpb25BcmdTcGVjcyAtIFRoZSB2YXJpb3VzXG4gICAgICAgICAgICAgKiAgIGF0dHJpYnV0ZXMgdGhhdCB0aGUgaW50ZXJhY3Rpb24gZGVwZW5kcyBvbi5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyZW50SGFzTGFzdEFuc3dlclByb3BlcnR5IC0gSWYgdGhpcyBmdW5jdGlvbiBpc1xuICAgICAgICAgICAgICogICBjYWxsZWQgaW4gdGhlIGV4cGxvcmF0aW9uX3BsYXllciB2aWV3IChpbmNsdWRpbmcgdGhlIHByZXZpZXcgbW9kZSksXG4gICAgICAgICAgICAgKiAgIGNhbGxlcnMgc2hvdWxkIGVuc3VyZSB0aGF0IHBhcmVudEhhc0xhc3RBbnN3ZXJQcm9wZXJ0eSBpcyBzZXQgdG9cbiAgICAgICAgICAgICAqICAgdHJ1ZSBhbmQgJHNjb3BlLmxhc3RBbnN3ZXIgPVxuICAgICAgICAgICAgICogICBQbGF5ZXJUcmFuc2NyaXB0U2VydmljZS5nZXRMYXN0QW5zd2VyT25EaXNwbGF5ZWRDYXJkKGluZGV4KSBpcyBzZXQgb25cbiAgICAgICAgICAgICAqICAgdGhlIHBhcmVudCBjb250cm9sbGVyIG9mIHRoZSByZXR1cm5lZCB0YWcuXG4gICAgICAgICAgICAgKiAgIE90aGVyd2lzZSwgcGFyZW50SGFzTGFzdEFuc3dlclByb3BlcnR5IHNob3VsZCBiZSBzZXQgdG8gZmFsc2UuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWxGb3JGb2N1c1RhcmdldCAtIFRoZSBsYWJlbCBmb3Igc2V0dGluZyBmb2N1cyBvblxuICAgICAgICAgICAgICogICB0aGUgaW50ZXJhY3Rpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldEludGVyYWN0aW9uSHRtbDogZnVuY3Rpb24gKGludGVyYWN0aW9uSWQsIGludGVyYWN0aW9uQ3VzdG9taXphdGlvbkFyZ1NwZWNzLCBwYXJlbnRIYXNMYXN0QW5zd2VyUHJvcGVydHksIGxhYmVsRm9yRm9jdXNUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaHRtbEludGVyYWN0aW9uSWQgPSAkZmlsdGVyKCdjYW1lbENhc2VUb0h5cGhlbnMnKShpbnRlcmFjdGlvbklkKTtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9ICQoJzxvcHBpYS1pbnRlcmFjdGl2ZS0nICsgaHRtbEludGVyYWN0aW9uSWQgKyAnPicpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSAoRXh0ZW5zaW9uVGFnQXNzZW1ibGVyU2VydmljZS5mb3JtYXRDdXN0b21pemF0aW9uQXJnQXR0cnMoZWxlbWVudCwgaW50ZXJhY3Rpb25DdXN0b21pemF0aW9uQXJnU3BlY3MpKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmF0dHIoJ2xhc3QtYW5zd2VyJywgcGFyZW50SGFzTGFzdEFuc3dlclByb3BlcnR5ID9cbiAgICAgICAgICAgICAgICAgICAgJ2xhc3RBbnN3ZXInIDogJ251bGwnKTtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxGb3JGb2N1c1RhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmF0dHIoJ2xhYmVsLWZvci1mb2N1cy10YXJnZXQnLCBsYWJlbEZvckZvY3VzVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0KDApLm91dGVySFRNTDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRBbnN3ZXJIdG1sOiBmdW5jdGlvbiAoYW5zd2VyLCBpbnRlcmFjdGlvbklkLCBpbnRlcmFjdGlvbkN1c3RvbWl6YXRpb25BcmdzKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhzbGwpOiBHZXQgcmlkIG9mIHRoaXMgc3BlY2lhbCBjYXNlIGZvciBtdWx0aXBsZSBjaG9pY2UuXG4gICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uQ2hvaWNlcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGludGVyYWN0aW9uQ3VzdG9taXphdGlvbkFyZ3MuY2hvaWNlcykge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbkNob2ljZXMgPSBpbnRlcmFjdGlvbkN1c3RvbWl6YXRpb25BcmdzLmNob2ljZXMudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBlbCA9ICQoJzxvcHBpYS1yZXNwb25zZS0nICsgJGZpbHRlcignY2FtZWxDYXNlVG9IeXBoZW5zJykoaW50ZXJhY3Rpb25JZCkgKyAnPicpO1xuICAgICAgICAgICAgICAgIGVsLmF0dHIoJ2Fuc3dlcicsIEh0bWxFc2NhcGVyU2VydmljZS5vYmpUb0VzY2FwZWRKc29uKGFuc3dlcikpO1xuICAgICAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbkNob2ljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuYXR0cignY2hvaWNlcycsIEh0bWxFc2NhcGVyU2VydmljZS5vYmpUb0VzY2FwZWRKc29uKGludGVyYWN0aW9uQ2hvaWNlcykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKCQoJzxkaXY+JykuYXBwZW5kKGVsKSkuaHRtbCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFNob3J0QW5zd2VySHRtbDogZnVuY3Rpb24gKGFuc3dlciwgaW50ZXJhY3Rpb25JZCwgaW50ZXJhY3Rpb25DdXN0b21pemF0aW9uQXJncykge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8oc2xsKTogR2V0IHJpZCBvZiB0aGlzIHNwZWNpYWwgY2FzZSBmb3IgbXVsdGlwbGUgY2hvaWNlLlxuICAgICAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbkNob2ljZXMgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbkN1c3RvbWl6YXRpb25BcmdzLmNob2ljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25DaG9pY2VzID0gaW50ZXJhY3Rpb25DdXN0b21pemF0aW9uQXJncy5jaG9pY2VzLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZWwgPSAkKCc8b3BwaWEtc2hvcnQtcmVzcG9uc2UtJyArICRmaWx0ZXIoJ2NhbWVsQ2FzZVRvSHlwaGVucycpKGludGVyYWN0aW9uSWQpICsgJz4nKTtcbiAgICAgICAgICAgICAgICBlbC5hdHRyKCdhbnN3ZXInLCBIdG1sRXNjYXBlclNlcnZpY2Uub2JqVG9Fc2NhcGVkSnNvbihhbnN3ZXIpKTtcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJhY3Rpb25DaG9pY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmF0dHIoJ2Nob2ljZXMnLCBIdG1sRXNjYXBlclNlcnZpY2Uub2JqVG9Fc2NhcGVkSnNvbihpbnRlcmFjdGlvbkNob2ljZXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICgkKCc8c3Bhbj4nKS5hcHBlbmQoZWwpKS5odG1sKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFV0aWxpdHkgc2VydmljZXMgZm9yIGV4cGxvcmF0aW9ucyB3aGljaCBtYXkgYmUgc2hhcmVkIGJ5IGJvdGhcbiAqIHRoZSBsZWFybmVyIGFuZCBlZGl0b3Igdmlld3MuXG4gKi9cbnJlcXVpcmUoJ2ZpbHRlcnMvc3RyaW5nLXV0aWxpdHktZmlsdGVycy9jYW1lbC1jYXNlLXRvLWh5cGhlbnMuZmlsdGVyLnRzJyk7XG4vLyBTZXJ2aWNlIGZvciBhc3NlbWJsaW5nIGV4dGVuc2lvbiB0YWdzIChmb3IgaW50ZXJhY3Rpb25zKS5cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ0V4dGVuc2lvblRhZ0Fzc2VtYmxlclNlcnZpY2UnLCBbXG4gICAgJyRmaWx0ZXInLCAnSHRtbEVzY2FwZXJTZXJ2aWNlJywgZnVuY3Rpb24gKCRmaWx0ZXIsIEh0bWxFc2NhcGVyU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0Q3VzdG9taXphdGlvbkFyZ0F0dHJzOiBmdW5jdGlvbiAoZWxlbWVudCwgY3VzdG9taXphdGlvbkFyZ1NwZWNzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgY2FTcGVjTmFtZSBpbiBjdXN0b21pemF0aW9uQXJnU3BlY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhU3BlY1ZhbHVlID0gY3VzdG9taXphdGlvbkFyZ1NwZWNzW2NhU3BlY05hbWVdLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmF0dHIoJGZpbHRlcignY2FtZWxDYXNlVG9IeXBoZW5zJykoY2FTcGVjTmFtZSkgKyAnLXdpdGgtdmFsdWUnLCBIdG1sRXNjYXBlclNlcnZpY2Uub2JqVG9Fc2NhcGVkSnNvbihjYVNwZWNWYWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbGl0eSBzZXJ2aWNlIGZvciBzYXZpbmcgZGF0YSBsb2NhbGx5IG9uIHRoZSBjbGllbnQgbWFjaGluZS5cbiAqL1xucmVxdWlyZSgnZG9tYWluL2V4cGxvcmF0aW9uL0V4cGxvcmF0aW9uRHJhZnRPYmplY3RGYWN0b3J5LnRzJyk7XG4vLyBTZXJ2aWNlIGZvciBzYXZpbmcgZXhwbG9yYXRpb24gZHJhZnQgY2hhbmdlcyB0byBsb2NhbCBzdG9yYWdlLlxuLy9cbi8vIE5vdGUgdGhhdCB0aGUgZHJhZnQgaXMgb25seSBzYXZlZCBpZiBsb2NhbFN0b3JhZ2UgZXhpc3RzIGFuZCB3b3Jrc1xuLy8gKGkuZS4gaGFzIHN0b3JhZ2UgY2FwYWNpdHkpLlxuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnTG9jYWxTdG9yYWdlU2VydmljZScsIFtcbiAgICAnRXhwbG9yYXRpb25EcmFmdE9iamVjdEZhY3RvcnknLFxuICAgIGZ1bmN0aW9uIChFeHBsb3JhdGlvbkRyYWZ0T2JqZWN0RmFjdG9yeSkge1xuICAgICAgICAvLyBDaGVjayB0aGF0IGxvY2FsIHN0b3JhZ2UgZXhpc3RzIGFuZCB3b3JrcyBhcyBleHBlY3RlZC5cbiAgICAgICAgLy8gSWYgaXQgZG9lcyBzdG9yYWdlIHN0b3JlcyB0aGUgbG9jYWxTdG9yYWdlIG9iamVjdCxcbiAgICAgICAgLy8gZWxzZSBzdG9yYWdlIGlzIHVuZGVmaW5lZCBvciBmYWxzZS5cbiAgICAgICAgdmFyIHN0b3JhZ2UgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRlc3QgPSAndGVzdCc7XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0ZXN0LCB0ZXN0KTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0ZXN0KSA9PT0gdGVzdDtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0ZXN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICYmIGxvY2FsU3RvcmFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleGNlcHRpb24pIHsgfVxuICAgICAgICB9KCkpO1xuICAgICAgICB2YXIgTEFTVF9TRUxFQ1RFRF9UUkFOU0xBVElPTl9MQU5HVUFHRV9LRVkgPSAoJ2xhc3Rfc2VsZWN0ZWRfdHJhbnNsYXRpb25fbGFuZycpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlIHRoZSBrZXkgdG8gYWNjZXNzIHRoZSBjaGFuZ2VMaXN0IGluIGxvY2FsU3RvcmFnZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXhwbG9yYXRpb25JZCAtIFRoZSBleHBsb3JhdGlvbiBpZCBvZiB0aGUgY2hhbmdlTGlzdFxuICAgICAgICAgKiAgIHRvIGJlIGFjY2Vzc2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIF9jcmVhdGVFeHBsb3JhdGlvbkRyYWZ0S2V5ID0gZnVuY3Rpb24gKGV4cGxvcmF0aW9uSWQpIHtcbiAgICAgICAgICAgIHJldHVybiAnZHJhZnRfJyArIGV4cGxvcmF0aW9uSWQ7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENoZWNrIHRoYXQgbG9jYWxTdG9yYWdlIGlzIGF2YWlsYWJsZSB0byB0aGUgY2xpZW50LlxuICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWZmIHRoZSBjbGllbnQgaGFzIGFjY2VzcyB0byBsb2NhbFN0b3JhZ2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlzU3RvcmFnZUF2YWlsYWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCb29sZWFuKHN0b3JhZ2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2F2ZSB0aGUgZ2l2ZW4gY2hhbmdlTGlzdCB0byBsb2NhbFN0b3JhZ2UgYWxvbmcgd2l0aCBpdHNcbiAgICAgICAgICAgICAqIGRyYWZ0Q2hhbmdlTGlzdElkXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXhwbG9yYXRpb25JZCAtIFRoZSBpZCBvZiB0aGUgZXhwbG9yYXRpb25cbiAgICAgICAgICAgICAqICAgYXNzb2NpYXRlZCB3aXRoIHRoZSBjaGFuZ2VMaXN0IHRvIGJlIHNhdmVkLlxuICAgICAgICAgICAgICogQHBhcmFtIHtMaXN0fSBjaGFuZ2VMaXN0IC0gVGhlIGV4cGxvcmF0aW9uIGNoYW5nZSBsaXN0IHRvIGJlIHNhdmVkLlxuICAgICAgICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfSBkcmFmdENoYW5nZUxpc3RJZCAtIFRoZSBpZCBvZiB0aGUgZHJhZnQgdG8gYmUgc2F2ZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNhdmVFeHBsb3JhdGlvbkRyYWZ0OiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCwgY2hhbmdlTGlzdCwgZHJhZnRDaGFuZ2VMaXN0SWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYWxTYXZlS2V5ID0gX2NyZWF0ZUV4cGxvcmF0aW9uRHJhZnRLZXkoZXhwbG9yYXRpb25JZCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyYWZ0RGljdCA9IEV4cGxvcmF0aW9uRHJhZnRPYmplY3RGYWN0b3J5LnRvTG9jYWxTdG9yYWdlRGljdChjaGFuZ2VMaXN0LCBkcmFmdENoYW5nZUxpc3RJZCk7XG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0SXRlbShsb2NhbFNhdmVLZXksIEpTT04uc3RyaW5naWZ5KGRyYWZ0RGljdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHJpZXZlIHRoZSBsb2NhbCBzYXZlIG9mIHRoZSBjaGFuZ2VMaXN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW5cbiAgICAgICAgICAgICAqIGV4cGxvcmF0aW9uIGlkLlxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGV4cGxvcmF0aW9uSWQgLSBUaGUgZXhwbG9yYXRpb24gaWQgb2YgdGhlIGNoYW5nZSBsaXN0XG4gICAgICAgICAgICAgKiAgIHRvIGJlIHJldHJpZXZlZC5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBsb2NhbCBzYXZlIGRyYWZ0IG9iamVjdCBpZiBpdCBleGlzdHMsXG4gICAgICAgICAgICAgKiAgIGVsc2UgbnVsbC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0RXhwbG9yYXRpb25EcmFmdDogZnVuY3Rpb24gKGV4cGxvcmF0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhZnREaWN0ID0gSlNPTi5wYXJzZShzdG9yYWdlLmdldEl0ZW0oX2NyZWF0ZUV4cGxvcmF0aW9uRHJhZnRLZXkoZXhwbG9yYXRpb25JZCkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWZ0RGljdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV4cGxvcmF0aW9uRHJhZnRPYmplY3RGYWN0b3J5LmNyZWF0ZUZyb21Mb2NhbFN0b3JhZ2VEaWN0KGRyYWZ0RGljdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW1vdmUgdGhlIGxvY2FsIHNhdmUgb2YgdGhlIGNoYW5nZUxpc3QgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlblxuICAgICAgICAgICAgICogZXhwbG9yYXRpb24gaWQuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXhwbG9yYXRpb25JZCAtIFRoZSBleHBsb3JhdGlvbiBpZCBvZiB0aGUgY2hhbmdlIGxpc3RcbiAgICAgICAgICAgICAqICAgdG8gYmUgcmVtb3ZlZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmVtb3ZlRXhwbG9yYXRpb25EcmFmdDogZnVuY3Rpb24gKGV4cGxvcmF0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZSkge1xuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oX2NyZWF0ZUV4cGxvcmF0aW9uRHJhZnRLZXkoZXhwbG9yYXRpb25JZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNhdmUgdGhlIGdpdmVuIGxhbmd1YWdlIGNvZGUgdG8gbG9jYWxTdG9yYWdlIGFsb25nLlxuICAgICAgICAgICAgICogQHBhcmFtIHtMaXN0fSBjaGFuZ2VMaXN0IC0gVGhlIGxhc3Qgc2VsZWN0ZWQgbGFuZ3VhZ2UgY29kZSB0byBiZSBzYXZlZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdXBkYXRlTGFzdFNlbGVjdGVkVHJhbnNsYXRpb25MYW5ndWFnZUNvZGU6IGZ1bmN0aW9uIChsYW5ndWFnZUNvZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZSkge1xuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldEl0ZW0oTEFTVF9TRUxFQ1RFRF9UUkFOU0xBVElPTl9MQU5HVUFHRV9LRVksIGxhbmd1YWdlQ29kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0cmlldmUgdGhlIGxvY2FsIHNhdmUgb2YgdGhlIGxhc3Qgc2VsZWN0ZWQgbGFuZ3VhZ2UgZm9yIHRyYW5zbGF0aW9uLlxuICAgICAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gVGhlIGxvY2FsIHNhdmUgb2YgdGhlIGxhc3Qgc2VsZWN0ZWQgbGFuZ3VhZ2UgZm9yXG4gICAgICAgICAgICAgKiAgIHRyYW5zbGF0aW9uIGlmIGl0IGV4aXN0cywgZWxzZSBudWxsLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRMYXN0U2VsZWN0ZWRUcmFuc2xhdGlvbkxhbmd1YWdlQ29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChzdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZUNvZGUgPSAoc3RvcmFnZS5nZXRJdGVtKExBU1RfU0VMRUNURURfVFJBTlNMQVRJT05fTEFOR1VBR0VfS0VZKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsYW5ndWFnZUNvZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3Igc2VuZGluZyBtZXNzYWdlcyB0byBhIHBhcmVudCBpZnJhbWUuIEFsbCBvdXRib3VuZFxuICogY29tbXVuaWNhdGlvbiB3aXRoIGEgcGFyZW50IGlmcmFtZSBzaG91bGQgcGFzcyB0aHJvdWdoIGhlcmUuIChUaGlzXG4gKiBjb21tdW5pY2F0aW9uIHNob3VsZCBiZSBvdXRib3VuZCBvbmx5OyByZXZlcnNlIGNvbW11bmljYXRpb24gc2hvdWxkIE5PVFxuICogYmUgYXR0ZW1wdGVkIGR1ZSB0byBjcm9zcy1kb21haW4gc2VjdXJpdHkgaXNzdWVzLilcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnTWVzc2VuZ2VyU2VydmljZScsIFtcbiAgICAnJGxvZycsICckd2luZG93JywgZnVuY3Rpb24gKCRsb2csICR3aW5kb3cpIHtcbiAgICAgICAgdmFyIGlzUG9zaXRpdmVJbnRlZ2VyID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIG4gPT09ICdudW1iZXInICYmIG4gJSAxID09PSAwICYmIG4gPiAwKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGlzQm9vbGVhbiA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGIgPT09ICdib29sZWFuJztcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIFNVUFBPUlRFRF9IQVNIRElDVF9WRVJTSU9OUyA9IFtcbiAgICAgICAgICAgICcwLjAuMCcsICcwLjAuMScsICcwLjAuMicsICcwLjAuMydcbiAgICAgICAgXTtcbiAgICAgICAgdmFyIE1FU1NBR0VfVkFMSURBVE9SUyA9IHtcbiAgICAgICAgICAgIGhlaWdodENoYW5nZTogZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNQb3NpdGl2ZUludGVnZXIocGF5bG9hZC5oZWlnaHQpICYmIGlzQm9vbGVhbihwYXlsb2FkLnNjcm9sbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXhwbG9yYXRpb25Mb2FkZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZVRyYW5zaXRpb246IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4ocGF5bG9hZC5vbGRTdGF0ZU5hbWUpIHx8IEJvb2xlYW4ocGF5bG9hZC5uZXdTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4cGxvcmF0aW9uUmVzZXQ6IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4ocGF5bG9hZC5zdGF0ZU5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4cGxvcmF0aW9uQ29tcGxldGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRQYXlsb2FkID0ge1xuICAgICAgICAgICAgaGVpZ2h0Q2hhbmdlOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogZGF0YS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogZGF0YS5zY3JvbGxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4cGxvcmF0aW9uTG9hZGVkOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uVmVyc2lvbjogZGF0YS5leHBsb3JhdGlvblZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uVGl0bGU6IGRhdGEuZXhwbG9yYXRpb25UaXRsZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVUcmFuc2l0aW9uOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uVmVyc2lvbjogZGF0YS5leHBsb3JhdGlvblZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIG9sZFN0YXRlTmFtZTogZGF0YS5vbGRTdGF0ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGpzb25BbnN3ZXI6IGRhdGEuanNvbkFuc3dlcixcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGVOYW1lOiBkYXRhLm5ld1N0YXRlTmFtZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXhwbG9yYXRpb25Db21wbGV0ZWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbG9yYXRpb25WZXJzaW9uOiBkYXRhLmV4cGxvcmF0aW9uVmVyc2lvblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gREVQUkVDQVRFRFxuICAgICAgICAgICAgZXhwbG9yYXRpb25SZXNldDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZU5hbWU6IGRhdGFcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgbWVzc2VuZ2VyID0ge1xuICAgICAgICAgICAgSEVJR0hUX0NIQU5HRTogJ2hlaWdodENoYW5nZScsXG4gICAgICAgICAgICBFWFBMT1JBVElPTl9MT0FERUQ6ICdleHBsb3JhdGlvbkxvYWRlZCcsXG4gICAgICAgICAgICBTVEFURV9UUkFOU0lUSU9OOiAnc3RhdGVUcmFuc2l0aW9uJyxcbiAgICAgICAgICAgIEVYUExPUkFUSU9OX1JFU0VUOiAnZXhwbG9yYXRpb25SZXNldCcsXG4gICAgICAgICAgICBFWFBMT1JBVElPTl9DT01QTEVURUQ6ICdleHBsb3JhdGlvbkNvbXBsZXRlZCcsXG4gICAgICAgICAgICBzZW5kTWVzc2FnZTogZnVuY3Rpb24gKG1lc3NhZ2VUaXRsZSwgbWVzc2FnZURhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPKHNsbCk6IEZvciB0aGUgc3RhdGVUcmFuc2l0aW9uIGFuZCBleHBsb3JhdGlvbkNvbXBsZXRlZCBldmVudHMsXG4gICAgICAgICAgICAgICAgLy8gd2Ugbm93IHNlbmQgcGFyYW1WYWx1ZXMgaW4gdGhlIG1lc3NhZ2VEYXRhLiBXZSBzaG91bGQgYnJvYWRjYXN0IHRoZXNlXG4gICAgICAgICAgICAgICAgLy8gdG8gdGhlIHBhcmVudCBwYWdlIGFzIHdlbGwuXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhzbGwpOiBEZWxldGUvZGVwcmVjYXRlICdyZXNldCBleHBsb3JhdGlvbicgZnJvbSB0aGUgbGlzdCBvZlxuICAgICAgICAgICAgICAgIC8vIGV2ZW50cyBzZW50IHRvIGEgY29udGFpbmVyIHBhZ2UuXG4gICAgICAgICAgICAgICAgLy8gT25seSBzZW5kIGEgbWVzc2FnZSB0byB0aGUgcGFyZW50IGlmIHRoZSBvcHBpYSB3aW5kb3cgaXMgaWZyYW1lZCBhbmRcbiAgICAgICAgICAgICAgICAvLyBhIGhhc2ggaXMgcGFzc2VkIGluLlxuICAgICAgICAgICAgICAgIHZhciByYXdIYXNoID0gJHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgICAgICBpZiAoJHdpbmRvdy5wYXJlbnQgIT09ICR3aW5kb3cgJiYgcmF3SGFzaCAmJlxuICAgICAgICAgICAgICAgICAgICBNRVNTQUdFX1ZBTElEQVRPUlMuaGFzT3duUHJvcGVydHkobWVzc2FnZVRpdGxlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQcm90cmFjdG9yIHRlc3RzIG1heSBwcmVwZW5kIGEgLyB0byB0aGlzIGhhc2gsIHdoaWNoIHdlIHJlbW92ZTpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc2ggPSAocmF3SGFzaC5jaGFyQXQoMCkgPT09ICcvJykgPyByYXdIYXNoLnN1YnN0cmluZygxKSA6IHJhd0hhc2g7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNoUGFydHMgPSBoYXNoLnNwbGl0KCcmJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNoRGljdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb246IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNyZXQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdpZDogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhc2hQYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc2hQYXJ0c1tpXS5pbmRleE9mKCc9JykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5lcnJvcignSW52YWxpZCBoYXNoIGZvciBlbWJlZGRpbmc6ICcgKyBoYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yTG9jYXRpb24gPSBoYXNoUGFydHNbaV0uaW5kZXhPZignPScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzaERpY3RbaGFzaFBhcnRzW2ldLnN1YnN0cmluZygwLCBzZXBhcmF0b3JMb2NhdGlvbildID0gKGhhc2hQYXJ0c1tpXS5zdWJzdHJpbmcoc2VwYXJhdG9yTG9jYXRpb24gKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNoRGljdC52ZXJzaW9uIHx8ICFoYXNoRGljdC5zZWNyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2cuZXJyb3IoJ0ludmFsaWQgaGFzaCBmb3IgZW1iZWRkaW5nOiAnICsgaGFzaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKFNVUFBPUlRFRF9IQVNIRElDVF9WRVJTSU9OUy5pbmRleE9mKGhhc2hEaWN0LnZlcnNpb24pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5pbmZvKCdQb3N0aW5nIG1lc3NhZ2UgdG8gcGFyZW50OiAnICsgbWVzc2FnZVRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXlsb2FkID0gZ2V0UGF5bG9hZFttZXNzYWdlVGl0bGVdKG1lc3NhZ2VEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghTUVTU0FHRV9WQUxJREFUT1JTW21lc3NhZ2VUaXRsZV0ocGF5bG9hZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmVycm9yKCdFcnJvciB2YWxpZGF0aW5nIHBheWxvYWQ6ICcgKyBwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmluZm8ocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqVG9TZW5kVG9QYXJlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG1lc3NhZ2VUaXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVRhZ0lkOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3JldDogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNoRGljdC52ZXJzaW9uID09PSAnMC4wLjAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialRvU2VuZFRvUGFyZW50LnNvdXJjZVRhZ0lkID0gaGFzaERpY3QudGFnaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqVG9TZW5kVG9QYXJlbnQuc2VjcmV0ID0gaGFzaERpY3Quc2VjcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHRhcmdldE9yaWdpbiBuZWVkcyB0byBiZSAqIGJlY2F1c2UgYW55IHBhZ2UgY2FuIGlmcmFtZSBhblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXhwbG9yYXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShvYmpUb1NlbmRUb1BhcmVudCksICcqJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmVycm9yKCdVbmtub3duIHZlcnNpb24gZm9yIGVtYmVkZGluZzogJyArIGhhc2hEaWN0LnZlcnNpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbWVzc2VuZ2VyO1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0byBzZXQgdGhlIHRpdGxlIG9mIHRoZSBwYWdlLlxuICovXG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgcGxhdGZvcm1fYnJvd3Nlcl8xID0gcmVxdWlyZShcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXJcIik7XG52YXIgUGFnZVRpdGxlU2VydmljZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYWdlVGl0bGVTZXJ2aWNlKHRpdGxlU2VydmljZSkge1xuICAgICAgICB0aGlzLnRpdGxlU2VydmljZSA9IHRpdGxlU2VydmljZTtcbiAgICB9XG4gICAgUGFnZVRpdGxlU2VydmljZS5wcm90b3R5cGUuc2V0UGFnZVRpdGxlID0gZnVuY3Rpb24gKHRpdGxlKSB7XG4gICAgICAgIHRoaXMudGl0bGVTZXJ2aWNlLnNldFRpdGxlKHRpdGxlKTtcbiAgICB9O1xuICAgIHZhciBfYTtcbiAgICBQYWdlVGl0bGVTZXJ2aWNlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFt0eXBlb2YgKF9hID0gdHlwZW9mIHBsYXRmb3JtX2Jyb3dzZXJfMS5UaXRsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwbGF0Zm9ybV9icm93c2VyXzEuVGl0bGUpID09PSBcImZ1bmN0aW9uXCIgPyBfYSA6IE9iamVjdF0pXG4gICAgXSwgUGFnZVRpdGxlU2VydmljZSk7XG4gICAgcmV0dXJuIFBhZ2VUaXRsZVNlcnZpY2U7XG59KCkpO1xuZXhwb3J0cy5QYWdlVGl0bGVTZXJ2aWNlID0gUGFnZVRpdGxlU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1BhZ2VUaXRsZVNlcnZpY2UnLCBzdGF0aWNfMS5kb3duZ3JhZGVJbmplY3RhYmxlKFBhZ2VUaXRsZVNlcnZpY2UpKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3IgZmV0Y2hpbmcgaXNzdWVzIGFuZCBwbGF5dGhyb3VnaHMgZnJvbSB0aGUgYmFja2VuZC5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3N0YXRpc3RpY3MvUGxheXRocm91Z2hPYmplY3RGYWN0b3J5LnRzJyk7XG5yZXF1aXJlKCdkb21haW4vc3RhdGlzdGljcy9QbGF5dGhyb3VnaElzc3VlT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvc2VydmljZXMuY29uc3RhbnRzLmFqcy50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnUGxheXRocm91Z2hJc3N1ZXNCYWNrZW5kQXBpU2VydmljZScsIFtcbiAgICAnJGh0dHAnLCAnJHEnLCAnUGxheXRocm91Z2hJc3N1ZU9iamVjdEZhY3RvcnknLCAnUGxheXRocm91Z2hPYmplY3RGYWN0b3J5JyxcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCAnRkVUQ0hfSVNTVUVTX1VSTCcsICdGRVRDSF9QTEFZVEhST1VHSF9VUkwnLFxuICAgICdSRVNPTFZFX0lTU1VFX1VSTCcsXG4gICAgZnVuY3Rpb24gKCRodHRwLCAkcSwgUGxheXRocm91Z2hJc3N1ZU9iamVjdEZhY3RvcnksIFBsYXl0aHJvdWdoT2JqZWN0RmFjdG9yeSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UsIEZFVENIX0lTU1VFU19VUkwsIEZFVENIX1BMQVlUSFJPVUdIX1VSTCwgUkVTT0xWRV9JU1NVRV9VUkwpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtQbGF5dGhyb3VnaElzc3VlW119ICovXG4gICAgICAgIHZhciBjYWNoZWRJc3N1ZXMgPSBudWxsO1xuICAgICAgICB2YXIgZ2V0RnVsbElzc3Vlc1VybCA9IGZ1bmN0aW9uIChleHBsb3JhdGlvbklkKSB7XG4gICAgICAgICAgICByZXR1cm4gVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuaW50ZXJwb2xhdGVVcmwoRkVUQ0hfSVNTVUVTX1VSTCwge1xuICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uX2lkOiBleHBsb3JhdGlvbklkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdldEZ1bGxQbGF5dGhyb3VnaFVybCA9IGZ1bmN0aW9uIChleHBJZCwgcGxheXRocm91Z2hJZCkge1xuICAgICAgICAgICAgcmV0dXJuIFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKEZFVENIX1BMQVlUSFJPVUdIX1VSTCwge1xuICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uX2lkOiBleHBJZCxcbiAgICAgICAgICAgICAgICBwbGF5dGhyb3VnaF9pZDogcGxheXRocm91Z2hJZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRGdWxsUmVzb2x2ZUlzc3VlVXJsID0gZnVuY3Rpb24gKGV4cGxvcmF0aW9uSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5pbnRlcnBvbGF0ZVVybChSRVNPTFZFX0lTU1VFX1VSTCwge1xuICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uX2lkOiBleHBsb3JhdGlvbklkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZldGNoSXNzdWVzOiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCwgZXhwbG9yYXRpb25WZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZElzc3VlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVzb2x2ZShjYWNoZWRJc3N1ZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldChnZXRGdWxsSXNzdWVzVXJsKGV4cGxvcmF0aW9uSWQpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBfdmVyc2lvbjogZXhwbG9yYXRpb25WZXJzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5yZXNvbHZlZElzc3VlQmFja2VuZERpY3RzID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlZElzc3VlcyA9IHVucmVzb2x2ZWRJc3N1ZUJhY2tlbmREaWN0cy5tYXAoUGxheXRocm91Z2hJc3N1ZU9iamVjdEZhY3RvcnkuY3JlYXRlRnJvbUJhY2tlbmREaWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRJc3N1ZXM7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmZXRjaFBsYXl0aHJvdWdoOiBmdW5jdGlvbiAoZXhwSWQsIHBsYXl0aHJvdWdoSWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGdldEZ1bGxQbGF5dGhyb3VnaFVybChleHBJZCwgcGxheXRocm91Z2hJZCkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwbGF5dGhyb3VnaEJhY2tlbmREaWN0ID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBsYXl0aHJvdWdoT2JqZWN0RmFjdG9yeS5jcmVhdGVGcm9tQmFja2VuZERpY3QocGxheXRocm91Z2hCYWNrZW5kRGljdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzb2x2ZUlzc3VlOiBmdW5jdGlvbiAoaXNzdWVUb1Jlc29sdmUsIGV4cElkLCBleHBWZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoZ2V0RnVsbFJlc29sdmVJc3N1ZVVybChleHBJZCksIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwX2lzc3VlX2RpY3Q6IGlzc3VlVG9SZXNvbHZlLnRvQmFja2VuZERpY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgZXhwX3ZlcnNpb246IGV4cFZlcnNpb25cbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzc3VlSW5kZXggPSBjYWNoZWRJc3N1ZXMuZmluZEluZGV4KGZ1bmN0aW9uIChpc3N1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKGlzc3VlLCBpc3N1ZVRvUmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNzdWVJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnZhbGlkSXNzdWVFcnJvciA9IG5ldyBFcnJvcignQW4gaXNzdWUgd2hpY2ggd2FzIG5vdCBmZXRjaGVkIGZyb20gdGhlIGJhY2tlbmQgaGFzIGJlZW4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Jlc29sdmVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGludmFsaWRJc3N1ZUVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlZElzc3Vlcy5zcGxpY2UoaXNzdWVJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNlcnZpY2UgZm9yIHJldHJpZXZpbmcgaXNzdWVzIGFuZCBwbGF5dGhyb3VnaHMuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL1BsYXl0aHJvdWdoSXNzdWVzQmFja2VuZEFwaVNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3BhZ2VzL2V4cGxvcmF0aW9uLWVkaXRvci1wYWdlL3N0YXRpc3RpY3MtdGFiL3NlcnZpY2VzLycgK1xuICAgICdsZWFybmVyLWFjdGlvbi1yZW5kZXIuc2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnUGxheXRocm91Z2hJc3N1ZXNTZXJ2aWNlJywgW1xuICAgICckdWliTW9kYWwnLCAnUGxheXRocm91Z2hJc3N1ZXNCYWNrZW5kQXBpU2VydmljZScsICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgJ0lTU1VFX1RZUEVfQ1lDTElDX1NUQVRFX1RSQU5TSVRJT05TJywgJ0lTU1VFX1RZUEVfRUFSTFlfUVVJVCcsXG4gICAgJ0lTU1VFX1RZUEVfTVVMVElQTEVfSU5DT1JSRUNUX1NVQk1JU1NJT05TJyxcbiAgICBmdW5jdGlvbiAoJHVpYk1vZGFsLCBQbGF5dGhyb3VnaElzc3Vlc0JhY2tlbmRBcGlTZXJ2aWNlLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSwgSVNTVUVfVFlQRV9DWUNMSUNfU1RBVEVfVFJBTlNJVElPTlMsIElTU1VFX1RZUEVfRUFSTFlfUVVJVCwgSVNTVUVfVFlQRV9NVUxUSVBMRV9JTkNPUlJFQ1RfU1VCTUlTU0lPTlMpIHtcbiAgICAgICAgdmFyIGlzc3VlcyA9IG51bGw7XG4gICAgICAgIHZhciBleHBsb3JhdGlvbklkID0gbnVsbDtcbiAgICAgICAgdmFyIGV4cGxvcmF0aW9uVmVyc2lvbiA9IG51bGw7XG4gICAgICAgIHZhciBjdXJyZW50UGxheXRocm91Z2ggPSBudWxsO1xuICAgICAgICB2YXIgcmVuZGVyRWFybHlRdWl0SXNzdWVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1NldmVyYWwgbGVhcm5lcnMgZXhpdGVkIHRoZSBleHBsb3JhdGlvbiBpbiBsZXNzIHRoYW4gYSBtaW51dGUuJztcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlbmRlck11bHRpcGxlSW5jb3JyZWN0SXNzdWVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1NldmVyYWwgbGVhcm5lcnMgc3VibWl0dGVkIGFuc3dlcnMgdG8gY2FyZCBcIicgKyBzdGF0ZU5hbWUgK1xuICAgICAgICAgICAgICAgICdcIiBzZXZlcmFsIHRpbWVzLCB0aGVuIGdhdmUgdXAgYW5kIHF1aXQuJztcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlbmRlckN5Y2xpY1RyYW5zaXRpb25zSXNzdWVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1NldmVyYWwgbGVhcm5lcnMgZW5kZWQgdXAgaW4gYSBjeWNsaWMgbG9vcCByZXZpc2l0aW5nIGNhcmQgXCInICtcbiAgICAgICAgICAgICAgICBzdGF0ZU5hbWUgKyAnXCIgbWFueSB0aW1lcy4nO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVuZGVyRWFybHlRdWl0SXNzdWVTdWdnZXN0aW9ucyA9IGZ1bmN0aW9uIChpc3N1ZSkge1xuICAgICAgICAgICAgdmFyIHN1Z2dlc3Rpb25zID0gW1xuICAgICAgICAgICAgICAgICgnUmV2aWV3IHRoZSBjYXJkcyB1cCB0byBhbmQgaW5jbHVkaW5nIFwiJyArXG4gICAgICAgICAgICAgICAgICAgIGlzc3VlLmlzc3VlQ3VzdG9taXphdGlvbkFyZ3Muc3RhdGVfbmFtZS52YWx1ZSArICdcIiBmb3IgZXJyb3JzLCAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2FtYmlndWl0aWVzLCBvciBpbnN1ZmZpY2llbnQgbW90aXZhdGlvbi4nKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICByZXR1cm4gc3VnZ2VzdGlvbnM7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZW5kZXJNdWx0aXBsZUluY29ycmVjdElzc3VlU3VnZ2VzdGlvbnMgPSBmdW5jdGlvbiAoc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICB2YXIgc3VnZ2VzdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgKCdDaGVjayB0aGUgd29yZGluZyBvZiB0aGUgY2FyZCBcIicgKyBzdGF0ZU5hbWUgKyAnXCIgdG8gZW5zdXJlIGl0IGlzICcgK1xuICAgICAgICAgICAgICAgICAgICAnbm90IGNvbmZ1c2luZy4nKSxcbiAgICAgICAgICAgICAgICAoJ0NvbnNpZGVyIGFkZHJlc3NpbmcgdGhlIGFuc3dlcnMgc3VibWl0dGVkIGluIHRoZSBzYW1wbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICdwbGF5dGhyb3VnaHMgZXhwbGljaXRseSB1c2luZyBhbnN3ZXIgZ3JvdXBzLicpLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHJldHVybiBzdWdnZXN0aW9ucztcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlbmRlckN5Y2xpY1RyYW5zaXRpb25zSXNzdWVTdWdnZXN0aW9ucyA9IGZ1bmN0aW9uIChpc3N1ZSkge1xuICAgICAgICAgICAgdmFyIHN0YXRlTmFtZXMgPSBpc3N1ZS5pc3N1ZUN1c3RvbWl6YXRpb25BcmdzLnN0YXRlX25hbWVzLnZhbHVlO1xuICAgICAgICAgICAgdmFyIGZpbmFsSW5kZXggPSBzdGF0ZU5hbWVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB2YXIgc3VnZ2VzdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgKCdDaGVjayB0aGF0IHRoZSBjb25jZXB0IHByZXNlbnRlZCBpbiBcIicgKyBzdGF0ZU5hbWVzWzBdICsgJ1wiIGhhcyAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2JlZW4gcmVpbmZvcmNlZCBzdWZmaWNpZW50bHkgYnkgdGhlIHRpbWUgdGhlIGxlYXJuZXIgZ2V0cyB0byBcIicgK1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZU5hbWVzW2ZpbmFsSW5kZXhdICsgJ1wiLicpLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHJldHVybiBzdWdnZXN0aW9ucztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8qKiBQcmVwYXJlcyB0aGUgUGxheXRocm91Z2hJc3N1ZXNTZXJ2aWNlIGZvciBzdWJzZXF1ZW50IGNhbGxzIHRvIG90aGVyXG4gICAgICAgICAgICAgKiBmdW5jdGlvbnMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0V4cGxvcmF0aW9uSWQgLSB0aGUgZXhwbG9yYXRpb24gaWQgdGhlIHNlcnZpY2Ugd2lsbFxuICAgICAgICAgICAgICogICAgYmUgdGFyZ2V0aW5nLlxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG5ld0V4cGxvcmF0aW9uVmVyc2lvbiAtIHRoZSB2ZXJzaW9uIG9mIHRoZSBleHBsb3JhdGlvblxuICAgICAgICAgICAgICogICAgdGhlIHNlcnZpY2Ugd2lsbCBiZSB0YXJnZXRpbmcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXRTZXNzaW9uOiBmdW5jdGlvbiAobmV3RXhwbG9yYXRpb25JZCwgbmV3RXhwbG9yYXRpb25WZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgZXhwbG9yYXRpb25JZCA9IG5ld0V4cGxvcmF0aW9uSWQ7XG4gICAgICAgICAgICAgICAgZXhwbG9yYXRpb25WZXJzaW9uID0gbmV3RXhwbG9yYXRpb25WZXJzaW9uO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldElzc3VlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQbGF5dGhyb3VnaElzc3Vlc0JhY2tlbmRBcGlTZXJ2aWNlLmZldGNoSXNzdWVzKGV4cGxvcmF0aW9uSWQsIGV4cGxvcmF0aW9uVmVyc2lvbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UGxheXRocm91Z2g6IGZ1bmN0aW9uIChwbGF5dGhyb3VnaElkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFBsYXl0aHJvdWdoSXNzdWVzQmFja2VuZEFwaVNlcnZpY2UuZmV0Y2hQbGF5dGhyb3VnaChleHBsb3JhdGlvbklkLCBwbGF5dGhyb3VnaElkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW5kZXJJc3N1ZVN0YXRlbWVudDogZnVuY3Rpb24gKGlzc3VlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzc3VlVHlwZSA9IGlzc3VlLmlzc3VlVHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoaXNzdWVUeXBlID09PSBJU1NVRV9UWVBFX0VBUkxZX1FVSVQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlckVhcmx5UXVpdElzc3VlU3RhdGVtZW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlVHlwZSA9PT0gSVNTVUVfVFlQRV9NVUxUSVBMRV9JTkNPUlJFQ1RfU1VCTUlTU0lPTlMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlck11bHRpcGxlSW5jb3JyZWN0SXNzdWVTdGF0ZW1lbnQoaXNzdWUuaXNzdWVDdXN0b21pemF0aW9uQXJncy5zdGF0ZV9uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWVUeXBlID09PSBJU1NVRV9UWVBFX0NZQ0xJQ19TVEFURV9UUkFOU0lUSU9OUykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyQ3ljbGljVHJhbnNpdGlvbnNJc3N1ZVN0YXRlbWVudChpc3N1ZS5pc3N1ZUN1c3RvbWl6YXRpb25BcmdzLnN0YXRlX25hbWVzLnZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVuZGVySXNzdWVTdWdnZXN0aW9uczogZnVuY3Rpb24gKGlzc3VlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzc3VlVHlwZSA9IGlzc3VlLmlzc3VlVHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoaXNzdWVUeXBlID09PSBJU1NVRV9UWVBFX0VBUkxZX1FVSVQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlckVhcmx5UXVpdElzc3VlU3VnZ2VzdGlvbnMoaXNzdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZVR5cGUgPT09IElTU1VFX1RZUEVfTVVMVElQTEVfSU5DT1JSRUNUX1NVQk1JU1NJT05TKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJNdWx0aXBsZUluY29ycmVjdElzc3VlU3VnZ2VzdGlvbnMoaXNzdWUuaXNzdWVDdXN0b21pemF0aW9uQXJncy5zdGF0ZV9uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWVUeXBlID09PSBJU1NVRV9UWVBFX0NZQ0xJQ19TVEFURV9UUkFOU0lUSU9OUykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyQ3ljbGljVHJhbnNpdGlvbnNJc3N1ZVN1Z2dlc3Rpb25zKGlzc3VlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzb2x2ZUlzc3VlOiBmdW5jdGlvbiAoaXNzdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGxheXRocm91Z2hJc3N1ZXNCYWNrZW5kQXBpU2VydmljZS5yZXNvbHZlSXNzdWUoaXNzdWUsIGV4cGxvcmF0aW9uSWQsIGV4cGxvcmF0aW9uVmVyc2lvbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3BlblBsYXl0aHJvdWdoTW9kYWw6IGZ1bmN0aW9uIChwbGF5dGhyb3VnaElkLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGxheXRocm91Z2gocGxheXRocm91Z2hJZCkudGhlbihmdW5jdGlvbiAocGxheXRocm91Z2gpIHtcbiAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldERpcmVjdGl2ZVRlbXBsYXRlVXJsKCcvcGFnZXMvZXhwbG9yYXRpb24tZWRpdG9yLXBhZ2Uvc3RhdGlzdGljcy10YWIvdGVtcGxhdGVzLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGF5dGhyb3VnaC1tb2RhbC50ZW1wbGF0ZS5odG1sJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5dGhyb3VnaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGxheXRocm91Z2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5dGhyb3VnaEluZGV4OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAncGxheXRocm91Z2hJbmRleCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYXl0aHJvdWdoJywgJ0FsZXJ0c1NlcnZpY2UnLCAnTGVhcm5lckFjdGlvblJlbmRlclNlcnZpY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlLCBwbGF5dGhyb3VnaEluZGV4LCBwbGF5dGhyb3VnaCwgQWxlcnRzU2VydmljZSwgTGVhcm5lckFjdGlvblJlbmRlclNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBsYXl0aHJvdWdoSW5kZXggPSBwbGF5dGhyb3VnaEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUJsb2NrcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZWFybmVyQWN0aW9uUmVuZGVyU2VydmljZS5nZXREaXNwbGF5QmxvY2tzKHBsYXl0aHJvdWdoLmFjdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZWREaXNwbGF5QmxvY2tzID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5QmxvY2tzLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2tBY3Rpb25JbmRleE1hcHBpbmcgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlCbG9ja3MucmVkdWNlKGZ1bmN0aW9uIChydW5uaW5nVG90YWwsIGRpc3BsYXlCbG9jaywgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tBY3Rpb25JbmRleE1hcHBpbmdbaV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdUb3RhbCAtIGRpc3BsYXlCbG9jay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2tBY3Rpb25JbmRleE1hcHBpbmdbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHBsYXl0aHJvdWdoLmFjdGlvbnMubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXhIaWRkZW4gPSAkc2NvcGUuZGlzcGxheUJsb2Nrcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0RGlzcGxheUJsb2NrSW5kZXggPSBmdW5jdGlvbiAoZGlzcGxheUJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmRpc3BsYXlCbG9ja3MuaW5kZXhPZihkaXNwbGF5QmxvY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNEaXNwbGF5QmxvY2tPbkluaXREaXNwbGF5ID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmdldERpc3BsYXlCbG9ja0luZGV4KGJsb2NrKSA9PT0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZURpc3BsYXlCbG9ja05hdklkID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmdldERpc3BsYXlCbG9ja0luZGV4KGJsb2NrKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW5kZXJCbG9ja0h0bWwgPSBmdW5jdGlvbiAoZGlzcGxheUJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuZ2V0RGlzcGxheUJsb2NrSW5kZXgoZGlzcGxheUJsb2NrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBMZWFybmVyQWN0aW9uUmVuZGVyU2VydmljZS5yZW5kZXJEaXNwbGF5QmxvY2tIVE1MKGRpc3BsYXlCbG9jaywgYmxvY2tBY3Rpb25JbmRleE1hcHBpbmdbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsZWFybmVyIGFjdGlvbiB3aWh0aW4gdGhlIGRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogYmxvY2suXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7TGVhcm5lckFjdGlvbn0gbGVhcm5lckFjdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtMZWFybmVyQWN0aW9uW119IGRpc3BsYXlCbG9jay5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge2ludH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRMZWFybmVyQWN0aW9uSW5kZXggPSBmdW5jdGlvbiAobGVhcm5lckFjdGlvbiwgZGlzcGxheUJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGxheUJsb2NrLmluZGV4T2YobGVhcm5lckFjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBSZW5kZXJzIHRoZSBIVE1MIG9mIHRoZSBsZWFybmVyIGFjdGlvbi4gVGhlIGluZGV4IG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBsZWFybmVyIGFjdGlvbiB3aWxsIGJlIHRoZSBzdW0gb2YgdGhlIHN0YXJ0aW5nIGFjdGlvbiBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBvZiB0aGUgYmxvY2sgKGEgYmxvY2sgaXMgYSBsaXN0IG9mIGxlYXJuZXIgYWN0aW9ucyBncm91cGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHRvZ2V0aGVyIGZvciBkaXNwbGF5KSBjb21wdXRlZCB1c2luZyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogYmxvY2tBY3Rpb25JbmRleE1hcHBpbmcgZmllbGQgYW5kIHRoZSBpbmRleCBvZiB0aGUgbGVhcm5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBhY3Rpb24gd2l0aGluIHRoZSBibG9jay5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtMZWFybmVyQWN0aW9ufSBsZWFybmVyQWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge2ludH0gYmxvY2tJbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgYmxvY2sgYW1vbmcgYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICB0aGUgZGlzcGxheSBibG9ja3MuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7aW50fSBhY3Rpb25JbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgbGVhcm5lciBhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogIHdpdGhpbiBpdCdzIGRpc3BsYXkgYmxvY2suXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVuZGVyTGVhcm5lckFjdGlvbiA9IGZ1bmN0aW9uIChsZWFybmVyQWN0aW9uLCBibG9ja0luZGV4LCBhY3Rpb25JbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIExlYXJuZXJBY3Rpb25SZW5kZXJTZXJ2aWNlLnJlbmRlckxlYXJuZXJBY3Rpb24obGVhcm5lckFjdGlvbiwgYmxvY2tBY3Rpb25JbmRleE1hcHBpbmdbYmxvY2tJbmRleF0sIGFjdGlvbkluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldFJlbWFpbmluZ0FjdGlvbnNFbGVtZW50cyA9IGZ1bmN0aW9uIChwSWR4LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IGV4cGVjdCBvbmUgZWxlbWVudCB0byBtYXRjaCB0aGUgYmVsb3cgc3RhdGVtZW50IGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGh1cywgd2UgdGFrZSB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncmVtYWluaW5nLWFjdGlvbnMnICsgcElkeC50b1N0cmluZygpICsgaS50b1N0cmluZygpKVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBTaG93cyB0aGUgcmVtYWluaW5nIGRpc3BsYXkgYmxvY2tzIGFuZCB0aGUgYXJyb3cgZGl2LiBJZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB0aGVyZSBpcyBvbmx5IG9uZSBkaXNwbGF5IGJsb2NrLCB0aGUgYXJyb3cgZGl2IGlzIG5vdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaG93biBhdCBhbGwuIElmIHRoZSBjdXJyZW50IHNob3duIGRpc3BsYXkgYmxvY2sgaXMgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHNlY29uZCBsYXN0IGRpc3BsYXkgYmxvY2ssIHRoZSBhcnJvdyBkaXYgaXMgaGlkZGVuIGFmdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHRoZSBmaW5hbCBkaXNwbGF5IGJsb2NrIGlzIHNob3duLiBFbHNlLCB0aGUgZm9sbG93aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGRpc3BsYXkgYmxvY2sgaXMgZGlzcGxheWVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dSZW1haW5pbmdBY3Rpb25zID0gZnVuY3Rpb24gKHBJZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG9ubHkgb25lIGRpc3BsYXkgYmxvY2sgbGVmdCB0byBiZSBzaG93bixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBhcnJvdyBpcyBub3QgcmVxdWlyZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm1heEhpZGRlbiA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFJlbWFpbmluZ0FjdGlvbnNFbGVtZW50cyhwSWR4LCAkc2NvcGUubWF4SGlkZGVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Fycm93RGl2Jykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U2hvd24gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9ICRzY29wZS5tYXhIaWRkZW47IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldFJlbWFpbmluZ0FjdGlvbnNFbGVtZW50cyhwSWR4LCBpKS5zdHlsZS5kaXNwbGF5ID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Jsb2NrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFNob3duID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2hvd24gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UmVtYWluaW5nQWN0aW9uc0VsZW1lbnRzKHBJZHgsIGN1cnJlbnRTaG93biArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnRTaG93biA9PT0gJHNjb3BlLm1heEhpZGRlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UmVtYWluaW5nQWN0aW9uc0VsZW1lbnRzKHBJZHgsICRzY29wZS5tYXhIaWRkZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcnJvd0RpdicpLnN0eWxlLmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UmVtYWluaW5nQWN0aW9uc0VsZW1lbnRzKHBJZHgsIGN1cnJlbnRTaG93biArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmNsZWFyV2FybmluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSBmb3IgcmVjb3JkaW5nIGFuZCBzY3J1dGluaXppbmcgcGxheXRocm91Z2hzLlxuICovXG5yZXF1aXJlKCdkb21haW4vc3RhdGlzdGljcy9MZWFybmVyQWN0aW9uT2JqZWN0RmFjdG9yeS50cycpO1xucmVxdWlyZSgnZG9tYWluL3N0YXRpc3RpY3MvUGxheXRocm91Z2hPYmplY3RGYWN0b3J5LnRzJyk7XG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1N0b3B3YXRjaE9iamVjdEZhY3RvcnkudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0V4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9zZXJ2aWNlcy5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdQbGF5dGhyb3VnaFNlcnZpY2UnLCBbXG4gICAgJyRodHRwJywgJ0V4cGxvcmF0aW9uRmVhdHVyZXNTZXJ2aWNlJywgJ0xlYXJuZXJBY3Rpb25PYmplY3RGYWN0b3J5JyxcbiAgICAnUGxheXRocm91Z2hPYmplY3RGYWN0b3J5JywgJ1N0b3B3YXRjaE9iamVjdEZhY3RvcnknLFxuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsICdBQ1RJT05fVFlQRV9BTlNXRVJfU1VCTUlUJyxcbiAgICAnQUNUSU9OX1RZUEVfRVhQTE9SQVRJT05fUVVJVCcsICdBQ1RJT05fVFlQRV9FWFBMT1JBVElPTl9TVEFSVCcsXG4gICAgJ0NVUlJFTlRfQUNUSU9OX1NDSEVNQV9WRVJTSU9OJywgJ0NVUlJFTlRfSVNTVUVfU0NIRU1BX1ZFUlNJT04nLFxuICAgICdFQVJMWV9RVUlUX1RIUkVTSE9MRF9JTl9TRUNTJywgJ0lTU1VFX1RZUEVfQ1lDTElDX1NUQVRFX1RSQU5TSVRJT05TJyxcbiAgICAnSVNTVUVfVFlQRV9FQVJMWV9RVUlUJywgJ0lTU1VFX1RZUEVfTVVMVElQTEVfSU5DT1JSRUNUX1NVQk1JU1NJT05TJyxcbiAgICAnTlVNX0lOQ09SUkVDVF9BTlNXRVJTX1RIUkVTSE9MRCcsICdOVU1fUkVQRUFURURfQ1lDTEVTX1RIUkVTSE9MRCcsXG4gICAgJ1NUT1JFX1BMQVlUSFJPVUdIX1VSTCcsXG4gICAgZnVuY3Rpb24gKCRodHRwLCBFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZSwgTGVhcm5lckFjdGlvbk9iamVjdEZhY3RvcnksIFBsYXl0aHJvdWdoT2JqZWN0RmFjdG9yeSwgU3RvcHdhdGNoT2JqZWN0RmFjdG9yeSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UsIEFDVElPTl9UWVBFX0FOU1dFUl9TVUJNSVQsIEFDVElPTl9UWVBFX0VYUExPUkFUSU9OX1FVSVQsIEFDVElPTl9UWVBFX0VYUExPUkFUSU9OX1NUQVJULCBDVVJSRU5UX0FDVElPTl9TQ0hFTUFfVkVSU0lPTiwgQ1VSUkVOVF9JU1NVRV9TQ0hFTUFfVkVSU0lPTiwgRUFSTFlfUVVJVF9USFJFU0hPTERfSU5fU0VDUywgSVNTVUVfVFlQRV9DWUNMSUNfU1RBVEVfVFJBTlNJVElPTlMsIElTU1VFX1RZUEVfRUFSTFlfUVVJVCwgSVNTVUVfVFlQRV9NVUxUSVBMRV9JTkNPUlJFQ1RfU1VCTUlTU0lPTlMsIE5VTV9JTkNPUlJFQ1RfQU5TV0VSU19USFJFU0hPTEQsIE5VTV9SRVBFQVRFRF9DWUNMRVNfVEhSRVNIT0xELCBTVE9SRV9QTEFZVEhST1VHSF9VUkwpIHtcbiAgICAgICAgdmFyIHBsYXl0aHJvdWdoID0gbnVsbDtcbiAgICAgICAgdmFyIGV4cFN0b3B3YXRjaCA9IG51bGw7XG4gICAgICAgIHZhciBpc0xlYXJuZXJJblNhbXBsZVBvcHVsYXRpb24gPSBudWxsO1xuICAgICAgICB2YXIgbXVsdGlwbGVJbmNvcnJlY3RTdGF0ZU5hbWUgPSB7XG4gICAgICAgICAgICBzdGF0ZV9uYW1lOiBudWxsLFxuICAgICAgICAgICAgbnVtX3RpbWVzX2luY29ycmVjdDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB2YXIgY3ljbGVJZGVudGlmaWVyID0ge1xuICAgICAgICAgICAgY3ljbGU6IG51bGwsXG4gICAgICAgICAgICBudW1fY3ljbGVzOiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHZhciB2aXNpdGVkU3RhdGVzID0gW107XG4gICAgICAgIHZhciBtaXNUcmFja2VyID0gZmFsc2U7XG4gICAgICAgIHZhciBjc3RUcmFja2VyID0gZmFsc2U7XG4gICAgICAgIHZhciByZW1vdmVPbGRRdWl0QWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHF1aXRBY3Rpb24gPSBwbGF5dGhyb3VnaC5hY3Rpb25zW3BsYXl0aHJvdWdoLmFjdGlvbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAvLyBBZnRlciB0aGUgc2Vjb25kIHF1aXQgYWN0aW9uIGlzIHJlY29yZGVkLCB0aGUgZmlyc3QgcXVpdCBpcyByZW1vdmVkXG4gICAgICAgICAgICAvLyB1c2luZyB0aGlzIG1ldGhvZC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlcmUgYXJlIG9ubHkgdHdvIHF1aXQgYWN0aW9uc1xuICAgICAgICAgICAgLy8gaW4gdGhlIHBsYXl0aHJvdWdoIGFjdGlvbnMgbGlzdCBhdCBhIHRpbWUuXG4gICAgICAgICAgICBwbGF5dGhyb3VnaC5hY3Rpb25zID0gcGxheXRocm91Z2guYWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb24uYWN0aW9uVHlwZSAhPT0gQUNUSU9OX1RZUEVfRVhQTE9SQVRJT05fUVVJVDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGxheXRocm91Z2guYWN0aW9ucy5wdXNoKHF1aXRBY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgX2RldGVybWluZUlmTGVhcm5lcklzSW5TYW1wbGVQb3B1bGF0aW9uID0gZnVuY3Rpb24gKHByb2JhYmlsaXR5KSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSA8IHByb2JhYmlsaXR5O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY3JlYXRlTXVsdGlwbGVJbmNvcnJlY3RJc3N1ZVRyYWNrZXIgPSBmdW5jdGlvbiAoaW5pdFN0YXRlTmFtZSkge1xuICAgICAgICAgICAgaWYgKG1pc1RyYWNrZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtdWx0aXBsZUluY29ycmVjdFN0YXRlTmFtZSA9IHtcbiAgICAgICAgICAgICAgICBzdGF0ZV9uYW1lOiBpbml0U3RhdGVOYW1lLFxuICAgICAgICAgICAgICAgIG51bV90aW1lc19pbmNvcnJlY3Q6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtaXNUcmFja2VyID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNyZWF0ZUN5Y2xpY0lzc3VlVHJhY2tlciA9IGZ1bmN0aW9uIChpbml0U3RhdGVOYW1lKSB7XG4gICAgICAgICAgICBpZiAoY3N0VHJhY2tlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN5Y2xlSWRlbnRpZmllciA9IHtcbiAgICAgICAgICAgICAgICBjeWNsZTogJycsXG4gICAgICAgICAgICAgICAgbnVtX2N5Y2xlczogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZpc2l0ZWRTdGF0ZXMudW5zaGlmdChpbml0U3RhdGVOYW1lKTtcbiAgICAgICAgICAgIGNzdFRyYWNrZXIgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgaW5jcmVtZW50SW5jb3JyZWN0QW5zd2VySW5NdWx0aXBsZUluY29ycmVjdElzc3VlVHJhY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG11bHRpcGxlSW5jb3JyZWN0U3RhdGVOYW1lLm51bV90aW1lc19pbmNvcnJlY3QgKz0gMTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlY29yZFN0YXRlVHJhbnNpdGlvbkluTXVsdGlwbGVJbmNvcnJlY3RJc3N1ZVRyYWNrZXIgPSBmdW5jdGlvbiAoZGVzdFN0YXRlTmFtZSkge1xuICAgICAgICAgICAgaWYgKG11bHRpcGxlSW5jb3JyZWN0U3RhdGVOYW1lLm51bV90aW1lc19pbmNvcnJlY3QgPFxuICAgICAgICAgICAgICAgIE5VTV9JTkNPUlJFQ1RfQU5TV0VSU19USFJFU0hPTEQpIHtcbiAgICAgICAgICAgICAgICBtdWx0aXBsZUluY29ycmVjdFN0YXRlTmFtZS5zdGF0ZV9uYW1lID0gZGVzdFN0YXRlTmFtZTtcbiAgICAgICAgICAgICAgICBtdWx0aXBsZUluY29ycmVjdFN0YXRlTmFtZS5udW1fdGltZXNfaW5jb3JyZWN0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlY29yZFN0YXRlVHJhbnNpdGlvbkluQ3ljbGljSXNzdWVUcmFja2VyID0gZnVuY3Rpb24gKGRlc3RTdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgIGlmIChjeWNsZUlkZW50aWZpZXIubnVtX2N5Y2xlcyA8IE5VTV9SRVBFQVRFRF9DWUNMRVNfVEhSRVNIT0xEKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZpc2l0ZWRTdGF0ZXMuaW5kZXhPZihkZXN0U3RhdGVOYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3ljbGUgaWRlbnRpZmllZC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN5Y2xlU3RhcnRJbmRleCA9IHZpc2l0ZWRTdGF0ZXMuaW5kZXhPZihkZXN0U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmlzaXRlZFN0YXRlcy5wdXNoKGRlc3RTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3ljbGVTdHJpbmcgPSB2aXNpdGVkU3RhdGVzLnNsaWNlKGN5Y2xlU3RhcnRJbmRleCwgdmlzaXRlZFN0YXRlcy5sZW5ndGgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjeWNsZUlkZW50aWZpZXIuY3ljbGUgPT09IGN5Y2xlU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjeWNsZUlkZW50aWZpZXIubnVtX2N5Y2xlcyArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3ljbGVJZGVudGlmaWVyLmN5Y2xlID0gY3ljbGVTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjeWNsZUlkZW50aWZpZXIubnVtX2N5Y2xlcyA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmlzaXRlZFN0YXRlcyA9IFtkZXN0U3RhdGVOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2l0ZWRTdGF0ZXMucHVzaChkZXN0U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBpc011bHRpcGxlSW5jb3JyZWN0U3VibWlzc2lvbnNJc3N1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBtdWx0aXBsZUluY29ycmVjdFN0YXRlTmFtZS5udW1fdGltZXNfaW5jb3JyZWN0ID49XG4gICAgICAgICAgICAgICAgTlVNX0lOQ09SUkVDVF9BTlNXRVJTX1RIUkVTSE9MRDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGlzQ3ljbGljU3RhdGVUcmFuc2l0aW9uc0lzc3VlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGN5Y2xlSWRlbnRpZmllci5udW1fY3ljbGVzID49IE5VTV9SRVBFQVRFRF9DWUNMRVNfVEhSRVNIT0xEO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgaXNFYXJseVF1aXRJc3N1ZSA9IGZ1bmN0aW9uICh0aW1lU3BlbnRJbkV4cEluU2Vjcykge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWVTcGVudEluRXhwSW5TZWNzIDwgRUFSTFlfUVVJVF9USFJFU0hPTERfSU5fU0VDUztcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGFuYWx5emVQbGF5dGhyb3VnaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFRoZSBvcmRlcmluZyBvZiBjaGVja3MgaW4gdGhpcyBtZXRob2QgaXMgc3VjaCB0aGF0IHRoZSBwcmlvcml0eSBvZlxuICAgICAgICAgICAgLy8gaXNzdWVzIHRvIGJlIHJlY29yZGVkIGluIGNhc2Ugb2YgbXVsdGlwbGUgaXNzdWVzIGlzIGNhcHR1cmVkLiBUaGlzXG4gICAgICAgICAgICAvLyBmb2xsb3dzIE11bHRpcGxlSW5jb3JyZWN0U3VibWlzc2lvbnNJc3N1ZSAtPlxuICAgICAgICAgICAgLy8gQ3ljbGljU3RhdGVUcmFuc2l0aW9uc0lzc3VlIC0+IEVhcmx5UXVpdElzc3VlLlxuICAgICAgICAgICAgdmFyIHRpbWVTcGVudEluRXhwSW5TZWNzID0gZXhwU3RvcHdhdGNoLmdldFRpbWVJblNlY3MoKTtcbiAgICAgICAgICAgIGlmIChpc011bHRpcGxlSW5jb3JyZWN0U3VibWlzc2lvbnNJc3N1ZSgpKSB7XG4gICAgICAgICAgICAgICAgcGxheXRocm91Z2guaXNzdWVUeXBlID0gSVNTVUVfVFlQRV9NVUxUSVBMRV9JTkNPUlJFQ1RfU1VCTUlTU0lPTlM7XG4gICAgICAgICAgICAgICAgcGxheXRocm91Z2guaXNzdWVDdXN0b21pemF0aW9uQXJncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVfbmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG11bHRpcGxlSW5jb3JyZWN0U3RhdGVOYW1lLnN0YXRlX25hbWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbnVtX3RpbWVzX2Fuc3dlcmVkX2luY29ycmVjdGx5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbXVsdGlwbGVJbmNvcnJlY3RTdGF0ZU5hbWUubnVtX3RpbWVzX2luY29ycmVjdFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQ3ljbGljU3RhdGVUcmFuc2l0aW9uc0lzc3VlKCkpIHtcbiAgICAgICAgICAgICAgICBwbGF5dGhyb3VnaC5pc3N1ZVR5cGUgPSBJU1NVRV9UWVBFX0NZQ0xJQ19TVEFURV9UUkFOU0lUSU9OUztcbiAgICAgICAgICAgICAgICBwbGF5dGhyb3VnaC5pc3N1ZUN1c3RvbWl6YXRpb25BcmdzID0ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZV9uYW1lczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN5Y2xlSWRlbnRpZmllci5jeWNsZS5zcGxpdCgnLCcpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNFYXJseVF1aXRJc3N1ZSh0aW1lU3BlbnRJbkV4cEluU2VjcykpIHtcbiAgICAgICAgICAgICAgICBwbGF5dGhyb3VnaC5pc3N1ZVR5cGUgPSBJU1NVRV9UWVBFX0VBUkxZX1FVSVQ7XG4gICAgICAgICAgICAgICAgcGxheXRocm91Z2guaXNzdWVDdXN0b21pemF0aW9uQXJncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVfbmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHBsYXl0aHJvdWdoLmFjdGlvbnNbcGxheXRocm91Z2guYWN0aW9ucy5sZW5ndGggLSAxXS5hY3Rpb25DdXN0b21pemF0aW9uQXJnc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdGF0ZV9uYW1lLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRpbWVfc3BlbnRfaW5fZXhwX2luX3NlY3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aW1lU3BlbnRJbkV4cEluU2Vjc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0b3JlUGxheXRocm91Z2ggPSBmdW5jdGlvbiAoaXNOZXdQbGF5dGhyb3VnaCkge1xuICAgICAgICAgICAgdmFyIHBsYXl0aHJvdWdoSWQgPSBpc05ld1BsYXl0aHJvdWdoID8gbnVsbCA6IHBsYXl0aHJvdWdoLnBsYXl0aHJvdWdoSWQ7XG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9ICRodHRwLnBvc3QoZ2V0RnVsbFBsYXl0aHJvdWdoVXJsKCksIHtcbiAgICAgICAgICAgICAgICBwbGF5dGhyb3VnaF9kYXRhOiBwbGF5dGhyb3VnaC50b0JhY2tlbmREaWN0KCksXG4gICAgICAgICAgICAgICAgaXNzdWVfc2NoZW1hX3ZlcnNpb246IENVUlJFTlRfSVNTVUVfU0NIRU1BX1ZFUlNJT04sXG4gICAgICAgICAgICAgICAgcGxheXRocm91Z2hfaWQ6IHBsYXl0aHJvdWdoSWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGlzTmV3UGxheXRocm91Z2gpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnBsYXl0aHJvdWdoX3N0b3JlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW4gY2FzZXMgd2hlcmUgbWF4aW11bSBudW1iZXIgb2YgcGxheXRocm91Z2hzIGFscmVhZHkgZXhpc3RzLCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFib3ZlIGZsYWcgaXMgbm90IFRydWUgYW5kIHBsYXl0aHJvdWdoIElEIGlzIG5vdCBzZXQuXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5dGhyb3VnaC5wbGF5dGhyb3VnaElkID0gcmVzcG9uc2UuZGF0YS5wbGF5dGhyb3VnaF9pZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZ2V0RnVsbFBsYXl0aHJvdWdoVXJsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFVybEludGVycG9sYXRpb25TZXJ2aWNlLmludGVycG9sYXRlVXJsKFNUT1JFX1BMQVlUSFJPVUdIX1VSTCwge1xuICAgICAgICAgICAgICAgIGV4cGxvcmF0aW9uX2lkOiBwbGF5dGhyb3VnaC5leHBJZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBpc1BsYXl0aHJvdWdoRGlzY2FyZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICFFeHBsb3JhdGlvbkZlYXR1cmVzU2VydmljZS5pc1BsYXl0aHJvdWdoUmVjb3JkaW5nRW5hYmxlZCgpIHx8XG4gICAgICAgICAgICAgICAgIWlzTGVhcm5lckluU2FtcGxlUG9wdWxhdGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRTZXNzaW9uOiBmdW5jdGlvbiAoZXhwbG9yYXRpb25JZCwgZXhwbG9yYXRpb25WZXJzaW9uLCBwbGF5dGhyb3VnaFByb2JhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaXNMZWFybmVySW5TYW1wbGVQb3B1bGF0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgX2RldGVybWluZUlmTGVhcm5lcklzSW5TYW1wbGVQb3B1bGF0aW9uKHBsYXl0aHJvdWdoUHJvYmFiaWxpdHkpO1xuICAgICAgICAgICAgICAgIHBsYXl0aHJvdWdoID0gUGxheXRocm91Z2hPYmplY3RGYWN0b3J5LmNyZWF0ZU5ldyhudWxsLCBleHBsb3JhdGlvbklkLCBleHBsb3JhdGlvblZlcnNpb24sIG51bGwsIHt9LCBbXSk7XG4gICAgICAgICAgICAgICAgZXhwU3RvcHdhdGNoID0gU3RvcHdhdGNoT2JqZWN0RmFjdG9yeS5jcmVhdGUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRQbGF5dGhyb3VnaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwbGF5dGhyb3VnaDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWNvcmRFeHBsb3JhdGlvblN0YXJ0QWN0aW9uOiBmdW5jdGlvbiAoaW5pdFN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc1BsYXl0aHJvdWdoRGlzY2FyZGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZXhwU3RhcnRMZWFybmVyQWN0aW9uID0gTGVhcm5lckFjdGlvbk9iamVjdEZhY3RvcnkuY3JlYXRlTmV3KEFDVElPTl9UWVBFX0VYUExPUkFUSU9OX1NUQVJULCB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlX25hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpbml0U3RhdGVOYW1lXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBDVVJSRU5UX0FDVElPTl9TQ0hFTUFfVkVSU0lPTik7XG4gICAgICAgICAgICAgICAgcGxheXRocm91Z2guYWN0aW9ucy51bnNoaWZ0KGV4cFN0YXJ0TGVhcm5lckFjdGlvbik7XG4gICAgICAgICAgICAgICAgY3JlYXRlTXVsdGlwbGVJbmNvcnJlY3RJc3N1ZVRyYWNrZXIoaW5pdFN0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgY3JlYXRlQ3ljbGljSXNzdWVUcmFja2VyKGluaXRTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIGV4cFN0b3B3YXRjaC5yZXNldCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZEFuc3dlclN1Ym1pdEFjdGlvbjogZnVuY3Rpb24gKHN0YXRlTmFtZSwgZGVzdFN0YXRlTmFtZSwgaW50ZXJhY3Rpb25JZCwgYW5zd2VyLCBmZWVkYmFjaywgdGltZVNwZW50SW5TdGF0ZVNlY3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQbGF5dGhyb3VnaERpc2NhcmRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFjc3RUcmFja2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUN5Y2xpY0lzc3VlVHJhY2tlcihzdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIW1pc1RyYWNrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlTXVsdGlwbGVJbmNvcnJlY3RJc3N1ZVRyYWNrZXIoc3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGxheXRocm91Z2guYWN0aW9ucy5wdXNoKExlYXJuZXJBY3Rpb25PYmplY3RGYWN0b3J5LmNyZWF0ZU5ldyhBQ1RJT05fVFlQRV9BTlNXRVJfU1VCTUlULCB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlX25hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzdGF0ZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGVzdF9zdGF0ZV9uYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZGVzdFN0YXRlTmFtZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbl9pZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGludGVyYWN0aW9uSWRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0dGVkX2Fuc3dlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFuc3dlclxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmZWVkYmFjazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZlZWRiYWNrXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRpbWVfc3BlbnRfc3RhdGVfaW5fbXNlY3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aW1lU3BlbnRJblN0YXRlU2Vjc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgQ1VSUkVOVF9BQ1RJT05fU0NIRU1BX1ZFUlNJT04pKTtcbiAgICAgICAgICAgICAgICB2YXIgZGlkTm90TW92ZVRvTmV4dFN0YXRlID0gKGRlc3RTdGF0ZU5hbWUgPT09IHN0YXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGRpZE5vdE1vdmVUb05leHRTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnRJbmNvcnJlY3RBbnN3ZXJJbk11bHRpcGxlSW5jb3JyZWN0SXNzdWVUcmFja2VyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWNvcmRTdGF0ZVRyYW5zaXRpb25Jbk11bHRpcGxlSW5jb3JyZWN0SXNzdWVUcmFja2VyKGRlc3RTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICByZWNvcmRTdGF0ZVRyYW5zaXRpb25JbkN5Y2xpY0lzc3VlVHJhY2tlcihkZXN0U3RhdGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVjb3JkRXhwbG9yYXRpb25RdWl0QWN0aW9uOiBmdW5jdGlvbiAoc3RhdGVOYW1lLCB0aW1lU3BlbnRJblN0YXRlU2Vjcykge1xuICAgICAgICAgICAgICAgIGlmIChpc1BsYXl0aHJvdWdoRGlzY2FyZGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwbGF5dGhyb3VnaC5hY3Rpb25zLnB1c2goTGVhcm5lckFjdGlvbk9iamVjdEZhY3RvcnkuY3JlYXRlTmV3KEFDVElPTl9UWVBFX0VYUExPUkFUSU9OX1FVSVQsIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVfbmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN0YXRlTmFtZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aW1lX3NwZW50X2luX3N0YXRlX2luX21zZWNzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGltZVNwZW50SW5TdGF0ZVNlY3NcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIENVUlJFTlRfQUNUSU9OX1NDSEVNQV9WRVJTSU9OKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVjb3JkUGxheXRocm91Z2g6IGZ1bmN0aW9uIChpc0V4cGxvcmF0aW9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQbGF5dGhyb3VnaERpc2NhcmRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzRXhwbG9yYXRpb25Db21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZXhwbG9yYXRpb24gaXMgY29tcGxldGVkLCBkbyBub3QgY2hlY2sgZm9yIGlzc3Vlcy5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGxheXRocm91Z2gucGxheXRocm91Z2hJZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQbGF5dGhyb3VnaCBJRCBleGlzdHMsIHNvIGlzc3VlIGhhcyBhbHJlYWR5IGJlZW4gaWRlbnRpZmllZC5cbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlT2xkUXVpdEFjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGxheXRocm91Z2guaXNzdWVUeXBlID09PSBJU1NVRV9UWVBFX0VBUkxZX1FVSVQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBleGlzdGluZyBpc3N1ZSBpcyBvZiB0eXBlIGVhcmx5IHF1aXQsIGFuZCBzb21lIG90aGVyIGlzc3VlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW4gYmUgaWRlbnRpZmllZCwgdXBkYXRlIHRoZSBpc3N1ZSBzaW5jZSBlYXJseSBxdWl0IGhhcyBsb3dlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJpb3JpdHkuXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmFseXplUGxheXRocm91Z2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdG9yZVBsYXl0aHJvdWdoKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBsYXl0aHJvdWdoIElEIGRvZXNuJ3QgZXhpc3QuXG4gICAgICAgICAgICAgICAgICAgIGFuYWx5emVQbGF5dGhyb3VnaCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGxheXRocm91Z2guaXNzdWVUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJc3N1ZSB0eXBlIGV4aXN0cywgc28gYW4gaXNzdWUgaXMgaWRlbnRpZmllZCBhZnRlciBhbmFseXppbmcgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwbGF5dGhyb3VnaCwgYW5kIHRoZSBwbGF5dGhyb3VnaCBpcyBzdG9yZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yZVBsYXl0aHJvdWdoKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0byBjaHVuayBhIHBpZWNlIG9mIHRleHQgaW50byBzbWFsbGVyIHBhcnRzXG4gKiB0byBmZWVkIGludG8gU3BlZWNoU3ludGhlc2lzLCBiZWNhdXNlIFNwZWVjaFN5bnRoZXNpcyBhbHdheXMgdGltZXNcbiAqIG91dCBhZnRlciAyMDAtMzAwIGNoYXJhY3RlcnMuXG4gKlxuICogQ29kZSBpcyBhZGFwdGVkIGZyb206XG4gKiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS93b29sbHN0YS8yZDE0NmYxMzg3OGEzMDFiMzZkN1xuICpcbiAqIENyZWRpdHMgdG8gUGV0ZXIgV29vbGxleSBhbmQgQnJldHQgWmFtaXIuXG4gKi9cbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBzZXJ2aWNlc19jb25zdGFudHNfdHNfMSA9IHJlcXVpcmUoXCJzZXJ2aWNlcy9zZXJ2aWNlcy5jb25zdGFudHMudHNcIik7XG52YXIgU3BlZWNoU3ludGhlc2lzQ2h1bmtlclNlcnZpY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3BlZWNoU3ludGhlc2lzQ2h1bmtlclNlcnZpY2UoKSB7XG4gICAgICAgIC8vIE1heCBudW1iZXIgb2YgY2hhcmFjdGVycyB0byBmaXQgaW50byBvbmUgY2h1bmsuXG4gICAgICAgIHRoaXMuQ0hVTktfTEVOR1RIID0gMTYwO1xuICAgICAgICB0aGlzLl9zcGVlY2hTeW50aGVzaXMgPSB3aW5kb3cuc3BlZWNoU3ludGhlc2lzO1xuICAgICAgICB0aGlzLlJURV9DT01QT05FTlRfTkFNRVMgPSB7XG4gICAgICAgICAgICBDb2xsYXBzaWJsZTogJycsXG4gICAgICAgICAgICBJbWFnZTogJycsXG4gICAgICAgICAgICBMaW5rOiAnJyxcbiAgICAgICAgICAgIE1hdGg6ICcnLFxuICAgICAgICAgICAgVGFiczogJycsXG4gICAgICAgICAgICBWaWRlbzogJydcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUHVuY3R1YXRpb24gbWFya3MgdGhhdCBzaG91bGQgcmVzdWx0IGluIGFuIGF1ZGlibGUgcGF1c2Ugd2hlbiBwbGF5aW5nXG4gICAgICAgIC8vIGJhY2sgYXV0b2dlbmVyYXRlZCBhdWRpby5cbiAgICAgICAgdGhpcy5QVU5DVFVBVElPTl9NQVJLU19UT19FTkRfQ0hVTktTID0gJy4hPzo7JztcbiAgICAgICAgLy8gUHVuY3R1YXRpb24gbWFya3MgdGhhdCB3ZSBkb24ndCB3YW50IHRvIGluZmx1ZW5jZSB0aGUgcGxheWluZyBiYWNrIG9mXG4gICAgICAgIC8vIGF1dG9nZW5lcmF0ZWQgYXVkaW8uXG4gICAgICAgIHRoaXMuUFVOQ1RVQVRJT05fTUFSS1NfVE9fSUdOT1JFID0gJ1wiJztcbiAgICAgICAgdGhpcy5jYW5jZWxSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGFrZXMgYW4gdXR0ZXJhbmNlLCBhbmQgcGxheXMgaXQgaW4gc2VwYXJhdGUgdXR0ZXJhbmNlcyBlYWNoIG9mIGF0XG4gICAgICogICAgbW9zdCAxNjAgY2hhcmFjdGVycyBpbiBsZW5ndGguXG4gICAgICogQHBhcmFtIHtTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2V9IHV0dGVyYW5jZSAtIFRoZSBvcmlnaW5hbCB1dHRlcmFuY2VcbiAgICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSB3aG9sZSBtZXNzYWdlIHRvIHNwZWFrLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgLSBBbiBpbnRlZ2VyIGluZGljYXRpbmcgd2hhdCBvZmZzZXQgaW4gdGhlIHRleHRcbiAgICAgKiAgICB0byBiZWdpbiB0aGUgbmV4dCBjaHVua2VkIHV0dGVyYW5jZS5cbiAgICAgKiBAcGFyYW0ge3JlcXVlc3RDYWxsYmFja30gLSBDYWxsYmFjayB0aGF0IGlzIGFjdGl2YXRlZCB3aGVuIHRoZSBsYXN0XG4gICAgICogICAgY2h1bmtlZCB1dHRlcmFuY2UgZmluaXNoZXMgcGxheWluZy5cbiAgICAgKi9cbiAgICBTcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZS5wcm90b3R5cGUuX3NwZWVjaFV0dGVyYW5jZUNodW5rZXIgPSBmdW5jdGlvbiAodXR0ZXJhbmNlLCBvZmZzZXQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBuZXdVdHRlcmFuY2U7XG4gICAgICAgIHZhciB0ZXh0ID0gKG9mZnNldCAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAgIHV0dGVyYW5jZS50ZXh0LnN1YnN0cmluZyhvZmZzZXQpIDogdXR0ZXJhbmNlLnRleHQpO1xuICAgICAgICAvLyBUaGlzIHJlZ2V4IHBhdHRlcm4gZmluZHMgdGhlIG5leHQgc3RyaW5nIGF0IG1vc3QgMTYwXG4gICAgICAgIC8vIGNoYXJhY3RlcnMgaW4gbGVuZ3RoIHRoYXQgZW5kcyBvbiBhIHB1bmN0dWF0aW9uIG1hcmsgaW5cbiAgICAgICAgLy8gUFVOQ1RVQVRJT05fTUFSS1NfVE9fRU5EX0NIVU5LUy5cbiAgICAgICAgdmFyIGRlbGltaXRDaHVua1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXltcXFxcc1xcXFxTXXsnICtcbiAgICAgICAgICAgIE1hdGguZmxvb3IodGhpcy5DSFVOS19MRU5HVEggLyA0KSArICcsJyArIHRoaXMuQ0hVTktfTEVOR1RIICsgJ31bJyArXG4gICAgICAgICAgICB0aGlzLlBVTkNUVUFUSU9OX01BUktTX1RPX0VORF9DSFVOS1MgKyAnXXsxfXxeW1xcXFxzXFxcXFNdezEsJyArXG4gICAgICAgICAgICB0aGlzLkNIVU5LX0xFTkdUSCArICd9JHxeW1xcXFxzXFxcXFNdezEsJyArIHRoaXMuQ0hVTktfTEVOR1RIICsgJ30gJyk7XG4gICAgICAgIHZhciBjaHVua0FycmF5ID0gdGV4dC5tYXRjaChkZWxpbWl0Q2h1bmtSZWdleCk7XG4gICAgICAgIGlmIChjaHVua0FycmF5ID09PSBudWxsIHx8XG4gICAgICAgICAgICBjaHVua0FycmF5WzBdID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGNodW5rQXJyYXlbMF0ubGVuZ3RoIDw9IDIpIHtcbiAgICAgICAgICAgIC8vIENhbGwgb25jZSBhbGwgdGV4dCBoYXMgYmVlbiBzcG9rZW4uXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNodW5rID0gY2h1bmtBcnJheVswXTtcbiAgICAgICAgbmV3VXR0ZXJhbmNlID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZShjaHVuayk7XG4gICAgICAgIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHRoZSBjdXJyZW50IHV0dGVyYW5jZSB0byB0aGUgbmV4dCB1dHRlcmFuY2UsXG4gICAgICAgIC8vIGV4Y2x1ZGluZyB0aGUgdGV4dCBiZWluZyBzcG9rZW4uXG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHV0dGVyYW5jZSkge1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICBuZXdVdHRlcmFuY2VbcHJvcGVydHldID0gdXR0ZXJhbmNlW3Byb3BlcnR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdVdHRlcmFuY2Uub25lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuY2FuY2VsUmVxdWVzdGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2FuY2VsUmVxdWVzdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0ICs9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICAgIF90aGlzLl9zcGVlY2hVdHRlcmFuY2VDaHVua2VyKHV0dGVyYW5jZSwgb2Zmc2V0LCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIElNUE9SVEFOVCEhIERvIG5vdCByZW1vdmU6IExvZ2dpbmcgdGhlIG9iamVjdCBvdXQgZml4ZXMgc29tZSBvbmVuZFxuICAgICAgICAvLyBmaXJpbmcgaXNzdWVzLiBQbGFjaW5nIHRoZSBzcGVhayBpbnZvY2F0aW9uIGluc2lkZSBhIGNhbGxiYWNrXG4gICAgICAgIC8vIGZpeGVzIG9yZGVyaW5nIGFuZCBvbmVuZCBpc3N1ZXMuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUubG9nKG5ld1V0dGVyYW5jZSk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3BlZWNoU3ludGhlc2lzLnNwZWFrKG5ld1V0dGVyYW5jZSk7XG4gICAgICAgIH0sIDApO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgdHlwZSBvZiAnbGF0ZXgnIG5lZWRzIHRvIGJlIGRldGVybWluZWQgY29ycmVjdGx5LlxuICAgIFNwZWVjaFN5bnRoZXNpc0NodW5rZXJTZXJ2aWNlLnByb3RvdHlwZS5fZm9ybWF0TGF0ZXhUb1NwZWFrYWJsZVRleHQgPSBmdW5jdGlvbiAobGF0ZXgpIHtcbiAgICAgICAgcmV0dXJuIGxhdGV4XG4gICAgICAgICAgICAucmVwbGFjZSgvJnF1b3Q7L2csICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFwvZywgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxzKy8sICcgJylcbiAgICAgICAgICAgIC8vIFNlcGFyYXRlIGNvbnNlY3V0aXZlIGNoYXJhY3RlcnMgd2l0aCBzcGFjZXMgc28gdGhhdCAnYWInXG4gICAgICAgICAgICAvLyBpcyBwcm9ub3VuY2VkICdhJyBmb2xsb3dlZCBieSAnYicuXG4gICAgICAgICAgICAuc3BsaXQoJycpLmpvaW4oJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xccyooXFxkKylcXHMqL2csICckMScpXG4gICAgICAgICAgICAvLyBSZXBsYWNlIGRhc2hlcyB3aXRoICdtaW51cycuXG4gICAgICAgICAgICAucmVwbGFjZSgvLS9nLCAnIG1pbnVzICcpXG4gICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCAneF4yJyBpcyBwcm9ub3VuY2VkICd4IHNxdWFyZWQnIHJhdGhlciB0aGFuXG4gICAgICAgICAgICAvLyAneCBjYXJldCAyJy5cbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHMqXFxeXFxzKi9nLCAnXicpXG4gICAgICAgICAgICAvLyBTcGVhayAneF55JyBhcyAneCB0byB0aGUgcG93ZXIgb2YgeScgdW5sZXNzIHRoZSBleHBvbmVudCBpcyB0d28gb3JcbiAgICAgICAgICAgIC8vIHRocmVlLCBpbiB3aGljaCBjYXNlIFdlYiBTcGVlY2ggd2lsbCByZWFkICdzcXVhcmVkJyBhbmQgJ2N1YmVkJ1xuICAgICAgICAgICAgLy8gcmVzcGVjdGl2ZWx5LlxuICAgICAgICAgICAgLnJlcGxhY2UoLyguKilcXF4oXFx7KlswLTldLit8WzAtMTQtOV1cXH0qKS9nLCAnJDEgdG8gdGhlIHBvd2VyIG9mICQyJylcbiAgICAgICAgICAgIC8vIEhhbmRsZSBzaW1wbGUgZnJhY3Rpb25zLlxuICAgICAgICAgICAgLnJlcGxhY2UoL2ZcXHNyXFxzYVxcc2NcXHNcXHtcXHMqKC4rKVxccypcXH1cXHNcXHtcXHMqKC4rKVxccypcXH0vZywgJyQxLyQyJylcbiAgICAgICAgICAgIC8vIElmIGEgZnJhY3Rpb24gY29udGFpbnMgYSB2YXJpYWJsZSwgdGhlbiBzYXkgKG51bWVyYXRvcikgJ292ZXInXG4gICAgICAgICAgICAvLyAoZGVub21pbmF0b3IpLlxuICAgICAgICAgICAgLnJlcGxhY2UoLyhcXGQqXFxEKylcXC8oXFxkKlxcRCopfChcXGQqXFxEKilcXC8oXFxkKlxcRCspL2csICckMSBvdmVyICQyJylcbiAgICAgICAgICAgIC8vIEhhbmRsZSBiYXNpYyB0cmlnb25vbWV0cmljIGZ1bmN0aW9ucy5cbiAgICAgICAgICAgIC5yZXBsYWNlKC90XFxzYVxcc24vZywgJ3RoZSB0YW5nZW50IG9mJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9zXFxzaVxcc24vZywgJ3RoZSBzaW5lIG9mJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9jXFxzb1xcc3MvZywgJ3RoZSBjb3NpbmUgb2YnKVxuICAgICAgICAgICAgLy8gSGFuZGxlIHNxdWFyZSByb290cy5cbiAgICAgICAgICAgIC5yZXBsYWNlKC9zXFxzcVxcc3JcXHN0XFxzXFx7XFxzKiguKylcXHMqXFx9L2csICd0aGUgc3F1YXJlIHJvb3Qgb2YgJDEnKVxuICAgICAgICAgICAgLy8gUmVtb3ZlIGJyYWNrZXRzLlxuICAgICAgICAgICAgLnJlcGxhY2UoL1tcXH1cXHtdL2csICcnKVxuICAgICAgICAgICAgLy8gUmVwbGFjZSBtdWx0aXBsZSBzcGFjZXMgd2l0aCBzaW5nbGUgc3BhY2UuXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxzXFxzKy9nLCAnICcpXG4gICAgICAgICAgICAudHJpbSgpO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSB0aGUgdHlwZSBvZiAnaHRtbCcgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZCBjb3JyZWN0bHkuXG4gICAgU3BlZWNoU3ludGhlc2lzQ2h1bmtlclNlcnZpY2UucHJvdG90eXBlLl9jb252ZXJ0VG9TcGVha2FibGVUZXh0ID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmtleXMoc2VydmljZXNfY29uc3RhbnRzX3RzXzEuU2VydmljZXNDb25zdGFudHMuUlRFX0NPTVBPTkVOVF9TUEVDUykuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50U3BlYykge1xuICAgICAgICAgICAgX3RoaXMuUlRFX0NPTVBPTkVOVF9OQU1FU1tjb21wb25lbnRTcGVjXSA9XG4gICAgICAgICAgICAgICAgc2VydmljZXNfY29uc3RhbnRzX3RzXzEuU2VydmljZXNDb25zdGFudHMuUlRFX0NPTVBPTkVOVF9TUEVDU1tjb21wb25lbnRTcGVjXS5mcm9udGVuZF9pZDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBlbHQgPSAkKCc8ZGl2PicgKyBodG1sICsgJzwvZGl2PicpO1xuICAgICAgICAvLyBDb252ZXJ0IGxpbmtzIGludG8gc3BlYWthYmxlIHRleHQgYnkgZXh0cmFjdGluZyB0aGUgcmVhZGFibGUgdmFsdWUuXG4gICAgICAgIGVsdC5maW5kKCdvcHBpYS1ub25pbnRlcmFjdGl2ZS0nICsgdGhpcy5SVEVfQ09NUE9ORU5UX05BTUVTLkxpbmspXG4gICAgICAgICAgICAucmVwbGFjZVdpdGgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmF0dHJpYnV0ZXNbJ3RleHQtd2l0aC12YWx1ZSddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuYXR0cmlidXRlc1sndGV4dC13aXRoLXZhbHVlJ10udGV4dENvbnRlbnQucmVwbGFjZSgvJnF1b3Q7L2csICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIENvbnZlcnQgTGFUZVggdG8gc3BlYWthYmxlIHRleHQuXG4gICAgICAgIGVsdC5maW5kKCdvcHBpYS1ub25pbnRlcmFjdGl2ZS0nICsgdGhpcy5SVEVfQ09NUE9ORU5UX05BTUVTLk1hdGgpXG4gICAgICAgICAgICAucmVwbGFjZVdpdGgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmF0dHJpYnV0ZXNbJ3Jhd19sYXRleC13aXRoLXZhbHVlJ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5fZm9ybWF0TGF0ZXhUb1NwZWFrYWJsZVRleHQoX3RoaXMuYXR0cmlidXRlc1sncmF3X2xhdGV4LXdpdGgtdmFsdWUnXS50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBodG1sID0gZWx0Lmh0bWwoKTtcbiAgICAgICAgLy8gUmVwbGFjZSBjZXJ0YWluIEhUTUwgZWxlbWVudHMgd2l0aCBwZXJpb2RzIHRvIGluZGljYXRlXG4gICAgICAgIC8vIHBhdXNlcyBpbiBzcGVha2luZy4gQWxzbywgZm9yIHNvbWUgcmVhc29uLCB0aGVyZSdzIGEgbG90XG4gICAgICAgIC8vIG9mIHdoaXRlc3BhY2UgKGxpa2UgaHVuZHJlZHMgb2YgY2hhcmFjdGVycykgc28gd2UgdHJpbVxuICAgICAgICAvLyBpdCBvZmYgdG8gYXZvaWQgYmxhbmsgY2h1bmtzLlxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKG5ldyBSZWdFeHAoJzwvbGk+JywgJ2cnKSwgJy4nKS50cmltKCk7XG4gICAgICAgIC8vIFN0cmlwIGF3YXkgSFRNTCB0YWdzLlxuICAgICAgICB2YXIgdG1wID0gJCgnPGRpdj48L2Rpdj4nKTtcbiAgICAgICAgdG1wLmh0bWwoaHRtbCk7XG4gICAgICAgIHZhciB0ZXh0VG9TcGVha1dpdGhvdXRQYXVzZXMgPSB0bXAudGV4dCgpO1xuICAgICAgICB2YXIgdGV4dFRvU3BlYWsgPSAnJztcbiAgICAgICAgLy8gSW5zZXJ0IGEgc3BhY2UgYWZ0ZXIgcHVuY3R1YXRpb24gbWFya3MgdG8gZW5zdXJlIHRoYXQgY2h1bmtpbmcgd2lsbFxuICAgICAgICAvLyBlbmQgb24gdGhlIGRlc2lyZWQgcHVuY3R1YXRpb24gbWFya3Mgc28gdGhhdCBTcGVlY2hTeW50aGVzaXMgd2lsbFxuICAgICAgICAvLyBwYXVzZSBtb3JlIG5hdHVyYWxseS4gUmVtb3ZlIGFueSBwdW5jdHVhdGlvbiBtYXJrcyB0aGF0IGhhdmUgbm9cbiAgICAgICAgLy8gZWZmZWN0IG9uIHNwZWFraW5nLlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHRUb1NwZWFrV2l0aG91dFBhdXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuUFVOQ1RVQVRJT05fTUFSS1NfVE9fSUdOT1JFLmluZGV4T2YodGV4dFRvU3BlYWtXaXRob3V0UGF1c2VzLmNoYXJBdChpKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dFRvU3BlYWsgKz0gdGV4dFRvU3BlYWtXaXRob3V0UGF1c2VzLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLlBVTkNUVUFUSU9OX01BUktTX1RPX0VORF9DSFVOS1MuaW5kZXhPZih0ZXh0VG9TcGVha1dpdGhvdXRQYXVzZXMuY2hhckF0KGkpKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGV4dFRvU3BlYWsgKz0gJyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0VG9TcGVhaztcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNjUpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgJ2NhbGxiYWNrJyBpcyBhIGZ1bmN0aW9uIGFuZCBpdHMgdHlwZSBuZWVkcyB0byBiZSByZXNlYXJjaGVkXG4gICAgLy8gdGhvcm91Z2hseS5cbiAgICBTcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZS5wcm90b3R5cGUuc3BlYWsgPSBmdW5jdGlvbiAodXR0ZXJhbmNlLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNhbmNlbFJlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zcGVlY2hVdHRlcmFuY2VDaHVua2VyKHV0dGVyYW5jZSwgMCwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgU3BlZWNoU3ludGhlc2lzQ2h1bmtlclNlcnZpY2UucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxSZXF1ZXN0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5fc3BlZWNoU3ludGhlc2lzKSB7XG4gICAgICAgICAgICB0aGlzLl9zcGVlY2hTeW50aGVzaXMuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNjUpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgdGhlIHR5cGUgb2YgJ2h0bWwnIG5lZWRzIHRvIGJlIGRldGVybWluZWQgY29ycmVjdGx5LlxuICAgIFNwZWVjaFN5bnRoZXNpc0NodW5rZXJTZXJ2aWNlLnByb3RvdHlwZS5jb252ZXJ0VG9TcGVha2FibGVUZXh0ID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRUb1NwZWFrYWJsZVRleHQoaHRtbCk7XG4gICAgfTtcbiAgICAvLyBUT0RPKCM3MTY1KTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBiZWNhdXNlIHRoZSB0eXBlIG9mICdsYXRleCcgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZCBjb3JyZWN0bHkuXG4gICAgU3BlZWNoU3ludGhlc2lzQ2h1bmtlclNlcnZpY2UucHJvdG90eXBlLmZvcm1hdExhdGV4VG9TcGVha2FibGVUZXh0ID0gZnVuY3Rpb24gKGxhdGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRMYXRleFRvU3BlYWthYmxlVGV4dChsYXRleCk7XG4gICAgfTtcbiAgICBTcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSlcbiAgICBdLCBTcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZSk7XG4gICAgcmV0dXJuIFNwZWVjaFN5bnRoZXNpc0NodW5rZXJTZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuU3BlZWNoU3ludGhlc2lzQ2h1bmtlclNlcnZpY2UgPSBTcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1NwZWVjaFN5bnRoZXNpc0NodW5rZXJTZXJ2aWNlJywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShTcGVlY2hTeW50aGVzaXNDaHVua2VyU2VydmljZSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIHRvIGhhbmRsZSBjb21tb24gY29kZSBmb3Igc3VnZ2VzdGlvbiBtb2RhbCBkaXNwbGF5LlxuICovXG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgU3VnZ2VzdGlvbk1vZGFsU2VydmljZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWdnZXN0aW9uTW9kYWxTZXJ2aWNlKCkge1xuICAgICAgICB0aGlzLlNVR0dFU1RJT05fQUNDRVBURURfTVNHID0gKCdUaGlzIHN1Z2dlc3Rpb24gaGFzIGFscmVhZHkgYmVlbiBhY2NlcHRlZC4nKTtcbiAgICAgICAgdGhpcy5TVUdHRVNUSU9OX1JFSkVDVEVEX01TRyA9ICgnVGhpcyBzdWdnZXN0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVqZWN0ZWQuJyk7XG4gICAgICAgIHRoaXMuU1VHR0VTVElPTl9JTlZBTElEX01TRyA9ICgnVGhpcyBzdWdnZXN0aW9uIHdhcyBtYWRlIGZvciBhIHN0YXRlIHRoYXQgbm8gbG9uZ2VyIGV4aXN0cy4nICtcbiAgICAgICAgICAgICcgSXQgY2Fubm90IGJlIGFjY2VwdGVkLicpO1xuICAgICAgICB0aGlzLlVOU0FWRURfQ0hBTkdFU19NU0cgPSAoJ1lvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcyB0byB0aGlzIGV4cGxvcmF0aW9uLiBQbGVhc2Ugc2F2ZS9kaXNjYXJkIHlvdXIgJyArXG4gICAgICAgICAgICAndW5zYXZlZCBjaGFuZ2VzIGlmIHlvdSB3aXNoIHRvIGFjY2VwdC4nKTtcbiAgICAgICAgdGhpcy5BQ1RJT05fQUNDRVBUX1NVR0dFU1RJT04gPSAnYWNjZXB0JztcbiAgICAgICAgdGhpcy5BQ1RJT05fUkVKRUNUX1NVR0dFU1RJT04gPSAncmVqZWN0JztcbiAgICAgICAgdGhpcy5BQ1RJT05fUkVTVUJNSVRfU1VHR0VTVElPTiA9ICdyZXN1Ym1pdCc7XG4gICAgICAgIHRoaXMuU1VHR0VTVElPTl9BQ0NFUFRFRCA9ICdhY2NlcHRlZCc7XG4gICAgICAgIHRoaXMuU1VHR0VTVElPTl9SRUpFQ1RFRCA9ICdyZWplY3RlZCc7XG4gICAgfVxuICAgIC8vIFRPRE8oWWFzaEppcGthdGUpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIHNpbmNlICckdWliTW9kYWxJbnN0YW5jZScgaXMgYSBBbmd1bGFySlMgbmF0aXZlIG9iamVjdCBhbmQgZG9lcyBub3RcbiAgICAvLyBoYXZlIGEgVFMgaW50ZXJmYWNlLlxuICAgIFN1Z2dlc3Rpb25Nb2RhbFNlcnZpY2UucHJvdG90eXBlLmFjY2VwdFN1Z2dlc3Rpb24gPSBmdW5jdGlvbiAoJHVpYk1vZGFsSW5zdGFuY2UsIHBhcmFtRGljdCkge1xuICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShwYXJhbURpY3QpO1xuICAgIH07XG4gICAgLy8gVE9ETyhZYXNoSmlwa2F0ZSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgc2luY2UgJyR1aWJNb2RhbEluc3RhbmNlJyBpcyBhIEFuZ3VsYXJKUyBuYXRpdmUgb2JqZWN0IGFuZCBkb2VzIG5vdFxuICAgIC8vIGhhdmUgYSBUUyBpbnRlcmZhY2UuXG4gICAgU3VnZ2VzdGlvbk1vZGFsU2VydmljZS5wcm90b3R5cGUucmVqZWN0U3VnZ2VzdGlvbiA9IGZ1bmN0aW9uICgkdWliTW9kYWxJbnN0YW5jZSwgcGFyYW1EaWN0KSB7XG4gICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHBhcmFtRGljdCk7XG4gICAgfTtcbiAgICAvLyBUT0RPKFlhc2hKaXBrYXRlKTogUmVwbGFjZSAnYW55JyB3aXRoIHRoZSBleGFjdCB0eXBlLiBUaGlzIGhhcyBiZWVuIGtlcHQgYXNcbiAgICAvLyAnYW55JyBzaW5jZSAnJHVpYk1vZGFsSW5zdGFuY2UnIGlzIGEgQW5ndWxhckpTIG5hdGl2ZSBvYmplY3QgYW5kIGRvZXMgbm90XG4gICAgLy8gaGF2ZSBhIFRTIGludGVyZmFjZS5cbiAgICBTdWdnZXN0aW9uTW9kYWxTZXJ2aWNlLnByb3RvdHlwZS5jYW5jZWxTdWdnZXN0aW9uID0gZnVuY3Rpb24gKCR1aWJNb2RhbEluc3RhbmNlKSB7XG4gICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgIH07XG4gICAgU3VnZ2VzdGlvbk1vZGFsU2VydmljZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSlcbiAgICBdLCBTdWdnZXN0aW9uTW9kYWxTZXJ2aWNlKTtcbiAgICByZXR1cm4gU3VnZ2VzdGlvbk1vZGFsU2VydmljZTtcbn0oKSk7XG5leHBvcnRzLlN1Z2dlc3Rpb25Nb2RhbFNlcnZpY2UgPSBTdWdnZXN0aW9uTW9kYWxTZXJ2aWNlO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnU3VnZ2VzdGlvbk1vZGFsU2VydmljZScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoU3VnZ2VzdGlvbk1vZGFsU2VydmljZSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBTZXJ2aWNlIGZvciB2YWxpZGF0aW5nIHRoaW5ncyBhbmQgKG9wdGlvbmFsbHkpIGRpc3BsYXlpbmdcbiAqIHdhcm5pbmcgbWVzc2FnZXMgaWYgdGhlIHZhbGlkYXRpb24gZmFpbHMuXG4gKi9cbnJlcXVpcmUoJ2ZpbHRlcnMvc3RyaW5nLXV0aWxpdHktZmlsdGVycy9ub3JtYWxpemUtd2hpdGVzcGFjZS5maWx0ZXIudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1ZhbGlkYXRvcnNTZXJ2aWNlJywgW1xuICAgICckZmlsdGVyJywgJ0FsZXJ0c1NlcnZpY2UnLCAnSU5WQUxJRF9OQU1FX0NIQVJTJyxcbiAgICBmdW5jdGlvbiAoJGZpbHRlciwgQWxlcnRzU2VydmljZSwgSU5WQUxJRF9OQU1FX0NIQVJTKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENoZWNrcyB3aGV0aGVyIGFuIGVudGl0eSBuYW1lIGlzIHZhbGlkLCBhbmQgZGlzcGxheXMgYSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgICAgICAgICAqIGlmIGl0IGlzbid0LlxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IC0gVGhlIGlucHV0IHRvIGJlIGNoZWNrZWQuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3dXYXJuaW5ncyAtIFdoZXRoZXIgdG8gc2hvdyB3YXJuaW5ncyBpbiB0aGVcbiAgICAgICAgICAgICAqICAgYnV0dGVyYmFyLlxuICAgICAgICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZW50aXR5IG5hbWUgaXMgdmFsaWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaXNWYWxpZEVudGl0eU5hbWU6IGZ1bmN0aW9uIChpbnB1dCwgc2hvd1dhcm5pbmdzLCBhbGxvd0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAkZmlsdGVyKCdub3JtYWxpemVXaGl0ZXNwYWNlJykoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmICghaW5wdXQgJiYgIWFsbG93RW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3dXYXJuaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgQWxlcnRzU2VydmljZS5hZGRXYXJuaW5nKCdQbGVhc2UgZW50ZXIgYSBub24tZW1wdHkgbmFtZS4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgSU5WQUxJRF9OQU1FX0NIQVJTLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbmRleE9mKElOVkFMSURfTkFNRV9DSEFSU1tpXSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd1dhcm5pbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxlcnRzU2VydmljZS5hZGRXYXJuaW5nKCdJbnZhbGlkIGlucHV0LiBQbGVhc2UgdXNlIGEgbm9uLWVtcHR5IGRlc2NyaXB0aW9uICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29uc2lzdGluZyBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycywgc3BhY2VzIGFuZC9vciBoeXBoZW5zLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzVmFsaWRFeHBsb3JhdGlvblRpdGxlOiBmdW5jdGlvbiAoaW5wdXQsIHNob3dXYXJuaW5ncykge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkRW50aXR5TmFtZShpbnB1dCwgc2hvd1dhcm5pbmdzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiA0MCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd1dhcm5pbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBbGVydHNTZXJ2aWNlLmFkZFdhcm5pbmcoJ0V4cGxvcmF0aW9uIHRpdGxlcyBzaG91bGQgYmUgYXQgbW9zdCA0MCBjaGFyYWN0ZXJzIGxvbmcuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBOQjogdGhpcyBkb2VzIG5vdCBjaGVjayB3aGV0aGVyIHRoZSBjYXJkIG5hbWUgYWxyZWFkeSBleGlzdHMgaW4gdGhlXG4gICAgICAgICAgICAvLyBzdGF0ZXMgZGljdC5cbiAgICAgICAgICAgIGlzVmFsaWRTdGF0ZU5hbWU6IGZ1bmN0aW9uIChpbnB1dCwgc2hvd1dhcm5pbmdzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRFbnRpdHlOYW1lKGlucHV0LCBzaG93V2FybmluZ3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDUwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG93V2FybmluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuYWRkV2FybmluZygnQ2FyZCBuYW1lcyBzaG91bGQgYmUgYXQgbW9zdCA1MCBjaGFyYWN0ZXJzIGxvbmcuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc05vbmVtcHR5OiBmdW5jdGlvbiAoaW5wdXQsIHNob3dXYXJuaW5ncykge1xuICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3dXYXJuaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhzbGwpOiBBbGxvdyB0aGlzIHdhcm5pbmcgdG8gYmUgbW9yZSBzcGVjaWZpYyBpbiB0ZXJtcyBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hhdCBuZWVkcyB0byBiZSBlbnRlcmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgQWxlcnRzU2VydmljZS5hZGRXYXJuaW5nKCdQbGVhc2UgZW50ZXIgYSBub24tZW1wdHkgdmFsdWUuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1ZhbGlkRXhwbG9yYXRpb25JZDogZnVuY3Rpb24gKGlucHV0LCBzaG93V2FybmluZ3MpIHtcbiAgICAgICAgICAgICAgICAvLyBFeHBsb3JhdGlvbiBJRHMgYXJlIHVybHNhZmUgYmFzZTY0LWVuY29kZWQuXG4gICAgICAgICAgICAgICAgdmFyIFZBTElEX0lEX0NIQVJTX1JFR0VYID0gL15bYS16QS1aMC05X1xcLV0rJC9nO1xuICAgICAgICAgICAgICAgIGlmICghaW5wdXQgfHwgIVZBTElEX0lEX0NIQVJTX1JFR0VYLnRlc3QoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG93V2FybmluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFsZXJ0c1NlcnZpY2UuYWRkV2FybmluZygnUGxlYXNlIGVudGVyIGEgdmFsaWQgZXhwbG9yYXRpb24gSUQuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2VydmljZSB0byB3cmFwIHRoZSB3aW5kb3cgb2JqZWN0LlxuICovXG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgV2luZG93UmVmID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpbmRvd1JlZigpIHtcbiAgICB9XG4gICAgV2luZG93UmVmLnByb3RvdHlwZS5fd2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyByZXR1cm4gdGhlIGdsb2JhbCBuYXRpdmUgYnJvd3NlciB3aW5kb3cgb2JqZWN0XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2luZG93UmVmLnByb3RvdHlwZSwgXCJuYXRpdmVXaW5kb3dcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93aW5kb3coKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgV2luZG93UmVmID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KVxuICAgIF0sIFdpbmRvd1JlZik7XG4gICAgcmV0dXJuIFdpbmRvd1JlZjtcbn0oKSk7XG5leHBvcnRzLldpbmRvd1JlZiA9IFdpbmRvd1JlZjtcbiIsIi8vIENvcHlyaWdodCAyMDE3IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVmVjdG9yaXplciBmdW5jdGlvbiB3aGljaCBtaXJyb3JzIHRoZSBDb3VudFZlY3Rvcml6ZXIgZmVhdHVyZVxuICogZXh0cmFjdG9yIG9mIHNrbGVhcm4uXG4gKlxuICogSU1QT1JUQU5UIE5PVEU6IFRoZSBWZWN0b3JpemVyIGZ1bmN0aW9uIHVzZXMgdGhlIHZvY2FidWxhcnkgdGhhdCB3YXNcbiAqIGV4dHJhY3RlZCBkdXJpbmcgdGhlIHRyYWluaW5nLiBEdXJpbmcgdHJhaW5pbmcgc2Npa2l0J3NcbiAqIENvdW50VmVjdG9yaXplciBjbGFzcyBpcyB1c2VkIGZvciB0aGlzIHB1cnBvc2UuIElmIHRoZXJlIGFyZSBhbnkgY2hhbmdlc1xuICogaW4gc2Npa2l0J3MgQ291bnRWZWN0b3JpemUgY2xhc3MgdGhlbiBjb3JyZXNwb25kaW5nIGNoYW5nZXMgbXVzdCBiZVxuICogcHJvcGFnYXRlZCBoZXJlLlxuICovXG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgQ291bnRWZWN0b3JpemVyU2VydmljZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb3VudFZlY3Rvcml6ZXJTZXJ2aWNlKCkge1xuICAgIH1cbiAgICBDb3VudFZlY3Rvcml6ZXJTZXJ2aWNlLnByb3RvdHlwZS52ZWN0b3JpemUgPSBmdW5jdGlvbiAodG9rZW5zLCB2b2NhYnVsYXJ5KSB7XG4gICAgICAgIHZhciB2ZWN0b3JMZW5ndGggPSBPYmplY3Qua2V5cyh2b2NhYnVsYXJ5KS5sZW5ndGg7XG4gICAgICAgIHZhciB2ZWN0b3IgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZWN0b3JMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmVjdG9yLnB1c2goMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VucyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbnMuZm9yRWFjaChmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgICAgIGlmICh2b2NhYnVsYXJ5Lmhhc093blByb3BlcnR5KHRva2VuKSkge1xuICAgICAgICAgICAgICAgIHZlY3Rvclt2b2NhYnVsYXJ5W3Rva2VuXV0gKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2ZWN0b3I7XG4gICAgfTtcbiAgICBDb3VudFZlY3Rvcml6ZXJTZXJ2aWNlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KVxuICAgIF0sIENvdW50VmVjdG9yaXplclNlcnZpY2UpO1xuICAgIHJldHVybiBDb3VudFZlY3Rvcml6ZXJTZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuQ291bnRWZWN0b3JpemVyU2VydmljZSA9IENvdW50VmVjdG9yaXplclNlcnZpY2U7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdDb3VudFZlY3Rvcml6ZXJTZXJ2aWNlJywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShDb3VudFZlY3Rvcml6ZXJTZXJ2aWNlKSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBTVk0gcHJlZGljdCBmdW5jdGlvbiBmb3IgU1ZDIGNsYXNzaWZpZXIgb2Ygc2tsZWFybi5cbiAqXG4gKiBJTVBPUlRBTlQgTk9URTogVGhlIHByZWRpY3QgZnVuY3Rpb24gdXNlcyBzdm0gZGF0YSB0aGF0IHdhcyBleHRyYWN0ZWRcbiAqIGFmdGVyIHRyYWluaW5nIG9mIGNsYXNzaWZpZXIgb24gT3BwaWEtbWwuIElmIHRoZXJlIGFyZSBhbnkgY2hhbmdlcyBpblxuICogZm9ybWF0IG9mIGV4dHJhY3RlZCBkYXRhIHRoZW4gY29ycmVzcG9uZGluZyBjaGFuZ2VzIG11c3QgYmUgcHJvcGFnYXRlZCBoZXJlLlxuICogT3BwaWEtbWwgdXNlcyBzY2lraXQncyBTVkMgY2xhc3MgZHVyaW5nIHRyYWluaW5nIGNsYXNzaWZpZXIgd2hpY2ggdXNlc1xuICogbGlic3ZtJ3MgaW1wbGVtZW50YXRpb24uIElmIHRoZXJlIGFyZSBhbnkgY2hhbmdlcyBpbiBmb2xsb3dpbmcgcGFydCBvZlxuICogY29kZSBpbiBsaWJzdm0gdGhlbiBjb3JyZXNwb25kaW5nIGNoYW5nZXMgbXVzdCBiZSBwcm9wYWdhdGVkIGhlcmUuXG4gKlxuICogbGlic3ZtJ3MgY29kZSBmb3IgcHJlZGljdGlvbjpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcm5hdWRzai9saWJzdm0vYmxvYi9tYXN0ZXIvc3ZtLmNwcCNMMjQ4MVxuICovXG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgUHJlZGljdGlvblJlc3VsdE9iamVjdEZhY3RvcnlfMSA9IHJlcXVpcmUoXCJkb21haW4vY2xhc3NpZmllci9QcmVkaWN0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeVwiKTtcbnZhciBJS2VybmVsUGFyYW1zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElLZXJuZWxQYXJhbXMoKSB7XG4gICAgfVxuICAgIHJldHVybiBJS2VybmVsUGFyYW1zO1xufSgpKTtcbmV4cG9ydHMuSUtlcm5lbFBhcmFtcyA9IElLZXJuZWxQYXJhbXM7XG52YXIgU1ZNUHJlZGljdGlvblNlcnZpY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU1ZNUHJlZGljdGlvblNlcnZpY2UocHJlZGljdGlvblJlc3VsdE9iamVjdEZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5wcmVkaWN0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeSA9IHByZWRpY3Rpb25SZXN1bHRPYmplY3RGYWN0b3J5O1xuICAgIH1cbiAgICBTVk1QcmVkaWN0aW9uU2VydmljZS5wcm90b3R5cGUua2VybmVsID0gZnVuY3Rpb24gKGtlcm5lbFBhcmFtcywgc3VwcG9ydFZlY3RvcnMsIGlucHV0KSB7XG4gICAgICAgIHZhciBrZXJuZWwgPSBrZXJuZWxQYXJhbXMua2VybmVsO1xuICAgICAgICB2YXIga3ZhbHVlcyA9IFtdO1xuICAgICAgICBpZiAoa2VybmVsID09PSAncmJmJykge1xuICAgICAgICAgICAgdmFyIGdhbW1hID0ga2VybmVsUGFyYW1zLmdhbW1hO1xuICAgICAgICAgICAgdmFyIHZlY3Rvckxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3VwcG9ydFZlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc3VtID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGlucHV0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1bSArPSBNYXRoLnBvdygoc3VwcG9ydFZlY3RvcnNbaV1bal0gLSBpbnB1dFtqXSksIDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrdmFsdWVzLnB1c2goTWF0aC5leHAoLWdhbW1hICogc3VtKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2VybmVsID09PSAnbGluZWFyJykge1xuICAgICAgICAgICAgdmFyIHZlY3Rvckxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3VwcG9ydFZlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc3VtID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGlucHV0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1bSArPSBzdXBwb3J0VmVjdG9yc1tpXVtqXSAqIGlucHV0W2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrdmFsdWVzLnB1c2goc3VtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga3ZhbHVlcztcbiAgICB9O1xuICAgIC8vIEZpbmQgbXVsdGljbGFzcyBwcm9iYWJpbGl0aWVzLlxuICAgIC8vIE5PVEU6IFRoaXMgZnVuY3Rpb24gaXMgaW1wbGVtZW50ZWQgYXMgaXQgaXMgZ2l2ZW4gaW4gTGliU1ZNLlxuICAgIC8vIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGV4YWN0IGFwcHJvYWNoIHVzZWQsIHJlYWQgZm9sbG93aW5nIHBhcGVyOlxuICAgIC8vIGh0dHBzOi8vd3d3LmNzaWUubnR1LmVkdS50dy9+Y2psaW4vcGFwZXJzL3N2bXByb2Ivc3ZtcHJvYi5wZGZcbiAgICAvLyBBbHNvIHRha2UgYSBsb29rIGF0IGltcGxlbWVudGF0aW9uIGJ5IExpYlNWTTpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXJuYXVkc2ovbGlic3ZtL2Jsb2IvbWFzdGVyL3N2bS5jcHAjTDE4MjlcbiAgICBTVk1QcmVkaWN0aW9uU2VydmljZS5wcm90b3R5cGUuY2FsY3VsYXRlTXVsdGljbGFzc1Byb2JhYmlsaXRpZXMgPSBmdW5jdGlvbiAobkNsYXNzZXMsIHBhaXJ3aXNlUHJvYikge1xuICAgICAgICB2YXIgUSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5DbGFzc2VzOyBpKyspIHtcbiAgICAgICAgICAgIFEucHVzaChbXSk7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5DbGFzc2VzOyBqKyspIHtcbiAgICAgICAgICAgICAgICBRW2ldLnB1c2goMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIFFwID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbkNsYXNzZXM7IGkrKykge1xuICAgICAgICAgICAgUXAucHVzaCgwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgUCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5DbGFzc2VzOyBpKyspIHtcbiAgICAgICAgICAgIFAucHVzaCgwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWF4SXRlciA9IE1hdGgubWF4KDEwMCwgbkNsYXNzZXMpO1xuICAgICAgICB2YXIgZXBzID0gMC4wMDUgLyBuQ2xhc3NlcztcbiAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCBuQ2xhc3NlczsgdCsrKSB7XG4gICAgICAgICAgICBQW3RdID0gMS4wIC8gbkNsYXNzZXM7XG4gICAgICAgICAgICBRW3RdW3RdID0gMC4wO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0OyBqKyspIHtcbiAgICAgICAgICAgICAgICBRW3RdW3RdICs9IHBhaXJ3aXNlUHJvYltqXVt0XSAqIHBhaXJ3aXNlUHJvYltqXVt0XTtcbiAgICAgICAgICAgICAgICBRW3RdW2pdID0gUVtqXVt0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGogPSB0ICsgMTsgaiA8IG5DbGFzc2VzOyBqKyspIHtcbiAgICAgICAgICAgICAgICBRW3RdW3RdICs9IHBhaXJ3aXNlUHJvYltqXVt0XSAqIHBhaXJ3aXNlUHJvYltqXVt0XTtcbiAgICAgICAgICAgICAgICBRW3RdW2pdID0gLXBhaXJ3aXNlUHJvYltqXVt0XSAqIHBhaXJ3aXNlUHJvYlt0XVtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgaXRlciA9IDA7XG4gICAgICAgIGZvciAoaXRlciA9IDA7IGl0ZXIgPCBtYXhJdGVyOyBpdGVyKyspIHtcbiAgICAgICAgICAgIHZhciBwUXAgPSAwLjA7XG4gICAgICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IG5DbGFzc2VzOyB0KyspIHtcbiAgICAgICAgICAgICAgICBRcFt0XSA9IDA7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuQ2xhc3NlczsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIFFwW3RdICs9IFFbdF1bal0gKiBQW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwUXAgKz0gUFt0XSAqIFFwW3RdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1heEVycm9yID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgbkNsYXNzZXM7IHQrKykge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IE1hdGguYWJzKFFwW3RdIC0gcFFwKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPiBtYXhFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBtYXhFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXhFcnJvciA8IGVwcykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCBuQ2xhc3NlczsgdCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpZmYgPSAoLVFwW3RdICsgcFFwKSAvIFFbdF1bdF07XG4gICAgICAgICAgICAgICAgUFt0XSArPSBkaWZmO1xuICAgICAgICAgICAgICAgIHBRcCA9ICgocFFwICsgZGlmZiAqIChkaWZmICogUVt0XVt0XSArIDIgKiBRcFt0XSkpIC9cbiAgICAgICAgICAgICAgICAgICAgKDEgKyBkaWZmKSAvICgxICsgZGlmZikpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbkNsYXNzZXM7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBRcFtqXSA9IChRcFtqXSArIGRpZmYgKiBRW3RdW2pdKSAvICgxICsgZGlmZik7XG4gICAgICAgICAgICAgICAgICAgIFBbal0gLz0gKDEgKyBkaWZmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZXIgPj0gbWF4SXRlcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdFeGNlZWRzIG1heEl0ZXIgaW4gY2FsY3VsYXRlTXVsdGljbGFzc1Byb2JhYmlsaXRpZXMnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUDtcbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgJ2NsYXNzaWZpZXJEYXRhJyBpcyBhIGRpY3Qgd2l0aCB1bmRlcnNjb3JlX2Nhc2VkIGtleXMgd2hpY2hcbiAgICAvLyBnaXZlIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZiBjYW1lbENhc2luZy4gU2FtZVxuICAgIC8vIGdvZXMgZm9yICdpbnB1dCcuXG4gICAgU1ZNUHJlZGljdGlvblNlcnZpY2UucHJvdG90eXBlLnByZWRpY3QgPSBmdW5jdGlvbiAoY2xhc3NpZmllckRhdGEsIGlucHV0KSB7XG4gICAgICAgIHZhciBuU3VwcG9ydCA9IGNsYXNzaWZpZXJEYXRhLm5fc3VwcG9ydDtcbiAgICAgICAgdmFyIHN1cHBvcnRWZWN0b3JzID0gY2xhc3NpZmllckRhdGEuc3VwcG9ydF92ZWN0b3JzO1xuICAgICAgICB2YXIgZHVhbENvZWYgPSBjbGFzc2lmaWVyRGF0YS5kdWFsX2NvZWY7XG4gICAgICAgIHZhciBpbnRlcmNlcHQgPSBjbGFzc2lmaWVyRGF0YS5pbnRlcmNlcHQ7XG4gICAgICAgIHZhciBjbGFzc2VzID0gY2xhc3NpZmllckRhdGEuY2xhc3NlcztcbiAgICAgICAgdmFyIGtlcm5lbFBhcmFtcyA9IGNsYXNzaWZpZXJEYXRhLmtlcm5lbF9wYXJhbXM7XG4gICAgICAgIHZhciBwcm9iQSA9IGNsYXNzaWZpZXJEYXRhLnByb2JBO1xuICAgICAgICB2YXIgcHJvYkIgPSBjbGFzc2lmaWVyRGF0YS5wcm9iQjtcbiAgICAgICAgdmFyIHN0YXJ0SW5kaWNlcyA9IFtdO1xuICAgICAgICBzdGFydEluZGljZXNbMF0gPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG5TdXBwb3J0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzdGFydEluZGljZXNbaV0gPSBzdGFydEluZGljZXNbaSAtIDFdICsgblN1cHBvcnRbaSAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdXBwb3J0VmVjdG9yc1swXS5sZW5ndGggIT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gU3VwcG9ydCB2ZWN0b3IgYW5kIGlucHV0IGRpbWVuc2lvbnMgZG8gbm90IG1hdGNoLlxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRGltZW5zaW9uIG9mIHN1cHBvcnQgdmVjdG9ycyBhbmQgZ2l2ZW4gaW5wdXQgaXMgZGlmZmVyZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpbmQga2VybmVsIHZhbHVlcyBmb3Igc3VwcG9ydFZlY3RvcnMgYW5kIGdpdmVuIGlucHV0LiBBc3N1bWVzIHRoYXRcbiAgICAgICAgLy8gaW5wdXQgaGFzIHNhbWUgZGltZW5zaW9uIGFuZCBkYXRhIHR5cGUgYXMgYW55IG9mIHRoZSBzdXBwb3J0VmVjdG9ycy5cbiAgICAgICAgdmFyIGt2YWx1ZXMgPSB0aGlzLmtlcm5lbChrZXJuZWxQYXJhbXMsIHN1cHBvcnRWZWN0b3JzLCBpbnB1dCk7XG4gICAgICAgIHZhciB2b3RlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZvdGVzLnB1c2goMCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhaXJ3aXNlUHJvYiA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXJ3aXNlUHJvYi5wdXNoKFtdKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2xhc3Nlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHBhaXJ3aXNlUHJvYltpXS5wdXNoKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBwID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gaSArIDE7IGogPCBjbGFzc2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpID0gc3RhcnRJbmRpY2VzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBzaiA9IHN0YXJ0SW5kaWNlc1tqXTtcbiAgICAgICAgICAgICAgICB2YXIgY2kgPSBuU3VwcG9ydFtpXTtcbiAgICAgICAgICAgICAgICB2YXIgY2ogPSBuU3VwcG9ydFtqXTtcbiAgICAgICAgICAgICAgICB2YXIgbWluUHJvYiA9IDFlLTc7XG4gICAgICAgICAgICAgICAgdmFyIGNvZWYxID0gZHVhbENvZWZbaiAtIDFdO1xuICAgICAgICAgICAgICAgIHZhciBjb2VmMiA9IGR1YWxDb2VmW2ldO1xuICAgICAgICAgICAgICAgIHZhciBzdW0gPSAwO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgY2k7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICBzdW0gKz0ga3ZhbHVlc1tzaSArIGtdICogY29lZjFbc2kgKyBrXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBjajsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1bSArPSBrdmFsdWVzW3NqICsga10gKiBjb2VmMltzaiArIGtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBOT1RFOiBsaWJzdm0gc3Vic3RyYWN0cyB0aGUgaW50ZXJjZXB0IGZyb20gc3VtIGluIGl0cyBwcmVkaWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gZnVuY3Rpb24uIEhlcmUgaW50ZXJjZXB0IGlzIGFkZGVkIGJlY2F1c2Ugc2NpLWtpdCBuZWdhdGVzIHRoZVxuICAgICAgICAgICAgICAgIC8vIGludGVyY2VwdCBiZWZvcmUgcGFzc2luZyBpdCBvbiB0byBsaWJzdm0gZm9yIHByZWRpY3Rpb24uXG4gICAgICAgICAgICAgICAgLy8gRm9yIG1vcmUgaW5mbyBzZWUgZ2l0aHViIGZvbGxvd2luZyBpc3N1ZTpcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vb3BwaWEvb3BwaWEvaXNzdWVzLzQxNjZcbiAgICAgICAgICAgICAgICBzdW0gKz0gaW50ZXJjZXB0W3BdO1xuICAgICAgICAgICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXBwcm9hY2ggdG8gY2FsY3VsYXRlIHBhaXJ3aXNlIHByb2JhYmlsaXRpZXMgd2FzXG4gICAgICAgICAgICAgICAgLy8gcHJvcG9zZWQgYnkgcGxhdHQuIEZvciBtb3JlIGluZm8gb24gTGliU1ZNJ3MgaW1wbGVtZW50YXRpb25cbiAgICAgICAgICAgICAgICAvLyBvZiBwbGF0dCBzY2FsaW5nLCByZWFkIGZvbGxvd2luZyBwYXBlcjpcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL3d3dy5jc2llLm50dS5lZHUudHcvfmNqbGluL3BhcGVycy9wbGF0dHByb2IucGRmXG4gICAgICAgICAgICAgICAgLy8gQWxzbyB0YWtlIGEgbG9vayBhdCBmb2xsb3dpbmcgaW1wbGVtZW50YXRpb24gYnkgTGliU1ZNOlxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hcm5hdWRzai9saWJzdm0vYmxvYi9tYXN0ZXIvc3ZtLmNwcCNMMjU1MlxuICAgICAgICAgICAgICAgIHZhciBmID0gcHJvYkFbcF0gKiBzdW0gKyBwcm9iQltwXTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvYiA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKGYgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9iID0gTWF0aC5leHAoLWYpIC8gKDEgKyBNYXRoLmV4cCgtZikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvYiA9IDEgLyAoMSArIE1hdGguZXhwKGYpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJvYiA9IE1hdGgubWluKE1hdGgubWF4KHByb2IsIG1pblByb2IpLCAxIC0gbWluUHJvYik7XG4gICAgICAgICAgICAgICAgcGFpcndpc2VQcm9iW2ldW2pdID0gcHJvYjtcbiAgICAgICAgICAgICAgICBwYWlyd2lzZVByb2Jbal1baV0gPSAxIC0gcHJvYjtcbiAgICAgICAgICAgICAgICBwKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb2JhYmlsaXRpZXMgPSB0aGlzLmNhbGN1bGF0ZU11bHRpY2xhc3NQcm9iYWJpbGl0aWVzKGNsYXNzZXMubGVuZ3RoLCBwYWlyd2lzZVByb2IpO1xuICAgICAgICB2YXIgbWF4UHJvYklkeCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHByb2JhYmlsaXRpZXNbaV0gPiBwcm9iYWJpbGl0aWVzW21heFByb2JJZHhdKSB7XG4gICAgICAgICAgICAgICAgbWF4UHJvYklkeCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZWRpY3RlZExhYmVsID0gY2xhc3Nlc1ttYXhQcm9iSWR4XTtcbiAgICAgICAgdmFyIHByZWRpY3Rpb24gPSB0aGlzLnByZWRpY3Rpb25SZXN1bHRPYmplY3RGYWN0b3J5LmNyZWF0ZU5ldyhwcmVkaWN0ZWRMYWJlbCwgcHJvYmFiaWxpdGllc1ttYXhQcm9iSWR4XSk7XG4gICAgICAgIHJldHVybiBwcmVkaWN0aW9uO1xuICAgIH07XG4gICAgdmFyIF9hO1xuICAgIFNWTVByZWRpY3Rpb25TZXJ2aWNlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFt0eXBlb2YgKF9hID0gdHlwZW9mIFByZWRpY3Rpb25SZXN1bHRPYmplY3RGYWN0b3J5XzEuUHJlZGljdGlvblJlc3VsdE9iamVjdEZhY3RvcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgUHJlZGljdGlvblJlc3VsdE9iamVjdEZhY3RvcnlfMS5QcmVkaWN0aW9uUmVzdWx0T2JqZWN0RmFjdG9yeSkgPT09IFwiZnVuY3Rpb25cIiA/IF9hIDogT2JqZWN0XSlcbiAgICBdLCBTVk1QcmVkaWN0aW9uU2VydmljZSk7XG4gICAgcmV0dXJuIFNWTVByZWRpY3Rpb25TZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuU1ZNUHJlZGljdGlvblNlcnZpY2UgPSBTVk1QcmVkaWN0aW9uU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1NWTVByZWRpY3Rpb25TZXJ2aWNlJywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShTVk1QcmVkaWN0aW9uU2VydmljZSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTcgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBUb2tlbml6ZXIgZm9yIFRleHRJbnB1dC5cbiAqXG4gKiBOb3RlOiBUaGlzIGlzIGEgc2ltcGxlIHRva2VuaXplciBmb3IgdG9rZW5pemluZyB0ZXh0IGlucHV0LiBUaGUgcGFyYW1ldGVyXG4gKiBuX2dyYW1zIGlzIHVzZWQgZm9yIGRlY2lkaW5nIGlmIHdlIG5lZWQgdG8gYWRkIG5fZ3JhbSB0b2tlbnMgb3RoZXIgdGhhblxuICogdGhlIHVuaWdyYW0gdG9rZW5zLiBBcyBvZiBub3csIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gdW5pZ3JhbXMgYnV0IGlmXG4gKiBuZWVkZWQgaW4gdGhlIGZ1dHVyZSwgdGhpcyB0b2tlbml6ZXIgc2hvdWxkIGJlIGFibGUgdG8gZ2VuZXJhdGUgbi1ncmFtc1xuICogYWxzby5cbiAqXG4gKiBGb3IgcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vc2Npa2l0LWxlYXJuL3NjaWtpdC1sZWFybi9cbiAqICAgICBibG9iL21hc3Rlci9za2xlYXJuL2ZlYXR1cmVfZXh0cmFjdGlvbi90ZXh0LnB5I0w1NDFcbiAqL1xuLy8gVE9ETyhhbm1vbCk6IEFkZCBmdW5jdGlvbmFsaXR5IHRvIGFkZCBuX2dyYW1zLCByZW1vdmUgc3RvcCB3b3Jkcy5cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1RleHRJbnB1dFRva2VuaXplcicsIFtmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZW5lcmF0ZVRva2VuczogZnVuY3Rpb24gKHRleHRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbml6ZWRUZXh0SW5wdXQ7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGRlZmF1bHQgcmVnZXhwIHNlbGVjdCB0b2tlbnMgb2YgMiBvciBtb3JlIGFscGhhbnVtZXJpY1xuICAgICAgICAgICAgICAgIC8vIGNoYXJhY3RlcnMgKHB1bmN0dWF0aW9uIGlzIGNvbXBsZXRlbHkgaWdub3JlZCBhbmQgYWx3YXlzIHRyZWF0ZWRcbiAgICAgICAgICAgICAgICAvLyBhcyBhIHRva2VuIHNlcGFyYXRvcikuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuUGF0dGVybiA9ICdcXFxcYlxcXFx3XFxcXHcrXFxcXGInO1xuICAgICAgICAgICAgICAgIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKHRva2VuUGF0dGVybiwgJ2cnKTtcbiAgICAgICAgICAgICAgICB0b2tlbml6ZWRUZXh0SW5wdXQgPSB0ZXh0SW5wdXQubWF0Y2gocmVnZXhwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW5pemVkVGV4dElucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgUmVxdWlyZXMgZm9yIE11bHRpcGxlQ2hvaWNlSW5wdXQgaW50ZXJhY3Rpb24uXG4gKi9cbnJlcXVpcmUoJ2ludGVyYWN0aW9ucy9NdWx0aXBsZUNob2ljZUlucHV0L3N0YXRpYy9tdWx0aXBsZV9jaG9pY2VfaW5wdXQuY3NzJyk7XG5yZXF1aXJlKCdpbnRlcmFjdGlvbnMvTXVsdGlwbGVDaG9pY2VJbnB1dC9kaXJlY3RpdmVzLycgK1xuICAgICdtdWx0aXBsZS1jaG9pY2UtaW5wdXQtcnVsZXMuc2VydmljZS50cycpO1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvZGlyZWN0aXZlcy8nICtcbiAgICAnbXVsdGlwbGUtY2hvaWNlLWlucHV0LXZhbGlkYXRpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvZGlyZWN0aXZlcy8nICtcbiAgICAnb3BwaWEtaW50ZXJhY3RpdmUtbXVsdGlwbGUtY2hvaWNlLWlucHV0LmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvZGlyZWN0aXZlcy8nICtcbiAgICAnb3BwaWEtcmVzcG9uc2UtbXVsdGlwbGUtY2hvaWNlLWlucHV0LmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvZGlyZWN0aXZlcy8nICtcbiAgICAnb3BwaWEtc2hvcnQtcmVzcG9uc2UtbXVsdGlwbGUtY2hvaWNlLWlucHV0LmRpcmVjdGl2ZS50cycpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBSdWxlcyBzZXJ2aWNlIGZvciB0aGUgaW50ZXJhY3Rpb24uXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ011bHRpcGxlQ2hvaWNlSW5wdXRSdWxlc1NlcnZpY2UnLCBbZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgRXF1YWxzOiBmdW5jdGlvbiAoYW5zd2VyLCBpbnB1dHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5zd2VyID09PSBpbnB1dHMueDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBWYWxpZGF0b3Igc2VydmljZSBmb3IgdGhlIGludGVyYWN0aW9uLlxuICovXG52YXIgc3RhdGljXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWNcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgYmFzZV9pbnRlcmFjdGlvbl92YWxpZGF0aW9uX3NlcnZpY2VfMSA9IHJlcXVpcmUoXCJpbnRlcmFjdGlvbnMvYmFzZS1pbnRlcmFjdGlvbi12YWxpZGF0aW9uLnNlcnZpY2VcIik7XG52YXIgYXBwX2NvbnN0YW50c18xID0gcmVxdWlyZShcImFwcC5jb25zdGFudHNcIik7XG52YXIgTXVsdGlwbGVDaG9pY2VJbnB1dFZhbGlkYXRpb25TZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE11bHRpcGxlQ2hvaWNlSW5wdXRWYWxpZGF0aW9uU2VydmljZShiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZUluc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuYmFzZUludGVyYWN0aW9uVmFsaWRhdGlvblNlcnZpY2VJbnN0YW5jZSA9IGJhc2VJbnRlcmFjdGlvblZhbGlkYXRpb25TZXJ2aWNlSW5zdGFuY2U7XG4gICAgfVxuICAgIC8vIFRPRE8oIzcxNzYpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgJ2N1c3RvbWl6YXRpb25BcmdzJyBpcyBhIGRpY3Qgd2l0aCBwb3NzaWJsZSB1bmRlcnNjb3JlX2Nhc2VkXG4gICAgLy8ga2V5cyB3aGljaCBnaXZlIHRzbGludCBlcnJvcnMgYWdhaW5zdCB1bmRlcnNjb3JlX2Nhc2luZyBpbiBmYXZvciBvZlxuICAgIC8vIGNhbWVsQ2FzaW5nLlxuICAgIE11bHRpcGxlQ2hvaWNlSW5wdXRWYWxpZGF0aW9uU2VydmljZS5wcm90b3R5cGUuZ2V0Q3VzdG9taXphdGlvbkFyZ3NXYXJuaW5ncyA9IGZ1bmN0aW9uIChjdXN0b21pemF0aW9uQXJncykge1xuICAgICAgICB2YXIgd2FybmluZ3NMaXN0ID0gW107XG4gICAgICAgIHRoaXMuYmFzZUludGVyYWN0aW9uVmFsaWRhdGlvblNlcnZpY2VJbnN0YW5jZS5yZXF1aXJlQ3VzdG9taXphdGlvbkFyZ3VtZW50cyhjdXN0b21pemF0aW9uQXJncywgWydjaG9pY2VzJ10pO1xuICAgICAgICB2YXIgYXJlQW55Q2hvaWNlc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgIHZhciBhcmVBbnlDaG9pY2VzRHVwbGljYXRlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2VlbkNob2ljZXMgPSBbXTtcbiAgICAgICAgdmFyIG51bUNob2ljZXMgPSBjdXN0b21pemF0aW9uQXJncy5jaG9pY2VzLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdXN0b21pemF0aW9uQXJncy5jaG9pY2VzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2hvaWNlID0gY3VzdG9taXphdGlvbkFyZ3MuY2hvaWNlcy52YWx1ZVtpXTtcbiAgICAgICAgICAgIGlmIChjaG9pY2UudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFyZUFueUNob2ljZXNFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VlbkNob2ljZXMuaW5kZXhPZihjaG9pY2UpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGFyZUFueUNob2ljZXNEdXBsaWNhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZW5DaG9pY2VzLnB1c2goY2hvaWNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJlQW55Q2hvaWNlc0VtcHR5KSB7XG4gICAgICAgICAgICB3YXJuaW5nc0xpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogYXBwX2NvbnN0YW50c18xLkFwcENvbnN0YW50cy5XQVJOSU5HX1RZUEVTLkNSSVRJQ0FMLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgZW5zdXJlIHRoZSBjaG9pY2VzIGFyZSBub25lbXB0eS4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJlQW55Q2hvaWNlc0R1cGxpY2F0ZWQpIHtcbiAgICAgICAgICAgIHdhcm5pbmdzTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBhcHBfY29uc3RhbnRzXzEuQXBwQ29uc3RhbnRzLldBUk5JTkdfVFlQRVMuQ1JJVElDQUwsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1BsZWFzZSBlbnN1cmUgdGhlIGNob2ljZXMgYXJlIHVuaXF1ZS4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2FybmluZ3NMaXN0O1xuICAgIH07XG4gICAgTXVsdGlwbGVDaG9pY2VJbnB1dFZhbGlkYXRpb25TZXJ2aWNlLnByb3RvdHlwZS5nZXRBbGxXYXJuaW5ncyA9IGZ1bmN0aW9uIChzdGF0ZU5hbWUsIGN1c3RvbWl6YXRpb25BcmdzLCBhbnN3ZXJHcm91cHMsIGRlZmF1bHRPdXRjb21lKSB7XG4gICAgICAgIHZhciB3YXJuaW5nc0xpc3QgPSBbXTtcbiAgICAgICAgd2FybmluZ3NMaXN0ID0gd2FybmluZ3NMaXN0LmNvbmNhdCh0aGlzLmdldEN1c3RvbWl6YXRpb25BcmdzV2FybmluZ3MoY3VzdG9taXphdGlvbkFyZ3MpKTtcbiAgICAgICAgdmFyIG51bUNob2ljZXMgPSBjdXN0b21pemF0aW9uQXJncy5jaG9pY2VzLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgdmFyIHNlbGVjdGVkRXF1YWxzQ2hvaWNlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuc3dlckdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gYW5zd2VyR3JvdXBzW2ldLnJ1bGVzO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBydWxlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChydWxlc1tqXS50eXBlID09PSAnRXF1YWxzJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hvaWNlUHJldmlvdXNseVNlbGVjdGVkID0gKHNlbGVjdGVkRXF1YWxzQ2hvaWNlcy5pbmRleE9mKHJ1bGVzW2pdLmlucHV0cy54KSAhPT0gLTEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNob2ljZVByZXZpb3VzbHlTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRFcXVhbHNDaG9pY2VzLnB1c2gocnVsZXNbal0uaW5wdXRzLngpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ3NMaXN0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFwcF9jb25zdGFudHNfMS5BcHBDb25zdGFudHMuV0FSTklOR19UWVBFUy5DUklUSUNBTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGVuc3VyZSBydWxlICcgKyBTdHJpbmcoaiArIDEpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBpbiBncm91cCAnICsgU3RyaW5nKGkgKyAxKSArICcgaXMgbm90IGVxdWFsaW5nIHRoZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NhbWUgbXVsdGlwbGUgY2hvaWNlIG9wdGlvbiBhcyBhbm90aGVyIHJ1bGUuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bGVzW2pdLmlucHV0cy54ID49IG51bUNob2ljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcHBfY29uc3RhbnRzXzEuQXBwQ29uc3RhbnRzLldBUk5JTkdfVFlQRVMuQ1JJVElDQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1BsZWFzZSBlbnN1cmUgcnVsZSAnICsgU3RyaW5nKGogKyAxKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgaW4gZ3JvdXAgJyArIFN0cmluZyhpICsgMSkgKyAnIHJlZmVycyB0byBhIHZhbGlkIGNob2ljZS4nXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3YXJuaW5nc0xpc3QgPSB3YXJuaW5nc0xpc3QuY29uY2F0KHRoaXMuYmFzZUludGVyYWN0aW9uVmFsaWRhdGlvblNlcnZpY2VJbnN0YW5jZS5nZXRBbnN3ZXJHcm91cFdhcm5pbmdzKGFuc3dlckdyb3Vwcywgc3RhdGVOYW1lKSk7XG4gICAgICAgIC8vIE9ubHkgcmVxdWlyZSBhIGRlZmF1bHQgcnVsZSBpZiBzb21lIGNob2ljZXMgaGF2ZSBub3QgYmVlbiB0YWtlbiBjYXJlXG4gICAgICAgIC8vIG9mIGJ5IHJ1bGVzLlxuICAgICAgICBpZiAoc2VsZWN0ZWRFcXVhbHNDaG9pY2VzLmxlbmd0aCA8IG51bUNob2ljZXMpIHtcbiAgICAgICAgICAgIGlmICghZGVmYXVsdE91dGNvbWUgfHwgZGVmYXVsdE91dGNvbWUuaXNDb25mdXNpbmcoc3RhdGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIHdhcm5pbmdzTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogYXBwX2NvbnN0YW50c18xLkFwcENvbnN0YW50cy5XQVJOSU5HX1RZUEVTLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGFkZCBzb21ldGhpbmcgZm9yIE9wcGlhIHRvIHNheSBpbiB0aGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxcIkFsbCBvdGhlciBhbnN3ZXJzXFxcIiByZXNwb25zZS4nXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdhcm5pbmdzTGlzdDtcbiAgICB9O1xuICAgIHZhciBfYTtcbiAgICBNdWx0aXBsZUNob2ljZUlucHV0VmFsaWRhdGlvblNlcnZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoe1xuICAgICAgICAgICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG4gICAgICAgIH0pLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW3R5cGVvZiAoX2EgPSB0eXBlb2YgYmFzZV9pbnRlcmFjdGlvbl92YWxpZGF0aW9uX3NlcnZpY2VfMS5iYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBiYXNlX2ludGVyYWN0aW9uX3ZhbGlkYXRpb25fc2VydmljZV8xLmJhc2VJbnRlcmFjdGlvblZhbGlkYXRpb25TZXJ2aWNlKSA9PT0gXCJmdW5jdGlvblwiID8gX2EgOiBPYmplY3RdKVxuICAgIF0sIE11bHRpcGxlQ2hvaWNlSW5wdXRWYWxpZGF0aW9uU2VydmljZSk7XG4gICAgcmV0dXJuIE11bHRpcGxlQ2hvaWNlSW5wdXRWYWxpZGF0aW9uU2VydmljZTtcbn0oKSk7XG5leHBvcnRzLk11bHRpcGxlQ2hvaWNlSW5wdXRWYWxpZGF0aW9uU2VydmljZSA9IE11bHRpcGxlQ2hvaWNlSW5wdXRWYWxpZGF0aW9uU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ011bHRpcGxlQ2hvaWNlSW5wdXRWYWxpZGF0aW9uU2VydmljZScsIHN0YXRpY18xLmRvd25ncmFkZUluamVjdGFibGUoTXVsdGlwbGVDaG9pY2VJbnB1dFZhbGlkYXRpb25TZXJ2aWNlKSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgdGhlIE11bHRpcGxlQ2hvaWNlSW5wdXQgaW50ZXJhY3Rpb24uXG4gKlxuICogSU1QT1JUQU5UIE5PVEU6IFRoZSBuYW1pbmcgY29udmVudGlvbiBmb3IgY3VzdG9taXphdGlvbiBhcmdzIHRoYXQgYXJlIHBhc3NlZFxuICogaW50byB0aGUgZGlyZWN0aXZlIGlzOiB0aGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyLCBmb2xsb3dlZCBieSAnV2l0aCcsXG4gKiBmb2xsb3dlZCBieSB0aGUgbmFtZSBvZiB0aGUgYXJnLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9jdXJyZW50LWludGVyYWN0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2ludGVyYWN0aW9ucy9NdWx0aXBsZUNob2ljZUlucHV0L2RpcmVjdGl2ZXMvJyArXG4gICAgJ211bHRpcGxlLWNob2ljZS1pbnB1dC1ydWxlcy5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9IdG1sRXNjYXBlclNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnb3BwaWFJbnRlcmFjdGl2ZU11bHRpcGxlQ2hvaWNlSW5wdXQnLCBbXG4gICAgJ0h0bWxFc2NhcGVyU2VydmljZScsICdNdWx0aXBsZUNob2ljZUlucHV0UnVsZXNTZXJ2aWNlJyxcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uIChIdG1sRXNjYXBlclNlcnZpY2UsIE11bHRpcGxlQ2hvaWNlSW5wdXRSdWxlc1NlcnZpY2UsIFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RXh0ZW5zaW9uUmVzb3VyY2VVcmwoJy9pbnRlcmFjdGlvbnMvTXVsdGlwbGVDaG9pY2VJbnB1dC9kaXJlY3RpdmVzLycgK1xuICAgICAgICAgICAgICAgICdtdWx0aXBsZS1jaG9pY2UtaW5wdXQtaW50ZXJhY3Rpb24uZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJGF0dHJzJywgJ0N1cnJlbnRJbnRlcmFjdGlvblNlcnZpY2UnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkYXR0cnMsIEN1cnJlbnRJbnRlcmFjdGlvblNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmNob2ljZXMgPSBIdG1sRXNjYXBlclNlcnZpY2UuZXNjYXBlZEpzb25Ub09iaigkYXR0cnMuY2hvaWNlc1dpdGhWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuYW5zd2VyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5zdWJtaXRBbnN3ZXIgPSBmdW5jdGlvbiAoYW5zd2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5zd2VyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyID0gcGFyc2VJbnQoYW5zd2VyLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBDdXJyZW50SW50ZXJhY3Rpb25TZXJ2aWNlLm9uU3VibWl0KGFuc3dlciwgTXVsdGlwbGVDaG9pY2VJbnB1dFJ1bGVzU2VydmljZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIEN1cnJlbnRJbnRlcmFjdGlvblNlcnZpY2UucmVnaXN0ZXJDdXJyZW50SW50ZXJhY3Rpb24obnVsbCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIHRoZSBNdWx0aXBsZUNob2ljZUlucHV0IHJlc3BvbnNlLlxuICpcbiAqIElNUE9SVEFOVCBOT1RFOiBUaGUgbmFtaW5nIGNvbnZlbnRpb24gZm9yIGN1c3RvbWl6YXRpb24gYXJncyB0aGF0IGFyZSBwYXNzZWRcbiAqIGludG8gdGhlIGRpcmVjdGl2ZSBpczogdGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlciwgZm9sbG93ZWQgYnkgJ1dpdGgnLFxuICogZm9sbG93ZWQgYnkgdGhlIG5hbWUgb2YgdGhlIGFyZy5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvSHRtbEVzY2FwZXJTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ29wcGlhUmVzcG9uc2VNdWx0aXBsZUNob2ljZUlucHV0JywgW1xuICAgICdIdG1sRXNjYXBlclNlcnZpY2UnLCAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uIChIdG1sRXNjYXBlclNlcnZpY2UsIFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RXh0ZW5zaW9uUmVzb3VyY2VVcmwoJy9pbnRlcmFjdGlvbnMvTXVsdGlwbGVDaG9pY2VJbnB1dC9kaXJlY3RpdmVzLycgK1xuICAgICAgICAgICAgICAgICdtdWx0aXBsZS1jaG9pY2UtaW5wdXQtcmVzcG9uc2UuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGF0dHJzJywgZnVuY3Rpb24gKCRhdHRycykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYW5zd2VyID0gSHRtbEVzY2FwZXJTZXJ2aWNlLmVzY2FwZWRKc29uVG9PYmooJGF0dHJzLmFuc3dlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfY2hvaWNlcyA9IEh0bWxFc2NhcGVyU2VydmljZS5lc2NhcGVkSnNvblRvT2JqKCRhdHRycy5jaG9pY2VzKTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5yZXNwb25zZSA9IF9jaG9pY2VzW19hbnN3ZXJdO1xuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgdGhlIE11bHRpcGxlQ2hvaWNlSW5wdXQgc2hvcnQgcmVzcG9uc2UuXG4gKlxuICogSU1QT1JUQU5UIE5PVEU6IFRoZSBuYW1pbmcgY29udmVudGlvbiBmb3IgY3VzdG9taXphdGlvbiBhcmdzIHRoYXQgYXJlIHBhc3NlZFxuICogaW50byB0aGUgZGlyZWN0aXZlIGlzOiB0aGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyLCBmb2xsb3dlZCBieSAnV2l0aCcsXG4gKiBmb2xsb3dlZCBieSB0aGUgbmFtZSBvZiB0aGUgYXJnLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdmaWx0ZXJzL3N0cmluZy11dGlsaXR5LWZpbHRlcnMvY29udmVydC10by1wbGFpbi10ZXh0LmZpbHRlci50cycpO1xucmVxdWlyZSgnZmlsdGVycy9zdHJpbmctdXRpbGl0eS1maWx0ZXJzL3RydW5jYXRlLWF0LWZpcnN0LWxpbmUuZmlsdGVyLnRzJyk7XG5yZXF1aXJlKCdzZXJ2aWNlcy9IdG1sRXNjYXBlclNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnb3BwaWFTaG9ydFJlc3BvbnNlTXVsdGlwbGVDaG9pY2VJbnB1dCcsIFtcbiAgICAnSHRtbEVzY2FwZXJTZXJ2aWNlJywgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoSHRtbEVzY2FwZXJTZXJ2aWNlLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHt9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldEV4dGVuc2lvblJlc291cmNlVXJsKCcvaW50ZXJhY3Rpb25zL011bHRpcGxlQ2hvaWNlSW5wdXQvZGlyZWN0aXZlcy8nICtcbiAgICAgICAgICAgICAgICAnbXVsdGlwbGUtY2hvaWNlLWlucHV0LXNob3J0LXJlc3BvbnNlLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbXG4gICAgICAgICAgICAgICAgJyRhdHRycycsICckZmlsdGVyJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJGF0dHJzLCAkZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hbnN3ZXIgPSBIdG1sRXNjYXBlclNlcnZpY2UuZXNjYXBlZEpzb25Ub09iaigkYXR0cnMuYW5zd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9jaG9pY2VzID0gSHRtbEVzY2FwZXJTZXJ2aWNlLmVzY2FwZWRKc29uVG9PYmooJGF0dHJzLmNob2ljZXMpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSAkZmlsdGVyKCdjb252ZXJ0VG9QbGFpblRleHQnKShfY2hvaWNlc1tfYW5zd2VyXSk7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwucmVzcG9uc2UgPSAkZmlsdGVyKCd0cnVuY2F0ZUF0Rmlyc3RMaW5lJykocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL211bHRpcGxlX2Nob2ljZV9pbnB1dC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbXVsdGlwbGVfY2hvaWNlX2lucHV0LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbXVsdGlwbGVfY2hvaWNlX2lucHV0LmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgUmVxdWlyZXMgZm9yIE51bWVyaWNJbnB1dCBpbnRlcmFjdGlvbi5cbiAqL1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL051bWVyaWNJbnB1dC9kaXJlY3RpdmVzL251bWVyaWMtaW5wdXQtcnVsZXMuc2VydmljZS50cycpO1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL051bWVyaWNJbnB1dC9kaXJlY3RpdmVzL251bWVyaWMtaW5wdXQtdmFsaWRhdGlvbi5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdpbnRlcmFjdGlvbnMvTnVtZXJpY0lucHV0L2RpcmVjdGl2ZXMvJyArXG4gICAgJ29wcGlhLWludGVyYWN0aXZlLW51bWVyaWMtaW5wdXQuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdpbnRlcmFjdGlvbnMvTnVtZXJpY0lucHV0L2RpcmVjdGl2ZXMvJyArXG4gICAgJ29wcGlhLXJlc3BvbnNlLW51bWVyaWMtaW5wdXQuZGlyZWN0aXZlLnRzJyk7XG5yZXF1aXJlKCdpbnRlcmFjdGlvbnMvTnVtZXJpY0lucHV0L2RpcmVjdGl2ZXMvJyArXG4gICAgJ29wcGlhLXNob3J0LXJlc3BvbnNlLW51bWVyaWMtaW5wdXQuZGlyZWN0aXZlLnRzJyk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFJ1bGVzIHNlcnZpY2UgZm9yIHRoZSBpbnRlcmFjdGlvbi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnTnVtZXJpY0lucHV0UnVsZXNTZXJ2aWNlJywgW2Z1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEVxdWFsczogZnVuY3Rpb24gKGFuc3dlciwgaW5wdXRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlciA9PT0gaW5wdXRzLng7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSXNMZXNzVGhhbjogZnVuY3Rpb24gKGFuc3dlciwgaW5wdXRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlciA8IGlucHV0cy54O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIElzR3JlYXRlclRoYW46IGZ1bmN0aW9uIChhbnN3ZXIsIGlucHV0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbnN3ZXIgPiBpbnB1dHMueDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBJc0xlc3NUaGFuT3JFcXVhbFRvOiBmdW5jdGlvbiAoYW5zd2VyLCBpbnB1dHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5zd2VyIDw9IGlucHV0cy54O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIElzR3JlYXRlclRoYW5PckVxdWFsVG86IGZ1bmN0aW9uIChhbnN3ZXIsIGlucHV0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbnN3ZXIgPj0gaW5wdXRzLng7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSXNJbmNsdXNpdmVseUJldHdlZW46IGZ1bmN0aW9uIChhbnN3ZXIsIGlucHV0cykge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8od3h5KTogaGF2ZSBmcm9udGVuZCB2YWxpZGF0aW9uIGF0IGNyZWF0aW9uIHRpbWUgdG8gY2hlY2sgdGhhdFxuICAgICAgICAgICAgICAgIC8vIGlucHV0cy5hIDw9IGlucHV0cy5iXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlciA+PSBpbnB1dHMuYSAmJiBhbnN3ZXIgPD0gaW5wdXRzLmI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSXNXaXRoaW5Ub2xlcmFuY2U6IGZ1bmN0aW9uIChhbnN3ZXIsIGlucHV0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbnN3ZXIgPj0gaW5wdXRzLnggLSBpbnB1dHMudG9sICYmXG4gICAgICAgICAgICAgICAgICAgIGFuc3dlciA8PSBpbnB1dHMueCArIGlucHV0cy50b2w7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVmFsaWRhdG9yIHNlcnZpY2UgZm9yIHRoZSBpbnRlcmFjdGlvbi5cbiAqL1xudmFyIHN0YXRpY18xID0gcmVxdWlyZShcIkBhbmd1bGFyL3VwZ3JhZGUvc3RhdGljXCIpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIGJhc2VfaW50ZXJhY3Rpb25fdmFsaWRhdGlvbl9zZXJ2aWNlXzEgPSByZXF1aXJlKFwiaW50ZXJhY3Rpb25zL2Jhc2UtaW50ZXJhY3Rpb24tdmFsaWRhdGlvbi5zZXJ2aWNlXCIpO1xudmFyIGFwcF9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJhcHAuY29uc3RhbnRzXCIpO1xudmFyIE51bWVyaWNJbnB1dFZhbGlkYXRpb25TZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE51bWVyaWNJbnB1dFZhbGlkYXRpb25TZXJ2aWNlKGJhc2VJbnRlcmFjdGlvblZhbGlkYXRpb25TZXJ2aWNlSW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5iYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZUluc3RhbmNlID0gYmFzZUludGVyYWN0aW9uVmFsaWRhdGlvblNlcnZpY2VJbnN0YW5jZTtcbiAgICB9XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnY3VzdG9taXphdGlvbkFyZ3MnIGlzIGEgZGljdCB3aXRoIHBvc3NpYmxlIHVuZGVyc2NvcmVfY2FzZWRcbiAgICAvLyBrZXlzIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mXG4gICAgLy8gY2FtZWxDYXNpbmcuXG4gICAgTnVtZXJpY0lucHV0VmFsaWRhdGlvblNlcnZpY2UucHJvdG90eXBlLmdldEN1c3RvbWl6YXRpb25BcmdzV2FybmluZ3MgPSBmdW5jdGlvbiAoY3VzdG9taXphdGlvbkFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE3Nik6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnY3VzdG9taXphdGlvbkFyZ3MnIGlzIGEgZGljdCB3aXRoIHBvc3NpYmxlIHVuZGVyc2NvcmVfY2FzZWRcbiAgICAvLyBrZXlzIHdoaWNoIGdpdmUgdHNsaW50IGVycm9ycyBhZ2FpbnN0IHVuZGVyc2NvcmVfY2FzaW5nIGluIGZhdm9yIG9mXG4gICAgLy8gY2FtZWxDYXNpbmcuXG4gICAgTnVtZXJpY0lucHV0VmFsaWRhdGlvblNlcnZpY2UucHJvdG90eXBlLmdldEFsbFdhcm5pbmdzID0gZnVuY3Rpb24gKHN0YXRlTmFtZSwgY3VzdG9taXphdGlvbkFyZ3MsIGFuc3dlckdyb3VwcywgZGVmYXVsdE91dGNvbWUpIHtcbiAgICAgICAgdmFyIHdhcm5pbmdzTGlzdCA9IFtdO1xuICAgICAgICB3YXJuaW5nc0xpc3QgPSB3YXJuaW5nc0xpc3QuY29uY2F0KHRoaXMuZ2V0Q3VzdG9taXphdGlvbkFyZ3NXYXJuaW5ncyhjdXN0b21pemF0aW9uQXJncykpO1xuICAgICAgICAvKlxuICAgICAgICBTdG9yZSBhbiBhbnN3ZXIgcmFuZ2UgZm9yIGV2ZXJ5IHJ1bGUsIHRoZW4gY2hlY2sgZm9yIHJlZHVuZGFudFxuICAgICAgICByYW5nZXMuIEEgcmFuZ2UgaXMgYW4gb2JqZWN0IG9mIHRoZSBmb3JtOlxuICAgICAgICB7XG4gICAgICAgICAgbGI6IGZsb2F0LCBsb3dlciBib3VuZFxuICAgICAgICAgIHViOiBmbG9hdCwgdXBwZXIgYm91bmRcbiAgICAgICAgICBsYmk6IGJvb2wsIGlzIGxvd2VyIGJvdW5kIGluY2x1c2l2ZVxuICAgICAgICAgIHViaTogYm9vbCwgaXMgdXBwZXIgYm91bmQgaW5jbHVzaXZlXG4gICAgICAgIH1cbiAgICAgICAgKi9cbiAgICAgICAgdmFyIHNldExvd2VyQW5kVXBwZXJCb3VuZHMgPSBmdW5jdGlvbiAocmFuZ2UsIGxiLCB1YiwgbGJpLCB1YmkpIHtcbiAgICAgICAgICAgIHJhbmdlLmxiID0gbGI7XG4gICAgICAgICAgICByYW5nZS51YiA9IHViO1xuICAgICAgICAgICAgcmFuZ2UubGJpID0gbGJpO1xuICAgICAgICAgICAgcmFuZ2UudWJpID0gdWJpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgaXNFbmNsb3NlZEJ5ID0gZnVuY3Rpb24gKHJhLCByYikge1xuICAgICAgICAgICAgLy8gQ2hlY2tzIGlmIHJhbmdlIHJhIGlzIGVuY2xvc2VkIGJ5IHJhbmdlIHJiLlxuICAgICAgICAgICAgdmFyIGxvd2VyQm91bmRDb25kaXRpb25Jc1NhdGlzZmllZCA9IChyYi5sYiA8IHJhLmxiKSB8fCAocmIubGIgPT09IHJhLmxiICYmICghcmEubGJpIHx8IHJiLmxiaSkpO1xuICAgICAgICAgICAgdmFyIHVwcGVyQm91bmRDb25kaXRpb25Jc1NhdGlzZmllZCA9IChyYi51YiA+IHJhLnViKSB8fCAocmIudWIgPT09IHJhLnViICYmICghcmEudWJpIHx8IHJiLnViaSkpO1xuICAgICAgICAgICAgcmV0dXJuIGxvd2VyQm91bmRDb25kaXRpb25Jc1NhdGlzZmllZCAmJlxuICAgICAgICAgICAgICAgIHVwcGVyQm91bmRDb25kaXRpb25Jc1NhdGlzZmllZDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJhbmdlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuc3dlckdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gYW5zd2VyR3JvdXBzW2ldLnJ1bGVzO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBydWxlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbal07XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0ge1xuICAgICAgICAgICAgICAgICAgICBhbnN3ZXJHcm91cEluZGV4OiBpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgcnVsZUluZGV4OiBqICsgMSxcbiAgICAgICAgICAgICAgICAgICAgbGI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHViOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBsYmk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB1Ymk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgc3dpdGNoIChydWxlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRXF1YWxzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gcnVsZS5pbnB1dHMueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExvd2VyQW5kVXBwZXJCb3VuZHMocmFuZ2UsIHgsIHgsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0lzSW5jbHVzaXZlbHlCZXR3ZWVuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gcnVsZS5pbnB1dHMuYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gcnVsZS5pbnB1dHMuYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExvd2VyQW5kVXBwZXJCb3VuZHMocmFuZ2UsIGEsIGIsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0lzR3JlYXRlclRoYW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBydWxlLmlucHV0cy54O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG93ZXJBbmRVcHBlckJvdW5kcyhyYW5nZSwgeCwgSW5maW5pdHksIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSXNHcmVhdGVyVGhhbk9yRXF1YWxUbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHJ1bGUuaW5wdXRzLng7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMb3dlckFuZFVwcGVyQm91bmRzKHJhbmdlLCB4LCBJbmZpbml0eSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0lzTGVzc1RoYW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBydWxlLmlucHV0cy54O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG93ZXJBbmRVcHBlckJvdW5kcyhyYW5nZSwgLUluZmluaXR5LCB4LCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0lzTGVzc1RoYW5PckVxdWFsVG8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBydWxlLmlucHV0cy54O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG93ZXJBbmRVcHBlckJvdW5kcyhyYW5nZSwgLUluZmluaXR5LCB4LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSXNXaXRoaW5Ub2xlcmFuY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBydWxlLmlucHV0cy54O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvbCA9IHJ1bGUuaW5wdXRzLnRvbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExvd2VyQW5kVXBwZXJCb3VuZHMocmFuZ2UsIHggLSB0b2wsIHggKyB0b2wsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcmFuZ2VzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0VuY2xvc2VkQnkocmFuZ2UsIHJhbmdlc1trXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcHBfY29uc3RhbnRzXzEuQXBwQ29uc3RhbnRzLldBUk5JTkdfVFlQRVMuRVJST1IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogKCdSdWxlICcgKyAoaiArIDEpICsgJyBmcm9tIGFuc3dlciBncm91cCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgKyAxKSArICcgd2lsbCBuZXZlciBiZSBtYXRjaGVkIGJlY2F1c2UgaXQgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpcyBtYWRlIHJlZHVuZGFudCBieSBydWxlICcgKyByYW5nZXNba10ucnVsZUluZGV4ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBmcm9tIGFuc3dlciBncm91cCAnICsgcmFuZ2VzW2tdLmFuc3dlckdyb3VwSW5kZXggKyAnLicpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByYW5nZXMucHVzaChyYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2FybmluZ3NMaXN0ID0gd2FybmluZ3NMaXN0LmNvbmNhdCh0aGlzLmJhc2VJbnRlcmFjdGlvblZhbGlkYXRpb25TZXJ2aWNlSW5zdGFuY2UuZ2V0QWxsT3V0Y29tZVdhcm5pbmdzKGFuc3dlckdyb3VwcywgZGVmYXVsdE91dGNvbWUsIHN0YXRlTmFtZSkpO1xuICAgICAgICByZXR1cm4gd2FybmluZ3NMaXN0O1xuICAgIH07XG4gICAgdmFyIF9hO1xuICAgIE51bWVyaWNJbnB1dFZhbGlkYXRpb25TZXJ2aWNlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFt0eXBlb2YgKF9hID0gdHlwZW9mIGJhc2VfaW50ZXJhY3Rpb25fdmFsaWRhdGlvbl9zZXJ2aWNlXzEuYmFzZUludGVyYWN0aW9uVmFsaWRhdGlvblNlcnZpY2UgIT09IFwidW5kZWZpbmVkXCIgJiYgYmFzZV9pbnRlcmFjdGlvbl92YWxpZGF0aW9uX3NlcnZpY2VfMS5iYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZSkgPT09IFwiZnVuY3Rpb25cIiA/IF9hIDogT2JqZWN0XSlcbiAgICBdLCBOdW1lcmljSW5wdXRWYWxpZGF0aW9uU2VydmljZSk7XG4gICAgcmV0dXJuIE51bWVyaWNJbnB1dFZhbGlkYXRpb25TZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuTnVtZXJpY0lucHV0VmFsaWRhdGlvblNlcnZpY2UgPSBOdW1lcmljSW5wdXRWYWxpZGF0aW9uU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ051bWVyaWNJbnB1dFZhbGlkYXRpb25TZXJ2aWNlJywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShOdW1lcmljSW5wdXRWYWxpZGF0aW9uU2VydmljZSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIHRoZSBOdW1lcmljSW5wdXQgaW50ZXJhY3Rpb24uXG4gKlxuICogSU1QT1JUQU5UIE5PVEU6IFRoZSBuYW1pbmcgY29udmVudGlvbiBmb3IgY3VzdG9taXphdGlvbiBhcmdzIHRoYXQgYXJlIHBhc3NlZFxuICogaW50byB0aGUgZGlyZWN0aXZlIGlzOiB0aGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyLCBmb2xsb3dlZCBieSAnV2l0aCcsXG4gKiBmb2xsb3dlZCBieSB0aGUgbmFtZSBvZiB0aGUgYXJnLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdpbnRlcmFjdGlvbnMvTnVtZXJpY0lucHV0L2RpcmVjdGl2ZXMvbnVtZXJpYy1pbnB1dC1ydWxlcy5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9jdXJyZW50LWludGVyYWN0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL2NvbnRleHR1YWwvV2luZG93RGltZW5zaW9uc1NlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL3N0YXRlZnVsL0ZvY3VzTWFuYWdlclNlcnZpY2UudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnb3BwaWFJbnRlcmFjdGl2ZU51bWVyaWNJbnB1dCcsIFtcbiAgICAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLCBmdW5jdGlvbiAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7fSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRFeHRlbnNpb25SZXNvdXJjZVVybCgnL2ludGVyYWN0aW9ucy9OdW1lcmljSW5wdXQvZGlyZWN0aXZlcy8nICtcbiAgICAgICAgICAgICAgICAnbnVtZXJpYy1pbnB1dC1pbnRlcmFjdGlvbi5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogW1xuICAgICAgICAgICAgICAgICckYXR0cnMnLCAnRm9jdXNNYW5hZ2VyU2VydmljZScsICdOdW1lcmljSW5wdXRSdWxlc1NlcnZpY2UnLFxuICAgICAgICAgICAgICAgICdXaW5kb3dEaW1lbnNpb25zU2VydmljZScsICdDdXJyZW50SW50ZXJhY3Rpb25TZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJGF0dHJzLCBGb2N1c01hbmFnZXJTZXJ2aWNlLCBOdW1lcmljSW5wdXRSdWxlc1NlcnZpY2UsIFdpbmRvd0RpbWVuc2lvbnNTZXJ2aWNlLCBDdXJyZW50SW50ZXJhY3Rpb25TZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgY3RybC5hbnN3ZXIgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgY3RybC5sYWJlbEZvckZvY3VzVGFyZ2V0ID0gJGF0dHJzLmxhYmVsRm9yRm9jdXNUYXJnZXQgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5OVU1FUklDX0lOUFVUX0ZPUk1fU0NIRU1BID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Zsb2F0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVpX2NvbmZpZzoge31cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQW5zd2VyVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGN0cmwuYW5zd2VyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmFuc3dlciAhPT0gbnVsbCAmJiBjdHJsLmFuc3dlciAhPT0gJycpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnN1Ym1pdEFuc3dlciA9IGZ1bmN0aW9uIChhbnN3ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Fuc3dlclZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyZW50SW50ZXJhY3Rpb25TZXJ2aWNlLm9uU3VibWl0KGFuc3dlciwgTnVtZXJpY0lucHV0UnVsZXNTZXJ2aWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Ym1pdEFuc3dlckZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zdWJtaXRBbnN3ZXIoY3RybC5hbnN3ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBDdXJyZW50SW50ZXJhY3Rpb25TZXJ2aWNlLnJlZ2lzdGVyQ3VycmVudEludGVyYWN0aW9uKHN1Ym1pdEFuc3dlckZuLCBpc0Fuc3dlclZhbGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3IgdGhlIE51bWVyaWNJbnB1dCByZXNwb25zZS5cbiAqXG4gKiBJTVBPUlRBTlQgTk9URTogVGhlIG5hbWluZyBjb252ZW50aW9uIGZvciBjdXN0b21pemF0aW9uIGFyZ3MgdGhhdCBhcmUgcGFzc2VkXG4gKiBpbnRvIHRoZSBkaXJlY3RpdmUgaXM6IHRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIsIGZvbGxvd2VkIGJ5ICdXaXRoJyxcbiAqIGZvbGxvd2VkIGJ5IHRoZSBuYW1lIG9mIHRoZSBhcmcuXG4gKi9cbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0h0bWxFc2NhcGVyU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdvcHBpYVJlc3BvbnNlTnVtZXJpY0lucHV0JywgW1xuICAgICdIdG1sRXNjYXBlclNlcnZpY2UnLCAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uIChIdG1sRXNjYXBlclNlcnZpY2UsIFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RXh0ZW5zaW9uUmVzb3VyY2VVcmwoJy9pbnRlcmFjdGlvbnMvTnVtZXJpY0lucHV0L2RpcmVjdGl2ZXMvJyArXG4gICAgICAgICAgICAgICAgJ251bWVyaWMtaW5wdXQtcmVzcG9uc2UuZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGF0dHJzJywgZnVuY3Rpb24gKCRhdHRycykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuYW5zd2VyID0gSHRtbEVzY2FwZXJTZXJ2aWNlLmVzY2FwZWRKc29uVG9PYmooJGF0dHJzLmFuc3dlcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhbnN3ZXIgaXMgYW4gaW50ZWdlciwgb21pdCB0aGUgZnJhY3Rpb25hbCBwYXJ0LlxuICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC5hbnN3ZXIgJSAxID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmFuc3dlciA9IE1hdGgucm91bmQoY3RybC5hbnN3ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciB0aGUgTnVtZXJpY0lucHV0IHNob3J0IHJlc3BvbnNlLlxuICpcbiAqIElNUE9SVEFOVCBOT1RFOiBUaGUgbmFtaW5nIGNvbnZlbnRpb24gZm9yIGN1c3RvbWl6YXRpb24gYXJncyB0aGF0IGFyZSBwYXNzZWRcbiAqIGludG8gdGhlIGRpcmVjdGl2ZSBpczogdGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlciwgZm9sbG93ZWQgYnkgJ1dpdGgnLFxuICogZm9sbG93ZWQgYnkgdGhlIG5hbWUgb2YgdGhlIGFyZy5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvSHRtbEVzY2FwZXJTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ29wcGlhU2hvcnRSZXNwb25zZU51bWVyaWNJbnB1dCcsIFtcbiAgICAnSHRtbEVzY2FwZXJTZXJ2aWNlJywgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoSHRtbEVzY2FwZXJTZXJ2aWNlLCBVcmxJbnRlcnBvbGF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHt9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFVybEludGVycG9sYXRpb25TZXJ2aWNlLmdldEV4dGVuc2lvblJlc291cmNlVXJsKCcvaW50ZXJhY3Rpb25zL051bWVyaWNJbnB1dC9kaXJlY3RpdmVzLycgK1xuICAgICAgICAgICAgICAgICdudW1lcmljLWlucHV0LXNob3J0LXJlc3BvbnNlLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbJyRhdHRycycsIGZ1bmN0aW9uICgkYXR0cnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmFuc3dlciA9IEh0bWxFc2NhcGVyU2VydmljZS5lc2NhcGVkSnNvblRvT2JqKCRhdHRycy5hbnN3ZXIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYW5zd2VyIGlzIGFuIGludGVnZXIsIG9taXQgdGhlIGZyYWN0aW9uYWwgcGFydC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwuYW5zd2VyICUgMSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5hbnN3ZXIgPSBNYXRoLnJvdW5kKGN0cmwuYW5zd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxOSBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFJlcXVpcmVzIGZvciBUZXh0SW5wdXQgaW50ZXJhY3Rpb24uXG4gKi9cbnJlcXVpcmUoJ2ludGVyYWN0aW9ucy9UZXh0SW5wdXQvdGV4dC1pbnB1dC1wcmVkaWN0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2ludGVyYWN0aW9ucy9UZXh0SW5wdXQvZGlyZWN0aXZlcy90ZXh0LWlucHV0LXJ1bGVzLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ2ludGVyYWN0aW9ucy9UZXh0SW5wdXQvZGlyZWN0aXZlcy90ZXh0LWlucHV0LXZhbGlkYXRpb24uc2VydmljZS50cycpO1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL1RleHRJbnB1dC9kaXJlY3RpdmVzLycgK1xuICAgICdvcHBpYS1pbnRlcmFjdGl2ZS10ZXh0LWlucHV0LmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL1RleHRJbnB1dC9kaXJlY3RpdmVzLycgK1xuICAgICdvcHBpYS1yZXNwb25zZS10ZXh0LWlucHV0LmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL1RleHRJbnB1dC9kaXJlY3RpdmVzLycgK1xuICAgICdvcHBpYS1zaG9ydC1yZXNwb25zZS10ZXh0LWlucHV0LmRpcmVjdGl2ZS50cycpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTQgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIHRoZSBUZXh0SW5wdXQgaW50ZXJhY3Rpb24uXG4gKlxuICogSU1QT1JUQU5UIE5PVEU6IFRoZSBuYW1pbmcgY29udmVudGlvbiBmb3IgY3VzdG9taXphdGlvbiBhcmdzIHRoYXQgYXJlIHBhc3NlZFxuICogaW50byB0aGUgZGlyZWN0aXZlIGlzOiB0aGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyLCBmb2xsb3dlZCBieSAnV2l0aCcsXG4gKiBmb2xsb3dlZCBieSB0aGUgbmFtZSBvZiB0aGUgYXJnLlxuICovXG5yZXF1aXJlKCdkb21haW4vdXRpbGl0aWVzL1VybEludGVycG9sYXRpb25TZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdpbnRlcmFjdGlvbnMvVGV4dElucHV0L2RpcmVjdGl2ZXMvdGV4dC1pbnB1dC1ydWxlcy5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdwYWdlcy9leHBsb3JhdGlvbi1wbGF5ZXItcGFnZS9zZXJ2aWNlcy9jdXJyZW50LWludGVyYWN0aW9uLnNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL2NvbnRleHR1YWwvV2luZG93RGltZW5zaW9uc1NlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0h0bWxFc2NhcGVyU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvc3RhdGVmdWwvRm9jdXNNYW5hZ2VyU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdvcHBpYUludGVyYWN0aXZlVGV4dElucHV0JywgW1xuICAgICdIdG1sRXNjYXBlclNlcnZpY2UnLCAnVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uIChIdG1sRXNjYXBlclNlcnZpY2UsIFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RXh0ZW5zaW9uUmVzb3VyY2VVcmwoJy9pbnRlcmFjdGlvbnMvVGV4dElucHV0L2RpcmVjdGl2ZXMvJyArXG4gICAgICAgICAgICAgICAgJ3RleHQtaW5wdXQtaW50ZXJhY3Rpb24uZGlyZWN0aXZlLmh0bWwnKSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcbiAgICAgICAgICAgICAgICAnJGF0dHJzJywgJ0ZvY3VzTWFuYWdlclNlcnZpY2UnLCAnVGV4dElucHV0UnVsZXNTZXJ2aWNlJyxcbiAgICAgICAgICAgICAgICAnV2luZG93RGltZW5zaW9uc1NlcnZpY2UnLCAnQ3VycmVudEludGVyYWN0aW9uU2VydmljZScsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRhdHRycywgRm9jdXNNYW5hZ2VyU2VydmljZSwgVGV4dElucHV0UnVsZXNTZXJ2aWNlLCBXaW5kb3dEaW1lbnNpb25zU2VydmljZSwgQ3VycmVudEludGVyYWN0aW9uU2VydmljZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwucGxhY2Vob2xkZXIgPSBIdG1sRXNjYXBlclNlcnZpY2UuZXNjYXBlZEpzb25Ub09iaigkYXR0cnMucGxhY2Vob2xkZXJXaXRoVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLnJvd3MgPSAoSHRtbEVzY2FwZXJTZXJ2aWNlLmVzY2FwZWRKc29uVG9PYmooJGF0dHJzLnJvd3NXaXRoVmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5hbnN3ZXIgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgY3RybC5sYWJlbEZvckZvY3VzVGFyZ2V0ID0gJGF0dHJzLmxhYmVsRm9yRm9jdXNUYXJnZXQgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5zY2hlbWEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndW5pY29kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB1aV9jb25maWc6IHt9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdHJsLnBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNjaGVtYS51aV9jb25maWcucGxhY2Vob2xkZXIgPSBjdHJsLnBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdHJsLnJvd3MgJiYgY3RybC5yb3dzICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNjaGVtYS51aV9jb25maWcucm93cyA9IGN0cmwucm93cztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdHJsLnN1Ym1pdEFuc3dlciA9IGZ1bmN0aW9uIChhbnN3ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5zd2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgQ3VycmVudEludGVyYWN0aW9uU2VydmljZS5vblN1Ym1pdChhbnN3ZXIsIFRleHRJbnB1dFJ1bGVzU2VydmljZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJtaXRBbnN3ZXJGbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc3VibWl0QW5zd2VyKGN0cmwuYW5zd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGlkaXR5Q2hlY2tGbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsLmFuc3dlci5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBDdXJyZW50SW50ZXJhY3Rpb25TZXJ2aWNlLnJlZ2lzdGVyQ3VycmVudEludGVyYWN0aW9uKHN1Ym1pdEFuc3dlckZuLCB2YWxpZGl0eUNoZWNrRm4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciB0aGUgVGV4dElucHV0IHJlc3BvbnNlLlxuICpcbiAqIElNUE9SVEFOVCBOT1RFOiBUaGUgbmFtaW5nIGNvbnZlbnRpb24gZm9yIGN1c3RvbWl6YXRpb24gYXJncyB0aGF0IGFyZSBwYXNzZWRcbiAqIGludG8gdGhlIGRpcmVjdGl2ZSBpczogdGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlciwgZm9sbG93ZWQgYnkgJ1dpdGgnLFxuICogZm9sbG93ZWQgYnkgdGhlIG5hbWUgb2YgdGhlIGFyZy5cbiAqL1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xucmVxdWlyZSgnc2VydmljZXMvSHRtbEVzY2FwZXJTZXJ2aWNlLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ29wcGlhUmVzcG9uc2VUZXh0SW5wdXQnLCBbXG4gICAgJ0h0bWxFc2NhcGVyU2VydmljZScsICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgZnVuY3Rpb24gKEh0bWxFc2NhcGVyU2VydmljZSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7fSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRFeHRlbnNpb25SZXNvdXJjZVVybCgnL2ludGVyYWN0aW9ucy9UZXh0SW5wdXQvZGlyZWN0aXZlcy8nICtcbiAgICAgICAgICAgICAgICAndGV4dC1pbnB1dC1yZXNwb25zZS5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckYXR0cnMnLCBmdW5jdGlvbiAoJGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgY3RybC5hbnN3ZXIgPSBIdG1sRXNjYXBlclNlcnZpY2UuZXNjYXBlZEpzb25Ub09iaigkYXR0cnMuYW5zd2VyKTtcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIHRoZSBUZXh0SW5wdXQgc2hvcnQgcmVzcG9uc2UuXG4gKlxuICogSU1QT1JUQU5UIE5PVEU6IFRoZSBuYW1pbmcgY29udmVudGlvbiBmb3IgY3VzdG9taXphdGlvbiBhcmdzIHRoYXQgYXJlIHBhc3NlZFxuICogaW50byB0aGUgZGlyZWN0aXZlIGlzOiB0aGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyLCBmb2xsb3dlZCBieSAnV2l0aCcsXG4gKiBmb2xsb3dlZCBieSB0aGUgbmFtZSBvZiB0aGUgYXJnLlxuICovXG5yZXF1aXJlKCdmaWx0ZXJzL3N0cmluZy11dGlsaXR5LWZpbHRlcnMvdHJ1bmNhdGUtYXQtZmlyc3QtbGluZS5maWx0ZXIudHMnKTtcbnJlcXVpcmUoJ2RvbWFpbi91dGlsaXRpZXMvVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UudHMnKTtcbnJlcXVpcmUoJ3NlcnZpY2VzL0h0bWxFc2NhcGVyU2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZGlyZWN0aXZlKCdvcHBpYVNob3J0UmVzcG9uc2VUZXh0SW5wdXQnLCBbXG4gICAgJ0h0bWxFc2NhcGVyU2VydmljZScsICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgZnVuY3Rpb24gKEh0bWxFc2NhcGVyU2VydmljZSwgVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7fSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRFeHRlbnNpb25SZXNvdXJjZVVybCgnL2ludGVyYWN0aW9ucy9UZXh0SW5wdXQvZGlyZWN0aXZlcy8nICtcbiAgICAgICAgICAgICAgICAndGV4dC1pbnB1dC1zaG9ydC1yZXNwb25zZS5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckYXR0cnMnLCBmdW5jdGlvbiAoJGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgY3RybC5hbnN3ZXIgPSBIdG1sRXNjYXBlclNlcnZpY2UuZXNjYXBlZEpzb25Ub09iaigkYXR0cnMuYW5zd2VyKTtcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTkgVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBSdWxlcyBzZXJ2aWNlIGZvciB0aGUgaW50ZXJhY3Rpb24uXG4gKi9cbnJlcXVpcmUoJ2ZpbHRlcnMvc3RyaW5nLXV0aWxpdHktZmlsdGVycy9ub3JtYWxpemUtd2hpdGVzcGFjZS5maWx0ZXIudHMnKTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ1RleHRJbnB1dFJ1bGVzU2VydmljZScsIFtcbiAgICAnJGZpbHRlcicsIGZ1bmN0aW9uICgkZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBFcXVhbHM6IGZ1bmN0aW9uIChhbnN3ZXIsIGlucHV0cykge1xuICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVkQW5zd2VyID0gJGZpbHRlcignbm9ybWFsaXplV2hpdGVzcGFjZScpKGFuc3dlcik7XG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9ICRmaWx0ZXIoJ25vcm1hbGl6ZVdoaXRlc3BhY2UnKShpbnB1dHMueCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRBbnN3ZXIudG9Mb3dlckNhc2UoKSA9PT0gbm9ybWFsaXplZElucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRnV6enlFcXVhbHM6IGZ1bmN0aW9uIChhbnN3ZXIsIGlucHV0cykge1xuICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVkQW5zd2VyID0gJGZpbHRlcignbm9ybWFsaXplV2hpdGVzcGFjZScpKGFuc3dlcik7XG4gICAgICAgICAgICAgICAgdmFyIGFuc3dlclN0cmluZyA9IG5vcm1hbGl6ZWRBbnN3ZXIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gJGZpbHRlcignbm9ybWFsaXplV2hpdGVzcGFjZScpKGlucHV0cy54KTtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXRTdHJpbmcgPSBub3JtYWxpemVkSW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRTdHJpbmcgPT09IGFuc3dlclN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGVkaXREaXN0YW5jZSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGlucHV0U3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXREaXN0YW5jZS5wdXNoKFtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAxOyBqIDw9IGFuc3dlclN0cmluZy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBlZGl0RGlzdGFuY2VbMF0ucHVzaChqKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gaW5wdXRTdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPD0gYW5zd2VyU3RyaW5nLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRTdHJpbmcuY2hhckF0KGkgLSAxKSA9PT0gYW5zd2VyU3RyaW5nLmNoYXJBdChqIC0gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0RGlzdGFuY2VbaV1bal0gPSBlZGl0RGlzdGFuY2VbaSAtIDFdW2ogLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXREaXN0YW5jZVtpXVtqXSA9IE1hdGgubWluKGVkaXREaXN0YW5jZVtpIC0gMV1baiAtIDFdLCBlZGl0RGlzdGFuY2VbaV1baiAtIDFdLCBlZGl0RGlzdGFuY2VbaSAtIDFdW2pdKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVkaXREaXN0YW5jZVtpbnB1dFN0cmluZy5sZW5ndGhdW2Fuc3dlclN0cmluZy5sZW5ndGhdID09PSAxO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIENhc2VTZW5zaXRpdmVFcXVhbHM6IGZ1bmN0aW9uIChhbnN3ZXIsIGlucHV0cykge1xuICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVkQW5zd2VyID0gJGZpbHRlcignbm9ybWFsaXplV2hpdGVzcGFjZScpKGFuc3dlcik7XG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9ICRmaWx0ZXIoJ25vcm1hbGl6ZVdoaXRlc3BhY2UnKShpbnB1dHMueCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRBbnN3ZXIgPT09IG5vcm1hbGl6ZWRJbnB1dDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBTdGFydHNXaXRoOiBmdW5jdGlvbiAoYW5zd2VyLCBpbnB1dHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplZEFuc3dlciA9ICRmaWx0ZXIoJ25vcm1hbGl6ZVdoaXRlc3BhY2UnKShhbnN3ZXIpO1xuICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSAkZmlsdGVyKCdub3JtYWxpemVXaGl0ZXNwYWNlJykoaW5wdXRzLngpO1xuICAgICAgICAgICAgICAgIHJldHVybiBub3JtYWxpemVkQW5zd2VyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihub3JtYWxpemVkSW5wdXQudG9Mb3dlckNhc2UoKSkgPT09IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQ29udGFpbnM6IGZ1bmN0aW9uIChhbnN3ZXIsIGlucHV0cykge1xuICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVkQW5zd2VyID0gJGZpbHRlcignbm9ybWFsaXplV2hpdGVzcGFjZScpKGFuc3dlcik7XG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9ICRmaWx0ZXIoJ25vcm1hbGl6ZVdoaXRlc3BhY2UnKShpbnB1dHMueCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRBbnN3ZXIudG9Mb3dlckNhc2UoKS5pbmRleE9mKG5vcm1hbGl6ZWRJbnB1dC50b0xvd2VyQ2FzZSgpKSAhPT0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFZhbGlkYXRvciBzZXJ2aWNlIGZvciB0aGUgaW50ZXJhY3Rpb24uXG4gKi9cbnJlcXVpcmUoJ2ludGVyYWN0aW9ucy9iYXNlLWludGVyYWN0aW9uLXZhbGlkYXRpb24uc2VydmljZS50cycpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuZmFjdG9yeSgnVGV4dElucHV0VmFsaWRhdGlvblNlcnZpY2UnLCBbXG4gICAgJ2Jhc2VJbnRlcmFjdGlvblZhbGlkYXRpb25TZXJ2aWNlJywgJ0lOVEVSQUNUSU9OX1NQRUNTJywgJ1dBUk5JTkdfVFlQRVMnLFxuICAgIGZ1bmN0aW9uIChiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZSwgSU5URVJBQ1RJT05fU1BFQ1MsIFdBUk5JTkdfVFlQRVMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldEN1c3RvbWl6YXRpb25BcmdzV2FybmluZ3M6IGZ1bmN0aW9uIChjdXN0b21pemF0aW9uQXJncykge1xuICAgICAgICAgICAgICAgIHZhciB3YXJuaW5nc0xpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICBiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZS5yZXF1aXJlQ3VzdG9taXphdGlvbkFyZ3VtZW50cyhjdXN0b21pemF0aW9uQXJncywgWydwbGFjZWhvbGRlcicsICdyb3dzJ10pO1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGN1c3RvbWl6YXRpb25BcmdzLnBsYWNlaG9sZGVyLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5pc1N0cmluZyhwbGFjZWhvbGRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybmluZ3NMaXN0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogV0FSTklOR19UWVBFUy5FUlJPUixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICgnUGxhY2Vob2xkZXIgdGV4dCBtdXN0IGJlIGEgc3RyaW5nLicpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaXNJbnQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci5pc051bWJlcihuKSAmJiBuICUgMSA9PT0gMDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciByb3dzID0gY3VzdG9taXphdGlvbkFyZ3Mucm93cy52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaXNJbnQocm93cykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRTcGVjcyA9IElOVEVSQUNUSU9OX1NQRUNTLlRleHRJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1c3RvbWl6YXRpb25BcmdTcGVjcyA9IHRleHRTcGVjcy5jdXN0b21pemF0aW9uX2FyZ19zcGVjcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvd3NTcGVjcyA9IGN1c3RvbWl6YXRpb25BcmdTcGVjc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pblJvd3MgPSByb3dzU3BlY3Muc2NoZW1hLnZhbGlkYXRvcnNbMF0ubWluX3ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF4Um93cyA9IHJvd3NTcGVjcy5zY2hlbWEudmFsaWRhdG9yc1sxXS5tYXhfdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dzIDwgbWluUm93cyB8fCByb3dzID4gbWF4Um93cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ3NMaXN0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFdBUk5JTkdfVFlQRVMuRVJST1IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogKCdOdW1iZXIgb2Ygcm93cyBtdXN0IGJlIGJldHdlZW4gJyArIG1pblJvd3MgKyAnIGFuZCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4Um93cyArICcuJylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3YXJuaW5nc0xpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBXQVJOSU5HX1RZUEVTLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogKCdOdW1iZXIgb2Ygcm93cyBtdXN0IGJlIGludGVncmFsLicpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gd2FybmluZ3NMaXN0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEFsbFdhcm5pbmdzOiBmdW5jdGlvbiAoc3RhdGVOYW1lLCBjdXN0b21pemF0aW9uQXJncywgYW5zd2VyR3JvdXBzLCBkZWZhdWx0T3V0Y29tZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEN1c3RvbWl6YXRpb25BcmdzV2FybmluZ3MoY3VzdG9taXphdGlvbkFyZ3MpLmNvbmNhdChiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZS5nZXRBbGxPdXRjb21lV2FybmluZ3MoYW5zd2VyR3JvdXBzLCBkZWZhdWx0T3V0Y29tZSwgc3RhdGVOYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNyBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFRleHRJbnB1dCBpbnRlcmFjdGlvbiBwcmVkaWN0aW9uIGZ1bmN0aW9ucy5cbiAqXG4gKiBJTVBPUlRBTlQgTk9URTogVGhlIHByZWRpY3Rpb24gZnVuY3Rpb24gdXNlcyB0aGUgY2xhc3NpZmllciBkYXRhXG4gKiBvZiB0cmFpbmVkIG1vZGVsICh0ZXh0IGNsYXNzaWZpZXIgbW9kZWwpIGZvciBpbmZlcmVuY2UuIFRoZXNlIGZ1bmN0aW9uc1xuICogbXVzdCBiZSBjaGFuZ2VkIGlmIHRoZXJlIGFyZSBhbnkgY2hhbmdlcyBpbiBjb3JyZXNwb25kaW5nIGNsYXNzaWZpZXIgdHJhaW5pbmdcbiAqIGZ1bmN0aW9uIG9uIE9wcGlhLW1sLlxuICovXG5yZXF1aXJlKCdjbGFzc2lmaWVycy9zdm0tcHJlZGljdGlvbi5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdjbGFzc2lmaWVycy90ZXh0LWlucHV0LnRva2VuaXplci50cycpO1xucmVxdWlyZSgnY2xhc3NpZmllcnMvY291bnQtdmVjdG9yaXplci5zZXJ2aWNlLnRzJyk7XG5yZXF1aXJlKCdpbnRlcmFjdGlvbnMvaW50ZXJhY3Rpb25zLWV4dGVuc2lvbi5jb25zdGFudHMuYWpzLnRzJyk7XG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5mYWN0b3J5KCdUZXh0SW5wdXRQcmVkaWN0aW9uU2VydmljZScsIFtcbiAgICAnQ291bnRWZWN0b3JpemVyU2VydmljZScsICdTVk1QcmVkaWN0aW9uU2VydmljZScsXG4gICAgJ1RleHRJbnB1dFRva2VuaXplcicsICdURVhUX0lOUFVUX1BSRURJQ1RJT05fU0VSVklDRV9USFJFU0hPTEQnLCBmdW5jdGlvbiAoQ291bnRWZWN0b3JpemVyU2VydmljZSwgU1ZNUHJlZGljdGlvblNlcnZpY2UsIFRleHRJbnB1dFRva2VuaXplciwgVEVYVF9JTlBVVF9QUkVESUNUSU9OX1NFUlZJQ0VfVEhSRVNIT0xEKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcmVkaWN0OiBmdW5jdGlvbiAoY2xhc3NpZmllckRhdGEsIHRleHRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHZhciBjdlZvY2FidWxhcnkgPSBjbGFzc2lmaWVyRGF0YS5jdl92b2NhYnVsYXJ5O1xuICAgICAgICAgICAgICAgIHZhciBzdm1EYXRhID0gY2xhc3NpZmllckRhdGEuU1ZNO1xuICAgICAgICAgICAgICAgIC8vIFRva2VuaXplIHRoZSB0ZXh0IGlucHV0LlxuICAgICAgICAgICAgICAgIHRleHRJbnB1dCA9IHRleHRJbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0SW5wdXRUb2tlbnMgPSBUZXh0SW5wdXRUb2tlbml6ZXIuZ2VuZXJhdGVUb2tlbnModGV4dElucHV0KTtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dFZlY3RvciA9IENvdW50VmVjdG9yaXplclNlcnZpY2UudmVjdG9yaXplKHRleHRJbnB1dFRva2VucywgY3ZWb2NhYnVsYXJ5KTtcbiAgICAgICAgICAgICAgICB2YXIgcHJlZGljdGlvblJlc3VsdCA9IFNWTVByZWRpY3Rpb25TZXJ2aWNlLnByZWRpY3Qoc3ZtRGF0YSwgdGV4dFZlY3Rvcik7XG4gICAgICAgICAgICAgICAgaWYgKHByZWRpY3Rpb25SZXN1bHQucHJlZGljdGlvbkNvbmZpZGVuY2UgPlxuICAgICAgICAgICAgICAgICAgICBURVhUX0lOUFVUX1BSRURJQ1RJT05fU0VSVklDRV9USFJFU0hPTEQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZWRpY3Rpb25SZXN1bHQucHJlZGljdGlvbkxhYmVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEJhc2UgdmFsaWRhdGlvbiBzZXJ2aWNlIGZvciBpbnRlcmFjdGlvbnMuXG4gKi9cbnZhciBzdGF0aWNfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci91cGdyYWRlL3N0YXRpY1wiKTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBhcHBfY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiYXBwLmNvbnN0YW50c1wiKTtcbnZhciBiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZSgpIHtcbiAgICB9XG4gICAgLy8gJ2FyZ05hbWVzJyBpcyBhbiBhcnJheSBvZiB0b3AtbGV2ZWwgY3VzdG9taXphdGlvbiBhcmd1bWVudCBuYW1lcyAoc3VjaFxuICAgIC8vIGFzICdjaG9jaWVzJykgdXNlZCB0byB2ZXJpZnkgdGhlIGJhc2ljIHN0cnVjdHVyZSBvZiB0aGUgaW5wdXRcbiAgICAvLyBjdXN0b21pemF0aW9uIGFyZ3VtZW50cyBvYmplY3QuXG4gICAgYmFzZUludGVyYWN0aW9uVmFsaWRhdGlvblNlcnZpY2UucHJvdG90eXBlLnJlcXVpcmVDdXN0b21pemF0aW9uQXJndW1lbnRzID0gZnVuY3Rpb24gKGN1c3RvbWl6YXRpb25Bcmd1bWVudHMsIGFyZ05hbWVzKSB7XG4gICAgICAgIHZhciBtaXNzaW5nQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ05hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIWN1c3RvbWl6YXRpb25Bcmd1bWVudHMuaGFzT3duUHJvcGVydHkoYXJnTmFtZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgbWlzc2luZ0FyZ3MucHVzaChhcmdOYW1lc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pc3NpbmdBcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmIChtaXNzaW5nQXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyAnRXhwZWN0ZWQgY3VzdG9taXphdGlvbiBhcmd1bWVudHMgdG8gaGF2ZSBwcm9wZXJ0eTogJyArXG4gICAgICAgICAgICAgICAgICAgIG1pc3NpbmdBcmdzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ0V4cGVjdGVkIGN1c3RvbWl6YXRpb24gYXJndW1lbnRzIHRvIGhhdmUgcHJvcGVydGllczogJyArXG4gICAgICAgICAgICAgICAgICAgIG1pc3NpbmdBcmdzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFRPRE8oIzcxNjUpOiBSZXBsYWNlICdhbnknIHdpdGggdGhlIGV4YWN0IHR5cGUuIFRoaXMgaGFzIGJlZW4ga2VwdCBhc1xuICAgIC8vICdhbnknIGJlY2F1c2UgJ2Fuc3dlckdyb3VwcycgaXMgYW4gYW5zd2VyIGdyb3VwIGRvbWFpbiBvYmplY3QgYW5kIGNhbiBiZVxuICAgIC8vIHR5cGVkIGFmdGVyIEFuc3dlckdyb3VwT2JqZWN0RmFjdG9yeS50cyBpcyB1cGdyYWRlZC5cbiAgICBiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZS5wcm90b3R5cGUuZ2V0QW5zd2VyR3JvdXBXYXJuaW5ncyA9IGZ1bmN0aW9uIChhbnN3ZXJHcm91cHMsIHN0YXRlTmFtZSkge1xuICAgICAgICB2YXIgcGFydGlhbFdhcm5pbmdzTGlzdCA9IFtdO1xuICAgICAgICAvLyBUaGlzIGRvZXMgbm90IGNoZWNrIHRoZSBkZWZhdWx0IG91dGNvbWUuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5zd2VyR3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYW5zd2VyR3JvdXBzW2ldLm91dGNvbWUuaXNDb25mdXNpbmcoc3RhdGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxXYXJuaW5nc0xpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGFwcF9jb25zdGFudHNfMS5BcHBDb25zdGFudHMuV0FSTklOR19UWVBFUy5FUlJPUixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogKCdQbGVhc2Ugc3BlY2lmeSB3aGF0IE9wcGlhIHNob3VsZCBkbyBpbiBhbnN3ZXIgZ3JvdXAgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcoaSArIDEpICsgJy4nKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFuc3dlckdyb3Vwc1tpXS5vdXRjb21lLmRlc3QgPT09IHN0YXRlTmFtZSAmJlxuICAgICAgICAgICAgICAgIGFuc3dlckdyb3Vwc1tpXS5vdXRjb21lLmxhYmVsbGVkQXNDb3JyZWN0KSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbFdhcm5pbmdzTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogYXBwX2NvbnN0YW50c18xLkFwcENvbnN0YW50cy5XQVJOSU5HX1RZUEVTLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAoJ0luIGFuc3dlciBncm91cCAnICsgU3RyaW5nKGkgKyAxKSArICcsIHNlbGYtbG9vcHMgc2hvdWxkICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ25vdCBiZSBsYWJlbGxlZCBhcyBjb3JyZWN0LicpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnRpYWxXYXJuaW5nc0xpc3Q7XG4gICAgfTtcbiAgICBiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZS5wcm90b3R5cGUuZ2V0RGVmYXVsdE91dGNvbWVXYXJuaW5ncyA9IGZ1bmN0aW9uIChkZWZhdWx0T3V0Y29tZSwgc3RhdGVOYW1lKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsV2FybmluZ3NMaXN0ID0gW107XG4gICAgICAgIGlmIChkZWZhdWx0T3V0Y29tZSAmJiBkZWZhdWx0T3V0Y29tZS5pc0NvbmZ1c2luZyhzdGF0ZU5hbWUpKSB7XG4gICAgICAgICAgICBwYXJ0aWFsV2FybmluZ3NMaXN0LnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IGFwcF9jb25zdGFudHNfMS5BcHBDb25zdGFudHMuV0FSTklOR19UWVBFUy5FUlJPUixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAoJ1BsZWFzZSBhZGQgZmVlZGJhY2sgZm9yIHRoZSB1c2VyIGluIHRoZSBbQWxsIG90aGVyIGFuc3dlcnNdICcgK1xuICAgICAgICAgICAgICAgICAgICAncnVsZS4nKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmF1bHRPdXRjb21lICYmIGRlZmF1bHRPdXRjb21lLmRlc3QgPT09IHN0YXRlTmFtZSAmJlxuICAgICAgICAgICAgZGVmYXVsdE91dGNvbWUubGFiZWxsZWRBc0NvcnJlY3QpIHtcbiAgICAgICAgICAgIHBhcnRpYWxXYXJuaW5nc0xpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogYXBwX2NvbnN0YW50c18xLkFwcENvbnN0YW50cy5XQVJOSU5HX1RZUEVTLkVSUk9SLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICgnSW4gdGhlIFtBbGwgb3RoZXIgYW5zd2Vyc10gZ3JvdXAsIHNlbGYtbG9vcHMgc2hvdWxkIG5vdCBiZSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsbGVkIGFzIGNvcnJlY3QuJylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJ0aWFsV2FybmluZ3NMaXN0O1xuICAgIH07XG4gICAgLy8gVE9ETygjNzE2NSk6IFJlcGxhY2UgJ2FueScgd2l0aCB0aGUgZXhhY3QgdHlwZS4gVGhpcyBoYXMgYmVlbiBrZXB0IGFzXG4gICAgLy8gJ2FueScgYmVjYXVzZSAnYW5zd2VyR3JvdXBzJyBpcyBhbiBhbnN3ZXIgZ3JvdXAgZG9tYWluIG9iamVjdCBhbmQgY2FuIGJlXG4gICAgLy8gdHlwZWQgYWZ0ZXIgQW5zd2VyR3JvdXBPYmplY3RGYWN0b3J5LnRzIGlzIHVwZ3JhZGVkLlxuICAgIGJhc2VJbnRlcmFjdGlvblZhbGlkYXRpb25TZXJ2aWNlLnByb3RvdHlwZS5nZXRBbGxPdXRjb21lV2FybmluZ3MgPSBmdW5jdGlvbiAoYW5zd2VyR3JvdXBzLCBkZWZhdWx0T3V0Y29tZSwgc3RhdGVOYW1lKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5nZXRBbnN3ZXJHcm91cFdhcm5pbmdzKGFuc3dlckdyb3Vwcywgc3RhdGVOYW1lKS5jb25jYXQodGhpcy5nZXREZWZhdWx0T3V0Y29tZVdhcm5pbmdzKGRlZmF1bHRPdXRjb21lLCBzdGF0ZU5hbWUpKSk7XG4gICAgfTtcbiAgICBiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICBwcm92aWRlZEluOiAncm9vdCdcbiAgICAgICAgfSlcbiAgICBdLCBiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZSk7XG4gICAgcmV0dXJuIGJhc2VJbnRlcmFjdGlvblZhbGlkYXRpb25TZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuYmFzZUludGVyYWN0aW9uVmFsaWRhdGlvblNlcnZpY2UgPSBiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZTtcbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmZhY3RvcnkoJ2Jhc2VJbnRlcmFjdGlvblZhbGlkYXRpb25TZXJ2aWNlJywgc3RhdGljXzEuZG93bmdyYWRlSW5qZWN0YWJsZShiYXNlSW50ZXJhY3Rpb25WYWxpZGF0aW9uU2VydmljZSkpO1xuIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIE9wcGlhIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHMgZm9yIGludGVyYWN0aW9ucyBleHRlbnNpb25zLlxuICovXG4vLyBUT0RPKCM3MDkyKTogRGVsZXRlIHRoaXMgZmlsZSBvbmNlIG1pZ3JhdGlvbiBpcyBjb21wbGV0ZSBhbmQgdGhlc2UgQW5ndWxhckpTXG4vLyBlcXVpdmFsZW50cyBvZiB0aGUgQW5ndWxhciBjb25zdGFudHMgYXJlIG5vIGxvbmdlciBuZWVkZWQuXG52YXIgaW50ZXJhY3Rpb25zX2V4dGVuc2lvbl9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCJpbnRlcmFjdGlvbnMvaW50ZXJhY3Rpb25zLWV4dGVuc2lvbi5jb25zdGFudHNcIik7XG4vLyBNaW5pbXVtIGNvbmZpZGVuY2UgcmVxdWlyZWQgZm9yIGEgcHJlZGljdGVkIGFuc3dlciBncm91cCB0byBiZSBzaG93biB0byB1c2VyLlxuLy8gR2VuZXJhbGx5IGEgdGhyZXNob2xkIG9mIDAuNy0wLjggaXMgYXNzdW1lZCB0byBiZSBhIGdvb2Qgb25lIGluIHByYWN0aWNlLFxuLy8gaG93ZXZlciB2YWx1ZSBuZWVkIG5vdCBiZSBpbiB0aG9zZSBib3VuZHMuXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnQ09ERV9SRVBMX1BSRURJQ1RJT05fU0VSVklDRV9USFJFU0hPTEQnLCBpbnRlcmFjdGlvbnNfZXh0ZW5zaW9uX2NvbnN0YW50c18xLkludGVyYWN0aW9uc0V4dGVuc2lvbnNDb25zdGFudHMuQ09ERV9SRVBMX1BSRURJQ1RJT05fU0VSVklDRV9USFJFU0hPTEQpO1xuYW5ndWxhci5tb2R1bGUoJ29wcGlhJykuY29uc3RhbnQoJ0dSQVBIX0lOUFVUX0xFRlRfTUFSR0lOJywgaW50ZXJhY3Rpb25zX2V4dGVuc2lvbl9jb25zdGFudHNfMS5JbnRlcmFjdGlvbnNFeHRlbnNpb25zQ29uc3RhbnRzLkdSQVBIX0lOUFVUX0xFRlRfTUFSR0lOKTtcbi8vIEdpdmVzIHRoZSBzdGFmZi1saW5lcyBodW1hbiByZWFkYWJsZSB2YWx1ZXMuXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5jb25zdGFudCgnTk9URV9OQU1FU19UT19NSURJX1ZBTFVFUycsIGludGVyYWN0aW9uc19leHRlbnNpb25fY29uc3RhbnRzXzEuSW50ZXJhY3Rpb25zRXh0ZW5zaW9uc0NvbnN0YW50cy5OT1RFX05BTUVTX1RPX01JRElfVkFMVUVTKTtcbi8vIE1pbmltdW0gY29uZmlkZW5jZSByZXF1aXJlZCBmb3IgYSBwcmVkaWN0ZWQgYW5zd2VyIGdyb3VwIHRvIGJlIHNob3duIHRvIHVzZXIuXG4vLyBHZW5lcmFsbHkgYSB0aHJlc2hvbGQgb2YgMC43LTAuOCBpcyBhc3N1bWVkIHRvIGJlIGEgZ29vZCBvbmUgaW4gcHJhY3RpY2UsXG4vLyBob3dldmVyIHZhbHVlIG5lZWQgbm90IGJlIGluIHRob3NlIGJvdW5kcy5cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmNvbnN0YW50KCdURVhUX0lOUFVUX1BSRURJQ1RJT05fU0VSVklDRV9USFJFU0hPTEQnLCBpbnRlcmFjdGlvbnNfZXh0ZW5zaW9uX2NvbnN0YW50c18xLkludGVyYWN0aW9uc0V4dGVuc2lvbnNDb25zdGFudHMuVEVYVF9JTlBVVF9QUkVESUNUSU9OX1NFUlZJQ0VfVEhSRVNIT0xEKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgUmVxdWlyZXMgZm9yIHF1ZXN0aW9uIG9ubHkgaW50ZXJhY3Rpb25zLlxuICovXG5yZXF1aXJlKCdpbnRlcmFjdGlvbnMvTXVsdGlwbGVDaG9pY2VJbnB1dC9NdWx0aXBsZUNob2ljZUlucHV0LnRzJyk7XG5yZXF1aXJlKCdpbnRlcmFjdGlvbnMvTnVtZXJpY0lucHV0L051bWVyaWNJbnB1dC50cycpO1xucmVxdWlyZSgnaW50ZXJhY3Rpb25zL1RleHRJbnB1dC9UZXh0SW5wdXQudHMnKTtcbiIsIi8vIENvcHlyaWdodCAyMDE5IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgUmVxdWlyZXMgZm9yIG9iamVjdCB0ZW1wbGF0ZXMgcmVxdWlyZWQgZm9yIHBsYXllcnMuXG4gKi9cbnJlcXVpcmUoJ29iamVjdHMvdGVtcGxhdGVzL21hdGgtbGF0ZXgtc3RyaW5nLWVkaXRvci5kaXJlY3RpdmUudHMnKTtcbnJlcXVpcmUoJ29iamVjdHMvdGVtcGxhdGVzL3Nhbml0aXplZC11cmwtZWRpdG9yLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnb2JqZWN0cy90ZW1wbGF0ZXMvbGlzdC1vZi10YWJzLWVkaXRvci5kaXJlY3RpdmUudHMnKTtcbiIsIi8vIENvcHlyaWdodCAyMDE4IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMtSVMnIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEaXJlY3RpdmUgZm9yIGxpc3Qgb2YgdGFicyBlZGl0b3IuXG4gKi9cbi8vIEV2ZXJ5IGVkaXRvciBkaXJlY3RpdmUgc2hvdWxkIGltcGxlbWVudCBhbiBhbHdheXNFZGl0YWJsZSBvcHRpb24uIFRoZXJlXG4vLyBtYXkgYmUgYWRkaXRpb25hbCBjdXN0b21pemF0aW9uIG9wdGlvbnMgZm9yIHRoZSBlZGl0b3IgdGhhdCBzaG91bGQgYmUgcGFzc2VkXG4vLyBpbiB2aWEgaW5pdEFyZ3MuXG5hbmd1bGFyLm1vZHVsZSgnb3BwaWEnKS5kaXJlY3RpdmUoJ2xpc3RPZlRhYnNFZGl0b3InLCBbXG4gICAgJ1VybEludGVycG9sYXRpb25TZXJ2aWNlJyxcbiAgICBmdW5jdGlvbiAoVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRFeHRlbnNpb25SZXNvdXJjZVVybCgnL29iamVjdHMvdGVtcGxhdGVzL2xpc3QtZWRpdG9yLmRpcmVjdGl2ZS5odG1sJyksXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuU0NIRU1BID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGljdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RhYiB0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2hlbWE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndW5pY29kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnaXNfbm9uZW1wdHknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdjb250ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGFiIGNvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2h0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpX2NvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlX2NvbXBsZXhfZXh0ZW5zaW9uczogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB1aV9jb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRfZWxlbWVudF90ZXh0OiAnQWRkIG5ldyB0YWInXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3RybC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsIi8vIENvcHlyaWdodCAyMDE0IFRoZSBPcHBpYSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGlyZWN0aXZlIGZvciBtYXRoIGxhdGV4IHN0cmluZyBlZGl0b3IuXG4gKi9cbnJlcXVpcmUoJ2RpcmVjdGl2ZXMvbWF0aGpheC1iaW5kLmRpcmVjdGl2ZS50cycpO1xucmVxdWlyZSgnZG9tYWluL3V0aWxpdGllcy9VcmxJbnRlcnBvbGF0aW9uU2VydmljZS50cycpO1xuLy8gRXZlcnkgZWRpdG9yIGRpcmVjdGl2ZSBzaG91bGQgaW1wbGVtZW50IGFuIGFsd2F5c0VkaXRhYmxlIG9wdGlvbi4gVGhlcmVcbi8vIG1heSBiZSBhZGRpdGlvbmFsIGN1c3RvbWl6YXRpb24gb3B0aW9ucyBmb3IgdGhlIGVkaXRvciB0aGF0IHNob3VsZCBiZSBwYXNzZWRcbi8vIGluIHZpYSBpbml0QXJncy5cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnbWF0aExhdGV4U3RyaW5nRWRpdG9yJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgICAgIGdldEFsd2F5c0VkaXRhYmxlOiAnJicsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBVcmxJbnRlcnBvbGF0aW9uU2VydmljZS5nZXRFeHRlbnNpb25SZXNvdXJjZVVybCgnL29iamVjdHMvdGVtcGxhdGVzL21hdGgtbGF0ZXgtc3RyaW5nLWVkaXRvci5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgY3RybC5wbGFjZWhvbGRlclRleHQgPSAnXFxcXGZyYWN7eH17eX0nO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmFsd2F5c0VkaXRhYmxlID0gY3RybC5nZXRBbHdheXNFZGl0YWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgY29tcG9uZW50IGVhY2ggdGltZSB0aGUgdmFsdWUgY2hhbmdlcyAoZS5nLiBpZiB0aGlzIGlzIHBhcnRcbiAgICAgICAgICAgICAgICAgICAgLy8gb2YgYW4gZWRpdGFibGUgbGlzdCkuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLnZhbHVlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5sb2NhbFZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBjdHJsLnZhbHVlIHx8ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwuYWx3YXlzRWRpdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLmxvY2FsVmFsdWUubGFiZWwnLCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwub3BlbkVkaXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5jbG9zZUVkaXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucmVwbGFjZVZhbHVlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5sb2NhbFZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbmV3VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmNsb3NlRWRpdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRvbignZXh0ZXJuYWxTYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdHJsLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnJlcGxhY2VWYWx1ZShjdHJsLmxvY2FsVmFsdWUubGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgJHNjb3BlLiRhcHBseSgpIGNhbGwgaXMgbmVlZGVkIHRvIHByb3BhZ2F0ZSB0aGUgcmVwbGFjZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuY2xvc2VFZGl0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNCBUaGUgT3BwaWEgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERpcmVjdGl2ZSBmb3Igc2FuaXRpemVkIFVSTCBlZGl0b3IuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdvcHBpYScpLmRpcmVjdGl2ZSgnc2FuaXRpemVkVXJsRWRpdG9yJywgW1xuICAgICdVcmxJbnRlcnBvbGF0aW9uU2VydmljZScsXG4gICAgZnVuY3Rpb24gKFVybEludGVycG9sYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIC8vIEVkaXRhYmxlIFVSTCBkaXJlY3RpdmUuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogVXJsSW50ZXJwb2xhdGlvblNlcnZpY2UuZ2V0RXh0ZW5zaW9uUmVzb3VyY2VVcmwoJy9vYmplY3RzL3RlbXBsYXRlcy9zYW5pdGl6ZWQtdXJsLWVkaXRvci5kaXJlY3RpdmUuaHRtbCcpLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogW2Z1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBjdHJsLlNDSEVNQSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd1bmljb2RlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnaXNfbm9uZW1wdHknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB1aV9jb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5tdWx0aXBsZS1jaG9pY2Utb3B0aW9uLWNvbnRhaW5lciB7XFxuICBwYWRkaW5nOiA0cHggMDtcXG59XFxuXFxuLm11bHRpcGxlLWNob2ljZS1vcHRpb24ge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGNvbG9yOiAjMEQ0OEExO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIC8qIFRoaXMgaXMgbmVlZGVkIHNvIHRoYXQgaW1hZ2VzIHN0YXkgYm91bmRlZCBieSB0aGUgY29udGFpbmVyIGluIEZpcmVmb3guICovXFxuICAvKiBUaGlzIGFsc28gbGltaXRzIHRoZSBzZWxlY3Rpb24gYXJlYSBvZiB0aGUgb3B0aW9uIHRvIHRoZSB0ZXh0IGFuZCByYWRpbyBidXR0b24uICovXFxuICB3aWR0aDogYXV0bztcXG59XFxuXFxuLm11bHRpcGxlLWNob2ljZS1yYWRpby1idXR0b24tY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IHRhYmxlLWNlbGw7XFxufVxcblxcbi5tdWx0aXBsZS1jaG9pY2UtY29udGVudC1jb250YWluZXIge1xcbiAgZGlzcGxheTogdGFibGUtY2VsbDtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxufVxcblxcbi5tdWx0aXBsZS1jaG9pY2Utb3B0aW9uOmhvdmVyIHtcXG4gIGNvbG9yOiAjMTE1RkQ0O1xcbn1cXG5cXG4ubXVsdGlwbGUtY2hvaWNlLW9wdGlvbjpob3ZlciAubXVsdGlwbGUtY2hvaWNlLWlubmVyLXJhZGlvLWJ1dHRvbixcXG4ubXVsdGlwbGUtY2hvaWNlLW9wdGlvbjpmb2N1cyAubXVsdGlwbGUtY2hvaWNlLWlubmVyLXJhZGlvLWJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTE1RkQ0O1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBoZWlnaHQ6IDhweDtcXG4gIG1hcmdpbjogMnB4O1xcbiAgd2lkdGg6IDhweDtcXG59XFxuXFxuLm11bHRpcGxlLWNob2ljZS1vcHRpb246aG92ZXIgLm11bHRpcGxlLWNob2ljZS1vdXRlci1yYWRpby1idXR0b24sXFxuLm11bHRpcGxlLWNob2ljZS1vcHRpb246Zm9jdXMgLm11bHRpcGxlLWNob2ljZS1vdXRlci1yYWRpby1idXR0b24ge1xcbiAgYm9yZGVyLWNvbG9yOiAjMTE1RkQ0O1xcbn1cXG5cXG4ubXVsdGlwbGUtY2hvaWNlLW91dGVyLXJhZGlvLWJ1dHRvbiB7XFxuICBib3JkZXI6IDJweCBzb2xpZCAjMEQ0OEExO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgaGVpZ2h0OiAxNnB4O1xcbiAgbWFyZ2luLWJvdHRvbTogLTdweDtcXG4gIG1hcmdpbi1yaWdodDogMTJweDtcXG4gIHdpZHRoOiAxNnB4O1xcbn1cXG5cIiwgXCJcIl0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==