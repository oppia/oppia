// Copyright 2021 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Unit tests for supplemental card component.
 */

import { HttpClientTestingModule } from '@angular/common/http/testing';
import { EventEmitter, NO_ERRORS_SCHEMA } from '@angular/core';
import { ComponentFixture, fakeAsync, TestBed, tick, waitForAsync } from '@angular/core/testing';
import { AppConstants } from 'app.constants';
import { StateCard } from 'domain/state_card/state-card.model';
import { UrlInterpolationService } from 'domain/utilities/url-interpolation.service';
import { AudioPlayerService } from 'services/audio-player.service';
import { AutogeneratedAudioPlayerService } from 'services/autogenerated-audio-player.service';
import { ExplorationPlayerConstants } from '../exploration-player-page.constants';
import { AudioTranslationManagerService } from '../services/audio-translation-manager.service';
import { CurrentInteractionService } from '../services/current-interaction.service';
import { HelpCardEventResponse, PlayerPositionService } from '../services/player-position.service';
import { SupplementalCardComponent } from './supplemental-card.component';

describe('Supplemental card component', () => {
  let fixture: ComponentFixture<SupplementalCardComponent>;
  let componentInstance: SupplementalCardComponent;
  let audioPlayerService: AudioPlayerService;
  let audioTranslationManagerService: AudioTranslationManagerService;
  let autogeneratedAudioPlayerService: AutogeneratedAudioPlayerService;
  let currentInteractionService: CurrentInteractionService;
  let playerPositionService: PlayerPositionService;
  let urlInterpolationService: UrlInterpolationService;
  let mockStateCard = new StateCard(
    'state_name', 'html', 'html', null, [], null,
    null, '', null);

  beforeEach(waitForAsync(() => {
    TestBed.configureTestingModule({
      imports: [
        HttpClientTestingModule
      ],
      declarations: [
        SupplementalCardComponent
      ],
      providers: [
        AudioPlayerService,
        AudioTranslationManagerService,
        AutogeneratedAudioPlayerService,
        CurrentInteractionService,
        PlayerPositionService,
        UrlInterpolationService
      ],
      schemas: [NO_ERRORS_SCHEMA]
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(SupplementalCardComponent);
    componentInstance = fixture.componentInstance;
    audioPlayerService = TestBed.inject(AudioPlayerService);
    audioTranslationManagerService = TestBed.inject(
      AudioTranslationManagerService);
    autogeneratedAudioPlayerService = TestBed.inject(
      AutogeneratedAudioPlayerService);
    currentInteractionService = TestBed.inject(CurrentInteractionService);
    playerPositionService = TestBed.inject(PlayerPositionService);
    urlInterpolationService = TestBed.inject(UrlInterpolationService);
  });

  afterEach(() => {
    componentInstance.ngOnDestroy();
  });

  it('should intialize', fakeAsync(() => {
    let imageUrl = 'static_image_url';
    let helpCardHtml = 'test_help_card_html';
    let hasContinueButton = true;
    componentInstance.currentDisplayedCard = mockStateCard;
    spyOn(urlInterpolationService, 'getStaticImageUrl').and.returnValue(
      imageUrl);
    spyOn(currentInteractionService, 'registerPresubmitHook').and.callFake(
      callb => {
        callb();
      });
    spyOn(componentInstance.currentDisplayedCard, 'isCompleted')
      .and.returnValues(false, true);
    spyOn(componentInstance, 'clearHelpCard');

    let mockOnActiveCardChanged = new EventEmitter<void>();
    let mockOnHelpCardAvailable = new EventEmitter<HelpCardEventResponse>();

    spyOnProperty(playerPositionService, 'onActiveCardChanged')
      .and.returnValue(mockOnActiveCardChanged);
    spyOn(componentInstance, 'updateDisplayedCard');
    spyOnProperty(playerPositionService, 'onHelpCardAvailable').and.returnValue(
      mockOnHelpCardAvailable);

    componentInstance.ngOnInit();

    mockOnActiveCardChanged.emit();
    mockOnHelpCardAvailable.emit({
      helpCardHtml,
      hasContinueButton
    });
    tick();
    tick();
    componentInstance.ngOnInit();
    expect(componentInstance.helpCardHtml).toEqual(helpCardHtml);
    expect(componentInstance.helpCardHasContinueButton).toEqual(
      hasContinueButton);
    expect(componentInstance.clearHelpCard).toHaveBeenCalled();
    expect(componentInstance.updateDisplayedCard).toHaveBeenCalled();
  }));

  it('should update displayed card', () => {
    let lastAnswer = 'last_answer';
    mockStateCard.markAsCompleted();
    componentInstance.displayedCard = mockStateCard;
    spyOn(componentInstance, 'clearHelpCard');
    spyOn(componentInstance.displayedCard, 'getLastAnswer')
      .and.returnValue(lastAnswer);
    componentInstance.updateDisplayedCard();
    expect(componentInstance.lastAnswer).toEqual(lastAnswer);
  });

  it('should clear help card', () => {
    componentInstance.clearHelpCard();
    expect(componentInstance.helpCardHtml).toBeNull();
    expect(componentInstance.helpCardHasContinueButton).toBeFalse();
    expect(componentInstance.maxHelpCardHeightSeen).toEqual(0);
  });

  it('should tell if help card is tall', () => {
    let height = 400;
    spyOn(window, '$').and.returnValue({
      height: () => height
    } as JQLite);
    componentInstance.maxHelpCardHeightSeen = height - 100;
    expect(componentInstance.isHelpCardTall()).toBeTrue();
  });

  it('should get help card bottom position', () => {
    let helpCardHeight = 400;
    let interactionContainerHeight = 100;
    componentInstance.helpCard = {
      nativeElement: {
        clientHeight: helpCardHeight
      }
    };
    componentInstance.interactionContainer = {
      nativeElement: {
        clientHeight: interactionContainerHeight
      }
    };

    expect(componentInstance.getHelpCardBottomPosition()).toEqual(
      Math.max(interactionContainerHeight - helpCardHeight / 2, 0));
  });

  it('should get feedback audio highlight class', () => {
    spyOn(
      audioTranslationManagerService, 'getCurrentComponentName')
      .and.returnValue(AppConstants.COMPONENT_NAME_FEEDBACK);
    spyOn(audioPlayerService, 'isPlaying').and.returnValue(true);
    spyOn(autogeneratedAudioPlayerService, 'isPlaying').and.returnValue(true);
    expect(componentInstance.getFeedbackAudioHighlightClass()).toEqual(
      ExplorationPlayerConstants.AUDIO_HIGHLIGHT_CSS_CLASS);
  });
});
