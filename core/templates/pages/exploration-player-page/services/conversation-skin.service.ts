// Copyright 2021 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Service for managing the exploration conversation flow.
 */

import {Subscription} from 'rxjs';
import {StateCard} from 'domain/state_card/state-card.model';
import {ServicesConstants} from 'services/services.constants';
import {EventEmitter, Injectable, Input} from '@angular/core';
import {downgradeInjectable} from '@angular/upgrade/static';
import {WindowRef} from 'services/contextual/window-ref.service';
import {AlertsService} from 'services/alerts.service';
import {AudioPlayerService} from 'services/audio-player.service';
import {AudioTranslationLanguageService} from '../services/audio-translation-language.service';
import {AutogeneratedAudioPlayerService} from 'services/autogenerated-audio-player.service';
import {ConceptCardBackendApiService} from 'domain/skill/concept-card-backend-api.service';
import {ContentTranslationLanguageService} from '../services/content-translation-language.service';
import {ContentTranslationManagerService} from '../services/content-translation-manager.service';
import {ContextService} from 'services/context.service';
import {CurrentInteractionService} from '../services/current-interaction.service';
import {ExplorationEngineService} from '../services/exploration-engine.service';
import {ExplorationPlayerStateService} from '../services/exploration-player-state.service';
import {ExplorationRecommendationsService} from '../services/exploration-recommendations.service';
import {FatigueDetectionService} from '../services/fatigue-detection.service';
import {FocusManagerService} from 'services/stateful/focus-manager.service';
import {GuestCollectionProgressService} from 'domain/collection/guest-collection-progress.service';
import {HintsAndSolutionManagerService} from '../services/hints-and-solution-manager.service';
import {
  I18nLanguageCodeService,
  TranslationKeyType,
} from 'services/i18n-language-code.service';
import {ImagePreloaderService} from '../services/image-preloader.service';
import {LearnerAnswerInfoService} from '../services/learner-answer-info.service';
import {LearnerParamsService} from '../services/learner-params.service';
import {LoaderService} from 'services/loader.service';
import {MessengerService} from 'services/messenger.service';
import {NumberAttemptsService} from '../services/number-attempts.service';
import {PlayerPositionService} from '../services/player-position.service';
import {PlayerTranscriptService} from '../services/player-transcript.service';
import {QuestionPlayerEngineService} from '../services/question-player-engine.service';
import {ReadOnlyCollectionBackendApiService} from 'domain/collection/read-only-collection-backend-api.service';
import {RefresherExplorationConfirmationModalService} from '../services/refresher-exploration-confirmation-modal.service';
import {SiteAnalyticsService} from 'services/site-analytics.service';
import {StatsReportingService} from '../services/stats-reporting.service';
import {StoryViewerBackendApiService} from 'domain/story_viewer/story-viewer-backend-api.service';
import {UrlService} from 'services/contextual/url.service';
import {UserService} from 'services/user.service';
import {LocalStorageService} from 'services/local-storage.service';
import {WindowDimensionsService} from 'services/contextual/window-dimensions.service';
import {QuestionPlayerStateService} from 'components/question-directives/question-player/services/question-player-state.service';
import {State} from 'domain/state/StateObjectFactory';
import {InteractionRulesService} from '../services/answer-classification.service';
import INTERACTION_SPECS from 'interactions/interaction_specs.json';
import {UrlInterpolationService} from 'domain/utilities/url-interpolation.service';
import {ExplorationPlayerConstants} from '../exploration-player-page.constants';
import {AppConstants} from 'app.constants';
import {TopicViewerDomainConstants} from 'domain/topic_viewer/topic-viewer-domain.constants';
import {StoryViewerDomainConstants} from 'domain/story_viewer/story-viewer-domain.constants';
import {ConceptCard} from 'domain/skill/concept-card.model';
import {CollectionPlayerBackendApiService} from 'pages/collection-player-page/services/collection-player-backend-api.service';
import {ExplorationSummaryBackendApiService} from 'domain/summary/exploration-summary-backend-api.service';
import {LearnerExplorationSummary} from 'domain/summary/learner-exploration-summary.model';
import {EditableExplorationBackendApiService} from 'domain/exploration/editable-exploration-backend-api.service';
import {ReadOnlyExplorationBackendApiService} from 'domain/exploration/read-only-exploration-backend-api.service';
import {StateObjectsBackendDict} from 'domain/exploration/StatesObjectFactory';
import {PlatformFeatureService} from 'services/platform-feature.service';
import {LearnerDashboardBackendApiService} from 'domain/learner_dashboard/learner-dashboard-backend-api.service';

import {ConceptCardManagerService} from '../services/concept-card-manager.service';
import {TranslateService} from '@ngx-translate/core';
import {Solution} from 'domain/exploration/SolutionObjectFactory';

@Injectable({
  providedIn: 'root',
})
export class ConversationSkinService {
  lessonCards!: [];
  visitedStateNames: string[] = [];
  prevSessionStatesProgress: string[] = [];
  explorationId: string;
  pidInUrl: string;

  addNewCardEventEmitter: EventEmitter<StateCard> = new EventEmitter();

  constructor(
    private windowRef: WindowRef,
    private alertsService: AlertsService,
    private audioPlayerService: AudioPlayerService,
    private audioTranslationLanguageService: AudioTranslationLanguageService,
    private autogeneratedAudioPlayerService: AutogeneratedAudioPlayerService,
    private collectionPlayerBackendApiService: CollectionPlayerBackendApiService,
    private conceptCardBackendApiService: ConceptCardBackendApiService,
    private contentTranslationLanguageService: ContentTranslationLanguageService,
    private contentTranslationManagerService: ContentTranslationManagerService,
    private contextService: ContextService,
    private currentInteractionService: CurrentInteractionService,
    private explorationEngineService: ExplorationEngineService,
    private explorationPlayerStateService: ExplorationPlayerStateService,
    private explorationRecommendationsService: ExplorationRecommendationsService,
    private explorationSummaryBackendApiService: ExplorationSummaryBackendApiService,
    private fatigueDetectionService: FatigueDetectionService,
    private focusManagerService: FocusManagerService,
    private guestCollectionProgressService: GuestCollectionProgressService,
    private hintsAndSolutionManagerService: HintsAndSolutionManagerService,
    private conceptCardManagerService: ConceptCardManagerService,
    private i18nLanguageCodeService: I18nLanguageCodeService,
    private imagePreloaderService: ImagePreloaderService,
    private learnerAnswerInfoService: LearnerAnswerInfoService,
    private learnerParamsService: LearnerParamsService,
    private loaderService: LoaderService,
    private messengerService: MessengerService,
    private localStorageService: LocalStorageService,
    private numberAttemptsService: NumberAttemptsService,
    private playerPositionService: PlayerPositionService,
    private playerTranscriptService: PlayerTranscriptService,
    private questionPlayerEngineService: QuestionPlayerEngineService,
    private questionPlayerStateService: QuestionPlayerStateService,
    private readOnlyCollectionBackendApiService: ReadOnlyCollectionBackendApiService,
    private refresherExplorationConfirmationModalService: RefresherExplorationConfirmationModalService,
    private siteAnalyticsService: SiteAnalyticsService,
    private statsReportingService: StatsReportingService,
    private storyViewerBackendApiService: StoryViewerBackendApiService,
    private urlInterpolationService: UrlInterpolationService,
    private urlService: UrlService,
    private userService: UserService,
    private windowDimensionsService: WindowDimensionsService,
    private editableExplorationBackendApiService: EditableExplorationBackendApiService,
    private readOnlyExplorationBackendApiService: ReadOnlyExplorationBackendApiService,
    private platformFeatureService: PlatformFeatureService,
    private translateService: TranslateService,
    private learnerDashboardBackendApiService: LearnerDashboardBackendApiService
  ) {}

  initializePlayer(): void {}

  onSubmitAnswer(): void {}

  navigateToCard(index: number): void {}

  navigateToMostRecentlyReachedCheckpoint(
    mostRecentlyReachedCheckpoint: string
  ): void {
    this.explorationId = this.explorationEngineService.getExplorationId();
    this.pidInUrl = this.urlService.getPidFromUrl();

    let states: StateObjectsBackendDict;
    this.readOnlyExplorationBackendApiService
      .loadLatestExplorationAsync(this.explorationId, this.pidInUrl)
      .then(response => {
        states = response.exploration.states;
        mostRecentlyReachedCheckpoint =
          response.most_recently_reached_checkpoint_state_name;

        this.prevSessionStatesProgress =
          this.explorationEngineService.getShortestPathToState(
            states,
            mostRecentlyReachedCheckpoint
          );

        let indexToRedirectTo = 0;

        for (let i = 0; i < this.prevSessionStatesProgress.length; i++) {
          // Set state name of a previously completed state.
          let stateName = this.prevSessionStatesProgress[i];
          // Skip the card if it has already been added to transcript.
          if (
            !this.playerTranscriptService.hasEncounteredStateBefore(stateName)
          ) {
            let stateCard =
              this.explorationEngineService.getStateCardByName(stateName);
            this.addNewCardEventEmitter.emit(stateCard);
          }

          if (mostRecentlyReachedCheckpoint === stateName) {
            break;
          }

          this.visitedStateNames.push(stateName);
          indexToRedirectTo += 1;
        }

        // Remove the last card from progress as it is not completed
        // yet and is only most recently reached.
        this.prevSessionStatesProgress.pop();

        if (indexToRedirectTo > 0) {
          setTimeout(() => {
            let alertInfoElement = document.querySelector(
              '.oppia-exploration-checkpoints-message'
            );

            // Remove the alert message after 6 sec.
            if (alertInfoElement) {
              alertInfoElement.remove();
            }
          }, 6000);
        }

        // Move to most recently reached checkpoint card.
        this.changeCard(indexToRedirectTo);
        this.playerPositionService.onLoadedMostRecentCheckpoint.emit();
      });
  }

  changeCard(index: number): void {
    this.playerPositionService.recordNavigationButtonClick();
    this.playerPositionService.setDisplayedCardIndex(index);
    this.explorationEngineService.onUpdateActiveStateIfInEditor.emit(
      this.playerPositionService.getCurrentStateName()
    );
    this.playerPositionService.changeCurrentQuestion(index);
  }
}

angular
  .module('oppia')
  .factory(
    'ConversationSkinService',
    downgradeInjectable(ConversationSkinService)
  );
