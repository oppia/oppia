// Copyright 2018 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Service to manage what audio translations are currently
 * being played or paused.
 */

import { Injectable } from '@angular/core';
import { downgradeInjectable } from '@angular/upgrade/static';

import { Voiceover } from
  'domain/exploration/VoiceoverObjectFactory';

export interface AudioTranslations {
  [languageCode: string]: Voiceover
}

@Injectable({
  providedIn: 'root'
})
export class AudioTranslationManagerService {
  // Audio translations for the main content of a card at the top.
  _contentAudioTranslations: AudioTranslations = {};
  _contentHtmlForAutogeneratedAudio: string = '';

  // Audio translations for everything other than the main content, such as
  // those for feedback, hints, and solutions.
  _secondaryAudioTranslations: AudioTranslations = {};
  _secondaryHtmlForAutogeneratedAudio: string = '';

  _currentPrimaryComponentName: string = '';
  _currentSecondaryComponentName: string = '';

  setContentAudioTranslations(
      audioTranslations: AudioTranslations, html: string,
      componentName: string): void {
    this._contentAudioTranslations = audioTranslations;
    this._contentHtmlForAutogeneratedAudio = html;
    this._currentPrimaryComponentName = componentName;
  }

  setSecondaryAudioTranslations(
      audioTranslations: AudioTranslations, html: string,
      componentName: string): void {
    this._secondaryAudioTranslations = audioTranslations;
    this._secondaryHtmlForAutogeneratedAudio = html;
    this._currentSecondaryComponentName = componentName;
  }

  clearSecondaryAudioTranslations(): void {
    this._secondaryAudioTranslations = {};
    this._secondaryHtmlForAutogeneratedAudio = '';
    this._currentSecondaryComponentName = '';
  }

  getCurrentAudioTranslations(): AudioTranslations {
    if (Object.keys(this._secondaryAudioTranslations).length !== 0) {
      return this._secondaryAudioTranslations;
    }
    return this._contentAudioTranslations;
  }

  getCurrentHtmlForAutogeneratedAudio(): string {
    if (this._secondaryHtmlForAutogeneratedAudio !== '') {
      return this._secondaryHtmlForAutogeneratedAudio;
    }
    return this._contentHtmlForAutogeneratedAudio;
  }

  getCurrentComponentName(): string {
    if (this._currentSecondaryComponentName !== '') {
      return this._currentSecondaryComponentName;
    }
    return this._currentPrimaryComponentName;
  }
}

angular.module('oppia').factory(
  'AudioTranslationManagerService',
  downgradeInjectable(AudioTranslationManagerService));
