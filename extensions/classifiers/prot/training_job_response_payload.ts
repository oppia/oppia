/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.13.0
 * source: training_job_response_payload.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as dependency_1 from "./text_classifier";
import * as pb_1 from "google-protobuf";
export class TrainingJobResponsePayload extends pb_1.Message {
    constructor(data?: any[] | {
        job_result?: TrainingJobResponsePayload.JobResult;
        vm_id?: string;
        signature?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("job_result" in data && data.job_result != undefined) {
                this.job_result = data.job_result;
            }
            if ("vm_id" in data && data.vm_id != undefined) {
                this.vm_id = data.vm_id;
            }
            if ("signature" in data && data.signature != undefined) {
                this.signature = data.signature;
            }
        }
    }
    get job_result() {
        return pb_1.Message.getWrapperField(this, TrainingJobResponsePayload.JobResult, 1) as TrainingJobResponsePayload.JobResult;
    }
    set job_result(value: TrainingJobResponsePayload.JobResult) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get vm_id() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set vm_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get signature() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set signature(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    toObject() {
        const data: {
            job_result?: ReturnType<typeof TrainingJobResponsePayload.JobResult.prototype.toObject>;
            vm_id?: string;
            signature?: string;
        } = {};
        if (this.job_result != null) {
            data.job_result = this.job_result.toObject();
        }
        if (this.vm_id != null) {
            data.vm_id = this.vm_id;
        }
        if (this.signature != null) {
            data.signature = this.signature;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.job_result !== undefined)
            writer.writeMessage(1, this.job_result, () => this.job_result.serialize(writer));
        if (typeof this.vm_id === "string" && this.vm_id.length)
            writer.writeString(2, this.vm_id);
        if (typeof this.signature === "string" && this.signature.length)
            writer.writeString(3, this.signature);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrainingJobResponsePayload {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrainingJobResponsePayload();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.job_result, () => message.job_result = TrainingJobResponsePayload.JobResult.deserialize(reader));
                    break;
                case 2:
                    message.vm_id = reader.readString();
                    break;
                case 3:
                    message.signature = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TrainingJobResponsePayload {
        return TrainingJobResponsePayload.deserialize(bytes);
    }
}
export namespace TrainingJobResponsePayload {
    export class JobResult extends pb_1.Message {
        constructor(data?: any[] | ({
            job_id?: string;
        } & (({
            text_classifier?: dependency_1.TextClassifierFrozenModel;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[2]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_id" in data && data.job_id != undefined) {
                    this.job_id = data.job_id;
                }
                if ("text_classifier" in data && data.text_classifier != undefined) {
                    this.text_classifier = data.text_classifier;
                }
            }
        }
        get job_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set job_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get text_classifier() {
            return pb_1.Message.getWrapperField(this, dependency_1.TextClassifierFrozenModel, 2) as dependency_1.TextClassifierFrozenModel;
        }
        set text_classifier(value: dependency_1.TextClassifierFrozenModel) {
            pb_1.Message.setOneofWrapperField(this, 2, [2], value);
        }
        get classifier_frozen_model() {
            const cases: {
                [index: number]: "none" | "text_classifier";
            } = {
                0: "none",
                2: "text_classifier"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        toObject() {
            const data: {
                job_id?: string;
                text_classifier?: ReturnType<typeof dependency_1.TextClassifierFrozenModel.prototype.toObject>;
            } = {};
            if (this.job_id != null) {
                data.job_id = this.job_id;
            }
            if (this.text_classifier != null) {
                data.text_classifier = this.text_classifier.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.job_id === "string" && this.job_id.length)
                writer.writeString(1, this.job_id);
            if (this.text_classifier !== undefined)
                writer.writeMessage(2, this.text_classifier, () => this.text_classifier.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JobResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.text_classifier, () => message.text_classifier = dependency_1.TextClassifierFrozenModel.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JobResult {
            return JobResult.deserialize(bytes);
        }
    }
}
