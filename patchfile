diff --git a/core/controllers/reader.py b/core/controllers/reader.py
index 4a58d93..6b64f16 100644
--- a/core/controllers/reader.py
+++ b/core/controllers/reader.py
@@ -119,6 +119,70 @@ def classify_string_classifier_rule(state, normalized_answer):
     return None
 
 
+def _get_exploration_player_data(
+        exploration_id, version, collection_id, can_edit):
+
+    try:
+        exploration = exp_services.get_exploration_by_id(
+            exploration_id, version=version)
+    except Exception:
+        raise Exception
+
+    collection_title = None
+    if collection_id:
+        try:
+            collection = collection_services.get_collection_by_id(
+                collection_id)
+            collection_title = collection.title
+        except Exception:
+            raise Exception
+
+    version = exploration.version
+
+    # TODO(sll): Cache these computations.
+    gadget_types = exploration.get_gadget_types()
+    interaction_ids = exploration.get_interaction_ids()
+    dependency_ids = (
+        interaction_registry.Registry.get_deduplicated_dependency_ids(
+            interaction_ids))
+    dependencies_html, additional_angular_modules = (
+        dependency_registry.Registry.get_deps_html_and_angular_modules(
+            dependency_ids))
+
+    gadget_templates = (
+        gadget_registry.Registry.get_gadget_html(gadget_types))
+
+    interaction_templates = (
+        rte_component_registry.Registry.get_html_for_all_components() +
+        interaction_registry.Registry.get_interaction_html(
+            interaction_ids))
+    exploration_data_values = {
+        'GADGET_SPECS': gadget_registry.Registry.get_all_specs(),
+        'INTERACTION_SPECS': interaction_registry.Registry.get_all_specs(),
+        'DEFAULT_TWITTER_SHARE_MESSAGE_PLAYER': (
+            DEFAULT_TWITTER_SHARE_MESSAGE_PLAYER.value),
+        'additional_angular_modules': additional_angular_modules,
+        'can_edit': can_edit,
+        'dependencies_html': jinja2.utils.Markup(
+            dependencies_html),
+        'exploration_title': exploration.title,
+        'exploration_version': version,
+        'collection_id': collection_id,
+        'collection_title': collection_title,
+        'gadget_templates': jinja2.utils.Markup(gadget_templates),
+        'interaction_templates': jinja2.utils.Markup(
+            interaction_templates),
+        'is_private': rights_manager.is_exploration_private(
+            exploration_id),
+        # Note that this overwrites the value in base.py.
+        'meta_name': exploration.title,
+        # Note that this overwrites the value in base.py.
+        'meta_description': utils.capitalize_string(exploration.objective),
+        'nav_mode': feconf.NAV_MODE_EXPLORE,
+    }
+    return exploration_data_values
+
+
 def classify(state, answer):
     """Classify the answer using the string classifier.
 
@@ -169,8 +233,8 @@ def classify(state, answer):
         'exploration owner.')
 
 
-class ExplorationPage(base.BaseHandler):
-    """Page describing a single exploration."""
+class ExplorationPageEmbed(base.BaseHandler):
+    """Page describing a single embedded exploration."""
 
     @require_playable
     def get(self, exploration_id):
@@ -181,84 +245,54 @@ class ExplorationPage(base.BaseHandler):
         # Note: this is an optional argument and will be None when the
         # exploration is being played outside the context of a collection.
         collection_id = self.request.get('collection_id')
+        can_edit = (bool(self.username) and self.username not in
+                    config_domain.BANNED_USERNAMES.value and
+                    rights_manager.Actor(self.user_id).can_edit(
+                        feconf.ACTIVITY_TYPE_EXPLORATION, exploration_id))
+        if not rights_manager.Actor(self.user_id).can_view(
+                feconf.ACTIVITY_TYPE_EXPLORATION, exploration_id):
+            raise self.PageNotFoundException
 
-        try:
-            exploration = exp_services.get_exploration_by_id(
-                exploration_id, version=version)
-        except Exception as e:
-            raise self.PageNotFoundException(e)
+        # If the exploration does not exist, an Exception is raised.
+        exploration_data_values = _get_exploration_player_data(
+            exploration_id, version, collection_id, can_edit)
+        exploration_data_values['iframed'] = True
 
-        collection_title = None
-        if collection_id:
-            try:
-                collection = collection_services.get_collection_by_id(
-                    collection_id)
-                collection_title = collection.title
-            except Exception as e:
-                raise self.PageNotFoundException(e)
+        self.values.update(exploration_data_values)
 
-        version = exploration.version
+        self.render_template(
+            'player/exploration_player.html', iframe_restriction=None)
 
-        if not rights_manager.Actor(self.user_id).can_view(
-                feconf.ACTIVITY_TYPE_EXPLORATION, exploration_id):
-            raise self.PageNotFoundException
 
-        is_iframed = (self.request.get('iframed') == 'true')
+class ExplorationPage(base.BaseHandler):
+    """Page describing a single exploration."""
+
+    @require_playable
+    def get(self, exploration_id):
+        """Handles GET requests."""
+        version_str = self.request.get('v')
+        version = int(version_str) if version_str else None
 
-        # TODO(sll): Cache these computations.
-        gadget_types = exploration.get_gadget_types()
-        interaction_ids = exploration.get_interaction_ids()
-        dependency_ids = (
-            interaction_registry.Registry.get_deduplicated_dependency_ids(
-                interaction_ids))
-        dependencies_html, additional_angular_modules = (
-            dependency_registry.Registry.get_deps_html_and_angular_modules(
-                dependency_ids))
+        # Note: this is an optional argument and will be None when the
+        # exploration is being played outside the context of a collection.
+        collection_id = self.request.get('collection_id')
 
-        gadget_templates = (
-            gadget_registry.Registry.get_gadget_html(gadget_types))
+        can_edit = (bool(self.username) and self.username not in
+                    config_domain.BANNED_USERNAMES.value and
+                    rights_manager.Actor(self.user_id).can_edit(
+                        feconf.ACTIVITY_TYPE_EXPLORATION, exploration_id))
+        if not rights_manager.Actor(self.user_id).can_view(
+                feconf.ACTIVITY_TYPE_EXPLORATION, exploration_id):
+            raise self.PageNotFoundException
 
-        interaction_templates = (
-            rte_component_registry.Registry.get_html_for_all_components() +
-            interaction_registry.Registry.get_interaction_html(
-                interaction_ids))
+        # If the exploration does not exist, an Exception is raised.
+        exploration_data_values = _get_exploration_player_data(
+            exploration_id, version, collection_id, can_edit)
+        exploration_data_values['iframed'] = False
 
-        self.values.update({
-            'GADGET_SPECS': gadget_registry.Registry.get_all_specs(),
-            'INTERACTION_SPECS': interaction_registry.Registry.get_all_specs(),
-            'DEFAULT_TWITTER_SHARE_MESSAGE_PLAYER': (
-                DEFAULT_TWITTER_SHARE_MESSAGE_PLAYER.value),
-            'additional_angular_modules': additional_angular_modules,
-            'can_edit': (
-                bool(self.username) and
-                self.username not in config_domain.BANNED_USERNAMES.value and
-                rights_manager.Actor(self.user_id).can_edit(
-                    feconf.ACTIVITY_TYPE_EXPLORATION, exploration_id)
-            ),
-            'dependencies_html': jinja2.utils.Markup(
-                dependencies_html),
-            'exploration_title': exploration.title,
-            'exploration_version': version,
-            'collection_id': collection_id,
-            'collection_title': collection_title,
-            'gadget_templates': jinja2.utils.Markup(gadget_templates),
-            'iframed': is_iframed,
-            'interaction_templates': jinja2.utils.Markup(
-                interaction_templates),
-            'is_private': rights_manager.is_exploration_private(
-                exploration_id),
-            # Note that this overwrites the value in base.py.
-            'meta_name': exploration.title,
-            # Note that this overwrites the value in base.py.
-            'meta_description': utils.capitalize_string(exploration.objective),
-            'nav_mode': feconf.NAV_MODE_EXPLORE,
-        })
+        self.values.update(exploration_data_values)
 
-        if is_iframed:
-            self.render_template(
-                'player/exploration_player.html', iframe_restriction=None)
-        else:
-            self.render_template('player/exploration_player.html')
+        self.render_template('player/exploration_player.html')
 
 
 class ExplorationHandler(base.BaseHandler):
diff --git a/core/templates/dev/head/app.js b/core/templates/dev/head/app.js
index aaf2fe8..ad899b4 100644
--- a/core/templates/dev/head/app.js
+++ b/core/templates/dev/head/app.js
@@ -384,7 +384,9 @@ oppia.factory('urlService', ['$window', function($window) {
       return params;
     },
     isIframed: function() {
-      return !!(this.getUrlParams().iframed);
+      var pathname = this.getPathname();
+      var urlParts = pathname.split('/');
+      return urlParts[1] === 'embed';
     },
     getPathname: function() {
       return window.location.pathname;
diff --git a/core/templates/dev/head/player/ConversationSkinDirective.js b/core/templates/dev/head/player/ConversationSkinDirective.js
index 4557340..55de458 100644
--- a/core/templates/dev/head/player/ConversationSkinDirective.js
+++ b/core/templates/dev/head/player/ConversationSkinDirective.js
@@ -247,11 +247,16 @@ oppia.animation('.conversation-skin-animate-card-contents', function() {
   };
 });
 
-oppia.directive('conversationSkin', [function() {
+oppia.directive('conversationSkin', ['urlService', function(urlService) {
   return {
     restrict: 'E',
     scope: {},
-    templateUrl: 'skins/Conversation',
+    link: function(scope) {
+      var isIframed = urlService.isIframed();
+      scope.directiveTemplateId = isIframed ?
+        'skins/ConversationEmbed' : 'skins/Conversation';
+    },
+    template: '<div ng-include="directiveTemplateId"></div>',
     controller: [
       '$scope', '$timeout', '$rootScope', '$window', '$translate',
        'messengerService', 'oppiaPlayerService', 'urlService', 'focusService',
@@ -353,6 +358,10 @@ oppia.directive('conversationSkin', [function() {
           }, 100);
         };
 
+        $scope.reloadExploration = function() {
+          $window.location.reload();
+        };
+
         $scope.isOnTerminalCard = function() {
           return $scope.activeCard &&
             $scope.exploration.isStateTerminal($scope.activeCard.stateName);
diff --git a/core/templates/dev/head/player/ProgressDotsDirective.js b/core/templates/dev/head/player/ProgressDotsDirective.js
index e4cc19c..7c1faf2 100644
--- a/core/templates/dev/head/player/ProgressDotsDirective.js
+++ b/core/templates/dev/head/player/ProgressDotsDirective.js
@@ -24,9 +24,10 @@ oppia.directive('progressDots', [function() {
     },
     templateUrl: 'components/progressDots',
     controller: [
-      '$scope', '$rootScope', 'playerPositionService',
-      function($scope, $rootScope, playerPositionService) {
-        $scope.MAX_DOTS = 18;
+      '$scope', '$rootScope', 'playerPositionService', 'urlService',
+      function($scope, $rootScope, playerPositionService, urlService) {
+        var isIframed = urlService.isIframed();
+        $scope.MAX_DOTS = isIframed ? 6 : 18;
         $scope.dots = [];
         $scope.currentDotIndex = playerPositionService.getActiveCardIndex();
         var initialDotCount = $scope.getNumDots();
diff --git a/core/templates/dev/head/player/conversation_skin_embed_directive.html b/core/templates/dev/head/player/conversation_skin_embed_directive.html
new file mode 100644
index 0000000..1a2f403
--- /dev/null
+++ b/core/templates/dev/head/player/conversation_skin_embed_directive.html
@@ -0,0 +1,800 @@
+<script type="text/ng-template" id="skins/ConversationEmbed">
+    <!--
+    Off-screen preview of the next card in order to pre-determine the target
+    height for the card content transition animation.
+    -->
+  <div class="conversation-skin-future-tutor-card" aria-hidden="true">
+    <div class="conversation-skin-tutor-card-content">
+      <div class="conversation-skin-tutor-card-top-section">
+        <div class="conversation-skin-tutor-card-top-content" angular-html-bind="upcomingContentHtml">
+        </div>
+      </div>
+      <div ng-if="upcomingInlineInteractionHtml">
+        <div class="conversation-skin-inline-interaction">
+          <div angular-html-bind="upcomingInlineInteractionHtml">
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+  <div class="embeded-body">
+    <section role="main" ng-if="hasFullyLoaded">
+      <div class="conversation-skin-cards-container conversation-skin-animate-cards" ng-class="{'animate-to-two-cards': isAnimatingToTwoCards, 'animate-to-one-card': isAnimatingToOneCard}">
+        <div ng-show='!isViewportNarrow() || isScreenNarrowAndShowingTutorCard()'
+          ng-class="{'conversation-skin-main-tutor-card-embed': isIframed,
+              'conversation-skin-main-tutor-card': !isIframed}" ng-class="{'animate-card-width': startCardChangeAnimation,
+              'has-shadow': isViewportNarrow() && isCurrentSupplementalCardNonempty(),
+              'conversation-skin-animate-tutor-card-on-narrow': isViewportNarrow() &&
+              isCurrentSupplementalCardNonempty()}">
+          <div class="conversation-skin-tutor-card-content conversation-skin-animate-card-contents" ng-class="{'animate-card-change': startCardChangeAnimation}">
+            <div class="conversation-skin-tutor-card-top-section">
+              <img class="conversation-skin-oppia-avatar" ng-src="<[OPPIA_AVATAR_IMAGE_URL]>" alt="">
+              <div class="conversation-skin-tutor-card-top-content protractor-test-conversation-content" angular-html-bind="activeCard.contentHtml" focus-on="<[getContentFocusLabel($index)]>">
+              </div>
+            </div>
+            <div ng-if="(activeCard.answerFeedbackPairs.length > 1 && exploration.isInteractionInline(activeCard.stateName)) || (activeCard.answerFeedbackPairs.length > 0 && !exploration.isInteractionInline(activeCard.stateName))">
+              <h4 class="conversation-skin-responses-dropdown-container" ng-click="toggleShowPreviousResponses()">
+                <span class="conversation-skin-responses-dropdown-text">
+                  <span translate="I18N_PLAYER_PREVIOUS_RESPONSES"
+                        translate-values="{previousResponses: <[activeCard.answerFeedbackPairs.length - (exploration.isInteractionInline(activeCard.stateName) ? 1 : 0)]>}">
+                  </span>
+                  <span class="conversation-skin-responses-dropdown-icon"
+                        ng-class="{'conversation-skin-responses-dropdown-icon-rotated': arePreviousResponsesShown}">
+                        <i class="material-icons">play_arrow</i>
+                  </span>
+                </span>
+              </h4>
+            </div>
+            <div ng-show="arePreviousResponsesShown" class="conversation-skin-tutor-card-middle-section conversation-skin-responses-animate-slide">
+              <div ng-repeat="responsePair in activeCard.answerFeedbackPairs track by $index">
+                <div ng-if="!$last || !exploration.isInteractionInline(activeCard.stateName)">
+                  <answer-feedback-pair data="responsePair" profile-picture="profilePicture" oppia-avatar-image-url="OPPIA_AVATAR_IMAGE_URL">
+                  </answer-feedback-pair>
+                </div>
+              </div>
+            </div>
+            <!-- If the interaction is inline, always show the most recent response pair, if there is one. -->
+            <div class="conversation-skin-tutor-card-bottom-section" ng-if="exploration.isInteractionInline(activeCard.stateName) && activeCard.answerFeedbackPairs.length > 0">
+              <answer-feedback-pair data="activeCard.answerFeedbackPairs[activeCard.answerFeedbackPairs.length - 1]" profile-picture="profilePicture" oppia-avatar-image-url="OPPIA_AVATAR_IMAGE_URL">
+              </answer-feedback-pair>
+            </div>
+            <!--
+            Show the interaction (if it is inline), the interaction instructions
+            (if the interaction is supplemental), or a continuation button (if
+            Oppia has given feedback and the learner is being asked to move on
+            to the next card).
+
+            In addition, if the exploration is iframed, the terminal card will
+            have no learner input section, so we do not show it.
+            -->
+            <div ng-if="(!waitingForOppiaFeedback || !exploration.isInteractionInline(activeCard.stateName)) && ((activeCard.interactionHtml && !activeCard.destStateName) || (activeCard.destStateName && !helpCardHasContinueButton)) && (!isOnTerminalCard() || (activeCard.destStateName && !helpCardHasContinueButton)) && isCurrentCardAtEndOfTranscript()">
+              <div class="conversation-skin-inline-interaction">
+                <div ng-if="activeCard.interactionHtml && !activeCard.destStateName">
+                  <div ng-if="exploration.isInteractionInline(activeCard.stateName)">
+                    <div class="protractor-test-conversation-input" angular-html-bind="activeCard.interactionHtml">
+                    </div>
+                  </div>
+                  <div ng-if="!exploration.isInteractionInline(activeCard.stateName)" style="opacity: 0.8;">
+                      <div ng-if="isCurrentSupplementalCardNonempty() && !isScreenNarrowAndShowingTutorCard()" style="padding: 6px 12px;">
+                          <[exploration.getInteractionInstructions(activeCard.stateName)]>
+                              <i class="material-icons md-18" style="position: relative; top: 3px;">&#xE5C8;</i>
+                      </div>
+                    <div ng-if="!isCurrentSupplementalCardNonempty() || isScreenNarrowAndShowingTutorCard()">
+                      <md-button class="instructions-button" ng-click="showSupplementalCardIfScreenIsNarrow()">
+                          <[exploration.getInteractionInstructions(activeCard.stateName)]>
+                      </md-button>
+                    </div>
+                  </div>
+                </div>
+              </div>
+            </div>
+            <div ng-if="!activeCard.interactionHtml &&
+                !isOnTerminalCard()">
+              <div class="conversation-skin-inline-interaction">
+                <span style="color: red;">
+                  <strong>Error</strong>: No interaction specified for '<[activeCard.stateName]>'.
+                </span>
+              </div>
+            </div>
+          </div>
+        </div>
+        <div ng-if="isCurrentSupplementalCardNonempty()"
+            class="conversation-skin-supplemental-card-container">
+          <img class="conversation-skin-oppia-avatar show-tutor-card"
+              ng-if="isScreenNarrowAndShowingSupplementalCard() && isCurrentSupplementalCardNonempty()"
+              ng-src="<[OPPIA_AVATAR_IMAGE_URL]>"
+              ng-click="showTutorCardIfScreenIsNarrow()"
+              alt="">
+          <div ng-if="isScreenNarrowAndShowingTutorCard()"
+              class="supplemental-mask"></div>
+          <div ng-class="{'conversation-skin-help-card help-card-standard': !isWindowTall(),
+              'conversation-skin-help-card help-card-tall': isWindowTall()}" ng-if="helpCardHtml">
+            <img class="conversation-skin-oppia-avatar" ng-src="<[OPPIA_AVATAR_IMAGE_URL]>" alt="">
+            <button type="button" class="conversation-skin-close-help-card-button" ng-click="clearHelpCard()" ng-if="!helpCardHasContinueButton">
+              <i class="material-icons md-18">&#xE5CD;</i>
+            </button>
+            <div class="conversation-skin-help-card-content" angular-html-bind="helpCardHtml"></div>
+            <br>
+            <md-button class="oppia-learner-continue-button protractor-test-continue-to-next-card-button" focus-on="<[CONTINUE_BUTTON_FOCUS_LABEL]>" ng-click="showPendingCard(upcomingStateName, upcomingParams, upcomingContentHtml)" ng-if="helpCardHasContinueButton" style="margin-top: 12px;" translate="I18N_PLAYER_CONTINUE_NEXT_CARD">
+            </md-button>
+          </div>
+          <div class="protractor-test-conversation-input" angular-html-bind="activeCard.interactionHtml">
+          </div>
+        </div>
+      </div>
+    </section>
+    <footer class="grid-container">
+      <nav class="bottom-nav-row">
+        <div class="col-1-4 bottom-nav-left">
+          <div ng-if="activeCard.destStateName && activeCard.answerFeedbackPairs[activeCard.answerFeedbackPairs.length - 1].oppiaFeedbackHtml && !helpCardHasContinueButton">
+            <md-button aria-label="" class="oppia-learner-continue-button protractor-test-continue-to-next-card-button" focus-on="<[CONTINUE_BUTTON_FOCUS_LABEL]>" ng-click="showPendingCard(upcomingStateName, upcomingParams, upcomingContentHtml)" translate="I18N_PLAYER_CONTINUE_BUTTON">
+            </md-button>
+          </div>
+          <div ng-if="isOnTerminalCard()" class="nav-bar-bottom-replay-content">
+            <i ng-click="reloadExploration()" class="material-icons replay-nav-icon">replay</i>
+            <span class="oppia-restart-exploration"> Restart exploration? </span>
+          </div>
+        </div>
+        <div class="col-1-2">
+          <progress-dots  num-dots="numProgressDots" class="conversation-skin-progress-dots-in-bottom-nav">
+          </progress-dots>
+        </div>
+        <div class="col-1-4">
+          <div class="logo-bottom-nav-bar">
+            <div class="nav-bar-bottom-visit-oppia">
+              <span ng-if="isOnTerminalCard()" class="oppia-more-exploratotion">For more explorations, visit:</span>
+              <a class="oppia-link" href="https://www.oppia.org/"
+                  target="_blank">
+                <img class="logo-bottom-nav-bar" src="/assets/images/logo/288x128_logo_white.png">
+              </a>
+            </div>
+          </div>
+        </div>
+      </nav>
+    </footer>
+  </div>
+  <style type="text/css">
+    html,
+    body {
+      background: url('/assets/common/images/general/background.jpg') no-repeat center center fixed;
+      background-color: #eee;
+      background-size: cover;
+      color: rgba(0, 0, 0, 0.87);
+      font-family: 'Roboto', Arial, sans-serif;
+      font-size: 1.0em;
+    }
+
+    .oppia-loading-fullpage {
+      color: #fff;
+    }
+
+    .oppia-progress-dot {
+      width: 18px;
+      height: 18px;
+    }
+
+    .embeded-body {
+      min-height: 100%;
+      display: flex;
+      flex-direction: column;
+      position: absolute;
+      width: 100%;
+    }
+    .bottom-nav-left {
+      display: flex;
+      align-items: center;
+      height: 50px;
+    }
+
+    .grid-container{
+       width: 100%;
+    }
+
+    .bottom-nav-row:before,
+    .bottom-nav-row:after {
+       content:"";
+       display: table ;
+       clear:both;
+    }
+
+    [class*='col-'] {
+       float: left;
+       min-height: 1px;
+       padding: 0;
+    }
+
+    [class*='col-'] {
+      padding-right: 20px;
+    }
+
+    [class*='col-']:last-of-type {
+      padding-right: 0;
+    }
+
+    .col-1-2 {
+     width: 50%;
+    }
+    .col-1-4{
+     width: 25%;
+    }
+    .col-lg-12,
+    .col-md-12,
+    .col-sm-12 {
+      width: 100%;
+    }
+
+    .logo-bottom-nav-bar {
+      display: flex;
+      align-items: center;
+      float: right;
+      max-height: 50px;
+    }
+
+    .nav-bar-bottom-replay-content {
+      display: flex;
+      align-items: center;
+      color: white;
+    }
+    .nav-bar-bottom-visit-oppia {
+      display: flex;
+      justify-content: center;
+      align-items: center;
+      color: white;
+    }
+
+    .nav-bar-bottom-replay-content,
+    .nav-bar-bottom-visit-oppia {
+      line-height: 1;
+      font-family: "Capriola", "Roboto", Arial, sans-serif;
+    }
+
+    .replay-nav-icon {
+      font-size: 50px;
+      font-weight: bold;
+    }
+
+    section {
+      flex: 1 0 auto;
+    }
+
+    footer {
+      background-color: #015c53;
+      padding: 0.5em;
+      z-index: 20;
+    }
+
+    iframe {
+      overflow: scroll;
+    }
+
+    /*
+      Additional CSS for the conversation_v1 skin.
+      All classes below should start with .conversation-skin
+    */
+    /* Overwrite the default color for the 'Loading...' message. */
+
+    .conversation-skin-progress-dots {
+      left: 0;
+      margin: 0 auto;
+      position: fixed;
+      right: 0;
+      z-index: 1;
+    }
+
+    .conversation-skin-progress-dots-in-bottom-nav {
+      align-self: center;
+      margin: 0 auto;
+      z-index: 1;
+    }
+
+    .conversation-skin-oppia-avatar,
+    .conversation-skin-user-avatar {
+      height: 36px;
+      position: absolute;
+      top: 0;
+      width: 36px;
+      z-index: 1;
+    }
+
+    .conversation-skin-oppia-avatar {
+      left: -20px;
+    }
+
+    .conversation-skin-tutor-card-top-section .conversation-skin-oppia-avatar {
+      height: 48px;
+      left: -28px;
+      width: 48px;
+    }
+
+    .conversation-skin-inline-interaction .conversation-skin-user-avatar {
+      left: -20px;
+      top: 14px;
+    }
+
+    .conversation-skin-learner-answer-container .conversation-skin-user-avatar {
+      right: -20px;
+    }
+
+    .conversation-skin-tutor-card-middle-section .conversation-skin-user-avatar,
+    .conversation-skin-tutor-card-middle-section .conversation-skin-oppia-avatar {
+      display: none;
+    }
+
+    .conversation-skin-responses-dropdown-icon {
+      -moz-transition: all 0.2s;
+      -o-transition: all 0.2s;
+      -webkit-transition: all 0.2s;
+      font-size: 10px;
+      margin-bottom: -4px;
+      transition: 0.2s;
+    }
+
+    .conversation-skin-responses-dropdown-icon-rotated {
+      -moz-transform: rotate(90deg);
+      -o-transform: rotate(90deg);
+      -webkit-transform: rotate(90deg);
+      transform: rotate(90deg);
+    }
+
+    .conversation-skin-responses-dropdown-container {
+      border-bottom: 1px solid #ccc;
+      cursor: pointer;
+      line-height: 0.1em;
+      margin: 8px 20px 20px 20px;
+      text-align: center;
+    }
+
+    .conversation-skin-responses-dropdown-text {
+      background-color: #fff;
+      color: #888;
+      font-size: 0.8em;
+      padding: 0 10px;
+    }
+
+    .conversation-skin-bottom-gadget-panel {
+      bottom: 4px;
+      left: 0;
+      margin: 0 auto;
+      max-height: 135px;
+      max-width: 400px;
+      min-width: 150px;
+      position: fixed;
+      right: 0;
+      width: 360px;
+    }
+
+    .conversation-skin-cards-container {
+      display: flex;
+      flex-direction: row;
+      align-items: center;
+      justify-content: center;
+      height: 100%;
+      margin: 20px auto;
+      max-width: 1400px;
+      width: 100%;
+    }
+
+    .conversation-skin-main-tutor-card,
+    .conversation-skin-future-tutor-card {
+      background: #fff;
+      border-radius: 2px;
+      flex-shrink: 10000;
+      max-width: 560px;
+      min-width: 360px;
+      margin-left: 30px;
+      text-align: left;
+      width: 100%;
+      z-index: 1;
+    }
+
+    .conversation-skin-main-tutor-card-embed,
+    .conversation-skin-future-tutor-card-embed {
+      background: #fff;
+      border-radius: 2px;
+      flex-shrink: 10000;
+      min-width: 360px;
+      padding-top: 20px;
+      margin-top: 20px;
+      margin-left: 30px;
+      text-align: left;
+      width: 90%;
+      z-index: 1;
+    }
+
+    .conversation-skin-supplemental-card-container {
+      flex-shrink: 1;
+      margin-left: 12px;
+      max-width: 1000px;
+      min-width: 560px;
+      position: relative;
+    }
+
+    .conversation-skin-help-card {
+      background: #fff;
+      border-radius: 2px;
+      /* We move the help card lower so that it does not block
+       the terminal output in the CodeRepl interaction.
+      */
+      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.24), 0 1px 3px rgba(0, 0, 0, 0.12);
+      min-height: 50px;
+      opacity: 1;
+      padding: 12px;
+      right: 12px;
+      text-align: left;
+      transition: all 350ms;
+      z-index: 500;
+    }
+
+    .help-card-standard {
+      bottom: -50px;
+      position: absolute;
+    }
+
+    .help-card-tall {
+      bottom: 50px;
+      position: fixed;
+    }
+
+    .conversation-skin-help-card.ng-enter,
+    .conversation-skin-help-card.ng-leave-active {
+      opacity: 0;
+      transform: translateX(200px);
+    }
+
+    .conversation-skin-help-card .conversation-skin-oppia-avatar {
+      top: 12px;
+    }
+
+    .conversation-skin-help-card-content {
+      width: 270px;
+    }
+
+    .conversation-skin-close-help-card-button {
+      background: none;
+      border: 0;
+      color: #000;
+      cursor: pointer;
+      height: 24px;
+      opacity: 0.5;
+      position: absolute;
+      right: 2px;
+      top: 2px;
+      width: 24px;
+      z-index: 200;
+    }
+
+    .conversation-skin-main-tutor-card.animate-card-width {
+      -webkit-transition: width 500ms;
+      transition: width 500ms;
+    }
+
+    .conversation-skin-future-tutor-card {
+      left: -30000px;
+      position: absolute;
+      top: -30000px;
+    }
+
+    .conversation-skin-tutor-card-top-section,
+    .conversation-skin-oppia-feedback-container,
+    .conversation-skin-learner-answer-container {
+      position: relative;
+    }
+
+    .conversation-skin-tutor-card-top-section,
+    .conversation-skin-oppia-feedback-container,
+    .conversation-skin-learner-answer-container {
+      padding: 0 20px;
+    }
+    /* These rules must be kept in sync with corresponding rules in oppia.css
+       (those with '.oppia-state-content-display-html > p,
+         .form-control.oppia-rte-content > div > p' selectors specifying
+        the same line-height, margin-top and margin-bottom attributes)
+    */
+
+    .conversation-skin-tutor-card-top-content > p,
+    .conversation-skin-oppia-feedback-content > p,
+    .conversation-skin-learner-answer-content > p,
+    .conversation-skin-help-card-content > p {
+      line-height: 28px;
+      margin-bottom: 18px;
+      margin-top: 18px;
+    }
+
+    .conversation-skin-tutor-card-top-content > p:first-child,
+    .conversation-skin-oppia-feedback-content > p:first-child,
+    .conversation-skin-learner-answer-content > p:first-child,
+    .conversation-skin-help-card-content > p:first-child {
+      margin-top: 0;
+    }
+
+    .conversation-skin-tutor-card-top-content > p:last-child,
+    .conversation-skin-oppia-feedback-content > p:last-child,
+    .conversation-skin-learner-answer-content > p:last-child,
+    .conversation-skin-help-card-content > p:last-child {
+      margin-bottom: 0;
+    }
+
+    .conversation-skin-tutor-card-top-content,
+    .conversation-skin-oppia-feedback-content,
+    .conversation-skin-learner-answer-content,
+    .conversation-skin-help-card-content {
+      border-radius: 2px;
+      display: inline-block;
+      max-width: 100%;
+      position: relative;
+      text-align: left;
+    }
+
+    .conversation-skin-tutor-card-top-content,
+    .conversation-skin-oppia-feedback-content,
+    .conversation-skin-learner-answer-content {
+      margin-bottom: 12px;
+    }
+
+    .conversation-skin-tutor-card-top-content {
+      width: 100%;
+    }
+
+    .conversation-skin-tutor-card-top-content,
+    .conversation-skin-help-card-content {
+      padding: 12px;
+    }
+
+    .conversation-skin-oppia-feedback-content,
+    .conversation-skin-learner-answer-content {
+      padding: 8px 12px;
+    }
+
+    .conversation-skin-tutor-card-top-content,
+    .conversation-skin-oppia-feedback-content,
+    .conversation-skin-help-card-content {
+      background-color: rgba(224, 242, 241, 1);
+    }
+
+    .conversation-skin-learner-answer-content {
+      background-color: rgba(236, 239, 241, 1);
+      border-bottom-right-radius: 0;
+    }
+
+    .conversation-skin-tutor-card-top-content,
+    .conversation-skin-oppia-feedback-content,
+    .conversation-skin-help-card-content {
+      border-top-left-radius: 0;
+    }
+
+    .conversation-skin-learner-answer-container {
+      text-align: right;
+    }
+
+    .conversation-skin-tutor-card-middle-section .conversation-skin-learner-answer-content {
+      background-color: rgba(236, 239, 241, 0.4);
+    }
+
+    .conversation-skin-tutor-card-middle-section .conversation-skin-oppia-feedback-content {
+      background-color: rgba(224, 242, 241, 0.4);
+    }
+
+    .conversation-skin-tutor-card-top-content::before,
+    .conversation-skin-oppia-feedback-content::before,
+    .conversation-skin-help-card-content::before {
+      border-left: 8px solid transparent;
+      border-top: 12px solid rgba(224, 242, 241, 1);
+      content: " ";
+      left: -8px;
+      position: absolute;
+      top: 0;
+    }
+
+    .conversation-skin-learner-answer-content::before {
+      border-right: 8px solid transparent;
+      border-top: 12px solid rgba(236, 239, 241, 1);
+      content: " ";
+      position: absolute;
+      right: -8px;
+      top: 0;
+    }
+
+    .conversation-skin-tutor-card-middle-section .conversation-skin-oppia-feedback-content::before,
+    .conversation-skin-tutor-card-middle-section .conversation-skin-learner-answer-content::before {
+      display: none;
+    }
+
+    .conversation-skin-inline-interaction {
+      background-color: rgba(236, 239, 241, 1);
+      border-bottom-left-radius: 2px;
+      border-bottom-right-radius: 2px;
+      margin-top: 8px;
+      padding: 16px 20px;
+      position: relative;
+    }
+
+    .conversation-skin-learner-answer,
+    .conversation-skin-oppia-feedback {
+      word-wrap: break-word;
+    }
+
+    .conversation-skin-feedback-dot-one,
+    .conversation-skin-feedback-dot-two,
+    .conversation-skin-feedback-dot-three {
+      background-color: #666;
+      display: inline-block;
+      height: 2px;
+      width: 2px;
+    }
+
+    .conversation-skin-feedback-dot-one {
+      -moz-animation-delay: 0.0s;
+      -moz-animation: dot 1.0s infinite;
+      -webkit-animation-delay: 0.0s;
+      -webkit-animation: dot 1.0s infinite;
+      animation-delay: 0.0s;
+      animation: dot 1.0s infinite;
+      opacity: 0;
+    }
+
+    .conversation-skin-feedback-dot-two {
+      -moz-animation-delay: 0.2s;
+      -moz-animation: dot 1.0s infinite;
+      -webkit-animation-delay: 0.2s;
+      -webkit-animation: dot 1.0s infinite;
+      animation-delay: 0.2s;
+      animation: dot 1.0s infinite;
+      opacity: 0;
+    }
+
+    .conversation-skin-feedback-dot-three {
+      -moz-animation-delay: 0.4s;
+      -moz-animation: dot 1.0s infinite;
+      -webkit-animation-delay: 0.4s;
+      -webkit-animation: dot 1.0s infinite;
+      animation-delay: 0.4s;
+      animation: dot 1.0s infinite;
+      opacity: 0;
+    }
+
+    .conversation-skin-final-ratings {
+      text-align: center;
+    }
+
+    .conversation-skin-final-recommendations {
+      margin-top: 50px;
+      text-align: center;
+    }
+
+    .conversation-skin-oppia-feedback.ng-enter {
+      opacity: 0;
+      -webkit-transition: all .5s;
+      transition: all .5s;
+    }
+
+    .conversation-skin-oppia-feedback.ng-enter.ng-enter-active {
+      opacity: 1;
+    }
+
+    .conversation-skin-main-tutor-card.ng-hide-add.ng-hide-add-active,
+    .conversation-skin-main-tutor-card.ng-hide-remove.ng-hide-remove-active,
+    .conversation-skin-supplemental-card.ng-hide-add.ng-hide-add-active,
+    .conversation-skin-supplemental-card.ng-hide-remove.ng-hide-remove-active {
+      -webkit-transition: all ease-out 0.4s;
+      transition: all ease-out 0.4s;
+    }
+
+    .conversation-skin-main-tutor-card.ng-hide {
+      opacity: 0;
+      transform: translateX(-1000px);
+    }
+
+    .conversation-skin-supplemental-card.ng-hide {
+      opacity: 0;
+      transform: translateX(1000px);
+    }
+
+    .conversation-skin-main-tutor-card .instructions-button {
+      background: inherit;
+      border: none;
+    }
+
+    @media screen and (max-width: 959px) {
+      .conversation-skin-main-tutor-card-embed,
+      .conversation-skin-future-tutor-card-embed {
+        margin-left: 0;
+      }
+
+      .conversation-skin-cards-container {
+        display: flex;
+        flex-direction: column;
+        align-items: center;
+        height: 100%;
+        max-width: 1400px;
+        width: 100%;
+      }
+
+      .conversation-skin-main-tutor-card {
+        left: 0;
+        margin: 0 auto;
+        position: absolute;
+        right: 0;
+        top: 40px;
+        width: 100%;
+        z-index: 15;
+      }
+
+      .has-shadow {
+        box-shadow: 0 10px 10px rgba(0, 0, 0, 0.24), 0 10px 10px rgba(0, 0, 0, 0.24);
+      }
+
+      .conversation-skin-supplemental-card-container {
+        left: 50%;
+        margin: 40px auto;
+        max-width: 959px;
+        min-width: 360px;
+        position: absolute;
+        top: 0;
+        transform: translateX(-50%);
+      }
+
+      .conversation-skin-supplemental-card-container .supplemental-mask {
+        background-color: #ccc;
+        height: 100%;
+        left: 0;
+        opacity: 0.7;
+        position: absolute;
+        top: 0;
+        width: 100%;
+      }
+      .conversation-skin-main-tutor-card .instructions-button {
+        background-color: #0D48A1;
+        color: #ffffff;
+        padding: 6px 12px;
+      }
+      .conversation-skin-main-tutor-card button.md-button.md-default-theme.instructions-button:focus,
+      .conversation-skin-main-tutor-card button.md-button.md-default-theme.instructions-button:hover {
+        background-color: #115FD4;
+      }
+      .conversation-skin-user-avatar,
+      .conversation-skin-oppia-avatar {
+        display: none;
+      }
+      .conversation-skin-oppia-avatar.show-tutor-card {
+        border-radius: 50%;
+        box-shadow: 0 3px 3px grey, 0 5px 3px grey;
+        display: block;
+        height: 40px;
+        left: 100%;
+        position: absolute;
+        position: absolute;
+        transform: translate(-100%, -100%);
+        width: 40px;
+        z-index: 16;
+      }
+      .conversation-skin-oppia-avatar.show-tutor-card:hover {
+        opacity: 0.8;
+      }
+      .nav-bar-bottom-replay-content,
+      .nav-bar-bottom-visit-oppia {
+        font-size: 0.7em;
+      }
+      .oppia-more-exploratotion {
+        display: none;
+      }
+    }
+    @media screen and (max-width: 550px) {
+      .oppia-restart-exploration {
+        display: none;
+      }
+      [class*='col-'] {
+        padding: 0;
+      }
+
+      .col-1-2 {
+       width: 60%;
+      }
+      .col-1-4{
+       width: 20%;
+      }
+      .replay-nav-icon {
+        font-size: 40px;
+      }
+    }
+  </style>
+</script>
diff --git a/core/templates/dev/head/player/exploration_player.html b/core/templates/dev/head/player/exploration_player.html
index f8a6e9f..c210712 100644
--- a/core/templates/dev/head/player/exploration_player.html
+++ b/core/templates/dev/head/player/exploration_player.html
@@ -75,10 +75,8 @@
 
 {% block content %}
   <conversation-skin></conversation-skin>
-
-  <br><br><br>
-
   {% if not iframed %}
+    <br><br><br>
     {% include 'attribution_guide.html' %}
   {% endif %}
 
@@ -90,6 +88,7 @@
 
   {% include 'player/answer_feedback_pair_directive.html' %}
   {% include 'player/conversation_skin_directive.html' %}
+  {% include 'player/conversation_skin_embed_directive.html' %}
   {% include 'player/feedback_popup_directive.html' %}
   {% include 'player/information_card_modal.html' %}
   {% include 'player/progress_dots_directive.html' %}
diff --git a/core/templates/dev/head/services/explorationContextService.js b/core/templates/dev/head/services/explorationContextService.js
index 497d724..c338e31 100644
--- a/core/templates/dev/head/services/explorationContextService.js
+++ b/core/templates/dev/head/services/explorationContextService.js
@@ -31,8 +31,8 @@ oppia.constant('EDITOR_TAB_CONTEXT', {
 oppia.factory('explorationContextService', [
   '$window', 'PAGE_CONTEXT', 'EDITOR_TAB_CONTEXT',
   function($window, PAGE_CONTEXT, EDITOR_TAB_CONTEXT) {
-    var _pageContext = null;
-    var _explorationId = null;
+    var pageContext = null;
+    var explorationId = null;
 
     return {
       // Returns a string representing the current tab of the editor (either
@@ -53,16 +53,17 @@ oppia.factory('explorationContextService', [
       // If the current page is not one in either EDITOR or LEARNER then
       // return PAGE_CONTEXT.OTHER
       getPageContext: function() {
-        if (_pageContext) {
-          return _pageContext;
+        if (pageContext) {
+          return pageContext;
         } else {
           var pathnameArray = $window.location.pathname.split('/');
           for (var i = 0; i < pathnameArray.length; i++) {
-            if (pathnameArray[i] === 'explore') {
-              _pageContext = PAGE_CONTEXT.LEARNER;
+            if (pathnameArray[i] === 'explore' ||
+                pathnameArray[i] === 'embed') {
+              pageContext = PAGE_CONTEXT.LEARNER;
               return PAGE_CONTEXT.LEARNER;
             } else if (pathnameArray[i] === 'create') {
-              _pageContext = PAGE_CONTEXT.EDITOR;
+              pageContext = PAGE_CONTEXT.EDITOR;
               return PAGE_CONTEXT.EDITOR;
             }
           }
@@ -79,18 +80,22 @@ oppia.factory('explorationContextService', [
       // Returns a string representing the explorationId (obtained from the
       // URL).
       getExplorationId: function() {
-        if (_explorationId) {
-          return _explorationId;
+        if (explorationId) {
+          return explorationId;
         } else {
           // The pathname should be one of /explore/{exploration_id} or
-          // /create/{exploration_id} .
+          // /create/{exploration_id} or /embed/exploration/{exploration_id}.
           var pathnameArray = $window.location.pathname.split('/');
           for (var i = 0; i < pathnameArray.length; i++) {
             if (pathnameArray[i] === 'explore' ||
                 pathnameArray[i] === 'create') {
-              _explorationId = pathnameArray[i + 1];
+              explorationId = pathnameArray[i + 1];
               return pathnameArray[i + 1];
             }
+            if (pathnameArray[i] === 'embed') {
+              explorationId = pathnameArray[i + 2];
+              return explorationId;
+            }
           }
 
           throw Error(
diff --git a/feconf.py b/feconf.py
index 90f6012..652001f 100644
--- a/feconf.py
+++ b/feconf.py
@@ -429,6 +429,7 @@ EXPLORATION_INIT_URL_PREFIX = '/explorehandler/init'
 EXPLORATION_RIGHTS_PREFIX = '/createhandler/rights'
 EXPLORATION_SUMMARIES_DATA_URL = '/explorationsummarieshandler/data'
 EXPLORATION_URL_PREFIX = '/explore'
+EXPLORATION_URL_EMBED_PREFIX = '/embed/exploration'
 FEEDBACK_STATS_URL_PREFIX = '/feedbackstatshandler'
 FEEDBACK_THREAD_URL_PREFIX = '/threadhandler'
 FEEDBACK_THREADLIST_URL_PREFIX = '/threadlisthandler'
diff --git a/main.py b/main.py
index d6f28fd..ac1398e 100644
--- a/main.py
+++ b/main.py
@@ -277,6 +277,9 @@ URLS = MAPREDUCE_HANDLERS + [
         r'%s/<exploration_id>' % feconf.EXPLORATION_URL_PREFIX,
         reader.ExplorationPage, 'exploration_page'),
     get_redirect_route(
+        r'%s/<exploration_id>' % feconf.EXPLORATION_URL_EMBED_PREFIX,
+        reader.ExplorationPageEmbed, 'exploration_embed_page'),
+    get_redirect_route(
         r'%s/<exploration_id>' % feconf.EXPLORATION_INIT_URL_PREFIX,
         reader.ExplorationHandler, 'exploration_handler'),
     get_redirect_route(
