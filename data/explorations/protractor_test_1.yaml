author_notes: ''
blurb: ''
category: Mathematics
init_state_name: Intro
language_code: en
objective: learn how to count permutations accurately and systematically
param_changes: []
param_specs:
  guess:
    obj_type: UnicodeString
schema_version: 17
states:
  END:
    classifier_model_id: null
    content:
      audio_translations: {}
      html: <p>Congratulations, you have finished!</p>
    interaction:
      answer_groups: []
      confirmed_unclassified_answers: []
      customization_args:
        recommendedExplorationIds:
          value: []
      default_outcome: null
      hints: []
      id: EndExploration
      solution: null
    param_changes: []
  Final challenge:
    classifier_model_id: null
    content:
      audio_translations: {}
      html: 'Now here''s a final challenge: using what you''ve learned, can you figure
        out how many ways there are to arrange four balls in a row? Listing all the
        possibilities by hand is going to be tedious, but, by now, you''ve learned
        at least one way to calculate this number quickly and accurately.'
    interaction:
      answer_groups:
      - correct: false
        outcome:
          dest: END
          feedback:
          - 'Yes, that is correct: the answer is 4 times the number of ways to arrange
            three balls in a row, so it is 4 times 6, which is 24! Well done.'
          - That's right! Notice how much easier this was than listing all the possibilities
            explicitly, and counting them one by one. If you can find a way to systematically
            approach the problem, you can save yourself a lot of tedious work :-)
          param_changes: []
        rule_specs:
        - inputs:
            x: 24.0
          rule_type: Equals
      - correct: false
        outcome:
          dest: Final challenge
          feedback:
          - Ahem. That, I think, is a trick answer, surely? I am pretty sure there's
            at least one way to arrange four balls in a line...
          param_changes: []
        rule_specs:
        - inputs:
            x: 0.0
          rule_type: IsLessThanOrEqualTo
      - correct: false
        outcome:
          dest: Final challenge
          feedback:
          - 'Hmm, that''s close-ish, but not quite. It feels like you may not have
            found all the possible cases. It''s really quite easy to miss some of
            them.


            You''re close to solving this, though. There''s an easy way and a hard
            way. The easy way is to use the reasoning we''ve developed previously
            to calculate the answer with a single multiplication. The hard way is
            to systematically find all the cases, and make sure that you haven''t
            missed any. It''s up to you whichever you pick, but you need to get an
            accurate answer!'
          param_changes: []
        rule_specs:
        - inputs:
            a: 18.0
            b: 23.0
          rule_type: IsInclusivelyBetween
      - correct: false
        outcome:
          dest: Final challenge
          feedback:
          - 'I think you''ve overcounted. This is quite common in counting problems,
            especially if you aren''t working systematically, or aren''t explicitly
            listing the things you''re counting.


            If you''re working from a list of possibilities, check it to make sure
            you have no duplicates! And you might also consider using the approach
            we''ve developed earlier in the exploration -- it''s much easier, and
            less prone to errors.'
          param_changes: []
        rule_specs:
        - inputs:
            x: 24.0
          rule_type: IsGreaterThan
      confirmed_unclassified_answers: []
      customization_args: {}
      default_outcome:
        dest: Final challenge
        feedback:
        - Hmm, I don't think so, there are quite a lot more than that. Check your
          work, and try again.
        - I think you've missed quite a few! Try and list all the cases systematically.
          Or, better yet, see if you can use a similar method to the one we've just
          been developing, so that you can get the answer with just one multiplication
          :-)
        param_changes: []
      hints: []
      id: NumericInput
      solution: null
    param_changes: []
  Found all the ways:
    classifier_model_id: null
    content:
      audio_translations: {}
      html: So, you've found that there are six ways to arrange these three balls.<br><br>Is
        that the same as your first guess?
    interaction:
      answer_groups:
      - correct: false
        outcome:
          dest: Introspection
          feedback:
          - Was it? I think you guessed {{guess}}, but there were actually 6 ways.
          param_changes: []
        rule_specs:
        - inputs:
            x: 0
          rule_type: Equals
      - correct: false
        outcome:
          dest: Introspection
          feedback:
          - Yes, you thought the number of ways was {{guess}}, but it was actually
            6.
          param_changes: []
        rule_specs:
        - inputs:
            x: 1
          rule_type: Equals
      confirmed_unclassified_answers: []
      customization_args:
        choices:
          value:
          - 'Yes'
          - 'No'
      default_outcome:
        dest: Introspection
        feedback: []
        param_changes: []
      hints: []
      id: MultipleChoiceInput
      solution: null
    param_changes: []
  General Theory:
    classifier_model_id: null
    content:
      audio_translations: {}
      html: "So: <br><br>There is 1 way to arrange 1 ball.<br>There are 2 ways to\
        \ arrange 2 balls.<br>There are\_6 ways to arrange 3 balls.<br><br>Let's give\
        \ these names. We will say F1 = 1, F2 = 2, F3 = 6. So, if you have n balls\
        \ (where n is 1, 2, 3, ...), then Fn is the number of ways to arrange them.<br><br>Can\
        \ you see a pattern here, or a systematic way to count them? Let's have a\
        \ look at the 3-ball case.<br><br>--------------------------------------------------------------------------------------------<br><br>First\
        \ you pick the ball on the left. This could be red, blue or yellow. There\
        \ are three cases to consider:<br><br>If the first ball is red, then there\
        \ are two balls left to arrange in the other two slots. And there are F2 ways\
        \ to do this.<br><span>If the first ball is blue, then there are two balls\
        \ left to ... hey, this is the same thing, it's just F2.</span><br><span>And,\
        \ if the first ball is yellow, then ... yada, yada, F2.</span><br><br>So the\
        \ total number of ways to arrange 3 balls, F3, is equal to 3 * F2. And all\
        \ this works out correctly, because F2 = 2, and F3 = 3 * 2 = 6.<br><br>--------------------------------------------------------------------------------------------<br><br>Now,\
        \ can you write out a similar expression for F2, in terms of F1? Then we'll\
        \ move on to figuring out F4, which starts to become hard to compute manually."
    interaction:
      answer_groups:
      - correct: false
        outcome:
          dest: Final challenge
          feedback:
          - Yes! F2 = 2 * F1, since there are two ways to pick the ball on the left,
            and  for each of these 2 ways, there are F1 ways to arrange the other
            balls.
          param_changes: []
        rule_specs:
        - inputs:
            x: 2F1
          rule_type: Contains
      - correct: false
        outcome:
          dest: Final challenge
          feedback:
          - Yes! F2 = 2 * F1, since there are two ways to pick the ball on the left,
            and  for each of these 2 ways, there are F1 ways to arrange the other
            balls.
          param_changes: []
        rule_specs:
        - inputs:
            x: 2*F1
          rule_type: Contains
      - correct: false
        outcome:
          dest: Final challenge
          feedback:
          - Yes! F2 = 2 * F1, since there are two ways to pick the ball on the left,
            and  for each of these 2 ways, there are F1 ways to arrange the other
            balls.
          param_changes: []
        rule_specs:
        - inputs:
            x: F1*2
          rule_type: Contains
      - correct: false
        outcome:
          dest: Final challenge
          feedback:
          - Yes! F2 = 2 * F1, since there are two ways to pick the ball on the left,
            and  for each of these 2 ways, there are F1 ways to arrange the other
            balls.
          param_changes: []
        rule_specs:
        - inputs:
            x: 2 * F1
          rule_type: Contains
      - correct: false
        outcome:
          dest: Final challenge
          feedback:
          - Yes! F2 = 2 * F1, since there are two ways to pick the ball on the left,
            and  for each of these 2 ways, there are F1 ways to arrange the other
            balls.
          param_changes: []
        rule_specs:
        - inputs:
            x: F1 * 2
          rule_type: Contains
      confirmed_unclassified_answers: []
      customization_args:
        placeholder:
          value: Type your answer here.
        rows:
          value: 1
      default_outcome:
        dest: Final challenge
        feedback:
        - Alas, I don't understand the answer you just typed. Was it something like
          F2 = 2 * F1? If so, you are correct! There are two ways to pick the first
          ball, and F1 ways to pick the second one. This all works out because F1
          = 1, so F2 = 2 * 1 = 2.
        param_changes: []
      hints: []
      id: TextInput
      solution: null
    param_changes: []
  Guess a generalization:
    classifier_model_id: null
    content:
      audio_translations: {}
      html: 'Now, let''s think about what happens if we had different numbers of balls.
        We know that the answer for three balls is 6. What if we had four balls to
        arrange?<br><br>Here''s a possible idea: 3 times 2 is 6, so the answer for
        four balls must be 4 times 2, which is 8. Basically, we just multiply the
        number of balls by 2, and get the answer. We''ve already shown that it works
        for 3 balls; we can figure out exactly why later.<br><br>Do you believe this
        reasoning? Do you agree that there are exactly 8 ways to arrange four balls
        of different colours in a line?'
    interaction:
      answer_groups:
      - correct: false
        outcome:
          dest: Two balls
          feedback:
          - All right! We have an answer. We could check it, I guess, by listing all
            sequences of four balls. But let's do something easier; let's try it with
            just two.
          param_changes: []
        rule_specs:
        - inputs:
            x: 0
          rule_type: Equals
      confirmed_unclassified_answers: []
      customization_args:
        choices:
          value:
          - Yes! It's clearly 8.
          - No, I don't think it's 8.
      default_outcome:
        dest: Two balls
        feedback: []
        param_changes: []
      hints: []
      id: MultipleChoiceInput
      solution: null
    param_changes: []
  Intro:
    classifier_model_id: null
    content:
      audio_translations: {}
      html: '<p>Suppose you were given three balls: one red, one blue, and one yellow.
        How many ways are there to arrange them in a straight line?</p>'
    interaction:
      answer_groups:
      - correct: false
        outcome:
          dest: correct but why
          feedback: []
          param_changes: []
        rule_specs:
        - inputs:
            x: 6.0
          rule_type: Equals
      - correct: false
        outcome:
          dest: Intro
          feedback:
          - Surely there's at least one? For example, you might have the red ball
            on the left, the blue ball in the middle, and the yellow ball on the right.
            Now try and find a few more. How many different ways can you find, in
            total?
          param_changes: []
        rule_specs:
        - inputs:
            x: 0.0
          rule_type: IsLessThanOrEqualTo
      confirmed_unclassified_answers: []
      customization_args: {}
      default_outcome:
        dest: Not 6
        feedback: []
        param_changes: []
      hints: []
      id: NumericInput
      solution: null
    param_changes: []
  Introspection:
    classifier_model_id: null
    content:
      audio_translations: {}
      html: "Can you think a little bit about why your answer was different from six?\
        \ Did you count a particular arrangement twice, or did you miss one?<br><br>Making\
        \ sure that you've counted everything can be tricky! Two common mistakes are\
        \ counting one thing twice, and forgetting to count some of the things. These\
        \ can be overcome by counting systematically and doing sanity checks.<br><br>In\
        \ the next few explorations, we'll explore what it means to count systematically,\
        \ and we'll talk a little about sanity checks. But why don't you try and discover\
        \ some of these for yourself? Take\_a couple of minutes, and think a bit about\
        \ some checks you can make to ensure that you don't overcount or undercount\
        \ things, or a systematic way that you could have used to count the balls.\
        \ Write these down here -- you will probably want to refer to them in a future\
        \ exercise, and we'll show your jottings to you again at that point."
    interaction:
      answer_groups:
      - correct: false
        outcome:
          dest: Introspection
          feedback:
          - Come on, surely you have something...
          param_changes: []
        rule_specs:
        - inputs:
            x: ''
          rule_type: Equals
      confirmed_unclassified_answers: []
      customization_args:
        placeholder:
          value: Type your answer here.
        rows:
          value: 1
      default_outcome:
        dest: Guess a generalization
        feedback: []
        param_changes: []
      hints: []
      id: TextInput
      solution: null
    param_changes: []
  Not 6:
    classifier_model_id: null
    content:
      audio_translations: {}
      html: "OK, you found {{guess}} ways to do this. I'd be interested in seeing\
        \ what you came up with; could you list the different ways?\_Write them as\
        \ three-character words, like this:<br><br><span>\_ \_ \_RBY<br></span><br>This\
        \ means: put the red ball on the left, the blue ball in the middle, and the\
        \ yellow ball on the right. Can you list all the ways you found?<br><br>\_\
        \ \_\_"
    interaction:
      answer_groups:
      - correct: false
        outcome:
          dest: Not 6
          feedback:
          - At least one of your list elements seems to be wrong. Can you check and
            make sure that each of them is a three-letter uppercase string that contains
            only the letters 'B', 'R' and 'Y' once each?
          param_changes: []
        rule_specs:
        - inputs:
            x:
            - RYB
            - BRY
            - BYR
            - RBY
            - YRB
            - YBR
          rule_type: HasElementsNotIn
      - correct: false
        outcome:
          dest: Not 6
          feedback:
          - You seem to have missed some arrangements with the red ball on the left...
          - Have you considered all arrangements with the red ball on the left?
          param_changes: []
        rule_specs:
        - inputs:
            x:
            - RBY
            - RYB
          rule_type: OmitsElementsIn
      - correct: false
        outcome:
          dest: Not 6
          feedback:
          - I think you're missing some!
          - Have you found all the arrangements in which there is a yellow ball on
            the left?
          param_changes: []
        rule_specs:
        - inputs:
            x:
            - YBR
            - YRB
          rule_type: OmitsElementsIn
      - correct: false
        outcome:
          dest: Not 6
          feedback:
          - Have you found all the arrangements with a blue ball on the left?
          - You may have missed a few arrangements with a blue ball on the left...
          param_changes: []
        rule_specs:
        - inputs:
            x:
            - BRY
            - BYR
          rule_type: OmitsElementsIn
      - correct: false
        outcome:
          dest: Found all the ways
          feedback: []
          param_changes: []
        rule_specs:
        - inputs:
            x:
            - RYB
            - BRY
            - BYR
            - RBY
            - YRB
            - YBR
          rule_type: Equals
      confirmed_unclassified_answers: []
      customization_args: {}
      default_outcome:
        dest: Not 6
        feedback:
        - No, try again.
        param_changes: []
      hints: []
      id: SetInput
      solution: null
    param_changes:
    - customization_args:
        parse_with_jinja: true
        value: '{{answer}}'
      generator_id: Copier
      name: guess
  Two balls:
    classifier_model_id: null
    content:
      audio_translations: {}
      html: Let's try to find (or validate) a general pattern by looking at small
        cases. We do this because it's easy to compute the answers for small cases
        by hand, and they give us data which we can use to try and figure out a more
        general pattern.<br><br>The most obvious small case is 1 ball! There's one
        way to arrange one ball in a line.<br><br>How about 2 balls? How many ways
        are there to arrange two balls, with different colours, in a line?
    interaction:
      answer_groups:
      - correct: false
        outcome:
          dest: General Theory
          feedback:
          - Yes! That is correct. If the balls are red and blue, either the red one
            comes first, or the blue one comes first. Once you've picked the first
            one, the other choice is fixed.
          param_changes: []
        rule_specs:
        - inputs:
            x: 2.0
          rule_type: Equals
      - correct: false
        outcome:
          dest: Two balls
          feedback:
          - 'Hm. Might you be thinking that, since the answer for 3 balls is 6, the
            answer for 2 balls must be 4, because you just multiply by 2?


            If so, alas, you''ve fallen into a trap! Look carefully at the 1-ball
            case: the answer is not 1 x 2 = 2, it is just 1. So this ''multiply by
            2'' idea is not correct. We should be careful to avoid drawing conclusions
            based on just a single case.


            Why not try again? How many ways are there to arrange two balls in a row?'
          param_changes: []
        rule_specs:
        - inputs:
            x: 4.0
          rule_type: Equals
      - correct: false
        outcome:
          dest: Two balls
          feedback:
          - Nah, that can't be right :-) There's at least one way to arrange two balls
            in a row, isn't there?
          - That's not correct -- if you had two balls, you could put the red one
            on the left, and the blue one on the right, for instance. That's at least
            one way...
          param_changes: []
        rule_specs:
        - inputs:
            x: 0.0
          rule_type: IsLessThanOrEqualTo
      - correct: false
        outcome:
          dest: Two balls
          feedback:
          - There's at least one more way. Try swapping the balls?
          param_changes: []
        rule_specs:
        - inputs:
            x: 1.0
          rule_type: Equals
      confirmed_unclassified_answers: []
      customization_args: {}
      default_outcome:
        dest: Two balls
        feedback:
        - I think you may have counted something too many times. Try to remember the
          systematic approach you came up with earlier, and use it here...
        param_changes: []
      hints: []
      id: NumericInput
      solution: null
    param_changes: []
  correct but why:
    classifier_model_id: null
    content:
      audio_translations: {}
      html: <p>Right! Why do you think it is 6?</p>
    interaction:
      answer_groups:
      - correct: false
        outcome:
          dest: END
          feedback:
          - Yes, the question is asking for the number of permutations of 3 different
            balls, and that is 3! = 3 x 2 x 1. You can think about this by noticing
            that there are 3 ways to pick the first ball -- then, once you've done
            that, there are 2 ways to pick the second, and the last choice is forced.
            That's 3 x 2 = 6 ways.
          param_changes: []
        rule_specs:
        - inputs:
            x: permutation
          rule_type: Contains
      - correct: false
        outcome:
          dest: END
          feedback:
          - Yes, the question is asking for the number of permutations of 3 different
            balls, and that is 3 factorial, or 3 x 2 x 1. You can think about this
            by noticing that there are 3 ways to pick the first ball -- then, once
            you've done that, there are 2 ways to pick the second, and the last choice
            is forced. That's 3 x 2 = 6 ways.
          param_changes: []
        rule_specs:
        - inputs:
            x: factorial
          rule_type: Contains
      confirmed_unclassified_answers: []
      customization_args:
        placeholder:
          value: Type your answer here.
        rows:
          value: 5
      default_outcome:
        dest: correct but why
        feedback:
        - 'OK! There are indeed 6 ways to arrange the balls: there are 3 ways to choose
          the leftmost one, and for each of these, there are 2 ways to choose the
          second one; the last choice is then forced. This gives 3 x 2 = 6 scenarios.


          If you do a quick search for the words ''permutation'' or ''factorial''
          on the Internet, you''ll also be able to find more information about this
          topic. See if you can figure out what the answer for 4 balls is!'
        param_changes: []
      hints: []
      id: TextInput
      solution: null
    param_changes: []
states_schema_version: 13
tags: []
title: Protractor Test
