author_notes: ''
blurb: ''
default_skin: conversation_v1
init_state_name: text
language_code: en
objective: To demonstrate fuzzy rules and trained responses in explorations.
param_changes: []
param_specs: {}
schema_version: 9
skin_customizations:
  panels_contents: {}
states:
  code:
    content:
    - type: text
      value: <p>Implement a function in Python to compute the Fibonacci sequence up
        to some iteration N.</p>
    interaction:
      answer_groups:
      - outcome:
          dest: code
          feedback:
          - <p>Implementing the Fibonacci sequence recursively is quite straightforward.
            However, can you try implementing it iteratively?</p>
          param_changes: []
        rule_specs:
        - inputs:
            training_data:
            - code: "# Type your code here.\ndef fibonacci(N):\n  if N<=1:return 1\n\
                \  return fibonacci(N-1)+fibonacci(N-2)\n"
              error: ''
              evaluation: ''
              output: '1,1,2,3,5,8,13,21,34,55

                '
            - code: "# Type your code here.\ndef fibonacci(N):\n  if N<=1:return 1\n\
                \  return fibonacci(N-2)+fibonacci(N-1)\n"
              error: ''
              evaluation: ''
              output: '1,1,2,3,5,8,13,21,34,55

                '
          rule_type: FuzzyMatches
      - outcome:
          dest: graph
          feedback:
          - <p>Nice iterative solution! You can also implement it recursively! Let's
            move on.</p>
          param_changes: []
        rule_specs:
        - inputs:
            training_data:
            - code: "# Type your code here.\ndef fibonacci(N):\n  table=[1,1]\n  for\
                \ i in range(2, N + 1):\n    table.append(table[i-2]+table[i-1])\n\
                \  return table[N]\n"
              error: ''
              evaluation: ''
              output: '1,1,2,3,5,8,13,21,34,55

                '
            - code: "# Type your code here.\ndef fibonacci(N):\n  table=[1,1]\n  for\
                \ i in range(2, N + 1):\n    table.append(table[i-1]+table[i-2])\n\
                \  return table[N]\n"
              error: ''
              evaluation: ''
              output: '1,1,2,3,5,8,13,21,34,55

                '
          rule_type: FuzzyMatches
      - outcome:
          dest: graph
          feedback:
          - <p>I'm not quite sure how you solved it, but you have the correct output!</p>
          param_changes: []
        rule_specs:
        - inputs:
            x: 1,1,2,3,5,8,13,21,34,55
          rule_type: OutputEquals
      - outcome:
          dest: code
          feedback:
          - <p>You should try and implement the function!</p>
          param_changes: []
        rule_specs:
        - inputs:
            training_data:
            - code: "# Type your code here.\ndef fibonacci(N):\n    return 0\n"
              error: ''
              evaluation: ''
              output: '0,0,0,0,0,0,0,0,0,0,0

                '
            - code: "# Type your code here.\ndef fibonacci(N):\n    return 0\n"
              error: ''
              evaluation: ''
              output: '0,0,0,0,0,0,0,0,0,0,0

                '
            - code: "# Type your code here.\ndef fibonacci(N):\n  return 0\n"
              error: ''
              evaluation: ''
              output: '0,0,0,0,0,0,0,0,0,0

                '
          rule_type: FuzzyMatches
      confirmed_unclassified_answers: []
      customization_args:
        language:
          value: python
        placeholder:
          value: "# Type your code here.\ndef fibonacci(N):\n  return 0\n"
        postCode:
          value: "print \"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\" % (\n  fibonacci(0), fibonacci(1),\
            \ fibonacci(2),\n  fibonacci(3), fibonacci(4), fibonacci(5),\n  fibonacci(6),\
            \ fibonacci(7), fibonacci(8),\n  fibonacci(9))"
        preCode:
          value: ''
      default_outcome:
        dest: code
        feedback:
        - <p>You may have an error in your code. Try again.</p>
        param_changes: []
      fallbacks: []
      id: CodeRepl
    param_changes: []
  final:
    content:
    - type: text
      value: Congratulations, you have finished!
    interaction:
      answer_groups: []
      confirmed_unclassified_answers: []
      customization_args:
        recommendedExplorationIds:
          value: []
      default_outcome: null
      fallbacks: []
      id: EndExploration
    param_changes: []
  graph:
    content:
    - type: text
      value: <p>See if you can create some simple, closed shapes with the graph.</p>
    interaction:
      answer_groups:
      - outcome:
          dest: graph
          feedback:
          - <p>It's nice to just try and submit the graph I gave you, but why not
            try to form an interesting shape with it? You could try forming a triangle
            by adding just one more edge.</p>
          param_changes: []
        rule_specs:
        - inputs:
            g:
              edges:
              - dst: 1
                src: 0
                weight: 1
              - dst: 2
                src: 1
                weight: 1
              isDirected: false
              isLabeled: false
              isWeighted: false
              vertices:
              - label: ''
                x: 195.5
                y: 65.5625
              - label: ''
                x: 337.5
                y: 105.5625
              - label: ''
                x: 293.5
                y: 183.5625
          rule_type: IsIsomorphicTo
      - outcome:
          dest: interactive map
          feedback:
          - <p>Creating a triangle is a nice choice! Did you know that triangles are
            the simplest closed shape that can be created in 2D? This is why they
            are also known as a simplex, or a 2-simplex in this case because it is
            two-dimensional. Let's move on.</p>
          param_changes: []
        rule_specs:
        - inputs:
            training_data:
            - edges:
              - dst: 1
                src: 0
                weight: 1
              - dst: 2
                src: 1
                weight: 1
              - dst: 2
                src: 0
                weight: 1
              isDirected: false
              isLabeled: false
              isWeighted: false
              vertices:
              - label: ''
                x: 150.0
                y: 50.0
              - label: ''
                x: 200.0
                y: 50.0
              - label: ''
                x: 150.0
                y: 100.0
          rule_type: FuzzyMatches
      - outcome:
          dest: interactive map
          feedback:
          - <p>Nice quadrilateral! Let's move on.</p>
          param_changes: []
        rule_specs:
        - inputs:
            training_data:
            - edges:
              - dst: 1
                src: 0
                weight: 1
              - dst: 2
                src: 1
                weight: 1
              - dst: 3
                src: 0
                weight: 1
              - dst: 2
                src: 3
                weight: 1
              isDirected: false
              isLabeled: false
              isWeighted: false
              vertices:
              - label: ''
                x: 150.0
                y: 50.0
              - label: ''
                x: 200.0
                y: 50.0
              - label: ''
                x: 243.0
                y: 120.0
              - label: ''
                x: 147.5
                y: 121.5625
          rule_type: FuzzyMatches
      confirmed_unclassified_answers: []
      customization_args:
        canAddEdge:
          value: true
        canAddVertex:
          value: true
        canDeleteEdge:
          value: true
        canDeleteVertex:
          value: true
        canEditEdgeWeight:
          value: false
        canEditVertexLabel:
          value: false
        canMoveVertex:
          value: true
        graph:
          value:
            edges:
            - dst: 1
              src: 0
              weight: 1
            - dst: 2
              src: 1
              weight: 1
            isDirected: false
            isLabeled: false
            isWeighted: false
            vertices:
            - label: ''
              x: 150
              y: 50
            - label: ''
              x: 200
              y: 50
            - label: ''
              x: 150
              y: 100
      default_outcome:
        dest: interactive map
        feedback:
        - <p>I'm not quite sure what shape you made. Let's move on.</p>
        param_changes: []
      fallbacks: []
      id: GraphInput
    param_changes: []
  interactive map:
    content:
    - type: text
      value: <p>Try and find the Northern California Google offices!</p>
    interaction:
      answer_groups:
      - outcome:
          dest: interactive map
          feedback:
          - <p>That's actually YouTube! Try finding a Google building.</p>
          param_changes: []
        rule_specs:
        - inputs:
            training_data:
            - - 37.62786954691665
              - -122.42643713951111
          rule_type: FuzzyMatches
      - outcome:
          dest: final
          feedback:
          - <p>You found a NorCal Google building!</p>
          param_changes: []
        rule_specs:
        - inputs:
            training_data:
            - - 37.42236777109969
              - -122.08377420902252
            - - 37.790157603868124
              - -122.38991618156433
            - - 37.627971512773215
              - -122.4263083934784
          rule_type: FuzzyMatches
      - outcome:
          dest: interactive map
          feedback:
          - <p>You found Google LA! Try finding a NorCal Google building, instead.
            :)</p>
          param_changes: []
        rule_specs:
        - inputs:
            training_data:
            - - 33.99534487742393
              - -118.47650349140167
          rule_type: FuzzyMatches
      confirmed_unclassified_answers: []
      customization_args:
        latitude:
          value: 37.326038
        longitude:
          value: -122.0943028
        zoom:
          value: 10.67
      default_outcome:
        dest: final
        feedback:
        - <p>That is not Google! Let's move on.</p>
        param_changes: []
      fallbacks: []
      id: InteractiveMap
    param_changes: []
  text:
    content:
    - type: text
      value: <p>Give me an example of a happy word.</p>
    interaction:
      answer_groups:
      - outcome:
          dest: text
          feedback:
          - <p>Happy is certainly a happy word. Can you be more creative than that?</p>
          param_changes: []
        rule_specs:
        - inputs:
            x: happy
          rule_type: Contains
      - outcome:
          dest: text
          feedback:
          - <p>That is definitely happy! Can you think of any more?</p>
          param_changes: []
        rule_specs:
        - inputs:
            training_data:
            - cheerful
            - merry
            - ecstatic
            - glad
            - overjoyed
            - pleased
            - thrilled
            - smile
          rule_type: FuzzyMatches
      confirmed_unclassified_answers: []
      customization_args:
        placeholder:
          value: ''
        rows:
          value: 1
      default_outcome:
        dest: code
        feedback:
        - <p>Is {{answer}} actually happy? I'm not so sure. Let's move on!</p>
        param_changes: []
      fallbacks: []
      id: TextInput
    param_changes: []
states_schema_version: 6
tags: []
