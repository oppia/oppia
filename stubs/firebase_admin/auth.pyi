import datetime
from typing import Any, Dict, List, Optional, Union

from . import App

class UserRecord:
    def __init__(
            self, data: Dict[str, Any]
    ) -> None: ...

    @property
    def uid(self) -> str: ...

    @property
    def email(self) -> str: ...

    @property
    def custom_claims(self) -> Dict[str, str]: ...

    @property
    def disabled(self) -> bool: ...

class ImportUserRecord:
    @property
    def uid(self) -> str: ...

    @property
    def email(self) -> str: ...

    @property
    def custom_claims(self) -> Dict[str, str]: ...

    @property
    def disabled(self) -> bool: ...

class UserImportResult:
    def __init__(
            self, result: Dict[str, Any], total: int
    ) -> None: ...


class ListUsersPage: ...

class BatchDeleteAccountsResponse:
    def __init__(
            self, errors: List[Dict[str, Union[int, str]]] = ...
    ) -> None: ...

def create_session_cookie(
        id_token: Optional[str],
        expires_in: Optional[datetime.timedelta],
        app: Optional[App] = ...
) -> str: ...

def update_user(uid: str, **kwargs: Any) -> None: ...

def delete_user(uid: str) -> None: ...

def get_user(uid: str) -> UserRecord: ...

def set_custom_user_claims(
        uid: str,
        custom_claims: Optional[str],
        app: Optional[App] = ...
) -> None: ...

def revoke_refresh_tokens(
        uid: str, app: Optional[App] = ...
) -> None: ...

def verify_session_cookie(
        session_cookie: str,
        check_revoked: bool = ...,
        app: Optional[App] = ...
) -> Dict[str, Any]: ...

class UserNotFoundError(Exception): ...

class ExpiredSessionCookieError(Exception): ...

class RevokedSessionCookieError(Exception): ...

class InvalidIdTokenError(Exception): ...

class UidAlreadyExistsError(Exception): ...

class InternalError(Exception): ...
