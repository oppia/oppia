import datetime
from typing import Any, Dict, List, Optional, Text, Union

from . import App

class UserRecord:
    def __init__(
            self,
            data: Dict[Text, Any]
    ) -> None: ...

    @property
    def uid(self) -> Text: ...

    @property
    def email(self) -> Text: ...

    @property
    def custom_claims(self) -> Dict[Text, Text]: ...

    @property
    def disabled(self) -> bool: ...

class ImportUserRecord:
    @property
    def uid(self) -> Text: ...

    @property
    def email(self) -> Text: ...

    @property
    def custom_claims(self) -> Dict[Text, Text]: ...

    @property
    def disabled(self) -> bool: ...

class UserImportResult:
    def __init__(
            self,
            result: Dict[Text, Any],
            total: int
    ) -> None: ...


class ListUsersPage: ...

class BatchDeleteAccountsResponse:
    def __init__(
            self,
            errors: List[Dict[Text, Union[int, Text]]] = ...
    ) -> None: ...

def create_session_cookie(
        id_token: Optional[Text],
        expires_in: Optional[datetime.timedelta],
        app: Optional[App] = ...
) -> Text: ...

def update_user(uid: Text, **kwargs: Any) -> None: ...

def delete_user(uid: Text) -> None: ...

def get_user(uid: Text) -> UserRecord: ...

def set_custom_user_claims(
        uid: Text,
        custom_claims: Optional[Text],
        app: Optional[App] = ...
) -> None: ...

def revoke_refresh_tokens(
        uid: Text,
        app: Optional[App] = ...
) -> None: ...

def verify_session_cookie(
        session_cookie: Text,
        check_revoked: bool = ...,
        app: Optional[App] = ...
) -> Dict[Text, Any]: ...

class UserNotFoundError(Exception): ...

class ExpiredSessionCookieError(Exception): ...

class RevokedSessionCookieError(Exception): ...

class InvalidIdTokenError(Exception): ...

class UidAlreadyExistsError(Exception): ...

class InternalError(Exception): ...


