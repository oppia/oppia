sudo: required
# In order to install Chrome stable we need trusty distribution.
dist: trusty
language: python
python:
- 2.7

addons:
  browserstack:
    username: $USERNAME
    access_key: $ACCESS_KEY

branches:
  only:
  - master
  - develop
  - /^release-\d+\.\d+\.\d+$/
  - /^release-\d+\.\d+\.\d+-hotfix-\d+$/

env:
  matrix:
    # These lines are commented out because these checks are being run on CircleCI
    # here: https://circleci.com/gh/oppia/oppia
    # - RUN_LINT=true
    # - RUN_FRONTEND_TESTS=true
    # - RUN_BACKEND_TESTS=true REPORT_BACKEND_COVERAGE=false EXCLUDE_LOAD_TESTS=true
    # TODO(sll): Reinstate this when we can get it to run in reasonable time.
    # - RUN_BACKEND_TESTS=true REPORT_BACKEND_COVERAGE=true
    # TODO(sll): Reinstate this when the load tests are more reliable.
    # - RUN_BACKEND_TESTS=true REPORT_BACKEND_COVERAGE=true EXCLUDE_LOAD_TESTS=false
    - RUN_E2E_TESTS_ACCESSIBILITY=true
    - RUN_E2E_TESTS_ADDITIONAL_EDITOR_AND_PLAYER_FEATURES=true
    - RUN_E2E_TESTS_COLLECTIONS=true
    - RUN_E2E_TESTS_CORE_EDITOR_AND_PLAYER_FEATURES=true
    - RUN_E2E_TESTS_EMBEDDING=true
    - RUN_E2E_TESTS_EXPLORATION_FEEDBACK_TAB=true
    - RUN_E2E_TESTS_EXPLORATION_HISTORY_TAB=true
    - RUN_E2E_TESTS_EXPLORATION_STATISTICS_TAB=true
    - RUN_E2E_TESTS_EXPLORATION_TRANSLATION_TAB=true
    - RUN_E2E_TESTS_EXTENSIONS=true
    - RUN_E2E_TESTS_LEARNER_DASHBOARD=true
    - RUN_E2E_TESTS_LEARNER=true
    - RUN_E2E_TESTS_LIBRARY=true
    - RUN_E2E_TESTS_NAVIGATION=true
    - RUN_E2E_TESTS_PREFERENCES=true
    - RUN_E2E_TESTS_PROFILE_MENU=true
    - RUN_E2E_TESTS_PUBLICATION=true
    - RUN_E2E_TESTS_SKILL_EDITOR=true
    - RUN_E2E_TESTS_SUBSCRIPTIONS=true
    - RUN_E2E_TESTS_TOPICS_AND_SKILLS_DASHBOARD=true
    - RUN_E2E_TESTS_TOPIC_AND_STORY_EDITOR=true
    - RUN_E2E_TESTS_USERS=true

matrix:
  allow_failures: []
  fast_finish: true

jobs:
  include:
    # The mobile end-to-end tests are run only for the develop branch as the
    # BrowserStack credentials are stored as encrypted Travis environment
    # variables and are therefore not available for forks of the repository.
    # For more details, refer to https://docs.travis-ci.com/user/environment-variables#encrypting-environment-variables
    if: branch = develop AND type = push
    env: RUN_E2E_TESTS_MOBILE=true

notifications:
  email:
    recipients:
    - sean@seanlip.org
    - nithusha21@yahoo.co.in
    - apurvabajaj007@gmail.com
    - annonymousxyz@outlook.com
    - anubhavsinha98@gmail.com
    - yashjipkate@gmail.com
    on_success: change
    on_failure: change
  irc:
    channels:
    - chat.freenode.net#oppia
    on_success: never
    on_failure: always
  webhooks:
    urls:
    # This URL can be obtained by going to the Gitter chat room
    # and clicking Settings > Integrations.
    - https://webhooks.gitter.im/e/f3865f3ee5e9b40ee871
    on_success: always
    on_failure: always

before_install:
# For the rationale behind the next two lines, see:
#   https://github.com/travis-ci/travis-ci/issues/6928#issuecomment-264227708
- source /opt/jdk_switcher/jdk_switcher.sh
- jdk_switcher use oraclejdk8
- pip install codecov
- pip install pyyaml
- export CHROME_BIN=/usr/bin/google-chrome-stable
- export DISPLAY=:99.0
- bash -e /etc/init.d/xvfb start

install:
- pushd $TRAVIS_BUILD_DIR
- source scripts/setup.sh || exit 1
- source scripts/setup_gae.sh || exit 1
- bash scripts/install_third_party.sh

script:
# These lines are commented out because these checks are being run on CircleCI
# here: https://circleci.com/gh/oppia/oppia
# Travis aborts test run if nothing is printed back to STDOUT for some time.
# -x is used to avoid that.
# - if [ "$RUN_LINT" == 'true' ]; then python scripts/third_party_size_check.py; python scripts/pre_commit_linter.py --path=. --verbose; fi
# - if [ "$RUN_FRONTEND_TESTS" == 'true' ]; then travis_retry bash -x scripts/run_frontend_tests.sh --run-minified-tests=true; fi
# - if [ "$RUN_BACKEND_TESTS" == 'true' ] && [ "$REPORT_BACKEND_COVERAGE" == 'true' ] && [ "$EXCLUDE_LOAD_TESTS" == 'true' ]; then bash scripts/run_backend_tests.sh --generate_coverage_report --exclude_load_tests; fi
# - if [ "$RUN_BACKEND_TESTS" == 'true' ] && [ "$REPORT_BACKEND_COVERAGE" == 'false' ] && [ "$EXCLUDE_LOAD_TESTS" == 'true' ]; then bash scripts/run_backend_tests.sh --exclude_load_tests; fi
# - if [ "$RUN_BACKEND_TESTS" == 'true' ] && [ "$REPORT_BACKEND_COVERAGE" == 'true' ] && [ "$EXCLUDE_LOAD_TESTS" == 'false' ]; then bash scripts/run_backend_tests.sh --generate_coverage_report; fi
# - if [ "$RUN_BACKEND_TESTS" == 'true' ] && [ "$REPORT_BACKEND_COVERAGE" == 'false' ] && [ "$EXCLUDE_LOAD_TESTS" == 'false' ]; then bash scripts/run_backend_tests.sh; fi
# Run e2e tests in production mode.
- if [ "$RUN_E2E_TESTS_ACCESSIBILITY" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="accessibility" --prod_env; fi
- if [ "$RUN_E2E_TESTS_ADDITIONAL_EDITOR_AND_PLAYER_FEATURES" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="additionalEditorAndPlayerFeatures" --prod_env; fi
- if [ "$RUN_E2E_TESTS_COLLECTIONS" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="collections" --prod_env; fi
- if [ "$RUN_E2E_TESTS_CORE_EDITOR_AND_PLAYER_FEATURES" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="coreEditorAndPlayerFeatures" --prod_env; fi
- if [ "$RUN_E2E_TESTS_EMBEDDING" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="embedding" --prod_env; fi
- if [ "$RUN_E2E_TESTS_EXPLORATION_FEEDBACK_TAB" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="explorationFeedbackTab" --prod_env; fi
- if [ "$RUN_E2E_TESTS_EXPLORATION_HISTORY_TAB" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="explorationHistoryTab" --prod_env; fi
- if [ "$RUN_E2E_TESTS_EXPLORATION_STATISTICS_TAB" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="explorationStatisticsTab" --prod_env; fi
- if [ "$RUN_E2E_TESTS_EXPLORATION_TRANSLATION_TAB" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="explorationTranslationTab" --prod_env; fi
- if [ "$RUN_E2E_TESTS_EXTENSIONS" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="extensions" --prod_env; fi
- if [ "$RUN_E2E_TESTS_LEARNER_DASHBOARD" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="learnerDashboard" --prod_env; fi
- if [ "$RUN_E2E_TESTS_LEARNER" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="learner" --prod_env; fi
- if [ "$RUN_E2E_TESTS_LIBRARY" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="library" --prod_env; fi
- if [ "$RUN_E2E_TESTS_NAVIGATION" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="navigation" --prod_env; fi
- if [ "$RUN_E2E_TESTS_PREFERENCES" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="preferences" --prod_env; fi
- if [ "$RUN_E2E_TESTS_PROFILE_MENU" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="profileMenu" --prod_env; fi
- if [ "$RUN_E2E_TESTS_PUBLICATION" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="publication" --prod_env; fi
- if [ "$RUN_E2E_TESTS_SKILL_EDITOR" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="skillEditorPage" --prod_env; fi
- if [ "$RUN_E2E_TESTS_SUBSCRIPTIONS" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="subscriptions" --prod_env; fi
- if [ "$RUN_E2E_TESTS_TOPICS_AND_SKILLS_DASHBOARD" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="topicsAndSkillsDashboard" --prod_env; fi
- if [ "$RUN_E2E_TESTS_TOPIC_AND_STORY_EDITOR" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="topicAndStoryEditor" --prod_env; fi
- if [ "$RUN_E2E_TESTS_USERS" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="users" --prod_env; fi
# Run e2e tests for mobile in dev mode since the demo explorations and collections are only available in the dev mode and not in production mode.
- if [ "$RUN_E2E_TESTS_MOBILE" == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --browserstack; fi

# These lines are commented out because these checks are being run on CircleCI
# here: https://circleci.com/gh/oppia/oppia
# after_success:
# - if [ "$RUN_BACKEND_TESTS" == 'true' ] && [ "$REPORT_BACKEND_COVERAGE" == 'true' ]; then codecov; fi
# - if [ "$RUN_FRONTEND_TESTS" == 'true' ]; then codecov --file ../karma_coverage_reports/coverage-final.json; fi

cache:
  # Cache Oppia's dependencies.
  directories:
    - ../node_modules/
    - ../oppia_tools/
    - third_party/
    - $HOME/.cache/pip
    - $HOME/.cache/TravisChrome/
    - backend_prod_files/templates/head/
    - build/templates/head/
    - backend_prod_files/extensions/
    - build/extensions/

before_cache:
  # Delete python bytecode to prevent cache rebuild.
  - find third_party -name "*.pyc" -print -delete
  - find backend_prod_files/extensions/ -name "*.pyc" -print -delete
