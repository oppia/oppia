sudo: required
# In order to install Chrome stable we need trusty distribution.
dist: trusty
language: python

python:
- 2.7

addons:
  firefox: latest
  apt:
    sources:
      - google-chrome
    packages:
      - google-chrome-stable
      - google-chrome-beta

branches:
  only:
  - master
  - develop

env:
  matrix:
    - RUN_E2E_TESTS_MAIN_EDITOR=true
    - RUN_E2E_TESTS_EDITOR_FEATURES=true
    - RUN_E2E_TESTS_EXTENSIONS=true
    - RUN_E2E_TESTS_LIBRARY=true
    - RUN_E2E_TESTS_MISC=true
    - RUN_E2E_TESTS_I18N=true
    - RUN_BACKEND_TESTS=true REPORT_BACKEND_COVERAGE=false
    - RUN_BACKEND_TESTS=true REPORT_BACKEND_COVERAGE=true
    - RUN_LINT=true
    - RUN_FRONTEND_TESTS=true
    - RUN_PERFORMANCE_TESTS=true
matrix:
  allow_failures:
  # The backend tests, with coverage, take too long to run, so we make this
  # optional.
  - env: RUN_BACKEND_TESTS=true REPORT_BACKEND_COVERAGE=true
  fast_finish: true

notifications:
  email:
    recipients:
    - sean@seanlip.org
    - briggs.brenton@gmail.com
    - wxy.xinyu@gmail.com
    on_success: change
    on_failure: change
  irc:
    channels:
    - chat.freenode.net#oppia
    on_success: never
    on_failure: always
  webhooks:
    urls:
    # This URL can be obtained by going to the Gitter chat room
    # and clicking Settings > Integrations.
    - https://webhooks.gitter.im/e/f8f782497ec1ffcea2e7
    on_success: always
    on_failure: always

before_install:
- pip install codecov
- pip install numpy==1.6.1
- export CHROME_BIN=/usr/bin/google-chrome-stable
- export DISPLAY=:99.0
- bash -e /etc/init.d/xvfb start

install:
- set -e
- pushd $TRAVIS_BUILD_DIR
- source scripts/setup.sh || exit 1
- source scripts/setup_gae.sh || exit 1

script:
- if [ $RUN_E2E_TESTS_MAIN_EDITOR == 'true' ]; then bash scripts/run_e2e_tests.sh --suite="mainEditor"; fi
- if [ $RUN_E2E_TESTS_EDITOR_FEATURES == 'true' ]; then bash scripts/run_e2e_tests.sh --suite="editorFeatures"; fi
- if [ $RUN_E2E_TESTS_EXTENSIONS == 'true' ]; then bash scripts/run_e2e_tests.sh --suite="extensions"; fi
- if [ $RUN_E2E_TESTS_LIBRARY == 'true' ]; then bash scripts/run_e2e_tests.sh --suite="library"; fi
- if [ $RUN_E2E_TESTS_MISC == 'true' ]; then bash scripts/run_e2e_tests.sh --suite="misc"; fi
- if [ $RUN_E2E_TESTS_I18N == 'true' ]; then bash scripts/run_e2e_tests.sh --suite="i18n"; fi
- if [ $RUN_BACKEND_TESTS == 'true' ] && [ $REPORT_BACKEND_COVERAGE == 'true' ]; then bash scripts/run_backend_tests.sh --generate_coverage_report; fi
- if [ $RUN_BACKEND_TESTS == 'true' ] && [ $REPORT_BACKEND_COVERAGE == 'false' ]; then bash scripts/run_backend_tests.sh; fi
- if [ $RUN_LINT == 'true' ]; then bash scripts/install_third_party.sh; python scripts/pre_commit_linter.py --path=.; fi
# Travis aborts test run if nothing is printed back to STDOUT for some time.
# -x is used to avoid that.
- if [ $RUN_FRONTEND_TESTS == 'true' ]; then bash -x scripts/run_frontend_tests.sh --run-minified-tests=true; fi
# TODO(gvishal): add all tests to travis. Running all tests on travis fails currently due to
# unexplained reasons. Sometimes 2-4 out of the total 7 page tests succeed and then the next one
# gets stuck for a long time.
- if [ $RUN_PERFORMANCE_TESTS == 'true' ]; then bash scripts/run_performance_tests.sh --test_name=splash_test; fi

after_success:
- if [ $RUN_BACKEND_TESTS == 'true' ] && [ $REPORT_BACKEND_COVERAGE == 'true' ]; then codecov; fi
- if [ $RUN_FRONTEND_TESTS == 'true' ]; then codecov --file ../karma_coverage_reports/coverage-final.json; fi

cache:
  # Cache Oppia's dependencies.
  directories:
    - ../node_modules/
    - ../oppia_tools/
    - third_party/

before_cache:
  # Delete python bytecode to prevent cache rebuild.
  - find third_party -name "*.pyc" -print -delete
