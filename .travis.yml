sudo: required
# In order to install Chrome stable we need trusty distribution.
dist: trusty
language: python

python:
- 2.7

addons:
  firefox: latest
  apt:
    sources:
      - google-chrome
    packages:
      - google-chrome-stable

branches:
  only:
  - master
  - develop

env:
  matrix:
    # TODO(sll): temporarily disabled for debugging.
    # - RUN_LINT=true
    # - RUN_FRONTEND_TESTS=true
    # - RUN_BACKEND_TESTS=true REPORT_BACKEND_COVERAGE=false EXCLUDE_LOAD_TESTS=true
    # TODO(sll): Reinstate this when we can get it to run in reasonable time.
    # - RUN_BACKEND_TESTS=true REPORT_BACKEND_COVERAGE=true
    # TODO(sll): Reinstate this when the load tests are more reliable.
    # - RUN_BACKEND_TESTS=true REPORT_BACKEND_COVERAGE=true EXCLUDE_LOAD_TESTS=false
    - RUN_E2E_TESTS_EDITOR_AND_PLAYER=true
    - RUN_E2E_TESTS_STATE_EDITOR=true
    - RUN_E2E_TESTS_EXPLORATION_FEEDBACK=true
    - RUN_E2E_TESTS_HISTORY_TAB=true
    - RUN_E2E_TESTS_PARAMETERS=true
    # TODO(sll): add more stuff here, or rather, consolidate these into files.
matrix:
  allow_failures: []
  fast_finish: true

notifications:
  email:
    recipients:
    - sean@seanlip.org
    - henning.benmax@gmail.com
    - tzjiang1@gmail.com
    on_success: change
    on_failure: change
  irc:
    channels:
    - chat.freenode.net#oppia
    on_success: never
    on_failure: always
  webhooks:
    urls:
    # This URL can be obtained by going to the Gitter chat room
    # and clicking Settings > Integrations.
    - https://webhooks.gitter.im/e/f8f782497ec1ffcea2e7
    on_success: always
    on_failure: always

before_install:
# For the rationale behind the next two lines, see:
#   https://github.com/travis-ci/travis-ci/issues/6928#issuecomment-264227708
- source /opt/jdk_switcher/jdk_switcher.sh
- jdk_switcher use oraclejdk8
- pip install codecov
- pip install pyyaml
- export CHROME_BIN=/usr/bin/google-chrome-stable
- export DISPLAY=:99.0
- bash -e /etc/init.d/xvfb start

install:
- pushd $TRAVIS_BUILD_DIR
- source scripts/setup.sh || exit 1
- source scripts/setup_gae.sh || exit 1

script:
- if [ $RUN_LINT == 'true' ]; then bash scripts/install_third_party.sh; python scripts/pre_commit_linter.py --path=.; fi
# Travis aborts test run if nothing is printed back to STDOUT for some time.
# -x is used to avoid that.
- if [ $RUN_FRONTEND_TESTS == 'true' ]; then travis_retry bash -x scripts/run_frontend_tests.sh --run-minified-tests=true; fi
- if [ $RUN_BACKEND_TESTS == 'true' ] && [ $REPORT_BACKEND_COVERAGE == 'true' ] && [ $EXCLUDE_LOAD_TESTS == 'true' ]; then bash scripts/run_backend_tests.sh --generate_coverage_report --exclude_load_tests; fi
- if [ $RUN_BACKEND_TESTS == 'true' ] && [ $REPORT_BACKEND_COVERAGE == 'false' ] && [ $EXCLUDE_LOAD_TESTS == 'true' ]; then bash scripts/run_backend_tests.sh --exclude_load_tests; fi
- if [ $RUN_BACKEND_TESTS == 'true' ] && [ $REPORT_BACKEND_COVERAGE == 'true' ] && [ $EXCLUDE_LOAD_TESTS == 'false' ]; then bash scripts/run_backend_tests.sh --generate_coverage_report; fi
- if [ $RUN_BACKEND_TESTS == 'true' ] && [ $REPORT_BACKEND_COVERAGE == 'false' ] && [ $EXCLUDE_LOAD_TESTS == 'false' ]; then bash scripts/run_backend_tests.sh; fi
# Run e2e tests in production mode.
- if [ $RUN_E2E_TESTS_EDITOR_AND_PLAYER == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="editorAndPlayer" --prod_env; fi
- if [ $RUN_E2E_TESTS_STATE_EDITOR == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="stateEditor" --prod_env; fi
- if [ $RUN_E2E_TESTS_EXPLORATION_FEEDBACK == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="explorationFeedback" --prod_env; fi
- if [ $RUN_E2E_TESTS_HISTORY_TAB == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="historyTab" --prod_env; fi
- if [ $RUN_E2E_TESTS_PARAMETERS == 'true' ]; then travis_retry bash scripts/run_e2e_tests.sh --suite="parameters" --prod_env; fi

after_success:
- if [ $RUN_BACKEND_TESTS == 'true' ] && [ $REPORT_BACKEND_COVERAGE == 'true' ]; then codecov; fi
- if [ $RUN_FRONTEND_TESTS == 'true' ]; then codecov --file ../karma_coverage_reports/coverage-final.json; fi

cache:
  # Cache Oppia's dependencies.
  directories:
    - ../node_modules/
    - ../oppia_tools/
    - third_party/

before_cache:
  # Delete python bytecode to prevent cache rebuild.
  - find third_party -name "*.pyc" -print -delete
