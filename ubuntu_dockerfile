# Copyright 2019 The Oppia Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use latest version of Ubuntu that supports python 2
# If the build fails with the following error:
#   "error from sender: permission denied"
# then run the following command:
#   sudo python3 -m scripts.clean
FROM ubuntu:18.04

ENV DEBIAN_FRONTEND noninteractive
ENV TZ "UTC"
ENV LANG ru_RU.UTF-8
ENV LC_ALL ru_RU.UTF-8
ENV IS_DOCKER_CONTAINER "True"
SHELL ["/bin/bash", "-c"]

# Basic setup
RUN apt-get update && \
    apt-get install -y sudo && \
    apt-get install -y vim && \
    apt-get install -y wget && \
    apt-get install -y xvfb && \
    apt-get install -y git && \
    apt-get install -y nodejs && \
    apt-get install -y npm && \
    apt-get install -y yes && \
    apt install -y tzdata && \
    apt install -y tree && \
    apt install -y python-pip && \
    apt-get install -y make && \
    apt-get install -y build-essential && \
    apt-get install -y libssl-dev && \
    apt-get install -y zlib1g-dev && \
    apt-get install -y libbz2-dev && \
    apt-get install -y libreadline-dev && \
    apt-get install -y libsqlite3-dev && \
    apt-get install -y wget && \
    apt-get install -y llvm && \
    apt-get install -y libncursesw5-dev && \
    apt-get install -y xz-utils && \
    apt-get install -y tk-dev && \
    apt-get install -y libxml2-dev && \
    apt-get install -y libxmlsec1-dev && \
    apt-get install -y libffi-dev && \
    apt-get install -y liblzma-dev && \
    apt-get clean

# Install python3.7.14
RUN : \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        software-properties-common \
    && add-apt-repository -y ppa:deadsnakes \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        python3.8-venv \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && :

RUN python3.8 -m venv /home/venv
ENV PATH=/home/venv/bin:$PATH

# Fix certificate issues
RUN apt-get update && \
    apt-get -y install ca-certificates-java && \
    apt-get clean && \
    update-ca-certificates -f

# Setup JAVA_HOME
ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/
ENV PATH $PATH:$JAVA_HOME/bin
RUN export JAVA_HOME

# Install dumb-init (Signal handling of SIGINT/SIGTERM/SIGKILL and all other unhandled signals)
# When a process is executed in a Docker container, it is given a PID of 1. Linux kernels give
# special permissions to the process with a PID of 1. In particular, if the process does not handle
# a specific signal, then it will not respond to that signal. Unhandled signals for processes of
# PID other than 1 are set to the default response for the signal. So, we install dumb-init as a
# reliable process for the Linux kernel to give special permissions to. dumb-init then executes all
# other processes as child processes (PID other than 1), such that their unhandled signals are
# automatically handled as expected.
RUN wget https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb
RUN dpkg -i dumb-init_*.deb
ENTRYPOINT ["dumb-init"]

# Download Google Chrome
RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
RUN apt install -y ./google-chrome-stable_current_amd64.deb

WORKDIR /home/opensource/oppia

COPY ./ /home/opensource/oppia/
RUN yes | bash /home/opensource/oppia/scripts/install_prerequisites.sh

# Note: Attempts to grant file permissions to the docker user.
# # Allow docker to have sudo privileges
# RUN useradd -m docker && echo "docker:docker" | chpasswd && adduser docker sudo
# # Ensure sudo group users are not 
# # asked for a password when using 
# # sudo command by ammending sudoers file
# RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> \
# /etc/sudoers
# USER docker

# Grant read and write permissions to the /home/opensource/ directory
RUN chmod -R o-rwx /home/opensource/*
RUN chown :1000 /home/opensource/ && \
    chmod -R 775 /home/opensource/ && \
    chmod -R go=rwx /home/opensource/

RUN useradd -m docker && echo "docker:docker" | chpasswd && adduser docker sudo
# Ensure sudo group users are not 
# asked for a password when using 
# sudo command by ammending sudoers file
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> \
/etc/sudoers
USER docker

RUN git config --global --add safe.directory /home/opensource/oppia

# RUN addgroup --gid 1000 dockergrp
# # add user to the docker group
# RUN useradd -m docker && echo "docker:docker" | chpasswd && adduser docker dockergrp
# USER docker

# Warning: The below steps will not work unless permission are granted to the /home/opensource/ directory.
# Install python dependencies and for backend tests and check coverage.
# RUN source /home/opensource/venv/bin/activate && \
    # pip install wheel==0.35.0 pyyaml setuptools coverage configparser pip-tools && \
    # python -m scripts.install_third_party_libs && \
    # rm -r /home/opensource/oppia/*

# RUN rm -r /home/opensource/oppia/*

# (Narrow down the list of files for which permissions are to be given for.sl)
# Once you're in run `sudo chmod -R go=rwx /home/` to give execution permissions
# Try sudo chmod -R go=x /home/venv/ to give execution permissions to the venv directory
# Try sudo chmod -R go=rw /home/opensource/ to give execution permissions to the oppia directory
# and `python -m scripts.start --no_browser` to start the server.
