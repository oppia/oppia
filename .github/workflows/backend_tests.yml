name: Backend tests
on:
  push:
    branches:
      - develop
      - release-*
  pull_request:
    branches:
      - develop
      - release-*

jobs:
  run_tests:
    name: Run backend tests
    runs-on:  ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        shard: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '2.x'
          architecture: 'x64'
      - name: Setup python by installing wheel
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: pip install wheel==0.35.0
      - name: Install third party
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: python -m scripts.install_third_party_libs
      - name: Install packages for optimized coverage
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: sudo apt-get install -y python-dev gcc
      - name: Install coverage and configparser
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: pip install coverage configparser
      - name: Run backend test shard
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: PYTHONIOENCODING=utf-8 python -m scripts.run_backend_tests --generate_coverage_report --ignore_coverage --exclude_load_tests --test_shard ${{ matrix.shard }}
      - name: Upload coverage report
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/upload-artifact@v2
        with:
          name: ${{ format('backend_test_coverage_shard_{0}', matrix.shard) }}
          path: .coverage
  check_combined_coverage:
    name: Check combined backend test coverage
    needs: run_tests
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '2.x'
          architecture: 'x64'
      - name: Setup python by installing wheel
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: pip install wheel==0.35.0
      # We need this so that we can check coverage of autogenerated code
      - name: Install third party
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: python -m scripts.install_third_party_libs
      - name: Install coverage
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: pip install coverage
      - name: Download coverage report for shard 1
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_1
          path: coverage/coverage_1
      - name: Download coverage report for shard 2
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_2
          path: coverage/coverage_2
      - name: Download coverage report for shard 3
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_3
          path: coverage/coverage_3
      - name: Download coverage report for shard 4
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_4
          path: coverage/coverage_4
      - name: Download coverage report for shard 5
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_5
          path: coverage/coverage_5
      - name: Download coverage report for shard 6
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_6
          path: coverage/coverage_6
      - name: Download coverage report for shard 7
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_7
          path: coverage/coverage_7
      - name: Download coverage report for shard 8
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_8
          path: coverage/coverage_8
      - name: Download coverage report for shard 9
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_9
          path: coverage/coverage_9
      - name: Download coverage report for shard 10
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_10
          path: coverage/coverage_10
      - name: Download coverage report for shard 11
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        uses: actions/download-artifact@v2
        with:
          name: backend_test_coverage_shard_11
          path: coverage/coverage_11
      - name: Move coverage reports from artifact folders to coverage folder
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        shell: bash
        run: |
          for i in {1..11}; do cp coverage/coverage_$i/.coverage coverage/.coverage.$i; done
      - name: Combine coverage reports
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        shell: bash
        run: coverage combine coverage/.coverage.*
      - name: Check coverage
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        shell: bash
        run: coverage report --fail-under 100 -m
