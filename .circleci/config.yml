version: 2.1

workflows:
  circleci_tests:
    # The following jobs run in the following stages:
    # - Setup runs first.
    # - After setup passes, lint and frontend tests run.
    #     - If frontend tests fail, stop and do not run the next step, but lint continues.
    # - After frontend tests passes, backend and typescript tests run.
    #     - If typescript tests fail, stop and do not run the next step, but backend continues.
    # - After typescript tests passes, the flagship e2e tests (navigation and file upload) run. We run
    #   these tests as sanity checks before running the entire test suite. Note that the navigation e2e
    #   test also compiles all the prod files needed for other prod e2e tests.
    #     - If either flagship e2e tests fail, then the rest of the e2e tests in the the corresponding
    #       suite will not run.
    # - After file upload e2e test passes, all other non-prod e2e tests run in parallel.
    # - After navigation e2e test passes, all other prod e2e tests run in parallel.
    # For an illustration of the stages, see https://github.com/oppia/oppia/wiki/images/circleCIWorkflow.png.

    jobs:
      - setup_and_typescript_tests
      - e2e_new_structure_tests:
          requires:
            - e2e_library
      - e2e_library:
          requires:
            - setup_and_typescript_tests

var_for_docker_image: &docker_image circleci/python:2.7.17-browsers

anchor_for_job_defaults: &job_defaults
  working_directory: /home/circleci/oppia
  docker:
    - image: *docker_image

commands:
  install_chrome:
    # Chrome version installed should be consistent with that installed on Github Actions.
    description: "Install Chrome"
    steps:
      - run:
          name: Install chrome
          command: python -m scripts.install_chrome_for_ci

  merge_target_branch:
    description: "Merge to target branch"
    steps:
      - run:
          name: Merge to target branch
          command: |
            if [[ -n ${CIRCLE_PULL_REQUEST} ]]
            then

              git config --global user.email "$( git log --format='%ae' $CIRCLE_SHA1^! )"
              git config --global user.name "$( git log --format='%an' $CIRCLE_SHA1^! )"

              regexp="[[:digit:]]\+$"
              PR_NUMBER=`echo $CIRCLE_PULL_REQUEST | grep -o $regexp`

              curl -L "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" -o jq
              chmod +x jq

              url="https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER?access_token=$GITHUB_TOKEN"

              target_branch=$(
                curl "$url" | ./jq '.base.ref' | tr -d '"'
              )

              rm jq
              if [[ "$target_branch" == null ]]
              then
                git pull git@github.com:oppia/oppia.git develop --no-edit
              else
                git pull origin $target_branch --no-edit
              fi
            fi
  
  check_memory_usage:
    description: "Checking max memory usage to debug out-of-memory issues"
    steps:
      - run:
          name: Checking Memory Usage
          command: cat /sys/fs/cgroup/memory/memory.max_usage_in_bytes

  skip_for_low_risk_prs:
    description: "Skip job for low-risk PRs"
    steps:
      - run:
          name: Skip build for low-risk PRs
          command: |
            if python -m scripts.check_if_pr_is_low_risk ${CIRCLE_PULL_REQUEST}; then
              circleci-agent step halt
            fi

  upload_screenshots:
    description: "Upload protractor screenshots folder as an artifact"
    steps:
      - store_artifacts:
          path: /home/circleci/protractor-screenshots/
          destination: protractor-screenshots

jobs:
  setup_and_typescript_tests:
    <<: *job_defaults
    steps:
      - checkout
      - merge_target_branch
      - run:
          name: Setup python by installing wheel
          command: pip install wheel==0.35.0
      - run:
          name: Install dependencies
          command: python -m scripts.install_third_party_libs
      - run:
          name: Check that all e2e test files are captured in protractor.conf.js
          command: python -m scripts.check_e2e_tests_are_captured_in_ci
      - run:
          name: Run typescript tests
          command: |
            python -m scripts.typescript_checks
      - run:
          name: Run typescript tests in strict mode
          command: |
            python -m scripts.typescript_checks --strict_checks
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - oppia/extensions/classifiers/proto
            - oppia/proto/
            - oppia/node_modules/
            - oppia/third_party/
            - oppia_tools/
      - upload_screenshots

  # Production environment e2e tests
  # The following e2e tests are run in the production environment. Tests that require uploading files
  # should be run in the non-prod environment.
  e2e_library:
    <<: *job_defaults
    steps:
      - checkout
      - merge_target_branch
      - attach_workspace:
          at: /home/circleci/
      - run:
          name: Set up python by installing protobuf and enum
          command: pip install enum34==1.1.10 protobuf==3.13.0
      - install_chrome
      - skip_for_low_risk_prs
      - run:
          name: Run e2e library test
          command: |
            python -m scripts.run_e2e_tests --skip-install --deparallelize_terser --suite="library" --prod_env
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - oppia/app.yaml
            - oppia/assets/constants.ts
            - oppia/assets/hashes.json
            - oppia/backend_prod_files/
            - oppia/build/
            - oppia/third_party/generated/
      - upload_screenshots
      - check_memory_usage

  e2e_new_structure_tests:
    <<: *job_defaults
    steps:
      - checkout
      - merge_target_branch
      - attach_workspace:
          at: /home/circleci/
      - run:
          name: Set up python by installing protobuf and enum
          command: pip install enum34==1.1.10 protobuf==3.13.0
      - skip_for_low_risk_prs
      - install_chrome
      - run:
          name: Run e2e topics and skills dashboard test
          command: |
            python -m scripts.run_e2e_tests --skip-install --skip-build --suite="topicsAndSkillsDashboard" --prod_env
      - run:
          name: Run e2e topics and story editor
          command: |
            python -m scripts.run_e2e_tests --skip-install --skip-build --suite="topicAndStoryEditor" --prod_env
      - run:
          name: Run e2e topic and story editor test
          command: |
            python -m scripts.run_e2e_tests --skip-install --skip-build --suite="topicAndStoryEditorFileUploadFeatures" --prod_env
      - run:
          name: Run e2e topic and story viewer test
          command: |
            python -m scripts.run_e2e_tests --skip-install --skip-build --suite="topicAndStoryViewer" --prod_env
      - upload_screenshots
      - check_memory_usage

notify:
  webhooks:
    # A list of hook hashes, containing the url field
    # gitter hook
    - url: https://webhooks.gitter.im/e/71ac71505d1d45161035
